[
  {
    "owner": "dotnet",
    "repo": "docs-maui",
    "content": "TITLE: Composing an Email in .NET MAUI\nDESCRIPTION: This C# code demonstrates how to compose and send an email using the IEmail interface in .NET MAUI. It creates an EmailMessage object with recipient, subject, and body information and then uses Email.Default.ComposeAsync() to open the email application with the pre-filled message. The EmailMessage type encapsulates email information.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/email.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar message = new EmailMessage\n{\n    Subject = \"Hello world!\",\n    Body = \"Hello .NET MAUI!\",\n    BodyFormat = EmailBodyFormat.Html,\n    To = new List<string>() { \"to@example.com\" },\n    Cc = new List<string>() { \"cc@example.com\" },\n    Bcc = new List<string>() { \"bcc@example.com\" }\n};\n\nawait Email.Default.ComposeAsync(message);\n```\n\n----------------------------------------\n\nTITLE: Populating ListView with Data using XAML Binding\nDESCRIPTION: This code snippet demonstrates how to populate a .NET MAUI ListView with data using data binding in XAML.  The `ItemsSource` property of the ListView is bound to the `Monkeys` property of a ViewModel.  This requires a ViewModel with a property named `Monkeys` that implements `IEnumerable`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies in MauiProgram.cs - C#\nDESCRIPTION: This code snippet demonstrates how to register dependencies with the .NET MAUI dependency injection container using the `MauiAppBuilder` in the `CreateMauiApp` method within the `MauiProgram` class. It registers services, view models, and views with transient and singleton lifetimes. It also adds debug logging for debug builds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        builder.Services.AddTransient<ILoggingService, LoggingService>();\n        builder.Services.AddTransient<ISettingsService, SettingsService>();\n        builder.Services.AddSingleton<MainPageViewModel>();\n        builder.Services.AddSingleton<MainPage>();\n\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubmitCommand in MAUI\nDESCRIPTION: This code snippet shows the implementation of the `SubmitCommand` within the `PersonCollectionViewModel`. The `execute` method adds the `PersonEdit` object to the `Persons` collection, removes the property changed handler, and resets the editing state. The `canExecute` method checks if the `PersonEdit` object is not null, the `Name` property has at least two characters, and the `Age` is greater than 0. The `SubmitCommand` constructor takes the `execute` and `canExecute` delegates as parameters.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class PersonCollectionViewModel : INotifyPropertyChanged\n{\n    ···\n    public PersonCollectionViewModel()\n    {\n        ···\n        SubmitCommand = new Command(\n            execute: () =>\n            {\n                Persons.Add(PersonEdit);\n                PersonEdit.PropertyChanged -= OnPersonEditPropertyChanged;\n                PersonEdit = null;\n                IsEditing = false;\n                RefreshCanExecutes();\n            },\n            canExecute: () =>\n            {\n                return PersonEdit != null &&\n                       PersonEdit.Name != null &&\n                       PersonEdit.Name.Length > 1 &&\n                       PersonEdit.Age > 0;\n            });\n        ···\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Notification Service C#\nDESCRIPTION: This code implements the `NotificationHubService` class, which is a concrete implementation of the `INotificationService` interface. It utilizes the `Microsoft.Azure.NotificationHubs` library to interact with Azure Notification Hubs.  It handles creating/updating device installations, deleting installations, and sending push notifications to specified platforms using platform-specific payloads. It relies on configuration via `IOptions<NotificationHubOptions>` for connecting to the Notification Hub. This class is part of the `PushNotificationsAPI.Services` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Options;\nusing Microsoft.Azure.NotificationHubs;\nusing PushNotificationsAPI.Models;\n\nnamespace PushNotificationsAPI.Services;\n\npublic class NotificationHubService : INotificationService\n{\n    readonly NotificationHubClient _hub;\n    readonly Dictionary<string, NotificationPlatform> _installationPlatform;\n    readonly ILogger<NotificationHubService> _logger;\n\n    public NotificationHubService(IOptions<NotificationHubOptions> options, ILogger<NotificationHubService> logger)\n    {\n        _logger = logger;\n        _hub = NotificationHubClient.CreateClientFromConnectionString(options.Value.ConnectionString, options.Value.Name);\n\n        _installationPlatform = new Dictionary<string, NotificationPlatform>\n        {\n            { nameof(NotificationPlatform.Apns).ToLower(), NotificationPlatform.Apns },\n            { nameof(NotificationPlatform.FcmV1).ToLower(), NotificationPlatform.FcmV1 }\n        };\n    }\n\n    public async Task<bool> CreateOrUpdateInstallationAsync(DeviceInstallation deviceInstallation, CancellationToken token)\n    {\n        if (string.IsNullOrWhiteSpace(deviceInstallation?.InstallationId) ||\n            string.IsNullOrWhiteSpace(deviceInstallation?.Platform) ||\n            string.IsNullOrWhiteSpace(deviceInstallation?.PushChannel))\n            return false;\n\n        var installation = new Installation()\n        {\n            InstallationId = deviceInstallation.InstallationId,\n            PushChannel = deviceInstallation.PushChannel,\n            Tags = deviceInstallation.Tags\n        };\n\n        if (_installationPlatform.TryGetValue(deviceInstallation.Platform, out var platform))\n            installation.Platform = platform;\n        else\n            return false;\n\n        try\n        {\n            await _hub.CreateOrUpdateInstallationAsync(installation, token);\n        }\n        catch\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> DeleteInstallationByIdAsync(string installationId, CancellationToken token)\n    {\n        if (string.IsNullOrWhiteSpace(installationId))\n            return false;\n\n        try\n        {\n            await _hub.DeleteInstallationAsync(installationId, token);\n        }\n        catch\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> RequestNotificationAsync(NotificationRequest notificationRequest, CancellationToken token)\n    {\n        if ((notificationRequest.Silent &&\n            string.IsNullOrWhiteSpace(notificationRequest?.Action)) ||\n            (!notificationRequest.Silent &&\n            (string.IsNullOrWhiteSpace(notificationRequest?.Text)) ||\n            string.IsNullOrWhiteSpace(notificationRequest?.Action)))\n            return false;\n\n        var androidPushTemplate = notificationRequest.Silent ?\n            PushTemplates.Silent.Android :\n            PushTemplates.Generic.Android;\n\n        var iOSPushTemplate = notificationRequest.Silent ?\n            PushTemplates.Silent.iOS :\n            PushTemplates.Generic.iOS;\n\n        var androidPayload = PrepareNotificationPayload(\n            androidPushTemplate,\n            notificationRequest.Text,\n            notificationRequest.Action);\n\n        var iOSPayload = PrepareNotificationPayload(\n            iOSPushTemplate,\n            notificationRequest.Text,\n            notificationRequest.Action);\n\n        try\n        {\n            if (notificationRequest.Tags.Length == 0)\n            {\n                // This will broadcast to all users registered in the notification hub\n                await SendPlatformNotificationsAsync(androidPayload, iOSPayload, token);\n            }\n            else if (notificationRequest.Tags.Length <= 20)\n            {\n                await SendPlatformNotificationsAsync(androidPayload, iOSPayload, notificationRequest.Tags, token);\n            }\n            else\n            {\n                var notificationTasks = notificationRequest.Tags\n                    .Select((value, index) => (value, index))\n                    .GroupBy(g => g.index / 20, i => i.value)\n                    .Select(tags => SendPlatformNotificationsAsync(androidPayload, iOSPayload, tags, token));\n\n                await Task.WhenAll(notificationTasks);\n            }\n\n            return true;\n        }\n        catch (Exception e)\n        {\n            _logger.LogError(e, \"Unexpected error sending notification\");\n            return false;\n        }\n    }\n\n    string PrepareNotificationPayload(string template, string text, string action) => template\n        .Replace(\"$(alertMessage)\", text, StringComparison.InvariantCulture)\n        .Replace(\"$(alertAction)\", action, StringComparison.InvariantCulture);\n\n    Task SendPlatformNotificationsAsync(string androidPayload, string iOSPayload, CancellationToken token)\n    {\n        var sendTasks = new Task[]\n        {\n            _hub.SendFcmV1NativeNotificationAsync(androidPayload, token),\n            _hub.SendAppleNativeNotificationAsync(iOSPayload, token)\n        };\n\n        return Task.WhenAll(sendTasks);\n    }\n\n    Task SendPlatformNotificationsAsync(string androidPayload, string iOSPayload, IEnumerable<string> tags, CancellationToken token)\n    {\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Context and Activity (C#)\nDESCRIPTION: This code snippet demonstrates how to access the current Android `Context` and `Activity` using the `Platform` class in .NET MAUI.  `Platform.AppContext` provides the current app context, while `Platform.CurrentActivity` gives access to the current activity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = Platform.AppContext;\n\n// Current Activity or null if not initialized or not started.\nvar activity = Platform.CurrentActivity;\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Options (net-maui-8.0 to net-maui-9.0) in .NET MAUI C#\nDESCRIPTION: This C# code shows how to use the SpeechOptions class to customize the text-to-speech output. It demonstrates setting the Volume, Pitch, and Locale for the utterance. GetLocalesAsync() retrieves a collection of available locales provided by the operating system. This snippet works for .NET MAUI versions between 8.0 and 9.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar locales = await TextToSpeech.Default.GetLocalesAsync();\nvar options = new SpeechOptions()\n{\n    Volume = .75f,\n    Pitch = 1.0f,\n    Locale = locales.FirstOrDefault()\n};\n\nawait TextToSpeech.Default.SpeakAsync(\"Hello World\", options);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data via GET C#\nDESCRIPTION: Retrieves a list of `TodoItem` objects from a REST web service using `HttpClient.GetAsync`. It sends a GET request to the specified URI, reads the response content as a string, and deserializes the JSON string into a `List<TodoItem>`.  Error handling is included to catch exceptions during the process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<List<TodoItem>> RefreshDataAsync()\n{\n    Items = new List<TodoItem>();\n\n    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));\n    try\n    {\n        HttpResponseMessage response = await _client.GetAsync(uri);\n        if (response.IsSuccessStatusCode)\n        {\n            string content = await response.Content.ReadAsStringAsync();\n            Items = JsonSerializer.Deserialize<List<TodoItem>>(content, _serializerOptions);\n        }\n    }\n    catch (Exception ex)\n    {\n        Debug.WriteLine(@\"\\tERROR {0}\", ex.Message);\n    }\n\n    return Items;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Map App to Specific Location - C#\nDESCRIPTION: This C# code snippet demonstrates how to launch the native map application on iOS, Android, and Windows to display a specific location. It uses the Launcher.OpenAsync method with platform-specific URI schemes to open the map app with a pin at the provided address. Requires Microsoft.Maui.ApplicationModel and Microsoft.Maui.Devices namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nif (DeviceInfo.Current.Platform == DevicePlatform.iOS || DeviceInfo.Current.Platform == DevicePlatform.MacCatalyst)\n{\n    // https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/MapLinks/MapLinks.html\n    await Launcher.OpenAsync(\"http://maps.apple.com/?q=394+Pacific+Ave+San+Francisco+CA\");\n}\nelse if (DeviceInfo.Current.Platform == DevicePlatform.Android)\n{\n    // opens the Maps app directly\n    await Launcher.OpenAsync(\"geo:0,0?q=394+Pacific+Ave+San+Francisco+CA\");\n}\nelse if (DeviceInfo.Current.Platform == DevicePlatform.WinUI)\n{\n    await Launcher.OpenAsync(\"bingmaps:?where=394 Pacific Ave San Francisco CA\");\n}\n```\n\n----------------------------------------\n\nTITLE: Create App Actions outside of the startup bootstrap\nDESCRIPTION: This code shows creating and setting app actions outside of the app's startup phase.  It creates two `AppAction` instances with different IDs, titles and icons and then uses `AppActions.SetAsync` to set them. This allows creating shortcuts dynamically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-actions.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async void SetAppActions()\n{\n\ttry\n\t{\n\t\tif (AppActions.Current.IsSupported)\n\t\t{\n\t\t\tawait AppActions.Current.SetAsync(new AppAction[] { \n\t\t\t\tnew AppAction(\"favorites\", \"View Favorites\", icon: \"favorite_icon\"),\n\t\t\t\tnew AppAction(\"add_bookmark\", \"Add Bookmark\", \"Bookmark the current page\", icon: \"bookmark_icon\")\n\t\t\t});\n\t\t}\n\t}\n\tcatch (FeatureNotSupportedException ex)\n\t{\n\t\t// App Actions not supported on device\n\t}\n\tcatch (Exception ex)\n\t{\n\t\t// Other error has occurred.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Data Manipulation Methods for SQLite in C#\nDESCRIPTION: This C# code demonstrates how to perform basic CRUD operations (Create, Read, Update, Delete) on a SQLite database using the SQLite-net library. The methods include retrieving all items, retrieving incomplete items, retrieving an item by ID, saving an item (inserting or updating), and deleting an item. These methods are part of the TodoItemDatabase class and use asynchronous operations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TodoItemDatabase\n{\n    ...\n    public async Task<List<TodoItem>> GetItemsAsync()\n    {\n        await Init();\n        return await database.Table<TodoItem>().ToListAsync();\n    }\n\n    public async Task<List<TodoItem>> GetItemsNotDoneAsync()\n    {\n        await Init();\n        return await database.Table<TodoItem>().Where(t => t.Done).ToListAsync();\n\n        // SQL queries are also possible\n        //return await Database.QueryAsync<TodoItem>(\"SELECT * FROM [TodoItem] WHERE [Done] = 0\");\n    }\n\n    public async Task<TodoItem> GetItemAsync(int id)\n    {\n        await Init();\n        return await database.Table<TodoItem>().Where(i => i.ID == id).FirstOrDefaultAsync();\n    }\n\n    public async Task<int> SaveItemAsync(TodoItem item)\n    {\n        await Init();\n        if (item.ID != 0)\n            return await database.UpdateAsync(item);\n        else\n            return await database.InsertAsync(item);\n    }\n\n    public async Task<int> DeleteItemAsync(TodoItem item)\n    {\n        await Init();\n        return await database.DeleteAsync(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Send and Receive Local Notifications\nDESCRIPTION: This code snippet shows how to send and receive local notifications using the `INotificationManagerService` interface. It demonstrates sending immediate and scheduled notifications, as well as subscribing to the `NotificationReceived` event to handle incoming notifications. The event handler extracts the notification title and message and performs a UI update on the main thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Send\nnotificationManager.SendNotification();\n\n// Scheduled send\nnotificationManager.SendNotification(\"Notification title goes here\", \"Notification messages goes here.\", DateTime.Now.AddSeconds(10));\n\n// Receive\nnotificationManager.NotificationReceived += (sender, eventArgs) =>\n{\n    var eventData = (NotificationEventArgs)eventArgs;\n\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        // Take required action in the app once the notification has been received.\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Notes into ObservableCollection in .NET MAUI\nDESCRIPTION: This C# snippet defines the AllNotes model with an ObservableCollection named 'Notes' to store Note objects.  It includes a LoadNotes method that reads note files from the device's storage, transforms them into Note objects, sorts them by date, and populates the Notes collection. This allows for dynamic updates to the UI when the collection changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.ObjectModel;\n\nnamespace Notes.Models;\n\ninternal class AllNotes\n{\n    public ObservableCollection<Note> Notes { get; set; } = new ObservableCollection<Note>();\n\n    public AllNotes()\n    {\n        LoadNotes();\n    }\n\n    public void LoadNotes()\n    {\n        Notes.Clear();\n\n        // Get the folder where the notes are stored.\n        string appDataPath = FileSystem.AppDataDirectory;\n\n        // Use Linq extensions to load the *.notes.txt files.\n        IEnumerable<Note> notes = Directory\n\n                                    // Select the file names from the directory\n                                    .EnumerateFiles(appDataPath, \"*.notes.txt\")\n\n                                    // Each file name is used to create a new Note\n                                    .Select(filename => new Note()\n                                    {\n                                        Filename = filename,\n                                        Text = File.ReadAllText(filename),\n                                        Date = File.GetCreationTime(filename)\n                                    })\n\n                                    // With the notes ordered by date\n                                    .OrderBy(note => note.Date);\n\n        // Add every note to the collection\n        foreach (Note note in notes)\n            Notes.Add(note);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Command Binding XAML\nDESCRIPTION: This code snippet shows how to bind the Command property of a Button to an ICommand property named MyCommand in the viewmodel. When the button is clicked, the Execute method of the bound ICommand will be called.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"Execute command\"\n        Command=\"{Binding MyCommand}\" />\n```\n\n----------------------------------------\n\nTITLE: FlyoutHeader Control Definition (XAML)\nDESCRIPTION: This XAML snippet defines the structure and appearance of a custom FlyoutHeader control in a .NET MAUI application, including an image and a label with specified text, color, and font attributes. This control is used as the content for the Shell.FlyoutHeader property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentView xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Xaminals.Controls.FlyoutHeader\"\n             HeightRequest=\"200\">\n    <Grid BackgroundColor=\"Black\">\n        <Image Aspect=\"AspectFill\"\n               Source=\"store.jpg\"\n               Opacity=\"0.6\" />\n        <Label Text=\"Animals\"\n               TextColor=\"White\"\n               FontAttributes=\"Bold\"\n               HorizontalTextAlignment=\"Center\"\n               VerticalTextAlignment=\"Center\" />\n    </Grid>\n</ContentView>\n```\n\n----------------------------------------\n\nTITLE: Define C# Methods for JavaScript Invocation\nDESCRIPTION: This C# code defines several public methods, including synchronous and asynchronous methods with and without parameters and return values. These methods are designed to be invoked from JavaScript code within the `HybridWebView` control, demonstrating bidirectional communication between JavaScript and C#.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    ...  \n\n    public void DoSyncWork()\n    {\n        Debug.WriteLine(\"DoSyncWork\");\n    }\n\n    public void DoSyncWorkParams(int i, string s)\n    {\n        Debug.WriteLine($\"DoSyncWorkParams: {i}, {s}\");\n    }\n\n    public string DoSyncWorkReturn()\n    {\n        Debug.WriteLine(\"DoSyncWorkReturn\");\n        return \"Hello from C#!\";\n    }\n\n    public SyncReturn DoSyncWorkParamsReturn(int i, string s)\n    {\n        Debug.WriteLine($\"DoSyncWorkParamReturn: {i}, {s}\");\n        return new SyncReturn\n        {\n            Message = \"Hello from C#!\" + s,\n            Value = i\n        };\n    }\n\n    public async Task DoAsyncWork()\n    {\n        Debug.WriteLine(\"DoAsyncWork\");\n        await Task.Delay(1000);\n    }\n\n    public async Task DoAsyncWorkParams(int i, string s)\n    {\n        Debug.WriteLine($\"DoAsyncWorkParams: {i}, {s}\");\n        await Task.Delay(1000);\n    }\n\n    public async Task<String> DoAsyncWorkReturn()\n    {\n        Debug.WriteLine(\"DoAsyncWorkReturn\");\n        await Task.Delay(1000);\n        return \"Hello from C#!\";\n    }\n\n    public async Task<SyncReturn> DoAsyncWorkParamsReturn(int i, string s)\n    {\n        Debug.WriteLine($\"DoAsyncWorkParamsReturn: {i}, {s}\");\n        await Task.Delay(1000);\n        return new SyncReturn\n        {\n            Message = \"Hello from C#!\" + s,\n            Value = i\n        };\n    }    \n\n    public class SyncReturn\n    {\n        public string? Message { get; set; }\n        public int Value { get; set; }\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI in iOS AppDelegate (C#)\nDESCRIPTION: This code snippet illustrates how to initialize .NET MAUI's native device functionality within the `FinishedLaunching` method of an iOS `AppDelegate`. `Platform.Init` must be called to ensure proper initialization. Requires importing the `Microsoft.Maui.ApplicationModel` namespace and passing a function that returns the main view controller.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.ApplicationModel;\n\nnamespace MyiOSApp;\n\n[Register(\"AppDelegate\")]\npublic class AppDelegate : UIApplicationDelegate\n{\n    public override UIWindow? Window\n    {\n        get;\n        set;\n    }\n\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)\n    {\n        // create a new window instance based on the screen size\n        Window = new UIWindow(UIScreen.MainScreen.Bounds);\n\n        // create a UIViewController with a single UILabel\n        var vc = new UIViewController();\n        // ...\n        Window.RootViewController = vc;\n\n        Platform.Init(() => vc);\n\n        // make the window visible\n        Window.MakeKeyAndVisible();\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load a CSS style sheet in C#\nDESCRIPTION: This C# code demonstrates how to load a CSS style sheet from a `StringReader` and add it to the page's ResourceDictionary. It uses the `StyleSheet.FromReader` method to parse the CSS from the reader.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.StyleSheets;\n\npublic partial class MyPage : ContentPage\n{\n    public MyPage()\n    {\n        InitializeComponent();\n\n        using (var reader = new StringReader(\"^contentpage { background-color: lightgray; }\"))\n        {\n            this.Resources.Add(StyleSheet.FromReader(reader));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Options (net-maui-10.0+) in .NET MAUI C#\nDESCRIPTION: This C# code demonstrates customizing text-to-speech output using SpeechOptions, specifically setting Volume, Pitch, Rate and Locale. It retrieves a collection of available locales using GetLocalesAsync() and applies these settings during speech synthesis. Note the Rate parameter is available from net-maui-10.0 and onwards.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar locales = await TextToSpeech.Default.GetLocalesAsync();\nvar options = new SpeechOptions()\n{\n    Volume = .75f,\n    Pitch = 1.0f,\n    Rate = 1.0f,\n    Locale = locales.FirstOrDefault()\n};\n\nawait TextToSpeech.Default.SpeakAsync(\"Hello World\", options);\n```\n\n----------------------------------------\n\nTITLE: Calculate Distance Between Two Locations (MAUI C#)\nDESCRIPTION: This C# code snippet demonstrates how to calculate the distance between two geographic locations using the CalculateDistance method of the Location object. The method uses the great-circle distance calculation, and allows specifying the units of measurement (miles or kilometers).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/SensorsPage.xaml.cs\" id=\"geolocation_distance\":::\n```\n\n----------------------------------------\n\nTITLE: Configure Android Manifest for Email\nDESCRIPTION: This XML snippet demonstrates how to configure the AndroidManifest.xml file to declare the intent to send emails using the mailto scheme. This is required when targeting Android 11 (API 30) or higher due to package visibility requirements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/email.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.SENDTO\" />\n    <data android:scheme=\"mailto\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Registering Routes for Navigation in .NET MAUI\nDESCRIPTION: This C# code snippet registers the NotePage route with the .NET MAUI Shell navigation system. By calling Routing.RegisterRoute(\"NotePage\", typeof(NotePage)), it allows the application to navigate to the NotePage from other pages using the string \"NotePage\" as the route.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic AppShell()\n    {\n        InitializeComponent();\n\n        Routing.RegisterRoute(nameof(NotePage), typeof(NotePage));\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic HeadingLevel Property in C# - MAUI\nDESCRIPTION: This C# code snippet shows how to set the `HeadingLevel` attached property of `SemanticProperties` programmatically. It creates several `Label` objects and sets their `HeadingLevel` properties using `SemanticProperties.SetHeadingLevel`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label1 = new Label { Text = \"Get started with .NET MAUI\" };\nLabel label2 = new Label { Text = \"Paragraphs of text go here.\" };\nLabel label3 = new Label { Text = \"Installation\" };\nLabel label4 = new Label { Text = \"Paragraphs of text go here.\" };\nLabel label5 = new Label { Text = \"Build your first app\" };\nLabel label6 = new Label { Text = \"Paragraphs of text go here.\" };\nLabel label7 = new Label { Text = \"Publish your app\" };\nLabel label8 = new Label { Text = \"Paragraphs of text go here.\" };\nSemanticProperties.SetHeadingLevel(label1, SemanticHeadingLevel.Level1);\nSemanticProperties.SetHeadingLevel(label3, SemanticHeadingLevel.Level2);\nSemanticProperties.SetHeadingLevel(label5, SemanticHeadingLevel.Level3);\nSemanticProperties.SetHeadingLevel(label7, SemanticHeadingLevel.Level4);\n```\n\n----------------------------------------\n\nTITLE: Invoke C# Methods from JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to invoke C# methods from JavaScript within the `HybridWebView` control using the `window.HybridWebView.InvokeDotNet` function. It showcases invoking both synchronous and asynchronous methods, with and without parameters, and handling return values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous methods\nawait window.HybridWebView.InvokeDotNet('DoSyncWork');\nawait window.HybridWebView.InvokeDotNet('DoSyncWorkParams', [123, 'hello']);\nconst retValue = await window.HybridWebView.InvokeDotNet('DoSyncWorkReturn');\nconst retValue = await window.HybridWebView.InvokeDotNet('DoSyncWorkParamsReturn', [123, 'hello']);\n\n// Asynchronous methods\nawait window.HybridWebView.InvokeDotNet('DoAsyncWork');\nawait window.HybridWebView.InvokeDotNet('DoAsyncWorkParams', [123, 'hello']);\nconst retValue = await window.HybridWebView.InvokeDotNet('DoAsyncWorkReturn');\nconst retValue = await window.HybridWebView.InvokeDotNet('DoAsyncWorkParamsReturn', [123, 'hello']);\n```\n\n----------------------------------------\n\nTITLE: Create .NET MAUI SDK-Style Project File (XML)\nDESCRIPTION: Shows the basic structure of a .NET MAUI SDK-style project file, including target frameworks, platform support, and MAUI-specific settings. It sets the TargetFrameworks to .NET 8 for multiple platforms including Android, iOS, MacCatalyst, and Windows. It also enables Maui and SingleProject, and sets supported OS platform versions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFrameworks>net8.0;net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>\n        <TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>\n        <!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->\n        <!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->\n        <UseMaui>true</UseMaui>\n        <SingleProject>true</SingleProject>\n        <ImplicitUsings>enable</ImplicitUsings>\n\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'\">11.0</SupportedOSPlatformVersion>\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'\">13.1</SupportedOSPlatformVersion>\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">21.0</SupportedOSPlatformVersion>\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\">10.0.17763.0</SupportedOSPlatformVersion>\n        <TargetPlatformMinVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\">10.0.17763.0</TargetPlatformMinVersion>\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'\">6.5</SupportedOSPlatformVersion>\n    </PropertyGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Explicit Dependency Resolution: ViewModel (net-maui-9.0+) C#\nDESCRIPTION: This example shows explicit dependency resolution within a view model, accessing services through `Application.Current.Windows[0].Page.Handler.MauiContext.Services`. This is for .NET MAUI 9.0 and later.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel\n{\n    readonly ILoggingService _loggingService;\n    readonly ISettingsService _settingsService;\n\n    public MainPageViewModel()\n    {\n        _loggingService = Application.Current.Windows[0].Page.Handler.MauiContext.Services.GetService<ILoggingService>();\n        _settingsService = Application.Current.Windows[0].Page.Handler.MauiContext.Services.GetService<ISettingsService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Defining Commands C#\nDESCRIPTION: This code defines a ViewModel class (`CommandDemoViewModel`) that implements `INotifyPropertyChanged`. It defines `MultiplyBy2Command` and `DivideBy2Command` as `ICommand` properties, initialized with `Command` objects that update the `Number` property. The ViewModel is designed to be used with data binding in a MAUI application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CommandDemoViewModel : INotifyPropertyChanged\n{\n    double number = 1;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public ICommand MultiplyBy2Command { get; private set; }\n    public ICommand DivideBy2Command { get; private set; }\n\n    public CommandDemoViewModel()\n    {\n        MultiplyBy2Command = new Command(() => Number *= 2);\n        DivideBy2Command = new Command(() => Number /= 2);\n    }\n\n    public double Number\n    {\n        get\n        {\n            return number;\n        }\n        set\n        {\n            if (number != value)\n            {\n                number = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Number\"));\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flyout Items in .NET MAUI Shell XAML\nDESCRIPTION: This code snippet demonstrates how to create a flyout with two flyout items in a .NET MAUI Shell application using XAML.  Each FlyoutItem contains a Tab, which in turn contains a ShellContent. The Title and Icon properties of the FlyoutItem are set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:controls=\"clr-namespace:Xaminals.Controls\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <FlyoutItem Title=\"Cats\"\n                Icon=\"cat.png\">\n       <Tab>\n           <ShellContent ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       </Tab>\n    </FlyoutItem>\n    <FlyoutItem Title=\"Dogs\"\n                Icon=\"dog.png\">\n       <Tab>\n           <ShellContent ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n       </Tab>\n    </FlyoutItem>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Taking and Saving a Photo C#\nDESCRIPTION: This C# code demonstrates how to use the MediaPicker to take a photo and save it to the application's cache directory. It checks if the MediaPicker is supported, calls CapturePhotoAsync to capture the photo, and then saves the captured image to a file.  The code must be executed on the UI thread.\nDependencies: Microsoft.Maui.Media, UI Thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/picker.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nif (MediaPicker.Default.IsCaptureSupported)\n{\n    FileResult photo = await MediaPicker.Default.CapturePhotoAsync();\n\n    if (photo != null)\n    {\n        // save the file into local storage\n        string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);\n\n        using (Stream sourceStream = await photo.OpenReadAsync())\n        {\n            using (FileStream localFileStream = File.OpenWrite(localFilePath))\n            {\n                await sourceStream.CopyToAsync(localFileStream);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting UseMauiEssentials property in Android project file (XML)\nDESCRIPTION: This code snippet demonstrates how to modify the Android project file to enable .NET MAUI's native device functionality by setting the `$(UseMauiEssentials)` property to `true`. This step is crucial for accessing features formerly part of Xamarin.Essentials.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-android</TargetFramework>\n    ...\n    <UseMauiEssentials>true</UseMauiEssentials>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Open map app with driving navigation (C#)\nDESCRIPTION: This C# code snippet demonstrates how to open the map app with driving navigation enabled. It uses the MapLaunchOptions to specify the NavigationMode as Driving, instructing the map app to calculate a driving route from the device's current location to the specified destination.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar location = new Location(47.645160, -122.1306032);\nvar options = new MapLaunchOptions { NavigationMode = NavigationMode.Driving };\n\nawait Map.Default.OpenAsync(location, options);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with WebAuthenticator in C#\nDESCRIPTION: This C# code snippet demonstrates how to use the WebAuthenticator to initiate a browser-based authentication flow. It uses the AuthenticateAsync method with a start URL and a callback URI. The result is a WebAuthenticatorResult object, which contains data from the callback, such as an access token. A TaskCanceledException is caught if the user cancels the authentication flow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    WebAuthenticatorResult authResult = await WebAuthenticator.Default.AuthenticateAsync(\n        new Uri(\"https://mysite.com/mobileauth/Microsoft\"),\n        new Uri(\"myapp://\"));\n\n    string accessToken = authResult?.AccessToken;\n\n    // Do something with the token\n}\ncatch (TaskCanceledException e)\n{\n    // Use stopped auth\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Constructor Injection C#\nDESCRIPTION: This code snippet demonstrates constructor injection for a view model class. The `MainPageViewModel` class requires `ILoggingService` and `ISettingsService` as dependencies, which are injected through its constructor. This allows for decoupling the view model from concrete implementations of the services.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel\n{\n    readonly ILoggingService _loggingService;\n    readonly ISettingsService _settingsService;\n\n    public MainPageViewModel(ILoggingService loggingService, ISettingsService settingsService)\n    {\n        _loggingService = loggingService;\n        _settingsService = settingsService;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Attachment to an Email\nDESCRIPTION: This C# code demonstrates how to add an attachment to an email message in .NET MAUI.  It creates a new EmailMessage, adds an EmailAttachment to it, and then uses Email.Default.ComposeAsync() to compose the email. The highlight indicates the line adding the attachment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/email.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar message = new EmailMessage\n{\n    Subject = \"Picture\",\n    Body = \"Hello .NET MAUI!\",\n    BodyFormat = EmailBodyFormat.Html,\n    To = new List<string>() { \"to@example.com\" },\n    Cc = new List<string>() { \"cc@example.com\" },\n    Bcc = new List<string>() { \"bcc@example.com\" }\n};\n\nstring picturePath = Path.Combine(FileSystem.CacheDirectory, \"MyPicture.jpg\");\n\nmessage.Attachments.Add(new EmailAttachment(picturePath));\n\nawait Email.Default.ComposeAsync(message);\n```\n\n----------------------------------------\n\nTITLE: Set Header and Footer Templates C#\nDESCRIPTION: This code demonstrates how to set the `HeaderTemplate` and `FooterTemplate` properties of a `CollectionView` using C#. It initializes `DataTemplate` objects with `StackLayout` instances for the header and footer. The `ItemsSourceProperty` is also bound to a `Monkeys` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    HeaderTemplate = new DataTemplate(() =>\n    {\n        return new StackLayout { };\n    }),\n    FooterTemplate = new DataTemplate(() =>\n    {\n        return new StackLayout { };\n    })\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Display Templated Header and Footer in ListView (XAML)\nDESCRIPTION: Illustrates how to use DataTemplates to display more complex header and footer content in a ListView. This requires setting both the Header/Footer and HeaderTemplate/FooterTemplate properties and binding the Header/Footer to the current source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_19\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\"\n          Header=\"{Binding .}\"\n          Footer=\"{Binding .}\">\n    <ListView.HeaderTemplate>\n        <DataTemplate>\n            <Grid BackgroundColor=\"LightGray\">\n                <Label Margin=\"10,0,0,0\"\n                       Text=\"Monkeys\"\n                       FontSize=\"12\"\n                       FontAttributes=\"Bold\" />\n            </Grid>\n        </DataTemplate>\n    </ListView.HeaderTemplate>\n    <ListView.FooterTemplate>\n        <DataTemplate>\n            <Grid BackgroundColor=\"LightGray\">\n                <Label Margin=\"10,0,0,0\"\n                       Text=\"Friends of Monkey\"\n                       FontSize=\"12\"\n                       FontAttributes=\"Bold\" />\n            </Grid>\n        </DataTemplate>\n    </ListView.FooterTemplate>\n    ...\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: HttpClient Initialization C#\nDESCRIPTION: Initializes an `HttpClient` instance and `JsonSerializerOptions` within a `RestService` class.  The `HttpClient` is used for making HTTP requests, and `JsonSerializerOptions` configures how JSON data is serialized and deserialized. The `JsonNamingPolicy.CamelCase` ensures JSON properties are camelCase, and `WriteIndented` formats the output for readability.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RestService\n{\n    HttpClient _client;\n    JsonSerializerOptions _serializerOptions;\n\n    public List<TodoItem> Items { get; private set; }\n\n    public RestService()\n    {\n        _client = new HttpClient();\n        _serializerOptions = new JsonSerializerOptions\n        {\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n            WriteIndented = true\n        };\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preselecting Single Item in CollectionView (C#)\nDESCRIPTION: This C# code demonstrates how to preselect a single item in a CollectionView programmatically. It binds the `SelectedItemProperty` to a property in the view model that represents the preselected item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    SelectionMode = SelectionMode.Single\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\ncollectionView.SetBinding(SelectableItemsView.SelectedItemProperty,  static (MonkeysViewModel vm) => vm.SelectedMonkey);\n```\n\n----------------------------------------\n\nTITLE: Create TapGestureRecognizer in C#\nDESCRIPTION: This C# code demonstrates how to create a TapGestureRecognizer programmatically, attach an event handler to the Tapped event, and add the recognizer to the GestureRecognizers collection of an Image control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTapGestureRecognizer tapGestureRecognizer = new TapGestureRecognizer();\ntapGestureRecognizer.Tapped += (s, e) =>\n{\n    // Handle the tap\n};\nImage image = new Image();\nimage.GestureRecognizers.Add(tapGestureRecognizer);\n```\n\n----------------------------------------\n\nTITLE: XAML Data Binding Example\nDESCRIPTION: This XAML code demonstrates data binding between a Label and a Slider. The Slider's Value property is bound to the Opacity property of the Label. The default binding mode for Slider.Value is TwoWay, allowing the Slider to initialize from the Label's Opacity and update the Label when changed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-mode.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DataBindingDemos.ReverseBindingPage\"\n             Title=\"Reverse Binding\">\n    <StackLayout Padding=\"10, 0\">\n        <Label x:Name=\"label\"\n               Text=\"TEXT\"\n               FontSize=\"80\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Slider x:Name=\"slider\"\n                x:DataType=\"Label\"\n                VerticalOptions=\"Center\"\n                Value=\"{Binding Source={x:Reference label},\n                                Path=Opacity}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configuring SwipeMode to Execute in XAML\nDESCRIPTION: This XAML snippet configures a SwipeView to use the Execute mode. In Execute mode, the SwipeItem is automatically executed when it is revealed by swiping. In this case, when the SwipeView is swiped to the right, the 'Delete' swipe item is executed immediately.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems Mode=\"Execute\">\n            <SwipeItem Text=\"Delete\"\n                       IconImageSource=\"delete.png\"\n                       BackgroundColor=\"LightPink\"\n                       Command=\"{Binding DeleteCommand}\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Dispose Pattern: Using try/finally block - C#\nDESCRIPTION: This code snippet demonstrates the proper usage of a `try`/`finally` block to ensure that `IDisposable.Dispose` is always called, even if an exception occurs within the `try` block. It prevents resource leaks by guaranteeing that resources used by objects implementing IDisposable are released.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic void ReadText(string filename)\n{\n    string text;\n    StreamReader reader = null;\n    try\n    {\n        reader = new StreamReader(filename);\n        text = reader.ReadToEnd();\n    }\n    finally\n    {\n        if (reader != null)\n            reader.Dispose();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SwipeContainer in C#\nDESCRIPTION: This C# code demonstrates how to use the 'SwipeContainer' class programmatically. It creates a BoxView, wraps it in a SwipeContainer, and then adds the SwipeContainer to a StackLayout.  The Swipe event is handled using a lambda expression. Requires .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nBoxView boxView = new BoxView { Color = Colors.Teal, ... };\nSwipeContainer swipeContainer = new SwipeContainer { Content = boxView, ... };\nswipeContainer.Swipe += (sender, e) =>\n{\n  // Handle the swipe\n};\n\nStackLayout stackLayout = new StackLayout();\nstackLayout.Add(swipeContainer);\n```\n\n----------------------------------------\n\nTITLE: TodoItem Class Definition C#\nDESCRIPTION: Defines a `TodoItem` class with properties for ID, Name, Notes, and Done status. This class is used to model data displayed and sent to the REST web service for storage. The `ID` property is used to uniquely identify each TodoItem.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TodoItem\n{\n    public string ID { get; set; }\n    public string Name { get; set; }\n    public string Notes { get; set; }\n    public bool Done { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Dependency Resolution: ViewModel with IServiceProvider C#\nDESCRIPTION: This demonstrates explicit dependency resolution in a view model using an `IServiceProvider` instance injected via constructor injection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel\n{\n    readonly ILoggingService _loggingService;\n    readonly ISettingsService _settingsService;\n\n    public MainPageViewModel(IServiceProvider serviceProvider)\n    {\n        _loggingService = serviceProvider.GetService<ILoggingService>();\n        _settingsService = serviceProvider.GetService<ISettingsService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemTemplate Definition XAML\nDESCRIPTION: This XAML snippet defines the appearance of each item in the CarouselView using a DataTemplate.  It includes a StackLayout to arrange the data, a Border for visual appearance, and labels and an image that are bound to properties of the Monkey model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <StackLayout>\n                <Border Stroke=\"DarkGray\"\n                        StrokeShape=\"RoundRectangle 5\"\n                        Margin=\"20\"\n                        Padding=\"20\"\n                        HeightRequest=\"360\"\n                        HorizontalOptions=\"Center\"\n                        VerticalOptions=\"Center\">            \n                    <StackLayout>\n                        <Label Text=\"{Binding Name}\"\n                               FontAttributes=\"Bold\"\n                               FontSize=\"18\"\n                               HorizontalOptions=\"Center\"\n                               VerticalOptions=\"Center\" />\n                        <Image Source=\"{Binding ImageUrl}\"\n                               Aspect=\"AspectFill\"\n                               HeightRequest=\"150\"\n                               WidthRequest=\"150\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Location}\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Details}\"\n                               FontAttributes=\"Italic\"\n                               HorizontalOptions=\"Center\"\n                               MaxLines=\"5\"\n                               LineBreakMode=\"TailTruncation\" />\n                    </StackLayout>\n                </Border>\n            </StackLayout>\n        </DataTemplate>\n    </CarouselView.ItemTemplate>\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Binding to Nested DateTime Property in XAML\nDESCRIPTION: This XAML code demonstrates accessing a nested property (Second) within the DateTime property of the ClockViewModel. It binds the Text property of a Label to the Second property of the DateTime object within the viewmodel, displaying the current second.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding DateTime.Second, StringFormat='{0}'}\" … >\n```\n\n----------------------------------------\n\nTITLE: Defining UI in XAML with Event Handlers\nDESCRIPTION: This XAML snippet defines a ContentPage layout with a Slider, Label, and Button. It demonstrates how to declare event handlers for the ValueChanged event of the Slider and the Clicked event of the Button, linking them to methods in the code-behind. The Label also has an x:Name attribute so that it can be referenced from code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.XamlPlusCodePage\"\n             Title=\"XAML + Code Page\">\n    <StackLayout>\n        <Slider VerticalOptions=\"Center\"\n                ValueChanged=\"OnSliderValueChanged\" />\n        <Label x:Name=\"valueLabel\"\n               Text=\"A simple Label\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Button Text=\"Click Me!\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                Clicked=\"OnButtonClicked\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting ClipData for Drag and Drop on Android\nDESCRIPTION: This code snippet demonstrates how to set ClipData on Android when starting a drag operation.  It accesses the platform-specific arguments of the DragStartingEventArgs and uses the SetClipData method to associate data with the dragged item, allowing it to be transferred to the drop target.  The clip data includes a plain text representation of the dragged content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n#if ANDROID\n    string content = \"insert your content here\";\n    e.PlatformArgs.SetClipData(Android.Content.ClipData.NewPlainText(\"Drag data\", content));\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Text .NET MAUI C#\nDESCRIPTION: Demonstrates setting text to the system clipboard using the IClipboard.SetTextAsync method. This code snippet is triggered by a button click and sets the specified text to the clipboard.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/clipboard.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async void SetClipboardButton_Clicked(object sender, EventArgs e)\n{\n    if (!string.IsNullOrWhiteSpace(ClipboardEntry.Text))\n        await Clipboard.Default.SetTextAsync(ClipboardEntry.Text);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Resource File (Resources.resw) - XML\nDESCRIPTION: This XML code snippet represents the structure and schema of a Windows resource file (*.resw) used for localization. It defines the root element, schema definitions, and the structure for storing string resources. This file should be named Resources.resw and placed in locale-specific folders under Platforms\\Windows\\Strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n  <!--\n    Microsoft ResX Schema\n\n    Version 2.0\n\n    The primary goals of this format is to allow a simple XML format\n    that is mostly human readable. The generation and parsing of the\n    various data types are done through the TypeConverter classes\n    associated with the data types.\n\n    Example:\n\n    ... ado.net/XML headers & schema ...\n    <resheader name=\"resmimetype\">text/microsoft-resx</resheader>\n    <resheader name=\"version\">2.0</resheader>\n    <resheader name=\"reader\">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>\n    <resheader name=\"writer\">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>\n    <data name=\"Name1\"><value>this is my long string</value><comment>this is a comment</comment></data>\n    <data name=\"Color1\" type=\"System.Drawing.Color, System.Drawing\">Blue</data>\n    <data name=\"Bitmap1\" mimetype=\"application/x-microsoft.net.object.binary.base64\">\n        <value>[base64 mime encoded serialized .NET Framework object]</value>\n    </data>\n    <data name=\"Icon1\" type=\"System.Drawing.Icon, System.Drawing\" mimetype=\"application/x-microsoft.net.object.bytearray.base64\">\n        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>\n        <comment>This is a comment</comment>\n    </data>\n\n    There are any number of \"resheader\" rows that contain simple\n    name/value pairs.\n\n    Each data row contains a name, and value. The row also contains a\n    type or mimetype. Type corresponds to a .NET class that support\n    text/value conversion through the TypeConverter architecture.\n    Classes that don't support this are serialized and stored with the\n    mimetype set.\n\n    The mimetype is used for serialized objects, and tells the\n    ResXResourceReader how to depersist the object. This is currently not\n    extensible. For a given mimetype the value must be set accordingly:\n\n    Note - application/x-microsoft.net.object.binary.base64 is the format\n    that the ResXResourceWriter will generate, however the reader can\n    read any of the formats listed below.\n\n    mimetype: application/x-microsoft.net.object.binary.base64\n    value   : The object must be serialized with\n            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\n            : and then encoded with base64 encoding.\n\n    mimetype: application/x-microsoft.net.object.soap.base64\n    value   : The object must be serialized with\n            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter\n            : and then encoded with base64 encoding.\n\n    mimetype: application/x-microsoft.net.object.bytearray.base64\n    value   : The object must be serialized into a byte array\n            : using a System.ComponentModel.TypeConverter\n            : and then encoded with base64 encoding.\n    -->\n  <xsd:schema id=\"root\" xmlns=\"\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">\n    <xsd:import namespace=\"http://www.w3.org/XML/1998/namespace\" />\n    <xsd:element name=\"root\" msdata:IsDataSet=\"true\">\n      <xsd:complexType>\n        <xsd:choice maxOccurs=\"unbounded\">\n          <xsd:element name=\"metadata\">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name=\"value\" type=\"xsd:string\" minOccurs=\"0\" />\n              </xsd:sequence>\n              <xsd:attribute name=\"name\" use=\"required\" type=\"xsd:string\" />\n              <xsd:attribute name=\"type\" type=\"xsd:string\" />\n              <xsd:attribute name=\"mimetype\" type=\"xsd:string\" />\n              <xsd:attribute ref=\"xml:space\" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name=\"assembly\">\n            <xsd:complexType>\n              <xsd:attribute name=\"alias\" type=\"xsd:string\" />\n              <xsd:attribute name=\"name\" type=\"xsd:string\" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name=\"data\">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name=\"value\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"1\" />\n                <xsd:element name=\"comment\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"2\" />\n              </xsd:sequence>\n              <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\" msdata:Ordinal=\"1\" />\n              <xsd:attribute name=\"type\" type=\"xsd:string\" msdata:Ordinal=\"3\" />\n              <xsd:attribute name=\"mimetype\" type=\"xsd:string\" msdata:Ordinal=\"4\" />\n              <xsd:attribute ref=\"xml:space\" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name=\"resheader\">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name=\"value\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"1\" />\n              </xsd:sequence>\n              <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\" />\n            </xsd:complexType>\n          </xsd:element>\n        </xsd:choice>\n      </xsd:complexType>\n    </xsd:element>\n  </xsd:schema>\n  <resheader name=\"resmimetype\">\n    <value>text/microsoft-resx</value>\n  </resheader>\n  <resheader name=\"version\">\n    <value>2.0</value>\n  </resheader>\n  <resheader name=\"reader\">\n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n  <resheader name=\"writer\">\n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI in Android MainActivity (C#)\nDESCRIPTION: This code snippet shows how to initialize .NET MAUI's native device functionality within the `OnCreate` method of an Android `Activity`.  `Platform.Init` must be called to ensure proper initialization of essential services.  Requires importing `Microsoft.Maui.ApplicationModel` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content.PM;\nusing Android.Runtime;\nusing Microsoft.Maui.ApplicationModel;\n\nnamespace MyAndroidApp;\n\n[Activity(Label = \"@string/app_name\", MainLauncher = true)]\npublic class MainActivity : Activity\n{\n    protected override async void OnCreate(Bundle? savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n        Platform.Init(this, savedInstanceState);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CarouselView Scrolled Event Handler in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a CarouselView instance and attach an event handler to its `Scrolled` event. The `Scrolled` event is raised when scrolling occurs, both programmatically and through user interaction.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView();\ncarouselView.Scrolled += OnCarouselViewScrolled;\n```\n\n----------------------------------------\n\nTITLE: Publishing Mac Catalyst App via Command Line using dotnet publish\nDESCRIPTION: This code snippet demonstrates how to publish a .NET MAUI Mac Catalyst app using the `dotnet publish` command. It includes parameters for specifying the target framework, configuration, linking mode, code signing settings, provisioning profile, entitlements file, and runtime identifier. This command builds, signs, and packages the app for ad-hoc distribution.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-ad-hoc.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-maccatalyst -c Release -p:MtouchLink=SdkOnly -p:CreatePackage=true -p:EnableCodeSigning=true  -p:CodesignKey=\"Apple Development: John Smith (AY2GDE9QM7)\" -p:CodesignProvision=\"MyMauiApp (Ad-hoc)\" -p:CodesignEntitlements=\"Platforms\\MacCatalyst\\Entitlements.plist\" -p:UseHardenedRuntime=true\n```\n\n----------------------------------------\n\nTITLE: Defining DecimalKeypadViewModel\nDESCRIPTION: This C# code defines the DecimalKeypadViewModel class, which implements INotifyPropertyChanged. It includes an Entry property to store the current value, and ICommand properties for ClearCommand, BackspaceCommand, and DigitCommand.  These commands will handle the user interactions on the keypad.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DecimalKeypadViewModel : INotifyPropertyChanged\n{\n    string entry = \"0\";\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    ···\n\n    public string Entry\n    {\n        private set\n        {\n            if (entry != value)\n            {\n                entry = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Entry\"));\n            }\n        }\n        get\n        {\n            return entry;\n        }\n    }\n\n    public ICommand ClearCommand { private set; get; }\n    public ICommand BackspaceCommand { private set; get; }\n    public ICommand DigitCommand { private set; get; }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Command with CanExecute C#\nDESCRIPTION: This code extends the `CommandDemoViewModel` to include `canExecute` logic for the `MultiplyBy2Command` and `DivideBy2Command`. The `canExecute` functions limit the range of the `Number` property, disabling the buttons when the limits are reached.  The `ChangeCanExecute` method is called to re-evaluate the `canExecute` state after each command execution.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CommandDemoViewModel : INotifyPropertyChanged\n{\n    ···\n    public CommandDemoViewModel()\n    {\n        MultiplyBy2Command = new Command(\n            execute: () =>\n            {\n                Number *= 2;\n                ((Command)MultiplyBy2Command).ChangeCanExecute();\n                ((Command)DivideBy2Command).ChangeCanExecute();\n            },\n            canExecute: () => Number < Math.Pow(2, 10));\n\n        DivideBy2Command = new Command(\n            execute: () =>\n            {\n                Number /= 2;\n                ((Command)MultiplyBy2Command).ChangeCanExecute();\n                ((Command)DivideBy2Command).ChangeCanExecute();\n            },\n            canExecute: () => Number > Math.Pow(2, -10));\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Navigation Data using IQueryAttributable Interface in .NET MAUI\nDESCRIPTION: This snippet demonstrates receiving navigation data by implementing the IQueryAttributable interface in a .NET MAUI view model. The ApplyQueryAttributes method is used to retrieve the navigation data from the query dictionary. This approach is useful for processing multiple navigation data items as a whole.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MonkeyDetailViewModel : IQueryAttributable, INotifyPropertyChanged\n{\n    public Animal Monkey { get; private set; }\n\n    public void ApplyQueryAttributes(IDictionary<string, object> query)\n    {\n        Monkey = query[\"Monkey\"] as Animal;\n        OnPropertyChanged(\"Monkey\");\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Item Selection in ListView XAML\nDESCRIPTION: This XAML snippet demonstrates how to enable item selection in a ListView and bind an event handler to the ItemSelected event. When an item is selected, the specified method (OnItemSelected) will be executed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\"\n          ItemSelected=\"OnItemSelected\">\n    ...\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Displaying App Settings in .NET MAUI (C#)\nDESCRIPTION: This code snippet shows how to display the application's settings page using the AppInfo.Current.ShowSettingsUI() method. This page is maintained by the operating system and allows users to change application permissions and perform other platform-specific tasks. No parameters are needed to display the settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-information.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAppInfo.Current.ShowSettingsUI();\n```\n\n----------------------------------------\n\nTITLE: Registering Windows Lifecycle Event Handlers C#\nDESCRIPTION: This code snippet demonstrates how to register handlers for various Windows lifecycle events within a .NET MAUI application using the `ConfigureLifecycleEvents` method. It shows how to log events and respond to specific messages, like system theme changes. It requires the `Microsoft.Maui.LifecycleEvents` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n\nnamespace PlatformLifecycleDemo\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureLifecycleEvents(events =>\n                {\n#if WINDOWS\n                    events.AddWindows(windows => windows\n                           .OnActivated((window, args) => LogEvent(nameof(WindowsLifecycle.OnActivated)))\n                           .OnClosed((window, args) => LogEvent(nameof(WindowsLifecycle.OnClosed)))\n                           .OnLaunched((window, args) => LogEvent(nameof(WindowsLifecycle.OnLaunched)))\n                           .OnLaunching((window, args) => LogEvent(nameof(WindowsLifecycle.OnLaunching)))\n                           .OnVisibilityChanged((window, args) => LogEvent(nameof(WindowsLifecycle.OnVisibilityChanged)))\n                           .OnPlatformMessage((window, args) =>\n                           {\n                               if (args.MessageId == Convert.ToUInt32(\"031A\", 16))\n                               {\n                                   // System theme has changed\n                               }\n                           }));\n#endif\n                    static bool LogEvent(string eventName, string type = null)\n                    {\n                        System.Diagnostics.Debug.WriteLine($\"Lifecycle event: {eventName}{(type == null ? string.Empty : $\" ({type})\")}\");\n                        return true;\n                    }\n                });\n\n            return builder.Build();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AppShell to use NotePage (XAML)\nDESCRIPTION: This XAML code snippet modifies the `AppShell.xaml` file to set the initial content to `NotePage` instead of `MainPage`. This directs the application to open the `NotePage` when the application is launched, enabling the user to directly interact with the note-taking functionality.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ShellContent\n    Title=\"Note\"\n    ContentTemplate=\"{DataTemplate local:NotePage}\"\n    Route=\"NotePage\" />\n```\n\n----------------------------------------\n\nTITLE: Toggle Gyroscope Monitoring - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to start and stop monitoring the gyroscope sensor in a .NET MAUI application. The snippet shows how to subscribe to the ReadingChanged event to receive gyroscope data updates. The code is part of a larger application, likely within a XAML page's code-behind file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// This code snippet is present in multiple documents under the same ID, and should only be included once.\n// To prevent duplication, this placeholder is used.\n// The complete code can be found in the other document, which is also processed by the same pipeline.\n```\n\n----------------------------------------\n\nTITLE: Configure Intent Filter for Android Activity (C#)\nDESCRIPTION: This code snippet demonstrates how to use the IntentFilterAttribute to configure an Android activity to handle specific web URIs, including specifying the action, categories, data scheme, host, and path.  It ensures that the app can be launched when a user clicks a link from a website. The `AutoVerify` property is set to `true` to enable Android to verify the association between the app and the website.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Android.Content;\nusing Android.Content.PM;\n\nnamespace MyNamespace;\n\n[Activity(\n    Theme = \"@style/Maui.SplashTheme\",\n    MainLauncher = true,\n    ConfigurationChanges = ConfigChanges.ScreenSize |\n        ConfigChanges.Orientation |\n        ConfigChanges.UiMode |\n        ConfigChanges.ScreenLayout |\n        ConfigChanges.SmallestScreenSize |\n        ConfigChanges.KeyboardHidden |\n        ConfigChanges.Density)]\n[IntentFilter(\n    new string[] { Intent.ActionView },\n    Categories = new[] { Intent.CategoryDefault, Intent.CategoryBrowsable },\n    DataScheme = \"https\",\n    DataHost = \"recipe-app.com\",\n    DataPath = \"/recipe\",\n    AutoVerify = true,)]    \npublic class MainActivity : MauiAppCompatActivity\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting ItemTemplate with DataTemplateSelector in XAML\nDESCRIPTION: This XAML snippet demonstrates setting the `ItemTemplate` of a `CollectionView` to a `DataTemplateSelector` named `MonkeySelector`. The `MonkeySelector` determines which data template to use for each item based on the item's data. It uses static resources for defining the different data templates.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:CollectionViewDemos.Controls\"\n             xmlns:models=\"clr-namespace:CollectionViewDemos.Models\"\n             xmlns:viewmodels=\"clr-namespace:CollectionViewDemos.ViewModels\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"AmericanMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            ...\n        </DataTemplate>\n\n        <DataTemplate x:Key=\"OtherMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            ...\n        </DataTemplate>\n\n        <controls:MonkeyDataTemplateSelector x:Key=\"MonkeySelector\"\n                                             AmericanMonkey=\"{StaticResource AmericanMonkeyTemplate}\"\n                                             OtherMonkey=\"{StaticResource OtherMonkeyTemplate}\" />\n    </ContentPage.Resources>\n\n    <CollectionView ItemsSource=\"{Binding Monkeys}\"\n                    ItemTemplate=\"{StaticResource MonkeySelector}\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining Application-Level Resources in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define resources such as colors, thickness, strings, and implicit styles in the application-level ResourceDictionary (App.xaml).  These resources can then be used throughout the entire application. It requires the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ResourceDictionaryDemo.App\">\n    <Application.Resources>\n\n        <Thickness x:Key=\"PageMargin\">20</Thickness>\n\n        <!-- Colors -->\n        <Color x:Key=\"AppBackgroundColor\">AliceBlue</Color>\n        <Color x:Key=\"NavigationBarColor\">#1976D2</Color>\n        <Color x:Key=\"NavigationBarTextColor\">White</Color>\n        <Color x:Key=\"NormalTextColor\">Black</Color>\n\n        <!-- Images -->\n        <x:String x:Key=\"BackgroundImage\">background</x:String>\n        <x:String x:Key=\"MenuIcon\">menu.png</x:String>\n        <x:String x:Key=\"SearchIcon\">search.png</x:String>\n\n        <!-- Implicit styles -->\n        <Style TargetType=\"NavigationPage\">\n            <Setter Property=\"BarBackgroundColor\"\n                    Value=\"{StaticResource NavigationBarColor}\" />\n            <Setter Property=\"BarTextColor\"\n                    Value=\"{StaticResource NavigationBarTextColor}\" />\n        </Style>\n\n        <Style TargetType=\"ContentPage\"\n               ApplyToDerivedTypes=\"True\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"{StaticResource AppBackgroundColor}\" />\n        </Style>\n\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Handle App Action invocation\nDESCRIPTION: This code snippet demonstrates how to handle an app action that was invoked by the user. The `Id` property of the `IAppAction` parameter is used to determine which action was triggered and perform the corresponding action within the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-actions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n\tpublic App()\n\t{\n\t\tInitializeComponent();\n\n\t\tMainPage = new AppShell();\n\t}\n\n\tpublic static void HandleAppActions(IAppAction appAction)\n\t{\n\t\tApp.Current.Dispatcher.Dispatch(async () =>\n\t\t{\n\t\t\tif (appAction.Id == \"company_info\")\n\t\t\t{\n\t\t\t\tawait Current.MainPage.DisplayAlert(\"Company Info\", \"Microsoft\", \"OK\");\n\t\t\t}\n\t\t\telse if (appAction.Id == \"qr_code\")\n\t\t\t{\n\t\t\t\tawait Current.MainPage.DisplayAlert(\"QR Code\", \"Scan the code\", \"OK\");\n\t\t\t}\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: NotesViewModel Constructor C#\nDESCRIPTION: This snippet adds a parameterless constructor to the `NotesViewModel` class. It initializes the commands and loads the notes from the model, using the `Models.Note.LoadAll` method to populate the `AllNotes` observable collection with notes.  It uses the `Select` Linq extension to create viewmodel instances from the note models.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic NotesViewModel()\n{\n    AllNotes = new ObservableCollection<ViewModels.NoteViewModel>(Models.Note.LoadAll().Select(n => new ViewModels.NoteViewModel(n)));\n    NewCommand = new AsyncRelayCommand(NewNoteAsync);\n    SelectNoteCommand = new AsyncRelayCommand<ViewModels.NoteViewModel>(SelectNoteAsync);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Visual States in XAML\nDESCRIPTION: This XAML code defines custom visual states named 'Valid' and 'Invalid' for input validation within a .NET MAUI ContentPage. It uses VisualStateManager to change the appearance of the Entry, Label, and Button based on the validation state.  When Invalid, the entry background is pink, and the submit button is disabled.  When valid, the entry background is lime, and the help label is transparent.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"VsmDemos.VsmValidationPage\"\n             Title=\"VSM Validation\">\n    <StackLayout x:Name=\"stackLayout\"\n                 Padding=\"10, 10\">\n            <VisualStateManager.VisualStateGroups>\n                <VisualStateGroup Name=\"ValidityStates\">\n                    <VisualState Name=\"Valid\">\n                        <VisualState.Setters>\n                            <Setter TargetName=\"helpLabel\"\n                                    Property=\"Label.TextColor\"\n                                    Value=\"Transparent\" />\n                            <Setter TargetName=\"entry\"\n                                    Property=\"Entry.BackgroundColor\"\n                                    Value=\"Lime\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Invalid\">\n                        <VisualState.Setters>\n                            <Setter TargetName=\"entry\"\n                                    Property=\"Entry.BackgroundColor\"\n                                    Value=\"Pink\" />\n                            <Setter TargetName=\"submitButton\"\n                                    Property=\"Button.IsEnabled\"\n                                    Value=\"False\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateManager.VisualStateGroups>\n        <Label Text=\"Enter a U.S. phone number:\"\n               FontSize=\"18\" />\n        <Entry x:Name=\"entry\"\n               Placeholder=\"555-555-5555\"\n               FontSize=\"18\"\n               Margin=\"30, 0, 0, 0\"\n               TextChanged=\"OnTextChanged\" />\n        <Label x:Name=\"helpLabel\"\n               Text=\"Phone number must be of the form 555-555-5555, and not begin with a 0 or 1\" />\n        <Button x:Name=\"submitButton\"\n                Text=\"Submit\"\n                FontSize=\"18\"\n                Margin=\"0, 20\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using ImageSource and ContentLayout in C# for Button\nDESCRIPTION: This C# snippet demonstrates how to programmatically create a .NET MAUI Button and set its Text, ImageSource, and ContentLayout properties. It loads a bitmap from a file using FileImageSource and sets the image position to the right of the text with a spacing of 20. This example shows the equivalent C# code for the XAML example. It requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nButton button = new Button\n{\n    Text = \"Button text\",\n    ImageSource = new FileImageSource\n    {\n        File = \"button.png\"\n    },\n    ContentLayout = new Button.ButtonContentLayout(Button.ButtonContentLayout.ImagePosition.Right, 20)\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Visual with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the visual of a VisualElement to material using the `-maui-visual` property. It accepts a string value or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_73\n\nLANGUAGE: css\nCODE:\n```\n-maui-visual: material;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Invoke and Handle Async Calls\nDESCRIPTION: This JavaScript code snippet defines functions to invoke JavaScript methods (including async methods) from C#, handle the results, and trigger callbacks to C#.  It manages calling methods, stringifying the results to JSON, and error handling with async/await.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n            \"__InvokeJavaScript\": async function __InvokeJavaScript(taskId, methodName, args) {\n                try {\n                    var result = null;\n                    if (methodName[Symbol.toStringTag] === 'AsyncFunction') {\n                        result = await methodName(...args);\n                    } else {\n                        result = methodName(...args);\n                    }\n                    window.HybridWebView.__TriggerAsyncCallback(taskId, result);\n                } catch (ex) {\n                    console.error(ex);\n                    window.HybridWebView.__TriggerAsyncFailedCallback(taskId, ex);\n                }\n            },\n\n            \"__TriggerAsyncCallback\": function __TriggerAsyncCallback(taskId, result) {\n                const json = JSON.stringify(result);\n                window.HybridWebView.__SendMessageInternal('__InvokeJavaScriptCompleted', taskId + '|' + json);\n            },\n\n            \"__TriggerAsyncFailedCallback\": function __TriggerAsyncCallback(taskId, error) {\n\n                if (!error) {\n                    json = {\n                        Message: \"Unknown error\",\n                        StackTrace: Error().stack\n                    };\n                } else if (error instanceof Error) {\n                    json = {\n                        Name: error.name,\n                        Message: error.message,\n                        StackTrace: error.stack\n                    };\n                } else if (typeof (error) === 'string') {\n                    json = {\n                        Message: error,\n                        StackTrace: Error().stack\n                    };\n                } else {\n                    json = {\n                        Message: JSON.stringify(error),\n                        StackTrace: Error().stack\n                    };\n                }\n\n                json = JSON.stringify(json);\n                window.HybridWebView.__SendMessageInternal('__InvokeJavaScriptFailed', taskId + '|' + json);\n            }\n```\n\n----------------------------------------\n\nTITLE: Reading Device Information - .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to access various device information properties, such as Manufacturer, Model, VersionString, and Platform, using the IDeviceInfo interface in .NET MAUI. It relies on the DeviceInfo.Current property to get the default implementation of the IDeviceInfo interface.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/information.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring DeviceDetails()\n{\n\tStringBuilder sb = new StringBuilder();\n\tsb.AppendLine($\"Manufacturer: {DeviceInfo.Manufacturer}\");\n\tsb.AppendLine($\"Model: {DeviceInfo.Model}\");\n\tsb.AppendLine($\"Name: {DeviceInfo.Name}\");\n\tsb.AppendLine($\"OS Version: {DeviceInfo.VersionString}\");\n\tsb.AppendLine($\"Platform: {DeviceInfo.Platform}\");\n\tsb.AppendLine($\"Idiom: {DeviceInfo.Idiom}\");\n\tsb.AppendLine($\"Device Type: {DeviceInfo.DeviceType}\");\n\treturn sb.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IValueConverter in C#\nDESCRIPTION: This C# code defines a `FloatToIntConverter` class that implements the `IValueConverter` interface. It converts a `float` value to an `int` and vice-versa, using a multiplier or divider obtained from the `ConverterParameter`. It handles cases where the parameter is invalid by defaulting to 1.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Globalization;\n\nnamespace XamlSamples\n{\n    public class FloatToIntConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            float multiplier;\n\n            if (!float.TryParse(parameter as string, out multiplier))\n                multiplier = 1;\n\n            return (int)Math.Round(multiplier * (float)value);\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            float divider;\n\n            if (!float.TryParse(parameter as string, out divider))\n                divider = 1;\n\n            return ((float)(int)value) / divider;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Style Definition in XAML\nDESCRIPTION: This code snippet defines a global style within the Application.Resources section of the App.xaml file.  The style, identified by the x:Key \"buttonStyle\", targets Button objects and sets properties such as HorizontalOptions, VerticalOptions, BorderColor, CornerRadius, BorderWidth, WidthRequest and TextColor. This style can be referenced and applied to Button objects throughout the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:Styles\"\n             x:Class=\"Styles.App\">\n    <Application.Resources>        \n        <Style x:Key=\"buttonStyle\" TargetType=\"Button\">\n            <Setter Property=\"HorizontalOptions\"\n                        Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\"\n                        Value=\"CenterAndExpand\" />\n            <Setter Property=\"BorderColor\"\n                        Value=\"Lime\" />\n            <Setter Property=\"CornerRadius\"\n                        Value=\"5\" />\n            <Setter Property=\"BorderWidth\"\n                        Value=\"5\" />\n            <Setter Property=\"WidthRequest\"\n                        Value=\"200\" />\n            <Setter Property=\"TextColor\"\n                        Value=\"Teal\" />\n        </Style>\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: ScrollView as Root Layout XAML\nDESCRIPTION: This XAML code shows how to use ScrollView as the root layout within a ContentPage. A StackLayout within the ScrollView uses a BindableLayout to display color names and boxes.  The ScrollView allows the content to scroll vertically if it exceeds the screen's height. No external dependencies are explicitly listed in the code, but it relies on the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:ScrollViewDemos\"\n             x:Class=\"ScrollViewDemos.Views.XAML.ColorListPage\"\n             Title=\"ScrollView demo\">\n    <ScrollView Margin=\"20\">\n        <StackLayout BindableLayout.ItemsSource=\"{x:Static local:NamedColor.All}\">\n            <BindableLayout.ItemTemplate>\n                <DataTemplate x:DataType=\"local:NamedColor\">\n                    <StackLayout Orientation=\"Horizontal\">\n                        <BoxView Color=\"{Binding Color}\"\n                                 HeightRequest=\"32\"\n                                 WidthRequest=\"32\"\n                                 VerticalOptions=\"Center\" />\n                        <Label Text=\"{Binding FriendlyName}\"\n                               FontSize=\"24\"\n                               VerticalOptions=\"Center\" />\n                    </StackLayout>\n                </DataTemplate>\n            </BindableLayout.ItemTemplate>\n        </StackLayout>\n    </ScrollView>\n</ContentPage>\n\n```\n\n----------------------------------------\n\nTITLE: Write Value to Secure Storage - C#\nDESCRIPTION: This C# code snippet demonstrates how to write a value to secure storage using the `SecureStorage.SetAsync` method. It takes a key and a value as input and stores them securely. The `SetAsync` method is asynchronous and requires the `async` keyword and `await` operator. Exceptions can occur if secure storage is not supported or encryption keys change.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait SecureStorage.SetAsync(\"oauth_token\", \"secret-oauth-token-value\");\n```\n\n----------------------------------------\n\nTITLE: Customize Entry using Handler Mapper - C#\nDESCRIPTION: This code snippet demonstrates how to customize the .NET MAUI Entry control globally using the handler's property mapper.  It selects all text in the Entry field when it gains focus on Android, iOS, and Windows. This customization affects all Entry controls in the application after an instance of the CustomizeEntryPage is created.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CustomizeHandlersDemo.Views;\n\npublic partial class CustomizeEntryPage : ContentPage\n{\n    public CustomizeEntryPage()\n    {\n        InitializeComponent();\n        ModifyEntry();\n    }\n\n    void ModifyEntry()\n    {\n        Microsoft.Maui.Handlers.EntryHandler.Mapper.AppendToMapping(\"MyCustomization\", (handler, view) =>\n        {\n#if ANDROID\n            handler.PlatformView.SetSelectAllOnFocus(true);\n#elif IOS || MACCATALYST\n            handler.PlatformView.EditingDidBegin += (s, e) =>\n            {\n                handler.PlatformView.PerformSelector(new ObjCRuntime.Selector(\"selectAll\"), null, 0.0f);\n            };\n#elif WINDOWS\n            handler.PlatformView.GotFocus += (s, e) =>\n            {\n                handler.PlatformView.SelectAll();\n            };\n#endif\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register detail page routes in C#\nDESCRIPTION: This C# code snippet shows how to register detail pages that are not part of the Shell visual hierarchy using the Routing.RegisterRoute method. This allows navigation to these pages from anywhere within the application using URI-based navigation.  These routes are considered global routes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nRouting.RegisterRoute(\"monkeydetails\", typeof(MonkeyDetailPage));\nRouting.RegisterRoute(\"beardetails\", typeof(BearDetailPage));\nRouting.RegisterRoute(\"catdetails\", typeof(CatDetailPage));\nRouting.RegisterRoute(\"dogdetails\", typeof(DogDetailPage));\nRouting.RegisterRoute(\"elephantdetails\", typeof(ElephantDetailPage));\n```\n\n----------------------------------------\n\nTITLE: Keychain Entitlements XML\nDESCRIPTION: This XML snippet defines the keychain access groups entitlement for an iOS app. The `$(AppIdentifierPrefix)` and `$(CFBundleIdentifier)` placeholders will be replaced with the actual app identifier prefix and bundle identifier at build time. This configuration is necessary for the app to securely store and retrieve data from the Keychain.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/secure-storage.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<key>keychain-access-groups</key>\n<array>\n  <string>$(AppIdentifierPrefix)$(CFBundleIdentifier)</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Getting Device Idiom - .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to determine the type of device the app is running on, such as a phone or tablet, by comparing the IDeviceInfo.Idiom property with DeviceIdiom.Phone. This is useful for adapting the UI based on the device form factor.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/information.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (DeviceInfo.Idiom == DeviceIdiom.Phone)\n{\n\t// Do something on a phone\n}\n```\n\n----------------------------------------\n\nTITLE: Customize UI appearance based on platform with OnPlatform class in XAML\nDESCRIPTION: This snippet demonstrates how to use the OnPlatform class in XAML to customize the Padding property of a ContentPage based on the operating system (iOS, Android). It specifies different Thickness values for iOS and Android platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\">\n            <On Platform=\"iOS\" Value=\"0,20,0,0\" />\n            <On Platform=\"Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating an Attached Bindable Property in C#\nDESCRIPTION: This code snippet demonstrates how to create an attached bindable property using `BindableProperty.CreateAttached`. The attached property is named `HasShadowProperty` and is of type `bool`. It belongs to the `MyControl` class and has a default value of `false`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyControl\n{\n    public static readonly BindableProperty HasShadowProperty =\n        BindableProperty.CreateAttached(\"HasShadow\", typeof(bool), typeof(MyControl), false);\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization of SQLite Connection in C#\nDESCRIPTION: This C# code shows how to lazily initialize a SQLiteAsyncConnection using the SQLite-net library.  It checks if the database connection is already initialized, and if not, creates a new connection using the provided database path and flags, and then creates a table for TodoItem objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TodoItemDatabase\n{\n    SQLiteAsyncConnection database;\n\n    async Task Init()\n    {\n        if (database is not null)\n            return;\n\n        database = new SQLiteAsyncConnection(Constants.DatabasePath, Constants.Flags);\n        var result = await database.CreateTableAsync<TodoItem>();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Property Mapper for .NET MAUI Handler (C#)\nDESCRIPTION: Extends the `CustomEntryHandler` class with a `PropertyMapper` definition that maps the cross-platform control's properties (`Text`, `TextColor`) to their associated Actions (`MapText`, `MapTextColor`).  The `PropertyMapper` is a dictionary where the key is the control property name and the value is a static method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class CustomEntryHandler\n{\n    public static PropertyMapper<CustomEntry, CustomEntryHandler> PropertyMapper = new PropertyMapper<CustomEntry, CustomEntryHandler>(ViewHandler.ViewMapper)\n    {\n        [nameof(CustomEntry.Text)] = MapText,\n        [nameof(CustomEntry.TextColor)] = MapTextColor\n    };\n\n    public CustomEntryHandler() : base(PropertyMapper)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button in XAML\nDESCRIPTION: This XAML code demonstrates how to create a Button with text, vertical and horizontal alignment, and a Clicked event handler. The button is placed within a StackLayout along with a Label, which will be rotated upon button click.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ButtonDemos.BasicButtonClickPage\"\n             Title=\"Basic Button Click\">\n    <StackLayout>\n        <Button Text=\"Click to Rotate Text!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\"\n                Clicked=\"OnButtonClicked\" />\n        <Label x:Name=\"label\"\n               Text=\"Click the Button above\"\n               FontSize=\"18\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Releasing IDisposable Resources with using in C#\nDESCRIPTION: This code snippet demonstrates how to use a `using` statement to ensure that an `IDisposable` resource is properly disposed of when it is no longer needed. The `StreamReader` class implements `IDisposable`, and the `using` statement guarantees that the `Dispose` method will be called, even if an exception occurs.  This prevents resource leaks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ReadText(string filename)\n{\n    string text;\n    using (StreamReader reader = new StreamReader(filename))\n    {\n        text = reader.ReadToEnd();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke JavaScript Method with Void Return (Generic)\nDESCRIPTION: This C# code demonstrates invoking a JavaScript method with a void return using the `InvokeJavaScriptAsync` method, specifying a generic type and passing `null` as the JSON serialization information. This is an alternative approach to the previous example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nawait hybridWebView.InvokeJavaScriptAsync<double>(\n        \"javaScriptWithParamsAndVoidReturn\", // JavaScript method name\n        null, // JSON serialization info for return type\n        [x, y], // Parameter values\n        [HybridSampleJSContext.Default.Double, HybridSampleJSContext.Default.Double]); // JSON serialization info for each parameter\n```\n\n----------------------------------------\n\nTITLE: Invoking JavaScript from WebView - C#\nDESCRIPTION: This code snippet demonstrates how to invoke a JavaScript function from C# using the WebView.EvaluateJavaScriptAsync method. It defines an entry field for number input and a label to display results. It parses the number entered, calls the JavaScript function 'factorial' with the number as an argument, and displays the result in the label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nEntry numberEntry = new Entry { Text = \"5\" };\nLabel resultLabel = new Label();\nWebView webView = new WebView();\n...\n\nint number = int.Parse(numberEntry.Text);\nstring result = await webView.EvaluateJavaScriptAsync($\"factorial({number})\");\nresultLabel.Text = $\"Factorial of {number} is {result}.\";\n```\n\n----------------------------------------\n\nTITLE: XAML: Binding Context Inheritance Example\nDESCRIPTION: Shows how BindingContext is inherited through the visual tree.  A StackLayout's BindingContext is set to a Slider instance.  The Label and BoxView within the StackLayout inherit this context and bind their Rotation property to the Slider's Value property without explicitly setting a Source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DataBindingDemos.BindingContextInheritancePage\"\n             Title=\"BindingContext Inheritance\">\n    <StackLayout Padding=\"10\">\n        <StackLayout x:DataType=\"Slider\"\n                     VerticalOptions=\"Fill\"\n                     BindingContext=\"{x:Reference slider}\">\n\n            <Label Text=\"TEXT\"\n                   FontSize=\"80\"\n                   HorizontalOptions=\"Center\"\n                   VerticalOptions=\"End\"\n                   Rotation=\"{Binding Value}\" />\n\n            <BoxView Color=\"#800000FF\"\n                     WidthRequest=\"180\"\n                     HeightRequest=\"40\"\n                     HorizontalOptions=\"Center\"\n                     VerticalOptions=\"Start\"\n                     Rotation=\"{Binding Value}\" />\n        </StackLayout>\n\n        <Slider x:Name=\"slider\"\n                Maximum=\"360\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with ImageCell - XAML\nDESCRIPTION: This code snippet demonstrates how to define the appearance of each item in a ListView using ImageCell. It binds the ImageSource, Text, and Detail properties of the ImageCell to the Image, Name, and Description properties of a FoodItem object, respectively.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView ItemsSource=\"{Binding Food}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:FoodItem\">\n            <ImageCell ImageSource=\"{Binding Image}\"\n                       Text=\"{Binding Name}\"\n                       Detail=\"{Binding Description}\" />\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Registering IWindowCreator in MauiProgram - C#\nDESCRIPTION: This C# code snippet shows how to register the `IWindowCreator` implementation as a singleton service in the `MauiProgram` class. This allows the application to use the custom window creation logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSingleton<IWindowCreator, WindowCreator>();\n```\n\n----------------------------------------\n\nTITLE: WebView Navigation in C#\nDESCRIPTION: This code snippet demonstrates how to navigate backwards and forwards in a WebView using the `GoBack()` and `GoForward()` methods. It checks the `CanGoBack` and `CanGoForward` properties before navigating to ensure that the navigation is possible. The code requires an initialized WebView object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nWebView webView = new WebView();\n...\n\n// Go backwards, if allowed.\nif (webView.CanGoBack)\n{\n    webView.GoBack();\n}\n\n// Go forwards, if allowed.\nif (webView.CanGoForward)\n{\n    webView.GoForward();\n}\n```\n\n----------------------------------------\n\nTITLE: Implement NotificationRegistrationService C#\nDESCRIPTION: Implements the INotificationRegistrationService interface, handling device registration, deregistration, and refreshing.  It uses HttpClient to interact with a backend API, SecureStorage to cache the device token and tags, and IDeviceInstallationService to get device-specific information. Requires a base API URL and API key for communication.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text;\nusing System.Text.Json;\nusing PushNotificationsDemo.Models;\n\nnamespace PushNotificationsDemo.Services;\n\npublic class NotificationRegistrationService : INotificationRegistrationService\n{\n    const string RequestUrl = \"api/notifications/installations\";\n    const string CachedDeviceTokenKey = \"cached_device_token\";\n    const string CachedTagsKey = \"cached_tags\";\n\n    string _baseApiUrl;\n    HttpClient _client;\n    IDeviceInstallationService _deviceInstallationService;\n\n    IDeviceInstallationService DeviceInstallationService =>\n        _deviceInstallationService ?? (_deviceInstallationService = Application.Current.Windows[0].Page.Handler.MauiContext.Services.GetService<IDeviceInstallationService>());\n\n    public NotificationRegistrationService(string baseApiUri, string apiKey)\n    {\n        _client = new HttpClient();\n        _client.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n        _client.DefaultRequestHeaders.Add(\"apikey\", apiKey);\n\n        _baseApiUrl = baseApiUri;\n    }\n\n    public async Task DeregisterDeviceAsync()\n    {\n        var cachedToken = await SecureStorage.GetAsync(CachedDeviceTokenKey)\n            .ConfigureAwait(false);\n\n        if (cachedToken == null)\n            return;\n\n        var deviceId = DeviceInstallationService?.GetDeviceId();\n\n        if (string.IsNullOrWhiteSpace(deviceId))\n            throw new Exception(\"Unable to resolve an ID for the device.\");\n\n        await SendAsync(HttpMethod.Delete, $\"{RequestUrl}/{deviceId}\")\n            .ConfigureAwait(false);\n\n        SecureStorage.Remove(CachedDeviceTokenKey);\n        SecureStorage.Remove(CachedTagsKey);\n    }\n\n    public async Task RegisterDeviceAsync(params string[] tags)\n    {\n        var deviceInstallation = DeviceInstallationService?.GetDeviceInstallation(tags);\n\n        await SendAsync<DeviceInstallation>(HttpMethod.Put, RequestUrl, deviceInstallation)\n            .ConfigureAwait(false);\n\n        await SecureStorage.SetAsync(CachedDeviceTokenKey, deviceInstallation.PushChannel)\n            .ConfigureAwait(false);\n\n        await SecureStorage.SetAsync(CachedTagsKey, JsonSerializer.Serialize(tags));\n    }\n\n    public async Task RefreshRegistrationAsync()\n    {\n        var cachedToken = await SecureStorage.GetAsync(CachedDeviceTokenKey)\n            .ConfigureAwait(false);\n\n        var serializedTags = await SecureStorage.GetAsync(CachedTagsKey)\n            .ConfigureAwait(false);\n\n        if (string.IsNullOrWhiteSpace(cachedToken) ||\n            string.IsNullOrWhiteSpace(serializedTags) ||\n            string.IsNullOrWhiteSpace(_deviceInstallationService.Token) ||\n            cachedToken == DeviceInstallationService.Token)\n            return;\n\n        var tags = JsonSerializer.Deserialize<string[]>(serializedTags);\n\n        await RegisterDeviceAsync(tags);\n    }\n\n    async Task SendAsync<T>(HttpMethod requestType, string requestUri, T obj)\n    {\n        string serializedContent = null;\n\n        await Task.Run(() => serializedContent = JsonSerializer.Serialize(obj))\n            .ConfigureAwait(false);\n\n        await SendAsync(requestType, requestUri, serializedContent);\n    }\n\n    async Task SendAsync(HttpMethod requestType, string requestUri, string jsonRequest = null)\n    {\n        var request = new HttpRequestMessage(requestType, new Uri($\"{_baseApiUrl}{requestUri}\"));\n\n        if (jsonRequest != null)\n            request.Content = new StringContent(jsonRequest, Encoding.UTF8, \"application/json\");\n\n        var response = await _client.SendAsync(request).ConfigureAwait(false);\n\n        response.EnsureSuccessStatusCode();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Selection in CollectionView (C#)\nDESCRIPTION: This C# snippet demonstrates how to enable single item selection in a CollectionView programmatically. It sets the `SelectionMode` to `Single`, binds the `ItemsSourceProperty` to a collection, and attaches an event handler to the `SelectionChanged` event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    SelectionMode = SelectionMode.Single\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\ncollectionView.SelectionChanged += OnCollectionViewSelectionChanged;\n```\n\n----------------------------------------\n\nTITLE: Automatic Dependency Resolution: Constructor Injection C#\nDESCRIPTION: This example demonstrates automatic dependency resolution in a .NET MAUI Shell-based app. The `MainPage` constructor receives a `MainPageViewModel` instance injected by the container.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage(MainPageViewModel viewModel)\n{\n    InitializeComponent();\n\n    BindingContext = viewModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Video Position Slider\nDESCRIPTION: This C# code snippet demonstrates how to create a custom slider, `PositionSlider`, for controlling the video's position. It includes bindable properties for both the duration and position of the video, which update the slider's maximum value and current value, respectively. This allows users to interactively control the video's playback position.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class PositionSlider : Slider\n    {\n        public static readonly BindableProperty DurationProperty =\n            BindableProperty.Create(nameof(Duration), typeof(TimeSpan), typeof(PositionSlider), new TimeSpan(1),\n                propertyChanged: (bindable, oldValue, newValue) =>\n                {\n                    double seconds = ((TimeSpan)newValue).TotalSeconds;\n                    ((Slider)bindable).Maximum = seconds <= 0 ? 1 : seconds;\n                });\n\n        public static readonly BindableProperty PositionProperty =\n            BindableProperty.Create(nameof(Position), typeof(TimeSpan), typeof(PositionSlider), new TimeSpan(0),\n                defaultBindingMode: BindingMode.TwoWay,\n                propertyChanged: (bindable, oldValue, newValue) =>\n                {\n                    double seconds = ((TimeSpan)newValue).TotalSeconds;\n                    ((Slider)bindable).Value = seconds;\n                });\n\n        public TimeSpan Duration\n        {\n            get { return (TimeSpan)GetValue(DurationProperty); }\n            set { SetValue(DurationProperty, value); }\n        }\n\n        public TimeSpan Position\n        {\n            get { return (TimeSpan)GetValue(PositionProperty); }\n            set { SetValue (PositionProperty, value); }\n        }\n\n        public PositionSlider()\n        {\n            PropertyChanged += (sender, args) =>\n            {\n                if (args.PropertyName == \"Value\")\n                {\n                    TimeSpan newPosition = TimeSpan.FromSeconds(Value);\n                    if (Math.Abs(newPosition.TotalSeconds - Position.TotalSeconds) / Duration.TotalSeconds > 0.01)\n                        Position = newPosition;\n                }\n            };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollView as Root Layout C#\nDESCRIPTION: This C# code creates a ScrollView as the root layout of a ContentPage programmatically. A DataTemplate is used to define the visual structure for each item in the bindable layout, including a BoxView and a Label. NamedColor.All is bound to the StackLayout's ItemsSource, which is then nested within the ScrollView. Requires .NET MAUI framework and the 'NamedColor' class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ColorListPage : ContentPage\n{\n    public ColorListPage()\n    {\n        DataTemplate dataTemplate = new DataTemplate(() =>\n        {\n            BoxView boxView = new BoxView\n            {\n                HeightRequest = 32,\n                WidthRequest = 32,\n                VerticalOptions = LayoutOptions.Center\n            };\n            boxView.SetBinding(BoxView.ColorProperty, static (NamedColor nc) => nc.Color);\n\n            Label label = new Label\n            {\n                FontSize = 24,\n                VerticalOptions = LayoutOptions.Center\n            };\n            label.SetBinding(Label.TextProperty, static (NamedColor nc) => nc.FriendlyName);\n\n            StackLayout horizontalStackLayout = new StackLayout\n            {\n                Orientation = StackOrientation.Horizontal\n            };\n            horizontalStackLayout.Add(boxView);\n            horizontalStackLayout.Add(label);\n\n            return horizontalStackLayout;\n        });\n\n        StackLayout stackLayout = new StackLayout();\n        BindableLayout.SetItemsSource(stackLayout, NamedColor.All);\n        BindableLayout.SetItemTemplate(stackLayout, dataTemplate);\n\n        ScrollView scrollView = new ScrollView\n        {\n            Margin = new Thickness(20),\n            Content = stackLayout\n        };\n\n        Title = \"ScrollView demo\";\n        Content = scrollView;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Load a CSS style sheet in XAML\nDESCRIPTION: This XAML snippet demonstrates how to load a CSS style sheet from a file and add it to the Application's ResourceDictionary.  The `StyleSheet.Source` property specifies the URI of the CSS file, relative to the XAML file or the project root. Requires that the CSS file's build action is set to MauiCss.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Application ...>\n    <Application.Resources>\n        <StyleSheet Source=\"/Resources/styles.css\" />\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Bottom and Top Tabs with Implicit Conversions\nDESCRIPTION: This XAML snippet creates a combination of bottom and top tabs in a .NET MAUI Shell application, utilizing implicit conversions. It places ShellContent elements directly under a Tab element to create top tabs within that bottom tab. The last ShellContent is implicitly wrapped in a Tab.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <Tab Title=\"Domestic\"\n            Icon=\"paw.png\">\n           <ShellContent Title=\"Cats\"\n                         Icon=\"cat.png\"\n                         ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n           <ShellContent Title=\"Dogs\"\n                         Icon=\"dog.png\"\n                         ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n       </Tab>\n       <ShellContent Title=\"Monkeys\"\n                     Icon=\"monkey.png\"\n                     ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Ignore Specific Warnings - XML\nDESCRIPTION: This XML snippet shows how to ignore specific XAML compiler warnings using the `$(NoWarn)` build property. This can be useful if you want to suppress certain warnings related to compiled bindings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<NoWarn>$(NoWarn);XC0022;XC0023</NoWarn>\n```\n\n----------------------------------------\n\nTITLE: Defining BoolToObjectConverter with Generics in C#\nDESCRIPTION: This C# code defines a generic value converter, `BoolToObjectConverter<T>`, implementing the `IValueConverter` interface. It converts a boolean value to an object of type `T` based on the `TrueObject` and `FalseObject` properties. The `ConvertBack` method converts an object of type `T` back to a boolean value, indicating whether the value is equal to `TrueObject`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BoolToObjectConverter<T> : IValueConverter\n{\n    public T TrueObject { get; set; }\n    public T FalseObject { get; set; }\n\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? TrueObject : FalseObject;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return ((T)value).Equals(TrueObject);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CustomEntryHandler Implementation (Android, net-maui-9.0)\nDESCRIPTION: This C# code defines a `CustomEntryHandler` for Android, inheriting from `ViewHandler<CustomEntry, AppCompatEditText>`.  It overrides `CreatePlatformView`, `ConnectHandler`, and `DisconnectHandler` to manage the native `AppCompatEditText`. It also implements `MapText` and `MapTextColor` methods to update the native control's properties based on the cross-platform `CustomEntry` control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nusing AndroidX.AppCompat.Widget;\nusing Microsoft.Maui.Handlers;\nusing Microsoft.Maui.Platform;\nusing MyMauiControl.Controls;\n\nnamespace MyMauiControl.Handlers\n{\n    public partial class CustomEntryHandler : ViewHandler<CustomEntry, AppCompatEditText>\n    {\n        protected override AppCompatEditText CreatePlatformView() => new AppCompatEditText(Context);\n\n        protected override void ConnectHandler(AppCompatEditText platformView)\n        {\n            base.ConnectHandler(platformView);\n\n            // Perform any control setup here\n        }\n\n        protected override void DisconnectHandler(AppCompatEditText platformView)\n        {\n            // Perform any native view cleanup here\n            platformView.Dispose();\n            base.DisconnectHandler(platformView);\n        }\n\n        public static void MapText(CustomEntryHandler handler, CustomEntry view)\n        {\n            handler.PlatformView.Text = view.Text;\n            handler.PlatformView?.SetSelection(handler.PlatformView?.Text?.Length ?? 0);\n        }\n\n        public static void MapTextColor(CustomEntryHandler handler, CustomEntry view)\n        {\n            handler.PlatformView?.SetTextColor(view.TextColor.ToPlatform());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BoolToObjectConverter with Color in XAML\nDESCRIPTION: This XAML snippet shows the usage of the `BoolToObjectConverter` to modify the `TextColor` of a label. The generic type `Color` is specified using `x:TypeArguments`.  The `TrueObject` and `FalseObject` properties are set to `Green` and `Red` respectively.  The label's text color will change to green when the associated switch is toggled on and red when it's toggled off.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Label>\n    <Label.TextColor>\n        <Binding x:DataType=\"Switch\"\n                 Source=\"{x:Reference switch2}\"\n                 Path=\"IsToggled\">\n            <Binding.Converter>\n                <local:BoolToObjectConverter x:TypeArguments=\"Color\"\n                                             TrueObject=\"Green\"\n                                             FalseObject=\"Red\" />\n            </Binding.Converter>\n        </Binding>\n    </Label.TextColor>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bindable Property\nDESCRIPTION: This code snippet demonstrates how to create a bindable property named `IsExpandedProperty` of type `bool` in a class derived from `BindableObject`. It uses the `BindableProperty.Create` method to define the property with a name, type, owning type, and default value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly BindableProperty IsExpandedProperty =\n  BindableProperty.Create (\"IsExpanded\", typeof(bool), typeof(Expander), false);\n```\n\n----------------------------------------\n\nTITLE: Register Dependencies with Extension Methods - C#\nDESCRIPTION: This code snippet shows how to register dependencies using extension methods on `MauiAppBuilder`. It creates separate methods for registering services, view models, and views, making the registration process more organized and maintainable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n        => MauiApp.CreateBuilder()\n            .UseMauiApp<App>()\n            .RegisterServices()\n            .RegisterViewModels()\n            .RegisterViews()\n            .Build();\n\n    public static MauiAppBuilder RegisterServices(this MauiAppBuilder mauiAppBuilder)\n    {\n        mauiAppBuilder.Services.AddTransient<ILoggingService, LoggingService>();\n        mauiAppBuilder.Services.AddTransient<ISettingsService, SettingsService>();\n\n        // More services registered here.\n\n        return mauiAppBuilder;        \n    }\n\n    public static MauiAppBuilder RegisterViewModels(this MauiAppBuilder mauiAppBuilder)\n    {\n        mauiAppBuilder.Services.AddSingleton<MainPageViewModel>();\n\n        // More view-models registered here.\n\n        return mauiAppBuilder;        \n    }\n\n    public static MauiAppBuilder RegisterViews(this MauiAppBuilder mauiAppBuilder)\n    {\n        mauiAppBuilder.Services.AddSingleton<MainPage>();\n\n        // More views registered here.\n\n        return mauiAppBuilder;        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement AlarmHandler for Scheduled Notifications (C#)\nDESCRIPTION: Implements a `BroadcastReceiver` for handling scheduled notifications on Android using `AlarmManager`.  The `AlarmHandler` class receives intents from the `AlarmManager` when a scheduled notification time arrives. It extracts the notification title and message from the intent's extras and then displays the notification using the `NotificationManagerService`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[BroadcastReceiver(Enabled = true, Label = \"Local Notifications Broadcast Receiver\")]\npublic class AlarmHandler : BroadcastReceiver\n{\n    public override void OnReceive(Context context, Intent intent)\n    {\n        if (intent?.Extras != null)\n        {\n            string title = intent.GetStringExtra(NotificationManagerService.TitleKey);\n            string message = intent.GetStringExtra(NotificationManagerService.MessageKey);\n\n            NotificationManagerService manager = NotificationManagerService.Instance ?? new NotificationManagerService();\n            manager.Show(title, message);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with TextCell - XAML\nDESCRIPTION: This code snippet demonstrates how to define the appearance of each item in a ListView using TextCell. It binds the Text and Detail properties of the TextCell to the Name and Description properties of a FoodItem object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView ItemsSource=\"{Binding Food}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:FoodItem\">\n            <TextCell Text=\"{Binding Name}\"\n                      Detail=\"{Binding Description}\" />\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: XAML: Data Binding with Nested Object Elements\nDESCRIPTION: Demonstrates data binding using nested object elements for both the Binding and x:Reference markup extensions. The Label's Scale property is bound to the Slider's Value property. The Source of the binding is set using a nested x:Reference object element that references the slider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"TEXT\"\n       FontSize=\"40\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\">\n    <Label.Scale>\n        <Binding x:DataType=\"Slider\"\n                 Path=\"Value\">\n            <Binding.Source>\n                <x:Reference Name=\"slider\" />\n            </Binding.Source>\n        </Binding>\n    </Label.Scale>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Compiled Bindings (NET8 vs NET9) - C#\nDESCRIPTION: This C# code compares binding syntax in .NET MAUI 8 (string-based) with .NET MAUI 9 (using `Func`). The .NET MAUI 9 approach provides compile-time safety and performance benefits due to resolving binding expressions at compile-time. This helps avoid errors during runtime and improves the developer experience.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// in .NET 8\nMyLabel.SetBinding(Label.TextProperty, \"Text\");\n\n// in .NET 9\nMyLabel.SetBinding(Label.TextProperty, static (Entry entry) => entry.Text);\n```\n\n----------------------------------------\n\nTITLE: Slider Initialization Avoiding Exception in C#\nDESCRIPTION: This code snippet shows the correct way to initialize a Slider to avoid exceptions by setting the Maximum property before the Minimum property. This ensures that Minimum is always less than Maximum during initialization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSlider slider = new Slider\n{\n    Maximum = 20,\n    Minimum = 10\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Item Selection Event in C#\nDESCRIPTION: This C# code shows an example of an ItemSelected event handler, OnItemSelected.  It retrieves the selected item from the event arguments and casts it to the expected Monkey type. Assumes a Monkey model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnItemSelected(object sender, SelectedItemChangedEventArgs args)\n{\n    Monkey item = args.SelectedItem as Monkey;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable HyperlinkSpan Class in C#\nDESCRIPTION: This C# code defines a custom HyperlinkSpan class that inherits from Span. It includes a Url property and sets the default text decorations and color. It also adds a TapGestureRecognizer to handle clicks and open the URL in a web browser using Launcher.OpenAsync. The Essentials NuGet package is a dependency.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HyperlinkSpan : Span\n{\n    public static readonly BindableProperty UrlProperty =\n        BindableProperty.Create(nameof(Url), typeof(string), typeof(HyperlinkSpan), null);\n\n    public string Url\n    {\n        get { return (string)GetValue(UrlProperty); }\n        set { SetValue(UrlProperty, value); }\n    }\n\n    public HyperlinkSpan()\n    {\n        TextDecorations = TextDecorations.Underline;\n        TextColor = Colors.Blue;\n        GestureRecognizers.Add(new TapGestureRecognizer\n        {\n            // Launcher.OpenAsync is provided by Essentials.\n            Command = new Command(async () => await Launcher.OpenAsync(Url))\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Device Platform - .NET MAUI (C#)\nDESCRIPTION: This code snippet illustrates how to determine the operating system the application is running on by checking the IDeviceInfo.Platform property against the DevicePlatform.Android constant. This allows for platform-specific logic within the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/information.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (DeviceInfo.Platform == DevicePlatform.Android)\n{\n\t// Do something on Android\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Code Binding C#\nDESCRIPTION: This code snippet demonstrates how to create a basic data binding in C# code. It sets the BindingContext of a Label to a Slider and then uses the SetBinding method to bind the Label's RotationProperty to the Slider's Value property using a Func argument. This approach provides compiled bindings for improved performance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class BasicCodeBindingPage : ContentPage\n{\n    public BasicCodeBindingPage()\n    {\n        InitializeComponent();\n\n        label.BindingContext = slider;\n        label.SetBinding(Label.RotationProperty, static (Slider slider) => slider.Value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ICommand Interface Definition C#\nDESCRIPTION: This code snippet shows the definition of the ICommand interface, which contains the Execute and CanExecute methods, and the CanExecuteChanged event. It's part of the System.Windows.Input namespace and used for implementing commands in MVVM.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICommand\n{\n    public void Execute (Object parameter);\n    public bool CanExecute (Object parameter);\n    public event EventHandler CanExecuteChanged;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom RadioButton ControlTemplate in XAML\nDESCRIPTION: This XAML code defines a ControlTemplate that customizes the appearance of RadioButton objects in .NET MAUI. It uses a Border, Grid, Ellipse, and ContentPresenter to create a custom visual representation, including visual states for Checked and Unchecked states.  An implicit style is used to apply the template to all RadioButtons on the page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <ControlTemplate x:Key=\"RadioButtonTemplate\">\n            <Border Stroke=\"#F3F2F1\"\n                    StrokeThickness=\"2\"\n                    StrokeShape=\"RoundRectangle 10\"\n                    BackgroundColor=\"#F3F2F1\"\n                    HeightRequest=\"90\"\n                    WidthRequest=\"90\"\n                    HorizontalOptions=\"Start\"\n                    VerticalOptions=\"Start\">\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroupList>\n                        <VisualStateGroup x:Name=\"CheckedStates\">\n                            <VisualState x:Name=\"Checked\">\n                                <VisualState.Setters>\n                                    <Setter Property=\"Stroke\"\n                                            Value=\"#FF3300\" />\n                                    <Setter TargetName=\"check\"\n                                            Property=\"Opacity\"\n                                            Value=\"1\" />\n                                </VisualState.Setters>\n                            </VisualState>\n                            <VisualState x:Name=\"Unchecked\">\n                                <VisualState.Setters>\n                                    <Setter Property=\"BackgroundColor\"\n                                            Value=\"#F3F2F1\" />\n                                    <Setter Property=\"Stroke\"\n                                            Value=\"#F3F2F1\" />\n                                    <Setter TargetName=\"check\"\n                                            Property=\"Opacity\"\n                                            Value=\"0\" />\n                                </VisualState.Setters>\n                            </VisualState>\n                        </VisualStateGroup>\n                    </VisualStateGroupList>\n                </VisualStateManager.VisualStateGroups>\n                <Grid Margin=\"4\"\n                      WidthRequest=\"90\">\n                    <Grid Margin=\"0,0,4,0\"\n                          WidthRequest=\"18\"\n                          HeightRequest=\"18\"\n                          HorizontalOptions=\"End\"\n                          VerticalOptions=\"Start\">\n                        <Ellipse Stroke=\"Blue\"\n                                 Fill=\"White\"\n                                 WidthRequest=\"16\"\n                                 HeightRequest=\"16\"\n                                 HorizontalOptions=\"Center\"\n                                 VerticalOptions=\"Center\" />\n                        <Ellipse x:Name=\"check\"\n                                 Fill=\"Blue\"\n                                 WidthRequest=\"8\"\n                                 HeightRequest=\"8\"\n                                 HorizontalOptions=\"Center\"\n                                 VerticalOptions=\"Center\" />\n                    </Grid>\n                    <ContentPresenter />\n                </Grid>\n            </Border>\n        </ControlTemplate>\n\n        <Style TargetType=\"RadioButton\">\n            <Setter Property=\"ControlTemplate\"\n                    Value=\"{StaticResource RadioButtonTemplate}\" />\n        </Style>\n    </ContentPage.Resources>\n    <!-- Page content -->\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Consume Behavior in C#\nDESCRIPTION: This snippet demonstrates how to consume a custom behavior programmatically in C# by adding it to the Behaviors collection of an Entry control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nEntry entry = new Entry { Placeholder = \"Enter a System.Double\" };\nentry.Behaviors.Add(new NumericValidationBehavior());\n```\n\n----------------------------------------\n\nTITLE: Create TapGestureRecognizer in XAML\nDESCRIPTION: This XAML code demonstrates how to attach a TapGestureRecognizer to an Image control. It handles the Tapped event and sets the number of taps required to recognize the gesture.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\">\n    <Image.GestureRecognizers>\n        <TapGestureRecognizer Tapped=\"OnTapGestureRecognizerTapped\"\n                              NumberOfTapsRequired=\"2\" />\n  </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Enable HybridWebView Developer Tools in MAUI\nDESCRIPTION: This C# code snippet modifies the `CreateMauiApp` method to enable developer tools for the underlying WebView controls when the app is running in debug mode. It uses the `AddHybridWebViewDeveloperTools` extension method and adds debug logging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n    using Microsoft.Extensions.Logging;\n\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                });\n\n    #if DEBUG\n            builder.Services.AddHybridWebViewDeveloperTools();\n            builder.Logging.AddDebug();            \n    #endif\n            // Register any app services on the IServiceCollection object\n\n            return builder.Build();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Access Scoped Services from Native UI\nDESCRIPTION: Demonstrates how to access scoped services, such as NavigationManager, from the native UI using the `TryDispatchAsync` method of the BlazorWebView. The method asynchronously calls a specified Action with access to the scoped services, enabling the native UI to interact with Blazor components' services. Failure to dispatch should be handled appropriately.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate async void OnMyMauiButtonClicked(object sender, EventArgs e)\n{\n    var wasDispatchCalled = await blazorWebView.TryDispatchAsync(sp =>\n    {\n        var navMan = sp.GetRequiredService<NavigationManager>();\n        navMan.CallSomeNavigationApi(...);\n    });\n\n    if (!wasDispatchCalled)\n    {\n        // Consider what to do if it the dispatch fails - that's up to your app to decide.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Preselection - C#\nDESCRIPTION: This C# code demonstrates how to configure multiple selection in a CollectionView, binding the ItemsSource and SelectedItems properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    SelectionMode = SelectionMode.Multiple\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\ncollectionView.SetBinding(SelectableItemsView.SelectedItemsProperty,  static (MonkeysViewModel vm) => vm.SelectedMonkeys);\n```\n\n----------------------------------------\n\nTITLE: Data Binding CollectionView ItemsSource in XAML\nDESCRIPTION: This snippet demonstrates how to populate a CollectionView in XAML by binding its ItemsSource property to a collection (Monkeys) in the viewmodel.  The viewmodel must expose the Monkeys property as an IEnumerable collection. The XAML uses the Binding markup extension to achieve this.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\" />\n```\n\n----------------------------------------\n\nTITLE: Display String Header and Footer in ListView (XAML)\nDESCRIPTION: Shows how to set a simple string as a Header and Footer for a ListView in XAML.  The `Header` and `Footer` properties are directly assigned string values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_17\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\"\n          Header=\"Monkeys\"\n          Footer=\"2022\">\n    ...\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Configure CollectionView and CarouselView Handlers (iOS/Mac Catalyst) - C#\nDESCRIPTION: This code snippet configures the new, optional handlers for `CollectionView` and `CarouselView` on iOS and Mac Catalyst platforms. It utilizes `UICollectionView` APIs to improve performance and stability. To enable these handlers, the code must be added to the `MauiProgram` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#if IOS || MACCATALYST\nbuilder.ConfigureMauiHandlers(handlers =>\n{\n    handlers.AddHandler<Microsoft.Maui.Controls.CollectionView, Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2>();\n    handlers.AddHandler<Microsoft.Maui.Controls.CarouselView, Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2>();\n});\n#endif\n```\n\n----------------------------------------\n\nTITLE: Open map with Placemark extension method (C#)\nDESCRIPTION: This C# code snippet demonstrates using the OpenMapsAsync extension method to open the map with a Placemark.  It leverages the built-in extension method for convenience, requiring only the Microsoft.Maui.Devices.Sensors namespace to be imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar placemark = new Placemark\n{\n    CountryName = \"United States\",\n    AdminArea = \"WA\",\n    Thoroughfare = \"Microsoft Building 25\",\n    Locality = \"Redmond\"\n};\n\nawait placemark.OpenMapsAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Lifecycle Events in .NET MAUI with C#\nDESCRIPTION: This code snippet demonstrates how to configure iOS lifecycle events in a .NET MAUI application using the `ConfigureLifecycleEvents` method and the `AddiOS` extension. It registers handlers for `OnActivated`, `OnResignActivation`, `DidEnterBackground`, and `WillTerminate` events. It requires the `Microsoft.Maui.LifecycleEvents` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n\nnamespace PlatformLifecycleDemo\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureLifecycleEvents(events =>\n                {\n#if IOS || MACCATALYST\n                    events.AddiOS(ios => ios\n                        .OnActivated((app) => LogEvent(nameof(iOSLifecycle.OnActivated)))\n                        .OnResignActivation((app) => LogEvent(nameof(iOSLifecycle.OnResignActivation)))\n                        .DidEnterBackground((app) => LogEvent(nameof(iOSLifecycle.DidEnterBackground)))\n                        .WillTerminate((app) => LogEvent(nameof(iOSLifecycle.WillTerminate))));\n#endif\n                    static bool LogEvent(string eventName, string type = null)\n                    {\n                        System.Diagnostics.Debug.WriteLine($\"Lifecycle event: {eventName}{(type == null ? string.Empty : $\" ({type})\")}\");\n                        return true;\n                    }\n                });\n\n            return builder.Build();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Commands in C#\nDESCRIPTION: This C# code shows how to initialize the `NewCommand` in the `PersonCollectionViewModel` constructor using the `Command` class. It defines the `execute` and `canExecute` delegates as lambda expressions. The execute logic creates a new `PersonViewModel`, sets the `IsEditing` flag, and refreshes the can execute states of the commands.  The canExecute logic returns true if not currently editing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonCollectionViewModel : INotifyPropertyChanged\n{\n    ···\n    public PersonCollectionViewModel()\n    {\n        NewCommand = new Command(\n            execute: () =>\n            {\n                PersonEdit = new PersonViewModel();\n                PersonEdit.PropertyChanged += OnPersonEditPropertyChanged;\n                IsEditing = true;\n                RefreshCanExecutes();\n            },\n            canExecute: () =>\n            {\n                return !IsEditing;\n            });\n        ···\n    }\n\n    void OnPersonEditPropertyChanged(object sender, PropertyChangedEventArgs args)\n    {\n        (SubmitCommand as Command).ChangeCanExecute();\n    }\n\n    void RefreshCanExecutes()\n    {\n        (NewCommand as Command).ChangeCanExecute();\n        (SubmitCommand as Command).ChangeCanExecute();\n        (CancelCommand as Command).ChangeCanExecute();\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DigitCommand with CommandParameter\nDESCRIPTION: This C# snippet implements the DigitCommand using the generic Command<string> class. The execute method appends the command parameter (a digit or decimal point) to the Entry property, removing leading zeros where applicable. The canExecute method prevents adding multiple decimal points.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DecimalKeypadViewModel : INotifyPropertyChanged\n{\n    ···\n    public DecimalKeypadViewModel()\n    {\n        ···\n        DigitCommand = new Command<string>(\n            execute: (string arg) =>\n            {\n                Entry += arg;\n                if (Entry.StartsWith(\"0\") && !Entry.StartsWith(\"0.\"))\n                {\n                    Entry = Entry.Substring(1);\n                }\n                RefreshCanExecutes();\n            },\n            canExecute: (string arg) =>\n            {\n                return !(arg == \".\" && Entry.Contains(\".\"));\n            });\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Applying an Explicit Style to a Label in .NET MAUI XAML\nDESCRIPTION: This code snippet demonstrates how to apply an explicit style defined with `x:Key=\"labelStyle\"` to a Label control using the `Style` property and the `StaticResource` markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Demonstrating an explicit style\" Style=\"{StaticResource labelStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Views to Grid in C#\nDESCRIPTION: This code snippet demonstrates how to add views (Label and BoxView) to a Grid in C# and position them in specific rows and columns using the `grid.Add` method and `Grid.SetRow` and `Grid.SetColumnSpan` methods for precise placement. This example sets the text of the label and the color of the BoxView. It also sets layout options.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ngrid.Add(new Label\n{\n    Text = \"Row1, Column 1\",\n    HorizontalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.Center\n}, 1, 1);\n\n// Row 2\n// Alternatively, the BoxView and Label can be positioned in cells with the Grid.SetRow\n// and Grid.SetColumn methods. Here, the Grid.SetColumnSpan method is used to span two columns.\nBoxView boxView = new BoxView { Color = Colors.Red };\nGrid.SetRow(boxView, 2);\nGrid.SetColumnSpan(boxView, 2);\nLabel label = new Label\n{\n    Text = \"Row 2, Column 0 and 1\",\n    HorizontalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.Center\n};\nGrid.SetRow(label, 2);\nGrid.SetColumnSpan(label, 2);\n\ngrid.Add(boxView);\ngrid.Add(label);\n\nTitle = \"Basic Grid demo\";\nContent = grid;\n```\n\n----------------------------------------\n\nTITLE: Localize Text using x:Static Markup Extension in XAML\nDESCRIPTION: This code snippet shows how to use the `x:Static` markup extension in XAML to access localized text from a resource file. It retrieves values for a Label's Text, an Entry's Placeholder, and a Button's Text from the `AppResources` class, which is generated from the default resource file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:strings=\"clr-namespace:LocalizationDemo.Resources.Strings\">\n    <VerticalStackLayout>\n        <Label Text=\"{x:Static strings:AppResources.NotesLabel}\" />\n        <Entry Placeholder=\"{x:Static strings:AppResources.NotesPlaceholder}\" />\n        <Button Text=\"{x:Static strings:AppResources.AddButton}\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add Grouped Data C#\nDESCRIPTION: This C# code adds grouped data to the `Animals` collection. Two `AnimalGroup` objects, \"Bears\" and \"Monkeys\", are created, each containing a `List<Animal>` with details for several animals.  This demonstrates how to populate the grouped data structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nAnimals.Add(new AnimalGroup(\"Bears\", new List<Animal>\n{\n    new Animal\n    {\n        Name = \"American Black Bear\",\n        Location = \"North America\",\n        Details = \"Details about the bear go here.\",\n        ImageUrl = \"https://upload.wikimedia.org/wikipedia/commons/0/08/01_Schwarzbär.jpg\"\n    },\n    new Animal\n    {\n        Name = \"Asian Black Bear\",\n        Location = \"Asia\",\n        Details = \"Details about the bear go here.\",\n        ImageUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Ursus_thibetanus_3_%28Wroclaw_zoo%29.JPG/180px-Ursus_thibetanus_3_%28Wroclaw_zoo%29.JPG\"\n    },\n    // ...\n}));\n\nAnimals.Add(new AnimalGroup(\"Monkeys\", new List<Animal>\n{\n    new Animal\n    {\n        Name = \"Baboon\",\n        Location = \"Africa & Asia\",\n        Details = \"Details about the monkey go here.\",\n        ImageUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Papio_anubis_%28Serengeti%2C_2009%29.jpg/200px-Papio_anubis_%28Serengeti%2C_2009%29.jpg\"\n    },\n    new Animal\n    {\n        Name = \"Capuchin Monkey\",\n        Location = \"Central & South America\",\n        Details = \"Details about the monkey go here.\",\n        ImageUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/Capuchin_Costa_Rica.jpg/200px-Capuchin_Costa_Rica.jpg\"\n    },\n    new Animal\n    {\n        Name = \"Blue Monkey\",\n        Location = \"Central and East Africa\",\n        Details = \"Details about the monkey go here.\",\n        ImageUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/BlueMonkey.jpg/220px-BlueMonkey.jpg\"\n    },\n    // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation in .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to use conditional compilation to execute platform-specific code in a .NET MAUI application. It utilizes preprocessor directives such as `#if ANDROID`, `#elif IOS`, and `#elif WINDOWS` to target code for specific platforms. The `handler.PlatformView` is accessed and modified depending on the platform. The code requires the `Colors` class to be available in the current scope and the `ToPlatform()` extension method is used to convert from MAUI color to platform-specific color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\n                  handler.PlatformView.SetBackgroundColor(Colors.Red.ToPlatform());\n#elif IOS\n                  handler.PlatformView.BackgroundColor = Colors.Red.ToPlatform();\n                  handler.PlatformView.BorderStyle = UIKit.UITextBorderStyle.Line;\n#elif WINDOWS\n                  handler.PlatformView.Background = Colors.Red.ToPlatform();\n#endif\n```\n\n----------------------------------------\n\nTITLE: Read Value from Secure Storage - C#\nDESCRIPTION: This C# code snippet demonstrates how to read a value from secure storage using the `SecureStorage.GetAsync` method. It takes a key as input and retrieves the associated value, returning it as a string. If no value is associated with the key, it returns `null`. The `GetAsync` method is asynchronous and requires the `async` keyword and `await` operator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstring oauthToken = await SecureStorage.GetAsync(\"oauth_token\");\n```\n\n----------------------------------------\n\nTITLE: Automatic Dependency Resolution: ViewModel Injection C#\nDESCRIPTION: This example demonstrates how the `MainPageViewModel` receives injected instances of `ILoggingService` and `ISettingsService` through its constructor.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel\n{\n    readonly ILoggingService _loggingService;\n    readonly ISettingsService _settingsService;\n\n    public MainPageViewModel(ILoggingService loggingService, ISettingsService settingsService)\n    {\n        _loggingService = loggingService;\n        _settingsService = settingsService;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Constructor with Page Injection (net-maui-9.0+) C#\nDESCRIPTION: This example shows how to register a page with dependency injection and inject it into the App constructor to set as the first page of the Window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMyFirstAppPage _firstPage;\n\npublic App(MyFirstAppPage page)\n{\n    InitializeComponent();\n    _firstPage = page;\n}\n\nprotected override Window CreateWindow(IActivationState? activationState)\n{\n    return new Window(_firstPage);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Pin in C# on a .NET MAUI Map\nDESCRIPTION: This C# code snippet demonstrates how to create a Map and a Pin programmatically. It sets the Pin's properties such as Label, Address, Type, and Location, and then adds the Pin to the Map's Pins collection. It requires the Microsoft.Maui.Controls.Maps and Microsoft.Maui.Maps namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nMap map = new Map\n{\n  ...\n};\n\nPin pin = new Pin\n{\n  Label = \"Santa Cruz\",\n  Address = \"The city with a boardwalk\",\n  Type = PinType.Place,\n  Location = new Location(36.9628066, -122.0194722)\n};\nmap.Pins.Add(pin);\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET MAUI Android App with Keystore\nDESCRIPTION: This code snippet demonstrates how to publish a .NET MAUI Android app, sign it using a keystore, and specify necessary parameters such as the keystore filename, key alias, and passwords. It also shows how to specify the target framework and build configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-android -c Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore={filename}.keystore -p:AndroidSigningKeyAlias={keyname} -p:AndroidSigningKeyPass={password} -p:AndroidSigningStorePass={password}\n```\n\n----------------------------------------\n\nTITLE: Using BoolToObjectConverter with String in XAML\nDESCRIPTION: This XAML code demonstrates how to use the `BoolToObjectConverter` to change the text of a label based on the state of a `Switch`.  The converter is instantiated inline within the `Binding.Converter` property, specifying `x:String` as the generic type. The `TrueObject` and `FalseObject` properties are set to string values, which are displayed in the label depending on the switch's `IsToggled` state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Label>\n    <Label.Text>\n        <Binding x:DataType=\"Switch\"\n                 Source=\"{x:Reference switch1}\"\n                 Path=\"IsToggled\">\n            <Binding.Converter>\n                <local:BoolToObjectConverter x:TypeArguments=\"x:String\"\n                                             TrueObject=\"Of course!\"\n                                             FalseObject=\"No way!\" />\n            </Binding.Converter>\n        </Binding>\n    </Label.Text>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Defining PersonCollectionViewModel Class in C#\nDESCRIPTION: This C# code defines the `PersonCollectionViewModel` class, which also implements `INotifyPropertyChanged`.  It manages a collection of `PersonViewModel` objects, provides properties for editing a `PersonViewModel` (`PersonEdit` and `IsEditing`), and defines `ICommand` properties for `NewCommand`, `SubmitCommand`, and `CancelCommand`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonCollectionViewModel : INotifyPropertyChanged\n{\n    PersonViewModel personEdit;\n    bool isEditing;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    ···\n\n    public bool IsEditing\n    {\n        private set { SetProperty(ref isEditing, value); }\n        get { return isEditing; }\n    }\n\n    public PersonViewModel PersonEdit\n    {\n        set { SetProperty(ref personEdit, value); }\n        get { return personEdit; }\n    }\n\n    public ICommand NewCommand { private set; get; }\n    public ICommand SubmitCommand { private set; get; }\n    public ICommand CancelCommand { private set; get; }\n\n    public IList<PersonViewModel> Persons { get; } = new ObservableCollection<PersonViewModel>();\n\n    bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)\n    {\n        if (Object.Equals(storage, value))\n            return false;\n\n        storage = value;\n        OnPropertyChanged(propertyName);\n        return true;\n    }\n\n    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PersonViewModel Class in C#\nDESCRIPTION: This C# code defines the `PersonViewModel` class, which implements `INotifyPropertyChanged` to support data binding. It includes `Name`, `Age`, and `Skills` properties, along with helper methods `SetProperty` and `OnPropertyChanged` for property change notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonViewModel : INotifyPropertyChanged\n{\n    string name;\n    double age;\n    string skills;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public string Name\n    {\n        set { SetProperty(ref name, value); }\n        get { return name; }\n    }\n\n    public double Age\n    {\n        set { SetProperty(ref age, value); }\n        get { return age; }\n    }\n\n    public string Skills\n    {\n        set { SetProperty(ref skills, value); }\n        get { return skills; }\n    }\n\n    public override string ToString()\n    {\n        return Name + \", age \" + Age;\n    }\n\n    bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)\n    {\n        if (Object.Equals(storage, value))\n            return false;\n\n        storage = value;\n        OnPropertyChanged(propertyName);\n        return true;\n    }\n\n    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Padding CSS in .NET MAUI\nDESCRIPTION: Sets the padding for .NET MAUI Button, ImageButton, Layout, and Page. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_44\n\nLANGUAGE: CSS\nCODE:\n```\npadding: 6 12 12;\n```\n\n----------------------------------------\n\nTITLE: Setting font properties per platform in .NET MAUI with C#\nDESCRIPTION: This C# code snippet demonstrates how to set different font properties (size and family) for a Label control based on the target platform using the `DeviceInfo.Platform` property. It configures separate font settings for iOS, Android, and other platforms, allowing for platform-specific customizations within the application's code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label = new Label\n{\n    Text = \"Different font properties on different platforms\"\n};\n\nlabel.FontSize = DeviceInfo.Platform == DevicePlatform.iOS ? 20 :\n    DeviceInfo.Platform == DevicePlatform.Android ? 22 : 24;  \nlabel.FontFamily = DeviceInfo.Platform == DevicePlatform.iOS ? \"MarkerFelt-Thin\" :\n    DeviceInfo.Platform == DevicePlatform.Android ? \"Lobster-Regular\" : \"ArimaMadurai-Black\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Linear Gradient in C#\nDESCRIPTION: This code snippet demonstrates how to create a horizontal linear gradient using the LinearGradientPaint class in .NET MAUI. It sets the start and end colors, sets the end point to (1,0) to make the gradient horizontal, and then applies the gradient to fill a rounded rectangle with a shadow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nLinearGradientPaint linearGradientPaint = new LinearGradientPaint\n{\n    StartColor = Colors.Yellow,\n    EndColor = Colors.Green,\n    // StartPoint is already (0,0)\n    EndPoint = new Point(1, 0)\n};\n\nRectF linearRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(linearGradientPaint, linearRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(linearRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: ICommand Property in ViewModel C#\nDESCRIPTION: This code shows how to declare a property of type ICommand in the viewmodel. This property will be bound to the Command property of a Button in the XAML view. The 'private set; get;' ensures controlled access.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic ICommand MyCommand { private set; get; }\n```\n\n----------------------------------------\n\nTITLE: Setting platform-specific properties using OnPlatform in XAML\nDESCRIPTION: This code snippet demonstrates how to use the OnPlatform markup extension in XAML to set different values for properties based on the platform. It sets the Color, WidthRequest, and HeightRequest of a BoxView differently for iOS and Android, while also providing default values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView Color=\"{OnPlatform Yellow, iOS=Red, Android=Green}\"\n         WidthRequest=\"{OnPlatform 250, iOS=200, Android=300}\"\n         HeightRequest=\"{OnPlatform 250, iOS=200, Android=300}\"\n         HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Incremental Data Loading in CollectionView (XAML)\nDESCRIPTION: This XAML snippet shows how to enable incremental data loading in a CollectionView. The RemainingItemsThreshold property specifies the number of items remaining before the RemainingItemsThresholdReached event is fired. It expects an event handler named `OnCollectionViewRemainingItemsThresholdReached`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Animals}\"\n                RemainingItemsThreshold=\"5\"\n                RemainingItemsThresholdReached=\"OnCollectionViewRemainingItemsThresholdReached\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Basic Code Binding XAML\nDESCRIPTION: This XAML code defines a ContentPage containing a Label and a Slider.  The Label's BindingContext is set to the Slider using the x:Reference markup extension. The Label's Rotation property is bound to the Slider's Value property using the Binding markup extension. The x:DataType attribute is used for compiled bindings, enhancing performance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DataBindingDemos.BasicXamlBindingPage\"\n             Title=\"Basic XAML Binding\">\n    <StackLayout Padding=\"10, 0\">\n        <Label x:DataType=\"Slider\"\n               Text=\"TEXT\"\n               FontSize=\"80\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\"\n               BindingContext=\"{x:Reference Name=slider}\"\n               Rotation=\"{Binding Path=Value}\" />\n\n        <Slider x:Name=\"slider\"\n                Maximum=\"360\"\n                VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Accessing SQLite Data with Dependency Injection in C# (>=net-maui-10.0)\nDESCRIPTION: This C# code shows how to access the SQLite database through dependency injection in a .NET MAUI application (version 10.0 or higher). It injects the TodoItemDatabase into the TodoItemPage constructor and uses it to save a TodoItem. Includes null check on item name and uses DisplayAlertAsync, and displays an alert if the name is missing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTodoItemDatabase database;\n\npublic TodoItemPage(TodoItemDatabase todoItemDatabase)\n{\n    InitializeComponent();\n    database = todoItemDatabase;\n}\n\nasync void OnSaveClicked(object sender, EventArgs e)\n{\n    if (string.IsNullOrWhiteSpace(Item.Name))\n    {\n        await DisplayAlertAsync(\"Name Required\", \"Please enter a name for the todo item.\", \"OK\");\n        return;\n    }\n\n    await database.SaveItemAsync(Item);\n    await Shell.Current.GoToAsync(\"..\");\n}\n```\n\n----------------------------------------\n\nTITLE: XAML: Data Binding without BindingContext\nDESCRIPTION: Defines a ContentPage with a Label and a Slider. The Label's Scale property is bound to the Slider's Value property using the Binding markup extension and referencing the slider by name. The Source property explicitly sets the binding source to the slider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"DataBindingDemos.AlternativeXamlBindingPage\"\n             Title=\"Alternative XAML Binding\">\n    <StackLayout Padding=\"10, 0\">\n        <Label Text=\"TEXT\"\n               FontSize=\"40\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\"\n               Scale=\"{Binding x:DataType='Slider',\n                               Source={x:Reference slider},\n                               Path=Value}\" />\n\n        <Slider x:Name=\"slider\"\n                Minimum=\"-2\"\n                Maximum=\"2\"\n                VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating ImageButton in C# - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to create an ImageButton programmatically, set its source image, and attach an event handler to its Clicked event using a lambda expression.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/imagebutton.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nLabel label;\nint clickTotal = 0;\n...\n\nImageButton imageButton = new ImageButton\n{\n    Source = \"XamarinLogo.png\",\n    HorizontalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.CenterAndExpand\n};\nimageButton.Clicked += (s, e) =>\n{\n  clickTotal += 1;\n  label.Text = $\"{clickTotal} ImageButton click{(clickTotal == 1 ? \"\" : \"s\")}\";\n};\n```\n\n----------------------------------------\n\nTITLE: CheckBox visual states\nDESCRIPTION: This code shows how to define visual states for a CheckBox in XAML. When the CheckBox is in the Normal state the color is Red and when the CheckBox is in the IsChecked state, the color is Green.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox ...>\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Color\"\n                                Value=\"Red\" />\n                    </VisualState.Setters>\n                </VisualState>\n\n                <VisualState x:Name=\"IsChecked\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Color\"\n                                Value=\"Green\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</CheckBox>\n```\n\n----------------------------------------\n\nTITLE: Describe Shell Visual Hierarchy in XAML\nDESCRIPTION: This XAML code demonstrates how to define the visual hierarchy of a .NET MAUI Shell app using Shell, FlyoutItem, Tab, and ShellContent objects.  It uses data templates to load ContentPage objects on demand.  The Xaminals namespace is used to reference the Views folder containing the page definitions. The FlyoutDisplayOptions are set to AsMultipleItems.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/create.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    ...\n    <FlyoutItem FlyoutDisplayOptions=\"AsMultipleItems\">\n        <Tab Title=\"Domestic\"\n             Icon=\"paw.png\">\n            <ShellContent Title=\"Cats\"\n                          Icon=\"cat.png\"\n                          ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n            <ShellContent Title=\"Dogs\"\n                          Icon=\"dog.png\"\n                          ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n        </Tab>\n        <!--\n        Shell has implicit conversion operators that enable the Shell visual hierarchy to be simplified.\n        This is possible because a subclassed Shell object can only ever contain a FlyoutItem object or a TabBar object,\n        which can only ever contain Tab objects, which can only ever contain ShellContent objects.\n\n        The implicit conversion automatically wraps the ShellContent objects below in Tab objects.\n        -->\n        <ShellContent Title=\"Monkeys\"\n                      Icon=\"monkey.png\"\n                      ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n        <ShellContent Title=\"Elephants\"\n                      Icon=\"elephant.png\"\n                      ContentTemplate=\"{DataTemplate views:ElephantsPage}\" />\n        <ShellContent Title=\"Bears\"\n                      Icon=\"bear.png\"\n                      ContentTemplate=\"{DataTemplate views:BearsPage}\" />\n    </FlyoutItem>\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Fill a Rounded Rectangle on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a green filled rounded rectangle on an ICanvas object using the FillRoundedRectangle method. It sets the fill color to green before drawing the rounded rectangle with dimensions 100x50, a corner radius of 12, at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FillColor = Colors.Green;\ncanvas.FillRoundedRectangle(10, 10, 100, 50, 12);\n```\n\n----------------------------------------\n\nTITLE: XAML: ContentPage with a Label\nDESCRIPTION: Shows how to define a ContentPage with a Label in XAML. The Label's properties like Text, VerticalOptions, HorizontalTextAlignment, Rotation, FontSize, FontAttributes, and TextColor are set using XML attributes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.HelloXamlPage\"\n             Title=\"Hello XAML Page\">\n    <Label Text=\"Hello, XAML!\"\n           VerticalOptions=\"Center\"\n           HorizontalTextAlignment=\"Center\"\n           Rotation=\"-15\"\n           FontSize=\"18\"\n           FontAttributes=\"Bold\"\n           TextColor=\"Blue\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross-Platform Control in .NET MAUI (C#)\nDESCRIPTION: Defines a custom entry control deriving from `View` with bindable properties for `Text` and `TextColor`. This control provides the public API for the handler and control consumers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiControl.Controls\n{\n    public class CustomEntry : View\n    {\n        public static readonly BindableProperty TextProperty =\n            BindableProperty.Create(nameof(Text), typeof(string), typeof(CustomEntry), null);\n\n        public static readonly BindableProperty TextColorProperty =\n            BindableProperty.Create(nameof(TextColor), typeof(Color), typeof(CustomEntry), null);\n\n        public string Text\n        {\n            get { return (string)GetValue(TextProperty); }\n            set { SetValue(TextProperty, value); }\n        }\n\n        public Color TextColor\n        {\n            get { return (Color)GetValue(TextColorProperty); }\n            set { SetValue(TextColorProperty, value); }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ItemTemplate with DataTemplateSelector in ListView XAML\nDESCRIPTION: This XAML snippet shows how to set the ItemTemplate property of a ListView to a DataTemplateSelector, allowing different templates to be applied to items at runtime based on a selection logic. It defines two DataTemplates (AmericanMonkeyTemplate, OtherMonkeyTemplate) and a MonkeyDataTemplateSelector. Requires namespaces for templates and viewmodels.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:templates=\"clr-namespace:ListViewDemos.Templates\"\n             xmlns:viewmodels=\"clr-namespace:ListViewDemos.ViewModels\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"AmericanMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            <ViewCell>\n                ...\n            </ViewCell>\n        </DataTemplate>\n\n        <DataTemplate x:Key=\"OtherMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            <ViewCell>\n                ...\n            </ViewCell>\n        </DataTemplate>\n\n        <templates:MonkeyDataTemplateSelector x:Key=\"MonkeySelector\"\n                                             AmericanMonkey=\"{StaticResource AmericanMonkeyTemplate}\"\n                                             OtherMonkey=\"{StaticResource OtherMonkeyTemplate}\" />\n    </ContentPage.Resources>\n\n    <Grid Margin=\"20\">\n        <ListView ItemsSource=\"{Binding Monkeys}\"\n                  ItemTemplate=\"{StaticResource MonkeySelector}\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: ClockViewModel Implementation in C#\nDESCRIPTION: This C# code defines a `ClockViewModel` class that implements the `INotifyPropertyChanged` interface. It features a `DateTime` property that updates every second using a Timer. The viewmodel raises the `PropertyChanged` event whenever the DateTime property changes, enabling data binding updates in the UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace XamlSamples;\n\nclass ClockViewModel: INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private DateTime _dateTime;\n    private Timer _timer;\n\n    public DateTime DateTime\n    {\n        get => _dateTime;\n        set\n        {\n            if (_dateTime != value)\n            {\n                _dateTime = value;\n                OnPropertyChanged(); // reports this property\n            }\n        }\n    }\n\n    public ClockViewModel()\n    {\n        this.DateTime = DateTime.Now;\n\n        // Update the DateTime property every second.\n        _timer = new Timer(new TimerCallback((s) => this.DateTime = DateTime.Now),\n                           null, TimeSpan.Zero, TimeSpan.FromSeconds(1));\n    }\n\n    ~ClockViewModel() =>\n        _timer.Dispose();\n\n    public void OnPropertyChanged([CallerMemberName] string name = \"\") =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Set a Preference Value in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to set a preference value using the Preferences.Set method in .NET MAUI. It takes a string key and a value of a supported data type (Boolean, Double, Int32, Single, Int64, String, DateTime) as input and stores the preference. There are no external dependencies beyond the .NET MAUI framework. The stored preference is private to the application, unless a shared name is provided.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/preferences.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPreferences.Set(\"my_key\", \"My Value\");\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Background with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell background color for an Element to green using the `-maui-shell-background` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_75\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-background: green;\n```\n\n----------------------------------------\n\nTITLE: CollectionView Horizontal List Layout XAML\nDESCRIPTION: This XAML snippet shows how to create a horizontal list layout for a CollectionView by setting its ItemsLayout property to 'HorizontalList'. It includes a DataTemplate with Grid layout to display image, name, and location for each item. The data is bound to a source named Monkeys.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                ItemsLayout=\"HorizontalList\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <Grid Padding=\"10\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"35\" />\n                    <RowDefinition Height=\"35\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"70\" />\n                    <ColumnDefinition Width=\"140\" />\n                </Grid.ColumnDefinitions>\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\"\n                       LineBreakMode=\"TailTruncation\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       LineBreakMode=\"TailTruncation\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in CollectionView (XAML)\nDESCRIPTION: This XAML snippet shows how to enable multiple item selection in a CollectionView. The `SelectionMode` property is set to `Multiple`, allowing users to select multiple items simultaneously.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                SelectionMode=\"Multiple\"\n                SelectionChanged=\"OnCollectionViewSelectionChanged\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Accessing SQLite Data with Dependency Injection in C# (<=net-maui-9.0)\nDESCRIPTION: This C# code shows how to access the SQLite database through dependency injection in a .NET MAUI application. It injects the TodoItemDatabase into the TodoItemPage constructor and uses it to save a TodoItem. Includes null check on item name and displays an alert if the name is missing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTodoItemDatabase database;\n\npublic TodoItemPage(TodoItemDatabase todoItemDatabase)\n{\n    InitializeComponent();\n    database = todoItemDatabase;\n}\n\nasync void OnSaveClicked(object sender, EventArgs e)\n{\n    if (string.IsNullOrWhiteSpace(Item.Name))\n    {\n        await DisplayAlert(\"Name Required\", \"Please enter a name for the todo item.\", \"OK\");\n        return;\n    }\n\n    await database.SaveItemAsync(Item);\n    await Shell.Current.GoToAsync(\"..\");\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Remaining in Video (TimeToEnd)\nDESCRIPTION: This C# code snippet shows how to implement a read-only `TimeToEnd` property in the `Video` class. This property calculates the remaining time in the video based on the `Duration` and `Position` properties, updating automatically whenever either of these properties change.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        private static readonly BindablePropertyKey TimeToEndPropertyKey =\n            BindableProperty.CreateReadOnly(nameof(TimeToEnd), typeof(TimeSpan), typeof(Video), new TimeSpan());\n\n        public static readonly BindableProperty TimeToEndProperty = TimeToEndPropertyKey.BindableProperty;\n\n        public TimeSpan TimeToEnd\n        {\n            get { return (TimeSpan)GetValue(TimeToEndProperty); }\n            private set { SetValue(TimeToEndPropertyKey, value); }\n        }\n\n        void SetTimeToEnd()\n        {\n            TimeToEnd = Duration - Position;\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable JavaScript Exception Throwing to .NET\nDESCRIPTION: This C# code demonstrates how to enable JavaScript exceptions to be thrown as .NET exceptions when using the `HybridWebView` control. This is done by setting the `HybridWebView.InvokeJavaScriptThrowsExceptions` AppContext switch to `true` in the `MauiProgram` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic MauiProgram()\n{\n    AppContext.SetSwitch(\"HybridWebView.InvokeJavaScriptThrowsExceptions\", true);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Play, Pause, and Stop Events in Video Control\nDESCRIPTION: This C# code defines `Play`, `Pause`, and `Stop` methods within a `Video` control. These methods raise corresponding events (`PlayRequested`, `PauseRequested`, `StopRequested`) and send commands to the `VideoHandler`. The `VideoPositionEventArgs` class is used to pass the current video position with the events and commands.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        public event EventHandler<VideoPositionEventArgs> PlayRequested;\n        public event EventHandler<VideoPositionEventArgs> PauseRequested;\n        public event EventHandler<VideoPositionEventArgs> StopRequested;\n\n        public void Play()\n        {\n            VideoPositionEventArgs args = new VideoPositionEventArgs(Position);\n            PlayRequested?.Invoke(this, args);\n            Handler?.Invoke(nameof(Video.PlayRequested), args);\n        }\n\n        public void Pause()\n        {\n            VideoPositionEventArgs args = new VideoPositionEventArgs(Position);\n            PauseRequested?.Invoke(this, args);\n            Handler?.Invoke(nameof(Video.PauseRequested), args);\n        }\n\n        public void Stop()\n        {\n            VideoPositionEventArgs args = new VideoPositionEventArgs(Position);\n            StopRequested?.Invoke(this, args);\n            Handler?.Invoke(nameof(Video.StopRequested), args);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keypad Viewmodel Implementation in C#\nDESCRIPTION: This C# code defines a viewmodel, `KeypadViewModel`, for a keypad application. It implements the `INotifyPropertyChanged` interface to enable data binding and includes two commands: `AddCharCommand` and `DeleteCharCommand`. `AddCharCommand` adds characters to an input string, while `DeleteCharCommand` removes the last character. The viewmodel also formats the input string as a phone number.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Windows.Input;\n\nnamespace XamlSamples;\n\nclass KeypadViewModel: INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _inputString = \"\";\n    private string _displayText = \"\";\n    private char[] _specialChars = { '*', '#' };\n\n    public ICommand AddCharCommand { get; private set; }\n    public ICommand DeleteCharCommand { get; private set; }\n\n    public string InputString\n    {\n        get => _inputString;\n        private set\n        {\n            if (_inputString != value)\n            {\n                _inputString = value;\n                OnPropertyChanged();\n                DisplayText = FormatText(_inputString);\n\n                // Perhaps the delete button must be enabled/disabled.\n                ((Command)DeleteCharCommand).ChangeCanExecute();\n            }\n        }\n    }\n\n    public string DisplayText\n    {\n        get => _displayText;\n        private set\n        {\n            if (_displayText != value)\n            {\n                _displayText = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    public KeypadViewModel()\n    {\n        // Command to add the key to the input string\n        AddCharCommand = new Command<string>((key) => InputString += key);\n\n        // Command to delete a character from the input string when allowed\n        DeleteCharCommand =\n            new Command(\n                // Command will strip a character from the input string\n                () => InputString = InputString.Substring(0, InputString.Length - 1),\n\n                // CanExecute is processed here to return true when there's something to delete\n                () => InputString.Length > 0\n            );\n    }\n\n    string FormatText(string str)\n    {\n        bool hasNonNumbers = str.IndexOfAny(_specialChars) != -1;\n        string formatted = str;\n\n        // Format the string based on the type of data and the length\n        if (hasNonNumbers || str.Length < 4 || str.Length > 10)\n        {\n            // Special characters exist, or the string is too small or large for special formatting\n            // Do nothing\n        }\n\n        else if (str.Length < 8)\n            formatted = string.Format(\"{0}-{1}\", str.Substring(0, 3), str.Substring(3));\n\n        else\n            formatted = string.Format(\"({0}) {1}-{2}\", str.Substring(0, 3), str.Substring(3, 3), str.Substring(6));\n\n        return formatted;\n    }\n\n\n    public void OnPropertyChanged([CallerMemberName] string name = \"\") =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Slider Transforms Page with Binding Modes\nDESCRIPTION: This XAML code defines a ContentPage with several Slider controls that are bound to the Scale, Rotation, RotationX, and RotationY properties of a Label. The BindingContext of each Slider is set to the Label using x:Reference. The TwoWay binding mode is used for the Scale property to initialize the Slider's value, while OneWayToSource is used for Rotation, RotationX, and RotationY to update the Label's properties based on the Slider values. StringFormat is applied to display slider value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.SliderTransformsPage\"\n             Padding=\"5\"\n             Title=\"Slider Transforms Page\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"*\" />\n            <ColumnDefinition Width=\"Auto\" />\n        </Grid.ColumnDefinitions>\n\n        <!-- Scaled and rotated Label -->\n        <Label x:Name=\"label\"\n               Text=\"TEXT\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"CenterAndExpand\" />\n\n        <!-- Slider and identifying Label for Scale -->\n        <Slider x:Name=\"scaleSlider\"\n                x:DataType=\"Label\"\n                BindingContext=\"{x:Reference label}\"\n                Grid.Row=\"1\" Grid.Column=\"0\"\n                Maximum=\"10\"\n                Value=\"{Binding Scale, Mode=TwoWay}\" />\n        <Label x:DataType=\"Slider\"\n               BindingContext=\"{x:Reference scaleSlider}\"\n               Text=\"{Binding Value, StringFormat='Scale = {0:F1}'}\"\n               Grid.Row=\"1\" Grid.Column=\"1\"\n               VerticalTextAlignment=\"Center\" />\n\n        <!-- Slider and identifying Label for Rotation -->\n        <Slider x:Name=\"rotationSlider\"\n                x:DataType=\"Label\"\n                BindingContext=\"{x:Reference label}\"\n                Grid.Row=\"2\" Grid.Column=\"0\"\n                Maximum=\"360\"\n                Value=\"{Binding Rotation, Mode=OneWayToSource}\" />\n        <Label x:DataType=\"Slider\"\n               BindingContext=\"{x:Reference rotationSlider}\"\n               Text=\"{Binding Value, StringFormat='Rotation = {0:F0}'}\"\n               Grid.Row=\"2\" Grid.Column=\"1\"\n               VerticalTextAlignment=\"Center\" />\n\n        <!-- Slider and identifying Label for RotationX -->\n        <Slider x:Name=\"rotationXSlider\"\n                x:DataType=\"Label\"\n                BindingContext=\"{x:Reference label}\"\n                Grid.Row=\"3\" Grid.Column=\"0\"\n                Maximum=\"360\"\n                Value=\"{Binding RotationX, Mode=OneWayToSource}\" />\n        <Label x:DataType=\"Slider\"\n               BindingContext=\"{x:Reference rotationXSlider}\"\n               Text=\"{Binding Value, StringFormat='RotationX = {0:F0}'}\"\n               Grid.Row=\"3\" Grid.Column=\"1\"\n               VerticalTextAlignment=\"Center\" />\n\n        <!-- Slider and identifying Label for RotationY -->\n        <Slider x:Name=\"rotationYSlider\"\n                x:DataType=\"Label\"\n                BindingContext=\"{x:Reference label}\"\n                Grid.Row=\"4\" Grid.Column=\"0\"\n                Maximum=\"360\"\n                Value=\"{Binding RotationY, Mode=OneWayToSource}\" />\n        <Label x:DataType=\"Slider\"\n               BindingContext=\"{x:Reference rotationYSlider}\"\n               Text=\"{Binding Value, StringFormat='RotationY = {0:F0}'}\"\n               Grid.Row=\"4\" Grid.Column=\"1\"\n               VerticalTextAlignment=\"Center\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Try to Open URI with Launcher (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the `ILauncher` interface to open a URI using `TryOpenAsync`. This method checks if the URI scheme can be opened before attempting to open it, simplifying the process. If the URI can be opened, the method returns `true`; otherwise, it returns `false`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/launcher.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Launcher.Default.TryOpenAsync(uri);\n```\n\n----------------------------------------\n\nTITLE: TemplatedParent Relative Binding Example in XAML\nDESCRIPTION: This XAML code demonstrates how to use the `TemplatedParent` relative binding mode to bind properties of the `CardView` control to elements within its `ControlTemplate`. The `BindingContext` of the `Border` is set to the `TemplatedParent`, allowing child elements to bind directly to `CardView` properties such as `CardColor`, `BorderColor`, `CardTitle`, and `CardDescription`. The example also includes usage of the `CardView` control within a `StackLayout`, applying the defined `ControlTemplate` to multiple instances.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/relative-bindings.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:DataBindingDemos.Controls\">\n    <ContentPage.Resources>\n        <ControlTemplate x:Key=\"CardViewControlTemplate\"\n                         x:DataType=\"controls:CardView\">\n            <Border BindingContext=\"{Binding Source={RelativeSource TemplatedParent}}\"\n                    BackgroundColor=\"{Binding CardColor}\"\n                    Stroke=\"{Binding BorderColor}\"\n                   ...>\n                <Grid>\n                    ...\n                    <Label Text=\"{Binding CardTitle}\"\n                           ... />\n                    <BoxView BackgroundColor=\"{Binding BorderColor}\"\n                             ... />\n                    <Label Text=\"{Binding CardDescription}\"\n                           ... />\n                </Grid>\n            </Border>\n        </ControlTemplate>\n    </ContentPage.Resources>\n    <StackLayout>        \n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"John Doe\"\n                           CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\"\n                           ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"Jane Doe\"\n                           CardDescription=\"Phasellus eu convallis mi. In tempus augue eu dignissim fermentum. Morbi ut lacus vitae eros lacinia.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\"\n                           ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"Xamarin Monkey\"\n                           CardDescription=\"Aliquam sagittis, odio lacinia fermentum dictum, mi erat scelerisque erat, quis aliquet arcu.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\"\n                           ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: App Constructor with Page Injection (net-maui-8.0) C#\nDESCRIPTION: This example shows how to register a page with dependency injection and inject it into the App constructor to set as the MainPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic App(MyFirstAppPage page)\n{\n    InitializeComponent();\n    MainPage = page;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DataTemplateSelector C#\nDESCRIPTION: This C# code defines a custom DataTemplateSelector called MonkeyDataTemplateSelector, which inherits from DataTemplateSelector. It has two DataTemplate properties, AmericanMonkey and OtherMonkey, and overrides the OnSelectTemplate method to return the appropriate template based on the monkey's location. If the location contains \"America\", it returns the AmericanMonkey template; otherwise, it returns the OtherMonkey template.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MonkeyDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate AmericanMonkey { get; set; }\n    public DataTemplate OtherMonkey { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Monkey)item).Location.Contains(\"America\") ? AmericanMonkey : OtherMonkey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Data via POST/PUT C#\nDESCRIPTION: Saves a `TodoItem` to the web service using either a POST (for new items) or PUT (for existing items) request via `HttpClient`. The `TodoItem` is serialized into a JSON payload, which is then sent as the HTTP content.  The method checks the `HttpResponseMessage.IsSuccessStatusCode` property to determine if the operation was successful.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task SaveTodoItemAsync(TodoItem item, bool isNewItem = false)\n{\n    Uri uri = new Uri(string.Format(Constants.RestUrl, string.Empty));\n\n    try\n    {\n        string json = JsonSerializer.Serialize<TodoItem>(item, _serializerOptions);\n        StringContent content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n        HttpResponseMessage response = null;\n        if (isNewItem)\n            response = await _client.PostAsync(uri, content);\n        else\n            response = await _client.PutAsync(uri, content);\n\n        if (response.IsSuccessStatusCode)\n            Debug.WriteLine(@\"\\tTodoItem successfully saved.\");\n    }\n    catch (Exception ex)\n    {\n        Debug.WriteLine(@\"\\tERROR {0}\", ex.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bottom Tabs in a Shell App\nDESCRIPTION: This XAML snippet demonstrates how to create bottom tabs in a .NET MAUI Shell application using multiple Tab objects within a TabBar.  Each Tab has a Title and Icon property, and contains a ShellContent object to display the respective page. The ContentTemplate is used to dynamically load the ContentPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <Tab Title=\"Cats\"\n            Icon=\"cat.png\">\n           <ShellContent ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       </Tab>\n       <Tab Title=\"Dogs\"\n            Icon=\"dog.png\">\n           <ShellContent ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n       </Tab>\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Register BlazorWebView services in MauiProgram.cs\nDESCRIPTION: Registers the BlazorWebView control for use in the .NET MAUI app by calling `AddMauiBlazorWebView()` on the `IServiceCollection`. This adds the necessary services for component web view support. In debug mode, it also enables developer tools for the underlying WebView controls using `AddBlazorWebViewDeveloperTools()`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                });\n\n            builder.Services.AddMauiBlazorWebView();\n    #if DEBUG\n            builder.Services.AddBlazorWebViewDeveloperTools();\n    #endif\n            // Register any app services on the IServiceCollection object\n            // e.g. builder.Services.AddSingleton<WeatherForecastService>();\n\n            return builder.Build();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Bar Items in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define menu bar items within a ContentPage in a .NET MAUI application. It includes top-level menus such as 'File', 'Locations', and 'View', along with their respective menu items, sub-menu items, and separators. The Command property is bound to commands in the ViewModel, enabling actions upon selection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menu-bar.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:MyMauiApp\"\n             x:DataType=\"local:MyViewModel\">\n    <ContentPage.MenuBarItems>\n        <MenuBarItem Text=\"File\">\n            <MenuFlyoutItem Text=\"Exit\"\n                            Command=\"{Binding ExitCommand}\" />\n        </MenuBarItem>\n        <MenuBarItem Text=\"Locations\">\n            <MenuFlyoutSubItem Text=\"Change Location\">\n                <MenuFlyoutItem Text=\"Redmond, USA\"\n                                Command=\"{Binding ChangeLocationCommand}\"\n                                CommandParameter=\"Redmond\" />\n                <MenuFlyoutItem Text=\"London, UK\"\n                                Command=\"{Binding ChangeLocationCommand}\"\n                                CommandParameter=\"London\" />\n                <MenuFlyoutItem Text=\"Berlin, DE\"\n                                Command=\"{Binding ChangeLocationCommand}\"\n                                CommandParameter=\"Berlin\"/>\n            </MenuFlyoutSubItem>\n            <MenuFlyoutSeparator />            \n            <MenuFlyoutItem Text=\"Add Location\"\n                            Command=\"{Binding AddLocationCommand}\" />\n            <MenuFlyoutItem Text=\"Edit Location\"\n                            Command=\"{Binding EditLocationCommand}\" />\n            <MenuFlyoutItem Text=\"Remove Location\"\n                            Command=\"{Binding RemoveLocationCommand}\" />                            \n        </MenuBarItem>\n        <MenuBarItem Text=\"View\">\n            <MenuFlyoutItem Text=\"Refresh\"\n                            Command=\"{Binding RefreshCommand}\" />\n            <MenuFlyoutItem Text=\"Change Theme\"\n                            Command=\"{Binding ChangeThemeCommand}\" />\n        </MenuBarItem>\n    </ContentPage.MenuBarItems>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperlink with Label and Spans in XAML\nDESCRIPTION: This XAML snippet demonstrates creating a hyperlink using Label and Span elements in .NET MAUI. It sets the TextColor and TextDecorations properties to style the hyperlink and uses a TapGestureRecognizer to handle the tap event and navigate to a URL.  The Command property is bound to a TapCommand, and the CommandParameter passes the URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_17\n\nLANGUAGE: xaml\nCODE:\n```\n<Label>\n    <Label.FormattedText>\n        <FormattedString>\n            <Span Text=\"Alternatively, click \" />\n            <Span Text=\"here\"\n                  TextColor=\"Blue\"\n                  TextDecorations=\"Underline\">\n                <Span.GestureRecognizers>\n                    <TapGestureRecognizer Command=\"{Binding TapCommand}\"\n                                          CommandParameter=\"https://learn.microsoft.com/dotnet/maui/\" />\n                </Span.GestureRecognizers>\n            </Span>\n            <Span Text=\" to view .NET MAUI documentation.\" />\n        </FormattedString>\n    </Label.FormattedText>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemTemplate with DataTemplateSelector XAML\nDESCRIPTION: This XAML code defines a CarouselView with an ItemTemplate that uses a DataTemplateSelector to choose between two different DataTemplates based on the monkey's location. It defines two DataTemplates (AmericanMonkeyTemplate and OtherMonkeyTemplate) and a MonkeyDataTemplateSelector resource to dynamically select the appropriate template for each item in the CarouselView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:CarouselViewDemos.Controls\"\n             xmlns:viewmodels=\"clr-namespace:CarouselViewDemos.ViewModels\"\n             x:Class=\"CarouselViewDemos.Views.HorizontalLayoutDataTemplateSelectorPage\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"AmericanMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            ...\n        </DataTemplate>\n\n        <DataTemplate x:Key=\"OtherMonkeyTemplate\"\n                      x:DataType=\"models:Monkey\">\n            ...\n        </DataTemplate>\n\n        <controls:MonkeyDataTemplateSelector x:Key=\"MonkeySelector\"\n                                             AmericanMonkey=\"{StaticResource AmericanMonkeyTemplate}\"\n                                             OtherMonkey=\"{StaticResource OtherMonkeyTemplate}\" />\n    </ContentPage.Resources>\n\n    <CarouselView ItemsSource=\"{Binding Monkeys}\"\n                  ItemTemplate=\"{StaticResource MonkeySelector}\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using Private Authentication Session in C#\nDESCRIPTION: This C# code snippet shows how to use the WebAuthenticatorOptions to request a private authentication session on iOS 13 and later.  By setting PrefersEphemeralWebBrowserSession to true, the application requests that no shared cookies or browsing data is used between authentication sessions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    WebAuthenticatorResult authResult = await WebAuthenticator.Default.AuthenticateAsync(\n        new WebAuthenticatorOptions()\n        {\n            Url = new Uri(\"https://mysite.com/mobileauth/Microsoft\"),\n            CallbackUrl = new Uri(\"myapp://\"),\n            PrefersEphemeralWebBrowserSession = true\n        });\n\n    string accessToken = authResult?.AccessToken;\n\n    // Do something with the token\n}\ncatch (TaskCanceledException e)\n{\n    // Use stopped auth\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Pin in XAML on a .NET MAUI Map\nDESCRIPTION: This XAML snippet demonstrates how to add a Pin to a Map control. It defines the Map and MapSpan, then creates a Pin object with a label, address, location, and type. It requires xmlns declarations for maps and sensors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_31\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:sensors=\"clr-namespace:Microsoft.Maui.Devices.Sensors;assembly=Microsoft.Maui.Essentials\">\n    <maps:Map x:Name=\"map\">\n        <x:Arguments>\n            <maps:MapSpan>\n                <x:Arguments>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>36.9628066</x:Double>\n                            <x:Double>-122.0194722</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    <x:Double>0.01</x:Double>\n                    <x:Double>0.01</x:Double>\n                </x:Arguments>\n            </maps:MapSpan>\n        </x:Arguments>\n        <maps:Map.Pins>\n            <maps:Pin Label=\"Santa Cruz\"\n                      Address=\"The city with a boardwalk\"\n                      Type=\"Place\">\n                <maps:Pin.Location>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>36.9628066</x:Double>\n                            <x:Double>-122.0194722</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                </maps:Pin.Location>\n            </maps:Pin>\n        </maps:Map.Pins>\n    </maps:Map>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining Command Mapper in .NET MAUI C#\nDESCRIPTION: This code snippet shows how to define a command mapper for a custom handler in .NET MAUI. It defines a `CommandMapper` that maps commands from a cross-platform control (`Video`) to handler methods. The `CommandMapper` is a dictionary whose key is a `string` and whose value is a generic `Action`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler\n{\n    public static IPropertyMapper<Video, VideoHandler> PropertyMapper = new PropertyMapper<Video, VideoHandler>(ViewHandler.ViewMapper)\n    {\n        [nameof(Video.AreTransportControlsEnabled)] = MapAreTransportControlsEnabled,\n        [nameof(Video.Source)] = MapSource,\n        [nameof(Video.IsLooping)] = MapIsLooping,\n        [nameof(Video.Position)] = MapPosition\n    };\n\n    public static CommandMapper<Video, VideoHandler> CommandMapper = new(ViewCommandMapper)\n    {\n        [nameof(Video.UpdateStatus)] = MapUpdateStatus,\n        [nameof(Video.PlayRequested)] = MapPlayRequested,\n        [nameof(Video.PauseRequested)] = MapPauseRequested,\n        [nameof(Video.StopRequested)] = MapStopRequested\n    };\n\n    public VideoHandler() : base(PropertyMapper, CommandMapper)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set TabbedPage Translucency Mode in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the translucency mode of a TabbedPage's tab bar to Opaque using the fluent API. It requires the Microsoft.Maui.Controls.PlatformConfiguration and Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespaces.  The On<iOS>() method ensures that the platform-specific code only runs on iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/tabbedpage-translucent-tabbar.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nOn<iOS>().SetTranslucencyMode(TranslucencyMode.Opaque);\n```\n\n----------------------------------------\n\nTITLE: Setting SwipeBehaviorOnInvoked to RemainOpen in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the SwipeBehaviorOnInvoked property of the SwipeItems. When set to RemainOpen, the SwipeView remains open after a swipe item is invoked. Event handlers are attached to the Invoked event of each SwipeItem.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems SwipeBehaviorOnInvoked=\"RemainOpen\">\n            <SwipeItem Text=\"Favorite\"\n                       IconImageSource=\"favorite.png\"\n                       BackgroundColor=\"LightGreen\"\n                       Invoked=\"OnFavoriteSwipeItemInvoked\" />\n            <SwipeItem Text=\"Delete\"\n                       IconImageSource=\"delete.png\"\n                       BackgroundColor=\"LightPink\"\n                       Invoked=\"OnDeleteSwipeItemInvoked\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Publish .NET MAUI Mac Catalyst App via Command Line\nDESCRIPTION: This command publishes a .NET MAUI Mac Catalyst app using the `dotnet publish` command. It specifies the target framework, configuration, link mode, and other parameters necessary for creating a signed package for distribution outside the Mac App Store. Key parameters include enabling code signing, setting the signing keys and provisioning profile, and enabling the hardened runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-maccatalyst -c Release -p:MtouchLink=SdkOnly -p:CreatePackage=true -p:EnableCodeSigning=true -p:EnablePackageSigning=true -p:CodesignKey=\"Developer ID Application: John Smith (AY2GDE9QM7)\" -p:CodesignProvision=\"MyMauiApp (Non-App Store)\" -p:CodesignEntitlements=\"Platforms\\MacCatalyst\\Entitlements.plist\" -p:PackageSigningKey=\"Developer ID Installer: John Smith (AY2GDE9QM7)\" -p:UseHardenedRuntime=true\n```\n\n----------------------------------------\n\nTITLE: Toggle Orientation Sensor - C#\nDESCRIPTION: This code snippet demonstrates how to toggle the orientation sensor on and off using the IOrientationSensor interface in .NET MAUI. It uses the Start() and Stop() methods to control sensor monitoring and the ReadingChanged event to process orientation data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool _isOrientationChecking;\n\n\tprivate void ToggleOrientation()\n\t{\n\t\tif (_isOrientationChecking)\n\t\t{\n\t\t\tOrientationSensor.Default.Stop();\n\t\t\t_isOrientationChecking = false;\n\t\t\tOrientationReadingsText.Text = \"Orientation: off\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (OrientationSensor.Default.IsSupported)\n\t\t\t{\n\t\t\t\tOrientationSensor.Default.ReadingChanged += OrientationSensor_ReadingChanged;\n\t\t\t\tOrientationSensor.Default.Start(SensorSpeed.UI);\n\t\t\t\t_isOrientationChecking = true;\n\t\t\t\tOrientationReadingsText.Text = \"Orientation: on\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOrientationReadingsText.Text = \"Orientation sensor not supported on your device.\";\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void OrientationSensor_ReadingChanged(object sender, OrientationSensorChangedEventArgs e)\n\t{\n\t\t// Process Orientation quaternion (X, Y, Z, W)\n\t\tOrientationReadingsText.Text = $\"Orientation: {e.Reading.X}, {e.Reading.Y}, {e.Reading.Z}, {e.Reading.W}\";\n\t}\n```\n\n----------------------------------------\n\nTITLE: XAML Example with Stylesheet\nDESCRIPTION: This XAML snippet demonstrates how to apply a stylesheet to a `ContentPage`. It includes a `ScrollView` with a `StackLayout` containing an `Image` element. The CSS stylesheet (styles.css) is applied through the `ContentPage.Resources` section.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <StyleSheet Source=\"/Resources/styles.css\" />\n    </ContentPage.Resources>\n    <ScrollView>\n        <StackLayout>\n            ...\n            <Image ... />\n            ...\n        </StackLayout>\n    </ScrollView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: C#: Page Navigation Implementation\nDESCRIPTION: Demonstrates how to implement page navigation in C# by creating a Button, adding a Clicked event handler, and using Navigation.PushAsync() to navigate to another page (HelloXamlPage). Requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic MainPage()\n{\n    InitializeComponent();\n\n    Button button = new Button\n    {\n        Text = \"Navigate!\",\n        HorizontalOptions = LayoutOptions.Center,\n        VerticalOptions = LayoutOptions.Center\n    };\n\n    button.Clicked += async (sender, args) =>\n    {\n        await Navigation.PushAsync(new HelloXamlPage());\n    };\n\n    Content = button;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Preselection - XAML\nDESCRIPTION: This XAML snippet shows how to enable multiple item selection in a CollectionView and bind the SelectedItems property to a view model property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView x:Name=\"collectionView\"\n                ItemsSource=\"{Binding Monkeys}\"\n                SelectionMode=\"Multiple\"\n                SelectedItems=\"{Binding SelectedMonkeys}\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Toggling Flashlight with a Switch - .NET MAUI\nDESCRIPTION: This code example demonstrates how to toggle the device's flashlight on or off using the IFlashlight interface and a Switch control in .NET MAUI. The code utilizes the TurnOnAsync and TurnOffAsync methods to control the flashlight's state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/flashlight.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Omitted for brevity - Refer to original source file\n```\n\n----------------------------------------\n\nTITLE: Displaying a local HTML file in WebView using XAML\nDESCRIPTION: This code snippet demonstrates how to display a local HTML file in a .NET MAUI WebView using XAML. The HTML file should be added to the *Resources\\Raw* folder with build action set to **MauiAsset**. An `HtmlWebViewSource` object is created, and its `Html` property is set to the content of the local HTML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<WebView>\n    <WebView.Source>\n        <HtmlWebViewSource>\n            <HtmlWebViewSource.Html>\n                <![CDATA[\n                <html>\n                <head>\n                </head>\n                <body>\n                <h1>.NET MAUI</h1>\n                <p>The CSS and image are loaded from local files!</p>\n                <p><a href=\"localfile.html\">next page</a></p>\n                </body>\n                </html>                    \n                ]]>\n            </HtmlWebViewSource.Html>\n        </HtmlWebViewSource>\n    </WebView.Source>\n</WebView>\n```\n\n----------------------------------------\n\nTITLE: HslViewModel Implementation in C#\nDESCRIPTION: This C# code defines the `HslViewModel` class, which implements the `INotifyPropertyChanged` interface. It converts a `Color` value into `Hue`, `Saturation`, and `Luminosity` values, and vice versa. The `PropertyChanged` event is raised when any of these properties change, triggering updates in the bound UI elements. Dependencies: `System.ComponentModel`, `System.Runtime.CompilerServices`, `Microsoft.Maui.Graphics.Color`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace XamlSamples;\n\nclass HslViewModel: INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private float _hue, _saturation, _luminosity;\n    private Color _color;\n\n    public float Hue\n    {\n        get => _hue;\n        set\n        {\n            if (_hue != value)\n                Color = Color.FromHsla(value, _saturation, _luminosity);\n        }\n    }\n\n    public float Saturation\n    {\n        get => _saturation;\n        set\n        {\n            if (_saturation != value)\n                Color = Color.FromHsla(_hue, value, _luminosity);\n        }\n    }\n\n    public float Luminosity\n    {\n        get => _luminosity;\n        set\n        {\n            if (_luminosity != value)\n                Color = Color.FromHsla(_hue, _saturation, value);\n        }\n    }\n\n    public Color Color\n    {\n        get => _color;\n        set\n        {\n            if (_color != value)\n            {\n                _color = value;\n                _hue = _color.GetHue();\n                _saturation = _color.GetSaturation();\n                _luminosity = _color.GetLuminosity();\n\n                OnPropertyChanged(\"Hue\");\n                OnPropertyChanged(\"Saturation\");\n                OnPropertyChanged(\"Luminosity\");\n                OnPropertyChanged(); // reports this property\n            }\n        }\n    }\n\n    public void OnPropertyChanged([CallerMemberName] string name = \"\") =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Change Selected Item Color - C#\nDESCRIPTION: This C# code shows how to programmatically define a style with Visual States to change the background color of a selected item in a CollectionView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Microsoft.Maui.Controls.VisualStateManager;\n...\n\nSetter backgroundColorSetter = new() { Property = BackgroundColorProperty, Value = Colors.LightSkyBlue };\nVisualState stateSelected = new() { Name = CommonStates.Selected, Setters = { backgroundColorSetter } };\nVisualState stateNormal = new() { Name = CommonStates.Normal };\nVisualStateGroup visualStateGroup = new() { Name = nameof(CommonStates), States = { stateSelected, stateNormal } };\nVisualStateGroupList visualStateGroupList = new() { visualStateGroup };\nSetter vsgSetter = new() { Property = VisualStateGroupsProperty, Value = visualStateGroupList };\nStyle style = new(typeof(Grid)) { Setters = { vsgSetter } };\n\n// Add the style to the resource dictionary\nResources.Add(style);\n```\n\n----------------------------------------\n\nTITLE: Loading a Remote Image in C#\nDESCRIPTION: This C# code snippet demonstrates how to load and display an image from a remote URI within a .NET MAUI application. It uses the ImageSource.FromUri method with a Uri object to create an ImageSource and assigns it to the Source property of the Image control. This allows the application to download and display the image from the specified web address.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image\n{\n    Source = ImageSource.FromUri(new Uri(\"https://aka.ms/campus.jpg\"))\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker Data Binding in XAML\nDESCRIPTION: This XAML snippet demonstrates data binding the DatePicker's MinimumDate, MaximumDate, and Date properties to corresponding DateTime properties in a viewmodel.  The Date property uses TwoWay binding, enabling the viewmodel to reflect date selections.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/datepicker.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<DatePicker MinimumDate=\"{Binding MinDate}\"\n            MaximumDate=\"{Binding MaxDate}\"\n            Date=\"{Binding SelectedDate}\" />\n```\n\n----------------------------------------\n\nTITLE: RgbColorViewModel Definition C#\nDESCRIPTION: Defines a view model for representing RGB color values with properties for Red, Green, and Blue. The properties are of type `float` and update the `Color` property, which triggers property change notifications. Includes logic to get the nearest named color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class RgbColorViewModel : INotifyPropertyChanged\n{\n    Color color;\n    string name;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public float Red\n    {\n        get { return color.Red; }\n        set\n        {\n            if (color.Red != value)\n            {\n                Color = new Color(value, color.Green, color.Blue);\n            }\n        }\n    }\n\n    public float Green\n    {\n        get { return color.Green; }\n        set\n        {\n            if (color.Green != value)\n            {\n                Color = new Color(color.Red, value, color.Blue);\n            }\n        }\n    }\n\n    public float Blue\n    {\n        get { return color.Blue; }\n        set\n        {\n            if (color.Blue != value)\n            {\n                Color = new Color(color.Red, color.Green, value);\n            }\n        }\n    }\n\n    public Color Color\n    {\n        get { return color; }\n        set\n        {\n            if (color != value)\n            {\n                color = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Red\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Green\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Blue\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Color\"));\n\n                Name = NamedColor.GetNearestColorName(color);\n            }\n        }\n    }\n\n    public string Name\n    {\n        get { return name; }\n        private set\n        {\n            if (name != value)\n            {\n                name = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Name\"));\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the TapCommand in C#\nDESCRIPTION: This C# code snippet shows the implementation of the TapCommand in the code-behind for the XAML page. The TapCommand executes the Launcher.OpenAsync method from the Essentials library, which opens the URL in a web browser.  The command takes a string URL as a parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Windows.Input;\n\npublic partial class MainPage : ContentPage\n{\n    // Launcher.OpenAsync is provided by Essentials.\n    public ICommand TapCommand => new Command<string>(async (url) => await Launcher.OpenAsync(url));\n\n    public MainPage()\n    {\n        InitializeComponent();\n        BindingContext = this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compile Bindings with Multiple Generic Types - XAML\nDESCRIPTION: This code snippet shows how to specify multiple generic type arguments with the `x:DataType` attribute in XAML. The type arguments are specified as prefixed string arguments, delimited by a comma. It requires XAML and corresponding Types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<DataTemplate x:DataType=\"local:MyType(local:MyObject,x:Boolean)\">\n    ...\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Path in .NET MAUI Graphics\nDESCRIPTION: This code snippet demonstrates how to draw a path on an ICanvas using the DrawPath method. It creates a PathF object, moves to a starting point, adds lines to create a triangle, closes the path, sets the stroke color and size, and then draws the path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nPathF path = new PathF();\npath.MoveTo(40, 10);\npath.LineTo(70, 80);\npath.LineTo(10, 50);\npath.Close();\ncanvas.StrokeColor = Colors.Green;\ncanvas.StrokeSize = 6;\ncanvas.DrawPath(path);\n```\n\n----------------------------------------\n\nTITLE: Set Custom WebChromeClient to WebView in C#\nDESCRIPTION: This snippet provides two ways to set the custom `WebChromeClient` (MyWebChromeClient) to the WebView. One method demonstrates setting it directly on the platform view, and the other shows how to use handler property mapping to ensure all WebView controls use the custom client. The first method targets a specific WebView instance while the second globally changes handler behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Given a .NET MAUI `WebView` control named `theWebViewControl`, you can set the chrome client directly on the platform view, which is the Android control:\n\n((IWebViewHandler)theWebViewControl.Handler).PlatformView.SetWebChromeClient(new MyWebChromeClient((IWebViewHandler)theWebViewControl.Handler));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static void CustomizeWebViewHandler()\n{\n#if ANDROID26_0_OR_GREATER\n    Microsoft.Maui.Handlers.WebViewHandler.Mapper.ModifyMapping(\n        nameof(Android.Webkit.WebView.WebChromeClient),\n        (handler, view, args) => handler.PlatformView.SetWebChromeClient(new MyWebChromeClient(handler)));\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Focus - MAUI\nDESCRIPTION: This C# snippet uses the `SetSemanticFocus` extension method to force screen reader focus to a specific element.  This can be useful to direct the user's attention to an important UI element.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nlabel.SetSemanticFocus();\n```\n\n----------------------------------------\n\nTITLE: Initializing Compiled Binding with SetBinding in .NET MAUI (C#)\nDESCRIPTION: Demonstrates how to create a compiled binding using the SetBinding extension method with a Func argument in .NET MAUI. This example binds the TextProperty of a Label to the Text property of an Entry.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMyLabel.SetBinding(Label.TextProperty, static (Entry entry) => entry.Text);\n```\n\n----------------------------------------\n\nTITLE: Declare Local Namespace for Types\nDESCRIPTION: Declares a local namespace in XAML, mapping a prefix (local) to a CLR namespace (MyMauiApp).  This allows referencing types defined within that CLR namespace in the XAML markup. The `clr-namespace` keyword specifies the namespace, and the `using` keyword can be used instead.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/index.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ... xmlns:local=\"clr-namespace:MyMauiApp\">\n  ...\n</ContentPage>\n```\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ... xmlns:local=\"using:MyMauiApp\">\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Populate Picker with Data Binding in C#\nDESCRIPTION: This C# code demonstrates how to populate a .NET MAUI Picker with data using data binding. The ItemsSource property is bound to the Monkeys property on the view model, and the ItemDisplayBinding is set to the Name property of the Monkey object, indicating which property to display in the Picker. Lambda expressions are used for the bindings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nPicker picker = new Picker { Title = \"Select a monkey\" };\npicker.SetBinding(Picker.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\npicker.ItemDisplayBinding = Binding.Create(static (Monkey monkey) => monkey.Name);\n```\n\n----------------------------------------\n\nTITLE: Setting Flyout Icon (XAML)\nDESCRIPTION: This XAML snippet shows how to change the flyout icon by setting the Shell.FlyoutIcon bindable property to an ImageSource in a .NET MAUI Shell application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_18\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutIcon=\"flyouticon.png\">\n    ...       \n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Binding Commands to Buttons XAML\nDESCRIPTION: This XAML code demonstrates how to bind the `MultiplyBy2Command` and `DivideBy2Command` from the `CommandDemoViewModel` to `Button` elements.  The `Label` is bound to the `Number` property of the ViewModel, allowing the UI to update automatically when the commands are executed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:ButtonDemos\"\n             x:Class=\"ButtonDemos.BasicButtonCommandPage\"\n             Title=\"Basic Button Command\"\n             x:DataType=\"local:CommandDemoViewModel\">\n    <ContentPage.BindingContext>\n        <local:CommandDemoViewModel />\n    </ContentPage.BindingContext>\n\n    <StackLayout>\n        <Label Text=\"{Binding Number, StringFormat='Value is now {0}'}\"\n               FontSize=\"18\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"Center\" />\n        <Button Text=\"Multiply by 2\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\"\n                Command=\"{Binding MultiplyBy2Command}\" />\n        <Button Text=\"Divide by 2\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\"\n                Command=\"{Binding DivideBy2Command}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling CollectionView Multiple Selection Changed Event (C#)\nDESCRIPTION: This C# code demonstrates handling the `SelectionChanged` event in a CollectionView with multiple selection enabled. It retrieves the lists of previously selected items and currently selected items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    var previous = e.PreviousSelection;\n    var current = e.CurrentSelection;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VerticalStackLayout with child views - XAML\nDESCRIPTION: This XAML snippet shows how to create a VerticalStackLayout and add Label and Rectangle child views to it. The Margin property is set on the VerticalStackLayout to provide spacing around the layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/verticalstacklayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.VerticalStackLayoutPage\">\n    <VerticalStackLayout Margin=\"20\">\n        <Label Text=\"Primary colors\" />\n        <Rectangle Fill=\"Red\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Yellow\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Blue\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Label Text=\"Secondary colors\" />\n        <Rectangle Fill=\"Green\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Orange\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Purple\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Launching Map App with Directions - C#\nDESCRIPTION: This C# code snippet shows how to launch the native map application on different platforms (iOS, Android, Windows) to display directions between two locations. It constructs platform-specific URI schemes and uses Launcher.OpenAsync to open the map app with the specified start and end addresses. Requires Microsoft.Maui.ApplicationModel and Microsoft.Maui.Devices namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nif (DeviceInfo.Current.Platform == DevicePlatform.iOS || DeviceInfo.Current.Platform == DevicePlatform.MacCatalyst)\n{\n    // https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/MapLinks/MapLinks.html\n    await Launcher.OpenAsync(\"http://maps.apple.com/?daddr=San+Francisco,+CA&saddr=cupertino\");\n}\nelse if (DeviceInfo.Current.Platform == DevicePlatform.Android)\n{\n    // opens the 'task chooser' so the user can pick Maps, Chrome or other mapping app\n    await Launcher.OpenAsync(\"http://maps.google.com/?daddr=San+Francisco,+CA&saddr=Mountain+View\");\n}\nelse if (DeviceInfo.Current.Platform == DevicePlatform.WinUI)\n{\n    await Launcher.OpenAsync(\"bingmaps:?rtp=adr.394 Pacific Ave San Francisco CA~adr.One Microsoft Way Redmond WA 98052\");\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Style for Behavior XAML\nDESCRIPTION: This snippet defines an explicit style in XAML that applies the NumericValidationStyleBehavior to an Entry control by setting the attached property AttachBehavior to true.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<Style x:Key=\"NumericValidationStyle\" TargetType=\"Entry\">\n    <Style.Setters>\n        <Setter Property=\"local:NumericValidationStyleBehavior.AttachBehavior\" Value=\"true\" />\n    </Style.Setters>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: CarouselView Horizontal Layout C#\nDESCRIPTION: This C# code programmatically creates a CarouselView and sets its ItemsLayout property to LinearItemsLayout.Horizontal.  It illustrates how to define a horizontal layout in code-behind. Dependencies: Microsoft.Maui.Controls\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ...\n    ItemsLayout = LinearItemsLayout.Horizontal\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Query Attributes Method for .NET MAUI Notes\nDESCRIPTION: This C# code snippet shows the complete `ApplyQueryAttributes` method, which handles both moving updated notes and inserting new notes at the top of the `AllNotes` collection. It responds to changes indicated via the query string. The method expects a `Query` parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/bugs.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ApplyQueryAttributes(IDictionary<string, object> query)\n{\n    if (query.ContainsKey(\"deleted\"))\n    {\n        string noteId = query[\"deleted\"].ToString();\n        Note noteToDelete = AllNotes.Where((n) => n.Filename == noteId).FirstOrDefault();\n\n        if (noteToDelete != null)\n            AllNotes.Remove(noteToDelete);\n    }\n    else if (query.ContainsKey(\"saved\"))\n    {\n        string noteId = query[\"saved\"].ToString();\n        Note matchedNote = AllNotes.Where((n) => n.Filename == noteId).FirstOrDefault();\n\n        // If a note was found, update it.\n        if (matchedNote != null)\n        {\n            int index = AllNotes.IndexOf(matchedNote);\n            AllNotes.RemoveAt(index);\n            AllNotes.Insert(0, matchedNote);\n        }\n        // If a note wasn't found, it's new; add it.\n        else\n        {\n            AllNotes.Insert(0, new Note()\n            {\n                Filename = noteId,\n                Text = query[\"text\"].ToString(),\n                Date = DateTime.Now\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Text Prediction XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable text prediction and automatic text correction for an `Editor` by setting the `IsTextPredictionEnabled` property to `false`. This is useful for scenarios like entering a username.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_13\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor ... IsTextPredictionEnabled=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Create Attached Numeric Validation Behavior (C#)\nDESCRIPTION: Creates an attached behavior that validates if the input in an Entry control is a double. If the input is not a double, the text color of the Entry is changed to red.  This example showcases defining an attached property and handling its changes to add/remove event handlers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class AttachedNumericValidationBehavior\n{\n    public static readonly BindableProperty AttachBehaviorProperty =\n        BindableProperty.CreateAttached(\"AttachBehavior\", typeof(bool), typeof(AttachedNumericValidationBehavior), false, propertyChanged: OnAttachBehaviorChanged);\n\n    public static bool GetAttachBehavior(BindableObject view)\n    {\n        return (bool)view.GetValue(AttachBehaviorProperty);\n    }\n\n    public static void SetAttachBehavior(BindableObject view, bool value)\n    {\n        view.SetValue(AttachBehaviorProperty, value);\n    }\n\n    static void OnAttachBehaviorChanged(BindableObject view, object oldValue, object newValue)\n    {\n        Entry entry = view as Entry;\n        if (entry == null)\n        {\n            return;\n        }\n\n        bool attachBehavior = (bool)newValue;\n        if (attachBehavior)\n        {\n            entry.TextChanged += OnEntryTextChanged;\n        }\n        else\n        {\n            entry.TextChanged -= OnEntryTextChanged;\n        }\n    }\n\n    static void OnEntryTextChanged(object sender, TextChangedEventArgs args)\n    {\n        double result;\n        bool isValid = double.TryParse(args.NewTextValue, out result);\n        ((Entry)sender).TextColor = isValid ? Colors.Black : Colors.Red;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to SelectedIndexChanged Event (C#)\nDESCRIPTION: This C# code demonstrates how to handle the `SelectedIndexChanged` event of a `Picker` control.  It retrieves the selected index and displays the corresponding item from the `Items` collection in a label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnPickerSelectedIndexChanged(object sender, EventArgs e)\n{\n  var picker = (Picker)sender;\n  int selectedIndex = picker.SelectedIndex;\n\n  if (selectedIndex != -1)\n  {\n    monkeyNameLabel.Text = picker.Items[selectedIndex];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Keystore File with keytool\nDESCRIPTION: This command generates a keystore file for signing .NET MAUI Android apps. It uses the keytool utility from the Java Development Kit (JDK) to create a new key pair and store it in the specified keystore file. The parameters include the filename, alias, key algorithm, key size, and validity period.  Ensure the JDK version used is the latest installed on the machine.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkeytool -genkeypair -v -keystore {filename}.keystore -alias {keyname} -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Use compiled bindings in XAML\nDESCRIPTION: This XAML code demonstrates how to use compiled bindings between .NET MAUI views and viewmodel properties. It sets the `x:DataType` attribute on the ContentPage to the type of the viewmodel and uses bindings to connect properties of the viewmodel to properties of UI elements like BoxView, Label, and Slider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.CompiledColorSelectorPage\"\n             x:DataType=\"local:HslColorViewModel\"\n             Title=\"Compiled Color Selector\">\n    <ContentPage.BindingContext>\n        <local:HslColorViewModel Color=\"Sienna\" />\n    </ContentPage.BindingContext>\n    ...\n    <StackLayout>\n        <BoxView Color=\"{Binding Color}\"\n                 ... />\n        <StackLayout Margin=\"10, 0\">\n            <Label Text=\"{Binding Name}\" />\n            <Slider Value=\"{Binding Hue}\" />\n            <Label Text=\"{Binding Hue, StringFormat='Hue = {0:F2}'}\" />\n            <Slider Value=\"{Binding Saturation}\" />\n            <Label Text=\"{Binding Saturation, StringFormat='Saturation = {0:F2}'}\" />\n            <Slider Value=\"{Binding Luminosity}\" />\n            <Label Text=\"{Binding Luminosity, StringFormat='Luminosity = {0:F2}'}\" />\n        </StackLayout>\n    </StackLayout>    \n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Simplified Flyout Item Creation in .NET MAUI Shell XAML\nDESCRIPTION: This code snippet demonstrates simplified flyout item creation using implicit conversion operators in .NET MAUI Shell.  The ShellContent objects are directly added to the Shell, which are implicitly wrapped in Tab and FlyoutItem objects. The Title, Icon, and ContentTemplate properties are set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:controls=\"clr-namespace:Xaminals.Controls\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n   <ShellContent Title=\"Cats\"\n                 Icon=\"cat.png\"\n                 ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n   <ShellContent Title=\"Dogs\"\n                 Icon=\"dog.png\"\n                 ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Create a ProgressBar in C#\nDESCRIPTION: This C# snippet demonstrates how to create a ProgressBar object and set its initial progress to 0.5 (50%).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/progressbar.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nProgressBar progressBar = new ProgressBar { Progress = 0.5 };\n```\n\n----------------------------------------\n\nTITLE: MauiProgram Class Definition in C#\nDESCRIPTION: This code snippet shows the basic structure of the `MauiProgram` class in a .NET MAUI application. This class contains the `CreateMauiApp` method which is the entry point for the application.  It uses the `MauiApp.CreateBuilder()` method to create a builder, then calls `UseMauiApp<App>()` to register the main application class (`App`). Finally, it calls `builder.Build()` to create and return the `MauiApp` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>();\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Listening for Location Changes in Foreground (MAUI C#)\nDESCRIPTION: This code snippet shows how to stop listening for location changes in a MAUI application. It unregisters the location change event handler and calls Geolocation.StopListeningForeground() to stop receiving location updates. Error handling is implemented to catch potential exceptions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnStopListening()\n{\n    try\n    {\n        Geolocation.LocationChanged -= Geolocation_LocationChanged;\n        Geolocation.StopListeningForeground();\n        string status = \"Stopped listening for foreground location updates\";\n    }\n    catch (Exception ex)\n    {\n        // Unable to stop listening for location changes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Custom SearchHandler in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom SearchHandler by subclassing the Microsoft.Maui.Controls.SearchHandler class and overriding the OnQueryChanged and OnItemSelected methods. It filters a list of Animal objects based on the search query and navigates to a detail page when an item is selected. It requires a list of Animal objects and a navigation target.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AnimalSearchHandler : SearchHandler\n{\n    public IList<Animal> Animals { get; set; }\n    public Type SelectedItemNavigationTarget { get; set; }\n\n    protected override void OnQueryChanged(string oldValue, string newValue)\n    {\n        base.OnQueryChanged(oldValue, newValue);\n\n        if (string.IsNullOrWhiteSpace(newValue))\n        {\n            ItemsSource = null;\n        }\n        else\n        {\n            ItemsSource = Animals\n                .Where(animal => animal.Name.ToLower().Contains(newValue.ToLower()))\n                .ToList<Animal>();\n        }\n    }\n\n    protected override async void OnItemSelected(object item)\n    {\n        base.OnItemSelected(item);\n\n        Animal animal = item as Animal;\n        string navigationTarget = GetNavigationTarget();\n\n        if (navigationTarget.Equals(\"catdetails\") || navigationTarget.Equals(\"dogdetails\"))\n        {\n            // Navigate, passing a string\n            await Shell.Current.GoToAsync($\"{navigationTarget}?name={((Animal)item).Name}\");\n        }\n        else\n        {\n            string lowerCasePropertyName = navigationTarget.Replace(\"details\", string.Empty);\n            // Capitalise the property name\n            string propertyName = char.ToUpper(lowerCasePropertyName[0]) + lowerCasePropertyName.Substring(1);\n\n            var navigationParameters = new Dictionary<string, object>\n            {\n                { propertyName, animal }\n            };\n\n            // Navigate, passing an object\n            await Shell.Current.GoToAsync($\"{navigationTarget}\", navigationParameters);\n        }\n    }\n\n    string GetNavigationTarget()\n    {\n        return (Shell.Current as AppShell).Routes.FirstOrDefault(route => route.Value.Equals(SelectedItemNavigationTarget)).Key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Contacts using IContacts.GetAllAsync (C#)\nDESCRIPTION: This code snippet demonstrates how to use the `GetAllAsync` method of the `IContacts` interface to retrieve a collection of all contacts on the device. The method returns a `List<Contact>` object containing the contact information.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar contacts = await Contacts.Default.GetAllAsync();\n```\n\n----------------------------------------\n\nTITLE: Get a Preference Value with Default in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to retrieve a preference value using the Preferences.Get method in .NET MAUI. It takes a string key and a default value as input. If the key exists, the corresponding value is returned; otherwise, the default value is returned. The data type of the default value determines the expected return type. No external dependencies beyond the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/preferences.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring value = Preferences.Get(\"my_key\", \"default_value\");\n```\n\n----------------------------------------\n\nTITLE: Expanded DataTemplate for displaying color information in XAML\nDESCRIPTION: This XAML code defines an expanded `DataTemplate` that displays the color, friendly name, and RGB values for each named color. It uses a `BoxView` to show the color and labels to display the name and RGB values. A `FloatToIntConverter` is used (not shown) to convert the float RGB values to integers for hexadecimal formatting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.ListViewDemoPage\"\n             Title=\"ListView Demo Page\">\n    <ContentPage.Resources>\n        <x:Double x:Key=\"boxSize\">50</x:Double>\n        <x:Int32 x:Key=\"rowHeight\">60</x:Int32>\n        <local:FloatToIntConverter x:Key=\"intConverter\" />\n    </ContentPage.Resources>\n\n    <ListView ItemsSource=\"{x:Static local:NamedColor.All}\"\n              RowHeight=\"{StaticResource rowHeight}\">\n        <ListView.ItemTemplate>\n            <DataTemplate x:DataType=\"local:NamedColor\">\n                <ViewCell>\n                    <StackLayout Padding=\"5, 5, 0, 5\"\n                                 Orientation=\"Horizontal\"\n                                 Spacing=\"15\">\n                        <BoxView WidthRequest=\"{StaticResource boxSize}\"\n                                 HeightRequest=\"{StaticResource boxSize}\"\n                                 Color=\"{Binding Color}\" />\n                        <StackLayout Padding=\"5, 0, 0, 0\"\n                                     VerticalOptions=\"Center\">\n                            <Label Text=\"{Binding FriendlyName}\"\n                                   FontAttributes=\"Bold\"\n                                   FontSize=\"14\" />\n                            <StackLayout Orientation=\"Horizontal\"\n                                         Spacing=\"0\">\n                                <Label Text=\"{Binding Red,\n                                                      Converter={StaticResource intConverter},\n                                                      ConverterParameter=255,\n                                                      StringFormat='R={0:X2}'}\" />                                \n                                <Label Text=\"{Binding Green,\n                                                      Converter={StaticResource intConverter},\n                                                      ConverterParameter=255,\n                                                      StringFormat=', G={0:X2}'}\" />                                \n                                <Label Text=\"{Binding Blue,\n                                                      Converter={StaticResource intConverter},\n                                                      ConverterParameter=255,\n                                                      StringFormat=', B={0:X2}'}\" />\n                            </StackLayout>\n                        </StackLayout>\n                    </StackLayout>\n                </ViewCell>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Mapping Commands in VideoHandler with C#\nDESCRIPTION: This code snippet illustrates how to map commands from the cross-platform `Video` control to the native `MauiVideoPlayer` on Windows.  Similar to property mapping, static methods are used as actions. These methods handle commands like updating status, playing, pausing, and stopping the video. They receive the handler, control instances, and optional data as arguments. The optional data is extracted and passed to the corresponding method on the `MauiVideoPlayer`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapUpdateStatus(VideoHandler handler, Video video, object? args)\n    {\n        handler.PlatformView?.UpdateStatus();\n    }\n\n    public static void MapPlayRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PlayRequested(position);\n    }\n\n    public static void MapPauseRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PauseRequested(position);\n    }\n\n    public static void MapStopRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.StopRequested(position);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Data bind CheckBox IsChecked property\nDESCRIPTION: This code snippet demonstrates how to bind the IsChecked property of a CheckBox to the FontAttributes and FontSize properties of a Label using a DataTrigger. When the CheckBox is checked, the Label's text becomes italic and bold, and the font size is set to 18. Requires the CheckBox to have an x:Name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox x:Name=\"checkBox\" />\n<Label Text=\"Lorem ipsum dolor sit amet, elit rutrum, enim hendrerit augue vitae praesent sed non, lorem aenean quis praesent pede.\">\n    <Label.Triggers>\n        <DataTrigger x:DataType=\"CheckBox\"\n                     TargetType=\"Label\"\n                     Binding=\"{Binding Source={x:Reference checkBox}, Path=IsChecked}\"\n                     Value=\"true\">\n            <Setter Property=\"FontAttributes\"\n                    Value=\"Italic, Bold\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"18\" />\n        </DataTrigger>\n    </Label.Triggers>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Define ContentView UI in XAML\nDESCRIPTION: This XAML snippet shows how to define the UI for a custom control derived from ContentView. It uses data binding to connect the UI elements to the properties defined in the code-behind file. Fallback values are provided in case the binding is null.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/contentview.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentView ...\n             xmlns:local=\"clr-namespace:CardViewDemo.Controls\"\n             x:Name=\"this\"\n             x:Class=\"CardViewDemo.Controls.CardView\"\n             x:DataType=\"local:CardView\">\n    <Border BindingContext=\"{x:Reference this}\"\n            BackgroundColor=\"{Binding CardColor}\"\n            Stroke=\"{Binding BorderColor}\"\n            ...>\n        <Grid>\n            ...\n            <Border Stroke=\"{Binding BorderColor, FallbackValue='Black'}\"\n                    BackgroundColor=\"{Binding IconBackgroundColor, FallbackValue='Grey'}\"\n                   ...>\n                <Image Source=\"{Binding IconImageSource}\"\n                       .. />\n            </Border>\n            <Label Text=\"{Binding CardTitle, FallbackValue='Card Title'}\"\n                   ... />\n            <BoxView BackgroundColor=\"{Binding BorderColor, FallbackValue='Black'}\"\n                     ... />\n            <Label Text=\"{Binding CardDescription, FallbackValue='Card description text.'}\"\n                   ... />\n        </Grid>\n    </Border>\n</ContentView>\n```\n\n----------------------------------------\n\nTITLE: Manual Handler Disconnection in C# - .NET MAUI\nDESCRIPTION: Illustrates how to manually disconnect a handler in C# by invoking the `DisconnectHandler` method on the handler of a View. This is necessary when the `HandlerProperties.DisconnectPolicy` is set to `Manual`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nvideo.Handler?.DisconnectHandler();\n```\n\n----------------------------------------\n\nTITLE: Int to Bool Value Converter C#\nDESCRIPTION: This value converter converts an integer value to a boolean value. It returns `true` if the integer is not equal to 0, and `false` otherwise. The `ConvertBack` method performs the reverse conversion, returning 1 for `true` and 0 for `false`. It implements the IValueConverter interface and requires the `System.Globalization` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class IntToBoolConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (int)value != 0;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (bool)value ? 1 : 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bindable Property Accessors\nDESCRIPTION: This snippet shows the implementation of property accessors (getter and setter) for the `IsExpanded` bindable property. The getter uses `GetValue` to retrieve the value, and the setter uses `SetValue` to set the value. Both methods use the `IsExpandedProperty` identifier.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic bool IsExpanded\n{\n    get => (bool)GetValue(IsExpandedProperty);\n    set => SetValue(IsExpandedProperty, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Android Permissions - Assembly Attributes - C#\nDESCRIPTION: This C# code snippet demonstrates how to declare location permissions and hardware feature usage within the Android project using assembly attributes in the MainApplication.cs file. It includes permissions for coarse and fine location access, optional background location access (for Android 10+), and feature declarations for location hardware.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.AccessCoarseLocation)]\n[assembly: UsesPermission(Android.Manifest.Permission.AccessFineLocation)]\n[assembly: UsesFeature(\"android.hardware.location\", Required = false)]\n[assembly: UsesFeature(\"android.hardware.location.gps\", Required = false)]\n[assembly: UsesFeature(\"android.hardware.location.network\", Required = false)]\n[assembly: UsesPermission(Android.Manifest.Permission.AccessBackgroundLocation)]\n```\n\n----------------------------------------\n\nTITLE: Using StaticResource for LayoutOptions\nDESCRIPTION: This XAML snippet shows how to use the `StaticResource` markup extension to reference the `LayoutOptions` resources defined earlier, applying them to the `HorizontalOptions` and `VerticalOptions` properties of a button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"Do this!\"\n        HorizontalOptions=\"{StaticResource horzOptions}\"\n        VerticalOptions=\"{StaticResource vertOptions}\"\n        BorderWidth=\"3\"\n        Rotation=\"-15\"\n        TextColor=\"Red\"\n        FontSize=\"24\" />\n```\n\n----------------------------------------\n\nTITLE: Reverse Geocoding Coordinates to Placemarks in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use the IGeocoding interface to reverse geocode a set of coordinates to a list of placemarks in a .NET MAUI application. It uses the Geocoding.GetPlacemarksAsync method to retrieve a list of placemarks at the specified coordinates, and then iterates through the list to access the country code, country name, locality, and postal code of each placemark.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geocoding.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string> GetPlacemark()\n{\n\ttry\n\t{\n\t\tIEnumerable<Placemark> placemarks = await Geocoding.GetPlacemarksAsync(47.673988, -122.121513);\n\n\t\tPlacemark placemark = placemarks?.FirstOrDefault();\n\n\t\tif (placemark != null)\n\t\t\treturn\n\t\t\t\t$\"Country: {placemark.CountryCode}, {placemark.CountryName}\\n\" +\n\t\t\t\t$\"AdminArea: {placemark.AdminArea}\\n\" +\n\t\t\t\t$\"SubAdminArea: {placemark.SubAdminArea}\\n\" +\n\t\t\t\t$\"Locality: {placemark.Locality}\\n\" +\n\t\t\t\t$\"SubLocality: {placemark.SubLocality}\\n\" +\n\t\t\t\t$\"Thoroughfare: {placemark.Thoroughfare}\\n\" +\n\t\t\t\t$\"SubThoroughfare: {placemark.SubThoroughfare}\\n\" +\n\t\t\t\t$\"PostalCode: {placemark.PostalCode}\";\n\t}\n\tcatch (Exception ex)\n\t{\n\t\treturn ex.ToString();\n\t}\n\n\treturn \"Unable to reverse geocode coordinates.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Image Resources in .NET MAUI Project\nDESCRIPTION: This XML snippet configures the project to include all images from the Resources\\Images folder as MauiImage resources. The wildcard character (*) indicates that all files within the folder will be treated as images. It also demonstrates how to include all files from child folders using the double wildcard character (**).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <!-- Images -->\n    <MauiImage Include=\"Resources\\Images\\*\" />\n\n    <!-- Fonts -->\n    <MauiFont Include=\"Resources\\Fonts\\*\" />\n\n    <!-- Raw assets -->\n    <MauiAsset Include=\"Resources\\Raw\\*\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enable Mono Interpreter for iOS Release Builds (MSBuild)\nDESCRIPTION: This snippet demonstrates how to enable the Mono interpreter for iOS release builds by setting the `$(UseInterpreter)` MSBuild property to `true` in the .NET MAUI project file. This allows dynamic code generation and mitigates issues related to limited generics support during AOT compilation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-ios')) and '$(Configuration)' == 'Release'\">\n    <UseInterpreter>true</UseInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Register Shell routes in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define routes for FlyoutItem, Tab, and ShellContent objects within a Shell application.  The Route properties are used to establish the navigation hierarchy.  All items in the Shell hierarchy have a route. An ArgumentException will be thrown on app startup if a duplicate route is detected.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell ...>\n    <FlyoutItem ...\n                Route=\"animals\">\n        <Tab ...\n             Route=\"domestic\">\n            <ShellContent ...\n                          Route=\"cats\" />\n            <ShellContent ...\n                          Route=\"dogs\" />\n        </Tab>\n        <ShellContent ...\n                      Route=\"monkeys\" />\n        <ShellContent ...\n                      Route=\"elephants\" />  \n        <ShellContent ...\n                      Route=\"bears\" />\n    </FlyoutItem>\n    <ShellContent ...\n                  Route=\"about\" />                  \n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Keyboard Accelerators in XAML\nDESCRIPTION: This XAML snippet uses the OnPlatform markup extension to define different keyboard accelerators based on the platform. It assigns Cmd+T on MacCatalyst and Windows+C on WinUI to the Change Theme command.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Change Theme\"\n                Command=\"{Binding ChangeThemeCommand}\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <KeyboardAccelerator Modifiers=\"{OnPlatform MacCatalyst=Cmd, WinUI=Windows}\"\n                             Key=\"{OnPlatform MacCatalyst=T, WinUI=C}\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Recognizing Up and Down Swipes C#\nDESCRIPTION: This C# snippet shows how to create a SwipeGestureRecognizer that detects both up and down swipes.  It utilizes the bitwise OR operator to combine the SwipeDirection.Up and SwipeDirection.Down enumeration values. Requires .NET MAUI framework and SwipeDirection enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSwipeGestureRecognizer swipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Up | SwipeDirection.Down };\n```\n\n----------------------------------------\n\nTITLE: FlexLayout Stack Example in XAML\nDESCRIPTION: This snippet demonstrates how to use FlexLayout to create a simple stack layout in XAML. It shows setting the Direction, AlignItems, and JustifyContent properties to arrange children in a column, center them horizontally, and distribute vertical space evenly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"FlexLayoutDemos.Views.SimpleStackPage\"\n             Title=\"Simple Stack\">    \n    <FlexLayout Direction=\"Column\"\n                AlignItems=\"Center\"\n                JustifyContent=\"SpaceEvenly\">        \n        <Label Text=\"FlexLayout in Action\"\n               FontSize=\"18\" />\n        <Image Source=\"dotnet_bot_branded.png\"\n               HeightRequest=\"300\" />\n        <Button Text=\"Do-Nothing Button\" />\n        <Label Text=\"Another Label\" />\n    </FlexLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining App-Wide Resource Dictionary Style in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a style within the application's resource dictionary. The `HeadingLabelStyle` is defined for `Label` controls and applied throughout the application. Defining resources in the app's resource dictionary is appropriate for resources used globally across the app. It includes setting properties like `HorizontalOptions`, `FontSize`, and `TextColor`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.App\">\n     <Application.Resources>\n        <Style x:Key=\"HeadingLabelStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"HorizontalOptions\"\n                    Value=\"Center\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"Large\" />\n            <Setter Property=\"TextColor\"\n                    Value=\"Red\" />\n        </Style>\n     </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Consuming ClockViewModel in XAML\nDESCRIPTION: This XAML code consumes the `ClockViewModel`. It sets the `BindingContext` of the ContentPage to an instance of `ClockViewModel`. A Label control is then bound to the DateTime property of the viewmodel, displaying the current time. The `x:DataType` attribute provides compile-time validation of the binding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.ClockPage\"\n             Title=\"Clock Page\"\n             x:DataType=\"local:ClockViewModel\">\n    <ContentPage.BindingContext>\n        <local:ClockViewModel />\n    </ContentPage.BindingContext>\n\n    <Label Text=\"{Binding DateTime, StringFormat='{0:T}'}\"\n           FontSize=\"18\"\n           HorizontalOptions=\"Center\"\n           VerticalOptions=\"Center\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Binding SelectedItem in Picker (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to bind the `SelectedItem` property of a `Picker` control to a `SelectedMonkey` property in the view model. It also shows how to display the properties of the selected monkey using labels and an image.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Picker Title=\"Select a monkey\"\n        ItemsSource=\"{Binding Monkeys}\"\n        ItemDisplayBinding=\"{Binding Name}\"\n        SelectedItem=\"{Binding SelectedMonkey}\" />\n<Label Text=\"{Binding SelectedMonkey.Name}\" ... />\n<Label Text=\"{Binding SelectedMonkey.Location}\" ... />\n<Image Source=\"{Binding SelectedMonkey.ImageUrl}\" ... />\n<Label Text=\"{Binding SelectedMonkey.Details}\" ... />\n```\n\n----------------------------------------\n\nTITLE: Setting ImeOptions in C# for Android Entry\nDESCRIPTION: This code snippet illustrates how to configure the input method editor (IME) options for a .NET MAUI Entry control using C# code, targeting the Android platform. It utilizes the fluent API and the `On<Android>()` method to ensure the platform-specific configuration is applied only on Android. The `SetImeOptions` method then sets the desired action button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/entry-ime-options.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nentry.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetImeOptions(ImeFlags.Send);\n```\n\n----------------------------------------\n\nTITLE: Populate TabbedPage with DataTemplate (XAML)\nDESCRIPTION: This XAML code illustrates how to dynamically generate TabbedPage children by binding the ItemsSource property to an IEnumerable collection of objects and defining an ItemTemplate using a DataTemplate.  Each tab will be a ContentPage, and its properties (Title, IconImageSource, content) are bound to properties of the objects in the ItemsSource collection. Requires a data model (MonkeyDataModel.All and the Monkey class) with properties like Name, PhotoUrl, and Family.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/tabbedpage.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n            xmlns:local=\"clr-namespace:TabbedPageDemo\"\n            x:Class=\"TabbedPageDemo.MainPage\"\n            ItemsSource=\"{x:Static local:MonkeyDataModel.All}\"\n            x:DataType=\"local:Monkey\">\n    <TabbedPage.ItemTemplate>\n        <DataTemplate>\n            <ContentPage Title=\"{Binding Name}\"\n                         IconImageSource=\"monkeyicon.png\">\n                <StackLayout Padding=\"5, 25\">\n                    <Label Text=\"{Binding Name}\"\n                           FontAttributes=\"Bold\"\n                           FontSize=\"18\"\n                           HorizontalOptions=\"Center\" />\n                    <Image Source=\"{Binding PhotoUrl}\"\n                           HorizontalOptions=\"Center\"\n                           WidthRequest=\"200\"\n                           HeightRequest=\"200\" />\n                    <StackLayout Padding=\"50, 10\">\n                        <StackLayout Orientation=\"Horizontal\">\n                            <Label Text=\"Family: \"\n                                   FontAttributes=\"Bold\" />\n                            <Label Text=\"{Binding Family}\" />\n                        </StackLayout>\n                        ...\n                    </StackLayout>\n                </StackLayout>\n            </ContentPage>\n        </DataTemplate>\n    </TabbedPage.ItemTemplate>\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Convert Cross-Platform Control to Platform Control C#\nDESCRIPTION: This code snippet demonstrates how to convert a .NET MAUI cross-platform control, specifically a `Video` control, to its underlying platform-specific control using the `ToPlatform` extension method within a handler. The conversion is done in the `MapSource` method of a custom handler, `VideoHandler`. It relies on the `Microsoft.Maui.Platform` namespace and assumes a `MauiContext` is available.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Handlers;\nusing Microsoft.Maui.Platform;\nusing VideoDemos.Controls;\nusing VideoDemos.Platforms.Android;\n\nnamespace VideoDemos.Handlers\n{\n    public partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n    {\n        ...\n        public static void MapSource(VideoHandler handler, Video video)\n        {\n            handler.PlatformView?.UpdateSource();\n\n            // Convert cross-platform control to its underlying platform control\n            MauiVideoPlayer mvp = (MauiVideoPlayer)video.ToPlatform(handler.MauiContext);\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Save and Delete Button Click Handlers (C#)\nDESCRIPTION: This C# code implements the `Clicked` event handlers for the \"Save\" and \"Delete\" buttons. The `SaveButton_Clicked` method writes the text from the `TextEditor` control to the file specified by `_fileName`.  The `DeleteButton_Clicked` method deletes the file (if it exists) and clears the text in the `TextEditor` control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    private void SaveButton_Clicked(object sender, EventArgs e)\n    {\n        File.WriteAllText(_fileName, TextEditor.Text);\n    }\n\n    private void DeleteButton_Clicked(object sender, EventArgs e)\n    {\n        if (File.Exists(_fileName))\n        {\n            File.Delete(_fileName);\n        }\n\n        TextEditor.Text = string.Empty;\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Entry Handler Lifecycle with Conditional Compilation C#\nDESCRIPTION: This code snippet demonstrates customizing the handler lifecycle of a .NET MAUI Entry control using conditional compilation. It subscribes to native events based on the target platform (Android, iOS/Mac Catalyst, or Windows) within the HandlerChanged and HandlerChanging events. The code also provides platform-specific implementations for selecting all text in the Entry when it gains focus.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\nusing AndroidX.AppCompat.Widget;\n#elif IOS || MACCATALYST\nusing UIKit;\n#elif WINDOWS\nusing Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml;\n#endif\n\nnamespace CustomizeHandlersDemo.Views;\n\npublic partial class CustomizeEntryHandlerLifecyclePage : ContentPage\n{\n    public CustomizeEntryHandlerLifecyclePage()\n    {\n        InitializeComponent();\n    }\n\n    void OnEntryHandlerChanged(object sender, EventArgs e)\n    {\n        Entry entry = sender as Entry;\n#if ANDROID\n        (entry.Handler.PlatformView as AppCompatEditText).SetSelectAllOnFocus(true);\n#elif IOS || MACCATALYST\n        (entry.Handler.PlatformView as UITextField).EditingDidBegin += OnEditingDidBegin;\n#elif WINDOWS\n        (entry.Handler.PlatformView as TextBox).GotFocus += OnGotFocus;\n#endif\n    }\n\n    void OnEntryHandlerChanging(object sender, HandlerChangingEventArgs e)\n    {\n        if (e.OldHandler != null)\n        {\n#if IOS || MACCATALYST\n            (e.OldHandler.PlatformView as UITextField).EditingDidBegin -= OnEditingDidBegin;\n#elif WINDOWS\n            (e.OldHandler.PlatformView as TextBox).GotFocus -= OnGotFocus;\n#endif\n        }\n    }\n\n#if IOS || MACCATALYST                   \n    void OnEditingDidBegin(object sender, EventArgs e)\n    {\n        var nativeView = sender as UITextField;\n        nativeView.PerformSelector(new ObjCRuntime.Selector(\"selectAll\"), null, 0.0f);\n    }\n#elif WINDOWS\n    void OnGotFocus(object sender, RoutedEventArgs e)\n    {\n        var nativeView = sender as TextBox;\n        nativeView.SelectAll();\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to RadioButton CheckedChanged Event XAML\nDESCRIPTION: This XAML snippet demonstrates how to subscribe to the `CheckedChanged` event of a RadioButton. The `CheckedChanged` event fires when the `IsChecked` property of the RadioButton changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<RadioButton Content=\"Red\"\n             GroupName=\"colors\"\n             CheckedChanged=\"OnColorsRadioButtonCheckedChanged\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Play Services Version in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to specify the Google Play services version number in the AndroidManifest.xml file. It embeds the version of Google Play services that the app was compiled with, into the manifest.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />\n```\n\n----------------------------------------\n\nTITLE: Create Editor in XAML - MAUI\nDESCRIPTION: Demonstrates how to create a basic Editor control in XAML, setting properties for placeholder text, height, and event handlers for text changes and completion.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor x:Name=\"editor\"\n        Placeholder=\"Enter your response here\"\n        HeightRequest=\"250\"\n        TextChanged=\"OnEditorTextChanged\"\n        Completed=\"OnEditorCompleted\" />\n```\n\n----------------------------------------\n\nTITLE: Creating DataTemplate with a Custom Type (XAML)\nDESCRIPTION: This XAML code snippet demonstrates how to create a DataTemplate using a custom view type (PersonView) within a CollectionView's ItemTemplate.  The PersonView defines the visual representation of each item in the CollectionView, which is bound to a collection of Person objects.  This approach promotes reusability of the view's appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataTemplates\"\n             x:Class=\"DataTemplates.WithDataTemplatePageFromType\">\n    <StackLayout>\n        <CollectionView>\n           <CollectionView.ItemsSource>\n                <x:Array Type=\"{x:Type local:Person}\">\n                    <local:Person Name=\"Steve\" Age=\"21\" Location=\"USA\" />\n                    ...\n                </x:Array>\n            </CollectionView.ItemsSource>\n            <CollectionView.ItemTemplate>\n                <DataTemplate>\n                    <local:PersonView />\n                </DataTemplate>\n            </CollectionView.ItemTemplate>\n        </CollectionView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: RemainingItemsThresholdReached Event Handler (C#)\nDESCRIPTION: This C# snippet shows the event handler for the RemainingItemsThresholdReached event. Inside the handler, you should retrieve more data and add it to the CollectionView's ItemsSource collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnCollectionViewRemainingItemsThresholdReached(object sender, EventArgs e)\n{\n    // Retrieve more data here and add it to the CollectionView's ItemsSource collection.\n}\n```\n\n----------------------------------------\n\nTITLE: Set Entry Cursor Color in XAML (iOS)\nDESCRIPTION: This XAML code snippet demonstrates how to set the cursor color of an Entry control to LimeGreen on iOS using the platform-specific namespace. The `Entry.CursorColor` bindable property is used to specify the color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/entry-cursor-color.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <Entry ... ios:Entry.CursorColor=\"LimeGreen\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Loading Note from File (C#)\nDESCRIPTION: This C# code reads the contents of a file (specified by `_fileName`) into the `TextEditor` control's `Text` property within the `NotePage` constructor.  It handles potential `FileNotFoundException` exceptions by setting the text to an empty string if the file does not exist. This ensures the application doesn't crash when the note file is not present.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n        try\n        {\n            TextEditor.Text = File.ReadAllText(_fileName);\n        }\n        catch (Exception ex)\n        {\n            // Doesn't exist yet\n        }\n```\n\n----------------------------------------\n\nTITLE: Set Default Theme in App.xaml\nDESCRIPTION: This XAML code demonstrates how to set a default theme for a .NET MAUI application by merging the `LightTheme.xaml` ResourceDictionary into the application-level ResourceDictionary defined in `App.xaml`. This ensures that the application starts with the specified theme and that controls have default resource values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ThemingDemo.App\">\n    <Application.Resources>\n        <ResourceDictionary Source=\"Themes/LightTheme.xaml\" />\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Populate Picker with ItemsSource List in C#\nDESCRIPTION: This C# snippet demonstrates how to populate a .NET MAUI Picker control with a list of strings using the ItemsSource property. A List<string> is created and populated with monkey names. The Picker is then created, its Title set, and its ItemsSource bound to the list.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar monkeyList = new List<string>();\nmonkeyList.Add(\"Baboon\");\nmonkeyList.Add(\"Capuchin Monkey\");\nmonkeyList.Add(\"Blue Monkey\");\nmonkeyList.Add(\"Squirrel Monkey\");\nmonkeyList.Add(\"Golden Lion Tamarin\");\nmonkeyList.Add(\"Howler Monkey\");\nmonkeyList.Add(\"Japanese Macaque\");\n\nPicker picker = new Picker { Title = \"Select a monkey\" };\npicker.ItemsSource = monkeyList;\n```\n\n----------------------------------------\n\nTITLE: Defining Video Duration Property in C#\nDESCRIPTION: This code snippet defines a read-only bindable property named `Duration` of type `TimeSpan` in a custom `Video` control.  It uses a `BindablePropertyKey` to make the property settable only from within the class or its handler, and exposes an explicit interface implementation via `IVideoController` for handler updates. The property changed handler calls `SetTimeToEnd`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        private static readonly BindablePropertyKey DurationPropertyKey =\n            BindableProperty.CreateReadOnly(nameof(Duration), typeof(TimeSpan), typeof(Video), new TimeSpan(),\n                propertyChanged: (bindable, oldValue, newValue) => ((Video)bindable).SetTimeToEnd());\n\n        public static readonly BindableProperty DurationProperty = DurationPropertyKey.BindableProperty;\n\n        public TimeSpan Duration\n        {\n            get { return (TimeSpan)GetValue(DurationProperty); }\n        }\n\n        TimeSpan IVideoController.Duration\n        {\n            get { return Duration; }\n            set { SetValue(DurationPropertyKey, value); }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Grouping RadioButtons with GroupName Property XAML\nDESCRIPTION: This XAML snippet demonstrates how to explicitly group RadioButton controls by setting their `GroupName` property to the same value. This ensures that only one RadioButton in the group can be selected at a time.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"What's your favorite color?\" />\n<RadioButton Content=\"Red\"\n             GroupName=\"colors\" />\n<RadioButton Content=\"Green\"\n             GroupName=\"colors\" />\n<RadioButton Content=\"Blue\"\n             GroupName=\"colors\" />\n<RadioButton Content=\"Other\"\n             GroupName=\"colors\" />\n```\n\n----------------------------------------\n\nTITLE: Preselecting Single Item in CollectionView (XAML)\nDESCRIPTION: This XAML snippet shows how to preselect a single item in a CollectionView. The `SelectionMode` is set to `Single`, and the `SelectedItem` property is bound to a property in the view model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                SelectionMode=\"Single\"\n                SelectedItem=\"{Binding SelectedMonkey}\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Define EmptyView ContentViews in ResourceDictionary XAML\nDESCRIPTION: This XAML code defines two ContentView objects within a ResourceDictionary, which will be used as potential EmptyView content for a CarouselView based on application logic. The different ContentViews can display different messages when the CarouselView has no data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewmodels=\"clr-namespace:CarouselViewDemos.ViewModels\"\n             x:Class=\"CarouselViewDemos.Views.EmptyViewSwapPage\"\n             Title=\"EmptyView (swap)\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <ContentPage.BindingContext>\n        <viewmodels:MonkeysViewModel />\n    </ContentPage.BindingContext>\n    <ContentPage.Resources>\n        <ContentView x:Key=\"BasicEmptyView\">\n            <StackLayout>\n                <Label Text=\"No items to display.\"\n                       Margin=\"10,25,10,10\"\n                       FontAttributes=\"Bold\"\n                       FontSize=\"18\"\n                       HorizontalOptions=\"Fill\"\n                       HorizontalTextAlignment=\"Center\" />\n            </StackLayout>\n        </ContentView>\n        <ContentView x:Key=\"AdvancedEmptyView\">\n            <StackLayout>\n                <Label Text=\"No results matched your filter.\"\n                       Margin=\"10,25,10,10\"\n                       FontAttributes=\"Bold\"\n                       FontSize=\"18\"\n                       HorizontalOptions=\"Fill\"\n                       HorizontalTextAlignment=\"Center\" />\n                <Label Text=\"Try a broader filter?\"\n                       FontAttributes=\"Italic\"\n                       FontSize=\"12\"\n                       HorizontalOptions=\"Fill\"\n                       HorizontalTextAlignment=\"Center\" />\n            </StackLayout>\n        </ContentView>\n    </ContentPage.Resources>\n    <StackLayout Margin=\"20\">\n        <SearchBar SearchCommand=\"{Binding FilterCommand}\"\n                   SearchCommandParameter=\"{Binding x:DataType='SearchBar', Source={RelativeSource Self}, Path=Text}\"\n                   Placeholder=\"Filter\" />\n        <StackLayout Orientation=\"Horizontal\">\n            <Label Text=\"Toggle EmptyViews\" />\n            <Switch Toggled=\"OnEmptyViewSwitchToggled\" />\n        </StackLayout>\n        <CarouselView x:Name=\"carouselView\"\n                      ItemsSource=\"{Binding Monkeys}\">\n            <CarouselView.ItemTemplate>\n                ...\n            </CarouselView.ItemTemplate>\n        </CarouselView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a BoxView in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a BoxView with specified color, corner radius, width, and height. It showcases setting the Color, CornerRadius, WidthRequest, and HeightRequest properties to customize the appearance of the BoxView within a ContentPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/boxview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:BasicBoxView\"\n             x:Class=\"BasicBoxView.MainPage\">\n    <BoxView Color=\"CornflowerBlue\"\n             CornerRadius=\"10\"\n             WidthRequest=\"160\"\n             HeightRequest=\"160\"\n             VerticalOptions=\"Center\"\n             HorizontalOptions=\"Center\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Window Class in .NET MAUI\nDESCRIPTION: This code snippet shows how to create a custom window class by inheriting from the `Window` class. This allows you to override and customize the behavior of a window in your .NET MAUI application. It includes constructors for both default window creation and window creation with a specific page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public class MyWindow : Window\n    {\n        public MyWindow() : base()\n        {\n        }\n\n        public MyWindow(Page page) : base(page)\n        {\n        }\n\n        // Override Window methods\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VideoHandler for iOS and Mac Catalyst in MAUI\nDESCRIPTION: This code snippet defines a partial class `VideoHandler` that extends `ViewHandler` to manage the native video player on iOS and Mac Catalyst. It overrides `CreatePlatformView`, `ConnectHandler`, and `DisconnectHandler` to create, connect, and disconnect the `MauiVideoPlayer` instance, respectively, handling the lifecycle of the underlying native video player.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Handlers;\nusing VideoDemos.Controls;\nusing VideoDemos.Platforms.MaciOS;\n\nnamespace VideoDemos.Handlers\n{\n    public partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n    {\n        protected override MauiVideoPlayer CreatePlatformView() => new MauiVideoPlayer(VirtualView);\n\n        protected override void ConnectHandler(MauiVideoPlayer platformView)\n        {\n            base.ConnectHandler(platformView);\n\n            // Perform any control setup here\n        }\n\n        protected override void DisconnectHandler(MauiVideoPlayer platformView)\n        {\n            platformView.Dispose();\n            base.DisconnectHandler(platformView);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement INotifyPropertyChanged for HSL Color ViewModel in C#\nDESCRIPTION: This C# code snippet demonstrates the implementation of the INotifyPropertyChanged interface in a ViewModel.  It defines Hue, Saturation, Luminosity, Color, and Name properties and raises the PropertyChanged event when these properties change. The Color property recalculates the color components when any of them change and it calls the GetNearestColorName to set the name of the color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-mode.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class HslColorViewModel : INotifyPropertyChanged\n{\n    Color color;\n    string name;\n    float hue;\n    float saturation;\n    float luminosity;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public float Hue\n    {\n        get\n        {\n            return hue;\n        }\n        set\n        {\n            if (hue != value)\n            {\n                Color = Color.FromHsla(value, saturation, luminosity);\n            }\n        }\n    }\n\n    public float Saturation\n    {\n        get\n        {\n            return saturation;\n        }\n        set\n        {\n            if (saturation != value)\n            {\n                Color = Color.FromHsla(hue, value, luminosity);\n            }\n        }\n    }\n\n    public float Luminosity\n    {\n        get\n        {\n            return luminosity;\n        }\n        set\n        {\n            if (luminosity != value)\n            {\n                Color = Color.FromHsla(hue, saturation, value);\n            }\n        }\n    }\n\n    public Color Color\n    {\n        get\n        {\n            return color;\n        }\n        set\n        {\n            if (color != value)\n            {\n                color = value;\n                hue = color.GetHue();\n                saturation = color.GetSaturation();\n                luminosity = color.GetLuminosity();\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Hue\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Saturation\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Luminosity\"));\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Color\"));\n\n                Name = NamedColor.GetNearestColorName(color);\n            }\n        }\n    }\n\n    public string Name\n    {\n        get\n        {\n            return name;\n        }\n        private set\n        {\n            if (name != value)\n            {\n                name = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Name\"));\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Keyboard Accelerators in C#\nDESCRIPTION: This C# code demonstrates how to create platform-specific keyboard accelerators using DeviceInfo.Current.Platform. It sets the modifier and key based on whether the application is running on MacCatalyst or WinUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nKeyboardAcceleratorModifiers modifier = KeyboardAcceleratorModifiers.None;\nstring key = string.Empty;\n\nif (DeviceInfo.Current.Platform == DevicePlatform.MacCatalyst)\n{\n    modifier = KeyboardAcceleratorModifiers.Cmd;\n    key = \"T\";\n}\nelse if (DeviceInfo.Current.Platform == DevicePlatform.WinUI)\n{\n    modifier = KeyboardAcceleratorModifiers.Windows;\n    key = \"C\";\n}\n\nmyMenuFlyoutItem.KeyboardAccelerators.Add(new KeyboardAccelerator\n{\n    Modifiers = modifier,\n    Key = key\n});\n```\n\n----------------------------------------\n\nTITLE: Override Binding Mode - TwoWay Binding on Scale Property (Incorrect)\nDESCRIPTION: This XAML snippet attempts to use a TwoWay binding on the Scale property of a Label, bound to the Value of a Slider. However, due to the initialization order of TwoWay bindings, this approach does not work as expected because the target (Scale) is set from the source (Slider) first. This will make the slider initialized to the default scale value which is zero.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-mode.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"TEXT\"\n       FontSize=\"40\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"CenterAndExpand\"\n       Scale=\"{Binding x:DataType='Slider',\n                       Source={x:Reference slider},\n                       Path=Value,\n                       Mode=TwoWay}\" />\n```\n\n----------------------------------------\n\nTITLE: CarouselView PeekAreaInsets XAML\nDESCRIPTION: This XAML code demonstrates how to use the PeekAreaInsets property to make adjacent items partially visible in a CarouselView. The PeekAreaInsets is set to 100, exposing portions of the adjacent items. Data binding is used to retrieve the Monkeys collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\"\n              PeekAreaInsets=\"100\">\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Implement NotificationManagerService for Android (C#)\nDESCRIPTION: Implements the `INotificationManagerService` interface for Android. This class handles sending immediate and scheduled notifications, managing notification channels, and processing received notifications. It leverages Android-specific APIs for notification management, including `NotificationManagerCompat`, `AlarmManager`, and `PendingIntent`.  It handles creation of notification channel based on Android API level.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Android.Content;\nusing Android.Graphics;\nusing Android.OS;\nusing AndroidX.Core.App;\n\nnamespace LocalNotificationsDemo.Platforms.Android;\n\npublic class NotificationManagerService : INotificationManagerService\n{\n    const string channelId = \"default\";\n    const string channelName = \"Default\";\n    const string channelDescription = \"The default channel for notifications.\";\n\n    public const string TitleKey = \"title\";\n    public const string MessageKey = \"message\";\n\n    bool channelInitialized = false;\n    int messageId = 0;\n    int pendingIntentId = 0;\n\n    NotificationManagerCompat compatManager;\n\n    public event EventHandler NotificationReceived;\n\n    public static NotificationManagerService Instance { get; private set; }\n\n    public NotificationManagerService()\n    {\n        if (Instance == null)\n        {\n            CreateNotificationChannel();\n            compatManager = NotificationManagerCompat.From(Platform.AppContext);\n            Instance = this;\n        }\n    }\n\n    public void SendNotification(string title, string message, DateTime? notifyTime = null)\n    {\n        if (!channelInitialized)\n        {\n            CreateNotificationChannel();\n        }\n\n        if (notifyTime != null)\n        {\n            Intent intent = new Intent(Platform.AppContext, typeof(AlarmHandler));\n            intent.PutExtra(TitleKey, title);\n            intent.PutExtra(MessageKey, message);\n            intent.SetFlags(ActivityFlags.SingleTop | ActivityFlags.ClearTop);\n\n            var pendingIntentFlags = (Build.VERSION.SdkInt >= BuildVersionCodes.S)\n                ? PendingIntentFlags.CancelCurrent | PendingIntentFlags.Immutable\n                : PendingIntentFlags.CancelCurrent;\n\n            PendingIntent pendingIntent = PendingIntent.GetBroadcast(Platform.AppContext, pendingIntentId++, intent, pendingIntentFlags);\n            long triggerTime = GetNotifyTime(notifyTime.Value);\n            AlarmManager alarmManager = Platform.AppContext.GetSystemService(Context.AlarmService) as AlarmManager;\n            alarmManager.Set(AlarmType.RtcWakeup, triggerTime, pendingIntent);\n        }\n        else\n        {\n            Show(title, message);\n        }\n    }\n\n    public void ReceiveNotification(string title, string message)\n    {\n        var args = new NotificationEventArgs()\n        {\n            Title = title,\n            Message = message,\n        };\n        NotificationReceived?.Invoke(null, args);\n    }\n\n    public void Show(string title, string message)\n    {\n        Intent intent = new Intent(Platform.AppContext, typeof(MainActivity));\n        intent.PutExtra(TitleKey, title);\n        intent.PutExtra(MessageKey, message);\n        intent.SetFlags(ActivityFlags.SingleTop | ActivityFlags.ClearTop);\n\n        var pendingIntentFlags = (Build.VERSION.SdkInt >= BuildVersionCodes.S)\n            ? PendingIntentFlags.UpdateCurrent | PendingIntentFlags.Immutable\n            : PendingIntentFlags.UpdateCurrent;\n\n        PendingIntent pendingIntent = PendingIntent.GetActivity(Platform.AppContext, pendingIntentId++, intent, pendingIntentFlags);\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(Platform.AppContext, channelId)\n            .SetContentIntent(pendingIntent)\n            .SetContentTitle(title)\n            .SetContentText(message)\n            .SetLargeIcon(BitmapFactory.DecodeResource(Platform.AppContext.Resources, Resource.Drawable.dotnet_logo))\n            .SetSmallIcon(Resource.Drawable.message_small);\n\n        Notification notification = builder.Build();\n        compatManager.Notify(messageId++, notification);  \n    }\n\n    void CreateNotificationChannel()\n    {\n        // Create the notification channel, but only on API 26+.\n        if (Build.VERSION.SdkInt >= BuildVersionCodes.O)\n        {\n            var channelNameJava = new Java.Lang.String(channelName);\n            var channel = new NotificationChannel(channelId, channelNameJava, NotificationImportance.Default)\n            {\n                Description = channelDescription\n            };\n            // Register the channel\n            NotificationManager manager = (NotificationManager)Platform.AppContext.GetSystemService(Context.NotificationService);\n            manager.CreateNotificationChannel(channel);\n            channelInitialized = true;\n        }\n    }\n\n    long GetNotifyTime(DateTime notifyTime)\n    {\n        DateTime utcTime = TimeZoneInfo.ConvertTimeToUtc(notifyTime);\n        double epochDiff = (new DateTime(1970, 1, 1) - DateTime.MinValue).TotalSeconds;\n        long utcAlarmTime = utcTime.AddSeconds(-epochDiff).Ticks / 10000;\n        return utcAlarmTime; // milliseconds\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set up TwoPaneView in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the `TwoPaneView` as the root element on a page and add controls to `Pane1` and `Pane2`. The example shows how to set background colors and add labels within each pane.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/twopaneview.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<foldable:TwoPaneView x:Name=\"twoPaneView\">\n    <foldable:TwoPaneView.Pane1\n        BackgroundColor=\"#dddddd\">\n        <Label\n            Text=\"Hello, .NET MAUI!\"\n            SemanticProperties.HeadingLevel=\"Level1\"\n            FontSize=\"32\"\n            HorizontalOptions=\"Center\" />\n    </foldable:TwoPaneView.Pane1>\n    <foldable:TwoPaneView.Pane2>\n        <StackLayout BackgroundColor=\"{AppThemeBinding Light={StaticResource Secondary}, Dark={StaticResource Primary}}\">\n            <Label Text=\"Pane2 StackLayout\"/>\n        </StackLayout>\n    </foldable:TwoPaneView.Pane2>\n</foldable:TwoPaneView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider in XAML\nDESCRIPTION: This XAML code defines a Slider with a maximum value of 360. It also includes two Label controls: one for rotation and another to display the Slider's value. The ValueChanged event is wired up to the OnSliderValueChanged event handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"SliderDemos.BasicSliderXamlPage\"\n             Title=\"Basic Slider XAML\"\n             Padding=\"10, 0\">\n    <StackLayout>\n        <Label x:Name=\"rotatingLabel\"\n               Text=\"ROTATING TEXT\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Slider Maximum=\"360\"\n                ValueChanged=\"OnSliderValueChanged\" />\n        <Label x:Name=\"displayLabel\"\n               Text=\"(uninitialized)\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Consume SearchHandler in XAML\nDESCRIPTION: This code snippet demonstrates how to consume a subclassed SearchHandler in XAML by setting the Shell.SearchHandler attached property on a ContentPage. It sets the Placeholder, ShowsResults, and DisplayMemberName properties of the AnimalSearchHandler.  The xmlns:controls namespace must be properly declared to point to the location of the AnimalSearchHandler class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:Xaminals.Controls\">\n    <Shell.SearchHandler>\n        <controls:AnimalSearchHandler Placeholder=\"Enter search term\"\n                                      ShowsResults=\"true\"\n                                      DisplayMemberName=\"Name\" />\n    </Shell.SearchHandler>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Binding to Label's Text Length (XAML)\nDESCRIPTION: Demonstrates binding to the Length property of the Text property of a Label control. The source is a Label referenced by its name ('label').\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding x:DataType='Label',\n                      Source={x:Reference label},\n                      Path=Text.Length,\n                      StringFormat='The second Label has {0} characters'}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Keypad UI in XAML\nDESCRIPTION: This XAML snippet defines the UI for a decimal keypad using a Grid layout.  Buttons are bound to commands in the DecimalKeypadViewModel, with the DigitCommand sharing bindings via CommandParameter. The Entry's Text property is bound to a Label to display the input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.DecimalKeypadPage\"\n             Title=\"Decimal Keyboard\"\n             x:DataType=\"local:DecimalKeypadViewModel\">\n    <ContentPage.BindingContext>\n        <local:DecimalKeypadViewModel />\n    </ContentPage.BindingContext>\n    <ContentPage.Resources>\n        <Style TargetType=\"Button\">\n            <Setter Property=\"FontSize\" Value=\"32\" />\n            <Setter Property=\"BorderWidth\" Value=\"1\" />\n            <Setter Property=\"BorderColor\" Value=\"Black\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <Grid WidthRequest=\"240\"\n          HeightRequest=\"480\"\n          ColumnDefinitions=\"80, 80, 80\"\n          RowDefinitions=\"Auto, Auto, Auto, Auto, Auto, Auto\"\n          ColumnSpacing=\"2\"\n          RowSpacing=\"2\"\n          HorizontalOptions=\"Center\"\n          VerticalOptions=\"Center\">\n        <Label Text=\"{Binding Entry}\"\n               Grid.Row=\"0\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\"\n               Margin=\"0,0,10,0\"\n               FontSize=\"32\"\n               LineBreakMode=\"HeadTruncation\"\n               VerticalTextAlignment=\"Center\"\n               HorizontalTextAlignment=\"End\" />\n        <Button Text=\"CLEAR\"\n                Grid.Row=\"1\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"\n                Command=\"{Binding ClearCommand}\" />\n        <Button Text=\"&#x21E6;\"\n                Grid.Row=\"1\" Grid.Column=\"2\"\n                Command=\"{Binding BackspaceCommand}\" />\n        <Button Text=\"7\"\n                Grid.Row=\"2\" Grid.Column=\"0\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"7\" />\n        <Button Text=\"8\"\n                Grid.Row=\"2\" Grid.Column=\"1\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"8\" />        \n        <Button Text=\"9\"\n                Grid.Row=\"2\" Grid.Column=\"2\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"9\" />\n        <Button Text=\"4\"\n                Grid.Row=\"3\" Grid.Column=\"0\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"4\" />\n        <Button Text=\"5\"\n                Grid.Row=\"3\" Grid.Column=\"1\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"5\" />\n        <Button Text=\"6\"\n                Grid.Row=\"3\" Grid.Column=\"2\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"6\" />\n        <Button Text=\"1\"\n                Grid.Row=\"4\" Grid.Column=\"0\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"1\" />\n        <Button Text=\"2\"\n                Grid.Row=\"4\" Grid.Column=\"1\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"2\" />\n        <Button Text=\"3\"\n                Grid.Row=\"4\" Grid.Column=\"2\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"3\" />\n        <Button Text=\"0\"\n                Grid.Row=\"5\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\"0\" />\n        <Button Text=\"&#x00B7;\"\n                Grid.Row=\"5\" Grid.Column=\"2\"\n                Command=\"{Binding DigitCommand}\"\n                CommandParameter=\".\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Define ControlTemplate with ContentPresenter in XAML\nDESCRIPTION: This XAML snippet defines a ControlTemplate named `TealTemplate` which includes a `ContentPresenter`. The ContentPresenter serves as a placeholder where the content of the templated control or page will be inserted at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"TealTemplate\">\n    <Grid RowDefinitions=\"0.1*, 0.8*, 0.1*\">\n        <BoxView Color=\"Teal\" />\n        <Label Margin=\"20,0,0,0\"\n               Text=\"{TemplateBinding HeaderText}\"\n               ... />\n        <ContentPresenter Grid.Row=\"1\" />\n        <BoxView Grid.Row=\"2\"\n                 Color=\"Teal\" />\n        <Label x:Name=\"changeThemeLabel\"\n               Grid.Row=\"2\"\n               Margin=\"20,0,0,0\"\n               Text=\"Change Theme\"\n               ...>\n            <Label.GestureRecognizers>\n                <TapGestureRecognizer Tapped=\"OnChangeThemeLabelTapped\" />\n            </Label.GestureRecognizers>\n        </Label>\n        <controls:HyperlinkLabel Grid.Row=\"2\"\n                                 Margin=\"0,0,20,0\"\n                                 Text=\"Help\"\n                                 Url=\"https://learn.microsoft.com/dotnet/maui/\"\n                                 ... />\n    </Grid>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Icon in Image View (C#)\nDESCRIPTION: This C# code creates an Image view and sets its Source to a FontImageSource. It specifies the glyph, font family (platform-specific), and size.  The Glyph property takes the unicode character directly. The font family is set conditionally based on the platform using DeviceInfo.Platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image { BackgroundColor = Color.FromArgb(\"#D1D1D1\") };\nimage.Source = new FontImageSource\n{\n    Glyph = \"\\uf30c\",\n    FontFamily = DeviceInfo.Platform == DevicePlatform.iOS ? \"Ionicons\" : \"ionicons.ttf#\",\n    Size = 44\n};\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Message (C#)\nDESCRIPTION: This C# snippet demonstrates how to compose and send an SMS message using the ISms interface in .NET MAUI. It creates an SmsMessage object with optional text and recipients, then calls the ComposeAsync method to open the device's default SMS application with the message pre-populated.  Requires the Microsoft.Maui.ApplicationModel.Communication namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/sms.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar message = new SmsMessage(\"Hello World!\", new string[] { \"0123456789\" });\n\nawait Sms.Default.ComposeAsync(message);\n```\n\n----------------------------------------\n\nTITLE: Initializing Config Constants C#\nDESCRIPTION: Initializes static constants `ApiKey` and `BackendServiceEndpoint` in the `Config` class.  These values are placeholders for the actual API key and backend service endpoint, which should be replaced with the correct values. These configurations are central to connecting the application to the notification backend.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic static partial class Config\n{\n    static Config()\n    {\n        ApiKey = \"<your_api_key>\";\n        BackendServiceEndpoint = \"<your_api_app_url>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consume Attached Behavior in XAML\nDESCRIPTION: Demonstrates how to consume the `AttachedNumericValidationBehavior` in XAML by setting the `AttachBehavior` attached property on an Entry control. This enables the validation behavior on the Entry.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:BehaviorsDemos\">\n    <Entry Placeholder=\"Enter a System.Double\" local:AttachedNumericValidationBehavior.AttachBehavior=\"true\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Open File with Launcher (C#)\nDESCRIPTION: This C# code snippet writes text to a file and then uses the `ILauncher` interface to open the file. .NET MAUI automatically detects the file type (MIME) and opens the default app for that file type. The code uses `Path.Combine` to construct the file path, `File.WriteAllTextAsync` to write content to the file asynchronously, and `Launcher.Default.OpenAsync` to open the file with the associated application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/launcher.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstring text = \"Hello, World!\";\nstring filename = \"demo.txt\";\nstring localFilePath = Path.Combine(FileSystem.CacheDirectory, filename);\n\nawait File.WriteAllTextAsync(localFilePath, text);\n\nawait Launcher.Default.OpenAsync(new OpenFileRequest\n{\n    File = new AppModel.FileBase\n    {\n        FullPath = localFilePath\n    },\n    Title = \"Open demo.txt\"\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Notes with CollectionView in .NET MAUI XAML\nDESCRIPTION: This XAML snippet defines the layout for the AllNotesPage, using a CollectionView to display a list of notes.  It includes a ToolbarItem for adding new notes and binds the CollectionView to the 'Notes' property of the AllNotes model.  The ItemTemplate defines how each note is displayed, including the Text and Date properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:models=\"clr-namespace:Notes.Models\"\n             x:Class=\"Notes.Views.AllNotesPage\"\n             Title=\"Notes\">\n    <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Add\" Clicked=\"Add_Clicked\">\n            <ToolbarItem.IconImageSource>\n                <FontImageSource Font=\"{OnPlatform iOS=MaterialRegular, Android=MaterialRegular}\" Glyph=\"{x:Static models:AllNotes.AddIcon}\" Color=\"White\" />\n            </ToolbarItem.IconImageSource>\n        </ToolbarItem>\n    </ContentPage.ToolbarItems>\n\n    <CollectionView x:Name=\"notesCollection\"\n                        ItemsSource=\"{Binding Notes}\"\n                        SelectionMode=\"Single\"\n                        SelectionChanged=\"notesCollection_SelectionChanged\">\n        <CollectionView.ItemsLayout>\n            <LinearItemsLayout Orientation=\"Vertical\"/>\n        </CollectionView.ItemsLayout>\n        <CollectionView.ItemTemplate>\n            <DataTemplate>\n                <VerticalStackLayout Padding=\"10\">\n                    <Label Text=\"{Binding Text}\" FontSize=\"22\"/>\n                    <Label Text=\"{Binding Date}\" FontSize=\"12\" TextColor=\"Silver\"/>\n                </VerticalStackLayout>\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Create an inline DataTemplate in XAML\nDESCRIPTION: This XAML code demonstrates how to create an inline `DataTemplate` within a `CollectionView`. The `DataTemplate` defines a `Grid` layout with three `Label` controls bound to the `Name`, `Age`, and `Location` properties of the `Person` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView>\n    <CollectionView.ItemsSource>\n        <x:Array Type=\"{x:Type local:Person}\">\n            <local:Person Name=\"Steve\" Age=\"21\" Location=\"USA\" />\n            <local:Person Name=\"John\" Age=\"37\" Location=\"USA\" />\n            <local:Person Name=\"Tom\" Age=\"42\" Location=\"UK\" />\n            <local:Person Name=\"Lucas\" Age=\"29\" Location=\"Germany\" />\n            <local:Person Name=\"Tariq\" Age=\"39\" Location=\"UK\" />\n            <local:Person Name=\"Jane\" Age=\"30\" Location=\"USA\" />\n        </x:Array>\n    </CollectionView.ItemsSource>\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:Person\">\n            <Grid>\n                ...\n                <Label Text=\"{Binding Name}\" FontAttributes=\"Bold\" />\n                <Label Grid.Column=\"1\" Text=\"{Binding Age}\" />\n                <Label Grid.Column=\"2\" Text=\"{Binding Location}\" HorizontalTextAlignment=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: View-to-View Data Binding with Slider and Labels in XAML\nDESCRIPTION: This XAML snippet demonstrates how to bind the `Rotation` and `Text` properties of two `Label` views to the `Value` property of a `Slider` view using `x:Reference` and the `Binding` markup extension. The `StringFormat` property is also used to format the displayed value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.SliderBindingsPage\"\n             Title=\"Slider Bindings Page\"\n             x:DataType=\"Slider\">\n    <StackLayout>\n        <Label Text=\"ROTATION\"\n               BindingContext=\"{x:Reference slider}\"\n               Rotation=\"{Binding Path=Value}\"\n               FontAttributes=\"Bold\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Slider x:Name=\"slider\"\n                Maximum=\"360\"\n                VerticalOptions=\"Center\" />\n        <Label BindingContext=\"{x:Reference slider}\"\n               Text=\"{Binding Value, StringFormat='The angle is {0:F0} degrees'}\"\n               FontAttributes=\"Bold\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView Item Appearance with DataTemplate in C#\nDESCRIPTION: This snippet shows how to define the appearance of each item in a CollectionView using a DataTemplate in C# code.  It programmatically creates a Grid layout with an Image and two Labels, binding them to properties of the Monkey class (ImageUrl, Name, and Location).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView();\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n\ncollectionView.ItemTemplate = new DataTemplate(() =>\n{\n    Grid grid = new Grid { Padding = 10 };\n    grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });\n    grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });\n    grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });\n    grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });\n\n    Image image = new Image { Aspect = Aspect.AspectFill, HeightRequest = 60, WidthRequest = 60 };\n    image.SetBinding(Image.SourceProperty, static (Monkey monkey) => monkey.ImageUrl);\n\n    Label nameLabel = new Label { FontAttributes = FontAttributes.Bold };\n    nameLabel.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Name);\n\n    Label locationLabel = new Label { FontAttributes = FontAttributes.Italic, VerticalOptions = LayoutOptions.End };\n    locationLabel.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Location);\n\n    Grid.SetRowSpan(image, 2);\n\n    grid.Add(image);\n    grid.Add(nameLabel, 1, 0);\n    grid.Add(locationLabel, 1, 1);\n\n    return grid;\n});\n```\n\n----------------------------------------\n\nTITLE: Update Android Manifest for Browser Queries (XML)\nDESCRIPTION: This XML snippet configures the AndroidManifest.xml file to include the necessary queries for Android's package visibility requirements when targeting Android 11 (API 30) or higher.  It adds intent filters to allow the application to query for HTTP and HTTPS URL schemes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/open-browser.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"http\"/>\n  </intent>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"https\"/>\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid RowDefinitions and ColumnDefinitions using property elements in XAML\nDESCRIPTION: This example demonstrates how to define the row and column structure of a Grid layout in .NET MAUI using property elements.  The RowDefinitions and ColumnDefinitions properties, which are collections of RowDefinition and ColumnDefinition objects respectively, are set using the property element syntax. This is necessary because these properties require complex object instantiation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.GridDemoPage\"\n             Title=\"Grid Demo Page\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"100\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition Width=\"*\" />\n            <ColumnDefinition Width=\"100\" />\n        </Grid.ColumnDefinitions>\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid in C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically create a Grid, define its row and column structure, and add child views with specific row and column assignments. It utilizes RowDefinition and ColumnDefinition objects and their associated properties like Height and Width with GridUnitType. The Add method is used to add children, specifying their row and column positions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BasicGridPage : ContentPage\n{\n    public BasicGridPage()\n    {\n        Grid grid = new Grid\n        {\n            RowDefinitions =\n            {\n                new RowDefinition { Height = new GridLength(2, GridUnitType.Star) },\n                new RowDefinition(),\n                new RowDefinition { Height = new GridLength(100) }\n            },\n            ColumnDefinitions =\n            {\n                new ColumnDefinition(),\n                new ColumnDefinition()\n            }\n        };\n\n        // Row 0\n        // The BoxView and Label are in row 0 and column 0, and so only need to be added to the\n        // Grid to obtain the default row and column settings.\n        grid.Add(new BoxView\n        {\n            Color = Colors.Green\n        });\n        grid.Add(new Label\n        {\n            Text = \"Row 0, Column 0\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Center\n        });\n\n        // This BoxView and Label are in row 0 and column 1, which are specified as arguments\n        // to the Add method.\n        grid.Add(new BoxView\n        {\n            Color = Colors.Blue\n        }, 1, 0);\n        grid.Add(new Label\n        {\n            Text = \"Row 0, Column 1\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Center\n        }, 1, 0);\n\n        // Row 1\n        // This BoxView and Label are in row 1 and column 0, which are specified as arguments\n        // to the Add method overload.\n        grid.Add(new BoxView\n        {\n            Color = Colors.Teal\n        }, 0, 1);\n        grid.Add(new Label\n        {\n            Text = \"Row 1, Column 0\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Center\n        }, 0, 1);\n\n        // This BoxView and Label are in row 1 and column 1, which are specified as arguments\n        // to the Add method overload.\n        grid.Add(new BoxView\n        {\n            Color = Colors.Purple\n        }, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Defining TabbedPage with Navigation in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a TabbedPage with a NavigationPage as one of its tabs.  The NavigationPage contains a ContentPage (SchedulePage), enabling navigation within that tab. The TodayPage is a standard ContentPage and does not have navigation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/tabbedpage.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n            xmlns:local=\"clr-namespace:TabbedPageWithNavigationPage\"\n            x:Class=\"TabbedPageWithNavigationPage.MainPage\">\n    <local:TodayPage />\n    <NavigationPage Title=\"Schedule\"\n                    IconImageSource=\"schedule.png\">\n        <x:Arguments>\n            <local:SchedulePage />\n        </x:Arguments>\n    </NavigationPage>\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Get Cached Geolocation - C#\nDESCRIPTION: This C# code snippet demonstrates how to retrieve the device's last known location using the `IGeolocation.GetLastKnownLocationAsync` method. It checks if a cached location is available and, if so, displays its latitude and longitude. This provides a faster but potentially less accurate location fix.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n        private async Task GetCachedLocation()\n        {\n            try\n            {\n                var location = await Geolocation.Default.GetLastKnownLocationAsync();\n\n                if (location != null)\n                    UpdateLocationDisplay(location);\n            }\n            catch (Exception ex)\n            {\n                // Unable to get last known location.\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical StackLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a vertical StackLayout containing three Label objects. It showcases the use of the Margin, Padding, and Spacing properties to control the layout's appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout Margin=\"20,35,20,25\">\n    <Label Text=\"The StackLayout has its Margin property set, to control the rendering position of the StackLayout.\" />\n    <Label Text=\"The Padding property can be set to specify the distance between the StackLayout and its children.\" />\n    <Label Text=\"The Spacing property can be set to specify the distance between views in the StackLayout.\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Consuming and Defining Page-Level Resources in XAML\nDESCRIPTION: This XAML code shows how to consume application-level resources (PageMargin) and define page-level resources (implicit style for Button) within a ContentPage and StackLayout.  Resources are referenced using the StaticResource markup extension. Requires .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ResourceDictionaryDemo.MainPage\"\n             Title=\"Main page\">\n    <StackLayout Margin=\"{StaticResource PageMargin}\"\n                 Spacing=\"6\">\n        <StackLayout.Resources>\n            <!-- Implicit style -->\n            <Style TargetType=\"Button\">\n                <Setter Property=\"FontSize\" Value=\"14\" />\n                <Setter Property=\"BackgroundColor\" Value=\"#1976D2\" />\n                <Setter Property=\"TextColor\" Value=\"White\" />\n                <Setter Property=\"CornerRadius\" Value=\"5\" />\n            </Style>\n        </StackLayout.Resources>\n\n        <Label Text=\"This app demonstrates consuming resources that have been defined in resource dictionaries.\" />\n        <Button Text=\"Navigate\"\n                Clicked=\"OnNavigateButtonClicked\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configure RemainingItemsThreshold in XAML\nDESCRIPTION: This XAML code configures a CarouselView to load data incrementally. The RemainingItemsThreshold is set to 2, meaning the RemainingItemsThresholdReached event will fire when there are 2 items left to be displayed. The RemainingItemsThresholdReachedCommand is bound to the LoadMoreDataCommand in the ViewModel, enabling incremental data loading.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Animals}\"\n              RemainingItemsThreshold=\"2\"\n              RemainingItemsThresholdReached=\"OnCarouselViewRemainingItemsThresholdReached\"\n              RemainingItemsThresholdReachedCommand=\"{Binding LoadMoreDataCommand}\">\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Applying Global Style to Buttons in XAML\nDESCRIPTION: This example demonstrates how to apply a globally defined style to Button objects within a ContentPage. The Style property of each Button is set to a StaticResource referencing the \"buttonStyle\" defined in the application's resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <StackLayout>\n        <Button Text=\"These buttons\"\n                Style=\"{StaticResource buttonStyle}\" />\n        <Button Text=\"are demonstrating\"\n                Style=\"{StaticResource buttonStyle}\" />\n        <Button Text=\"application styles\"\n                Style=\"{StaticResource buttonStyle}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Implementing MauiVideoPlayer for Android\nDESCRIPTION: This code defines the `MauiVideoPlayer` class, which encapsulates the Android `VideoView`. It inherits from `CoordinatorLayout` and configures the `VideoView` within a `RelativeLayout` to manage layout and sizing. The constructor also subscribes to the `VideoView.Prepared` event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        MediaController _mediaController;\n        bool _isPrepared;\n        Context _context;\n        Video _video;\n\n        public MauiVideoPlayer(Context context, Video video) : base(context)\n        {\n            _context = context;\n            _video = video;\n\n            SetBackgroundColor(Color.Black);\n\n            // Create a RelativeLayout for sizing the video\n            RelativeLayout relativeLayout = new RelativeLayout(_context)\n            {\n                LayoutParameters = new CoordinatorLayout.LayoutParams(LayoutParams.MatchParent, LayoutParams.MatchParent)\n                {\n                    Gravity = (int)GravityFlags.Center\n                }\n            };\n\n            // Create a VideoView and position it in the RelativeLayout\n            _videoView = new VideoView(context)\n            {\n                LayoutParameters = new RelativeLayout.LayoutParams(LayoutParams.MatchParent, LayoutParams.MatchParent)\n            };\n\n            // Add to the layouts\n            relativeLayout.AddView(_videoView);\n            AddView(relativeLayout);\n\n            // Handle events\n            _videoView.Prepared += OnVideoViewPrepared;\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clear All Preferences in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to clear all preferences using the Preferences.Clear method in .NET MAUI. It removes all preferences stored in the default or specified container. No external dependencies beyond the .NET MAUI framework. Use with caution as it permanently deletes all stored preferences.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/preferences.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPreferences.Clear();\n```\n\n----------------------------------------\n\nTITLE: Page Constructor Injection C#\nDESCRIPTION: This code snippet demonstrates constructor injection for a page class. The `MainPage` class requires a `MainPageViewModel` instance as a dependency, which is injected through its constructor.  This approach enables the page to use the view model without directly instantiating it, promoting loose coupling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage(MainPageViewModel viewModel)\n{\n    InitializeComponent();\n\n    BindingContext = viewModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Load Single Note Method C#\nDESCRIPTION: This static method loads a single note from a file, creating a new `Note` instance and populating its properties with the file's content and modification date. It takes the filename as input, reads the file using `File.ReadAllTextAsync`, and handles exceptions if the file is not found.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\n\nnamespace Notes.Models;\n\npublic partial class Note\n{\n    public static async Task<Note> Load(string filename)\n    {\n        string filepath = Path.Combine(FileSystem.AppDataDirectory, filename);\n\n        if (!File.Exists(filepath))\n        {\n            throw new FileNotFoundException(\"Note file not found.\", filename);\n        }\n\n        Note note = new() {\n            Filename = filename,\n            Text = await File.ReadAllTextAsync(filepath),\n            Date = File.GetLastWriteTime(filepath)\n        };\n        return note;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding CollectionView ItemsSource in C#\nDESCRIPTION: This snippet shows how to populate a CollectionView in C# code by binding its ItemsSource property to a collection in the viewmodel. The MonkeysViewModel's Monkeys property (an IEnumerable) is bound to the ItemsSource. The viewmodel must expose the Monkeys property as an IEnumerable collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView();\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Using ImageSource and ContentLayout in XAML for Button\nDESCRIPTION: This XAML snippet shows how to set the ImageSource and ContentLayout properties of a .NET MAUI Button. The ImageSource displays a bitmap on the button, and the ContentLayout specifies the position of the image relative to the text and the spacing between them. It uses the ImageSource property to load the bitmap and ContentLayout to arrange it.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Button text\"\n        ImageSource=\"button.png\"\n        ContentLayout=\"Right, 20\" />\n```\n\n----------------------------------------\n\nTITLE: Load Image from Stream - C#\nDESCRIPTION: This C# code snippet demonstrates how to load an image from a stream using the `ImageSource.FromStream` method. It creates a new `Image` object and sets its `Source` property to an `ImageSource` created from the stream. Image caching is disabled on Android when loading an image from a stream using this method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nImage image = new Image\n{\n    Source = ImageSource.FromStream(() => stream)\n};\n```\n\n----------------------------------------\n\nTITLE: Configure RemainingItemsThreshold in C#\nDESCRIPTION: This C# code configures a CarouselView to load data incrementally. The RemainingItemsThreshold is set to 2, meaning the RemainingItemsThresholdReached event will fire when there are 2 items left to be displayed. The RemainingItemsThresholdReached event is handled by the OnCollectionViewRemainingItemsThresholdReached method and the ItemsSource is bound to Animals property from the ViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    RemainingItemsThreshold = 2\n};\ncarouselView.RemainingItemsThresholdReached += OnCollectionViewRemainingItemsThresholdReached;\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (AnimalsViewModel vm) => vm.Animals);\n```\n\n----------------------------------------\n\nTITLE: Using x:Type Markup Extension in XAML\nDESCRIPTION: This XAML code demonstrates the use of the `x:Type` markup extension to instantiate .NET MAUI objects dynamically. It creates three buttons, each bound to a `Command` and passing a different view type (`Slider`, `Stepper`, `Switch`) as the `CommandParameter`. The `CreateCommand` in the code-behind then instantiates these types and adds them to the `StackLayout`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MarkupExtensions\"\n             x:Class=\"MarkupExtensions.TypeDemoPage\"\n             Title=\"x:Type Demo\"\n             x:DataType=\"local:TypeDemoPage\">\n    <StackLayout x:Name=\"stackLayout\"\n                 Padding=\"10, 0\">\n        <Button Text=\"Create a Slider\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                Command=\"{Binding CreateCommand}\"\n                CommandParameter=\"{x:Type Slider}\" />\n        <Button Text=\"Create a Stepper\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                Command=\"{Binding CreateCommand}\"\n                CommandParameter=\"{x:Type Stepper}\" />\n        <Button Text=\"Create a Switch\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                Command=\"{Binding CreateCommand}\"\n                CommandParameter=\"{x:Type Switch}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Override OnAppLinkRequestReceived in App Class (C#)\nDESCRIPTION: This code snippet demonstrates how to override the `OnAppLinkRequestReceived` method in the `App` class to handle the app link URI. The overridden method displays an alert with the URI received. In practice, this method should navigate the user directly to the content represented by the URI.  It uses `Dispatcher.DispatchAsync` to ensure the UI updates are performed on the main thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNamespace;\n\npublic partial class App : Application\n{\n    ...\n\n    protected override async void OnAppLinkRequestReceived(Uri uri)\n    {\n        base.OnAppLinkRequestReceived(uri);\n\n        // Show an alert to test that the app link was received.\n        await Dispatcher.DispatchAsync(async () =>\n        {\n            await Windows[0].Page!.DisplayAlertAsync(\"App link received\", uri.ToString(), \"OK\");\n        });\n\n        Console.WriteLine(\"App link: \" + uri.ToString());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting device idiom-specific properties using OnIdiom in XAML\nDESCRIPTION: This code snippet demonstrates how to use the OnIdiom markup extension in XAML to set different values for properties based on the device idiom. It sets the Color, WidthRequest, and HeightRequest of a BoxView differently for phone, tablet, and desktop devices, while also providing default values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView Color=\"{OnIdiom Yellow, Phone=Red, Tablet=Green, Desktop=Blue}\"\n         WidthRequest=\"{OnIdiom 100, Phone=200, Tablet=300, Desktop=400}\"\n         HeightRequest=\"{OnIdiom 100, Phone=200, Tablet=300, Desktop=400}\"\n         HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Instantiating List<Monkey> with custom object in .NET MAUI XAML\nDESCRIPTION: This example demonstrates how to instantiate a `List<Monkey>` in .NET MAUI XAML, where `Monkey` is a custom class. It uses the `x:TypeArguments` directive with the custom `models` namespace.  The `CollectionView.ItemsSource` is set to this list, which is populated with `Monkey` objects.  A `DataTemplate` is used to define how each `Monkey` is displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/generics.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:models=\"clr-namespace:GenericsDemo.Models\"\n             xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=netstandard\"\n             ...>\n    <CollectionView>\n        <CollectionView.ItemsSource>\n            <scg:List x:TypeArguments=\"models:Monkey\">\n                <models:Monkey Name=\"Baboon\"\n                               Location=\"Africa and Asia\"\n                               ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Papio_anubis_%28Serengeti%2C_2009%29.jpg/200px-Papio_anubis_%28Serengeti%2C_2009%29.jpg\" />\n                <models:Monkey Name=\"Capuchin Monkey\"\n                               Location=\"Central and South America\"\n                               ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/Capuchin_Costa_Rica.jpg/200px-Capuchin_Costa_Rica.jpg\" />\n                <models:Monkey Name=\"Blue Monkey\"\n                               Location=\"Central and East Africa\"\n                               ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/BlueMonkey.jpg/220px-BlueMonkey.jpg\" />\n            </scg:List>\n        </CollectionView.ItemsSource>\n        <CollectionView.ItemTemplate>\n            <DataTemplate x:DataType=\"models:Monkey\">\n                <Grid Padding=\"10\">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height=\"Auto\" />\n                        <RowDefinition Height=\"Auto\" />\n                    </Grid.RowDefinitions>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"Auto\" />\n                        <ColumnDefinition Width=\"Auto\" />\n                    </Grid.ColumnDefinitions>\n                    <Image Grid.RowSpan=\"2\"\n                           Source=\"{Binding ImageUrl}\"\n                           Aspect=\"AspectFill\"\n                           HeightRequest=\"60\"\n                           WidthRequest=\"60\" />\n                    <Label Grid.Column=\"1\"\n                           Text=\"{Binding Name}\"\n                           FontAttributes=\"Bold\" />\n                    <Label Grid.Row=\"1\"\n                           Grid.Column=\"1\"\n                           Text=\"{Binding Location}\"\n                           FontAttributes=\"Italic\"\n                           VerticalOptions=\"End\" />\n                </Grid>\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Update Activity Attribute in Android MainActivity C#\nDESCRIPTION: This C# code snippet shows how to update the `[Activity(...)]` attribute on the `MainActivity` class in *Platforms/Android* to include all the `ConfigurationChanges` options required for reliable dual-screen support.  These values are required so that configuration changes and span state can be more reliably reported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/twopaneview.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nConfigurationChanges = ConfigChanges.Orientation | ConfigChanges.ScreenSize\n    | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.UiMode\n```\n\n----------------------------------------\n\nTITLE: Converting .NET MAUI to iOS UIView (net-maui-8.0)\nDESCRIPTION: This code shows how to convert a .NET MAUI control to a UIKit.UIView object for iOS using the `ToPlatformEmbedded` method.  Width and height constraints are set on the UIView to enable user interaction. Requires referencing the .NET MAUI class library.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nvar mauiView = new MyMauiContent();\nUIView nativeView = mauiView.ToPlatformEmbedded(context);\nnativeView.WidthAnchor.ConstraintEqualTo(View.Frame.Width).Active = true;\nnativeView.HeightAnchor.ConstraintEqualTo(500).Active = true;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstackView.AddArrangedSubView(nativeView);\n```\n\n----------------------------------------\n\nTITLE: Remove All Values from Secure Storage - C#\nDESCRIPTION: This C# code snippet demonstrates how to remove all values from secure storage using the `SecureStorage.RemoveAll` method. This method clears all stored keys and their associated values. The `RemoveAll` method is synchronous.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSecureStorage.RemoveAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing IMultiValueConverter in C#\nDESCRIPTION: This code snippet shows how to implement the IMultiValueConverter interface in C#. The AllTrueMultiConverter converts an array of boolean values to a single boolean value indicating if all inputs are true. The ConvertBack method returns an array of true values if the input is true, or null otherwise.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AllTrueMultiConverter : IMultiValueConverter\n{\n    public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)\n    {\n        if (values == null || !targetType.IsAssignableFrom(typeof(bool)))\n        {\n            return false;\n            // Alternatively, return BindableProperty.UnsetValue to use the binding FallbackValue\n        }\n\n        foreach (var value in values)\n        {\n            if (!(value is bool b))\n            {\n                return false;\n                // Alternatively, return BindableProperty.UnsetValue to use the binding FallbackValue\n            }\n            else if (!b)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)\n    {\n        if (!(value is bool b) || targetTypes.Any(t => !t.IsAssignableFrom(typeof(bool))))\n        {\n            // Return null to indicate conversion back is not possible\n            return null;\n        }\n\n        if (b)\n        {\n            return targetTypes.Select(t => (object)true).ToArray();\n        }\n        else\n        {\n            // Can't convert back from false because of ambiguity\n            return null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke JavaScript Method with Void Return (No Generic)\nDESCRIPTION: This C# code shows how to invoke a JavaScript method that doesn't return a value, by not specifying the generic argument to `InvokeJavaScriptAsync`. It's necessary to supply JSON serialization information for the return type even though it isn't used.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nawait hybridWebView.InvokeJavaScriptAsync(\n         \"javaScriptWithParamsAndVoidReturn\",  // JavaScript method name\n         HybridSampleJSContext.Default.Double, // JSON serialization info for return type\n         [x, y], // Parameter values\n         [HybridSampleJSContext.Default.Double, HybridSampleJSContext.Default.Double]); // JSON serialization info for each parameter\n```\n\n----------------------------------------\n\nTITLE: Auto-size Editor - MAUI XAML\nDESCRIPTION: Illustrates how to enable auto-sizing of the Editor to accommodate its content by setting the AutoSize property to TextChanges. HeightRequest must not be set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor Text=\"Enter text here\"\n        AutoSize=\"TextChanges\" />\n```\n\n----------------------------------------\n\nTITLE: Basic HTML for .NET MAUI HybridWebView\nDESCRIPTION: This HTML file provides the main UI for a .NET MAUI HybridWebView. It includes JavaScript functions to interact with the .NET MAUI application, such as sending messages to C# and invoking C# methods. The JavaScript functions use the `window.HybridWebView` object to communicate with the .NET MAUI backend.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\n<html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>\n    <link rel=\"icon\" href=\"data:,\">\n    <link rel=\"stylesheet\" href=\"styles/app.css\">\n    <script src=\"scripts/HybridWebView.js\"></script>\n    <script>\n        function LogMessage(msg) {\n            var messageLog = document.getElementById(\"messageLog\");\n            messageLog.value += '\\r\\n' + msg;\n        }\n\n        window.addEventListener(\n            \"HybridWebViewMessageReceived\",\n            function (e) {\n                LogMessage(\"Raw message: \" + e.detail.message);\n            });\n\n        function AddNumbers(a, b) {\n            var result = {\n                \"result\": a + b,\n                \"operationName\": \"Addition\"\n            };\n            return result;\n        }\n\n        var count = 0;\n\n        async function EvaluateMeWithParamsAndAsyncReturn(s1, s2) {\n            const response = await fetch(\"/asyncdata.txt\");\n            if (!response.ok) {\n                throw new Error(`HTTP error: ${response.status}`);\n            }\n            var jsonData = await response.json();\n\n            jsonData[s1] = s2;\n\n            const msg = 'JSON data is available: ' + JSON.stringify(jsonData);\n            window.HybridWebView.SendRawMessage(msg)\n\n            return jsonData;\n        }\n\n        async function InvokeDoSyncWork() {\n            LogMessage(\"Invoking DoSyncWork\");\n            await window.HybridWebView.InvokeDotNet('DoSyncWork');\n            LogMessage(\"Invoked DoSyncWork\");\n        }\n\n        async function InvokeDoSyncWorkParams() {\n            LogMessage(\"Invoking DoSyncWorkParams\");\n            await window.HybridWebView.InvokeDotNet('DoSyncWorkParams', [123, 'hello']);\n            LogMessage(\"Invoked DoSyncWorkParams\");\n        }\n\n        async function InvokeDoSyncWorkReturn() {\n            LogMessage(\"Invoking DoSyncWorkReturn\");\n            const retValue = await window.HybridWebView.InvokeDotNet('DoSyncWorkReturn');\n            LogMessage(\"Invoked DoSyncWorkReturn, return value: \" + retValue);\n        }\n\n        async function InvokeDoSyncWorkParamsReturn() {\n            LogMessage(\"Invoking DoSyncWorkParamsReturn\");\n            const retValue = await window.HybridWebView.InvokeDotNet('DoSyncWorkParamsReturn', [123, 'hello']);\n            LogMessage(\"Invoked DoSyncWorkParamsReturn, return value: message=\" + retValue.Message + \", value=\" + retValue.Value);\n        }\n\n        async function InvokeDoAsyncWork() {\n            LogMessage(\"Invoking DoAsyncWork\");\n            await window.HybridWebView.InvokeDotNet('DoAsyncWork');\n            LogMessage(\"Invoked DoAsyncWork\");\n        }\n\n        async function InvokeDoAsyncWorkParams() {\n            LogMessage(\"Invoking DoAsyncWorkParams\");\n            await window.HybridWebView.InvokeDotNet('DoAsyncWorkParams', [123, 'hello']);\n            LogMessage(\"Invoked DoAsyncWorkParams\");\n        }\n\n        async function InvokeDoAsyncWorkReturn() {\n            LogMessage(\"Invoking DoAsyncWorkReturn\");\n            const retValue = await window.HybridWebView.InvokeDotNet('DoAsyncWorkReturn');\n            LogMessage(\"Invoked DoAsyncWorkReturn, return value: \" + retValue);\n        }\n\n        async function InvokeDoAsyncWorkParamsReturn() {\n            LogMessage(\"Invoking DoAsyncWorkParamsReturn\");\n            const retValue = await window.HybridWebView.InvokeDotNet('DoAsyncWorkParamsReturn', [123, 'hello']);\n            LogMessage(\"Invoked DoAsyncWorkParamsReturn, return value: message=\" + retValue.Message + \", value=\" + retValue.Value);\n        }                \n\n    </script>\n</head>\n<body>\n    <div>\n        Hybrid sample!\n    </div>\n    <div>\n        <button onclick=\"window.HybridWebView.SendRawMessage('Message from JS! ' + (count++))\">Send message to C#</button>\n    </div>\n    <div>\n        <button onclick=\"InvokeDoSyncWork()\">Call C# sync method (no params)</button>\n        <button onclick=\"InvokeDoSyncWorkParams()\">Call C# sync method (params)</button>\n        <button onclick=\"InvokeDoSyncWorkReturn()\">Call C# method (no params) and get simple return value</button>\n        <button onclick=\"InvokeDoSyncWorkParamsReturn()\">Call C# method (params) and get complex return value</button>\n    </div>\n    <div>\n        <button onclick=\"InvokeDoAsyncWork()\">Call C# async method (no params)</button>\n        <button onclick=\"InvokeDoAsyncWorkParams()\">Call C# async method (params)</button>\n        <button onclick=\"InvokeDoAsyncWorkReturn()\">Call C# async method (no params) and get simple return value</button>\n        <button onclick=\"InvokeDoAsyncWorkParamsReturn()\">Call C# async method (params) and get complex return value</button>\n    </div>            \n    <div>\n        Log: <textarea readonly id=\"messageLog\" style=\"width: 80%; height: 10em;\"></textarea>\n    </div>\n    <div>\n        Consider checking out this PDF: <a href=\"docs/sample.pdf\">sample.pdf</a>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menus in CarouselView with SwipeView (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to add context menu items to a CarouselView using the SwipeView. It defines SwipeItems for both the top and bottom swipe directions, each with a Text, IconImageSource, BackgroundColor, Command, and CommandParameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView x:Name=\"carouselView\"\n              ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <StackLayout>\n                    <Border Stroke=\"DarkGray\"\n                            StrokeShape=\"RoundRectangle 5\"\n                            Margin=\"20\"\n                            Padding=\"20\"\n                            HeightRequest=\"360\"\n                            HorizontalOptions=\"Center\"\n                            VerticalOptions=\"Center\">\n                        <SwipeView>\n                            <SwipeView.TopItems>\n                                <SwipeItems>\n                                    <SwipeItem Text=\"Favorite\"\n                                               IconImageSource=\"favorite.png\"\n                                               BackgroundColor=\"LightGreen\"\n                                               Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=FavoriteCommand}\"\n                                               CommandParameter=\"{Binding}\" />\n                                </SwipeItems>\n                            </SwipeView.TopItems>\n                            <SwipeView.BottomItems>\n                                <SwipeItems>\n                                    <SwipeItem Text=\"Delete\"\n                                               IconImageSource=\"delete.png\"\n                                               BackgroundColor=\"LightPink\"\n                                               Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=DeleteCommand}\"\n                                               CommandParameter=\"{Binding}\" />\n                                </SwipeItems>\n                            </SwipeView.BottomItems>\n                            <StackLayout>\n                                <!-- Define item appearance -->\n                            </StackLayout>\n                        </SwipeView>\n                    </Border>\n            </StackLayout>\n        </DataTemplate>\n    </CarouselView.ItemTemplate>\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Handle TextChanged Event - MAUI C#\nDESCRIPTION: Illustrates how to handle the TextChanged event of the Editor, accessing the old and new text values through the TextChangedEventArgs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnEditorTextChanged(object sender, TextChangedEventArgs e)\n{\n    string oldText = e.OldTextValue;\n    string newText = e.NewTextValue;\n    string myText = editor.Text;\n}\n```\n\n----------------------------------------\n\nTITLE: Vibrate the device - C#\nDESCRIPTION: This C# code snippet demonstrates how to vibrate the device for a random duration between one and seven seconds using the `IVibration.Vibrate(System.TimeSpan)` method.  It uses `TimeSpan.FromSeconds` to create a `TimeSpan` object representing the vibration duration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/vibrate.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTimeSpan vibrationLength = TimeSpan.FromSeconds(Random.Shared.Next(1, 7));\n\nVibration.Default.Vibrate(vibrationLength);\n```\n\n----------------------------------------\n\nTITLE: Pinch To Zoom Container C#\nDESCRIPTION: This C# snippet defines the PinchToZoomContainer class, which is a ContentView that handles pinch gestures to zoom its content. It calculates the scale factor and applies translation to the content based on the pinch gesture's scale and origin. The implementation includes handling for the started, running, and completed states of the gesture.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pinch.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PinchToZoomContainer : ContentView\n{\n    double currentScale = 1;\n    double startScale = 1;\n    double xOffset = 0;\n    double yOffset = 0;\n\n    public PinchToZoomContainer()\n    {\n        PinchGestureRecognizer pinchGesture = new PinchGestureRecognizer();\n        pinchGesture.PinchUpdated += OnPinchUpdated;\n        GestureRecognizers.Add(pinchGesture);\n    }\n\n    void OnPinchUpdated(object sender, PinchGestureUpdatedEventArgs e)\n    {\n        if (e.Status == GestureStatus.Started)\n        {\n            // Store the current scale factor applied to the wrapped user interface element,\n            // and zero the components for the center point of the translate transform.\n            startScale = Content.Scale;\n            Content.AnchorX = 0;\n            Content.AnchorY = 0;\n        }\n        if (e.Status == GestureStatus.Running)\n        {\n            // Calculate the scale factor to be applied.\n            currentScale += (e.Scale - 1) * startScale;\n            currentScale = Math.Max(1, currentScale);\n\n            // The ScaleOrigin is in relative coordinates to the wrapped user interface element,\n            // so get the X pixel coordinate.\n            double renderedX = Content.X + xOffset;\n            double deltaX = renderedX / Width;\n            double deltaWidth = Width / (Content.Width * startScale);\n            double originX = (e.ScaleOrigin.X - deltaX) * deltaWidth;\n\n            // The ScaleOrigin is in relative coordinates to the wrapped user interface element,\n            // so get the Y pixel coordinate.\n            double renderedY = Content.Y + yOffset;\n            double deltaY = renderedY / Height;\n            double deltaHeight = Height / (Content.Height * startScale);\n            double originY = (e.ScaleOrigin.Y - deltaY) * deltaHeight;\n\n            // Calculate the transformed element pixel coordinates.\n            double targetX = xOffset - (originX * Content.Width) * (currentScale - startScale);\n            double targetY = yOffset - (originY * Content.Height) * (currentScale - startScale);\n\n            // Apply translation based on the change in origin.\n            Content.TranslationX = Math.Clamp(targetX, -Content.Width * (currentScale - 1), 0);\n            Content.TranslationY = Math.Clamp(targetY, -Content.Height * (currentScale - 1), 0);\n\n            // Apply scale factor\n            Content.Scale = currentScale;\n        }\n        if (e.Status == GestureStatus.Completed)\n        {\n            // Store the translation delta's of the wrapped user interface element.\n            xOffset = Content.TranslationX;\n            yOffset = Content.TranslationY;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting WebView on Mac Catalyst - C#\nDESCRIPTION: This code snippet demonstrates how to enable inspection of WebView content using Safari developer tools on Mac Catalyst. It appends to the property mapper for the WebViewHandler to set the Inspectable property of the PlatformView to true when running on Mac Catalyst 16.6 or later.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n#if MACCATALYST\n        Microsoft.Maui.Handlers.WebViewHandler.Mapper.AppendToMapping(\"Inspect\", (handler, view) =>\n        {\n            if (OperatingSystem.IsMacCatalystVersionAtLeast(16, 6))\n                handler.PlatformView.Inspectable = true;\n        });\n#endif\n```\n\n----------------------------------------\n\nTITLE: Transform CSS in .NET MAUI\nDESCRIPTION: Sets the transform for .NET MAUI VisualElement. Valid values are none, rotate, rotateX, rotateY, scale, scaleX, scaleY, translate, translateX, translateY, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_54\n\nLANGUAGE: CSS\nCODE:\n```\ntransform: rotate(180), scaleX(2.5);\n```\n\n----------------------------------------\n\nTITLE: Implementing BackspaceCommand\nDESCRIPTION: This C# snippet implements the BackspaceCommand.  The execute function removes the last character from the Entry, ensuring it remains \"0\" if it becomes empty. The canExecute function enables the command only if the entry's length is greater than 1 or is not equal to \"0\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DecimalKeypadViewModel : INotifyPropertyChanged\n{\n    ···\n    public DecimalKeypadViewModel()\n    {\n        ···\n        BackspaceCommand = new Command(\n            execute: () =>\n            {\n                Entry = Entry.Substring(0, Entry.Length - 1);\n                if (Entry == \"\")\n                {\n                    Entry = \"0\";\n                }\n                RefreshCanExecutes();\n            },\n            canExecute: () =>\n            {\n                return Entry.Length > 1 || Entry != \"0\";\n            });\n        ···\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Monitor Asset Pack Download Progress C#\nDESCRIPTION: This event handler monitors the download progress of an asset pack by checking the `AssetPackStatus`. It logs the download percentage and handles different states such as `Downloading`, `Completed`, and `WaitingForWifi`. Requires the Xamarin.Google.Android.Play.Core.AssetPacks.Model namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Xamarin.Google.Android.Play.Core.AssetPacks.Model;\n\nvoid Listener_StateUpdate(object? sender, AssetPackStateUpdateListenerWrapper.AssetPackStateEventArgs e)\n{\n    var status = e.State.Status();\n    switch (status)\n    {\n        case AssetPackStatus.Downloading:\n            long downloaded = e.State.BytesDownloaded();\n            long totalSize = e.State.TotalBytesToDownload();\n            double percent = 100.0 * downloaded / totalSize;\n            Android.Util.Log.Info (\"Listener_StateUpdate\", $\"Downloading {percent}\");\n            break;\n        case AssetPackStatus.Completed:\n            break;\n        case AssetPackStatus.WaitingForWifi:\n                assetPackManager.ShowConfirmationDialog(this);\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Image to a .NET MAUI Project File\nDESCRIPTION: This XML snippet demonstrates how to include an image in a .NET MAUI project by adding a `<MauiImage>` item to the `<ItemGroup>`. The `Include` attribute specifies the path to the image file relative to the project directory.  The build action of the image is automatically set to `MauiImage` when the image is added to the *Resources\\Images* folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/images.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiImage Include=\"Resources\\Images\\logo.svg\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Nesting MultiBinding Objects XAML\nDESCRIPTION: This XAML shows how to nest MultiBinding objects to perform complex logical operations. The outer MultiBinding's Converter property is set to AnyTrueMultiConverter, while the inner MultiBinding's Converter property is set to AllTrueMultiConverter.  The converters combine the boolean results of the bindings to determine the final value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.NestedMultiBindingPage\"\n             Title=\"Nested MultiBinding demo\"\n             x:DataType=\"local:GroupViewModel\">\n\n    <ContentPage.Resources>\n        <local:AllTrueMultiConverter x:Key=\"AllTrueConverter\" />\n        <local:AnyTrueMultiConverter x:Key=\"AnyTrueConverter\" />\n        <local:InverterConverter x:Key=\"InverterConverter\" />\n    </ContentPage.Resources>\n\n    <CheckBox>\n        <CheckBox.IsChecked>\n            <MultiBinding Converter=\"{StaticResource AnyTrueConverter}\">\n                <MultiBinding Converter=\"{StaticResource AllTrueConverter}\">\n                    <Binding Path=\"Employee.IsOver16\" />\n                    <Binding Path=\"Employee.HasPassedTest\" />\n                    <Binding Path=\"Employee.IsSuspended\" Converter=\"{StaticResource InverterConverter}\" />                        \n                </MultiBinding>\n                <Binding Path=\"Employee.IsMonarch\" />\n            </MultiBinding>\n        </CheckBox.IsChecked>\n    </CheckBox>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Localizing App Name - iOS/MacCatalyst Text\nDESCRIPTION: This text snippet demonstrates how to define a localized app name for iOS and Mac Catalyst using a `InfoPlist.strings` file in the `<language>.lproj` folder. The `CFBundleDisplayName` key is set to the translated app name (French in this case). This file is added with a build action of **BundleResource**.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n/* French */\nCFBundleDisplayName=\"Maisons\";\n```\n\n----------------------------------------\n\nTITLE: Display a simple prompt in C#\nDESCRIPTION: This code snippet demonstrates how to display a simple prompt using the `DisplayPromptAsync` method in .NET MAUI. It takes a title and a message as arguments and returns the user's input as a string, or null if canceled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pop-ups.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring result = await DisplayPromptAsync(\"Question 1\", \"What's your name?\");\n```\n\n----------------------------------------\n\nTITLE: Defining Flyout Header with DataTemplate (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to define the flyout header's appearance using a DataTemplate assigned to the Shell.FlyoutHeaderTemplate property in a .NET MAUI Shell application.  The DataTemplate contains a Grid with an Image and a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <Shell.FlyoutHeaderTemplate>\n        <DataTemplate>\n            <Grid BackgroundColor=\"Black\"\n                  HeightRequest=\"200\">\n                <Image Aspect=\"AspectFill\"\n                       Source=\"store.jpg\"\n                       Opacity=\"0.6\" />\n                <Label Text=\"Animals\"\n                       TextColor=\"White\"\n                       FontAttributes=\"Bold\"\n                       HorizontalTextAlignment=\"Center\"\n                       VerticalTextAlignment=\"Center\" />\n            </Grid>            \n        </DataTemplate>\n    </Shell.FlyoutHeaderTemplate>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation Behavior C#\nDESCRIPTION: This snippet implements a behavior that validates if the input in an `Entry` control is a valid `double`. It changes the text color to red if the input is not a valid number.  It attaches and detaches the `TextChanged` event handler to the Entry control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NumericValidationBehavior : Behavior<Entry>\n{\n    protected override void OnAttachedTo(Entry entry)\n    {\n        entry.TextChanged += OnEntryTextChanged;\n        base.OnAttachedTo(entry);\n    }\n\n    protected override void OnDetachingFrom(Entry entry)\n    {\n        entry.TextChanged -= OnEntryTextChanged;\n        base.OnDetachingFrom(entry);\n    }\n\n    void OnEntryTextChanged(object sender, TextChangedEventArgs args)\n    {\n        double result;\n        bool isValid = double.TryParse(args.NewTextValue, out result);\n        ((Entry)sender).TextColor = isValid ? Colors.Black : Colors.Red;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemsSource Binding XAML\nDESCRIPTION: This XAML snippet demonstrates how to populate a CarouselView with data using data binding. It binds the ItemsSource property of the CarouselView to the Monkeys property of the connected viewmodel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\" />\n```\n\n----------------------------------------\n\nTITLE: Set ListView CachingStrategy in XAML\nDESCRIPTION: Demonstrates setting the `CachingStrategy` property of a ListView in XAML to `RecycleElement` to improve performance by recycling cells.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView CachingStrategy=\"RecycleElement\">\n    <ListView.ItemTemplate>\n        <DataTemplate>\n            <ViewCell>\n              ...\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Getting App Data Directory .NET MAUI C#\nDESCRIPTION: Demonstrates how to access the app's top-level directory for non-user data files using the FileSystem.AppDataDirectory property. These files are backed up with the operating system's syncing framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/file-system-helpers.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring appDataDir = FileSystem.AppDataDirectory;\n```\n\n----------------------------------------\n\nTITLE: Creating a RefreshView in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to create a RefreshView, bind its IsRefreshing property, and bind its Command property to a view model command for handling the refresh action. It also shows how to embed a ScrollView with a FlexLayout inside the RefreshView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/refreshview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:RefreshViewDemo\"\n             x:DataType=\"local:MainPageViewModel\">\n    <ContentPage.BindingContext>\n        <local:MainPageViewModel />\n    </ContentPage.BindingContext>             \n    <RefreshView IsRefreshing=\"{Binding IsRefreshing}\"\n                 Command=\"{Binding RefreshCommand}\">\n        <ScrollView>\n            <FlexLayout Direction=\"Row\"\n                        Wrap=\"Wrap\"\n                        AlignItems=\"Center\"\n                        AlignContent=\"Center\"\n                        BindableLayout.ItemsSource=\"{Binding Items}\"\n                        BindableLayout.ItemTemplate=\"{StaticResource ColorItemTemplate}\" />\n        </ScrollView>\n    </RefreshView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Default FlyoutItem Template - XAML\nDESCRIPTION: This XAML snippet defines the default DataTemplate used for each FlyoutItem in a .NET MAUI Shell flyout. It includes visual states for 'Normal' and 'Selected' states and uses OnPlatform to adapt to different platforms (Android, iOS, WinUI). The template uses Grid, Image, and Label elements with named values for VSM targeting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<DataTemplate x:Key=\"FlyoutTemplate\">\n    <Grid x:Name=\"FlyoutItemLayout\"\n          HeightRequest=\"{OnPlatform 44, Android=50}\"\n          ColumnSpacing=\"{OnPlatform WinUI=0}\"\n          RowSpacing=\"{OnPlatform WinUI=0}\">\n        <VisualStateManager.VisualStateGroups>\n            <VisualStateGroupList>\n                <VisualStateGroup x:Name=\"CommonStates\">\n                    <VisualState x:Name=\"Normal\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BackgroundColor\"\n                                    Value=\"Transparent\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState x:Name=\"Selected\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BackgroundColor\"\n                                    Value=\"{AppThemeBinding Light=Black, Dark=White}\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n        </VisualStateManager.VisualStateGroups>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"{OnPlatform Android=54, iOS=50, WinUI=Auto}\" />\n            <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        <Image x:Name=\"FlyoutItemImage\"\n               Source=\"{Binding FlyoutIcon}\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"{OnPlatform Default=Center, WinUI=Start}\"\n               HeightRequest=\"{OnPlatform Android=24, iOS=22, WinUI=16}\"\n               WidthRequest=\"{OnPlatform Android=24, iOS=22, WinUI=16}\">\n            <Image.Margin>\n                <OnPlatform x:TypeArguments=\"Thickness\">\n                    <OnPlatform.Platforms>\n                        <On Platform=\"WinUI\"\n                            Value=\"12,0,12,0\" />\n                    </OnPlatform.Platforms>\n                </OnPlatform>\n            </Image.Margin>\n        </Image>\n        <Label x:Name=\"FlyoutItemLabel\"\n               Grid.Column=\"1\"\n               Text=\"{Binding Title}\"\n               FontSize=\"{OnPlatform Android=14, iOS=14}\"\n               FontAttributes=\"{OnPlatform iOS=Bold}\"\n               HorizontalOptions=\"{OnPlatform WinUI=Start}\"\n               HorizontalTextAlignment=\"{OnPlatform WinUI=Start}\"\n               VerticalTextAlignment=\"Center\">\n            <Label.TextColor>\n                <OnPlatform x:TypeArguments=\"Color\">\n                    <OnPlatform.Platforms>\n                        <On Platform=\"Android\"\n                            Value=\"{AppThemeBinding Light=Black, Dark=White}\" />\n                    </OnPlatform.Platforms>\n                </OnPlatform>\n            </Label.TextColor>\n            <Label.Margin>\n                <OnPlatform x:TypeArguments=\"Thickness\">\n                    <OnPlatform.Platforms>\n                        <On Platform=\"Android\"\n                            Value=\"20, 0, 0, 0\" />\n                    </OnPlatform.Platforms>\n                </OnPlatform>\n            </Label.Margin>\n            <Label.FontFamily>\n                <OnPlatform x:TypeArguments=\"x:String\">\n                    <OnPlatform.Platforms>\n                        <On Platform=\"Android\"\n                            Value=\"sans-serif-medium\" />\n                    </OnPlatform.Platforms>\n                </OnPlatform>\n            </Label.FontFamily>\n        </Label>\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Explicit Dependency Resolution: ViewModel (net-maui-8.0) C#\nDESCRIPTION: This example shows explicit dependency resolution within a view model, accessing services through `Application.Current.MainPage.Handler.MauiContext.Services`. This is specific to .NET MAUI 8.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel\n{\n    readonly ILoggingService _loggingService;\n    readonly ISettingsService _settingsService;\n\n    public MainPageViewModel()\n    {\n        _loggingService = Application.Current.MainPage.Handler.MauiContext.Services.GetService<ILoggingService>();\n        _settingsService = Application.Current.MainPage.Handler.MauiContext.Services.GetService<ISettingsService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying inline HTML in WebView using XAML\nDESCRIPTION: This code snippet demonstrates how to display inline HTML in a .NET MAUI WebView using XAML. An `HtmlWebViewSource` object is created and assigned to the `Source` property of the WebView. The `Html` property of the `HtmlWebViewSource` is set to the HTML content to be displayed. Uses CDATA for readability.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<WebView>\n    <WebView.Source>\n        <HtmlWebViewSource>\n            <HtmlWebViewSource.Html>\n                <![CDATA[\n                <HTML>\n                <BODY>\n                <H1>.NET MAUI</H1>\n                <P>Welcome to WebView.</P>\n                </BODY>\n                </HTML>\n                ]]>\n            </HtmlWebViewSource.Html>\n        </HtmlWebViewSource>\n    </WebView.Source>\n</WebView>\n```\n\n----------------------------------------\n\nTITLE: Define URI Schemes for iOS/Mac Catalyst\nDESCRIPTION: This XML snippet is used within the Info.plist file for iOS and Mac Catalyst platforms. It specifies the URI schemes that the application is allowed to query.  The `LSApplicationQueriesSchemes` key defines an array of `<string>` elements, each representing a URI scheme, such as 'lyft' or 'fb', that the app is permitted to interact with.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/launcher.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>lyft</string>  \n    <string>fb</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: CarouselView Horizontal Layout with LinearItemsLayout XAML\nDESCRIPTION: This XAML code explicitly sets the CarouselView's ItemsLayout to a LinearItemsLayout with a Horizontal orientation. It demonstrates an alternative way to achieve the default horizontal layout. It also uses data binding to display monkey information. Dependencies: None\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Horizontal\" />\n    </CarouselView.ItemsLayout>\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Scroll an item into view in C#\nDESCRIPTION: This C# code snippet demonstrates how to scroll a specific item (named 'Proboscis Monkey') into view within a ListView.  It retrieves the item from a MonkeysViewModel and uses the `ScrollTo` method. Requires a MonkeysViewModel and Monkey model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMonkeysViewModel viewModel = BindingContext as MonkeysViewModel;\nMonkey monkey = viewModel.Monkeys.FirstOrDefault(m => m.Name == \"Proboscis Monkey\");\nlistView.ScrollTo(monkey, ScrollToPosition.MakeVisible, true);\n```\n\n----------------------------------------\n\nTITLE: Drawing Dashed Square with Irregular Dash in C#\nDESCRIPTION: This snippet demonstrates how to draw a dashed square on a .NET MAUI canvas using an irregular dash pattern. It sets the `StrokeColor`, `StrokeSize`, and `StrokeDashPattern` properties, and then calls the `DrawRectangle` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.StrokeDashPattern = new float[] { 4, 4, 1, 4 };\ncanvas.DrawRectangle(10, 10, 90, 100);\n```\n\n----------------------------------------\n\nTITLE: Set Activity LaunchMode in Android\nDESCRIPTION: This code snippet demonstrates how to set the `LaunchMode` of the `MainActivity` in Android to `SingleTop`. This prevents multiple instances of the activity from being started when the app is in the foreground. The `LaunchMode` is specified in the `Activity` attribute.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Activity(Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, //... )]\npublic class MainActivity : MauiAppCompatActivity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Updating x:Class Attribute in XAML\nDESCRIPTION: This snippet shows how to update the `x:Class` attribute in a XAML file (e.g., NotePage.xaml or AboutPage.xaml) after moving the corresponding code-behind file to a new namespace. The `x:Class` attribute is updated to `Notes.Views.NotePage` (or `Notes.Views.AboutPage`) to correctly link the XAML view with its code-behind class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nx:Class=\"Notes.Views.NotePage\"\n```\n\n----------------------------------------\n\nTITLE: Send and Receive Raw Messages with HybridWebView (MAUI) >=net-maui-10.0\nDESCRIPTION: This C# code snippet demonstrates how to send raw messages from C# to JavaScript using `SendRawMessage` and how to handle received raw messages using the `RawMessageReceived` event.  It shows using an alert to display the received message. This is specifically for MAUI version >= net-maui-10.0\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n    private void OnSendMessageButtonClicked(object sender, EventArgs e)\n    {\n        hybridWebView.SendRawMessage($\"Hello from C#!{(!string.IsNullOrEmpty(DateTime.Now.ToString()) ? \" \" + DateTime.Now.ToString() : string.Empty)}\");\n    }\n\n    private async void OnHybridWebViewRawMessageReceived(object sender, HybridWebViewRawMessageReceivedEventArgs e)\n    {\n        await DisplayAlertAsync(\"Raw Message Received\", e.Message, \"OK\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Implement Android Orientation Service C#\nDESCRIPTION: This code implements the `GetOrientation` method for the Android platform as a partial method within the `DeviceOrientationService` class. It uses Android APIs (`Android.Content`, `Android.Runtime`, `Android.Views`) to determine the device's orientation and returns a `DeviceOrientation` enum value. This implementation must be placed in the `Platforms/Android` folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Runtime;\nusing Android.Views;\n\nnamespace InvokePlatformCodeDemos.Services.PartialMethods;\n\npublic partial class DeviceOrientationService\n{\n    public partial DeviceOrientation GetOrientation()\n    {\n        IWindowManager windowManager = Android.App.Application.Context.GetSystemService(Context.WindowService).JavaCast<IWindowManager>();\n        SurfaceOrientation orientation = windowManager.DefaultDisplay.Rotation;\n        bool isLandscape = orientation == SurfaceOrientation.Rotation90 || orientation == SurfaceOrientation.Rotation270;\n        return isLandscape ? DeviceOrientation.Landscape : DeviceOrientation.Portrait;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyout Background with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the flyout background color for a Shell to red using the `-maui-flyout-background` property.  It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_74\n\nLANGUAGE: css\nCODE:\n```\n-maui-flyout-background: red;\n```\n\n----------------------------------------\n\nTITLE: Adding TitleBar in C# - .NET MAUI\nDESCRIPTION: This C# snippet demonstrates how to add a TitleBar to a Window programmatically in a .NET MAUI application. It shows how to set the Icon, Title, Subtitle, and Content properties of the TitleBar. Dependencies include the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/titlebar.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nWindow window = new Window\n{\n    TitleBar = new TitleBar\n    {\n        Icon = \"titlebar_icon.png\",\n        Title = \"My App\",\n        Subtitle = \"Demo\",\n        Content = new SearchBar { ... }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implement IOnSuccessListener in MainActivity (C#)\nDESCRIPTION: This C# snippet implements the `Android.Gms.Tasks.IOnSuccessListener` interface in the `MainActivity` class. The `OnSuccess` method is called when the Firebase token is successfully retrieved, and it stores the token in the `DeviceInstallationService` for later use in registration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainActivity : MauiAppCompatActivity, Android.Gms.Tasks.IOnSuccessListener\n{\n    public void OnSuccess(Java.Lang.Object result)\n    {\n        DeviceInstallationService.Token = result.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Blittable Type Wrapper Example (C#)\nDESCRIPTION: Shows the wrapper generated for methods with non-blittable types, specifically `bool`, ensuring compatibility with the `UnmanagedCallersOnly` attribute. It includes the conversion between `bool` and `byte` for JNI interaction.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstatic bool n_OnTouch_Landroid_view_View_Landroid_view_MotionEvent(IntPtr jnienv, IntPtr native__this, IntPtr native_v, IntPtr native_e)\n{\n    var __this = global::Java.Lang.Object.GetObject<Android.Views.View.IOnTouchListener>(jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;\n    var v = global::Java.Lang.Object.GetObject<Android.Views.View>(native_v, JniHandleOwnership.DoNotTransfer);\n    var e = global::Java.Lang.Object.GetObject<Android.Views.MotionEvent>(native_e, JniHandleOwnership.DoNotTransfer);\n    bool __ret = __this.OnTouch(v, e);\n    return __ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a ToolbarItem in C#\nDESCRIPTION: This C# code snippet shows how to create a ToolbarItem object in code, set its Text and IconImageSource properties, and add it to the ToolbarItems collection of a Page.  The ImageSource.FromFile method loads the icon from a file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/toolbaritem.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nToolbarItem item = new ToolbarItem\n{\n    Text = \"Add item\",\n    IconImageSource = ImageSource.FromFile(\"add.png\")\n};\n\n// \"this\" refers to a Page object\nthis.ToolbarItems.Add(item);\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemTemplate with DataTemplateSelector C#\nDESCRIPTION: This C# code dynamically sets the ItemTemplate of a CarouselView using a DataTemplateSelector. It creates a new CarouselView and sets its ItemTemplate to an instance of MonkeyDataTemplateSelector.  It also binds the ItemsSource to a property on the MonkeysViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ItemTemplate = new MonkeyDataTemplateSelector { ... }\n};\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Create Editor in C# - MAUI\nDESCRIPTION: Demonstrates how to create an Editor control programmatically in C#, setting properties for placeholder text and height, and attaching event handlers for text changes and completion.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nEditor editor = new Editor { Placeholder = \"Enter text\", HeightRequest = 250 };\neditor.TextChanged += OnEditorTextChanged;\neditor.Completed += OnEditorCompleted;\n```\n\n----------------------------------------\n\nTITLE: Setting Thumb Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the thumb color of a Slider or Switch to limegreen using the `-maui-thumb-color` property. It accepts a color value or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_70\n\nLANGUAGE: css\nCODE:\n```\n-maui-thumb-color: limegreen;\n```\n\n----------------------------------------\n\nTITLE: Consume Attached Behavior in C#\nDESCRIPTION: Demonstrates how to consume the `AttachedNumericValidationBehavior` in C# by using the `SetAttachBehavior` method, setting the attached property on an Entry control to enable the behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEntry entry = new Entry { Placeholder = \"Enter a System.Double\" };\nAttachedNumericValidationBehavior.SetAttachBehavior(entry, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Child Animations in MAUI\nDESCRIPTION: This code demonstrates creating a parent animation and adding child animations to it for scaling and rotating an image. It shows how to use the Animation class to animate properties of a VisualElement.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar parentAnimation = new Animation();\nvar scaleUpAnimation = new Animation(v => image.Scale = v, 1, 2, Easing.SpringIn);\nvar rotateAnimation = new Animation(v => image.Rotation = v, 0, 360);\nvar scaleDownAnimation = new Animation(v => image.Scale = v, 2, 1, Easing.SpringOut);\n\nparentAnimation.Add(0, 0.5, scaleUpAnimation);\nparentAnimation.Add(0, 1, rotateAnimation);\nparentAnimation.Add(0.5, 1, scaleDownAnimation);\n\nparentAnimation.Commit(this, \"ChildAnimations\", 16, 4000, null, (v, c) => SetIsEnabledButtonState(true, false));\n```\n\n----------------------------------------\n\nTITLE: CollectionView XAML\nDESCRIPTION: This XAML snippet configures the `CollectionView` to use commanding. The `SelectionChangedCommandParameter` property binds to the `SelectedItem` of the `CollectionView`, and the `SelectionChangedCommand` property binds to the `SelectNoteCommand` in the viewmodel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView.SelectionChangedCommandParameter>\n    <Binding Source=\"{RelativeSource Self}\" Path=\"SelectedItem\"/>\n</CollectionView.SelectionChangedCommandParameter>\n<CollectionView.SelectionChangedCommand>\n    <Binding Path=\"SelectNoteCommand\"/>\n</CollectionView.SelectionChangedCommand>\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled and Stroked Circle in C#\nDESCRIPTION: This snippet demonstrates how to draw a filled circle with a stroke outline on a .NET MAUI canvas. It creates a `PathF` object representing a circle, sets the `StrokeColor`, `StrokeSize`, and `FillColor` properties, and then calls the `FillPath` and `DrawPath` methods to draw the circle with the specified fill and stroke.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nfloat radius = Math.Min(dirtyRect.Width, dirtyRect.Height) / 4;\n\nPathF path = new PathF();\npath.AppendCircle(dirtyRect.Center.X, dirtyRect.Center.Y, radius);\n\ncanvas.StrokeColor = Colors.Blue;\ncanvas.StrokeSize = 10;\ncanvas.FillColor = Colors.Red;\n\ncanvas.FillPath(path);\ncanvas.DrawPath(path);\n```\n\n----------------------------------------\n\nTITLE: Define a Dark Theme Resource Dictionary XAML\nDESCRIPTION: This XAML code defines a ResourceDictionary for a dark theme named `DarkTheme`. It contains color definitions for various application elements, such as PageBackgroundColor, NavigationBarColor, and PrimaryTextColor, using specific color values suitable for a dark theme.  A code-behind file is required for this ResourceDictionary, which calls the InitializeComponent method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                    x:Class=\"ThemingDemo.DarkTheme\">\n    <Color x:Key=\"PageBackgroundColor\">Black</Color>\n    <Color x:Key=\"NavigationBarColor\">Teal</Color>\n    <Color x:Key=\"PrimaryColor\">Teal</Color>\n    <Color x:Key=\"SecondaryColor\">White</Color>\n    <Color x:Key=\"PrimaryTextColor\">White</Color>\n    <Color x:Key=\"SecondaryTextColor\">White</Color>\n    <Color x:Key=\"TertiaryTextColor\">WhiteSmoke</Color>\n    <Color x:Key=\"TransparentColor\">Transparent</Color>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Binding ListView ItemsSource to a Static Resource in XAML\nDESCRIPTION: This XAML code binds the `ItemsSource` property of a `ListView` to the static `All` property of the `NamedColor` class, using the `x:Static` markup extension. This allows the ListView to display the collection of named colors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples;assembly=XamlSamples\"\n             x:Class=\"XamlSamples.ListViewDemoPage\"\n             Title=\"ListView Demo Page\">\n    <ListView ItemsSource=\"{x:Static local:NamedColor.All}\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Create DeviceInstallationService Class (C#)\nDESCRIPTION: This C# class, `DeviceInstallationService`, provides functionality to retrieve a unique device ID using `Secure.AndroidId`, check for Google Play Services availability, and generate a payload for notification hub registration. It implements the `IDeviceInstallationService` interface. The service determines the device installation details required for push notification registration, including the platform, push channel (FCM token), and any associated tags.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Gms.Common;\nusing PushNotificationsDemo.Models;\nusing PushNotificationsDemo.Services;\nusing static Android.Provider.Settings;\n\nnamespace PushNotificationsDemo.Platforms.Android;\n\npublic class DeviceInstallationService : IDeviceInstallationService\n{\n    public string Token { get; set; }\n\n    public bool NotificationsSupported\n        => GoogleApiAvailability.Instance.IsGooglePlayServicesAvailable(Platform.AppContext) == ConnectionResult.Success;\n\n    public string GetDeviceId()\n        => Secure.GetString(Platform.AppContext.ContentResolver, Secure.AndroidId);\n\n    public DeviceInstallation GetDeviceInstallation(params string[] tags)\n    {\n        if (!NotificationsSupported)\n            throw new Exception(GetPlayServicesError());\n\n        if (string.IsNullOrWhiteSpace(Token))\n            throw new Exception(\"Unable to resolve token for FCMv1.\");\n\n        var installation = new DeviceInstallation\n        {\n            InstallationId = GetDeviceId(),\n            Platform = \"fcmv1\",\n            PushChannel = Token\n        };\n\n        installation.Tags.AddRange(tags);\n\n        return installation;\n    }\n\n    string GetPlayServicesError()\n    {\n        int resultCode = GoogleApiAvailability.Instance.IsGooglePlayServicesAvailable(Platform.AppContext);\n\n        if (resultCode != ConnectionResult.Success)\n            return GoogleApiAvailability.Instance.IsUserResolvableError(resultCode) ?\n                       GoogleApiAvailability.Instance.GetErrorString(resultCode) :\n                       \"This device isn't supported.\";\n\n        return \"An error occurred preventing the use of push notifications.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Incoming Notifications in Android\nDESCRIPTION: This code snippet shows how to modify the `MainActivity` class in Android to receive incoming notifications. The `CreateNotificationFromIntent` method extracts notification data from the intent and passes it to the `ReceiveNotification` method in the `NotificationManagerService` class. This method is called from both `OnCreate` and `OnNewIntent`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle? savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        CreateNotificationFromIntent(Intent);\n    }\n\n    protected override void OnNewIntent(Intent? intent)\n    {\n        base.OnNewIntent(intent);\n\n        CreateNotificationFromIntent(intent);\n    }\n\n    static void CreateNotificationFromIntent(Intent intent)\n    {\n        if (intent?.Extras != null)\n        {\n            string title = intent.GetStringExtra(LocalNotificationsDemo.Platforms.Android.NotificationManagerService.TitleKey);\n            string message = intent.GetStringExtra(LocalNotificationsDemo.Platforms.Android.NotificationManagerService.MessageKey);\n\n            var service = IPlatformApplication.Current.Services.GetService<INotificationManagerService>();\n            service.ReceiveNotification(title, message);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Colors on Individual Pages in .NET MAUI Shell\nDESCRIPTION: This XAML demonstrates setting the color properties on an individual ContentPage within a .NET MAUI Shell application. This allows for page-specific color customization, overriding the global Shell color settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             Shell.BackgroundColor=\"Gray\"\n             Shell.ForegroundColor=\"White\"\n             Shell.TitleColor=\"Blue\"\n             Shell.DisabledColor=\"#95FFFFFF\"\n             Shell.UnselectedColor=\"#B4FFFFFF\">\n\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Load Animated GIF - XAML\nDESCRIPTION: This XAML code shows how to load an animated GIF by setting the `Source` property of an `Image` element to the GIF file. By default, the animation will not play until the `IsAnimationPlaying` property is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"demo.gif\" />\n```\n\n----------------------------------------\n\nTITLE: Shared MauiApp Instance in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a shared, static instance of a MauiApp object. This is recommended when embedding .NET MAUI views as native views to avoid creating a new MauiApp object each time, which can cause performance issues and problems accessing Application.Current. The code defines a static class `MyEmbeddedMauiApp` with a static property `Shared` that lazily initializes the MauiApp instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/static-mauiapp.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MyEmbeddedMauiApp\n{\n    static MauiApp? _shared;\n    public static MauiApp Shared => _shared ??= MauiProgram.CreateMauiApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pressed Visual State for Button in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a visual state for the 'Pressed' state of a .NET MAUI Button. When the button is pressed, its scale property is set to 0.8, creating a visual effect. It relies on the VisualStateManager and VisualStateGroup to manage the different visual states.  It also needs a PointerOver state to return to normal after being pressed. The Normal state is also defined to set the scale back to 1 when the button is not pressed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Click me!\"\n        ...>\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Scale\"\n                                Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Pressed\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Scale\"\n                                Value=\"0.8\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"PointerOver\" />            \n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Paint Rectangle with Pattern\nDESCRIPTION: Creates a PicturePattern and PatternPaint, then fills a rectangle with the repeating pattern.  Requires Microsoft.Maui.Graphics for drawing on the PictureCanvas.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIPattern pattern;\n\n// Create a 10x10 template for the pattern\nusing (PictureCanvas picture = new PictureCanvas(0, 0, 10, 10))\n{\n    picture.StrokeColor = Colors.Silver;\n    picture.DrawLine(0, 0, 10, 10);\n    picture.DrawLine(0, 10, 10, 0);\n    pattern = new PicturePattern(picture.Picture, 10, 10);\n}\n\n// Fill the rectangle with the 10x10 pattern\nPatternPaint patternPaint = new PatternPaint\n{\n    Pattern = pattern\n};\ncanvas.SetFillPaint(patternPaint, RectF.Zero);\ncanvas.FillRectangle(10, 10, 250, 250);\n```\n\n----------------------------------------\n\nTITLE: Converting .NET MAUI to Android View\nDESCRIPTION: This code snippet demonstrates how to convert a .NET MAUI control to an Android View object using the `ToPlatformEmbedded` extension method.  The resulting Android View can then be added to a layout in the native Android application. Requires a reference to the .NET MAUI class library or the `Microsoft.Maui.Controls.Embedding` namespace, depending on the .NET MAUI version.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nvar mauiView = new MyMauiContent();\nAndroid.Views.View nativeView = mauiView.ToPlatformEmbedded(context);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nrootLayout.AddView(nativeView, new LinearLayout.LayoutParams(MatchParent, WrapContent));\n```\n\n----------------------------------------\n\nTITLE: NotificationEventArgs Class Definition\nDESCRIPTION: This code defines the `NotificationEventArgs` class, which is used to pass notification data to the `NotificationReceived` event handler. It contains `Title` and `Message` properties to store the notification's title and body, respectively.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NotificationEventArgs : EventArgs\n{\n    public string Title { get; set; }\n    public string Message { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Video Transport Controls in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet defines custom transport controls for a video player, including play/pause and stop buttons. It utilizes data triggers to update the button text and enable/disable buttons based on the video's playback status. An ActivityIndicator is also included to indicate when the video is loading.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_71\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:VideoDemos.Controls\"\n             x:Class=\"VideoDemos.Views.CustomTransportPage\"\n             Unloaded=\"OnContentPageUnloaded\"\n             Title=\"Custom transport controls\">\n    <Grid x:DataType=\"controls:Video\"\n          RowDefinitions=\"*,Auto\">\n        <controls:Video x:Name=\"video\"\n                        AutoPlay=\"False\"\n                        AreTransportControlsEnabled=\"False\"\n                        Source=\"https://archive.org/download/BigBuckBunny_328/BigBuckBunny_512kb.mp4\" />\n        <ActivityIndicator Color=\"Gray\"\n                           IsVisible=\"False\">\n            <ActivityIndicator.Triggers>\n                <DataTrigger TargetType=\"ActivityIndicator\"\n                             Binding=\"{Binding Source={x:Reference video},\n                                               Path=Status}\"\n                             Value=\"{x:Static controls:VideoStatus.NotReady}\">\n                    <Setter Property=\"IsVisible\"\n                            Value=\"True\" />\n                    <Setter Property=\"IsRunning\"\n                            Value=\"True\" />\n                </DataTrigger>\n            </ActivityIndicator.Triggers>\n        </ActivityIndicator>\n        <Grid Grid.Row=\"1\"\n              Margin=\"0,10\"\n              ColumnDefinitions=\"0.5*,0.5*\"\n              BindingContext=\"{x:Reference video}\">\n            <Button Text=\"&#x25B6;&#xFE0F; Play\"\n                    HorizontalOptions=\"Center\"\n                    Clicked=\"OnPlayPauseButtonClicked\">\n                <Button.Triggers>\n                    <DataTrigger TargetType=\"Button\"\n                                 Binding=\"{Binding Status}\"\n                                 Value=\"{x:Static controls:VideoStatus.Playing}\">\n                        <Setter Property=\"Text\"\n                                Value=\"&#x23F8; Pause\" />\n                    </DataTrigger>\n                    <DataTrigger TargetType=\"Button\"\n                                 Binding=\"{Binding Status}\"\n                                 Value=\"{x:Static controls:VideoStatus.NotReady}\">\n                        <Setter Property=\"IsEnabled\"\n                                Value=\"False\" />\n                    </DataTrigger>\n                </Button.Triggers>\n            </Button>\n            <Button Grid.Column=\"1\"\n                    Text=\"&#x23F9; Stop\"\n                    HorizontalOptions=\"Center\"\n                    Clicked=\"OnStopButtonClicked\">\n                <Button.Triggers>\n                    <DataTrigger TargetType=\"Button\"\n                                 Binding=\"{Binding Status}\"\n                                 Value=\"{x:Static controls:VideoStatus.NotReady}\">\n                        <Setter Property=\"IsEnabled\"\n                                Value=\"False\" />\n                    </DataTrigger>\n                </Button.Triggers>\n            </Button>\n        </Grid>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Performing Navigation in C#\nDESCRIPTION: This C# snippet shows how to perform forward navigation within a tab that is wrapped in a NavigationPage. It uses the `PushAsync` method on the `Navigation` property to navigate to a new page (UpcomingAppointmentsPage).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/tabbedpage.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nawait Navigation.PushAsync(new UpcomingAppointmentsPage());\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback URI Protocol in Package.appxmanifest for Windows (XML)\nDESCRIPTION: This XML snippet shows how to declare the callback URI protocol in the Package.appxmanifest file for WinUI 3 applications on Windows. This declaration enables the operating system to redirect the authentication flow back to the application after the user authenticates in the web browser.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Applications>\n    <Application Id=\"App\" Executable=\"$targetnametoken$.exe\" EntryPoint=\"MyApp.App\">\n        <Extensions>\n            <uap:Extension Category=\"windows.protocol\">\n            <uap:Protocol Name=\"myapp\">\n                <uap:DisplayName>My App</uap:DisplayName>\n            </uap:Protocol>\n            </uap:Extension>\n        </Extensions>\n    </Application>\n</Applications>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decorations in C# - MAUI\nDESCRIPTION: This C# snippet demonstrates how to apply underline and strikethrough text decorations to Label controls using the TextDecorations property in code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nLabel underlineLabel = new Label { Text = \"This is underlined text.\", TextDecorations = TextDecorations.Underline };\nLabel strikethroughLabel = new Label { Text = \"This is text with strikethrough.\", TextDecorations = TextDecorations.Strikethrough };\nLabel bothLabel = new Label { Text = \"This is underlined text with strikethrough.\", TextDecorations = TextDecorations.Underline | TextDecorations.Strikethrough };\n```\n\n----------------------------------------\n\nTITLE: Customize Switch Appearance in XAML (>=net-maui-10.0)\nDESCRIPTION: This code snippet shows how to customize the appearance of a Switch in XAML by setting the OffColor, OnColor, and ThumbColor properties. OffColor defines the color when the switch is toggled off, OnColor defines the color when the switch is toggled on, and ThumbColor defines the color of the switch thumb.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch OffColor=\"Red\"\n        OnColor=\"Orange\"\n        ThumbColor=\"Green\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Page Colors in .NET MAUI Shell\nDESCRIPTION: This XAML example illustrates how to set various color properties (BackgroundColor, ForegroundColor, TitleColor, DisabledColor, UnselectedColor) for a .NET MAUI Shell application. These properties control the appearance of the Shell chrome and text elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       x:Class=\"Xaminals.AppShell\"\n       BackgroundColor=\"#455A64\"\n       ForegroundColor=\"White\"\n       TitleColor=\"White\"\n       DisabledColor=\"#B4FFFFFF\"\n       UnselectedColor=\"#95FFFFFF\">\n\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Create SwipeView in C#\nDESCRIPTION: This C# code snippet programmatically creates a SwipeView with similar functionality to the XAML example. It defines two SwipeItem objects ('Favorite' and 'Delete'), adds them to a SwipeItems collection, and sets this collection as the LeftItems of the SwipeView. The SwipeView's content is a Grid containing a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// SwipeItems\nSwipeItem favoriteSwipeItem = new SwipeItem\n{\n    Text = \"Favorite\",\n    IconImageSource = \"favorite.png\",\n    BackgroundColor = Colors.LightGreen\n};\nfavoriteSwipeItem.Invoked += OnFavoriteSwipeItemInvoked;\n\nSwipeItem deleteSwipeItem = new SwipeItem\n{\n    Text = \"Delete\",\n    IconImageSource = \"delete.png\",\n    BackgroundColor = Colors.LightPink\n};\ndeleteSwipeItem.Invoked += OnDeleteSwipeItemInvoked;\n\nList<SwipeItem> swipeItems = new List<SwipeItem>() { favoriteSwipeItem, deleteSwipeItem };\n\n// SwipeView content\nGrid grid = new Grid\n{\n    HeightRequest = 60,\n    WidthRequest = 300,\n    BackgroundColor = Colors.LightGray\n};\ngrid.Add(new Label\n{\n    Text = \"Swipe right\",\n    HorizontalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.Center\n});\n\nSwipeView swipeView = new SwipeView\n{\n    LeftItems = new SwipeItems(swipeItems),\n    Content = grid\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Pull-to-Refresh in XAML\nDESCRIPTION: This XAML snippet demonstrates how to enable pull-to-refresh functionality in a ListView by setting the `IsPullToRefreshEnabled` property to `true`. It also shows how to bind the `RefreshCommand` and `IsRefreshing` properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_34\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Animals}\"\n          IsPullToRefreshEnabled=\"true\"\n          RefreshCommand=\"{Binding RefreshCommand}\"\n          IsRefreshing=\"{Binding IsRefreshing}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Animal\">\n            <ViewCell>\n                ...\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Message Handling for Different Platforms\nDESCRIPTION: This JavaScript code snippet shows how to send messages from the HybridWebView to the native platform based on the current platform. It checks for iOS/MacCatalyst WKWebView, and Android WebView. The 'hybridWebViewHost' object is assumed to be available in the Android WebView context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nelse if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.webwindowinterop) {\n                    // iOS and MacCatalyst WKWebView\n                    window.webkit.messageHandlers.webwindowinterop.postMessage(messageToSend);\n                }\n                else {\n                    // Android WebView\n                    hybridWebViewHost.sendMessage(messageToSend);\n                }\n```\n\n----------------------------------------\n\nTITLE: FloatToIntConverter Implementation C#\nDESCRIPTION: Implements a value converter that converts a float value to an integer value, multiplying or dividing by a parameter. The `GetParameter` method handles cases where the parameter is a float, integer, or string, providing flexibility in parameter handling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class FloatToIntConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (int)Math.Round((float)value * GetParameter(parameter));\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        return (int)value / GetParameter(parameter);\n    }\n\n    double GetParameter(object parameter)\n    {\n        if (parameter is float)\n            return (float)parameter;\n        else if (parameter is int)\n            return (int)parameter;\n        else if (parameter is string)\n            return float.Parse((string)parameter);\n\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event (>=net-maui-10.0)\nDESCRIPTION: This C# code shows how to handle the Button's Clicked event. When the button is clicked, the OnButtonClicked method is executed. This method rotates a label by 360 degrees over 1 second. This version uses RelRotateToAsync.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class BasicButtonClickPage : ContentPage\n{\n    public BasicButtonClickPage ()\n    {\n        InitializeComponent ();\n    }\n\n    async void OnButtonClicked(object sender, EventArgs args)\n    {\n        await label.RelRotateToAsync(360, 1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bindings with Binding.Create (NET8 vs NET9) - C#\nDESCRIPTION: This code snippet demonstrates how to create bindings using `Binding.Create` with a `Func` argument in .NET MAUI 9, compared to the traditional string-based bindings in .NET 8. The `Binding.Create` method provides a type-safe and compile-time checked way to define bindings for NativeAOT and apps with full trimming enabled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// in .NET 8\nmyEntry.SetBinding(Entry.TextProperty, new MultiBinding\n{\n    Bindings = new Collection<BindingBase>\n    {\n        new Binding(nameof(Entry.FontFamily), source: RelativeBindingSource.Self),\n        new Binding(nameof(Entry.FontSize), source: RelativeBindingSource.Self),\n        new Binding(nameof(Entry.FontAttributes), source: RelativeBindingSource.Self),\n    },\n    Converter = new StringConcatenationConverter()\n});\n\n// in .NET 9\nmyEntry.SetBinding(Entry.TextProperty, new MultiBinding\n{\n    Bindings = new Collection<BindingBase>\n    {\n        Binding.Create(static (Entry entry) => entry.FontFamily, source: RelativeBindingSource.Self),\n        Binding.Create(static (Entry entry) => entry.FontSize, source: RelativeBindingSource.Self),\n        Binding.Create(static (Entry entry) => entry.FontAttributes, source: RelativeBindingSource.Self),\n    },\n    Converter = new StringConcatenationConverter()\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTemplateSelector (C#)\nDESCRIPTION: This C# code snippet shows how to implement a DataTemplateSelector by inheriting from the DataTemplateSelector class and overriding the OnSelectTemplate method. The OnSelectTemplate method returns a different DataTemplate based on the DateOfBirth property of the data item (Person). The ValidTemplate and InvalidTemplate properties are used to store the specific data templates to return.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate ValidTemplate { get; set; }\n    public DataTemplate InvalidTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Person)item).DateOfBirth.Year >= 1980 ? ValidTemplate : InvalidTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pick a Contact using IContacts.PickContactAsync (C#)\nDESCRIPTION: This code snippet demonstrates how to use the `PickContactAsync` method of the `IContacts` interface to allow the user to select a contact from their device. The method displays a contact dialog, and returns a `Contact` object if a contact is selected, or `null` if the user cancels the selection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar contact = await Contacts.Default.PickContactAsync();\n```\n\n----------------------------------------\n\nTITLE: Consuming Styles in .NET MAUI XAML\nDESCRIPTION: This XAML snippet shows how to consume styles that were previously defined, utilizing both DynamicResource for theme-related properties like BackgroundColor and StaticResource for referencing the predefined styles. It defines a ContentPage layout using Grid and StackLayout, displaying labels with specific styles.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:ThemingDemo\"\n             x:Class=\"ThemingDemo.UserSummaryPage\"\n             Title=\"User Summary\"\n             BackgroundColor=\"{DynamicResource PageBackgroundColor}\">\n    ...\n    <ScrollView>\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"200\" />\n                <RowDefinition Height=\"120\" />\n                <RowDefinition Height=\"70\" />\n            </Grid.RowDefinitions>\n            <Grid BackgroundColor=\"{DynamicResource PrimaryColor}\">\n                <Label Text=\"Face-Palm Monkey\"\n                       VerticalOptions=\"Center\"\n                       Margin=\"15\"\n                       Style=\"{StaticResource MediumLabelStyle}\" />\n                ...\n            </Grid>\n            <StackLayout Grid.Row=\"1\"\n                         Margin=\"10\">\n                <Label Text=\"This monkey reacts appropriately to ridiculous assertions and actions.\"\n                       Style=\"{StaticResource SmallLabelStyle}\" />\n                <Label Text=\"  &#x2022; Cynical but not unfriendly.\"\n                       Style=\"{StaticResource SmallLabelStyle}\" />\n                <Label Text=\"  &#x2022; Seven varieties of grimaces.\"\n                       Style=\"{StaticResource SmallLabelStyle}\" />\n                <Label Text=\"  &#x2022; Doesn't laugh at your jokes.\"\n                       Style=\"{StaticResource SmallLabelStyle}\" />\n            </StackLayout>\n            ...\n        </Grid>\n    </ScrollView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Copy Bundled File .NET MAUI C#\nDESCRIPTION: Demonstrates how to copy a bundled file from the app package to the app data folder using FileSystem.OpenAppPackageFileAsync and FileStream. This showcases how to handle file operations for bundled resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/file-system-helpers.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task CopyFile(string filename)\n{\n    using var sourceStream = await FileSystem.OpenAppPackageFileAsync(filename);\n    using var targetStream = File.OpenWrite(Path.Combine(FileSystem.AppDataDirectory, filename));\n\n    await sourceStream.CopyToAsync(targetStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Drag Gesture Position in .NET MAUI (C#)\nDESCRIPTION: This C# snippet demonstrates how to obtain the position of a drag gesture relative to the screen and a specified element using the GetPosition method of the DragStartingEventArgs. The GetPosition method returns a Point? object representing the coordinates. The Element? argument specifies the element relative to which the position is calculated.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n    // Position relative to screen\n    Point? screenPosition = e.GetPosition(null);\n\n    // Position relative to specified element\n    Point? relativeToImagePosition = e.GetPosition(image);\n}\n```\n\n----------------------------------------\n\nTITLE: XAML ControlTemplate for CardView in .NET MAUI\nDESCRIPTION: This XAML code defines a ControlTemplate named `CardViewControlTemplate` for a `CardView` control. It sets the BindingContext of the root Border element to the templated parent (the `CardView` instance) using `RelativeSource TemplatedParent`. This allows the Border and its children to bind to properties of the `CardView`, such as `CardColor` and `BorderColor`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<ControlTemplate x:Key=\"CardViewControlTemplate\"\n                 x:DataType=\"controls:CardView\">\n    <Border BindingContext=\"{Binding Source={RelativeSource TemplatedParent}}\"\n            BackgroundColor=\"{Binding CardColor}\"\n            Stroke=\"{Binding BorderColor}\"\n           ...>\n        <!-- UI objects that define the CardView visual structure -->           \n    </Border>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Sending Native Notifications with Azure Notification Hubs in C#\nDESCRIPTION: This C# code snippet shows how to send native notifications to both Android (FCM) and iOS (APNs) platforms using Azure Notification Hubs. It utilizes the SendFcmV1NativeNotificationAsync and SendAppleNativeNotificationAsync methods of the _hub object to dispatch notifications. It uses Task.WhenAll to execute the send tasks concurrently.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar sendTasks = new Task[]\n{\n    _hub.SendFcmV1NativeNotificationAsync(androidPayload, tags, token),\n    _hub.SendAppleNativeNotificationAsync(iOSPayload, tags, token)\n};\n\nreturn Task.WhenAll(sendTasks);\n```\n\n----------------------------------------\n\nTITLE: Apply styles to Image within ListView in XAML\nDESCRIPTION: This XAML snippet shows how to structure a ListView with an Image inside a DataTemplate and ViewCell.  The CSS selector `listview image` will target this image and apply specified styles.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <StyleSheet Source=\"/Resources/styles.css\" />\n    </ContentPage.Resources>\n    <StackLayout>\n        <ListView ...>\n            <ListView.ItemTemplate>\n                <DataTemplate>\n                    <ViewCell>\n                        <Grid>\n                            ...\n                            <Image ... />\n                            ...\n                        </Grid>\n                    </ViewCell>\n                </DataTemplate>\n            </ListView.ItemTemplate>\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling TextChanged and Visual States in C#\nDESCRIPTION: This C# code handles the TextChanged event of an Entry control in a .NET MAUI application to validate input against a regular expression. It uses VisualStateManager.GoToState to switch between the 'Valid' and 'Invalid' visual states defined in the XAML, updating the UI based on the input's validity. The GoToState method is also called in the constructor to set the initial state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VsmValidationPage : ContentPage\n{\n    public VsmValidationPage()\n    {\n        InitializeComponent();\n\n        GoToState(false);\n    }\n\n    void OnTextChanged(object sender, TextChangedEventArgs args)\n    {\n        bool isValid = Regex.IsMatch(args.NewTextValue, @\"^[2-9]\\d{2}-\\d{3}-\\d{4}$\");\n        GoToState(isValid);\n    }\n\n    void GoToState(bool isValid)\n    {\n        string visualState = isValid ? \"Valid\" : \"Invalid\";\n        VisualStateManager.GoToState(stackLayout, visualState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XAML: Data Binding with Object Element Syntax\nDESCRIPTION: Demonstrates data binding using object element syntax for the Binding markup extension. The Label's Scale property is bound to the Slider's Value property, defining the Source and Path properties as nested elements within the Label.Scale property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"TEXT\"\n       FontSize=\"40\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\">\n    <Label.Scale>\n        <Binding x:DataType=\"Slider\"\n                 Source=\"{x:Reference slider}\"\n                 Path=\"Value\" />\n    </Label.Scale>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: AdaptiveTrigger with MinWindowHeight and MinWindowWidth XAML\nDESCRIPTION: This XAML snippet shows how to use both MinWindowWidth and MinWindowHeight properties of the AdaptiveTrigger. The VisualState will be applied only when both conditions are met: the window width is greater than or equal to 800 and the window height is greater than or equal to 1200 device-independent units.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<AdaptiveTrigger MinWindowWidth=\"800\"\n                 MinWindowHeight=\"1200\"/>\n```\n\n----------------------------------------\n\nTITLE: Data Trigger Example XAML\nDESCRIPTION: This example demonstrates a Data Trigger that disables a Button when the associated Entry is empty. It binds to the Text.Length property of the Entry and disables the Button when the length is zero. A default value for Text must be specified.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry x:Name=\"entry\"\n       Text=\"\"\n       Placeholder=\"Enter text\" />\n<Button Text=\"Save\">\n    <Button.Triggers>\n        <DataTrigger TargetType=\"Button\"\n                     Binding=\"{Binding x:DataType='Entry',\n                                       Source={x:Reference entry},\n                                       Path=Text.Length}\"\n                     Value=\"0\">\n            <Setter Property=\"IsEnabled\"\n                    Value=\"False\" />\n            <!-- Multiple Setter elements are allowed -->\n        </DataTrigger>\n    </Button.Triggers>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Handle RemainingItemsThresholdReached event in C#\nDESCRIPTION: This C# code provides an example of how to handle the RemainingItemsThresholdReached event. Inside the event handler, you can retrieve more data and add it to the CarouselView's ItemsSource collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnCollectionViewRemainingItemsThresholdReached(object sender, EventArgs e)\n{\n    // Retrieve more data here and add it to the CollectionView's ItemsSource collection.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ColorTo Extension Method in C#\nDESCRIPTION: This code defines a custom ColorTo extension method for VisualElement in .NET MAUI. It uses the Animate method to interpolate between two colors and apply the resulting color to a property via a callback function. The method allows animating any Color property, not just BackgroundColor.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ViewExtensions\n{\n    public static Task<bool> ColorTo(this VisualElement self, Color fromColor, Color toColor, Action<Color> callback, uint length = 250, Easing easing = null)\n    {\n        Func<double, Color> transform = (t) =>\n            Color.FromRgba(fromColor.Red + t * (toColor.Red - fromColor.Red),\n                           fromColor.Green + t * (toColor.Green - fromColor.Green),\n                           fromColor.Blue + t * (toColor.Blue - fromColor.Blue),\n                           fromColor.Alpha + t * (toColor.Alpha - fromColor.Alpha));\n        return ColorAnimation(self, \"ColorTo\", transform, callback, length, easing);\n    }\n\n    public static void CancelAnimation(this VisualElement self)\n    {\n        self.AbortAnimation(\"ColorTo\");\n    }\n\n    static Task<bool> ColorAnimation(VisualElement element, string name, Func<double, Color> transform, Action<Color> callback, uint length, Easing easing)\n    {\n        easing = easing ?? Easing.Linear;\n        var taskCompletionSource = new TaskCompletionSource<bool>();\n\n        element.Animate<Color>(name, transform, callback, 16, length, easing, (v, c) => taskCompletionSource.SetResult(c));\n        return taskCompletionSource.Task;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider in C#\nDESCRIPTION: This C# code creates a Slider programmatically, sets its Maximum property to 360, and attaches an anonymous method to the ValueChanged event.  The event handler updates the rotation of one label and the text of another based on the slider's value.  It requires access to `rotationLabel` and `displayLabel`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSlider slider = new Slider\n{\n    Maximum = 360\n};\nslider.ValueChanged += (sender, args) =>\n{\n    rotationLabel.Rotation = slider.Value;\n    displayLabel.Text = String.Format(\"The Slider value is {0}\", args.NewValue);\n};\n```\n\n----------------------------------------\n\nTITLE: Invoke JavaScript Method from C#\nDESCRIPTION: This C# code demonstrates how to invoke the `EvaluateMeWithParamsAndAsyncReturn` JavaScript method from C# using the `InvokeJavaScriptAsync` method of the `HybridWebView` control. It passes parameters to the JavaScript function and receives the returned JSON data as a `Dictionary<string, string>`. It also specifies `JsonTypeInfo` objects to handle serialization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nDictionary<string, string> asyncResult = await hybridWebView.InvokeJavaScriptAsync<Dictionary<string, string>>(\n    \"EvaluateMeWithParamsAndAsyncReturn\", // JavaScript method name\n    HybridSampleJSContext.Default.DictionaryStringString, // JSON serialization info for return type\n    [\"new_key\", \"new_value\"], // Parameter values\n    [HybridSampleJSContext.Default.String, HybridSampleJSContext.Default.String]); // JSON serialization info for each parameter\n```\n\n----------------------------------------\n\nTITLE: Positioning Views in a Grid using XAML\nDESCRIPTION: This code snippet shows how to position child views within a .NET MAUI Grid using the `Grid.Row` and `Grid.Column` attached properties in XAML. It also demonstrates how to make views span multiple rows or columns using the `Grid.RowSpan` and `Grid.ColumnSpan` attached properties. BoxView and Label elements are placed at specific row and column indices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"GridDemos.Views.XAML.BasicGridPage\"\n             Title=\"Basic Grid demo\">\n   <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"2*\" />\n            <RowDefinition />\n            <RowDefinition Height=\"100\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition />\n            <ColumnDefinition />\n        </Grid.ColumnDefinitions>\n        <BoxView Color=\"Green\" />\n        <Label Text=\"Row 0, Column 0\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Column=\"1\"\n                 Color=\"Blue\" />\n        <Label Grid.Column=\"1\"\n               Text=\"Row 0, Column 1\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"1\"\n                 Color=\"Teal\" />\n        <Label Grid.Row=\"1\"\n               Text=\"Row 1, Column 0\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"1\"\n                 Grid.Column=\"1\"\n                 Color=\"Purple\" />\n        <Label Grid.Row=\"1\"\n               Grid.Column=\"1\"\n               Text=\"Row1, Column 1\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"2\"\n                 Grid.ColumnSpan=\"2\"\n                 Color=\"Red\" />\n        <Label Grid.Row=\"2\"\n               Grid.ColumnSpan=\"2\"\n               Text=\"Row 2, Columns 0 and 1\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Event Unsubscription: Subscriber Implementation - C#\nDESCRIPTION: This example shows how to unsubscribe from an event in the `Dispose` method of a subscriber class to prevent memory leaks. It demonstrates the creation of a simple publisher-subscriber pattern where the subscriber unsubscribes from the publisher's event when it is disposed of.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class Publisher\n{\n    public event EventHandler MyEvent;\n\n    public void OnMyEventFires()\n    {\n        if (MyEvent != null)\n            MyEvent(this, EventArgs.Empty);\n    }\n}\n\npublic class Subscriber : IDisposable\n{\n    readonly Publisher _publisher;\n\n    public Subscriber(Publisher publish)\n    {\n        _publisher = publish;\n        _publisher.MyEvent += OnMyEventFires;\n    }\n\n    void OnMyEventFires(object sender, EventArgs e)\n    {\n        Debug.WriteLine(\"The publisher notified the subscriber of an event\");\n    }\n\n    public void Dispose()\n    {\n        _publisher.MyEvent -= OnMyEventFires;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TitleBar Content in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to customize the Content and TrailingContent of a TitleBar in a .NET MAUI application. It shows how to add a SearchBar as the main content and an ImageButton with a FontImageSource as the trailing content.  The .NET MAUI framework is required.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/titlebar.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<TitleBar Title=\"My App\"\n          BackgroundColor=\"#512BD4\"\n          HeightRequest=\"48\">\n    <TitleBar.Content>\n        <SearchBar Placeholder=\"Search\"\n                   MaximumWidthRequest=\"300\"\n                   HorizontalOptions=\"FillAndExpand\"\n                   VerticalOptions=\"Center\" />\n    </TitleBar.Content>\n    <TitleBar.TrailingContent>\n        <ImageButton HeightRequest=\"36\"\n                     WidthRequest=\"36\"\n                     BorderWidth=\"0\"\n                     Background=\"Transparent\">\n            <ImageButton.Source>\n                <FontImageSource Size=\"16\"\n                                 Glyph=\"&#xE713;\"\n                                 FontFamily=\"SegoeMDL2\"/>\n            </ImageButton.Source>\n        </ImageButton>\n    </TitleBar.TrailingContent>\n</TitleBar>\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush from Predefined Brush (C#)\nDESCRIPTION: This C# code snippet demonstrates setting the Background property of a Border to a predefined SolidColorBrush object from the Brush class (Brush.Indigo).  It shows how to access the static Brush.Indigo property in code. The Stroke property is set to LightGray using the Colors class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/solidcolor.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nBorder border = new Border\n{\n    Background = Brush.Indigo,\n    Stroke = Colors.LightGray,\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Visual States on a .NET MAUI Entry in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define visual states for a .NET MAUI Entry using the VisualStateManager. It sets the background color to Lime in the Normal state, doubles the font size in the Focused state, sets the background color to Pink in the Disabled state, and sets the background color to LightBlue in the PointerOver state. The VisualStateGroup is named CommonStates and the Setter objects are used to modify the properties of the Entry.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Entry FontSize=\"18\">\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Lime\" />\n                    </VisualState.Setters>\n                </VisualState>\n\n                <VisualState Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"FontSize\" Value=\"36\" />\n                    </VisualState.Setters>\n                </VisualState>\n\n                <VisualState Name=\"Disabled\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                    </VisualState.Setters>\n                </VisualState>\n\n                <VisualState Name=\"PointerOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</Entry>\n```\n\n----------------------------------------\n\nTITLE: Perform navigation with relative route in C#\nDESCRIPTION: This C# snippet illustrates how to perform navigation using a relative URI with the GoToAsync method.  It navigates to the page for the 'monkeydetails' route. Relative routes only work with pages registered using Routing.RegisterRoute and cannot be used with pages defined directly in AppShell.xaml.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nawait Shell.Current.GoToAsync(\"monkeydetails\");\n```\n\n----------------------------------------\n\nTITLE: Committing an Animation in C#\nDESCRIPTION: This code snippet shows how to commit and start an animation using the `Commit` method. It defines the animation's owner, name, rate, length, easing function, finished callback, and repeat callback. This triggers the animation defined earlier to run and modify the `Scale` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nanimation.Commit(this, \"SimpleAnimation\", 16, 2000, Easing.Linear, (v, c) => image.Scale = 1, () => true);\n```\n\n----------------------------------------\n\nTITLE: Call CreateMauiApp from UI Project in MauiProgram C#\nDESCRIPTION: This code snippet demonstrates how to update the `MauiProgram` class in the test harness app to call the `CreateMauiApp` method from the .NET MAUI UI project. It calls the overloaded `CreateMauiApp` method, specifying the `TestApp` as the generic argument.  An optional `Action<MauiAppBuilder>` is passed to allow configuration of services. This redirects the app creation to the .NET MAUI UI project, which initializes the .NET MAUI UI and enables the test harness app to display it. This facilitates XAML hot reload by providing the .NET MAUI runtime within the test harness app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp() =>\n            NativeEmbeddingDemo.MauiProgram.CreateMauiApp<TestApp>(builder =>\n            {\n                // Add any test harness configuration such as service stubs or mocks.\n            });\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Endpoints in C#\nDESCRIPTION: This C# code snippet implements the CreateOrUpdateInstallationAsync, DeleteInstallationByIdAsync and RequestNotificationAsync methods, which handles device installation updates, installation deletion, and push notification requests.  It uses HTTP PUT, DELETE, and POST methods to perform these operations.  It also defines response types using ProducesResponseType attributes and returns appropriate HTTP status codes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut]\n[Route(\"installations\")]\n[ProducesResponseType((int)HttpStatusCode.OK)]\n[ProducesResponseType((int)HttpStatusCode.BadRequest)]\n[ProducesResponseType((int)HttpStatusCode.UnprocessableEntity)]\npublic async Task<IActionResult> UpdateInstallation(\n    [Required] DeviceInstallation deviceInstallation)\n{\n    var success = await _notificationService\n        .CreateOrUpdateInstallationAsync(deviceInstallation, HttpContext.RequestAborted);\n\n    if (!success)\n        return new UnprocessableEntityResult();\n\n    return new OkResult();\n}\n\n[HttpDelete()]\n[Route(\"installations/{installationId}\")]\n[ProducesResponseType((int)HttpStatusCode.OK)]\n[ProducesResponseType((int)HttpStatusCode.BadRequest)]\n[ProducesResponseType((int)HttpStatusCode.UnprocessableEntity)]\npublic async Task<ActionResult> DeleteInstallation(\n    [Required][FromRoute] string installationId)\n{\n    // Probably want to ensure deletion even if the connection is broken\n    var success = await _notificationService\n        .DeleteInstallationByIdAsync(installationId, CancellationToken.None);\n\n    if (!success)\n        return new UnprocessableEntityResult();\n\n    return new OkResult();\n}\n\n[HttpPost]\n[Route(\"requests\")]\n[ProducesResponseType((int)HttpStatusCode.OK)]\n[ProducesResponseType((int)HttpStatusCode.BadRequest)]\n[ProducesResponseType((int)HttpStatusCode.UnprocessableEntity)]\npublic async Task<IActionResult> RequestPush(\n    [Required] NotificationRequest notificationRequest)\n{\n    if ((notificationRequest.Silent &&\n        string.IsNullOrWhiteSpace(notificationRequest?.Action)) ||\n        (!notificationRequest.Silent &&\n        string.IsNullOrWhiteSpace(notificationRequest?.Text)))\n        return new BadRequestResult();\n\n    var success = await _notificationService\n        .RequestNotificationAsync(notificationRequest, HttpContext.RequestAborted);\n\n    if (!success)\n        return new UnprocessableEntityResult();\n\n    return new OkResult();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decorations in XAML - MAUI\nDESCRIPTION: This XAML snippet demonstrates how to apply underline and strikethrough text decorations to Label controls using the TextDecorations property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"This is underlined text.\" TextDecorations=\"Underline\"  />\n<Label Text=\"This is text with strikethrough.\" TextDecorations=\"Strikethrough\" />\n<Label Text=\"This is underlined text with strikethrough.\" TextDecorations=\"Underline, Strikethrough\" />\n```\n\n----------------------------------------\n\nTITLE: Binding StackLayout to a collection using BindableLayout in XAML\nDESCRIPTION: This XAML code demonstrates how to bind a StackLayout to a collection of items using BindableLayout.ItemsSource and defines their appearance using BindableLayout.ItemTemplate with a DataTemplate.  Each item in the collection is displayed as an Image with specified source, aspect, width, and height.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout BindableLayout.ItemsSource=\"{Binding User.TopFollowers}\"\n             Orientation=\"Horizontal\">\n    <BindableLayout.ItemTemplate>\n        <DataTemplate x:DataType=\"sys:String\">\n            <Image Source=\"{Binding}\"\n                   Aspect=\"AspectFill\"\n                   WidthRequest=\"44\"\n                   HeightRequest=\"44\" />\n        </DataTemplate>\n    </BindableLayout.ItemTemplate>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing IDrawable for Graphics in C#\nDESCRIPTION: This code snippet demonstrates how to implement the `IDrawable` interface in C# to create a custom drawable object for use with the `GraphicsView` control.  The `Draw` method is where the drawing logic is implemented, utilizing the `ICanvas` and `RectF` parameters. This requires the `Microsoft.Maui.Graphics` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public class GraphicsDrawable : IDrawable\n    {\n        public void Draw(ICanvas canvas, RectF dirtyRect)\n        {\n            // Drawing code goes here\n        }      \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Navigation in MAUI Shell\nDESCRIPTION: This snippet shows how to defer navigation in a MAUI Shell application, allowing users to confirm or cancel navigation requests. It uses `ShellNavigatingDeferral` to hold the navigation until a user action is taken.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic MyShell : Shell\n{\n    // ...\n    protected override async void OnNavigating(ShellNavigatingEventArgs args)\n    {\n        base.OnNavigating(args);\n\n        ShellNavigatingDeferral token = args.GetDeferral();\n\n        var result = await DisplayActionSheetAsync(\"Navigate?\", \"Cancel\", \"Yes\", \"No\");\n        if (result != \"Yes\")\n        {\n            args.Cancel();\n        }\n        token.Complete();\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Set Modal Presentation Style in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the modal presentation style of a ContentPage to OverFullScreen using the fluent API and the On<iOS>() method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-presentation-style.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\npublic class iOSModalFormSheetPageCode : ContentPage\n{\n    public iOSModalFormSheetPageCode()\n    {\n        On<iOS>().SetModalPresentationStyle(UIModalPresentationStyle.OverFullScreen);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grid CollectionView Definition in XAML\nDESCRIPTION: Defines a CollectionView in XAML to display items in a horizontal grid with four rows. It binds to the `Monkeys` data source and uses a DataTemplate to define the appearance of each item within a Grid. The `ItemsLayout` property is set to `HorizontalGrid, 4` to achieve the four-row horizontal grid layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                ItemsLayout=\"HorizontalGrid, 4\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <Grid Padding=\"10\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"35\" />\n                    <RowDefinition Height=\"35\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"70\" />\n                    <ColumnDefinition Width=\"140\" />\n                </Grid.ColumnDefinitions>\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\"\n                       LineBreakMode=\"TailTruncation\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       LineBreakMode=\"TailTruncation\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button in C# (>=net-maui-10.0)\nDESCRIPTION: This C# code demonstrates how to create a Button instance programmatically. The Text, VerticalOptions, and HorizontalOptions properties are set, and a lambda expression is used to handle the Clicked event. The event handler rotates a label by 360 degrees over 1 second.  This version uses RelRotateToAsync.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nButton button = new Button\n{\n    Text = \"Click to Rotate Text!\",\n    VerticalOptions = LayoutOptions.Center,\n    HorizontalOptions = LayoutOptions.Center\n};\nbutton.Clicked += async (sender, args) => await label.RelRotateToAsync(360, 1000);\n```\n\n----------------------------------------\n\nTITLE: TapGestureRecognizer with Primary and Secondary Buttons in C#\nDESCRIPTION: This C# code programmatically creates a TapGestureRecognizer that responds to taps from both the primary and secondary mouse buttons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nTapGestureRecognizer tapGestureRecognizer = new TapGestureRecognizer\n{\n    Buttons = ButtonsMask.Primary | ButtonsMask.Secondary\n};\n```\n\n----------------------------------------\n\nTITLE: Define Bindable Property in ContentView C#\nDESCRIPTION: This code snippet demonstrates how to define a bindable property within a ContentView-derived class in C#. The `CardTitleProperty` is created using `BindableProperty.Create`. The `CardTitle` property then uses `GetValue` and `SetValue` to interact with the bindable property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/contentview.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class CardView : ContentView\n{\n    public static readonly BindableProperty CardTitleProperty = BindableProperty.Create(nameof(CardTitle), typeof(string), typeof(CardView), string.Empty);\n\n    public string CardTitle\n    {\n        get => (string)GetValue(CardView.CardTitleProperty);\n        set => SetValue(CardView.CardTitleProperty, value);\n    }\n    // ...\n\n    public CardView()\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Effect in XAML\nDESCRIPTION: This XAML code demonstrates how to consume a .NET MAUI effect by adding it to the Effects collection of a control. It adds the FocusRoutingEffect to the Effects collection of an Entry control. The namespace alias 'local' is used to reference the effect within the XAML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/effects.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MyMauiApp.Effects\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <VerticalStackLayout>\n        <Entry Text=\"Enter your text\">\n            <Entry.Effects>\n                <local:FocusRoutingEffect />\n            </Entry.Effects>\n        </Entry>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Drawing Strings in .NET MAUI Graphics\nDESCRIPTION: This code snippet demonstrates how to draw strings with different appearance and alignment options on an ICanvas using the DrawString method. It sets the font color, font size, and font, and then draws strings with left, center, and right horizontal alignment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FontColor = Colors.Blue;\ncanvas.FontSize = 18;\n\ncanvas.Font = Font.Default;\ncanvas.DrawString(\"Text is left aligned.\", 20, 20, 380, 100, HorizontalAlignment.Left, VerticalAlignment.Top);\ncanvas.DrawString(\"Text is centered.\", 20, 60, 380, 100, HorizontalAlignment.Center, VerticalAlignment.Top);\ncanvas.DrawString(\"Text is right aligned.\", 20, 100, 380, 100, HorizontalAlignment.Right, VerticalAlignment.Top);\n\ncanvas.Font = Font.DefaultBold;\ncanvas.DrawString(\"This text is displayed using the bold system font.\", 20, 140, 350, 100, HorizontalAlignment.Left, VerticalAlignment.Top);\n\ncanvas.Font = new Font(\"Arial\");\ncanvas.FontColor = Colors.Black;\ncanvas.SetShadow(new SizeF(6, 6), 4, Colors.Gray);\ncanvas.DrawString(\"This text has a shadow.\", 20, 200, 300, 100, HorizontalAlignment.Left, VerticalAlignment.Top);\n```\n\n----------------------------------------\n\nTITLE: AboutPage XAML Update for MVVM\nDESCRIPTION: This snippet updates the AboutPage.xaml file to bind to the AboutViewModel. It changes the XML namespace, sets the BindingContext to a new instance of the AboutViewModel, and replaces the button's Clicked event handler with a Command binding. This allows the button to execute the ShowMoreInfoCommand in the viewmodel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-about.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewModels=\"clr-namespace:Notes.ViewModels\"\n             x:Class=\"Notes.Views.AboutPage\"\n             Title=\"About\">\n    <ContentPage.BindingContext>\n        <viewModels:AboutViewModel />\n    </ContentPage.BindingContext>\n    <VerticalStackLayout Padding=\"10\">\n        <HorizontalStackLayout Margin=\"0,20,0,0\">\n            <Image Source=\"dotnet_bot.png\"\n                   SemanticProperties.Description=\"The dot net bot waving hello!\"\n                   HeightRequest=\"64\" />\n            <Label FontSize=\"22\" FontAttributes=\"Bold\"\n                   Text=\"{Binding Title}\"\n                   VerticalOptions=\"End\" />\n            <Label FontSize=\"22\"\n                   Text=\"({Binding Version})\"\n                   VerticalOptions=\"End\" />\n        </HorizontalStackLayout>\n\n        <Label Text=\"{Binding Message}\" />\n        <Button Text=\"Learn more...\"\n                Command=\"{Binding ShowMoreInfoCommand}\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Loading a Remote Image in XAML\nDESCRIPTION: This XAML snippet demonstrates how to load and display an image from a remote URI within a .NET MAUI application. It sets the Source property of the Image control to the URI of the image, allowing the application to download and display the image from the specified web address.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"https://aka.ms/campus.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Hint Property in C# - MAUI\nDESCRIPTION: This C# code snippet shows how to set the `Hint` attached property of `SemanticProperties` programmatically.  It creates an `Image` and then sets both the `Description` and `Hint` properties using the `SemanticProperties.SetHint` and `SemanticProperties.SetDescription` methods.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nImage image = new Image { Source = \"like.png\" };\nSemanticProperties.SetDescription(image, \"Like\");\nSemanticProperties.SetHint(image, \"Like this post.\");\n```\n\n----------------------------------------\n\nTITLE: Binding and Navigation in .NET MAUI Code-Behind\nDESCRIPTION: This C# code-behind snippet for AllNotesPage handles binding the view to the AllNotes model and managing navigation.  The OnAppearing method refreshes the note list whenever the page is displayed. The Add_Clicked handler navigates to the NotePage for creating new notes, and the notesCollection_SelectionChanged handler navigates to the NotePage with a selected note's filename as a query parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Views;\n\npublic partial class AllNotesPage : ContentPage\n{\n    public AllNotesPage()\n    {\n        InitializeComponent();\n\n        BindingContext = new Models.AllNotes();\n    }\n\n    protected override void OnAppearing()\n    {\n        base.OnAppearing();\n\n        ((Models.AllNotes)BindingContext).LoadNotes();\n    }\n\n    private async void Add_Clicked(object sender, EventArgs e)\n    {\n        await Shell.Current.GoToAsync(nameof(NotePage));\n    }\n\n    private async void notesCollection_SelectionChanged(object sender, SelectionChangedEventArgs e)\n    {\n        if (notesCollection.SelectedItem != null)\n        {\n            // Navigate to the NotePage, passing the filename as a query parameter\n            string filename = ((Models.Note)notesCollection.SelectedItem).Filename;\n            await Shell.Current.GoToAsync($\"{nameof(NotePage)}?ItemId={filename}\");\n\n            // Because selection mode is single, clear the selected item\n            notesCollection.SelectedItem = null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Usage Descriptions (iOS/MacCatalyst) XML\nDESCRIPTION: This XML snippet shows how to add usage descriptions to the Info.plist file for iOS and MacCatalyst platforms. These descriptions explain why the app needs access to the camera, microphone, and photo library, which are necessary for capturing photos and videos. These messages are displayed to the user when the app requests permission.\nDependencies: iOS or MacCatalyst project, Info.plist\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/picker.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>This app needs access to the camera to take photos.</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>This app needs access to microphone for taking videos.</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>This app needs access to the photo gallery for picking photos and videos.</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>This app needs access to photos gallery for picking photos and videos.</string>\n```\n\n----------------------------------------\n\nTITLE: Populating Items Collection (XAML)\nDESCRIPTION: This XAML code demonstrates how to populate the `Items` collection of a `Picker` control with a list of strings. Each string represents an item in the picker's dropdown list.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Picker Title=\"Select a monkey\">\n  <Picker.Items>\n    <x:String>Baboon</x:String>\n    <x:String>Capuchin Monkey</x:String>\n    <x:String>Blue Monkey</x:String>\n    <x:String>Squirrel Monkey</x:String>\n    <x:String>Golden Lion Tamarin</x:String>\n    <x:String>Howler Monkey</x:String>\n    <x:String>Japanese Macaque</x:String>\n  </Picker.Items>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: AlignSelf Property Usage in C#\nDESCRIPTION: This snippet demonstrates how to set the AlignSelf property on a Label within a FlexLayout using C# code.  The FlexLayout.SetAlignSelf method is used to apply the alignment to the Label instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label();\nFlexLayout.SetAlignSelf(label, FlexAlignSelf.Center);\n```\n\n----------------------------------------\n\nTITLE: Receiving Navigation Data using QueryPropertyAttribute in .NET MAUI\nDESCRIPTION: This example shows how to receive navigation data in a .NET MAUI page using the QueryPropertyAttribute. The attribute is used to map a query parameter to a property in the receiving class. The Bear property is populated with the value of the Bear navigation parameter passed during navigation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[QueryProperty(nameof(Bear), \"Bear\")]\npublic partial class BearDetailPage : ContentPage\n{\n    Animal bear;\n    public Animal Bear\n    {\n        get => bear;\n        set\n        {\n            bear = value;\n            OnPropertyChanged();\n        }\n    }\n\n    public BearDetailPage()\n    {\n        InitializeComponent();\n        BindingContext = this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TableView with TextCells in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a TableView with a TableRoot and TableSection containing multiple TextCell objects.  The TableView's Intent is set to Menu, and each TextCell displays primary text in the Text property and secondary text in the Detail property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TableView Intent=\"Menu\">\n    <TableRoot>\n        <TableSection Title=\"Chapters\">\n            <TextCell Text=\"1. Introduction to .NET MAUI\"\n                      Detail=\"Learn about .NET MAUI and what it provides.\" />\n            <TextCell Text=\"2. Anatomy of an app\"\n                      Detail=\"Learn about the visual elements in .NET MAUI\" />\n            <TextCell Text=\"3. Text\"\n                      Detail=\"Learn about the .NET MAUI controls that display text.\" />\n            <TextCell Text=\"4. Dealing with sizes\"\n                      Detail=\"Learn how to size .NET MAUI controls on screen.\" />\n            <TextCell Text=\"5. XAML vs code\"\n                      Detail=\"Learn more about creating your UI in XAML.\" />\n        </TableSection>\n    </TableRoot>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Presentation Mode in .NET MAUI Shell\nDESCRIPTION: This XAML example illustrates how to set the Shell.PresentationMode attached property on a ContentPage within a .NET MAUI Shell application. This controls how the page is presented (e.g., modal, animated) when navigated to.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             Shell.PresentationMode=\"Modal\">\n    ...             \n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Consuming PersonCollectionViewModel in XAML\nDESCRIPTION: This XAML code defines a `ContentPage` that uses the `PersonCollectionViewModel` as its `BindingContext`. It includes a `Button` bound to the `NewCommand`, an entry form for editing `PersonViewModel` properties, and `Buttons` bound to the `SubmitCommand` and `CancelCommand`. A `ListView` is used to display the collection of `Persons`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.PersonEntryPage\"\n             Title=\"Person Entry\"\n             x:DataType=\"local:PersonCollectionViewModel\">             \n    <ContentPage.BindingContext>\n        <local:PersonCollectionViewModel />\n    </ContentPage.BindingContext>\n    <Grid Margin=\"10\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"*\" />\n        </Grid.RowDefinitions>\n\n        <!-- New Button -->\n        <Button Text=\"New\"\n                Grid.Row=\"0\"\n                Command=\"{Binding NewCommand}\"\n                HorizontalOptions=\"Start\" />\n\n        <!-- Entry Form -->\n        <Grid Grid.Row=\"1\"\n              IsEnabled=\"{Binding IsEditing}\">\n            <Grid x:DataType=\"local:PersonViewModel\"\n                  BindingContext=\"{Binding PersonEdit}\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"Auto\" />\n                    <ColumnDefinition Width=\"*\" />\n                </Grid.ColumnDefinitions>\n\n                <Label Text=\"Name: \" Grid.Row=\"0\" Grid.Column=\"0\" />\n                <Entry Text=\"{Binding Name}\"\n                       Grid.Row=\"0\" Grid.Column=\"1\" />\n                <Label Text=\"Age: \" Grid.Row=\"1\" Grid.Column=\"0\" />\n                <StackLayout Orientation=\"Horizontal\"\n                             Grid.Row=\"1\" Grid.Column=\"1\">\n                    <Stepper Value=\"{Binding Age}\"\n                             Maximum=\"100\" />\n                    <Label Text=\"{Binding Age, StringFormat='{0} years old'}\"\n                           VerticalOptions=\"Center\" />\n                </StackLayout>\n                <Label Text=\"Skills: \" Grid.Row=\"2\" Grid.Column=\"0\" />\n                <Entry Text=\"{Binding Skills}\"\n                       Grid.Row=\"2\" Grid.Column=\"1\" />\n            </Grid>\n        </Grid>\n\n        <!-- Submit and Cancel Buttons -->\n        <Grid Grid.Row=\"2\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"*\" />\n                <ColumnDefinition Width=\"*\" />\n            </Grid.ColumnDefinitions>\n\n            <Button Text=\"Submit\"\n                    Grid.Column=\"0\"\n                    Command=\"{Binding SubmitCommand}\"\n                    VerticalOptions=\"Center\" />\n            <Button Text=\"Cancel\"\n                    Grid.Column=\"1\"\n                    Command=\"{Binding CancelCommand}\"\n                    VerticalOptions=\"Center\" />\n        </Grid>\n\n        <!-- List of Persons -->\n        <ListView Grid.Row=\"3\"\n                  ItemsSource=\"{Binding Persons}\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: CarouselView Vertical Layout C#\nDESCRIPTION: This C# code programmatically creates a CarouselView with a vertical layout by setting the ItemsLayout property to LinearItemsLayout.Vertical. Dependencies: Microsoft.Maui.Controls\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ...\n    ItemsLayout = LinearItemsLayout.Vertical\n};\n```\n\n----------------------------------------\n\nTITLE: Localize Text in C# Code\nDESCRIPTION: This snippet demonstrates how to access localized strings from the `AppResources` class in C# code. It sets the `Text` property of a `Label`, the `Placeholder` of an `Entry`, and the `Text` property of a `Button` using the static properties of the `AppResources` class, which are populated from the resource files. The culture is determined by `CultureInfo.CurrentUICulture`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nLabel notesLabel = new Label();\nnotesLabel.Text = AppResources.NotesLabel,\n\nEntry notesEntry = new Entry();\nnotesEntry.Placeholder = AppResources.NotesPlaceholder,\n\nButton addButton = new Button();\naddButton.Text = AppResources.AddButton,\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI Style Classes in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define style classes for BoxView and VisualElement in MAUI.  It defines styles with the `Class` attribute and sets properties such as `BackgroundColor`, `HeightRequest`, `CornerRadius`, and `Rotation`. The `ApplyToDerivedTypes` property is used to apply a style to all derived types of VisualElement.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style TargetType=\"BoxView\"\n               Class=\"Separator\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"#CCCCCC\" />\n            <Setter Property=\"HeightRequest\"\n                    Value=\"1\" />\n        </Style>\n\n        <Style TargetType=\"BoxView\"\n               Class=\"Rounded\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"#1FAECE\" />\n            <Setter Property=\"HorizontalOptions\"\n                    Value=\"Start\" />\n            <Setter Property=\"CornerRadius\"\n                    Value=\"10\" />\n        </Style>    \n\n        <Style TargetType=\"BoxView\"\n               Class=\"Circle\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"#1FAECE\" />\n            <Setter Property=\"WidthRequest\"\n                    Value=\"100\" />\n            <Setter Property=\"HeightRequest\"\n                    Value=\"100\" />\n            <Setter Property=\"HorizontalOptions\"\n                    Value=\"Start\" />\n            <Setter Property=\"CornerRadius\"\n                    Value=\"50\" />\n        </Style>\n\n        <Style TargetType=\"VisualElement\"\n               Class=\"Rotated\"\n               ApplyToDerivedTypes=\"true\">\n            <Setter Property=\"Rotation\"\n                    Value=\"45\" />\n        </Style>        \n    </ContentPage.Resources>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: ScrollView as a Child Layout (C#)\nDESCRIPTION: This C# code creates a similar layout structure programmatically as the previous XAML example. It demonstrates how to create a Grid with RowDefinitions, add a ScrollView as a child, and populate the ScrollView with content using a StackLayout and Label controls. The RowDefinitions of the Grid are set to Auto, Star, and Auto to manage the space allocation for each row.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlackCatPage : ContentPage\n{\n    public BlackCatPage()\n    {\n        Label titleLabel = new Label\n        {\n            Text = \"THE BLACK CAT by Edgar Allan Poe\",\n            // More properties set here to define the Label appearance\n        };\n\n        StackLayout stackLayout = new StackLayout();\n        stackLayout.Add(new Label { Text = \"FOR the most wild, yet most homely narrative which I am about to pen, I neither expect nor solicit belief. Mad indeed would I be to expect it, in a case where my very senses reject their own evidence. Yet, mad am I not -- and very surely do I not dream. But to-morrow I die, and to-day I would unburthen my soul. My immediate purpose is to place before the world, plainly, succinctly, and without comment, a series of mere household events. In their consequences, these events have terrified -- have tortured -- have destroyed me. Yet I will not attempt to expound them. To me, they have presented little but Horror -- to many they will seem less terrible than barroques. Hereafter, perhaps, some intellect may be found which will reduce my phantasm to the common-place -- some intellect more calm, more logical, and far less excitable than my own, which will perceive, in the circumstances I detail with awe, nothing more than an ordinary succession of very natural causes and effects.\" });\n        // More Label objects go here\n\n        ScrollView scrollView = new ScrollView();\n        scrollView.Content = stackLayout;\n        // ...\n\n        Title = \"ScrollView as a child layout demo\";\n        Grid grid = new Grid\n        {\n            Margin = new Thickness(20),\n            RowDefinitions =\n            {\n                new RowDefinition { Height = new GridLength(0, GridUnitType.Auto) },\n                new RowDefinition { Height = new GridLength(1, GridUnitType.Star) },\n                new RowDefinition { Height = new GridLength(0, GridUnitType.Auto) }\n            }\n        };\n        grid.Add(titleLabel);\n        grid.Add(scrollView, 0, 1);\n        grid.Add(button, 0, 2);\n\n        Content = grid;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemsSource Binding C#\nDESCRIPTION: This C# snippet demonstrates how to populate a CarouselView with data using data binding programmatically. It binds the ItemsSourceProperty of the CarouselView to the Monkeys property of a MonkeysViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView();\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Populate TabbedPage with Page collection (XAML)\nDESCRIPTION: This XAML code demonstrates how to populate a TabbedPage with a collection of child Page objects, specifically ContentPage objects, by adding them as direct children within the TabbedPage element. The Title and IconImageSource properties of each ContentPage will determine the appearance of the corresponding tab.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/tabbedpage.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n            xmlns:local=\"clr-namespace:TabbedPageWithNavigationPage\"\n            x:Class=\"TabbedPageWithNavigationPage.MainPage\">\n    <local:TodayPage />\n    <local:SchedulePage />\n    <local:SettingsPage />\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Check if a Preference Key Exists in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to check if a preference key exists using the Preferences.ContainsKey method in .NET MAUI. It takes a string key as input and returns a boolean value indicating whether the key exists in the preferences. This method is useful to differentiate between a missing key and a key whose value matches the default value provided in the Get method. No external dependencies beyond the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/preferences.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbool hasKey = Preferences.ContainsKey(\"my_key\");\n```\n\n----------------------------------------\n\nTITLE: Positioning and Sizing Window on Startup - C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically position and size a window on application startup by overriding the `CreateWindow` method in the `App` class. It sets the `Width`, `Height`, `X`, and `Y` properties of the `Window` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n\n    protected override Window CreateWindow(IActivationState activationState) =>\n        new Window(new AppShell())\n        {\n            Width = 700,\n            Height = 500,\n            X = 100,\n            Y = 100\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: Slider Initialization in XAML\nDESCRIPTION: This XAML snippet demonstrates how to correctly initialize a Slider by setting the Maximum property before the Minimum property. This ensures that Minimum is always less than Maximum during initialization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Slider Maximum=\"20\"\n        Minimum=\"10\" ... />\n```\n\n----------------------------------------\n\nTITLE: Processing Query Parameters using IQueryAttributable in C#\nDESCRIPTION: This C# code snippet demonstrates how to process query parameters using the IQueryAttributable interface in .NET MAUI. The ElephantDetailViewModel class implements the IQueryAttributable interface, allowing it to receive and process query parameters through the ApplyQueryAttributes method. This method retrieves the 'name' and 'location' parameters from the query dictionary.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ElephantDetailViewModel : IQueryAttributable, INotifyPropertyChanged\n{\n    public Animal Elephant { get; private set; }\n\n    public void ApplyQueryAttributes(IDictionary<string, object> query)\n    {\n        string name = HttpUtility.UrlDecode(query[\"name\"].ToString());\n        string location = HttpUtility.UrlDecode(query[\"location\"].ToString());\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Register Custom Handler in MauiProgram C#\nDESCRIPTION: This snippet demonstrates how to register a custom handler for a control within the `CreateMauiApp` method of the `MauiProgram` class. It configures the application to use the custom handler for the specified control type, enabling custom rendering logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing MyMauiControl.Controls;\nusing MyMauiControl.Handlers;\n\nnamespace MyMauiControl;\n\npublic static class MauiProgram\n{\n  public static MauiApp CreateMauiApp()\n  {\n    var builder = MauiApp.CreateBuilder();\n    builder\n      .UseMauiApp<App>()\n      .ConfigureFonts(fonts =>\n      {\n        fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n        fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n      })\n      .ConfigureMauiHandlers(handlers =>\n      {\n        handlers.AddHandler(typeof(CustomEntry), typeof(CustomEntryHandler));\n      });\n\n#if DEBUG\n    builder.Logging.AddDebug();\n#endif\n\n    return builder.Build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Listening for Location Changes in Foreground (MAUI C#)\nDESCRIPTION: This code snippet demonstrates how to start listening for location changes while the MAUI app is in the foreground. It registers a location change event handler, creates a GeolocationListeningRequest with a specified accuracy, and starts listening using Geolocation.StartListeningForegroundAsync. Error handling is included for potential exceptions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnStartListening()\n{\n    try\n    {\n        Geolocation.LocationChanged += Geolocation_LocationChanged;\n        var request = new GeolocationListeningRequest((GeolocationAccuracy)Accuracy);\n        var success = await Geolocation.StartListeningForegroundAsync(request);\n\n        string status = success\n            ? \"Started listening for foreground location updates\"\n            : \"Couldn't start listening\";\n    }\n    catch (Exception ex)\n    {\n        // Unable to start listening for location changes\n    }\n}\n\nvoid Geolocation_LocationChanged(object sender, GeolocationLocationChangedEventArgs e)\n{\n    // Process e.Location to get the new location\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Traffic Data - C#\nDESCRIPTION: This C# code enables traffic data overlay on a .NET MAUI Map. A new Map object is created, and its IsTrafficEnabled property is set to true, which displays traffic information on the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map\n{\n    IsTrafficEnabled = true\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Transport Controls in MauiVideoPlayer\nDESCRIPTION: This code snippet demonstrates how to enable or disable the default transport controls on the Android VideoView using the MediaController. The `UpdateTransportControlsEnabled` method checks the `Video.AreTransportControlsEnabled` property and either sets or removes the MediaController accordingly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : CoordinatorLayout\n{\n    VideoView _videoView;\n    MediaController _mediaController;\n    Video _video;\n    ...\n\n    public void UpdateTransportControlsEnabled()\n    {\n        if (_video.AreTransportControlsEnabled)\n        {\n            _mediaController = new MediaController(_context);\n            _mediaController.SetMediaPlayer(_videoView);\n            _videoView.SetMediaController(_mediaController);\n        }\n        else\n        {\n            _videoView.SetMediaController(null);\n            if (_mediaController != null)\n            {\n                _mediaController.SetMediaPlayer(null);\n                _mediaController = null;\n            }\n        }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: CollectionView Header and Footer as Views in XAML\nDESCRIPTION: Defines a CollectionView in XAML where the header and footer are set to StackLayouts containing Labels. The header and footer are implemented as views, allowing for more complex layouts and styling. The CollectionView binds to a `Monkeys` data source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_15\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.Header>\n        <StackLayout BackgroundColor=\"LightGray\">\n            <Label Margin=\"10,0,0,0\"\n                   Text=\"Monkeys\"\n                   FontSize=\"12\"\n                   FontAttributes=\"Bold\" />\n        </StackLayout>\n    </CollectionView.Header>\n    <CollectionView.Footer>\n        <StackLayout BackgroundColor=\"LightGray\">\n            <Label Margin=\"10,0,0,0\"\n                   Text=\"Friends of Xamarin Monkey\"\n                   FontSize=\"12\"\n                   FontAttributes=\"Bold\" />\n        </StackLayout>\n    </CollectionView.Footer>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic HeadingLevel Property with SetValue - MAUI\nDESCRIPTION: This C# snippet uses the `SetValue` method to set the `HeadingLevel` attached property, similar to setting the `Hint` property. It also requires an instance of `BindableObject` (Label in this case).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nlabel1.SetValue(SemanticProperties.HeadingLevelProperty, SemanticHeadingLevel.Level1);\n```\n\n----------------------------------------\n\nTITLE: Update Android MainApplication Class (C#)\nDESCRIPTION: Shows how to update the `MainApplication` class in a .NET MAUI Android project. The class must inherit from `MauiApplication` and override the `CreateMauiApp` method to return the result of `MauiProgram.CreateMauiApp()`. Required dependencies: Android.App, Android.Runtime, Microsoft.Maui, Microsoft.Maui.Hosting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Android.App;\nusing Android.Runtime;\nusing Microsoft.Maui;\nusing Microsoft.Maui.Hosting;\nusing YOUR_MAUI_CLASS_LIB_HERE;\n\nnamespace YOUR_NAMESPACE_HERE.Droid\n{\n    [Application]\n    public class MainApplication : MauiApplication\n    {\n        public MainApplication(IntPtr handle, JniHandleOwnership ownership) : base(handle, ownership)\n        {\n        }\n\n        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Grid CollectionView with GridItemsLayout in XAML\nDESCRIPTION: Defines a CollectionView in XAML to display items in a vertical grid using `GridItemsLayout`. The `Orientation` is set to `Vertical` and `Span` is set to `2`, resulting in a two-column vertical grid. It requires the `Microsoft.Maui.Controls` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n       <GridItemsLayout Orientation=\"Vertical\"\n                        Span=\"2\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Define BlazorWebView in XAML\nDESCRIPTION: Defines a BlazorWebView control in a .NET MAUI ContentPage. It specifies the HostPage, which points to the root HTML file of the Blazor app (wwwroot/index.html), and a RootComponent, which identifies the root Razor component (Main) to be rendered within the specified CSS selector (#app). This is the typical usage within a .NET MAUI XAML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:BlazorWebViewDemo\"\n             x:Class=\"BlazorWebViewDemo.MainPage\"\n             BackgroundColor=\"{DynamicResource PageBackgroundColor}\">\n\n    <BlazorWebView HostPage=\"wwwroot/index.html\">\n        <BlazorWebView.RootComponents>\n            <RootComponent Selector=\"#app\" ComponentType=\"{x:Type local:Main}\" />\n        </BlazorWebView.RootComponents>\n    </BlazorWebView>\n\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: SelectionChanged Event Handler - C#\nDESCRIPTION: This C# event handler clears the selected item in a CollectionView when the selection changes, allowing the user to reselect the same item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    var cv = (CollectionView)sender;\n    if (cv.SelectedItem == null)\n        return;\n\n    cv.SelectedItem = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with DataTemplate - XAML\nDESCRIPTION: This code snippet demonstrates how to define the appearance of each item in a ListView using a DataTemplate. It uses a Grid layout within a ViewCell to display an image and two labels, bound to properties of a Monkey class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <ViewCell>\n                <Grid Padding=\"10\">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height=\"Auto\" />\n                        <RowDefinition Height=\"Auto\" />\n                    </Grid.RowDefinitions>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"Auto\" />\n                        <ColumnDefinition Width=\"Auto\" />\n                    </Grid.ColumnDefinitions>\n                    <Image Grid.RowSpan=\"2\"\n                           Source=\"{Binding ImageUrl}\"\n                           Aspect=\"AspectFill\"\n                           HeightRequest=\"60\"\n                           WidthRequest=\"60\" />\n                    <Label Grid.Column=\"1\"\n                           Text=\"{Binding Name}\"\n                           FontAttributes=\"Bold\" />\n                    <Label Grid.Row=\"1\"\n                           Grid.Column=\"1\"\n                           Text=\"{Binding Location}\"\n                           FontAttributes=\"Italic\"\n                           VerticalOptions=\"End\" />\n                </Grid>\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Handlers with Extension Method - .NET MAUI\nDESCRIPTION: Shows the usage of the `DisconnectHandlers` extension method to disconnect handlers from a given `IView`.  When disconnecting, the method will propagate down the control tree until it completes or arrives at a control that has set a manual policy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nvideo.DisconnectHandlers();\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grid CollectionView in C#\nDESCRIPTION: Creates a CollectionView in C# to display items in a horizontal grid. It initializes a `GridItemsLayout` with a span of 4 and a horizontal orientation. This C# code is functionally equivalent to the previous XAML example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = new GridItemsLayout(4, ItemsLayoutOrientation.Horizontal)\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET MAUI iOS app via dotnet CLI\nDESCRIPTION: This command builds and signs a .ipa file for a .NET MAUI iOS app using the dotnet CLI. It specifies the target framework, configuration, enables archive creation, sets the runtime identifier, and defines the code signing key and provisioning profile.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/deployment/publish-cli.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-ios -c Release -p:ArchiveOnBuild=true -p:RuntimeIdentifier=ios-arm64 -p:CodesignKey=\"Apple Distribution: John Smith (AY2GDE9QM7)\" -p:CodesignProvision=\"MyMauiApp\"\n```\n\n----------------------------------------\n\nTITLE: Draw a Line on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a red line on an ICanvas object using the DrawLine method. It sets the stroke color to red and the stroke size to 6 before drawing the line from coordinates (10, 10) to (90, 100).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 6;\ncanvas.DrawLine(10, 10, 90, 100);\n```\n\n----------------------------------------\n\nTITLE: Change ProgressBar Color in C#\nDESCRIPTION: This C# snippet shows how to set the color of a ProgressBar to Orange using the ProgressColor property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/progressbar.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nProgressBar progressBar = new ProgressBar\n{\n    Progress = 0.5,\n    ProgressColor = Colors.Orange\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Lifecycle Event in .NET MAUI C#\nDESCRIPTION: Configures the lifecycle events and adds a specific action to be executed when the Window.SizeChanged event is raised. The AddEvent method registers an action (LogEvent) to be invoked when the Microsoft.UI.Xaml.Window.SizeChanged event occurs. The LogEvent method then writes a debug message to the console.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n\nnamespace PlatformLifecycleDemo\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureLifecycleEvents(events =>\n                {\n#if WINDOWS\n                    events.AddWindows(windows => windows\n                           .OnWindowCreated(window =>\n                           {\n                                  window.SizeChanged += OnSizeChanged;\n                           }));\n\n                    events.AddEvent(nameof(Microsoft.UI.Xaml.Window.SizeChanged), () => LogEvent(\"Window SizeChanged\"));\n#endif\n                    static bool LogEvent(string eventName, string type = null)\n                    {\n                        System.Diagnostics.Debug.WriteLine($\"Lifecycle event: {eventName}{(type == null ? string.Empty : $\" ({type})\")}\");\n                        return true;\n                    }\n                });\n\n            return builder.Build();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable ListView Row Animations in XAML (.NET MAUI, iOS)\nDESCRIPTION: This XAML snippet shows how to disable row animations in a .NET MAUI ListView on iOS by setting the `RowAnimationsEnabled` property to `false`. It requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace to be defined in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-row-animations.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <ListView ... ios:ListView.RowAnimationsEnabled=\"false\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set SemanticProperties.Description with Label Text in C#\nDESCRIPTION: This code snippet demonstrates setting the SemanticProperties.Description of a Switch control to the Text property of a Label in C#. The screen reader will then use the label's text to describe the switch. This approach is useful when the description is dynamically generated or dependent on other UI elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label\n{\n    Text = \"Enable dark mode: \"\n};\nSwitch mySwitch = new Switch();\nSemanticProperties.SetDescription(mySwitch, label.Text);\n```\n\n----------------------------------------\n\nTITLE: Select an element by name in CSS\nDESCRIPTION: This CSS snippet demonstrates how to select an element by its StyleId or x:Name using the `#id` selector.  The style sets the background color of the selected element to lightgray.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n#listView {\n    background-color: lightgray;\n}\n```\n\n----------------------------------------\n\nTITLE: Centering Window Programmatically - C#\nDESCRIPTION: This C# snippet shows how to position a window in the center of the screen by accessing the `Window` property from any page, layout, or view. It retrieves the display information using `DeviceDisplay.Current.MainDisplayInfo` and calculates the center coordinates based on window dimensions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Get display size\nvar displayInfo = DeviceDisplay.Current.MainDisplayInfo;\n\n// Center the window\nWindow.X = (displayInfo.Width / displayInfo.Density - Window.Width) / 2;\nWindow.Y = (displayInfo.Height / displayInfo.Density - Window.Height) / 2;\n```\n\n----------------------------------------\n\nTITLE: Consume Custom Namespace Schema in XAML\nDESCRIPTION: Demonstrates how to consume the custom namespace schema in a XAML file by declaring the namespace with the custom URL. The `CircleButton` control is then used with the declared namespace prefix. The custom namespace allows the use of types within that namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"http://mycompany.com/schemas/controls\"\n             x:Class=\"CustomNamespaceSchemaDemo.MainPage\">\n    <StackLayout>\n        ...\n        <controls:CircleButton Text=\"+\"\n                               BackgroundColor=\"Fuchsia\"\n                               BorderColor=\"Black\"\n                               CircleDiameter=\"100\" />\n        <controls:CircleButton Text=\"-\"\n                               BackgroundColor=\"Teal\"\n                               BorderColor=\"Silver\"\n                               CircleDiameter=\"70\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Rectangle - XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a red filled rectangle with a width of 150 and a height of 50 device-independent units. It sets the Fill, WidthRequest, HeightRequest, and HorizontalOptions properties of the Rectangle object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/rectangle.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Rectangle Fill=\"Red\"\n           WidthRequest=\"150\"\n           HeightRequest=\"50\"\n           HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Control Scroll Position - Start (C#)\nDESCRIPTION: This C# code snippet demonstrates how to scroll an item to the start of the CarouselView using the `ScrollToPosition.Start` enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ncarouselView.ScrollTo(monkey, position: ScrollToPosition.Start);\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties for VideoHandler in MAUI\nDESCRIPTION: This code snippet shows how to map properties from the cross-platform `Video` control to the native `MauiVideoPlayer` in the `VideoHandler`. Each `Map` method is a static function that takes the handler and control instances, and calls a corresponding method on the `MauiVideoPlayer` to update the native view based on the property change in the cross-platform control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapAreTransportControlsEnabled(VideoHandler handler, Video video)\n    {\n        handler?.PlatformView.UpdateTransportControlsEnabled();\n    }\n\n    public static void MapSource(VideoHandler handler, Video video)\n    {\n        handler?.PlatformView.UpdateSource();\n    }\n\n    public static void MapIsLooping(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateIsLooping();\n    }\n\n    public static void MapPosition(VideoHandler handler, Video video)\n    {\n        handler?.PlatformView.UpdatePosition();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Effect in MauiProgram.cs C#\nDESCRIPTION: This C# code demonstrates how to register a .NET MAUI effect in the MauiProgram.cs file using the ConfigureEffects method. The FocusRoutingEffect is registered against its corresponding FocusPlatformEffect implementation, enabling the effect to be used within the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/effects.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static MauiApp CreateMauiApp()\n{\n  var builder = MauiApp.CreateBuilder();\n  builder\n    .UseMauiApp<App>()\n    .ConfigureEffects(effects =>\n    {\n      effects.Add<FocusRoutingEffect, FocusPlatformEffect>();\n    });\n\n  return builder.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon in C# for MAUI Map\nDESCRIPTION: This C# code demonstrates how to create a Polygon object and add it to a MAUI Map. The StrokeWidth, StrokeColor, and FillColor properties are set to customize the polygon's appearance.  The Geopath property is populated with a list of Location objects, defining the polygon's vertices. The Microsoft.Maui.Controls.Maps and Microsoft.Maui.Maps namespaces are required.  Finally, the polygon is added to the Map's MapElements collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nMap map = new Map();\n\n// Instantiate a polygon\nPolygon polygon = new Polygon\n{\n    StrokeWidth = 8,\n    StrokeColor = Color.FromArgb(\"#1BA1E2\"),\n    FillColor = Color.FromArgb(\"#881BA1E2\"),\n    Geopath =\n    {\n        new Location(47.6368678, -122.137305),\n        new Location(47.6368894, -122.134655),\n        ...\n    }\n};\n\n// Add the polygon to the map's MapElements collection\nmap.MapElements.Add(polygon);\n```\n\n----------------------------------------\n\nTITLE: Resizing ViewCell Programmatically in C#\nDESCRIPTION: This C# code snippet demonstrates how to dynamically resize a ViewCell at runtime by toggling the visibility of a Label and calling ForceUpdateSize(). The OnViewCellTapped method is an event handler executed when the cell is tapped. It requires a label instance named `label` and a ViewCell instance named `viewCell`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnViewCellTapped(object sender, EventArgs e)\n{\n    label.IsVisible = !label.IsVisible;\n    viewCell.ForceUpdateSize();\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Fire-and-Forget Disposal on Android in C#\nDESCRIPTION: This code snippet configures the app to block on dispose via an `AppContext` switch in the `MauiProgram` class. This opts out of the default fire-and-forget async disposal behavior of the underlying `WebViewManager`, potentially preventing disposal deadlocks on Android. This switch should be set before any BlazorWebView instances are created.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic MauiProgram()\n{\n    AppContext.SetSwitch(\"BlazorWebView.AndroidFireAndForgetAsync\", false);\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming an Attached Property in C# Code\nDESCRIPTION: This C# snippet demonstrates how to consume the `HasShadow` attached property in code. The `SetHasShadow` method is called on the `MyControl` class, passing in the `Label` control and the value to set for the attached property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label = new Label { Text = \"Label with shadow\" };\nMyControl.SetHasShadow (label, true);\n```\n\n----------------------------------------\n\nTITLE: Reduce Elements Good XAML\nDESCRIPTION: This example shows an optimized version of the previous layout, reducing the number of elements by using a single VerticalStackLayout and adjusting Padding and Spacing properties. This leads to faster rendering.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout Padding=\"20,35,20,20\"\n                     Spacing=\"25\">\n    <Label Text=\"Hello\" />\n    <Label Text=\"Welcome to the App!\" />\n    <Label Text=\"Downloading Data...\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Run Code on UI Thread with Function Pointer - .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to use the BeginInvokeOnMainThread method with a function pointer to execute code on the main UI thread. A separate method is defined (MyMainThreadCode) and then passed to BeginInvokeOnMainThread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/main-thread.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMainThread.BeginInvokeOnMainThread(MyMainThreadCode);\n\nvoid MyMainThreadCode()\n{\n    myLabel.Text = \"Hello from the main thread!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Text-to-Speech in .NET MAUI C#\nDESCRIPTION: This C# code snippet shows how to use a CancellationToken to stop the text-to-speech utterance. It creates a CancellationTokenSource and passes the token to the SpeakAsync method. Calling Cancel on the token source will stop the speech. The cancellation token allows for fine-grained control over the utterance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar cancelSrc = new CancellationTokenSource();\nawait TextToSpeech.Default.SpeakAsync(\"Hello World\", cancelSrc.Token);\ncancelSrc.Cancel();\n```\n\n----------------------------------------\n\nTITLE: AppThemeBinding with StaticResource in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the AppThemeBinding markup extension in conjunction with StaticResource to consume resources defined in a ResourceDictionary. The background color and text color of a Button are dynamically changed based on the system theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n\n        <!-- Light colors -->\n        <Color x:Key=\"LightPrimaryColor\">WhiteSmoke</Color>\n        <Color x:Key=\"LightSecondaryColor\">Black</Color>\n\n        <!-- Dark colors -->\n        <Color x:Key=\"DarkPrimaryColor\">Teal</Color>\n        <Color x:Key=\"DarkSecondaryColor\">White</Color>\n\n        <Style x:Key=\"ButtonStyle\"\n               TargetType=\"Button\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"{AppThemeBinding Light={StaticResource LightPrimaryColor}, Dark={StaticResource DarkPrimaryColor}}\" />\n            <Setter Property=\"TextColor\"\n                    Value=\"{AppThemeBinding Light={StaticResource LightSecondaryColor}, Dark={StaticResource DarkSecondaryColor}}\" />\n        </Style>\n\n    </ContentPage.Resources>\n\n    <Grid BackgroundColor=\"{AppThemeBinding Light={StaticResource LightPrimaryColor}, Dark={StaticResource DarkPrimaryColor}}\">\n      <Button Text=\"MORE INFO\"\n              Style=\"{StaticResource ButtonStyle}\" />\n    </Grid>    \n</ContentPage>    \n```\n\n----------------------------------------\n\nTITLE: Update Video Source (Android) C#\nDESCRIPTION: This code demonstrates how to update the video source on Android using a `VideoView`. The `UpdateSource` method checks if the video source is a `UriVideoSource`. If so, it extracts the URI, parses it into an Android `Uri` object, sets it on the `VideoView`, and starts the video if `AutoPlay` is enabled. The code handles `UriVideoSource` specifically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        bool _isPrepared;\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            _isPrepared = false;\n            bool hasSetSource = false;\n\n            if (_video.Source is UriVideoSource)\n            {\n                string uri = (_video.Source as UriVideoSource).Uri;\n                if (!string.IsNullOrWhiteSpace(uri))\n                {\n                    _videoView.SetVideoURI(Uri.Parse(uri));\n                    hasSetSource = true;\n                }\n            }\n            ...\n\n            if (hasSetSource && _video.AutoPlay)\n            {\n                _videoView.Start();\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Row and Column Spacing in C#\nDESCRIPTION: This C# snippet demonstrates how to set the `RowSpacing` and `ColumnSpacing` properties of a Grid in code.  The values are specified in device-independent units. The Grid object is created and initialized with specified row and column spacing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class GridSpacingPage : ContentPage\n{\n    public GridSpacingPage()\n    {\n        Grid grid = new Grid\n        {\n            RowSpacing = 6,\n            ColumnSpacing = 6,\n            ...\n        };\n        ...\n\n        Content = grid;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset using FileSystem (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset deployed with the application package using the `FileSystem.OpenAppPackageFileAsync` method. The asset name (\"AboutAssets.txt\" in this case) is passed as an argument. The method returns a stream that can be used to read the file contents.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_1/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Binding SelectedItem in Picker (C#)\nDESCRIPTION: This C# code snippet shows how to bind the `ItemsSource` and `SelectedItem` properties of a `Picker` control to properties in the view model using the `SetBinding` method. It also demonstrates how to bind properties of the selected item to labels and an image.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nPicker picker = new Picker { Title = \"Select a monkey\" };\npicker.SetBinding(Picker.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\npicker.SetBinding(Picker.SelectedItemProperty, static (MonkeysViewModel vm) => vm.SelectedMonkey);\npicker.ItemDisplayBinding = Binding.Create(static (Monkey monkey) => monkey.Name);\n\nLabel nameLabel = new Label { ... };\nnameLabel.SetBinding(Label.TextProperty, static (MonkeysViewModel vm) => vm.SelectedMonkey.Name);\n\nLabel locationLabel = new Label { ... };\nlocationLabel.SetBinding(Label.TextProperty, static (MonkeysViewModel vm) => vm.SelectedMonkey.Location);\n\nImage image = new Image { ... };\nimage.SetBinding(Image.SourceProperty, static (MonkeysViewModel vm) => vm.SelectedMonkey.ImageUrl);\n\nLabel detailsLabel = new Label();\ndetailsLabel.SetBinding(Label.TextProperty, static (MonkeysViewModel vm) => vm.SelectedMonkey.Details);\n```\n\n----------------------------------------\n\nTITLE: Requesting Read/Write Storage Permission - C#\nDESCRIPTION: This code demonstrates how to request the custom read/write storage permission. It uses the standard .NET MAUI permission request mechanism. Requires the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/permissions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Must inherit from BasePlatformPermission to use this helper.\npublic class ReadWriteStoragePermission : Permissions.BasePlatformPermission\n{\n    public override (string androidPermission, bool isRuntime)[] RequiredPermissions => new List<(string androidPermission, bool isRuntime)>\n    {\n        (Android.Manifest.Permission.ReadExternalStorage, true),\n        (Android.Manifest.Permission.WriteExternalStorage, true)\n    }.ToArray();\n}\n\npublic class MyViewModel\n{\n    public async Task CheckAndRequestStoragePermission()\n    {\n        var status = await Permissions.CheckStatusAsync<ReadWriteStoragePermission>();\n        if (status == PermissionStatus.Granted)\n            return;\n\n        status = await Permissions.RequestAsync<ReadWriteStoragePermission>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arrange Children in Layout - C#\nDESCRIPTION: This code implements the ArrangeChildren method of the custom layout manager. It positions and sizes the children within the layout bounds. It iterates through visible children, calculates their destination rectangles, and calls the Arrange method on each child to position them. It also considers padding, spacing, and layout alignment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override Size ArrangeChildren(Rect bounds)\n{\n    var padding = Stack.Padding;\n    double top = padding.Top + bounds.Top;\n    double left = padding.Left + bounds.Left;\n\n    double currentRowTop = top;\n    double currentX = left;\n    double currentRowHeight = 0;\n\n    double maxStackWidth = currentX;\n\n    for (int n = 0; n < _layout.Count; n++)\n    {\n        var child = _layout[n];\n        if (child.Visibility == Visibility.Collapsed)\n        {\n            continue;\n        }\n\n        if (currentX + child.DesiredSize.Width > bounds.Right)\n        {\n            // Keep track of our maximum width so far\n            maxStackWidth = Math.Max(maxStackWidth, currentX);\n\n            // Move down to the next row\n            currentX = left;\n            currentRowTop += currentRowHeight + _layout.Spacing;\n            currentRowHeight = 0;\n        }\n\n        var destination = new Rect(currentX, currentRowTop, child.DesiredSize.Width, child.DesiredSize.Height);\n        child.Arrange(destination);\n\n        currentX += destination.Width + _layout.Spacing;\n        currentRowHeight = Math.Max(currentRowHeight, destination.Height);\n    }\n\n    var actual = new Size(maxStackWidth, currentRowTop + currentRowHeight);\n\n    // Adjust the size if the layout is set to fill its container\n    return actual.AdjustForFill(bounds, Stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Assign CSS classes to XAML elements\nDESCRIPTION: This XAML snippet demonstrates how to assign CSS classes to XAML elements using the `StyleClass` property. The `StyleClass` property is set to the name of the CSS class, allowing the CSS styles to be applied to the element. Requires a style sheet with the classes `.detailPageTitle` and `.detailPageSubtitle` to be loaded.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <StyleSheet Source=\"/Resources/styles.css\" />\n    </ContentPage.Resources>\n    <ScrollView>\n        <StackLayout>\n            <Label ... StyleClass=\"detailPageTitle\" />\n            <Label ... StyleClass=\"detailPageSubtitle\"/>\n        </StackLayout>\n    </ScrollView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a SwipeContainer C#\nDESCRIPTION: This C# code defines a reusable 'SwipeContainer' class that simplifies swipe gesture recognition.  It creates SwipeGestureRecognizer objects for all four directions and exposes a 'Swipe' event that can be handled by the container's parent. Requires inheriting from ContentView and knowledge of event handlers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class SwipeContainer : ContentView\n{\n    public event EventHandler<SwipedEventArgs> Swipe;\n\n    public SwipeContainer()\n    {\n        GestureRecognizers.Add(GetSwipeGestureRecognizer(SwipeDirection.Left));\n        GestureRecognizers.Add(GetSwipeGestureRecognizer(SwipeDirection.Right));\n        GestureRecognizers.Add(GetSwipeGestureRecognizer(SwipeDirection.Up));\n        GestureRecognizers.Add(GetSwipeGestureRecognizer(SwipeDirection.Down));\n    }\n\n    SwipeGestureRecognizer GetSwipeGestureRecognizer(SwipeDirection direction)\n    {\n        SwipeGestureRecognizer swipe = new SwipeGestureRecognizer { Direction = direction };\n        swipe.Swiped += (sender, e) => Swipe?.Invoke(this, e);\n        return swipe;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Share Text and URI with IShare.RequestAsync - C#\nDESCRIPTION: This code snippet demonstrates how to share text and a URI using the IShare.RequestAsync method. It creates a ShareTextRequest object, setting both the Text and Uri properties, and then calls IShare.RequestAsync to initiate the sharing process. The device's share window will appear, prompting the user to select an application to share with.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/share.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Share.Default.RequestAsync(new ShareTextRequest\n{\n    Text = \"Hello Friends!\",\n    Uri = \"https://www.microsoft.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Code-Behind for XAML Page (<=net-maui-9.0)\nDESCRIPTION: This C# snippet shows the complete code-behind for a XAML page that includes handlers for the ValueChanged event of a Slider and the Clicked event of a Button. It demonstrates the basic structure of a code-behind file in .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace XamlSamples\n{\n    public partial class XamlPlusCodePage\n    {\n        public XamlPlusCodePage()\n        {\n            InitializeComponent();\n        }\n\n        void OnSliderValueChanged(object sender, ValueChangedEventArgs args)\n        {\n            valueLabel.Text = args.NewValue.ToString(\"F3\");\n        }\n\n        async void OnButtonClicked(object sender, EventArgs args)\n        {\n            Button button = (Button)sender;\n            await DisplayAlert(\"Clicked!\", \"The button labeled '\" + button.Text + \"' has been clicked\", \"OK\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bind to an Ancestor's Command using FindAncestorBindingContext in XAML\nDESCRIPTION: This XAML snippet demonstrates binding a Button's Command property to a command in the parent viewmodel using the FindAncestorBindingContext relative binding mode. The AncestorType specifies the type of the ancestor whose BindingContext contains the desired command.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/relative-bindings.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             BindingContext=\"{Binding Source={RelativeSource Self}, Path=DefaultViewModel}\"\n             x:DataType=\"local:PeopleViewModel\">\n    <StackLayout>\n        <ListView ItemsSource=\"{Binding Employees}\">\n            <ListView.ItemTemplate>\n                <DataTemplate>\n                    <ViewCell>\n                        <StackLayout Orientation=\"Horizontal\">\n                            <Label Text=\"{Binding Fullname}\"\n                                   VerticalOptions=\"Center\" />\n                            <Button Text=\"Delete\"\n                                    Command=\"{Binding x:DataType='local:PeopleViewModel', Source={RelativeSource AncestorType={x:Type local:PeopleViewModel}}, Path=DeleteEmployeeCommand}\"\n                                    CommandParameter=\"{Binding}\"\n                                    HorizontalOptions=\"End\" />\n                        </StackLayout>\n                    </ViewCell>\n                </DataTemplate>\n            </ListView.ItemTemplate>\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Updating NotificationsController Constructor in C#\nDESCRIPTION: This C# code snippet updates the NotificationsController constructor to inject an instance of INotificationService through dependency injection. It assigns the injected instance to a readonly member, _notificationService, which is used by the controller's actions to interact with the notification service.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nreadonly INotificationService _notificationService;\n\npublic NotificationsController(INotificationService notificationService)\n{\n    _notificationService = notificationService;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to Center in XAML\nDESCRIPTION: This XAML snippet shows how to configure `SnapPointsAlignment` to `Center` within the `CarouselView`. After the user finishes scrolling, the center of an item will align with the center of the view. Requires binding the `Monkeys` collection to the `ItemsSource` property of the `CarouselView`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\"\n              PeekAreaInsets=\"100\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Horizontal\"\n                           SnapPointsType=\"MandatorySingle\"\n                           SnapPointsAlignment=\"Center\" />\n    </CarouselView.ItemsLayout>\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: iOS/Mac Catalyst Full Accuracy Usage Description - XML\nDESCRIPTION: This XML snippet shows how to add the `NSLocationTemporaryUsageDescriptionDictionary` key and its sub-keys to the Info.plist file for iOS and Mac Catalyst. This dictionary allows the app to provide a temporary usage description when requesting full location accuracy.  The `TemporaryFullAccuracyUsageDescription` key holds the user-facing string explaining why full accuracy is needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSLocationTemporaryUsageDescriptionDictionary</key>\n<dict>\n  <key>TemporaryFullAccuracyUsageDescription</key>\n  <string>Fill in a reason why your app needs full accuracy</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Create a Border with RoundRectangle in XAML\nDESCRIPTION: This XAML example shows how to create a Border control with a rounded rectangle stroke shape. It sets properties like Stroke, StrokeThickness, StrokeShape, Background, and Padding. The Border contains a Label as its content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/border.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"#C49B33\"\n        StrokeThickness=\"4\"\n        StrokeShape=\"RoundRectangle 40,0,0,40\"\n        Background=\"#2B0B98\"\n        Padding=\"16,8\"\n        HorizontalOptions=\"Center\">\n    <Label Text=\".NET MAUI\"\n           TextColor=\"White\"\n           FontSize=\"18\"\n           FontAttributes=\"Bold\" />\n</Border>\n```\n\n----------------------------------------\n\nTITLE: XAML for Color Selector Page\nDESCRIPTION: Defines the XAML structure for a color selector page, including data bindings, value converters, and styling. It utilizes the `FloatToIntConverter` and sets the `ConverterParameter` to 255. Demonstrates setting the converter parameter both directly in the binding and within the binding tag.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.RgbColorSelectorPage\"\n             Title=\"RGB Color Selector\"\n             x:DataType=\"local:RgbColorViewModel\">\n    <ContentPage.BindingContext>\n        <local:RgbColorViewModel Color=\"Gray\" />\n    </ContentPage.BindingContext>\n    <ContentPage.Resources>\n        <Style TargetType=\"Slider\">\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n\n        <Style TargetType=\"Label\">\n            <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n        </Style>\n\n        <local:FloatToIntConverter x:Key=\"floatToInt\" />\n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"20\">\n        <BoxView Color=\"{Binding Color}\"\n                 HeightRequest=\"100\"\n                 WidthRequest=\"100\"\n                 HorizontalOptions=\"Center\" />\n        <StackLayout Margin=\"10, 0\">\n            <Label Text=\"{Binding Name}\" />\n            <Slider Value=\"{Binding Red}\" />\n            <Label Text=\"{Binding Red,\n                                  Converter={StaticResource floatToInt},\n                                  ConverterParameter=255,\n                                  StringFormat='Red = {0:X2}'}\" />\n            <Slider Value=\"{Binding Green}\" />\n            <Label Text=\"{Binding Green,\n                                  Converter={StaticResource floatToInt},\n                                  ConverterParameter=255,\n                                  StringFormat='Green = {0:X2}'}\" />\n            <Slider Value=\"{Binding Blue}\" />\n            <Label>\n                <Label.Text>\n                    <Binding Path=\"Blue\"\n                             StringFormat=\"Blue = {0:X2}\"\n                             Converter=\"{StaticResource floatToInt}\">\n                        <Binding.ConverterParameter>\n                            <x:Single>255</x:Single>\n                        </Binding.ConverterParameter>\n                    </Binding>\n                </Label.Text>\n            </Label>\n        </StackLayout>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Digital Asset Links File - Single App JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the assetlinks.json file required to verify the association between a website and a single Android app for Android App Links. It specifies the namespace, package name, and SHA256 certificate fingerprints of the app, granting it link-opening rights. The file must be hosted at `https://domain.name/.well-known/assetlinks.json` and served with content-type `application/json`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n      \"relation\": [\n         \"delegate_permission/common.handle_all_urls\"\n      ],\n      \"target\": {\n         \"namespace\": \"android_app\",\n         \"package_name\": \"com.companyname.myrecipeapp\",\n         \"sha256_cert_fingerprints\": [\n            \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\"\n         ]\n      }\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: CarouselView with IndicatorView XAML\nDESCRIPTION: This XAML code demonstrates how to display indicators for a CarouselView using the IndicatorView control. It defines a StackLayout containing a CarouselView and an IndicatorView. The CarouselView's IndicatorView property is bound to the IndicatorView control, and the IndicatorView's IndicatorColor and SelectedIndicatorColor properties are set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout>\n    <CarouselView ItemsSource=\"{Binding Monkeys}\"\n                  IndicatorView=\"indicatorView\">\n        <CarouselView.ItemTemplate>\n            <!-- DataTemplate that defines item appearance -->\n        </CarouselView.ItemTemplate>\n    </CarouselView>\n    <IndicatorView x:Name=\"indicatorView\"\n                   IndicatorColor=\"LightGray\"\n                   SelectedIndicatorColor=\"DarkGray\"\n                   HorizontalOptions=\"Center\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Permissions XML\nDESCRIPTION: This XML fragment demonstrates how permissions are declared in the Android manifest file.  The `uses-permission` element requests a specific permission for the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Update App.xaml.cs for .NET MAUI\nDESCRIPTION: Updates the App.xaml.cs file in a .NET MAUI project. It includes necessary using statements for Microsoft.Maui and defines the App class inheriting from MauiWinUIApplication. The CreateMauiApp method is overridden to initialize and return the MauiApp.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui;\nusing Microsoft.Maui.Hosting;\nusing YOUR_MAUI_CLASS_LIB_HERE;\n\nnamespace YOUR_NAMESPACE_HERE.WinUI;\n\npublic partial class App : MauiWinUIApplication\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n\n    protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Customize ActivityIndicator Color in C#\nDESCRIPTION: This C# code snippet demonstrates how to create an ActivityIndicator, set its color, and start its animation programmatically. The Color property is set to Colors.Orange.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/activityindicator.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nActivityIndicator activityIndicator = new ActivityIndicator\n{\n    IsRunning = true,\n    Color = Colors.Orange\n};\n```\n\n----------------------------------------\n\nTITLE: Share a File with IShare.RequestAsync - C#\nDESCRIPTION: This C# code snippet demonstrates how to share a single file using the IShare.RequestAsync method with ShareFileRequest.  First, it writes text content to a local file. Then, it creates a ShareFileRequest object with the file's path and calls IShare.RequestAsync to share it. The operating system handles the file type (MIME) detection. Certain file types might be restricted by the OS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/share.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the file\nstring filePath = Path.Combine(FileSystem.CacheDirectory, \"tempfile.txt\");\nFile.WriteAllText(filePath, \"Hello World of Share!\");\n\nawait Share.Default.RequestAsync(new ShareFileRequest\n{\n    Title = \"Share File\",\n    File = new ShareFile(filePath)\n});\n```\n\n----------------------------------------\n\nTITLE: CarouselView Vertical Layout XAML\nDESCRIPTION: This XAML code configures the CarouselView to display items in a vertical orientation by setting the ItemsLayout to a LinearItemsLayout with Orientation=\"Vertical\". Data binding is used to display monkey details within each item. Dependencies: models:Monkey\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Vertical\" />\n    </CarouselView.ItemsLayout>\n    <CarouselView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <StackLayout>\n                <Border Stroke=\"DarkGray\"\n                        StrokeShape=\"RoundRectangle 5\"\n                        Margin=\"20\"\n                        Padding=\"20\"\n                        HeightRequest=\"360\"\n                        HorizontalOptions=\"Center\"\n                        VerticalOptions=\"Center\">\n                    <StackLayout>\n                        <Label Text=\"{Binding Name}\"\n                               FontAttributes=\"Bold\"\n                               FontSize=\"18\"\n                               HorizontalOptions=\"Center\"\n                               VerticalOptions=\"Center\" />\n                        <Image Source=\"{Binding ImageUrl}\"\n                               Aspect=\"AspectFill\"\n                               HeightRequest=\"150\"\n                               WidthRequest=\"150\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Location}\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Details}\"\n                               FontAttributes=\"Italic\"\n                               HorizontalOptions=\"Center\"\n                               MaxLines=\"5\"\n                               LineBreakMode=\"TailTruncation\" />\n                    </StackLayout>\n                </Border>\n            </StackLayout>\n        </DataTemplate>\n    </CarouselView.ItemTemplate>\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Dispose Override: Child Container Reference Nulling - C#\nDESCRIPTION: This code snippet shows how to override the `Dispose` method in a child class (`MyChild`) to set the reference to its parent container (`MyContainer`) to `null`. This breaks a potential strong reference from the child to the parent, aiding in preventing memory leaks when objects are no longer needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nclass MyChild : UIView\n{\n    MyContainer _container;\n\n    public MyChild(MyContainer container)\n    {\n        _container = container;\n    }\n\n    public override void Dispose()\n    {\n        _container = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoHandler on Windows with C#\nDESCRIPTION: This code snippet demonstrates the implementation of a `VideoHandler` for Windows using .NET MAUI. It overrides methods to create, connect, and disconnect the native view, which is a `MauiVideoPlayer` that encapsulates the `MediaPlayerElement`. The handler inherits from `ViewHandler<Video, MauiVideoPlayer>`. The `ConnectHandler` and `DisconnectHandler` methods are used to perform setup and cleanup, respectively.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nusing Microsoft.Maui.Handlers;\nusing VideoDemos.Controls;\nusing VideoDemos.Platforms.Windows;\n\nnamespace VideoDemos.Handlers\n{\n    public partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n    {\n        protected override MauiVideoPlayer CreatePlatformView() => new MauiVideoPlayer(VirtualView);\n\n        protected override void ConnectHandler(MauiVideoPlayer platformView)\n        {\n            base.ConnectHandler(platformView);\n\n            // Perform any control setup here\n        }\n\n        protected override void DisconnectHandler(MauiVideoPlayer platformView)\n        {\n            platformView.Dispose();\n            base.DisconnectHandler(platformView);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Device Orientation with Conditional Compilation C#\nDESCRIPTION: This C# code retrieves device orientation using conditional compilation for Android and iOS. It utilizes platform-specific APIs (`Android.Content`, `Android.Views`, `UIKit`) to determine the orientation and returns a `DeviceOrientation` enum value. It demonstrates how to write platform-specific implementations within a single code file, using preprocessor directives.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n#if ANDROID\nusing Android.Content;\nusing Android.Views;\nusing Android.Runtime;\n#elif IOS\nusing UIKit;\n#endif\n\nusing InvokePlatformCodeDemos.Services;\n\nnamespace InvokePlatformCodeDemos.Services.ConditionalCompilation\n{\n    public class DeviceOrientationService\n    {\n        public DeviceOrientation GetOrientation()\n        {\n#if ANDROID\n            IWindowManager windowManager = Android.App.Application.Context.GetSystemService(Context.WindowService).JavaCast<IWindowManager>();\n            SurfaceOrientation orientation = windowManager.DefaultDisplay.Rotation;\n            bool isLandscape = orientation == SurfaceOrientation.Rotation90 || orientation == SurfaceOrientation.Rotation270;\n            return isLandscape ? DeviceOrientation.Landscape : DeviceOrientation.Portrait;\n#elif IOS\n            UIInterfaceOrientation orientation = UIApplication.SharedApplication.StatusBarOrientation;\n            bool isPortrait = orientation == UIInterfaceOrientation.Portrait || orientation == UIInterfaceOrientation.PortraitUpsideDown;\n            return isPortrait ? DeviceOrientation.Portrait : DeviceOrientation.Landscape;\n#else\n            return DeviceOrientation.Undefined;\n#endif\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: StringFormat usage with Slider, TimePicker, Entry and DateTime - XAML\nDESCRIPTION: Demonstrates various usages of the `StringFormat` property in data bindings with Slider, TimePicker, and Entry controls. It also shows formatting of DateTime values with different format specifiers.  Uses the &quot; HTML entity to include double quotes in the formatting string.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/string-formatting.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             x:Class=\"DataBindingDemos.StringFormattingPage\"\n             Title=\"String Formatting\">\n\n    <ContentPage.Resources>\n        <Style TargetType=\"Label\">\n            <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n        </Style>\n        <Style TargetType=\"BoxView\">\n            <Setter Property=\"Color\" Value=\"Blue\" />\n            <Setter Property=\"HeightRequest\" Value=\"2\" />\n            <Setter Property=\"Margin\" Value=\"0, 5\" />\n        </Style>        \n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"10\">\n        <Slider x:Name=\"slider\" />\n        <Label x:DataType=\"Slider\"\n               Text=\"{Binding Source={x:Reference slider},\n                              Path=Value,\n                              StringFormat='The slider value is {0:F2}'}\" />\n        <BoxView />\n        <TimePicker x:Name=\"timePicker\" />\n        <Label x:DataType=\"TimePicker\"\n               Text=\"{Binding Source={x:Reference timePicker},\n                              Path=Time,\n                              StringFormat='The TimeSpan is {0:c}'}\" />\n        <BoxView />                              \n        <Entry x:Name=\"entry\" />\n        <Label x:DataType=\"Entry\"\n               Text=\"{Binding Source={x:Reference entry},\n                              Path=Text,\n                              StringFormat='The Entry text is &quot;{0}&quot;'}\" />\n        <BoxView />\n        <StackLayout x:DataType=\"sys:DateTime\"\n                     BindingContext=\"{x:Static sys:DateTime.Now}\">\n            <Label Text=\"{Binding}\" />\n            <Label Text=\"{Binding Path=Ticks,\n                                  StringFormat='{0:N0} ticks since 1/1/1'}\" />\n            <Label Text=\"{Binding StringFormat='The {{0:MMMM}} specifier produces {0:MMMM}'}\" />\n            <Label Text=\"{Binding StringFormat='The long date is {0:D}'}\" />\n        </StackLayout>\n        <BoxView />        \n        <StackLayout x:DataType=\"sys:Double\"\n                     BindingContext=\"{x:Static sys:Math.PI}\">\n            <Label Text=\"{Binding}\" />\n            <Label Text=\"{Binding StringFormat='PI to 4 decimal points = {0:F4}'}\" />\n            <Label Text=\"{Binding StringFormat='PI in scientific notation = {0:E7}'}\" />\n        </StackLayout>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Downsizing Image in .NET MAUI\nDESCRIPTION: This code demonstrates how to downsize an image in .NET MAUI using the Downsize method. It loads an image from an embedded resource stream and downsizes it such that its largest dimension is 100 pixels. The source image is disposed after downsizing, and the new downsized image is drawn onto a canvas.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/images.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Graphics.Platform;\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    IImage newImage = image.Downsize(100, true);\n    canvas.DrawImage(newImage, 10, 10, newImage.Width, newImage.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: Inflating ContentPage from XAML string in .NET MAUI C#\nDESCRIPTION: This code snippet shows how to inflate a ContentPage from a XAML string at runtime and navigate to it. It leverages the LoadFromXaml extension method to parse the XAML and create the page instance. Requires Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/runtime-load.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// See the sample for the full XAML string\nstring pageXAML = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<ContentPage xmlns=\\\"http://schemas.microsoft.com/dotnet/2021/maui\\\"\\nxmlns:x=\\\"http://schemas.microsoft.com/winfx/2009/xaml\\\"\\nx:Class=\\\"LoadRuntimeXAML.CatalogItemsPage\\\"\\nTitle=\\\"Catalog Items\\\">\\n</ContentPage>\";\n\nContentPage page = new ContentPage().LoadFromXaml(pageXAML);\nawait Navigation.PushAsync(page);\n```\n\n----------------------------------------\n\nTITLE: Creating DataTemplate as a Resource (XAML)\nDESCRIPTION: This XAML code snippet demonstrates how to define a DataTemplate as a resource within a ContentPage's ResourceDictionary.  The DataTemplate is given a unique x:Key, allowing it to be referenced by other controls. The CollectionView then uses a StaticResource markup extension to bind its ItemTemplate to the defined DataTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataTemplates\"\n             x:Class=\"DataTemplates.WithDataTemplateResource\">\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <DataTemplate x:Key=\"personTemplate\">\n                <Grid>\n                    ...\n                </Grid>\n            </DataTemplate>\n        </ResourceDictionary>\n    </ContentPage.Resources>\n\n    <StackLayout>\n        <CollectionView ItemTemplate=\"{StaticResource personTemplate}\">\n            <CollectionView.ItemsSource>\n                <x:Array Type=\"{x:Type local:Person}\">\n                    <local:Person Name=\"Steve\" Age=\"21\" Location=\"USA\" />\n                    ...\n                </x:Array>\n            </CollectionView.ItemsSource>\n        </CollectionView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Letter Spacing CSS in .NET MAUI\nDESCRIPTION: Sets the letter spacing for various .NET MAUI controls like Button, DatePicker, Editor, Entry, Label, Picker, SearchBar, SearchHandler, Span, and TimePicker. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_32\n\nLANGUAGE: CSS\nCODE:\n```\nletter-spacing: 2.5;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Mapper in .NET MAUI C#\nDESCRIPTION: This code snippet shows how to define a property mapper for a custom handler in .NET MAUI. It defines a `PropertyMapper` that maps properties of a cross-platform control (`Video`) to handler methods.  The `PropertyMapper` is a dictionary whose key is a `string` and whose value is a generic `Action`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler\n{\n    public static IPropertyMapper<Video, VideoHandler> PropertyMapper = new PropertyMapper<Video, VideoHandler>(ViewHandler.ViewMapper)\n    {\n        [nameof(Video.AreTransportControlsEnabled)] = MapAreTransportControlsEnabled,\n        [nameof(Video.Source)] = MapSource,\n        [nameof(Video.IsLooping)] = MapIsLooping,\n        [nameof(Video.Position)] = MapPosition\n    };\n\n    public VideoHandler() : base(PropertyMapper)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TemplateBinding in ControlTemplate XAML\nDESCRIPTION: This XAML snippet shows how to define a ControlTemplate for CardView objects, using TemplateBinding to bind properties of the CardView to properties within the ControlTemplate. It demonstrates how properties like CardColor and BorderColor on the CardView control are passed to the Border element in the ControlTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             ...>\n    <ContentPage.Resources>\n        <ControlTemplate x:Key=\"CardViewControlTemplate\">\n            <Border BackgroundColor=\"{TemplateBinding CardColor}\"\n                    Stroke=\"{TemplateBinding BorderColor}\"\n                   ...>\n                <!-- UI objects that define the CardView visual structure -->                   \n            </Border>\n        </ControlTemplate>\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Display Specific Location using C#\nDESCRIPTION: This C# code snippet shows how to display a specific location on a map by creating a MapSpan object with a specified location and zoom level, then passing it to the Map constructor.  It requires the Microsoft.Maui.Maps namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nLocation location = new Location(36.9628066, -122.0194722);\nMapSpan mapSpan = new MapSpan(location, 0.01, 0.01);\nMap map = new Map(mapSpan);\n```\n\n----------------------------------------\n\nTITLE: Choosing Item Appearance at Runtime with DataTemplateSelector in C#\nDESCRIPTION: This code snippet demonstrates how to use a DataTemplateSelector to choose the appearance of items in a bindable layout based on the item's value.  It shows how to programmatically set the `ItemTemplateSelector` property of a `FlexLayout` in C#.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nDataTemplateSelector dataTemplateSelector = new TechItemTemplateSelector { ... };\nFlexLayout flexLayout = new FlexLayout();\nBindableLayout.SetItemsSource(flexLayout, viewModel.User.FavoriteTech);\nBindableLayout.SetItemTemplateSelector(flexLayout, dataTemplateSelector);\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTemplateSelector in C#\nDESCRIPTION: This C# snippet defines a `MonkeyDataTemplateSelector` class that inherits from `DataTemplateSelector`. The `OnSelectTemplate` method is overridden to select a data template based on the `Location` property of the `Monkey` object. If the location contains \"America\", the `AmericanMonkey` template is returned; otherwise, the `OtherMonkey` template is returned.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MonkeyDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate AmericanMonkey { get; set; }\n    public DataTemplate OtherMonkey { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Monkey)item).Location.Contains(\"America\") ? AmericanMonkey : OtherMonkey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Entry Handler Lifecycle with Conditional Compilation v2 C#\nDESCRIPTION: This code snippet demonstrates customizing the handler lifecycle of a .NET MAUI Entry control using conditional compilation. It subscribes to native events based on the target platform (Android, iOS/Mac Catalyst, or Windows) within the HandlerChanged and HandlerChanging events. The code also provides platform-specific implementations for selecting all text in the Entry when it gains focus. This snippet uses `MauiAppCompatEditText` instead of `AppCompatEditText` for Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\nusing Microsoft.Maui.Platform;\n#elif IOS || MACCATALYST\nusing UIKit;\n#elif WINDOWS\nusing Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml;\n#endif\n\nnamespace CustomizeHandlersDemo.Views;\n\npublic partial class CustomizeEntryHandlerLifecyclePage : ContentPage\n{\n    public CustomizeEntryHandlerLifecyclePage()\n    {\n        InitializeComponent();\n    }\n\n    void OnEntryHandlerChanged(object sender, EventArgs e)\n    {\n        Entry entry = sender as Entry;\n#if ANDROID\n        (entry.Handler.PlatformView as MauiAppCompatEditText).SetSelectAllOnFocus(true);\n#elif IOS || MACCATALYST\n        (entry.Handler.PlatformView as UITextField).EditingDidBegin += OnEditingDidBegin;\n#elif WINDOWS\n        (entry.Handler.PlatformView as TextBox).GotFocus += OnGotFocus;\n#endif\n    }\n\n    void OnEntryHandlerChanging(object sender, HandlerChangingEventArgs e)\n    {\n        if (e.OldHandler != null)\n        {\n#if IOS || MACCATALYST\n            (e.OldHandler.PlatformView as UITextField).EditingDidBegin -= OnEditingDidBegin;\n#elif WINDOWS\n            (e.OldHandler.PlatformView as TextBox).GotFocus -= OnGotFocus;\n#endif\n        }\n    }\n\n#if IOS || MACCATALYST                   \n    void OnEditingDidBegin(object sender, EventArgs e)\n    {\n        var nativeView = sender as UITextField;\n        nativeView.PerformSelector(new ObjCRuntime.Selector(\"selectAll\"), null, 0.0f);\n    }\n#elif WINDOWS\n    void OnGotFocus(object sender, RoutedEventArgs e)\n    {\n        var nativeView = sender as TextBox;\n        nativeView.SelectAll();\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Map Click Event Handler - C#\nDESCRIPTION: This C# code defines an event handler for the MapClicked event of a .NET MAUI Map.  It extracts the latitude and longitude of the tapped location and outputs it to the debug console.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnMapClicked(object sender, MapClickedEventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine($\"MapClick: {e.Location.Latitude}, {e.Location.Longitude}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET SDK-style Project\nDESCRIPTION: This XML snippet shows the structure of a .NET SDK-style project file for an Android Java Library Binding. It defines the target framework, supported OS platform version, nullable settings, and implicit usings. This configuration is identical to the project file for a standard Android class library.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-android</TargetFramework>\n    <SupportedOSPlatformVersion>21</SupportedOSPlatformVersion>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Creating a FlyoutPage in XAML\nDESCRIPTION: This XAML code shows how to create a FlyoutPage and set its Flyout and Detail properties. The Flyout is a ContentPage representing the menu, and the Detail is a NavigationPage containing a ContentPage for the main content. This is the root layout of the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/flyoutpage.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<FlyoutPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n            xmlns:local=\"clr-namespace:FlyoutPageNavigation\"\n            x:Class=\"FlyoutPageNavigation.MainPage\">\n    <FlyoutPage.Flyout>\n        <local:FlyoutMenuPage x:Name=\"flyoutPage\" />\n    </FlyoutPage.Flyout>\n    <FlyoutPage.Detail>\n        <NavigationPage>\n            <x:Arguments>\n                <local:ContactsPage />\n            </x:Arguments>\n        </NavigationPage>\n    </FlyoutPage.Detail>\n</FlyoutPage>\n```\n\n----------------------------------------\n\nTITLE: Scrolled Event Handler Implementation (C#)\nDESCRIPTION: This C# code defines the implementation of the `OnScrollViewScrolled` event handler.  It receives a `ScrolledEventArgs` object containing the `ScrollX` and `ScrollY` properties representing the scroll position.  This example prints the values of `ScrollX` and `ScrollY` to the console.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnScrollViewScrolled(object sender, ScrolledEventArgs e)\n{\n    Console.WriteLine($\"ScrollX: {e.ScrollX}, ScrollY: {e.ScrollY}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Clicked Event in AboutPage C#\nDESCRIPTION: This C# code defines the LearnMore_Clicked event handler, which is triggered when the user clicks the \"Learn more...\" button on the AboutPage. The event handler uses the Browser.OpenAsync method to open the system's default browser and navigate to the specified URL.  The 'async' keyword allows the use of 'await' for asynchronous operations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/shell.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async void LearnMore_Clicked(object sender, EventArgs e)\n{\n\tif (Uri.TryCreate(\"https://aka.ms/maui\", UriKind.Absolute, out var uri))\n\t{\n\t\tawait Browser.OpenAsync(uri);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Save and Delete Methods for Note Model C#\nDESCRIPTION: These methods extend the `Note` model to handle saving and deleting notes. The `Save` method writes the note's content to a file, while the `Delete` method removes the corresponding file from the device's storage. Both methods use `File.WriteAllTextAsync` and `File.Delete` respectively and handle potential exceptions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\n\nnamespace Notes.Models;\n\npublic partial class Note\n{\n    public async Task Save()\n    {\n        if (string.IsNullOrWhiteSpace(Filename))\n        {\n            Filename = $\"{Path.GetRandomFileName()}.notes.txt\";\n        }\n\n        try\n        {\n            string filepath = Path.Combine(FileSystem.AppDataDirectory, Filename);\n            await File.WriteAllTextAsync(filepath, Text);\n        }\n        catch (Exception ex)\n        {\n            // Basic error handling.  Best practice would be to dispatch\n            // this to the caller to handle.\n            Console.WriteLine($\"Save note failed: {ex.Message}\");\n        }\n    }\n\n    public void Delete()\n    {\n        try\n        {\n            string filepath = Path.Combine(FileSystem.AppDataDirectory, Filename);\n\n            if (File.Exists(filepath))\n            {\n                File.Delete(filepath);\n            }\n        }\n        catch (Exception ex)\n        {\n            // Basic error handling.  Best practice would be to dispatch\n            // this to the caller to handle.\n            Console.WriteLine($\"Delete note failed: {ex.Message}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the current user theme in C#\nDESCRIPTION: This C# snippet shows how to set the app's theme using the Application.Current.UserAppTheme property, overriding the system theme. Here, the app is set to use the dark theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nApplication.Current.UserAppTheme = AppTheme.Dark;\n```\n\n----------------------------------------\n\nTITLE: Setting Image Cache Validity in C#\nDESCRIPTION: This C# code snippet shows how to configure image caching for a remote image in a .NET MAUI application. It creates a UriImageSource, sets its Uri property to the image's URL, and sets the CacheValidity property to a TimeSpan value (10 days in this example), controlling how long the image is cached locally. The created UriImageSource is then assigned to the Source property of an Image control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image();\nimage.Source = new UriImageSource\n{\n    Uri = new Uri(\"https://aka.ms/campus.jpg\"),\n    CacheValidity = new TimeSpan(10,0,0,0)\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Items to .NET for Android Projects with dotnet new\nDESCRIPTION: These commands demonstrate how to use `dotnet new` with item templates to add specific items like activities and layouts to existing .NET for Android projects.  The commands allow specifying names, namespaces, and output locations for the generated files.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new android-activity --name LoginActivity --namespace MyAndroidApp\ndotnet new android-layout   --name MyLayout      --output Resources/layout\n```\n\n----------------------------------------\n\nTITLE: Creating PanGestureRecognizer in C#\nDESCRIPTION: This C# snippet demonstrates how to create a PanGestureRecognizer instance programmatically and attach it to an Image view. The PanUpdated event is handled inline using a lambda expression. The gesture recognizer is added to the Image's GestureRecognizers collection.  The lambda expression serves as the event handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pan.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nPanGestureRecognizer panGesture = new PanGestureRecognizer();\npanGesture.PanUpdated += (s, e) =>\n{\n    // Handle the pan\n};\nimage.GestureRecognizers.Add(panGesture);\n```\n\n----------------------------------------\n\nTITLE: Implement Load All Notes Method C#\nDESCRIPTION: This static method loads all notes from the device's storage, returning an enumerable collection of `Note` instances. It retrieves all files matching the `*.notes.txt` pattern, loads each file into a `Note` object using the `Load` method, and orders the notes by their modification date. It uses `Directory.EnumerateFiles` to find the note files.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Notes.Models;\n\npublic partial class Note\n{\n    public static IEnumerable<Note> LoadAll()\n    {\n        // Get the folder where the notes are stored.\n        string appDataPath = FileSystem.AppDataDirectory;\n\n        // Use .NET LINQ to load *.notes.txt files.\n        return Directory\n\n                // Select the file names from the directory\n                .EnumerateFiles(appDataPath, \"*.notes.txt\")\n\n                // Each file name is used to load a note\n                .Select(filename =>\n                {\n                    return Note.Load(Path.GetFileName(filename)).Result;\n                })\n\n                // With the notes loaded, order them by date\n                .OrderByDescending(note => note.Date);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing of MauiVideoPlayer Resources\nDESCRIPTION: This code shows the `Dispose` override in the `MauiVideoPlayer` class.  It unsubscribes from the `VideoView.Prepared` event, disposes of the `VideoView`, and sets the `_videoView` and `_video` references to null for garbage collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : CoordinatorLayout\n{\n    VideoView _videoView;\n    Video _video;\n    ...\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            _videoView.Prepared -= OnVideoViewPrepared;\n            _videoView.Dispose();\n            _videoView = null;\n            _video = null;\n        }\n\n        base.Dispose(disposing);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing App Name - Android XML\nDESCRIPTION: This XML snippet demonstrates how to define a localized app name for Android using a `Strings.xml` file in the `values-<language>` folder. The `app_name` resource ID is set to a translated string (French in this case). This file is added with a build action of **AndroidResource**.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <!-- French -->\n    <string name=\"app_name\">Maison</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Generated Java Callable Wrapper (JCW)\nDESCRIPTION: This Java code represents the Java Callable Wrapper (JCW) generated for the C# `MainActivity` class. It provides the necessary entry points for Java code to invoke the managed C# methods. The `n_onCreateView` and `n_onCreate` methods are declared as `native`, indicating that their implementations reside in the .NET runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class MainActivity extends androidx.appcompat.app.AppCompatActivity\n{\n  public android.view.View onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3)\n  {\n    return n_onCreateView (p0, p1, p2, p3);\n  }\n  private native android.view.View n_onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3);\n\n  public void onCreate (android.os.Bundle p0)\n  {\n    n_onCreate (p0);\n  }\n  private native void n_onCreate (android.os.Bundle p0);\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching PanGestureRecognizer in XAML\nDESCRIPTION: This XAML snippet demonstrates how to attach a PanGestureRecognizer to an Image view.  The PanUpdated event is bound to the OnPanUpdated method in the code-behind. This allows the application to respond to pan gestures on the image. The Source property specifies the image to be displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pan.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"monkey.jpg\">\n    <Image.GestureRecognizers>\n        <PanGestureRecognizer PanUpdated=\"OnPanUpdated\" />\n    </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Updating Base Style for Dynamic Inheritance in C#\nDESCRIPTION: This C# code shows how to modify the base style used in dynamic style inheritance, which will propagate style changes to styles that inherit from it using BaseResourceKey.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nResources[\"blueSearchBarStyle\"] = Resources[\"greenSearchBarStyle\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Platform Partial Class C#\nDESCRIPTION: This code snippet defines a cross-platform partial class for customizing a .NET MAUI Entry control. It declares partial methods (ChangedHandler and ChangingHandler) which are called from the event handlers. The implementation of these methods is platform-specific and resides in separate partial classes in platform-specific folders.  The partial methods do not need to be implemented on every platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CustomizeHandlersDemo.Views;\n\npublic partial class CustomizeEntryPartialMethodsPage : ContentPage\n{\n    public CustomizeEntryPartialMethodsPage()\n    {\n        InitializeComponent();\n    }\n\n    partial void ChangedHandler(object sender, EventArgs e);\n    partial void ChangingHandler(object sender, HandlerChangingEventArgs e);\n\n    void OnEntryHandlerChanged(object sender, EventArgs e) => ChangedHandler(sender, e);\n    void OnEntryHandlerChanging(object sender, HandlerChangingEventArgs e) => ChangingHandler(sender, e);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize Layout Combinations XAML\nDESCRIPTION: This example optimizes the previous layout by using a Grid layout instead of nested HorizontalStackLayout elements. The Grid provides a more efficient way to achieve the desired form layout, reducing unnecessary calculations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <Grid ColumnDefinitions=\"100,*\"\n          RowDefinitions=\"30,30,30,30\">\n        <Label Text=\"Name:\" />\n        <Entry Grid.Column=\"1\"\n               Placeholder=\"Enter your name\" />\n        <Label Grid.Row=\"1\"\n               Text=\"Age:\" />\n        <Entry Grid.Row=\"1\"\n               Grid.Column=\"1\"\n               Placeholder=\"Enter your age\" />\n        <Label Grid.Row=\"2\"\n               Text=\"Occupation:\" />\n        <Entry Grid.Row=\"2\"\n               Grid.Column=\"1\"\n               Placeholder=\"Enter your occupation\" />\n        <Label Grid.Row=\"3\"\n               Text=\"Address:\" />\n        <Entry Grid.Row=\"3\"\n               Grid.Column=\"1\"\n               Placeholder=\"Enter your address\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Opt-in Assemblies to Trimming with TrimmableAssembly Build Item\nDESCRIPTION: This code snippet demonstrates how to opt-in specific assemblies for trimming using the `TrimmableAssembly` build item in the project file.  Adding an assembly to this list indicates that it is safe to be trimmed and that the trimmer can remove any unused code from it. This is equivalent to setting the `[AssemblyMetadata(\"IsTrimmable\", \"True\")]` attribute when building the assembly itself.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/trimming.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <TrimmableAssembly Include=\"MyAssembly\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Converting Path Markup Syntax to Geometry in C#\nDESCRIPTION: This code snippet shows how to convert path markup syntax to a `Geometry` object in C# using the `PathGeometryConverter` class. The `ConvertFromInvariantString` method is used to parse the path markup string and create a `Geometry` object. This allows defining path geometries programmatically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-markup-syntax.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nGeometry pathData = (Geometry)new PathGeometryConverter().ConvertFromInvariantString(\"M13.908992,16.207977 L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983Z\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Diagonal Linear Gradient in MAUI Graphics (C#)\nDESCRIPTION: This code snippet demonstrates how to create a diagonal linear gradient using the LinearGradientPaint class in MAUI Graphics. It sets the StartColor to yellow, the EndColor to green, and then fills a rounded rectangle with the gradient. The gradient interpolates diagonally from the top-left to the bottom-right corner of the rectangle. The StartPoint defaults to (0,0) and EndPoint defaults to (1,1).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nLinearGradientPaint linearGradientPaint = new LinearGradientPaint\n{\n    StartColor = Colors.Yellow,\n    EndColor = Colors.Green,\n    // StartPoint is already (0,0)\n    // EndPoint is already (1,1)\n};\n\nRectF linearRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(linearGradientPaint, linearRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(linearRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Setting Video Duration on iOS/Mac Catalyst in C#\nDESCRIPTION: This snippet demonstrates how to retrieve the duration of a video on iOS and Mac Catalyst from the `AVPlayerItem.Duration` property. The `UpdateStatus` method, which is called periodically, updates the .NET MAUI `Video` control's duration through the `IVideoController` interface, using a helper method `ConvertTime` to handle the `CMTime` to `TimeSpan` conversion.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayerItem _playerItem;\n        ...\n\n        TimeSpan ConvertTime(CMTime cmTime)\n        {\n            return TimeSpan.FromSeconds(Double.IsNaN(cmTime.Seconds) ? 0 : cmTime.Seconds);\n        }\n\n        public void UpdateStatus()\n        {\n            ...\n            if (_playerItem != null)\n            {\n                ((IVideoController)_video).Duration = ConvertTime(_playerItem.Duration);\n                ...\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull to Refresh in CarouselView (C#)\nDESCRIPTION: This C# snippet shows how to programmatically implement pull-to-refresh functionality in a CarouselView using RefreshView. It defines a command that is executed when the user pulls to refresh, and it updates the IsRefreshing property of the RefreshView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nRefreshView refreshView = new RefreshView();\nICommand refreshCommand = new Command(() =>\n{\n    // IsRefreshing is true\n    // Refresh data here\n    refreshView.IsRefreshing = false;\n});\nrefreshView.Command = refreshCommand;\n\nCarouselView carouselView = new CarouselView();\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (AnimalsViewModel vm) => vm.Animals);\nrefreshView.Content = carouselView;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Style Inheritance in XAML\nDESCRIPTION: This code demonstrates explicit style inheritance. A base style (baseStyle) is defined for View objects. Two other styles, labelStyle (for Label) and buttonStyle (for Button), inherit from baseStyle using the BasedOn property.  Each inheriting style adds or overrides properties specific to its target type.  The styles are then applied to Label and Button controls, respectively.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style x:Key=\"baseStyle\"\n               TargetType=\"View\">\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <StackLayout.Resources>\n            <Style x:Key=\"labelStyle\"\n                   TargetType=\"Label\"\n                   BasedOn=\"{StaticResource baseStyle}\">\n                <Setter Property=\"FontSize\" Value=\"18\" />\n                <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n                <Setter Property=\"TextColor\" Value=\"Teal\" />\n            </Style>\n            <Style x:Key=\"buttonStyle\"\n                   TargetType=\"Button\"\n                   BasedOn=\"{StaticResource baseStyle}\">\n                <Setter Property=\"BorderColor\" Value=\"Lime\" />\n                <Setter Property=\"CornerRadius\" Value=\"5\" />\n                <Setter Property=\"BorderWidth\" Value=\"5\" />\n                <Setter Property=\"WidthRequest\" Value=\"200\" />\n                <Setter Property=\"TextColor\" Value=\"Teal\" />\n            </Style>\n        </StackLayout.Resources>\n        <Label Text=\"This label uses style inheritance\"\n               Style=\"{StaticResource labelStyle}\" />\n        <Button Text=\"This button uses style inheritance\"\n                Style=\"{StaticResource buttonStyle}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Polyline in C# for MAUI Map\nDESCRIPTION: This C# code demonstrates how to create a Polyline object and add it to a MAUI Map. The StrokeColor and StrokeWidth properties are set to customize the line's appearance. The Geopath property is populated with a list of Location objects, defining the polyline's vertices. The Microsoft.Maui.Controls.Maps and Microsoft.Maui.Maps namespaces are required. Finally, the polyline is added to the Map's MapElements collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nMap map = new Map();\n\n// instantiate a polyline\nPolyline polyline = new Polyline\n{\n    StrokeColor = Colors.Blue,\n    StrokeWidth = 12,\n    Geopath =\n    {\n        new Location(47.6381401, -122.1317367),\n        new Location(47.6381473, -122.1350841),\n        ...\n    }\n};\n\n// Add the Polyline to the map's MapElements collection\nmap.MapElements.Add(polyline);\n```\n\n----------------------------------------\n\nTITLE: CarouselView ItemTemplate Definition C#\nDESCRIPTION: This C# snippet programmatically defines the appearance of each item in the CarouselView using a DataTemplate. It creates label and image elements and binds their properties to the properties of a Monkey object, adding those to stacklayouts and eventually to a Border, which is assigned as the DataTemplate content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView();\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n\ncarouselView.ItemTemplate = new DataTemplate(() =>\n{\n    Label nameLabel = new Label { ... };\n    nameLabel.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Name);\n\n    Image image = new Image { ... };\n    image.SetBinding(Image.SourceProperty, static (Monkey monkey) => monkey.ImageUrl);\n\n    Label locationLabel = new Label { ... };\n    locationLabel.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Location);\n\n    Label detailsLabel = new Label { ... };\n    detailsLabel.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Details);\n\n    StackLayout stackLayout = new StackLayout();\n    stackLayout.Add(nameLabel);\n    stackLayout.Add(image);\n    stackLayout.Add(locationLabel);\n    stackLayout.Add(detailsLabel);\n\n    Border border = new Border { ... };\n    StackLayout rootStackLayout = new StackLayout();\n    rootStackLayout.Add(border);\n\n    return rootStackLayout;\n});\n```\n\n----------------------------------------\n\nTITLE: Binding to a specific ancestor level\nDESCRIPTION: This XAML code snippet illustrates how to bind to a property of an ancestor at a specific level in the visual tree using the AncestorLevel property. It binds the Text property of a Label to the Text property of the second Entry found in the ancestor chain.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/relative-bindings.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding x:DataType='Entry', Source={RelativeSource AncestorType={x:Type Entry}, AncestorLevel=2}, Path=Text}\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Grid CollectionView in C#\nDESCRIPTION: Creates a CollectionView in C# to display items in a vertical grid.  It initializes a `GridItemsLayout` with a span of 2 and a vertical orientation. This C# code is functionally equivalent to the previous XAML example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = new GridItemsLayout(2, ItemsLayoutOrientation.Vertical)\n};\n```\n\n----------------------------------------\n\nTITLE: Setting WindowSoftInputModeAdjust on a Window in C#\nDESCRIPTION: This C# snippet demonstrates how to set the `WindowSoftInputModeAdjust` property on a specific `Window` instance, allowing different windows within the application to have different soft keyboard input mode settings. Requires the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/soft-keyboard-input-mode.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Controls.PlatformConfiguration.AndroidSpecific.Application.SetWindowSoftInputModeAdjust\n    (this.Window, WindowSoftInputModeAdjust.Resize);\n```\n\n----------------------------------------\n\nTITLE: Instantiate SwipeView in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a SwipeView with swipe items on the left side. It defines two SwipeItem objects for 'Favorite' and 'Delete' actions within the SwipeView's LeftItems collection. The SwipeView content is a simple Grid with a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems>\n            <SwipeItem Text=\"Favorite\"\n                       IconImageSource=\"favorite.png\"\n                       BackgroundColor=\"LightGreen\"\n                       Invoked=\"OnFavoriteSwipeItemInvoked\" />\n            <SwipeItem Text=\"Delete\"\n                       IconImageSource=\"delete.png\"\n                       BackgroundColor=\"LightPink\"\n                       Invoked=\"OnDeleteSwipeItemInvoked\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n    <Grid HeightRequest=\"60\"\n          WidthRequest=\"300\"\n          BackgroundColor=\"LightGray\">\n        <Label Text=\"Swipe right\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </Grid>\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Flyout Content Template - XAML\nDESCRIPTION: This XAML snippet shows how to define a flyout content template in a .NET MAUI Shell application. It sets the Shell.FlyoutContentTemplate property to a DataTemplate containing a CollectionView, which displays the titles from the FlyoutItems collection, bound to the AppShell.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       xmlns:local=\"clr-namespace:Xaminals\"\n       x:Name=\"shell\"\n       x:DataType=\"local:AppShell\">\n    ...\n    <Shell.FlyoutContentTemplate>\n        <DataTemplate>\n            <CollectionView BindingContext=\"{x:Reference shell}\"\n                            IsGrouped=\"True\"\n                            ItemsSource=\"{Binding FlyoutItems}\">\n                <CollectionView.ItemTemplate>\n                    <DataTemplate x:DataType=\"local:AppShell\">\n                        <Label Text=\"{Binding Title}\"\n                               TextColor=\"White\"\n                               FontSize=\"18\" />\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n        </DataTemplate>\n    </Shell.FlyoutContentTemplate>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Customize Switch Appearance in C# (>=net-maui-10.0)\nDESCRIPTION: This code snippet demonstrates how to customize the appearance of a Switch in C# by setting the OffColor, OnColor, and ThumbColor properties.  The Colors class provides predefined colors for each property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSwitch switch = new Switch { OffColor = Colors.Red, OnColor = Colors.Orange, ThumbColor = Colors.Green };\n```\n\n----------------------------------------\n\nTITLE: Creating a Bottom-Right Radial Gradient in MAUI Graphics (C#)\nDESCRIPTION: This code snippet demonstrates how to create a radial gradient with its center positioned at the bottom-right corner of the rectangle. It sets the StartColor to red, the EndColor to dark blue, and the Center property to (1.0, 1.0). The Radius property remains at its default value of 0.5. This positions the center of the radial gradient at the bottom-right corner of the rectangle before filling it.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nRadialGradientPaint radialGradientPaint = new RadialGradientPaint\n{\n    StartColor = Colors.Red,\n    EndColor = Colors.DarkBlue,\n    Center = new Point(1.0, 1.0)\n    // Radius is already 0.5\n};\n\nRectF radialRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(radialGradientPaint, radialRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(radialRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Align Self CSS in .NET MAUI\nDESCRIPTION: Allows individual .NET MAUI VisualElement items to override the align-items property of the FlexLayout. Valid values are auto, stretch, center, start, end, flex-start, flex-end, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\nalign-self: flex-end;\n```\n\n----------------------------------------\n\nTITLE: xUnit Fact Test Example\nDESCRIPTION: This C# snippet shows examples of xUnit tests using the `[Fact]` attribute.  Facts represent invariant conditions. A passing and failing test are demonstrated using Assert.AreEqual.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyUnitTests\n{\n    public class MyTests\n    {\n        [Fact]\n        public void PassingTest()\n        {\n            Assert.AreEqual(4, 2+2);\n        }\n\n        [Fact]\n        public void FailingTest()\n        {\n            Assert.AreEqual(5, 2+2);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView Item Appearance with DataTemplate in XAML\nDESCRIPTION: This snippet defines the appearance of each item in a CollectionView using a DataTemplate in XAML. It uses a Grid layout to display an image, name, and location for each Monkey object. The x:DataType attribute specifies the type of data being displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <Grid Padding=\"10\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"Auto\" />\n                    <ColumnDefinition Width=\"Auto\" />\n                </Grid.ColumnDefinitions>\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Attaching SwipeGestureRecognizer to BoxView C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically create a BoxView and attach a SwipeGestureRecognizer to it. The direction is set to 'Left', and the 'OnSwiped' method is wired up as the event handler.  Requires .NET MAUI framework and the use of Colors enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nBoxView boxView = new BoxView { Color = Colors.Teal, ... };\nSwipeGestureRecognizer leftSwipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Left };\nleftSwipeGesture.Swiped += OnSwiped;\n\nboxView.GestureRecognizers.Add(leftSwipeGesture);\n```\n\n----------------------------------------\n\nTITLE: Select elements with a specific class attribute in CSS\nDESCRIPTION: This CSS snippet demonstrates how to select elements with a specific class attribute using the `.class` selector. The styles define font styles and text alignment for elements with the classes 'detailPageTitle' and 'detailPageSubtitle'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.detailPageTitle {\n    font-style: bold;\n    font-size: 14;\n    text-align: center;\n}\n\n.detailPageSubtitle {\n    text-align: center;\n    font-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Attributed Text with Markdown in C#\nDESCRIPTION: This snippet demonstrates how to draw attributed text on a .NET MAUI canvas using the `DrawText` method with an `IAttributedText` object. It converts markdown text to attributed text using the `MarkdownAttributedTextReader` and displays it with the correct styling. Requires the `Microsoft.Maui.Graphics.Text.Markdig` NuGet package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Graphics.Text;\n...\n\ncanvas.Font = new Font(\"Arial\");\ncanvas.FontSize = 18;\ncanvas.FontColor = Colors.Blue;\n\nstring markdownText = @\"This is *italic text*, **bold text**, __underline text__, and ***bold italic text***.\";\nIAttributedText attributedText = MarkdownAttributedTextReader.Read(markdownText); // Requires the Microsoft.Maui.Graphics.Text.Markdig package\ncanvas.DrawText(attributedText, 10, 10, 400, 400);\n```\n\n----------------------------------------\n\nTITLE: Define Device Installation Model C#\nDESCRIPTION: This code defines the `DeviceInstallation` class, which represents a device's installation information for push notifications. It includes properties for the installation ID, platform (e.g., iOS, Android), push channel (device token), and tags. The `InstallationId`, `Platform`, and `PushChannel` properties are marked as required using data annotations. This model is used to register and manage devices with Azure Notification Hubs. The `Tags` property is initialized to an empty string array. This class is part of the `PushNotificationsAPI.Models` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace PushNotificationsAPI.Models;\n\npublic class DeviceInstallation\n{\n    [Required]\n    public string InstallationId { get; set; }\n\n    [Required]\n    public string Platform { get; set; }\n\n    [Required]\n    public string PushChannel { get; set; }\n\n    public IList<string> Tags { get; set; } = Array.Empty<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Pressed/Released Events XAML\nDESCRIPTION: This XAML code defines a `Button` with handlers for the `Pressed` and `Released` events. A `Label` is also defined to display text that will be animated when the button is pressed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ButtonDemos.PressAndReleaseButtonPage\"\n             Title=\"Press and Release Button\">\n    <StackLayout>\n        <Button Text=\"Press to Rotate Text!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\"\n                Pressed=\"OnButtonPressed\"\n                Released=\"OnButtonReleased\" />\n        <Label x:Name=\"label\"\n               Text=\"Press and hold the Button above\"\n               FontSize=\"18\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: NumericValidationTriggerAction C#\nDESCRIPTION: This C# code demonstrates the implementation of a TriggerAction that validates numeric input in an Entry control.  When the TextChanged event fires, it attempts to parse the text as a double and sets the TextColor to red if parsing fails, or black if parsing succeeds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NumericValidationTriggerAction : TriggerAction<Entry>\n{\n    protected override void Invoke(Entry entry)\n    {\n        double result;\n        bool isValid = Double.TryParse(entry.Text, out result);\n        entry.TextColor = isValid ? Colors.Black : Colors.Red;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating StackLayout with FillAndExpand to .NET MAUI Grid (XAML)\nDESCRIPTION: This XAML snippet demonstrates the equivalent .NET MAUI Grid layout for the previous Xamarin.Forms StackLayout example. The Grid defines two rows: one for the Label (Auto height) and one for the Image (taking up the remaining space with a height of *). The Image is placed in the second row using Grid.Row=\"1\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/layouts.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Grid RowDefinitions=\"Auto, *\">\n    <Label Text=\"Hello world!\"/>\n    <Image Grid.Row=\"1\" Source=\"dotnetbot.png\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Reloading WebView content using C#\nDESCRIPTION: This code snippet demonstrates how to reload the content of a .NET MAUI WebView using the `Reload` method. When the `Reload` method is invoked, the `ReloadRequested` event is fired.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nWebView webView = new WebView();\n...\nwebView.Reload();\n```\n\n----------------------------------------\n\nTITLE: Reading App Information in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to access various properties of the IAppInfo interface to retrieve information about the application, such as its name, package name, version, and build string. It uses the AppInfo.Current property to get the current application's information.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-information.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring name = AppInfo.Current.Name;\nstring packageName = AppInfo.Current.PackageName;\nstring version = AppInfo.Current.VersionString;\nstring build = AppInfo.Current.BuildString;\n```\n\n----------------------------------------\n\nTITLE: Get Tap Gesture Position in C#\nDESCRIPTION: This C# code demonstrates how to obtain the position of a tap gesture relative to the window, an Image control, and the container view using the GetPosition method of the TappedEventArgs object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnTapGestureRecognizerTapped(object sender, TappedEventArgs e)\n{\n    // Position inside window\n    Point? windowPosition = e.GetPosition(null);\n\n    // Position relative to an Image\n    Point? relativeToImagePosition = e.GetPosition(image);\n\n    // Position relative to the container view\n    Point? relativeToContainerPosition = e.GetPosition((View)sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Video Playback in Android WebView with C#\nDESCRIPTION: This code snippet demonstrates how to enable fullscreen video playback in a WebView on Android by embedding an HTML snippet with an iframe.  It requires the `HtmlWebViewSource` and sets the HTML property to a complete HTML document containing the video embed. The HTML includes meta viewport settings and CSS to ensure proper scaling and prevent margins.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmyWebView.Source = new HtmlWebViewSource\n{\n  Html = @\"<!DOCTYPE html>\n    <html>\n    <head>\n      <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n      <style>\n        body { margin: 0; padding: 0; }\n        .video-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; }\n        .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }\n      </style>\n    </head>\n    <body>\n      <div class='video-container'>\n        <iframe src='https://www.youtube.com/embed/YE7VzlLtp-4'\n            frameborder='0'\n            allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share'\n            allowfullscreen>\n        </iframe>\n      </div>\n    </body>\n    </html>\"\n};\n```\n\n----------------------------------------\n\nTITLE: ImageButton Clicked Event Handler - .NET MAUI C#\nDESCRIPTION: This C# code snippet demonstrates the event handler for the ImageButton's Clicked event. It increments a counter and updates a label's text to reflect the number of clicks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/imagebutton.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class ImageButtonDemoPage : ContentPage\n{\n    int clickTotal;\n\n    public ImageButtonDemoPage()\n    {\n        InitializeComponent();\n    }\n\n    void OnImageButtonClicked(object sender, EventArgs e)\n    {\n        clickTotal += 1;\n        label.Text = $\"{clickTotal} ImageButton click{(clickTotal == 1 ? \"\" : \"s\")}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Profile in launchSettings.json (JSON)\nDESCRIPTION: Configures an HTTP profile within the ASP.NET Core web service's launchSettings.json file. This profile ensures the web service is launched over HTTP, allowing .NET MAUI apps running on emulators/simulators to connect without requiring HTTPS configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"api/todoitems\",\n      \"applicationUrl\": \"http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Backwards Multiple Times with a Route in MAUI Shell\nDESCRIPTION: This snippet demonstrates how to navigate backwards multiple times and then to a specific route in a MAUI Shell application using `GoToAsync`. It uses \"../../route\" to go back two levels and then to the specified route.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait Shell.Current.GoToAsync(\"../../route\");\n```\n\n----------------------------------------\n\nTITLE: Create global.json config file\nDESCRIPTION: This command creates a `global.json` file in the current directory, specifying that the project should use .NET SDK version 6.0.0. The `--roll-forward major` option allows the SDK to roll forward to the latest major version within the 6.0.x series. This is useful for forcing the project to use .NET 6 when a .NET 7 preview is also installed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new globaljson --sdk-version 6.0.0 --roll-forward major\n```\n\n----------------------------------------\n\nTITLE: Try to open map app (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the TryOpenAsync method to safely open the map application. The TryOpenAsync method returns a boolean value indicating if the map app was successfully opened. This is useful for handling scenarios where the map app might not be available or permissions are missing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar location = new Location(47.645160, -122.1306032);\n\nvar success = await Map.Default.TryOpenAsync(location);\n\nif (!success)\n{\n    // Inform user that there's not a maps app installed!\n}\n```\n\n----------------------------------------\n\nTITLE: Set SemanticProperties.Description using SetValue in C#\nDESCRIPTION: This code snippet demonstrates how to set the SemanticProperties.Description attached property in C# using the SetValue method. This approach is an alternative way to set attached properties and achieves the same result as using SemanticProperties.SetDescription. The screen reader will announce \"Cute dot net bot waving hi to you!\" when the image gains accessibility focus.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nimage.SetValue(SemanticProperties.DescriptionProperty, \"Cute dot net bot waving hi to you!\");\n```\n\n----------------------------------------\n\nTITLE: Transform Text Casing - MAUI XAML\nDESCRIPTION: Demonstrates how to transform the casing of the text in the Editor using the TextTransform property. Options include None, Default, Lowercase, and Uppercase.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor Text=\"This text will be displayed in uppercase.\"\n        TextTransform=\"Uppercase\" />\n```\n\n----------------------------------------\n\nTITLE: Display Grouped Data CollectionView XAML\nDESCRIPTION: This XAML code demonstrates how to display grouped data in a CollectionView. The `ItemsSource` is bound to the `Animals` collection, and `IsGrouped` is set to `true` to enable grouping.  An `ItemTemplate` defines the appearance of each animal item within the groups, including an image, name, and location.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Animals}\"\n                IsGrouped=\"true\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Animal\">\n            <Grid Padding=\"10\">\n                ...\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: CompareStateTrigger Style Definition XAML\nDESCRIPTION: This XAML code demonstrates how to use CompareStateTrigger to change the background color of a Grid based on the IsChecked property of a CheckBox. The style targets Grid objects. The Property is bound to the IsChecked property of the CheckBox named 'checkBox'. The Value is set to 'True' or 'False', triggering the corresponding VisualState.  The x:DataType is specified as CheckBox for type safety in the binding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_12\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Grid\">\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup>\n                <VisualState x:Name=\"Checked\">\n                    <VisualState.StateTriggers>\n                        <CompareStateTrigger Property=\"{Binding x:DataType='CheckBox', Source={x:Reference checkBox}, Path=IsChecked}\"\n                                             Value=\"True\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"Black\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Unchecked\">\n                    <VisualState.StateTriggers>\n                        <CompareStateTrigger Property=\"{Binding x:DataType='CheckBox', Source={x:Reference checkBox}, Path=IsChecked}\"\n                                             Value=\"False\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"White\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n...\n<Grid>\n    <Border BackgroundColor=\"White\"\n            StrokeShape=\"RoundRectangle 12\"\n            Margin=\"24\"\n            Padding=\"24\"\n            HorizontalOptions=\"Center\"\n            VerticalOptions=\"Center\">\n        <StackLayout Orientation=\"Horizontal\">\n            <CheckBox x:Name=\"checkBox\"\n                      VerticalOptions=\"Center\" />\n            <Label Text=\"Check the CheckBox to modify the Grid background color.\"\n                   VerticalOptions=\"Center\" />\n        </StackLayout>\n    </Border>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in Android MainActivity C#\nDESCRIPTION: Initializes .NET MAUI within the Android MainActivity's OnCreate method. It creates a Lazy<MauiApp> to ensure the .NET MAUI app is built before creating views and then creates a MauiContext for embedding .NET MAUI views. Uses MauiApp.CreateEmbeddedWindowContext to create a window context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.Droid;\n\n[Activity(Label = \"@string/app_name\", MainLauncher = true, Theme = \"@style/AppTheme\")]\npublic class MainActivity : Activity\n{\n    public static readonly Lazy<MauiApp> MauiApp = new(() =>\n    {\n        var mauiApp = MauiProgram.CreateMauiApp(builder =>\n        {\n            builder.UseMauiEmbedding();\n        });\n        return mauiApp;\n    });\n\n    public static bool UseWindowContext = true;\n\n    protected override void OnCreate(Bundle? savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        // Ensure .NET MAUI app is built before creating .NET MAUI views\n        var mauiApp = MainActivity.MauiApp.Value;\n\n        // Create .NET MAUI context\n        var context = UseWindowContext\n            ? mauiApp.CreateEmbeddedWindowContext(this) // Create window context\n            : new MauiContext(mauiApp.Services, this);  // Create app context\n\n        ...              \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Types from Imported Namespace\nDESCRIPTION: Demonstrates how to declare and use a control from a previously declared namespace. The example declares the Expander control using the 'controls' prefix.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/index.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:Expander IsExpanded=\"True\">\n    ...\n</controls:Expander>\n```\n\n----------------------------------------\n\nTITLE: Create PushNotificationFirebaseMessagingService Class (C#)\nDESCRIPTION: This C# class, `PushNotificationFirebaseMessagingService`, extends `FirebaseMessagingService` to handle incoming Firebase Cloud Messaging (FCM) messages and token refreshes. It uses an `IntentFilter` to receive messages and overrides `OnNewToken` to update the device's FCM token, which is then used to refresh the device registration. The `OnMessageReceived` method handles incoming messages, triggering actions based on the message data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Firebase.Messaging;\nusing PushNotificationsDemo.Services;\n\nnamespace PushNotificationsDemo.Platforms.Android;\n\n[Service(Exported = false)]\n[IntentFilter(new[] { \"com.google.firebase.MESSAGING_EVENT\" })]\npublic class PushNotificationFirebaseMessagingService : FirebaseMessagingService\n{\n    IPushDemoNotificationActionService _notificationActionService;\n    INotificationRegistrationService _notificationRegistrationService;\n    IDeviceInstallationService _deviceInstallationService;\n    int _messageId;\n\n    IPushDemoNotificationActionService NotificationActionService =>\n        _notificationActionService ?? (_notificationActionService = IPlatformApplication.Current.Services.GetService<IPushDemoNotificationActionService>());\n\n    INotificationRegistrationService NotificationRegistrationService =>\n        _notificationRegistrationService ?? (_notificationRegistrationService = IPlatformApplication.Current.Services.GetService<INotificationRegistrationService>());\n\n    IDeviceInstallationService DeviceInstallationService =>\n        _deviceInstallationService ?? (_deviceInstallationService = IPlatformApplication.Current.Services.GetService<IDeviceInstallationService>());\n\n    public override void OnNewToken(string token)\n    {\n        DeviceInstallationService.Token = token;\n\n        NotificationRegistrationService.RefreshRegistrationAsync()\n            .ContinueWith((task) =>\n            {\n                if (task.IsFaulted)\n                    throw task.Exception;\n            });\n    }\n\n    public override void OnMessageReceived(RemoteMessage message)\n    {\n        base.OnMessageReceived(message);\n\n        if (message.Data.TryGetValue(\"action\", out var messageAction))\n            NotificationActionService.TriggerAction(messageAction);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DataTemplateSelector as a Page-Level Resource in XAML\nDESCRIPTION: This code snippet demonstrates how to declare a `PersonDataTemplateSelector` as a page-level resource in XAML. It defines two DataTemplate objects (`validPersonTemplate` and `invalidPersonTemplate`) and a `PersonDataTemplateSelector` object, setting its `ValidTemplate` and `InvalidTemplate` properties to the DataTemplate objects using the `StaticResource` markup extension. Resources are defined in the page's ResourceDictionary. The namespaces should be defined as xmlns:local=\"clr-namespace:Selector\" and xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:local=\"clr-namespace:Selector\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Selector.MainPage\">\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"validPersonTemplate\">\n            <Grid>\n                ...\n            </Grid>\n        </DataTemplate>\n        <DataTemplate x:Key=\"invalidPersonTemplate\">\n            <Grid>\n                ...\n            </Grid>\n        </DataTemplate>\n        <local:PersonDataTemplateSelector x:Key=\"personDataTemplateSelector\"\n                                          ValidTemplate=\"{StaticResource validPersonTemplate}\"\n                                          InvalidTemplate=\"{StaticResource invalidPersonTemplate}\" />\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Playing Inline Video on iOS - WebView Initialization in C#\nDESCRIPTION: This code snippet ensures that the `AllowsInlineMediaPlayback` property in a `Configuration` object is set to `true` on iOS. This configuration is performed in the event handler for the BlazorWebView.BlazorWebViewInitializing event. Requires the IOS preprocessor directive.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprivate void BlazorWebViewInitializing(object? sender, BlazorWebViewInitializingEventArgs e)\n{\n#if IOS\n    e.Configuration.AllowsInlineMediaPlayback = true;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll to Item in CarouselView (C#)\nDESCRIPTION: This C# code snippet demonstrates how to scroll the CarouselView to a specific item object. The item is found by searching the `Monkeys` collection in the `MonkeysViewModel` for a monkey named \"Proboscis Monkey\".  It requires a `MonkeysViewModel` and `Monkey` class to be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMonkeysViewModel viewModel = BindingContext as MonkeysViewModel;\nMonkey monkey = viewModel.Monkeys.FirstOrDefault(m => m.Name == \"Proboscis Monkey\");\ncarouselView.ScrollTo(monkey);\n```\n\n----------------------------------------\n\nTITLE: Define Android Signing Properties in .NET MAUI Project (XML)\nDESCRIPTION: This XML snippet shows how to define Android signing properties within a .NET MAUI project file. It includes a condition to ensure these settings are only applied for Android target frameworks and release builds. It sets the keystore and alias for signing the app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'\">\n    <AndroidSigningKeyStore>myapp.keystore</AndroidSigningKeyStore>\n    <AndroidSigningKeyAlias>myapp</AndroidSigningKeyAlias>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Define IMarkupExtension Interface C#\nDESCRIPTION: Shows the definition of the IMarkupExtension interface and its generic counterpart IMarkupExtension<T>. These interfaces define the ProvideValue method, which is the core of a markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMarkupExtension\n{\n    object ProvideValue(IServiceProvider serviceProvider);\n}\n\npublic interface IMarkupExtension<out T> : IMarkupExtension\n{\n    new T ProvideValue(IServiceProvider serviceProvider);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure WebView Mixed Content using Fluent API in C#\nDESCRIPTION: This C# snippet demonstrates how to use the fluent API to set the `MixedContentMode` of a WebView to `AlwaysAllow`. It uses the `On<Android>` extension method to specify that this configuration applies only to Android. The `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace must be imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/webview-mixed-content.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nwebView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetMixedContentMode(MixedContentHandling.AlwaysAllow);\n```\n\n----------------------------------------\n\nTITLE: Invoke JavaScript Method from C# using InvokeJavaScriptAsync\nDESCRIPTION: This C# code demonstrates invoking a JavaScript method named `AddNumbers` from C# using `InvokeJavaScriptAsync`. It includes setting the parameters, JSON serialization information, and handling the result. Requires the `HybridSampleJSContext` definition.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\ndouble x = 123d;\ndouble y = 321d;\n\ndouble result = await hybridWebView.InvokeJavaScriptAsync<double>(\n    \"AddNumbers\", // JavaScript method name\n    HybridSampleJSContext.Default.Double, // JSON serialization info for return type\n    [x, y], // Parameter values\n    [HybridSampleJSContext.Default.Double, HybridSampleJSContext.Default.Double]); // JSON serialization info for each parameter\n```\n\n----------------------------------------\n\nTITLE: Enabling BlazorWebView Logging in C#\nDESCRIPTION: This code snippet demonstrates how to enable logging for BlazorWebView and related components by adding a filter to the logging configuration. It sets the log level to Trace for the 'Microsoft.AspNetCore.Components.WebView' namespace, allowing for maximum logging output. This configuration is performed as part of service registration in the dependency injection system. Requires Microsoft.Extensions.Logging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddLogging(logging =>\n{\n    logging.AddFilter(\"Microsoft.AspNetCore.Components.WebView\", LogLevel.Trace);\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Windows in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to close windows in a .NET MAUI application using the `CloseWindow` method on the `Application` object. It shows how to close a specific window and how to close the currently active window. The `GetParentWindow()` is assumed to return the active window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Close a specific window\nApplication.Current?.CloseWindow(secondWindow);\n\n// Close the active window\nApplication.Current?.CloseWindow(GetParentWindow());\n```\n\n----------------------------------------\n\nTITLE: Display Specific Location using XAML\nDESCRIPTION: This XAML snippet shows how to display a specific location on a map using the MapSpan object within the Map control definition.  It sets the center point and zoom level of the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:sensors=\"clr-namespace:Microsoft.Maui.Devices.Sensors;assembly=Microsoft.Maui.Essentials\">\n    <maps:Map>\n        <x:Arguments>\n            <maps:MapSpan>\n                <x:Arguments>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>36.9628066</x:Double>\n                            <x:Double>-122.0194722</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    <x:Double>0.01</x:Double>\n                    <x:Double>0.01</x:Double>\n                </x:Arguments>\n            </maps:MapSpan>\n        </x:Arguments>\n    </maps:Map>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard XAML\nDESCRIPTION: This XAML snippet shows how to customize the default `Keyboard` to offer word completions and capitalize every entered character using the `Keyboard.Create` factory method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor>\n    <Editor.Keyboard>\n        <Keyboard x:FactoryMethod=\"Create\">\n            <x:Arguments>\n                <KeyboardFlags>Suggestions,CapitalizeCharacter</KeyboardFlags>\n            </x:Arguments>\n        </Keyboard>\n    </Editor.Keyboard>\n</Editor>\n```\n\n----------------------------------------\n\nTITLE: Set Grid Item Spacing C#\nDESCRIPTION: This code demonstrates how to set the `VerticalItemSpacing` and `HorizontalItemSpacing` properties of a `GridItemsLayout` within a `CollectionView` using C#. An instance of `GridItemsLayout` is created with a span of 2, vertical orientation, and specified vertical and horizontal item spacing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = new GridItemsLayout(2, ItemsLayoutOrientation.Vertical)\n    {\n        VerticalItemSpacing = 20,\n        HorizontalItemSpacing = 30\n    }\n};\n\n```\n\n----------------------------------------\n\nTITLE: CollectionView Horizontal List with LinearItemsLayout C#\nDESCRIPTION: This C# snippet shows how to programmatically create a CollectionView with a horizontal list layout using LinearItemsLayout.Horizontal. It instantiates a CollectionView and sets its ItemsLayout property to LinearItemsLayout.Horizontal, resulting in a horizontal list of items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = LinearItemsLayout.Horizontal\n};\n```\n\n----------------------------------------\n\nTITLE: XAML Definition of HybridWebView\nDESCRIPTION: This XAML code snippet defines a HybridWebView control within a Grid layout, alongside a Button. The HybridWebView is named 'hybridWebView' and subscribes to the RawMessageReceived event. The Button is configured to send a message to JavaScript when clicked.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"Auto,*\"\n          ColumnDefinitions=\"*\">\n        <Button Text=\"Send message to JavaScript\"\n                Clicked=\"OnSendMessageButtonClicked\" />\n        <HybridWebView x:Name=\"hybridWebView\"\n                       RawMessageReceived=\"OnHybridWebViewRawMessageReceived\"\n                       Grid.Row=\"1\" />\n    </Grid>\n```\n\n----------------------------------------\n\nTITLE: Register contextual detail page routes in C#\nDESCRIPTION: This C# snippet demonstrates how to register detail pages at different route hierarchies, enabling contextual page navigation. Navigating to the 'details' route from the 'monkeys' page will display the MonkeyDetailPage, and so on.  Uses Routing.RegisterRoute to enable this contextual navigation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nRouting.RegisterRoute(\"monkeys/details\", typeof(MonkeyDetailPage));\nRouting.RegisterRoute(\"bears/details\", typeof(BearDetailPage));\nRouting.RegisterRoute(\"cats/details\", typeof(CatDetailPage));\nRouting.RegisterRoute(\"dogs/details\", typeof(DogDetailPage));\nRouting.RegisterRoute(\"elephants/details\", typeof(ElephantDetailPage));\n```\n\n----------------------------------------\n\nTITLE: Converting .NET MAUI to Windows FrameworkElement\nDESCRIPTION: Demonstrates converting a .NET MAUI control to a Microsoft.UI.Xaml.FrameworkElement for use in Windows applications.  The resulting FrameworkElement can then be added to the WinUI page layout. Requires reference to the .NET MAUI class library or the `Microsoft.Maui.Controls.Embedding` namespace, depending on the .NET MAUI version.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nvar mauiView = new MyMauiContent();\nFrameworkElement nativeView = myMauiPage.ToPlatformEmbedded(context);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstackPanel.Children.Add(nativeView);\n```\n\n----------------------------------------\n\nTITLE: Reading Bundled Text File .NET MAUI C#\nDESCRIPTION: Demonstrates how to open a file bundled in the app package and read its text contents using FileSystem.OpenAppPackageFileAsync. This example shows how to create a method that reads the text from the file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/file-system-helpers.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string> ReadTextFile(string filePath)\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(filePath);\n    using var reader = new StreamReader(stream);\n\n    return await reader.ReadToEndAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Incoming Intent Data on Android (C#)\nDESCRIPTION: This code snippet shows how to configure a lifecycle event to handle incoming intent data in a .NET MAUI application on Android.  It retrieves the action and data from the intent in the `OnCreate` delegate and passes the data to the `HandleAppLink` method if the action is `ActionView`. The code ensures that any actions related to handling app links are performed on the main thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\nusing Microsoft.Extensions.Logging;\n\nnamespace MyNamespace;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            })\n            .ConfigureLifecycleEvents(lifecycle =>\n            {\n#if ANDROID\n                lifecycle.AddAndroid(android =>\n                {\n                    android.OnCreate((activity, bundle) =>\n                    {\n                        var action = activity.Intent?.Action;\n                        var data = activity.Intent?.Data?.ToString();\n\n                        if (action == Android.Content.Intent.ActionView && data is not null)\n                        {\n                            Task.Run(() => HandleAppLink(data));\n                        }\n                    });\n                });\n#endif\n            });\n\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n\n        return builder.Build();\n    }\n\n    static void HandleAppLink(string url)\n    {\n        if (Uri.TryCreate(url, UriKind.RelativeOrAbsolute, out var uri))\n            App.Current?.SendOnAppLinkRequestReceived(uri);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull to Refresh in CarouselView (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to implement pull-to-refresh functionality in a CarouselView using the RefreshView. It binds the IsRefreshing property to a ViewModel property and the Command property to a refresh command in the ViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<RefreshView IsRefreshing=\"{Binding IsRefreshing}\"\n             Command=\"{Binding RefreshCommand}\">\n    <CarouselView ItemsSource=\"{Binding Animals}\">\n        ...\n    </CarouselView>\n</RefreshView>\n```\n\n----------------------------------------\n\nTITLE: Android KeyStore Class Implementation in C#\nDESCRIPTION: This C# code provides an implementation of the AndroidKeyStore class that is used to manage cryptographic keys within a .NET MAUI application on Android. It handles key generation, wrapping, unwrapping, encryption, and decryption using either symmetric (AES) or asymmetric (RSA) key pairs, depending on the Android API level and configuration. The class utilizes the Android KeyStore system to securely store these keys.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/secure-storage.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content;\nusing Android.OS;\nusing Android.Runtime;\nusing Android.Security;\nusing Android.Security.Keystore;\nusing Java.Security;\nusing Javax.Crypto;\nusing Javax.Crypto.Spec;\nusing System.Text;\n\nnamespace MigrationHelpers;\n\nclass AndroidKeyStore\n{\n    const string androidKeyStore = \"AndroidKeyStore\"; // this is an Android const value\n    const string aesAlgorithm = \"AES\";\n    const string cipherTransformationAsymmetric = \"RSA/ECB/PKCS1Padding\";\n    const string cipherTransformationSymmetric = \"AES/GCM/NoPadding\";\n    const string prefsMasterKey = \"SecureStorageKey\";\n    const int initializationVectorLen = 12; // Android supports an IV of 12 for AES/GCM\n\n    internal AndroidKeyStore(Context context, string keystoreAlias, bool alwaysUseAsymmetricKeyStorage)\n    {\n        alwaysUseAsymmetricKey = alwaysUseAsymmetricKeyStorage;\n        appContext = context;\n        alias = keystoreAlias;\n\n        keyStore = KeyStore.GetInstance(androidKeyStore);\n        keyStore.Load(null);\n    }\n\n    readonly Context appContext;\n    readonly string alias;\n    readonly bool alwaysUseAsymmetricKey;\n    readonly string useSymmetricPreferenceKey = \"essentials_use_symmetric\";\n\n    KeyStore keyStore;\n    bool useSymmetric = false;\n\n    ISecretKey GetKey()\n    {\n        // check to see if we need to get our key from past-versions or newer versions.\n        // we want to use symmetric if we are >= 23 or we didn't set it previously.\n        var hasApiLevel = Build.VERSION.SdkInt >= BuildVersionCodes.M;\n\n        useSymmetric = Preferences.Get(useSymmetricPreferenceKey, hasApiLevel, alias);\n\n        // If >= API 23 we can use the KeyStore's symmetric key\n        if (useSymmetric && !alwaysUseAsymmetricKey)\n            return GetSymmetricKey();\n\n        // NOTE: KeyStore in < API 23 can only store asymmetric keys\n        // specifically, only RSA/ECB/PKCS1Padding\n        // So we will wrap our symmetric AES key we just generated\n        // with this and save the encrypted/wrapped key out to\n        // preferences for future use.\n        // ECB should be fine in this case as the AES key should be\n        // contained in one block.\n\n        // Get the asymmetric key pair\n        var keyPair = GetAsymmetricKeyPair();\n\n        var existingKeyStr = Preferences.Get(prefsMasterKey, null, alias);\n\n        if (!string.IsNullOrEmpty(existingKeyStr))\n        {\n            try\n            {\n                var wrappedKey = Convert.FromBase64String(existingKeyStr);\n\n                var unwrappedKey = UnwrapKey(wrappedKey, keyPair.Private);\n                var kp = unwrappedKey.JavaCast<ISecretKey>();\n\n                return kp;\n            }\n            catch (InvalidKeyException ikEx)\n            {\n                System.Diagnostics.Debug.WriteLine($\"Unable to unwrap key: Invalid Key. This may be caused by system backup or upgrades. All secure storage items will now be removed. {ikEx.Message}\");\n            }\n            catch (IllegalBlockSizeException ibsEx)\n            {\n                System.Diagnostics.Debug.WriteLine($\"Unable to unwrap key: Illegal Block Size. This may be caused by system backup or upgrades. All secure storage items will now be removed. {ibsEx.Message}\");\n            }\n            catch (BadPaddingException paddingEx)\n            {\n                System.Diagnostics.Debug.WriteLine($\"Unable to unwrap key: Bad Padding. This may be caused by system backup or upgrades. All secure storage items will now be removed. {paddingEx.Message}\");\n            }\n            LegacySecureStorage.RemoveAll();\n        }\n\n        var keyGenerator = KeyGenerator.GetInstance(aesAlgorithm);\n        var defSymmetricKey = keyGenerator.GenerateKey();\n\n        var newWrappedKey = WrapKey(defSymmetricKey, keyPair.Public);\n\n        Preferences.Set(prefsMasterKey, Convert.ToBase64String(newWrappedKey), alias);\n\n        return defSymmetricKey;\n    }\n\n    // API 23+ Only\n#pragma warning disable CA1416\n    ISecretKey GetSymmetricKey()\n    {\n        Preferences.Set(useSymmetricPreferenceKey, true, alias);\n\n        var existingKey = keyStore.GetKey(alias, null);\n\n        if (existingKey != null)\n        {\n            var existingSecretKey = existingKey.JavaCast<ISecretKey>();\n            return existingSecretKey;\n        }\n\n        var keyGenerator = KeyGenerator.GetInstance(KeyProperties.KeyAlgorithmAes, androidKeyStore);\n        var builder = new KeyGenParameterSpec.Builder(alias, KeyStorePurpose.Encrypt | KeyStorePurpose.Decrypt)\n            .SetBlockModes(KeyProperties.BlockModeGcm)\n            .SetEncryptionPaddings(KeyProperties.EncryptionPaddingNone)\n            .SetRandomizedEncryptionRequired(false);\n\n        keyGenerator.Init(builder.Build());\n\n        return keyGenerator.GenerateKey();\n    }\n#pragma warning restore CA1416\n\n    KeyPair GetAsymmetricKeyPair()\n    {\n        // set that we generated keys on pre-m device.\n        Preferences.Set(useSymmetricPreferenceKey, false, alias);\n\n        var asymmetricAlias = $\"{alias}.asymmetric\";\n\n        var privateKey = keyStore.GetKey(asymmetricAlias, null)?.JavaCast<IPrivateKey>();\n        var publicKey = keyStore.GetCertificate(asymmetricAlias)?.PublicKey;\n\n        // Return the existing key if found\n        if (privateKey != null && publicKey != null)\n            return new KeyPair(publicKey, privateKey);\n\n        var originalLocale = Java.Util.Locale.Default;\n        try\n        {\n            // Force to english for known bug in date parsing:\n            // https://issuetracker.google.com/issues/37095309\n            SetLocale(Java.Util.Locale.English);\n\n            // Otherwise we create a new key\n#pragma warning disable CA1416\n            var generator = KeyPairGenerator.GetInstance(KeyProperties.KeyAlgorithmRsa, androidKeyStore);\n#pragma warning restore CA1416\n\n            var end = DateTime.UtcNow.AddYears(20);\n            var startDate = new Java.Util.Date();\n#pragma warning disable CS0618 // Type or member is obsolete\n            var endDate = new Java.Util.Date(end.Year, end.Month, end.Day);\n#pragma warning restore CS0618 // Type or member is obsolete\n\n#pragma warning disable CS0618\n            var builder = new KeyPairGeneratorSpec.Builder(Platform.AppContext)\n                .SetAlias(asymmetricAlias)\n                .SetSerialNumber(Java.Math.BigInteger.One)\n                .SetSubject(new Javax.Security.Auth.X500.X500Principal($\"CN={asymmetricAlias} CA Certificate\"))\n                .SetStartDate(startDate)\n                .SetEndDate(endDate);\n\n            generator.Initialize(builder.Build());\n#pragma warning restore CS0618\n\n            return generator.GenerateKeyPair();\n        }\n        finally\n        {\n            SetLocale(originalLocale);\n        }\n    }\n\n    byte[] WrapKey(IKey keyToWrap, IKey withKey)\n    {\n        var cipher = Cipher.GetInstance(cipherTransformationAsymmetric);\n        cipher.Init(CipherMode.WrapMode, withKey);\n        return cipher.Wrap(keyToWrap);\n    }\n\n#pragma warning disable CA1416\n    IKey UnwrapKey(byte[] wrappedData, IKey withKey)\n    {\n        var cipher = Cipher.GetInstance(cipherTransformationAsymmetric);\n        cipher.Init(CipherMode.UnwrapMode, withKey);\n        var unwrapped = cipher.Unwrap(wrappedData, KeyProperties.KeyAlgorithmAes, KeyType.SecretKey);\n        return unwrapped;\n    }\n#pragma warning restore CA1416\n\n    internal string Decrypt(byte[] data)\n    {\n        if (data.Length < initializationVectorLen)\n            return null;\n\n        var key = GetKey();\n\n        // IV will be the first 16 bytes of the encrypted data\n        var iv = new byte[initializationVectorLen];\n        Buffer.BlockCopy(data, 0, iv, 0, initializationVectorLen);\n\n        Cipher cipher;\n\n        // Attempt to use GCMParameterSpec by default\n        try\n        {\n            cipher = Cipher.GetInstance(cipherTransformationSymmetric);\n            cipher.Init(CipherMode.DecryptMode, key, new GCMParameterSpec(128, iv));\n        }\n        catch (InvalidAlgorithmParameterException)\n        {\n            // If we encounter this error, it's likely an old bouncycastle provider version\n            // is being used which does not recognize GCMParameterSpec, but should work\n            // with IvParameterSpec, however we only do this as a last effort since other\n            // implementations will error if you use IvParameterSpec when GCMParameterSpec\n            // is recognized and expected.\n            cipher = Cipher.GetInstance(cipherTransformationSymmetric);\n            cipher.Init(CipherMode.DecryptMode, key, new IvParameterSpec(iv));\n        }\n\n        // Decrypt starting after the first 16 bytes from the IV\n        var decryptedData = cipher.DoFinal(data, initializationVectorLen, data.Length - initializationVectorLen);\n\n        return Encoding.UTF8.GetString(decryptedData);\n    }\n\n    internal void SetLocale(Java.Util.Locale locale)\n    {\n        Java.Util.Locale.Default = locale;\n        var resources = appContext.Resources;\n        var config = resources.Configuration;\n\n        if (Build.VERSION.SdkInt >= BuildVersionCodes.N)\n            config.SetLocale(locale);\n        else\n#pragma warning disable CS0618 // Type or member is obsolete\n            config.Locale = locale;\n#pragma warning restore CS0618 // Type or member is obsolete\n\n#pragma warning disable CS0618 // Type or member is obsolete\n        resources.UpdateConfiguration(config, resources.DisplayMetrics);\n#pragma warning restore CS0618 // Type or member is obsolete\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Specific Entry Instance - C#\nDESCRIPTION: This code snippet shows how to customize a specific instance of the Entry control (MyEntry) using the handler's property mapper.  It selects all text in the Entry field when it gains focus, but only for instances of the MyEntry subclass on Android, iOS, and Windows. This customization is performed within the global handler mapper, but it's gated by a check for the MyEntry type.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.EntryHandler.Mapper.AppendToMapping(\"MyCustomization\", (handler, view) =>\n{\n    if (view is MyEntry)\n    {\n#if ANDROID\n        handler.PlatformView.SetSelectAllOnFocus(true);\n#elif IOS || MACCATALYST\n        handler.PlatformView.EditingDidBegin += (s, e) =>\n        {\n            handler.PlatformView.PerformSelector(new ObjCRuntime.Selector(\"selectAll\"), null, 0.0f);\n        };\n#elif WINDOWS\n        handler.PlatformView.GotFocus += (s, e) =>\n        {\n            handler.PlatformView.SelectAll();\n        };\n#endif\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: CardView UI Definition XAML\nDESCRIPTION: This XAML defines the initial UI for the CardViewUI custom control using a ContentView. It includes a Border element with bindings to properties like CardColor and BorderColor. This UI can then be replaced by a ControlTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentView xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"\n             x:Class=\"ControlTemplateDemos.Controls.CardViewUI\"\n             x:Name=\"this\"\n             x:DataType=\"controls:CardViewUI\">\n    <Border BindingContext=\"{x:Reference this}\"\n            BackgroundColor=\"{Binding CardColor}\"\n            Stroke=\"{Binding BorderColor}\"\n           ...>\n        <!-- UI objects that define the CardView visual structure -->           \n    </Border>\n</ContentView>\n```\n\n----------------------------------------\n\nTITLE: EllipseGeometry Definition XAML\nDESCRIPTION: This XAML code demonstrates how to create and render an EllipseGeometry in a Path object. The EllipseGeometry is defined with a center point and x and y radii, and the Path is styled with a blue fill and a red stroke.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Fill=\"Blue\"\n      Stroke=\"Red\">\n  <Path.Data>\n    <EllipseGeometry Center=\"50,50\"\n                     RadiusX=\"50\"\n                     RadiusY=\"50\" />\n  </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Setting Flashlight and Camera Permissions - Android\nDESCRIPTION: This code snippet shows how to set the Flashlight and Camera permissions in the Android project by adding assembly attributes to the MainApplication.cs file. These permissions are necessary to use the flashlight functionality on Android devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/flashlight.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.Flashlight)]\n[assembly: UsesPermission(Android.Manifest.Permission.Camera)]\n```\n\n----------------------------------------\n\nTITLE: EvenOdd Fill Rule XAML Example\nDESCRIPTION: This XAML snippet demonstrates the use of the EvenOdd fill rule (default) on a composite shape made of concentric ellipses. The FillRule property doesn't need to be set explicitly as EvenOdd is the default. The rings are filled or not filled depending on whether a ray from a point crosses an odd or even number of segments.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/fillrules.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Fill=\"#CCCCFF\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Start\">\n    <Path.Data>\n        <!-- FillRule doesn't need to be set, because EvenOdd is the default. -->\n        <GeometryGroup>\n            <EllipseGeometry RadiusX=\"50\"\n                             RadiusY=\"50\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"70\"\n                             RadiusY=\"70\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"120\"\n                             RadiusY=\"120\"\n                             Center=\"75,75\" />\n        </GeometryGroup>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Creating a Frame in C#\nDESCRIPTION: This C# snippet demonstrates creating a Frame object, setting its BorderColor and CornerRadius, and adding a Label as its content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/frame.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nFrame frame = new Frame\n{\n    BorderColor = Colors.Gray,\n    CornerRadius = 10,\n    Content = new Label { Text = \"Frame wrapped around a Label\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting AutomationProperties.ExcludedWithChildren in XAML - MAUI\nDESCRIPTION: This XAML snippet shows how to set the `AutomationProperties.ExcludedWithChildren` attached property. When set to true, the specified element and all of its children are excluded from the accessibility tree.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_13\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout AutomationProperties.ExcludedWithChildren=\"true\">\n...\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Color CSS in .NET MAUI\nDESCRIPTION: Sets the text color for various .NET MAUI controls like ActivityIndicator, BoxView, Button, CheckBox, DatePicker, Editor, Entry, Label, Picker, ProgressBar, SearchBar, Switch, and TimePicker. The value should be a color or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\ncolor: rgba(255, 0, 0, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Add BlazorWebView to XAML\nDESCRIPTION: Defines a BlazorWebView control in a .NET MAUI ContentPage. The HostPage property points to the root HTML file of the Blazor app (wwwroot/index.html), and a RootComponent is used to specify the root Razor component (Main) to be rendered within the specified CSS selector (#app). The local namespace must match the application's namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MyBlazorApp\"\n             x:Class=\"MyBlazorApp.MainPage\">\n\n        <BlazorWebView HostPage=\"wwwroot/index.html\">\n            <BlazorWebView.RootComponents>\n                <RootComponent Selector=\"#app\" ComponentType=\"{x:Type local:Main}\" />\n            </BlazorWebView.RootComponents>\n        </BlazorWebView>\n\n    </ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Registering the Layout Manager Factory in C#\nDESCRIPTION: This C# code demonstrates how to register the custom layout manager factory with the app's service provider in the MauiProgram class. This allows the custom layout manager to be used when the app renders a Grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        // Setup a custom layout manager so the default manager for the Grid can be replaced.\n        builder.Services.Add(new ServiceDescriptor(typeof(ILayoutManagerFactory), new CustomLayoutManagerFactory()));\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TitleBar Visual States in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to define visual states for the TitleBar in a .NET MAUI application, specifically for active and inactive title bar states. It shows how to change the BackgroundColor and ForegroundColor properties based on the visual state. Dependencies include the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/titlebar.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<TitleBar ...>\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"TitleActiveStates\">\n                <VisualState x:Name=\"TitleBarTitleActive\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Transparent\" />\n                        <Setter Property=\"ForegroundColor\" Value=\"Black\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"TitleBarTitleInactive\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"White\" />\n                        <Setter Property=\"ForegroundColor\" Value=\"Gray\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</TitleBar>\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Brush Example XAML\nDESCRIPTION: This example demonstrates how to create a RadialGradientBrush and apply it as the background of a Border. It sets the colors to Red and DarkBlue with specified offsets. The Center and Radius properties use default values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/radialgradient.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\">\n    <Border.Background>\n        <!-- Center defaults to (0.5,0.5)\n             Radius defaults to (0.5) -->\n        <RadialGradientBrush>\n            <GradientStop Color=\"Red\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"DarkBlue\"\n                          Offset=\"1.0\" />\n        </RadialGradientBrush>\n    </Border.Background>\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Consuming HorizontalWrapLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the HorizontalWrapLayout control within a ContentPage to display a series of images. The layout is wrapped in a ScrollView to enable scrolling when the content exceeds the screen size.  The xmlns:layouts namespace is defined to point to the location of the HorizontalWrapLayout class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:layouts=\"clr-namespace:CustomLayoutDemos.Layouts\"\n             x:Class=\"CustomLayoutDemos.Views.HorizontalWrapLayoutPage\"\n             Title=\"Horizontal wrap layout\">\n    <ScrollView Margin=\"20\">\n        <layouts:HorizontalWrapLayout Spacing=\"20\">\n            <Image Source=\"img_0074.jpg\"\n                   WidthRequest=\"150\" />\n            <Image Source=\"img_0078.jpg\"\n                   WidthRequest=\"150\" />\n            <Image Source=\"img_0308.jpg\"\n                   WidthRequest=\"150\" />\n            <Image Source=\"img_0437.jpg\"\n                   WidthRequest=\"150\" />\n            <Image Source=\"img_0475.jpg\"\n                   WidthRequest=\"150\" />\n            <Image Source=\"img_0613.jpg\"\n                   WidthRequest=\"150\" />\n            <!-- More images go here -->\n        </layouts:HorizontalWrapLayout>\n    </ScrollView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Displaying inline HTML in WebView using C#\nDESCRIPTION: This code snippet demonstrates how to display inline HTML in a .NET MAUI WebView using C#. An `HtmlWebViewSource` object is created and assigned to the `Source` property of the WebView. The `Html` property of the `HtmlWebViewSource` is set to the HTML content to be displayed. Note the use of the verbatim string literal (@) to simplify the HTML string.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nWebView webView = new WebView\n{\n    Source = new HtmlWebViewSource\n    {\n        Html = @\"<HTML><BODY><H1>.NET MAUI</H1><P>Welcome to WebView.</P></BODY></HTML>\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Referencing System Namespace\nDESCRIPTION: This XAML code demonstrates how to use the `x:Static` markup extension to access static fields from the .NET `System` namespace.  It sets the `FontSize` property to the value of `Math.PI` and the `Scale` property to `Math.E`.  A namespace alias `sys` is used to refer to `System`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"&#x03C0; &#x00D7; E sized text\"\n       FontSize=\"{x:Static sys:Math.PI}\"\n       Scale=\"{x:Static sys:Math.E}\"\n       HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Native WebView on iOS/Mac Catalyst - C#\nDESCRIPTION: This code snippet demonstrates how to configure the native WebView (MauiWKWebView) on iOS and Mac Catalyst using a custom handler factory delegate. It creates or retrieves a WKWebViewConfiguration object, modifies its properties (e.g., ApplicationNameForUserAgent), and uses it to instantiate the MauiWKWebView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n#if IOS || MACCATALYST\nusing WebKit;\nusing CoreGraphics;\nusing Microsoft.Maui.Platform;\nusing Microsoft.Maui.Handlers;\n#endif\n...\n\n#if IOS || MACCATALYST\n    Microsoft.Maui.Handlers.WebViewHandler.PlatformViewFactory = (handler) =>\n    {\n        WKWebViewConfiguration config = MauiWKWebView.CreateConfiguration();\n        config.ApplicationNameForUserAgent = \"MyProduct/1.0.0\";\n        return new MauiWKWebView(CGRect.Empty, (WebViewHandler)handler, config);\n    };\n#endif\n```\n\n----------------------------------------\n\nTITLE: Map Video Source C#\nDESCRIPTION: This snippet presents a `MapSource` method within a handler context. It's intended to be called when the `Source` property of a `Video` control changes. It delegates the actual update of the video source to the `UpdateSource` method on the platform-specific `PlatformView` (which is assumed to be a video player control).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void MapSource(VideoHandler handler, Video video)\n{\n    handler?.PlatformView.UpdateSource();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyout Display Options in .NET MAUI Shell XAML\nDESCRIPTION: This code snippet demonstrates how to configure flyout display options to show flyout items for each Tab object within a FlyoutItem. The FlyoutDisplayOptions property is set to AsMultipleItems. It creates a nested structure of FlyoutItem, Tab, and ShellContent objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:controls=\"clr-namespace:Xaminals.Controls\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       FlyoutHeaderBehavior=\"CollapseOnScroll\"\n       x:Class=\"Xaminals.AppShell\">\n\n    <FlyoutItem FlyoutDisplayOptions=\"AsMultipleItems\">\n        <Tab Title=\"Domestic\"\n             Icon=\"paw.png\">\n            <ShellContent Title=\"Cats\"\n                          Icon=\"cat.png\"\n                          ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n            <ShellContent Title=\"Dogs\"\n                          Icon=\"dog.png\"\n                          ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n        </Tab>\n        <ShellContent Title=\"Monkeys\"\n                      Icon=\"monkey.png\"\n                      ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n        <ShellContent Title=\"Elephants\"\n                      Icon=\"elephant.png\"\n                      ContentTemplate=\"{DataTemplate views:ElephantsPage}\" />  \n        <ShellContent Title=\"Bears\"\n                      Icon=\"bear.png\"\n                      ContentTemplate=\"{DataTemplate views:BearsPage}\" />\n    </FlyoutItem>\n\n    <ShellContent Title=\"About\"\n                  Icon=\"info.png\"\n                  ContentTemplate=\"{DataTemplate views:AboutPage}\" />    \n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle on a Map - C#\nDESCRIPTION: This C# snippet demonstrates how to create a Circle object and add it to a Map control in .NET MAUI. It sets the center location, radius, stroke color, stroke width, and fill color of the circle.  Requires the Microsoft.Maui.Controls.Maps and Microsoft.Maui.Maps namespaces. The Circle is then added to the Map's MapElements collection to be displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n\nMap map = new Map();\n\n// Instantiate a Circle\nCircle circle = new Circle\n{\n    Center = new Location(37.79752, -122.40183),\n    Radius = new Distance(250),\n    StrokeColor = Color.FromArgb(\"#88FF0000\"),\n    StrokeWidth = 8,\n    FillColor = Color.FromArgb(\"#88FFC0CB\")\n};\n\n// Add the Circle to the map's MapElements collection\nmap.MapElements.Add(circle);\n```\n\n----------------------------------------\n\nTITLE: Defining a Path using Path Markup Syntax in XAML\nDESCRIPTION: This code snippet demonstrates how to define a path using path markup syntax within XAML. It sets the `Data` property of a `Path` object to a string that describes the path's geometry using move and line commands, and closes the path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-markup-syntax.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Black\"\n      Data=\"M13.908992,16.207977 L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983Z\" />\n```\n\n----------------------------------------\n\nTITLE: Set SemanticProperties.Description in XAML\nDESCRIPTION: This code snippet demonstrates how to set the SemanticProperties.Description attached property in XAML to provide a screen reader with a description for an image. The screen reader will announce \"Cute dot net bot waving hi to you!\" when the image gains accessibility focus.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n       SemanticProperties.Description=\"Cute dot net bot waving hi to you!\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieve Data from Property Bag C#\nDESCRIPTION: This C# snippet shows how to retrieve data from the property bag of a data package in the `Drop` event handler. It accesses the `Properties` collection of the `DataPackageView` class, which is a read-only dictionary. The snippet retrieves a `Square` object using the key \"Square\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDrop(object sender, DropEventArgs e)\n{\n    Square square = (Square)e.Data.Properties[\"Square\"];\n\n    // Perform logic to take action based on retrieved value.\n}\n```\n\n----------------------------------------\n\nTITLE: Set Search Box Visibility in XAML\nDESCRIPTION: This code snippet demonstrates how to set the SearchHandler.SearchBoxVisibility property to control the visibility of the search box. In this example, the search box is hidden.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:Xaminals.Controls\">\n    <Shell.SearchHandler>\n        <controls:AnimalSearchHandler SearchBoxVisibility=\"Hidden\"\n                                      ... />\n    </Shell.SearchHandler>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Register/Deregister Button Handlers C#\nDESCRIPTION: Implements the `OnRegisterButtonClicked` and `OnDeregisterButtonClicked` event handlers, which call the corresponding methods on the `INotificationRegistrationService` object. These handlers initiate the registration and deregistration processes for push notifications, and display alert messages indicating the outcome.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnRegisterButtonClicked(object sender, EventArgs e)\n{\n    _notificationRegistrationService.RegisterDeviceAsync()\n        .ContinueWith((task) =>\n        {\n            ShowAlert(task.IsFaulted ? task.Exception.Message : $\"Device registered\");\n        });\n}\n\nvoid OnDeregisterButtonClicked(object sender, EventArgs e)\n{\n    _notificationRegistrationService.DeregisterDeviceAsync()\n        .ContinueWith((task) =>\n        {\n            ShowAlert(task.IsFaulted ? task.Exception.Message : $\"Device deregistered\");\n        });\n}\n\nvoid ShowAlert(string message)\n{\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        DisplayAlert(\"Push notifications demo\", message, \"OK\")\n            .ContinueWith((task) =>\n            {\n                if (task.IsFaulted)\n                    throw task.Exception;\n            });\n    });\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnRegisterButtonClicked(object sender, EventArgs e)\n{\n    _notificationRegistrationService.RegisterDeviceAsync()\n        .ContinueWith((task) =>\n        {\n            ShowAlert(task.IsFaulted ? task.Exception.Message : $\"Device registered\");\n        });\n}\n\nvoid OnDeregisterButtonClicked(object sender, EventArgs e)\n{\n    _notificationRegistrationService.DeregisterDeviceAsync()\n        .ContinueWith((task) =>\n        {\n            ShowAlert(task.IsFaulted ? task.Exception.Message : $\"Device deregistered\");\n        });\n}\n\nvoid ShowAlert(string message)\n{\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        DisplayAlertAsync(\"Push notifications demo\", message, \"OK\")\n            .ContinueWith((task) =>\n            {\n                if (task.IsFaulted)\n                    throw task.Exception;\n            });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Query Parameters via Shell Navigation in C#\nDESCRIPTION: This C# code snippet demonstrates how to pass multiple string-based query parameters during Shell navigation in .NET MAUI. It retrieves the selected item's name and location from a CollectionView and passes them as query parameters to the 'elephantdetails' route using Shell.Current.GoToAsync.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    string elephantName = (e.CurrentSelection.FirstOrDefault() as Animal).Name;\n    string elephantLocation = (e.CurrentSelection.FirstOrDefault() as Animal).Location;\n    await Shell.Current.GoToAsync($\"elephantdetails?name={elephantName}&location={elephantLocation}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Resources in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define numeric resources (doubles) using `x:Double` tags in a resource dictionary. These resources are used for properties like `BorderWidth`, `Rotation`, and `FontSize`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage.Resources>\n        <LayoutOptions x:Key=\"horzOptions\"\n                       Alignment=\"Center\" />\n        <LayoutOptions x:Key=\"vertOptions\"\n                       Alignment=\"Center\" />\n        <x:Double x:Key=\"borderWidth\">3</x:Double>\n        <x:Double x:Key=\"rotationAngle\">-15</x:Double>\n        <x:Double x:Key=\"fontSize\">24</x:Double>        \n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Icon in Image View (XAML)\nDESCRIPTION: This XAML snippet shows how to display a font icon from the Ionicons font family in an Image view using the FontImageSource.  It specifies the glyph, font family based on the platform (iOS/Android), and the size of the icon. The glyph value is the unicode character representation, escaped for XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<Image BackgroundColor=\"#D1D1D1\">\n    <Image.Source>\n        <FontImageSource Glyph=\"&#xf30c;\"\n                         FontFamily=\"{OnPlatform iOS=Ionicons, Android=ionicons.ttf#}\"\n                         Size=\"44\" />\n    </Image.Source>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Customizing Back Button Appearance and Behavior in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to customize the appearance and behavior of the back button in .NET MAUI.  It uses the Shell.BackButtonBehavior attached property to define the command to be executed when the back button is pressed and the icon to be used for the back button. The BackCommand should be an ICommand defined in the corresponding view model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_20\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <Shell.BackButtonBehavior>\n        <BackButtonBehavior Command=\"{Binding BackCommand}\"\n                            IconOverride=\"back.png\" />\n    </Shell.BackButtonBehavior>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android for Multi-Window Support\nDESCRIPTION: This code snippet demonstrates how to configure an Android application for multi-window support by changing the `LaunchMode` of the `MainActivity` from `SingleTop` to `Multiple`. This configuration is necessary to enable multiple windows on Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Android.Content.PM;\nusing Android.OS;\n\nnamespace MyMauiApp;\n\n[Activity(Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, LaunchMode = LaunchMode.Multiple, ...)]\npublic class MainActivity : MauiAppCompatActivity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Property Changes\nDESCRIPTION: This snippet shows how to register a property-changed callback method (`OnIsExpandedChanged`) when creating a bindable property. The callback is invoked whenever the value of the `IsExpandedProperty` changes. The callback receives the `BindableObject` instance and the old and new values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly BindableProperty IsExpandedProperty =\n    BindableProperty.Create(nameof(IsExpanded), typeof(bool), typeof(Expander), false, propertyChanged: OnIsExpandedChanged);\n...\n\nstatic void OnIsExpandedChanged (BindableObject bindable, object oldValue, object newValue)\n{\n  // Property changed implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IVideoController Interface in C#\nDESCRIPTION: This code defines the `IVideoController` interface, which allows external classes (especially handlers) to set the `Duration` property of the `Video` control without exposing a public setter, preventing unintended data binding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IVideoController\n{\n    VideoStatus Status { get; set; }\n    TimeSpan Duration { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Animations in .NET MAUI with C#\nDESCRIPTION: This code snippet demonstrates how to cancel all running animations on a specific VisualElement (in this case, an Image) using the CancelAnimations extension method. It immediately stops any rotation, scaling, translation, or fading animations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/basic.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nimage.CancelAnimations();\n```\n\n----------------------------------------\n\nTITLE: Using a Custom SwipeItemView in XAML\nDESCRIPTION: This XAML snippet shows how to use a SwipeItemView to define a custom swipe item. The SwipeItemView contains an Entry and a Label, and its Command is bound to a command. The CommandParameter is bound to the Text property of the Entry, allowing user input to be passed to the command.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems>\n            <SwipeItemView Command=\"{Binding CheckAnswerCommand}\"\n                           CommandParameter=\"{Binding x:DataType='Entry', Source={x:Reference resultEntry}, Path=Text}\">\n                <StackLayout Margin=\"10\"\n                             WidthRequest=\"300\">\n                    <Entry x:Name=\"resultEntry\"\n                           Placeholder=\"Enter answer\"\n                           HorizontalOptions=\"CenterAndExpand\" />\n                    <Label Text=\"Check\"\n                           FontAttributes=\"Bold\"\n                           HorizontalOptions=\"Center\" />\n                </StackLayout>\n            </SwipeItemView>\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Adding Associated Domains Entitlement to Project File (XML)\nDESCRIPTION: This XML snippet shows how to add the associated domains entitlement directly to your project file (*.csproj*).  This approach uses the `<CustomEntitlements>` element to conditionally include the entitlement based on the build configuration (Debug or Release). Replace `applinks:recipe-app.com` with the correct domain. The `?mode=developer` query string is used during debugging to bypass Apple's CDN cache.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' Or $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'\">\n\n    <!-- For debugging, use '?mode=developer' for debug to bypass apple's CDN cache -->\n    <CustomEntitlements\n        Condition=\"$(Configuration) == 'Debug'\"\n        Include=\"com.apple.developer.associated-domains\"\n        Type=\"StringArray\"\n        Value=\"applinks:recipe-app.com?mode=developer\" />\n\n    <!-- Non-debugging, use normal applinks:url value -->\n    <CustomEntitlements\n        Condition=\"$(Configuration) != 'Debug'\"\n        Include=\"com.apple.developer.associated-domains\"\n        Type=\"StringArray\"\n        Value=\"applinks:recipe-app.com\" />\n\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menus with SwipeView in C#\nDESCRIPTION: This C# snippet demonstrates creating a `CollectionView` with context menus implemented using `SwipeView`. It creates `SwipeItem` objects for \"Favorite\" and \"Delete\" actions and binds their `Command` and `CommandParameter` properties. The `SwipeView`'s `Content` is set to a `Grid` that defines the item's appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView();\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n\ncollectionView.ItemTemplate = new DataTemplate(() =>\n{\n    // Define item appearance\n    Grid grid = new Grid { Padding = 10, BackgroundColor = Colors.White };\n    // ...\n\n    SwipeView swipeView = new SwipeView();\n    SwipeItem favoriteSwipeItem = new SwipeItem\n    {\n        Text = \"Favorite\",\n        IconImageSource = \"favorite.png\",\n        BackgroundColor = Colors.LightGreen\n    };\n    favoriteSwipeItem.SetBinding(MenuItem.CommandProperty, Binding.Create(static (MonkeysViewModel vm) => vm.FavoriteCommand, source: collectionView.BindingContext);\n    favoriteSwipeItem.SetBinding(MenuItem.CommandParameterProperty, static (CollectionView cv) => cv.SelectedItem, source: collectionView);\n\n    SwipeItem deleteSwipeItem = new SwipeItem\n    {\n        Text = \"Delete\",\n        IconImageSource = \"delete.png\",\n        BackgroundColor = Colors.LightPink\n    };\n    deleteSwipeItem.SetBinding(MenuItem.CommandProperty, Binding.Create(static (MonkeysViewModel vm) => vm.DeleteCommand, source: collectionView.BindingContext);\n    deleteSwipeItem.SetBinding(MenuItem.CommandParameterProperty, static (CollectionView cv) => cv.SelectedItem, source: collectionView);\n\n    swipeView.LeftItems = new SwipeItems { favoriteSwipeItem, deleteSwipeItem };\n    swipeView.Content = grid;    \n    return swipeView;\n});\n```\n\n----------------------------------------\n\nTITLE: C# Code-Behind: Partial Class Definition\nDESCRIPTION: Illustrates the C# code-behind file associated with a XAML file, defining a partial class that inherits from ContentPage.  The InitializeComponent() method, generated during build, initializes the UI defined in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyMauiApp;\n\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Handler Class in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates the creation of a partial handler class named `VideoHandler` in .NET MAUI. Conditional compilation is used to define the `PlatformView` type based on the target platform (iOS, Mac Catalyst, Android, or Windows), which represents the native view that will implement the cross-platform control. The `PlatformView` defaults to `System.Object` when no specific platform is targeted, ensuring compatibility across all platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#if IOS || MACCATALYST\nusing PlatformView = VideoDemos.Platforms.MaciOS.MauiVideoPlayer;\n#elif ANDROID\nusing PlatformView = VideoDemos.Platforms.Android.MauiVideoPlayer;\n#elif WINDOWS\nusing PlatformView = VideoDemos.Platforms.Windows.MauiVideoPlayer;\n#elif (NETSTANDARD || !PLATFORM) || (NET6_0_OR_GREATER && !IOS && !ANDROID)\nusing PlatformView = System.Object;\n#endif\nusing VideoDemos.Controls;\nusing Microsoft.Maui.Handlers;\n\nnamespace VideoDemos.Handlers\n{\n    public partial class VideoHandler\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Include Image in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include an SVG file as an image resource in a .NET MAUI project. The MauiImage build action specifies that the image should be processed and optimized for different platforms and devices during the build process. The file is located in the Resources\\Images folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\logo.svg\" />\n```\n\n----------------------------------------\n\nTITLE: DataTemplateSelector Implementation in C#\nDESCRIPTION: This code snippet shows the implementation of a custom DataTemplateSelector class, `TechItemTemplateSelector`, which selects a DataTemplate based on the item's value. If the item is \".NET MAUI\", it returns the `MAUITemplate`; otherwise, it returns the `DefaultTemplate`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class TechItemTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate DefaultTemplate { get; set; }\n    public DataTemplate MAUITemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return (string)item == \".NET MAUI\" ? MAUITemplate : DefaultTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MenuItem Clicked Event in XAML\nDESCRIPTION: This XAML snippet demonstrates how to attach an event handler to the Clicked event of a MenuItem. When the MenuItem is clicked, the OnItemClicked method will be executed. The ellipses (...) indicate that there are other properties on the MenuItem that are not shown here.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menuitem.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<MenuItem ...\n          Clicked=\"OnItemClicked\" />\n```\n\n----------------------------------------\n\nTITLE: Simulating URI Opening with ADB\nDESCRIPTION: This command uses the Android Debug Bridge (adb) to simulate opening a URI with the activity manager tool (am). It dispatches an intent that Android should direct to the mobile app, launching the activity registered for the URI. Replace YOUR_URI_HERE with the actual URI you want to test.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nadb shell am start -W -a android.intent.action.VIEW -c android.intent.category.BROWSABLE -d YOUR_URI_HERE\n```\n\n----------------------------------------\n\nTITLE: Setting RefreshColor on RefreshView - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set the `RefreshColor` property of a RefreshView to customize the color of the progress circle that appears during the refresh animation. This allows developers to match the refresh indicator to their app's theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/refreshview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<RefreshView RefreshColor=\"Teal\"\n             ... />\n```\n\n----------------------------------------\n\nTITLE: Pinch Gesture Recognizer XAML\nDESCRIPTION: This XAML snippet demonstrates how to attach a PinchGestureRecognizer to an Image control. The PinchUpdated event is bound to the OnPinchUpdated method in the code-behind file. This allows the image to respond to pinch gestures.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pinch.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"waterfront.jpg\">\n    <Image.GestureRecognizers>\n        <PinchGestureRecognizer PinchUpdated=\"OnPinchUpdated\" />\n    </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: XAML Unloaded Event Handler Registration\nDESCRIPTION: This XAML snippet shows how to register an event handler for the `Unloaded` event of a `ContentPage`. This allows for performing cleanup actions when the page is navigated away from, specifically handler disconnection in older .NET MAUI versions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:MyMauiControl.Controls\"\n             Unloaded=\"ContentPage_Unloaded\">\n    <Grid>\n        <controls:CustomEntry x:Name=\"customEntry\"\n                              ... />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Monkey Class Definition C#\nDESCRIPTION: This C# snippet defines the properties of the Monkey class that are used to populate the CarouselView. The class includes properties for Name, Location, Details, and ImageUrl.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Monkey\n{\n    public string Name { get; set; }\n    public string Location { get; set; }\n    public string Details { get; set; }\n    public string ImageUrl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Page Shell App with Implicit Conversions\nDESCRIPTION: This XAML snippet showcases the use of implicit conversion operators in .NET MAUI Shell to simplify the visual hierarchy. The Tab and TabBar objects are implicitly created, resulting in a cleaner and more concise XAML structure for the same single-page app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <Tab>\n        <ShellContent ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n    </Tab>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Display tooltip using XAML in .NET MAUI\nDESCRIPTION: This code snippet shows how to display a tooltip on a Button control using XAML in a .NET MAUI application. It sets the ToolTipProperties.Text attached property to the desired tooltip text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/tooltips.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"Save\"\n        ToolTipProperties.Text=\"Click to Save your data\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Style Inheritance in XAML\nDESCRIPTION: This XAML code demonstrates dynamic style inheritance. The tealSearchBarStyle inherits from blueSearchBarStyle using BaseResourceKey. Updating blueSearchBarStyle will also update tealSearchBarStyle. StaticResource is used for tealSearchBarStyle because it only needs to update when its base style changes, not continuously.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style x:Key=\"baseStyle\"\n               TargetType=\"View\">\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n        <Style x:Key=\"blueSearchBarStyle\"\n               TargetType=\"SearchBar\"\n               BasedOn=\"{StaticResource baseStyle}\">\n            <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n            <Setter Property=\"TextColor\" Value=\"Blue\" />\n        </Style>\n        <Style x:Key=\"greenSearchBarStyle\"\n               TargetType=\"SearchBar\">\n            <Setter Property=\"FontAttributes\" Value=\"None\" />\n            <Setter Property=\"TextColor\" Value=\"Green\" />\n        </Style>\n        <Style x:Key=\"tealSearchBarStyle\"\n               TargetType=\"SearchBar\"\n               BaseResourceKey=\"blueSearchBarStyle\">\n            <Setter Property=\"BackgroundColor\" Value=\"Teal\" />\n            <Setter Property=\"CancelButtonColor\" Value=\"White\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <SearchBar Text=\"SearchBar demonstrating dynamic style inheritance\"\n                   Style=\"{StaticResource tealSearchBarStyle}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Consuming IMultiValueConverter in C#\nDESCRIPTION: This C# code demonstrates how to consume a IMultiValueConverter by creating a MultiBinding and setting its Converter property to an instance of the converter. It binds the CheckBox.IsChecked property to the MultiBinding, which uses the AllTrueMultiConverter to determine if the CheckBox should be checked.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MultiBindingConverterCodePage : ContentPage\n{\n    public MultiBindingConverterCodePage()\n    {\n        BindingContext = new GroupViewModel();\n\n        CheckBox checkBox = new CheckBox();\n        checkBox.SetBinding(CheckBox.IsCheckedProperty, new MultiBinding\n        {\n            Bindings = new Collection<BindingBase>\n            {\n                Binding.Create(static (GroupViewModel vm) => vm.Employee1.IsOver16),\n                Binding.Create(static (GroupViewModel vm) => vm.Employee1.HasPassedTest),\n                Binding.Create(static (GroupViewModel vm) => vm.Employee1.IsSuspended, converter: new InverterConverter())\n            },\n            Converter = new AllTrueMultiConverter()\n        });        \n\n        Title = \"MultiBinding converter demo\";\n        Content = checkBox;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PanContainer Class for Freeform Panning in C#\nDESCRIPTION: This C# snippet shows the implementation of a PanContainer class, which is a ContentView that enables freeform panning of its content. The class handles the PanUpdated event to translate the content based on the user's pan gesture. The TranslationX and TranslationY properties are clamped to ensure the content stays within bounds. It uses the TouchPoints property to control the number of touch points needed to pan.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pan.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class PanContainer : ContentView\n{\n    double panX, panY;\n\n    public PanContainer()\n    {\n        // Set PanGestureRecognizer.TouchPoints to control the\n        // number of touch points needed to pan\n        PanGestureRecognizer panGesture = new PanGestureRecognizer();\n        panGesture.PanUpdated += OnPanUpdated;\n        GestureRecognizers.Add(panGesture);\n    }\n\n    void OnPanUpdated(object sender, PanUpdatedEventArgs e)\n    {\n        switch (e.StatusType)\n        {\n            case GestureStatus.Running:\n                // Translate and pan.\n                double boundsX = Content.Width;\n                double boundsY = Content.Height;\n                Content.TranslationX = Math.Clamp(panX + e.TotalX, -boundsX, boundsX);\n                Content.TranslationY = Math.Clamp(panY + e.TotalY, -boundsY, boundsY);\n                break;\n\n            case GestureStatus.Completed:\n                // Store the translation applied during the pan\n                panX = Content.TranslationX;\n                panY = Content.TranslationY;\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Include Splash Screen in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to include an SVG file as the splash screen in a .NET MAUI project. The MauiSplashScreen build action ensures the image will be used as the splash screen for the application across different platforms. The image is located in the Resources\\Splash folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Consuming the HyperlinkSpan Class in XAML\nDESCRIPTION: This XAML snippet shows how to use the HyperlinkSpan class within a ContentPage. It includes a namespace declaration for the local assembly and then uses the HyperlinkSpan element with Text and Url properties to create a hyperlink.  The namespace needs to be defined to point to the location of the HyperlinkSpan class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_20\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:HyperlinkDemo\"\n             x:Class=\"HyperlinkDemo.MainPage\">\n    <StackLayout>\n        ...\n        <Label>\n            <Label.FormattedText>\n                <FormattedString>\n                    <Span Text=\"Alternatively, click \" />\n                    <local:HyperlinkSpan Text=\"here\"\n                                         Url=\"https://learn.microsoft.com/dotnet/\" />\n                    <Span Text=\" to view .NET documentation.\" />\n                </FormattedString>\n            </Label.FormattedText>\n        </Label>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Draw a Rounded Rectangle on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a green rounded rectangle on an ICanvas object using the DrawRoundedRectangle method. It sets the stroke color to green and the stroke size to 4 before drawing the rounded rectangle with dimensions 100x50, a corner radius of 12, at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Green;\ncanvas.StrokeSize = 4;\ncanvas.DrawRoundedRectangle(10, 10, 100, 50, 12);\n```\n\n----------------------------------------\n\nTITLE: Handle Toggled Event in C#\nDESCRIPTION: This code snippet defines the event handler for the Toggled event. The e.Value property indicates the new state of the switch. This method allows you to perform actions based on the toggle state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnToggled(object sender, ToggledEventArgs e)\n{\n    // Perform an action after examining e.Value\n}\n```\n\n----------------------------------------\n\nTITLE: SetAppTheme<T> Extension Method in C#\nDESCRIPTION: This C# snippet demonstrates how to use the SetAppTheme<T> extension method to set the Source property of an Image based on the current system theme. The image file names are specified for the light and dark themes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image();\nimage.SetAppTheme<FileImageSource>(Image.SourceProperty, \"lightlogo.png\", \"darklogo.png\");\n```\n\n----------------------------------------\n\nTITLE: Setting Media Playback Preferences - C#\nDESCRIPTION: This code snippet shows how to set media playback preferences for the WebView on iOS and Mac Catalyst. It uses a custom handler factory delegate to access the WKWebViewConfiguration and modify properties like AllowsInlineMediaPlayback, AllowsAirPlayForMediaPlayback, AllowsPictureInPictureMediaPlayback, and MediaTypesRequiringUserActionForPlayback.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n#if IOS || MACCATALYST\nusing WebKit;\nusing CoreGraphics;\nusing Microsoft.Maui.Platform;\nusing Microsoft.Maui.Handlers;\n#endif\n...\n\n#if IOS || MACCATALYST\n    Microsoft.Maui.Handlers.WebViewHandler.PlatformViewFactory = (handler) =>\n    {\n        WKWebViewConfiguration config = MauiWKWebView.CreateConfiguration();\n\n        // True to play HTML5 videos inliine, false to use the native full-screen controller.\n        config.AllowsInlineMediaPlayback = false;\n\n        // True to play videos over AirPlay, otherwise false.\n        config.AllowsAirPlayForMediaPlayback = false;\n\n        // True to let HTML5 videos play Picture in Picture.\n        config.AllowsPictureInPictureMediaPlayback = false;\n\n        // Media types that require a user gesture to begin playing.\n        config.MediaTypesRequiringUserActionForPlayback = WKAudiovisualMediaTypes.All;\n\n        return new MauiWKWebView(CGRect.Empty, (WebViewHandler)handler, config);\n    };\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting Max Track Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the color of the maximum track on a Slider to red using the `-maui-max-track-color` property. It accepts a color value or `initial`.  This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_63\n\nLANGUAGE: css\nCODE:\n```\n-maui-max-track-color: red;\n```\n\n----------------------------------------\n\nTITLE: Border Radius CSS in .NET MAUI\nDESCRIPTION: Sets the border radius for .NET MAUI Border, BoxView, Button, Frame, and ImageButton. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\nborder-radius: 10;\n```\n\n----------------------------------------\n\nTITLE: Updating Data via PUT (Excerpt) C#\nDESCRIPTION: Snippet showing the PUT request within the SaveTodoItemAsync method. This part specifically handles the invocation of the PutAsync method to update data on the server.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nresponse = await _client.PutAsync(uri, content);\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectivityChanged Event in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to implement the ConnectivityChanged event, which is raised whenever the connection profile or network access changes.  This allows the application to react to changes in the device's network connectivity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/networking.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/NetworkingPage.cs\" id=\"network_implementation\":::\n```\n\n----------------------------------------\n\nTITLE: Playing Video from URI on iOS/Mac Catalyst with AVPlayer\nDESCRIPTION: This code snippet shows how to play a video on iOS and Mac Catalyst using AVFoundation and AVKit. It creates an `AVAsset` from a URI, which is then used to create an `AVPlayerItem`, and finally passed to an `AVPlayer` for playback. It also handles the `AutoPlay` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        AVPlayerItem _playerItem;\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            AVAsset asset = null;\n\n            if (_video.Source is UriVideoSource)\n            {\n                string uri = (_video.Source as UriVideoSource).Uri;\n                if (!string.IsNullOrWhiteSpace(uri))\n                    asset = AVAsset.FromUrl(new NSUrl(uri));\n            }\n            ...\n\n            if (asset != null)\n                _playerItem = new AVPlayerItem(asset);\n            else\n                _playerItem = null;\n\n            _player.ReplaceCurrentItemWithPlayerItem(_playerItem);\n            if (_playerItem != null && _video.AutoPlay)\n            {\n                _player.Play();\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Compass Monitoring in .NET MAUI (C#)\nDESCRIPTION: This code snippet shows how to start and stop monitoring the compass sensor using the ICompass interface in .NET MAUI. It also handles the ReadingChanged event to display the compass heading data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool _isCompassAvailable = Compass.Default.IsSupported;\n\nprivate void CompassStartStop()\n{\n    if (!_isCompassAvailable)\n    {\n        return;\n    }\n\n    if (!Compass.Default.IsMonitoring)\n    {\n        Compass.Default.ReadingChanged += Compass_ReadingChanged;\n        Compass.Default.Start(SensorSpeed.UI);\n    }\n    else\n    {\n        Compass.Default.Stop();\n        Compass.Default.ReadingChanged -= Compass_ReadingChanged;\n    }\n}\n\nprivate void Compass_ReadingChanged(object sender, CompassChangedEventArgs e)\n{\n    // Update UI Label with compass reading\n    lblCompass.Text = $\"Compass: {e.Reading.HeadingMagneticNorth} degrees\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Text Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the text color of a NavigationPage or TabbedPage bar to gray using the `-maui-bar-text-color` property. The property accepts a color value or `initial` to revert to the default value. It is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_60\n\nLANGUAGE: css\nCODE:\n```\n-maui-bar-text-color: gray\n```\n\n----------------------------------------\n\nTITLE: Handling StateTriggerBase.IsActiveChanged Event in C#\nDESCRIPTION: This C# code shows how to handle the IsActiveChanged event for StateTriggers. The event handlers, OnCheckedStateIsActiveChanged and OnUncheckedStateIsActiveChanged, output whether the associated VisualState is active or not to the console.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnCheckedStateIsActiveChanged(object sender, EventArgs e)\n{\n    StateTriggerBase stateTrigger = sender as StateTriggerBase;\n    Console.WriteLine($\"Checked state active: {stateTrigger.IsActive}\");\n}\n\nvoid OnUncheckedStateIsActiveChanged(object sender, EventArgs e)\n{\n    StateTriggerBase stateTrigger = sender as StateTriggerBase;\n    Console.WriteLine($\"Unchecked state active: {stateTrigger.IsActive}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming IDrawable in XAML\nDESCRIPTION: This XAML snippet shows how to declare an `IDrawable` object as a resource and then consume it within a `GraphicsView` control. The `Drawable` property of the `GraphicsView` is bound to the resource using `StaticResource`.  It requires the `clr-namespace` to be defined to reference the C# namespace containing the `IDrawable` implementation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/index.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n             xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n             xmlns:drawable=\"clr-namespace:MyMauiApp\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Resources>\n        <drawable:GraphicsDrawable x:Key=\"drawable\" />\n    </ContentPage.Resources>\n    <VerticalStackLayout>\n        <GraphicsView Drawable=\"{StaticResource drawable}\"\n                      HeightRequest=\"300\"\n                      WidthRequest=\"400\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using FontImageSource in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the FontImageSource type instead of the deprecated FontImageExtension to display font icons in a Button. It sets the Glyph, Color, FontFamily, and Size properties to customize the font icon's appearance based on the app's theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Press me\"\n        Background=\"Transparent\"\n        TextColor=\"{AppThemeBinding Light=Black, Dark=White}\"\n        ImageSource=\"{FontImageSource Glyph=MyGlyph, Color={AppThemeBinding Light=Black, Dark=White}, FontFamily=FontAwesome, Size=18}\" />\n```\n\n----------------------------------------\n\nTITLE: Windows Localization Configuration in Package.appxmanifest\nDESCRIPTION: This XML snippet demonstrates configuring the Package.appxmanifest file for Windows localization, specifically declaring supported languages for the DatePicker.  This ensures that the DatePicker displays dates according to the user's locale settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/datepicker.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n    <Resource Language=\"en-US\" />\n    <Resource Language=\"es-ES\" />\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Loading Image from Stream in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to load an image from a stream in a .NET MAUI application. It retrieves an embedded resource, loads it into a stream, and then creates an IImage object using PlatformImage.FromStream. Finally, it draws the image onto a canvas if the image loading was successful.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/images.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Graphics.Platform;\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    canvas.DrawImage(image, 10, 10, image.Width, image.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: AboutViewModel Implementation C#\nDESCRIPTION: This snippet defines the AboutViewModel class with properties for app name, version, and a command to open a web browser with more information. It leverages the CommunityToolkit.Mvvm package for implementing the command pattern, enabling interaction with the data model on behalf of the view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-about.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.Mvvm.Input;\nusing System.Reflection;\n\nnamespace Notes.ViewModels;\n\npublic class AboutViewModel\n{\n    public string Title => AppInfo.Name;\n    public string Version => AppInfo.VersionString;\n    public string MoreInfoUrl => \"https://aka.ms/maui\";\n    public string Message => \"This app is written in XAML and C# with .NET MAUI.\";\n    public IRelayCommand ShowMoreInfoCommand { get; }\n\n    public AboutViewModel()\n    {\n        ShowMoreInfoCommand = new RelayCommand(ShowMoreInfo);\n    }\n\n    async void ShowMoreInfo()\n    {\n        await Launcher.Default.OpenAsync(MoreInfoUrl);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redefine Control UI with ControlTemplate XAML\nDESCRIPTION: This XAML code shows how to redefine the UI of a custom control using a ControlTemplate. It demonstrates replacing the existing visual structure of a CardViewUI control with a new layout defined in a ControlTemplate, setting the ControlTemplate property of the CardViewUI instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"             \n             ...>\n    <ContentPage.Resources>\n        <ControlTemplate x:Key=\"CardViewCompressed\"\n                         x:DataType=\"controls:CardView\">\n            <Grid RowDefinitions=\"100\"\n                  ColumnDefinitions=\"100, *\">\n                <Image Source=\"{TemplateBinding IconImageSource}\"\n                       BackgroundColor=\"{TemplateBinding IconBackgroundColor}\"\n                       ...>\n                <!-- Other UI objects that define the CardView visual structure -->\n            </Grid>\n        </ControlTemplate>\n    </ContentPage.Resources>\n    <StackLayout Margin=\"30\">\n        <controls:CardViewUI BorderColor=\"DarkGray\"\n                             CardTitle=\"John Doe\"\n                             CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                             IconBackgroundColor=\"SlateGray\"\n                             IconImageSource=\"user.png\"\n                             ControlTemplate=\"{StaticResource CardViewCompressed}\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting font attributes in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet shows how to set font attributes (Italic and Bold) using the `FontAttributes` property of a Label control in a .NET MAUI application. The code demonstrates how to specify one or multiple font attributes to style text elements in the UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"Italics\"\n       FontAttributes=\"Italic\" />\n<Label Text=\"Bold and italics\"\n       FontAttributes=\"Bold, Italic\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the shadow on a VisualElement using the `-maui-shadow` property. It accepts a color, offsetX, offsetY, or offset X, offsetY, radius, color, or offset X, offsetY, radius, color, opacity. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_69\n\nLANGUAGE: css\nCODE:\n```\n-maui-shadow: #000000 4 4;\n```\n\n----------------------------------------\n\nTITLE: Consuming Bindable Property in C#\nDESCRIPTION: This code shows how to consume a bindable property in C#. It creates an instance of the `Expander` control and sets its `IsExpanded` property to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nExpander expander = new Expander\n{\n    IsExpanded = true\n};\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView with Template in XAML\nDESCRIPTION: Demonstrates setting the EmptyView property to a custom type and using EmptyViewTemplate to define its appearance in XAML. The filter data binds to the SearchBar's text property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout Margin=\"20\">\n    <SearchBar x:Name=\"searchBar\"\n               SearchCommand=\"{Binding FilterCommand}\"\n               SearchCommandParameter=\"{Binding x:DataType='SearchBar', Source={RelativeSource Self}, Path=Text}\"\n               Placeholder=\"Filter\" />\n    <CarouselView ItemsSource=\"{Binding Monkeys}\">\n        <CarouselView.EmptyView>\n            <controls:FilterData Filter=\"{Binding x:DataType='SearchBar', Source={x:Reference searchBar}, Path=Text}\" />\n        </CarouselView.EmptyView>\n        <CarouselView.EmptyViewTemplate>\n            <DataTemplate>\n                <Label x:DataType=\"controls:FilterData\"\n                       Text=\"{Binding Filter, StringFormat='Your filter term of {0} did not match any records.'}\"\n                       Margin=\"10,25,10,10\"\n                       FontAttributes=\"Bold\"\n                       FontSize=\"18\"\n                       HorizontalOptions=\"Fill\"\n                       HorizontalTextAlignment=\"Center\" />\n            </DataTemplate>\n        </CarouselView.EmptyViewTemplate>\n        <CarouselView.ItemTemplate>\n            ...\n        </CarouselView.ItemTemplate>\n    </CarouselView>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Enable Traffic Data - XAML\nDESCRIPTION: This XAML code enables traffic data overlay on a .NET MAUI Map. The IsTrafficEnabled property is set to true, causing traffic information to be displayed on the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map IsTrafficEnabled=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Android ReadContacts Permission (XML)\nDESCRIPTION: This XML snippet adds the `READ_CONTACTS` permission to the AndroidManifest.xml file. This permission is essential for accessing contact information on Android devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: ADB Connect Localhost Windows CMD\nDESCRIPTION: This command connects the ADB client to the emulator through the local port forwarding set up using SSH. It specifies `localhost:15555` as the connection point, which is the local port on the Windows VM that forwards traffic to the emulator running on the Mac.  This assumes that SSH port forwarding has been successfully configured.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nadb connect localhost:15555\n```\n\n----------------------------------------\n\nTITLE: Handle Picker SelectedIndexChanged Event in C#\nDESCRIPTION: This C# snippet shows an event handler for the SelectedIndexChanged event of a .NET MAUI Picker. It retrieves the selected index and uses it to access the selected item from the ItemsSource collection.  The selected item is then displayed in a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnPickerSelectedIndexChanged(object sender, EventArgs e)\n{\n  var picker = (Picker)sender;\n  int selectedIndex = picker.SelectedIndex;\n\n  if (selectedIndex != -1)\n  {\n    monkeyNameLabel.Text = (string)picker.ItemsSource[selectedIndex];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the placeholder text for an Entry, Editor, or SearchBar using the `-maui-placeholder` property.  It accepts quoted text or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_66\n\nLANGUAGE: css\nCODE:\n```\n-maui-placeholder: Enter name;\n```\n\n----------------------------------------\n\nTITLE: Handling RadioButton CheckedChanged Event C#\nDESCRIPTION: This C# code snippet shows the event handler for the `CheckedChanged` event. The handler takes the `sender` object and a `CheckedChangedEventArgs` object as parameters.  The `sender` is the RadioButton instance that triggered the event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnColorsRadioButtonCheckedChanged(object sender, CheckedChangedEventArgs e)\n{\n    // Perform required operation\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements by Name after Loading XAML in .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to access XAML elements by their x:Name after loading XAML at runtime. It uses the FindByName method to retrieve the element.  Requires Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/runtime-load.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// See the sample for the full XAML string\nstring pageXAML = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<ContentPage xmlns=\\\"http://schemas.microsoft.com/dotnet/2021/maui\\\"\\nxmlns:x=\\\"http://schemas.microsoft.com/winfx/2009/xaml\\\"\\nx:Class=\\\"LoadRuntimeXAML.CatalogItemsPage\\\"\\nTitle=\\\"Catalog Items\\\">\\n<StackLayout>\\n<Label x:Name=\\\"monkeyName\\\"\\n />\\n</StackLayout>\\n</ContentPage>\";\nContentPage page = new ContentPage().LoadFromXaml(pageXAML);\n\nLabel monkeyLabel = page.FindByName<Label>(\"monkeyName\");\nmonkeyLabel.Text = \"Seated Monkey\";\n```\n\n----------------------------------------\n\nTITLE: OrientationStateTrigger Style Definition XAML\nDESCRIPTION: This XAML code defines a style for ContentPage objects that uses OrientationStateTrigger to change the background color based on the device's orientation. When the device is in portrait mode, the background color is set to silver. When the device is in landscape mode, the background color is set to white. The style uses VisualStateManager to define the different visual states.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"OrientationStateTriggerPageStyle\"\n       TargetType=\"ContentPage\">\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup>\n                <VisualState x:Name=\"Portrait\">\n                    <VisualState.StateTriggers>\n                        <OrientationStateTrigger Orientation=\"Portrait\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"Silver\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Landscape\">\n                    <VisualState.StateTriggers>\n                        <OrientationStateTrigger Orientation=\"Landscape\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"White\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle on a Map - XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a Circle object and add it to a Map control in .NET MAUI. It defines the circle's center location using latitude and longitude, its radius in meters, and its stroke and fill colors. The circle will be rendered on the map with the specified properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_42\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:sensors=\"clr-namespace:Microsoft.Maui.Devices.Sensors;assembly=Microsoft.Maui.Essentials\">\n    <maps:Map>\n        <maps:Map.MapElements>\n            <maps:Circle StrokeColor=\"#88FF0000\"\n                         StrokeWidth=\"8\"\n                         FillColor=\"#88FFC0CB\">\n                <maps:Circle.Center>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>37.79752</x:Double>\n                            <x:Double>-122.40183</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                </maps:Circle.Center>\n                <maps:Circle.Radius>\n                    <maps:Distance>\n                        <x:Arguments>\n                            <x:Double>250</x:Double>\n                        </x:Arguments>\n                    </maps:Distance>\n                </maps:Circle.Radius>\n            </maps:Circle>             \n        </maps:Map.MapElements>\n    </maps:Map>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Choosing Item Appearance at Runtime with DataTemplateSelector in XAML\nDESCRIPTION: This code snippet demonstrates how to use a DataTemplateSelector to choose the appearance of each item in a BindableLayout at runtime, based on the item's value. It sets the `ItemTemplateSelector` property to a static resource `TechItemTemplateSelector`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<FlexLayout BindableLayout.ItemsSource=\"{Binding User.FavoriteTech}\"\n            BindableLayout.ItemTemplateSelector=\"{StaticResource TechItemTemplateSelector}\"\n            ... />\n```\n\n----------------------------------------\n\nTITLE: Scroll to End Position in C#\nDESCRIPTION: This C# code snippet demonstrates scrolling an item to the end of the ListView using ScrollToPosition.End.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nlistView.ScrollTo(monkey, position: ScrollToPosition.End, animate: true);\n```\n\n----------------------------------------\n\nTITLE: Declare Asset Pack Manager and Listener Fields C#\nDESCRIPTION: Declares the required fields for managing and listening to the asset pack download progress.  Requires the Xamarin.Google.Android.Play.Core.AssetPacks namespace.  These fields will hold the AssetPackManager instance and the listener wrapper.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Xamarin.Google.Android.Play.Core.AssetPacks;\n\nIAssetPackManager assetPackManager;\nAssetPackStateUpdateListenerWrapper listener;\n```\n\n----------------------------------------\n\nTITLE: Updating Video Position on Android using VideoView\nDESCRIPTION: This C# code snippet demonstrates how to update the video position on Android using the VideoView control. It includes the UpdateStatus and UpdatePosition methods which are responsible for setting and seeking the video to a specific position, ensuring a smooth playback experience while avoiding feedback loops.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        Video _video;\n        ...\n\n        public void UpdateStatus()\n        {\n            ...\n            TimeSpan timeSpan = TimeSpan.FromMilliseconds(_videoView.CurrentPosition);\n            _video.Position = timeSpan;\n        }\n\n        public void UpdatePosition()\n        {\n            if (Math.Abs(_videoView.CurrentPosition - _video.Position.TotalMilliseconds) > 1000)\n            {\n                _videoView.SeekTo((int)_video.Position.TotalMilliseconds);\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties in VideoHandler with C#\nDESCRIPTION: This code snippet shows how to map properties from the cross-platform `Video` control to the native `MauiVideoPlayer` on Windows.  Static methods are used as actions in response to property changes on the cross-platform control. Each method receives the handler and control instances as arguments, and then calls the corresponding method on the `MauiVideoPlayer` to update the native view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapAreTransportControlsEnabled(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateTransportControlsEnabled();\n    }\n\n    public static void MapSource(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateSource();\n    }\n\n    public static void MapIsLooping(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateIsLooping();\n    }\n\n    public static void MapPosition(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdatePosition();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging Provider in C#\nDESCRIPTION: This code snippet demonstrates how to configure the Debug logging provider to write log output using `Debug` statements, viewable in Visual Studio's Output window. It adds a reference to the `Microsoft.Extensions.Logging.Debug` NuGet package and registers the provider by calling the `AddDebug` extension method. This extends the service registration for logging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddLogging(logging =>\n{\n    logging.AddFilter(\"Microsoft.AspNetCore.Components.WebView\", LogLevel.Trace);\n    logging.AddDebug();\n});\n```\n\n----------------------------------------\n\nTITLE: Monkey Class Definition - C#\nDESCRIPTION: This C# code snippet defines a simple Monkey class with properties for Name, Location, Details, and ImageUrl.  This class serves as the data source for the ListView in the previous XAML example.  The properties are designed to be bound to UI elements within the DataTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Monkey\n{\n    public string Name { get; set; }\n    public string Location { get; set; }\n    public string Details { get; set; }\n    public string ImageUrl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pin Click Events in C# .NET MAUI (>=net-maui-10.0)\nDESCRIPTION: This C# code shows how to handle the MarkerClicked and InfoWindowClicked events for a Pin on a .NET MAUI Map. The MarkerClicked event hides the info window and displays an alert, while the InfoWindowClicked event displays an alert when the info window is tapped. This version targets .NET MAUI 10.0 and later, using DisplayAlertAsync.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nPin boardwalkPin = new Pin\n{\n    Location = new Location(36.9641949, -122.0177232),\n    Label = \"Boardwalk\",\n    Address = \"Santa Cruz\",\n    Type = PinType.Place\n};\nboardwalkPin.MarkerClicked += async (s, args) =>\n{\n    args.HideInfoWindow = true;\n    string pinName = ((Pin)s).Label;\n    await DisplayAlertAsync(\"Pin Clicked\", $\"{pinName} was clicked.\", \"Ok\");\n};\n\nPin wharfPin = new Pin\n{\n    Location = new Location(36.9571571, -122.0173544),\n    Label = \"Wharf\",\n    Address = \"Santa Cruz\",\n    Type = PinType.Place\n};\nwharfPin.InfoWindowClicked += async (s, args) =>\n{\n    string pinName = ((Pin)s).Label;\n    await DisplayAlertAsync(\"Info Window Clicked\", $\"The info window was clicked for {pinName}.\", \"Ok\");\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Stepper in C# Code\nDESCRIPTION: This C# code demonstrates how to create a Stepper control programmatically and attach an event handler to its ValueChanged event.  It sets the Maximum and Increment properties, and updates the rotation and text of labels based on the Stepper's value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStepper stepper = new Stepper\n{\n    Maximum = 360,\n    Increment = 30,\n    HorizontalOptions = LayoutOptions.Center\n};\nstepper.ValueChanged += (sender, e) =>\n{\n    rotationLabel.Rotation = stepper.Value;\n    displayLabel.Text = string.Format(\"The Stepper value is {0}\", e.NewValue);\n};\n```\n\n----------------------------------------\n\nTITLE: Enable WebView Zoom Controls in C# (.NET MAUI)\nDESCRIPTION: This C# snippet demonstrates how to enable pinch-to-zoom and display zoom controls on a .NET MAUI WebView for the Android platform using the fluent API. It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/webview-zoom-controls.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nwebView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>()\n    .EnableZoomControls(true)\n    .DisplayZoomControls(true);\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Row and Column Definitions in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define row and column definitions for a Grid using a simplified syntax.  The `RowDefinitions` and `ColumnDefinitions` properties are set to strings containing comma-delimited `GridUnitType` values. This syntax allows you to specify absolute, auto, and proportional sizing for rows and columns without explicitly creating `RowDefinition` and `ColumnDefinition` objects. This example demonstrates the use of `*`, `Auto`, and absolute values for row and column sizes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"1*, Auto, 25, 14, 20\"\n      ColumnDefinitions=\"*, 2*, Auto, 300\">\n    ...\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Mapping Commands in VideoHandler\nDESCRIPTION: This snippet demonstrates how to map commands from the cross-platform `Video` control to the native `MauiVideoPlayer` on Android. The `Map` methods are static, receiving the `VideoHandler`, `Video`, and optional arguments. They extract the data and call corresponding methods in the `PlatformView`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapUpdateStatus(VideoHandler handler, Video video, object? args)\n    {\n        handler.PlatformView?.UpdateStatus();\n    }\n\n    public static void MapPlayRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PlayRequested(position);\n    }\n\n    public static void MapPauseRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PauseRequested(position);\n    }\n\n    public static void MapStopRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.StopRequested(position);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Resize ListView Items in C#\nDESCRIPTION: Demonstrates how to dynamically resize ListView items programmatically by changing the layout-related properties of elements within the DataTemplate, using `ForceUpdateSize()`. It requires setting `HasUnevenRows` to true.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnImageTapped(object sender, EventArgs args)\n{\n    Image image = sender as Image;\n    ViewCell viewCell = image.Parent.Parent as ViewCell;\n\n    if (image.HeightRequest < 250)\n    {\n      image.HeightRequest = image.Height + 100;\n      viewCell.ForceUpdateSize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollView as a Child Layout (XAML)\nDESCRIPTION: This XAML code demonstrates how to use a ScrollView as a child within a Grid layout.  The Grid's RowDefinition for the ScrollView is set to '*' to allow the ScrollView to expand and fill available space. The ScrollView contains a StackLayout with multiple Label objects to enable scrolling of the text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ScrollViewDemos.Views.XAML.BlackCatPage\"\n             Title=\"ScrollView as a child layout demo\">\n    <Grid Margin=\"20\"\n          RowDefinitions=\"Auto,*,Auto\">\n        <Label Text=\"THE BLACK CAT by Edgar Allan Poe\"\n               FontSize=\"14\"\n               FontAttributes=\"Bold\"\n               HorizontalOptions=\"Center\" />\n        <ScrollView x:Name=\"scrollView\"\n                    Grid.Row=\"1\"\n                    VerticalOptions=\"FillAndExpand\"\n                    Scrolled=\"OnScrollViewScrolled\">\n            <StackLayout>\n                <Label Text=\"FOR the most wild, yet most homely narrative which I am about to pen, I neither expect nor solicit belief. Mad indeed would I be to expect it, in a case where my very senses reject their own evidence. Yet, mad am I not -- and very surely do I not dream. But to-morrow I die, and to-day I would unburthen my soul. My immediate purpose is to place before the world, plainly, succinctly, and without comment, a series of mere household events. In their consequences, these events have terrified -- have tortured -- have destroyed me. Yet I will not attempt to expound them. To me, they have presented little but Horror -- to many they will seem less terrible than barroques. Hereafter, perhaps, some intellect may be found which will reduce my phantasm to the common-place -- some intellect more calm, more logical, and far less excitable than my own, which will perceive, in the circumstances I detail with awe, nothing more than an ordinary succession of very natural causes and effects.\" />\n                <!-- More Label objects go here -->\n            </StackLayout>\n        </ScrollView>\n        <Button Grid.Row=\"2\"\n                Text=\"Scroll to end\"\n                Clicked=\"OnButtonClicked\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Attached Property Accessors in C#\nDESCRIPTION: This code snippet shows the implementation of the `GetHasShadow` and `SetHasShadow` accessor methods for the `HasShadow` attached property. These static methods allow the property system to read and write the value of the attached property on a given `BindableObject`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyControl\n{\n    public static bool GetHasShadow(BindableObject view)\n    {\n        return (bool)view.GetValue (HasShadowProperty);\n    }\n\n    public static void SetHasShadow(BindableObject view, bool value)\n    {\n        view.SetValue(HasShadowProperty, value);\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to NotesViewModel C#\nDESCRIPTION: This snippet adds properties to the `NotesViewModel` class.  The `AllNotes` property is an `ObservableCollection` for storing notes.  `NewCommand` and `SelectNoteCommand` are used by the view to trigger creating a note or selecting an existing note.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic ObservableCollection<ViewModels.NoteViewModel> AllNotes { get; }\npublic ICommand NewCommand { get; }\npublic ICommand SelectNoteCommand { get; }\n```\n\n----------------------------------------\n\nTITLE: Loading XAML string at Runtime in .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to load a simple XAML string at runtime to create a Button instance and add it to a StackLayout. It uses the LoadFromXaml extension method.  Requires Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/runtime-load.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring navigationButtonXAML = \"<Button Text=\\\"Navigate\\\" />\";\nButton navigationButton = new Button().LoadFromXaml(navigationButtonXAML);\n...\nstackLayout.Add(navigationButton);\n```\n\n----------------------------------------\n\nTITLE: Enable Write-Ahead Logging with SQLiteAsyncConnection in C#\nDESCRIPTION: This code snippet demonstrates how to enable Write-Ahead Logging (WAL) on a SQLite database using the `SQLiteAsyncConnection` in C#. WAL can improve performance by allowing concurrent read and write operations. It requires the SQLite.NET library.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait Database.EnableWriteAheadLoggingAsync();\n```\n\n----------------------------------------\n\nTITLE: FlyoutPageItem Class Definition\nDESCRIPTION: This C# code defines the FlyoutPageItem class, which represents an item in the flyout menu. It has properties for the title, icon source, and the type of the target page. This class is used to populate the CollectionView in the FlyoutMenuPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/flyoutpage.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FlyoutPageItem\n{\n    public string Title { get; set; }\n    public string IconSource { get; set; }\n    public Type TargetType { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting WindowSoftInputModeAdjust in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `WindowSoftInputModeAdjust` property to `Resize` within the `Application` tag.  This configures the Android application to resize the window when the soft keyboard is displayed. It requires the `android` namespace declaration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/soft-keyboard-input-mode.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Application ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\"\n             android:Application.WindowSoftInputModeAdjust=\"Resize\">\n  ...\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Handle CheckBox CheckedChanged event in C#\nDESCRIPTION: This code snippet shows the handler for the CheckedChanged event. The event handler takes two arguments: the sender (the CheckBox instance) and a CheckedChangedEventArgs object that contains the new IsChecked value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnCheckBoxCheckedChanged(object sender, CheckedChangedEventArgs e)\n{\n    // Perform required operation after examining e.Value\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Local Resource Dictionaries in XAML\nDESCRIPTION: This XAML code demonstrates how to merge a local ResourceDictionary file (MyResourceDictionary.xaml) into a ContentPage's ResourceDictionary. It uses the Source property of the ResourceDictionary object to specify the path to the XAML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <!-- Add more resources here -->\n        <ResourceDictionary Source=\"MyResourceDictionary.xaml\" />\n        <!-- Add more resources here -->\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Draw a Dashed Line on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a dashed red line on an ICanvas object using the DrawLine method. It sets the stroke color to red, the stroke size to 4, and defines a stroke dash pattern before drawing the line from coordinates (10, 10) to (90, 100).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.StrokeDashPattern = new float[] { 2, 2 };\ncanvas.DrawLine(10, 10, 90, 100);\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Sign In Entitlement (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the Apple Sign In entitlement to your app, which is required if your app uses social login services. This configuration is necessary for enabling Apple Sign In functionality.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Publishing with Environment Variable for Password\nDESCRIPTION: This snippet demonstrates how to securely pass the keystore password using an environment variable named 'AndroidSigningPassword'. This prevents the password from being directly exposed in the command line and build logs, improving security.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-android -c Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore=myapp.keystore -p:AndroidSigningKeyAlias=myapp -p:AndroidSigningKeyPass=env:AndroidSigningPassword -p:AndroidSigningStorePass=env:AndroidSigningPassword\n```\n\n----------------------------------------\n\nTITLE: Switch Visual States in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to define visual states for a Switch control, changing the ThumbColor based on the IsToggled property.  When the Switch is 'On', the ThumbColor is MediumSpringGreen, and when it's 'Off', the ThumbColor is Red.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch IsToggled=\"True\">\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n             <VisualStateGroup x:Name=\"CommonStates\">\n                 <VisualState x:Name=\"On\">\n                     <VisualState.Setters>\n                         <Setter Property=\"ThumbColor\"\n                             Value=\"MediumSpringGreen\" />\n                     </VisualState.Setters>\n                 </VisualState>\n                 <VisualState x:Name=\"Off\">\n                     <VisualState.Setters>\n                         <Setter Property=\"ThumbColor\"\n                             Value=\"Red\" />\n                     </VisualState.Setters>\n                 </VisualState>\n             </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Abbreviated Curly Brace Syntax\nDESCRIPTION: This XAML code shows an even more abbreviated version of the curly brace syntax for the `x:Static` extension. `x:StaticExtension` is shortened to `x:Static`, making the code more readable. The namespace alias `local` must be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label No. 4\"\n       FontSize=\"{x:Static Member=local:AppConstants.NormalFontSize}\" />\n```\n\n----------------------------------------\n\nTITLE: Create Embedded Window Context - C#\nDESCRIPTION: This code snippet demonstrates how to create an embedded window context using the `CreateEmbeddedWindowContext` method, associating a native window with a .NET MAUI window.  The resulting context is crucial for converting .NET MAUI controls to their native counterparts. Requires a `MauiApp` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar mauiApp = MauiProgram.CreateMauiApp();\nvar context = mauiApp.CreateEmbeddedWindowContext(this);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TriggerAction in C#\nDESCRIPTION: This C# code shows the implementation of a custom TriggerAction called FadeTriggerAction.  It inherits from TriggerAction<VisualElement> and overrides the Invoke method to create a fade animation that changes the background color of the VisualElement. The StartsFrom property controls the starting point of the fade animation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FadeTriggerAction : TriggerAction<VisualElement>\n{\n    public int StartsFrom { get; set; }\n\n    protected override void Invoke(VisualElement sender)\n    {\n        sender.Animate(\"FadeTriggerAction\", new Animation((d) =>\n        {\n            var val = StartsFrom == 1 ? d : 1 - d;\n            sender.BackgroundColor = Color.FromRgb(1, val, 1);\n        }),\n        length: 1000, // milliseconds\n        easing: Easing.Linear);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI in iOS/Mac Catalyst ViewDidLoad with C#\nDESCRIPTION: This code snippet demonstrates how to initialize .NET MAUI within the ViewDidLoad method of a main view controller on iOS and Mac Catalyst. It involves creating a MauiContext object and ensuring the .NET MAUI app is built before creating .NET MAUI views.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Embedding;\n\nnamespace MyNativeEmbeddedApp.iOS;\n\npublic class MainViewController : UIViewController\n{\n    public override void ViewDidLoad()\n    {\n        base.ViewDidLoad();\n\n        // Ensure .NET MAUI app is built before creating .NET MAUI views\n        var mauiApp = MyEmbeddedMauiApp.Shared;\n\n        // Create .NET MAUI context\n        var context = new MauiContext(mauiApp.Services);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Permission and Registering for Remote Notifications in iOS - C#\nDESCRIPTION: This method is part of the `AppDelegate` class and is executed when the application finishes launching. It conditionally requests user permission to use notifications and then registers the application for remote notifications on iOS, if notifications are supported. It also processes any notification actions that may be present in the launch options.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\n[Export(\"application:didFinishLaunchingWithOptions:\")]\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)\n    {\n        if (DeviceInstallationService.NotificationsSupported)\n        {\n            UNUserNotificationCenter.Current.RequestAuthorization(\n                UNAuthorizationOptions.Alert |\n                UNAuthorizationOptions.Badge |\n                UNAuthorizationOptions.Sound,\n                (approvalGranted, error) =>\n                {\n                    if (approvalGranted && error == null)\n                    {\n                        MainThread.BeginInvokeOnMainThread(() =>\n                        {\n                            UIApplication.SharedApplication.RegisterForRemoteNotifications();\n                        });\n                    }\n                });\n        }\n\n        using (var userInfo = launchOptions?.ObjectForKey(UIApplication.LaunchOptionsRemoteNotificationKey) as NSDictionary)\n        {\n            ProcessNotificationActions(userInfo);\n        }\n\n        return base.FinishedLaunching(application, launchOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Control Scroll Position - MakeVisible (C#)\nDESCRIPTION: This C# code snippet shows how to use `ScrollToPosition.MakeVisible` to scroll an item into view with the minimal amount of scrolling required.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ncarouselView.ScrollTo(monkey, position: ScrollToPosition.MakeVisible);\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to End in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the `SnapPointsAlignment` property to `End` programmatically within a `CarouselView`. After scrolling, the trailing edge of the item will align with the trailing edge of the view. Requires instantiating `CarouselView` and `LinearItemsLayout`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ItemsLayout = new LinearItemsLayout(ItemsLayoutOrientation.Horizontal)\n    {\n        SnapPointsType = SnapPointsType.MandatorySingle,\n        SnapPointsAlignment = SnapPointsAlignment.End\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Middleware in Program.cs (C#)\nDESCRIPTION: This code snippet configures the HTTP request pipeline in `Program.cs` to use the authentication middleware. It calls the `UseAuthentication` extension method to register the middleware, ensuring that it's called before any middleware that depends on users being authenticated. It also includes `UseAuthorization` and `MapControllers` to complete the pipeline setup.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure the HTTP request pipeline.\n\napp.UseHttpsRedirection();\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining Resources at StackLayout Level\nDESCRIPTION: This XAML snippet demonstrates that you can define resources not just at the page level, but at any element level, such as the StackLayout. This enables element specific styling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout>\n    <StackLayout.Resources>\n        <Color x:Key=\"textColor\">Blue</Color>\n    </StackLayout.Resources>\n    ...\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Create HSL Color Markup Extension C#\nDESCRIPTION: Demonstrates creating a custom markup extension named `HslColorExtension` that implements `IMarkupExtension<Color>`. It allows creating Color values from Hue, Saturation, Luminosity, and Alpha components. The example targets .NET MAUI 8.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HslColorExtension : IMarkupExtension<Color>\n{\n    public float H { get; set; }\n    public float S { get; set; }\n    public float L { get; set; }\n    public float A { get; set; } = 1.0f;\n\n    public Color ProvideValue(IServiceProvider serviceProvider)\n    {\n        return Color.FromHsla(H, S, L, A);\n    }\n\n    object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)\n    {\n        return (this as IMarkupExtension<Color>).ProvideValue(serviceProvider);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TitleBar in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to add a TitleBar to a Window in a .NET MAUI application. It shows how to bind the Title and Subtitle properties, set the background and foreground colors, height, and add a SearchBar as content to the TitleBar. Dependencies include the .NET MAUI framework and the TitleBarDemo namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/titlebar.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Window xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n        xmlns:local=\"clr-namespace:TitleBarDemo\"\n        x:Class=\"TitleBarDemo.MainWindow\"\n        x:DataType=\"local:MainWindowViewModel\">\n    ...\n    <Window.TitleBar>\n        <TitleBar Title=\"{Binding Title}\"\n                  Subtitle=\"{Binding Subtitle}\"\n                  IsVisible=\"{Binding ShowTitleBar}\"\n                  BackgroundColor=\"#512BD4\"\n                  ForegroundColor=\"White\"                  \n                  HeightRequest=\"48\">\n            <TitleBar.Content>\n                <SearchBar Placeholder=\"Search\"\n                           PlaceholderColor=\"White\"\n                           MaximumWidthRequest=\"300\"\n                           HorizontalOptions=\"Fill\"\n                           VerticalOptions=\"Center\" />\n            </TitleBar.Content>            \n        </TitleBar>\n    </Window.TitleBar>\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Mac Catalyst Location Services Entitlement - XML\nDESCRIPTION: This XML snippet shows how to add the `com.apple.security.personal-information.location` entitlement to the Entitlements.plist file for Mac Catalyst.  This enables the application to use Location Services on macOS. Setting the value to `<true/>` grants the app access.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.security.personal-information.location</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Run .NET Upgrade Assistant CLI\nDESCRIPTION: This command runs the .NET Upgrade Assistant tool to upgrade the target project. It must be executed in the directory containing the project or solution file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/upgrade-assistant.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\nupgrade-assistant upgrade\n```\n\n----------------------------------------\n\nTITLE: KeyChain Class Implementation C#\nDESCRIPTION: This C# code defines a `KeyChain` class used on iOS to interact with the Keychain for secure storage.  It provides methods to query, add, remove, and remove all data associated with a service, using the iOS Keychain APIs.  It depends on the `Foundation` and `Security` namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/secure-storage.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Foundation;\nusing Security;\n\nnamespace MigrationHelpers;\n\nclass KeyChain\n{\n    SecRecord ExistingRecordForKey(string key, string service)\n    {\n        return new SecRecord(SecKind.GenericPassword)\n        {\n            Account = key,\n            Service = service\n        };\n    }\n\n    internal string ValueForKey(string key, string service)\n    {\n        using (var record = ExistingRecordForKey(key, service))\n        using (var match = SecKeyChain.QueryAsRecord(record, out var resultCode))\n        {\n            if (resultCode == SecStatusCode.Success)\n                return NSString.FromData(match.ValueData, NSStringEncoding.UTF8);\n            else\n                return null;\n        }\n    }\n\n    internal bool Remove(string key, string service)\n    {\n        using (var record = ExistingRecordForKey(key, service))\n        using (var match = SecKeyChain.QueryAsRecord(record, out var resultCode))\n        {\n            if (resultCode == SecStatusCode.Success)\n            {\n                RemoveRecord(record);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    internal void RemoveAll(string service)\n    {\n        using (var query = new SecRecord(SecKind.GenericPassword) { Service = service })\n        {\n            SecKeyChain.Remove(query);\n        }\n    }\n\n    bool RemoveRecord(SecRecord record)\n    {\n        var result = SecKeyChain.Remove(record);\n        if (result != SecStatusCode.Success && result != SecStatusCode.ItemNotFound)\n            throw new Exception($\"Error removing record: {result}\");\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Show User Location - XAML\nDESCRIPTION: This XAML code enables the display of the user's current location on a .NET MAUI Map.  The IsShowingUser property is set to true, which triggers the map to show the user's location, provided location permissions are granted.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_20\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map IsShowingUser=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Define Custom Namespace Schema with XmlnsDefinitionAttribute (C#)\nDESCRIPTION: Demonstrates defining a custom namespace schema using the `XmlnsDefinitionAttribute` at the assembly level.  This maps a custom URL (`http://mycompany.com/schemas/controls`) to a CLR namespace (`MyCompany.Controls`).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing MyCompany.Controls;\n\n[assembly: XmlnsDefinition(\"http://mycompany.com/schemas/controls\", \"MyCompany.Controls\")]\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Type for SearchHandler in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the keyboard type for a SearchHandler using the Keyboard property. The example sets the keyboard to the Email type.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<SearchHandler Keyboard=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Grid Alignment in XAML\nDESCRIPTION: This XAML code creates a Grid with nine cells and positions labels in each cell with different horizontal and vertical alignments, demonstrating the use of `HorizontalOptions` and `VerticalOptions` to control the placement of views within a Grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"GridDemos.Views.XAML.GridAlignmentPage\"\n             Title=\"Grid alignment demo\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition />\n            <RowDefinition />\n            <RowDefinition />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition />\n            <ColumnDefinition />\n            <ColumnDefinition />\n        </Grid.ColumnDefinitions>\n\n        <BoxView Color=\"AliceBlue\" />\n        <Label Text=\"Upper left\"\n               HorizontalOptions=\"Start\"\n               VerticalOptions=\"Start\" />\n        <BoxView Grid.Column=\"1\"\n                 Color=\"LightSkyBlue\" />\n        <Label Grid.Column=\"1\"\n               Text=\"Upper center\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Start\"/>\n        <BoxView Grid.Column=\"2\"\n                 Color=\"CadetBlue\" />\n        <Label Grid.Column=\"2\"\n               Text=\"Upper right\"\n               HorizontalOptions=\"End\"\n               VerticalOptions=\"Start\" />\n        <BoxView Grid.Row=\"1\"\n                 Color=\"CornflowerBlue\" />\n        <Label Grid.Row=\"1\"\n               Text=\"Center left\"\n               HorizontalOptions=\"Start\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"1\"\n                 Grid.Column=\"1\"\n                 Color=\"DodgerBlue\" />\n        <Label Grid.Row=\"1\"\n               Grid.Column=\"1\"\n               Text=\"Center center\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"1\"\n                 Grid.Column=\"2\"\n                 Color=\"DarkSlateBlue\" />\n        <Label Grid.Row=\"1\"\n               Grid.Column=\"2\"\n               Text=\"Center right\"\n               HorizontalOptions=\"End\"\n               VerticalOptions=\"Center\" />\n        <BoxView Grid.Row=\"2\"\n                 Color=\"SteelBlue\" />\n        <Label Grid.Row=\"2\"\n               Text=\"Lower left\"\n               HorizontalOptions=\"Start\"\n               VerticalOptions=\"End\" />\n        <BoxView Grid.Row=\"2\"\n                 Grid.Column=\"1\"\n                 Color=\"LightBlue\" />\n        <Label Grid.Row=\"2\"\n               Grid.Column=\"1\"\n               Text=\"Lower center\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"End\" />\n        <BoxView Grid.Row=\"2\"\n                 Grid.Column=\"2\"\n                 Color=\"BlueViolet\" />\n        <Label Grid.Row=\"2\"\n               Grid.Column=\"2\"\n               Text=\"Lower right\"\n               HorizontalOptions=\"End\"\n               VerticalOptions=\"End\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting ItemTemplate with DataTemplateSelector in C#\nDESCRIPTION: This C# snippet shows how to create a `CollectionView` and set its `ItemTemplate` to a `MonkeyDataTemplateSelector` object. The `SetBinding` method is used to bind the `ItemsSourceProperty` to the `Monkeys` property of a `MonkeysViewModel`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ItemTemplate = new MonkeyDataTemplateSelector { ... }\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Loading a Theme at Runtime in .NET MAUI C#\nDESCRIPTION: This C# code snippet shows how to remove the current theme and load a new theme at runtime by manipulating the MergedDictionaries property of the application's Resources. This causes VisualElement objects using DynamicResource to update with the new theme's values. It first clears all existing merged dictionaries, and then adds a new theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nICollection<ResourceDictionary> mergedDictionaries = Application.Current.Resources.MergedDictionaries;\nif (mergedDictionaries != null)\n{\n    mergedDictionaries.Clear();\n    mergedDictionaries.Add(new DarkTheme());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in C#\nDESCRIPTION: This snippet demonstrates how to set the line join style for a path drawn on a .NET MAUI canvas. It creates a `PathF` object, sets the `StrokeSize`, `StrokeColor`, and `StrokeLineJoin` properties, and then calls the `DrawPath` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nPathF path = new PathF();\npath.MoveTo(10, 10);\npath.LineTo(110, 50);\npath.LineTo(10, 110);\n\ncanvas.StrokeSize = 20;\ncanvas.StrokeColor = Colors.Blue;\ncanvas.StrokeLineJoin = LineJoin.Round;\ncanvas.DrawPath(path);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Window Lifecycle Events in App Class (net-maui-9.0+)\nDESCRIPTION: This code snippet demonstrates how to subscribe to the `Created` lifecycle event of a `Window` in the `App` class by overriding the `CreateWindow` method. It calls the base `CreateWindow` method, subscribes to the `Created` event, and returns the window. This enables custom logic to be executed when the window is created.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n        }\n\n        protected override Window CreateWindow(IActivationState activationState)\n        {\n            Window window = base.CreateWindow(activationState);\n\n            window.Created += (s, e) =>\n            {\n                // Custom logic\n            };\n\n            return window;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activity Label C#\nDESCRIPTION: This example demonstrates how to specify the label for an activity's title bar using the `Label` property of the `ActivityAttribute`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\n\nnamespace MyMauiApp;\n\n[Activity (Label=\"My Maui App\")]\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Custom WebChromeClient for WebView Permissions with C#\nDESCRIPTION: This C# code shows how to implement a custom `WebChromeClient` to handle permission requests from a WebView on Android. It intercepts camera permission requests and grants or denies them based on whether the .NET MAUI app has camera permission.  This class extends `MauiWebChromeClient` and overrides `OnPermissionRequest`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Webkit;\nusing Microsoft.Maui.Handlers;\nusing Microsoft.Maui.Platform;\n\nnamespace MauiAppWebViewHandlers.Platforms.Android;\n\ninternal class MyWebChromeClient: MauiWebChromeClient\n{\n    public MyWebChromeClient(IWebViewHandler handler) : base(handler)\n    {\n\n    }\n\n    public override void OnPermissionRequest(PermissionRequest request)\n    {\n        // Process each request\n        foreach (var resource in request.GetResources())\n        {\n            // Check if the web page is requesting permission to the camera\n            if (resource.Equals(PermissionRequest.ResourceVideoCapture, StringComparison.OrdinalIgnoreCase))\n            {\n                // Get the status of the .NET MAUI app's access to the camera\n                PermissionStatus status = Permissions.CheckStatusAsync<Permissions.Camera>().Result;\n\n                // Deny the web page's request if the app's access to the camera is not \"Granted\"\n                if (status != PermissionStatus.Granted)\n                    request.Deny();\n                else\n                    request.Grant(request.GetResources());\n\n                return;\n            }\n        }\n\n        base.OnPermissionRequest(request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Row and Column Spacing in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `RowSpacing` and `ColumnSpacing` properties of a Grid to create space between rows and columns. The values are specified in device-independent units. This snippet resides within a ContentPage definition and sets the title of the page as well.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"GridDemos.Views.XAML.GridSpacingPage\"\n             Title=\"Grid spacing demo\">\n    <Grid RowSpacing=\"6\"\n          ColumnSpacing=\"6\">\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add Intent Filter to MainActivity on Android\nDESCRIPTION: This code snippet shows how to add the `OnResume` and `OnNewIntent` overrides to the `MainActivity` class in the _Platforms/Android/MainActivity.cs_ file, along with the `IntentFilter` attribute.  This allows the Android app to receive and process intents related to app actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-actions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[IntentFilter(\n\t\tnew[] { Intent.ActionView },\n\t\tCategories = new[] {\n\t\t\tIntent.CategoryDefault,\n\t\t\tIntent.CategoryBrowsable\n\t\t},\n\t\tDataScheme = \"myapp\")]\npublic class MainActivity : MauiAppCompatActivity\n{\n\tprotected override void OnResume()\n\t{\n\t\tbase.OnResume();\n\n\t\tAppActions.OnResume(Intent);\n\t}\n\n\tprotected override void OnNewIntent(Intent intent)\n\t{\n\t\tbase.OnNewIntent(intent);\n\n\t\tAppActions.OnNewIntent(intent);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Request Full Accuracy Location (MAUI C# iOS)\nDESCRIPTION: This C# code snippet shows how to request full accuracy location data on iOS. It sets the RequestFullAccuracy property of the GeolocationRequest to true. This is relevant starting from iOS 14 where users can restrict the app from detecting location with full accuracy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/SensorsPage.xaml.cs\" id=\"geolocation_request_full\":::\n```\n\n----------------------------------------\n\nTITLE: Create Geometries with Multiple PathFigures in .NET MAUI\nDESCRIPTION: This XAML snippet showcases the creation of even more complex geometries by utilizing multiple PathFigure objects within a single PathGeometry. Each PathFigure can contain multiple PathSegment objects, allowing for the creation of disconnected shapes or shapes with multiple contours. The example draws the word \"Hello\" using various segment types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Red\"\n      StrokeThickness=\"12\"\n      StrokeLineJoin=\"Round\">\n    <Path.Data>\n        <PathGeometry>\n            <!-- H -->\n            <PathFigure StartPoint=\"0,0\">\n                <LineSegment Point=\"0,100\" />\n            </PathFigure>\n            <PathFigure StartPoint=\"0,50\">\n                <LineSegment Point=\"50,50\" />\n            </PathFigure>\n            <PathFigure StartPoint=\"50,0\">\n                <LineSegment Point=\"50,100\" />\n            </PathFigure>\n\n            <!-- E -->\n            <PathFigure StartPoint=\"125, 0\">\n                <BezierSegment Point1=\"60, -10\"\n                               Point2=\"60, 60\"\n                               Point3=\"125, 50\" />\n                <BezierSegment Point1=\"60, 40\"\n                               Point2=\"60, 110\"\n                               Point3=\"125, 100\" />\n            </PathFigure>\n\n            <!-- L -->\n            <PathFigure StartPoint=\"150, 0\">\n                <LineSegment Point=\"150, 100\" />\n                <LineSegment Point=\"200, 100\" />\n            </PathFigure>\n\n            <!-- L -->\n            <PathFigure StartPoint=\"225, 0\">\n                <LineSegment Point=\"225, 100\" />\n                <LineSegment Point=\"275, 100\" />\n            </PathFigure>\n\n            <!-- O -->\n            <PathFigure StartPoint=\"300, 50\">\n                <ArcSegment Size=\"25, 50\"\n                            Point=\"300, 49.9\"\n                            IsLargeArc=\"True\" />\n            </PathFigure>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Implementing ClearCommand\nDESCRIPTION: This C# snippet implements the ClearCommand. When executed, it sets the Entry property back to \"0\" and calls RefreshCanExecutes() to update the enabled/disabled state of the BackspaceCommand and DigitCommand.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DecimalKeypadViewModel : INotifyPropertyChanged\n{\n    ···\n    public DecimalKeypadViewModel()\n    {\n        ClearCommand = new Command(\n            execute: () =>\n            {\n                Entry = \"0\";\n                RefreshCanExecutes();\n            });\n        ···\n    }\n\n    void RefreshCanExecutes()\n    {\n        ((Command)BackspaceCommand).ChangeCanExecute();\n        ((Command)DigitCommand).ChangeCanExecute();\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Create Animal Group List C#\nDESCRIPTION: This C# code initializes an empty `List<AnimalGroup>` named `Animals`.  This list will hold the grouped data that will be displayed in the CollectionView.  The data is structured as a list of animal groups.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic List<AnimalGroup> Animals { get; private set; } = new List<AnimalGroup>();\n```\n\n----------------------------------------\n\nTITLE: Implementing the CreateCommand in C#\nDESCRIPTION: This C# code defines the `CreateCommand` property used in the `x:Type` XAML example. The command takes a `Type` as a parameter, creates an instance of that type using `Activator.CreateInstance`, and adds the newly created view to the `StackLayout`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class TypeDemoPage : ContentPage\n{\n    public ICommand CreateCommand { get; private set; }\n\n    public TypeDemoPage()\n    {\n        InitializeComponent();\n\n        CreateCommand = new Command<Type>((Type viewType) =>\n        {\n            View view = (View)Activator.CreateInstance(viewType);\n            view.VerticalOptions = LayoutOptions.Center;\n            stackLayout.Add(view);\n        });\n\n        BindingContext = this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting font attributes in .NET MAUI with C#\nDESCRIPTION: This C# snippet demonstrates how to programmatically set font attributes such as Italic and Bold using the `FontAttributes` property of a `Label` control in a .NET MAUI application. It showcases how to apply single or combined font styles to text elements within the app's user interface.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label1 = new Label\n{\n    Text = \"Italics\",\n    FontAttributes = FontAttributes.Italic\n};\n\nLabel label2 = new Label\n{\n    Text = \"Bold and italics\",\n    FontAttributes = FontAttributes.Bold | FontAttributes.Italic\n};    \n```\n\n----------------------------------------\n\nTITLE: Configure App Actions during Startup in MauiProgram.cs\nDESCRIPTION: This code demonstrates how to configure app actions at app startup using the `ConfigureEssentials` method on the `MauiAppBuilder` object. It creates two app actions with specified IDs, titles, subtitles and icons, and registers a delegate to be called when the user invokes any of the app actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-actions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t\tfonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n\t\t\t});\n\n\t\tbuilder.ConfigureEssentials(essentials =>\n\t\t{\n\t\t\tessentials\n\t\t\t\t.AddAppAction(\"company_info\", \"Company Info\", icon: \"icon_company\")\n\t\t\t\t.AddAppAction(\"qr_code\", \"Scan QR Code\")\n\t\t\t\t.OnAppAction(App.HandleAppActions);\n\t\t});\n\n#if DEBUG\n\t\tbuilder.Logging.AddDebug();\n#endif\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Open/Close Flyout Programmatically C#\nDESCRIPTION: This C# snippet demonstrates how to open or close the flyout programmatically by setting the `Shell.FlyoutIsPresented` property. Setting it to `false` closes the flyout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nShell.Current.FlyoutIsPresented = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Base Address for Web Service (C#)\nDESCRIPTION: Defines the base address for accessing a local web service, dynamically switching between the Android emulator address and localhost based on the platform. This allows the .NET MAUI app to communicate with a local web service without hardcoding the address.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string BaseAddress =\n    DeviceInfo.Platform == DevicePlatform.Android ? \"http://10.0.2.2:5000\" : \"http://localhost:5000\";\npublic static string TodoItemsUrl = $\"{BaseAddress}/api/todoitems/\";\n```\n\n----------------------------------------\n\nTITLE: Complete Note Model C#\nDESCRIPTION: This is the complete `Note` model, including properties for filename, text, and date, along with methods for saving, deleting, loading a single note, loading all notes, and a constructor for initializing new instances. It provides a comprehensive set of functionalities for managing note data within the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Notes.Models;\n\npublic partial class Note\n{\n    public string Filename { get; set; }\n    public string Text { get; set; }\n    public DateTime Date { get; set; }\n\n    public Note()\n    {\n        Filename = $\"{Path.GetRandomFileName()}.notes.txt\";\n        Date = DateTime.Now;\n        Text = \"\";\n    }\n\n    public async Task Save()\n    {\n        try\n        {\n            string filepath = Path.Combine(FileSystem.AppDataDirectory, Filename);\n            await File.WriteAllTextAsync(filepath, Text);\n        }\n        catch (Exception ex)\n        {\n            // Basic error handling.  Best practice would be to dispatch\n            // this to the caller to handle.\n            Console.WriteLine($\"Save note failed: {ex.Message}\");\n        }\n    }\n    public void Delete()\n    {\n        try\n        {\n            string filepath = Path.Combine(FileSystem.AppDataDirectory, Filename);\n            if (File.Exists(filepath))\n            {\n                File.Delete(filepath);\n            }\n        }\n        catch (Exception ex)\n        {\n            // Basic error handling.  Best practice would be to dispatch\n            // this to the caller to handle.\n            Console.WriteLine($\"Delete note failed: {ex.Message}\");\n        }\n    }\n    public static async Task<Note> Load(string filename)\n    {\n        string filepath = Path.Combine(FileSystem.AppDataDirectory, filename);\n\n        if (!File.Exists(filepath))\n        {\n            throw new FileNotFoundException(\"Note file not found.\", filename);\n        }\n\n        Note note = new() {\n            Filename = filename,\n            Text = await File.ReadAllTextAsync(filepath),\n            Date = File.GetLastWriteTime(filepath)\n        };\n        return note;\n    }\n    public static IEnumerable<Note> LoadAll()\n    {\n        // Get the folder where the notes are stored.\n        string appDataPath = FileSystem.AppDataDirectory;\n\n        // Use .NET LINQ to load *.notes.txt files.\n        return Directory\n\n                // Select the file names from the directory\n                .EnumerateFiles(appDataPath, \"*.notes.txt\")\n\n                // Each file name is used to load a note\n                .Select(filename =>\n                {\n                    return Note.Load(Path.GetFileName(filename)).Result;\n                })\n\n                // With the notes loaded, order them by date\n                .OrderByDescending(note => note.Date);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle CheckBox CheckedChanged event with lambda\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the CheckedChanged event of a CheckBox using a lambda expression in C#. This provides a concise way to respond to changes in the CheckBox's state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nCheckBox checkBox = new CheckBox { ... };\ncheckBox.CheckedChanged += (sender, e) =>\n{\n    // Perform required operation after examining e.Value\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Constants in C#\nDESCRIPTION: This C# code defines constants used for SQLite database configuration, including the database filename, open flags for read/write, creation, and multithreaded access, and the database path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Constants\n{\n    public const string DatabaseFilename = \"TodoSQLite.db3\";\n\n    public const SQLite.SQLiteOpenFlags Flags =\n        // open the database in read/write mode\n        SQLite.SQLiteOpenFlags.ReadWrite |\n        // create the database if it doesn't exist\n        SQLite.SQLiteOpenFlags.Create |\n        // enable multi-threaded database access\n        SQLite.SQLiteOpenFlags.SharedCache;\n\n    public static string DatabasePath =>\n        Path.Combine(FileSystem.AppDataDirectory, DatabaseFilename);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TimePicker Update Mode in C#\nDESCRIPTION: This C# snippet uses the fluent API to set the `UpdateMode` for a `TimePicker` to `WhenFinished`. This means the time will only be selected after the user taps the 'Done' button on iOS. It leverages the `On<iOS>()` extension method to target the iOS platform specifically and requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/timepicker-selection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\ntimePicker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Grids in C#\nDESCRIPTION: This C# code creates a ContentPage with nested Grid layouts programmatically. It demonstrates how to define row definitions, create and add views to the Grids, and set the Grid.Row attached property to position the elements within the nested Grid. Data binding is used to update Labels based on Slider values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class ColorSlidersGridPage : ContentPage\n{\n    BoxView boxView;\n    Slider redSlider;\n    Slider greenSlider;\n    Slider blueSlider;\n\n    public ColorSlidersGridPage()\n    {\n        // Create an implicit style for the Labels\n        Style labelStyle = new Style(typeof(Label))\n        {\n            Setters =\n            {\n                new Setter { Property = Label.HorizontalTextAlignmentProperty, Value = TextAlignment.Center }\n            }\n        };\n        Resources.Add(labelStyle);\n\n        // Root page layout\n        Grid rootGrid = new Grid\n        {\n            RowDefinitions =\n            {\n                new RowDefinition { HeightRequest = 500 },\n                new RowDefinition()\n            }\n        };\n\n        boxView = new BoxView { Color = Colors.Black };\n        rootGrid.Add(boxView);\n\n        // Child page layout\n        Grid childGrid = new Grid\n        {\n            Margin = new Thickness(20),\n            RowDefinitions =\n            {\n                new RowDefinition(),\n                new RowDefinition(),\n                new RowDefinition(),\n                new RowDefinition(),\n                new RowDefinition(),\n                new RowDefinition()\n            }\n        };\n\n        DoubleToIntConverter doubleToInt = new DoubleToIntConverter();\n\n        redSlider = new Slider();\n        redSlider.ValueChanged += OnSliderValueChanged;\n        childGrid.Add(redSlider);\n\n        Label redLabel = new Label();\n        redLabel.SetBinding(Label.TextProperty, Binding.Create(static (Slider slider) => slider.Value, converter: doubleToInt, converterParameter: \"255\", stringFormat: \"Red = {0}\", source: redSlider));\n        Grid.SetRow(redLabel, 1);\n        childGrid.Add(redLabel);\n\n        greenSlider = new Slider();\n        greenSlider.ValueChanged += OnSliderValueChanged;\n        Grid.SetRow(greenSlider, 2);\n        childGrid.Add(greenSlider);\n\n        Label greenLabel = new Label();\n        greenLabel.SetBinding(Label.TextProperty, Binding.Create(static (Slider slider) => slider.Value, converter: doubleToInt, converterParameter: \"255\", stringFormat: \"Green = {0}\", source: greenSlider));\n        Grid.SetRow(greenLabel, 3);\n        childGrid.Add(greenLabel);\n\n        blueSlider = new Slider();\n        blueSlider.ValueChanged += OnSliderValueChanged;\n        Grid.SetRow(blueSlider, 4);\n        childGrid.Add(blueSlider);\n\n        Label blueLabel = new Label();\n        blueLabel.SetBinding(Label.TextProperty, Binding.Create(static (Slider slider) => slider.Value, converter: doubleToInt, converterParameter: \"255\", stringFormat: \"Blue = {0}\", source: blueSlider));\n        Grid.SetRow(blueLabel, 5);\n        childGrid.Add(blueLabel);\n\n        // Place the child Grid in the root Grid\n        rootGrid.Add(childGrid, 0, 1);\n\n        Title = \"Nested Grids demo\";\n        Content = rootGrid;\n    }\n\n    void OnSliderValueChanged(object sender, ValueChangedEventArgs e)\n    {\n        boxView.Color = new Color(redSlider.Value, greenSlider.Value, blueSlider.Value);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dispose Override: Container Subviews Removal - C#\nDESCRIPTION: This example shows how to override the `Dispose` method in a container class (`MyContainer`) to remove all subviews, thereby breaking potential strong references. This assists in preventing memory leaks by releasing resources held by the container.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nclass MyContainer : UIView\n{\n    public override void Dispose()\n    {\n        // Brute force, remove everything\n        foreach (var view in Subviews)\n        {\n              view.RemoveFromSuperview();\n        }\n        base.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Defaults API Reason to Privacy Manifest\nDESCRIPTION: This XML snippet demonstrates how to add the NSPrivacyAccessedAPICategoryUserDefaults API category with the reason code CA92.1 to the NSPrivacyAccessedAPITypes array in the privacy manifest. This entry is necessary if your .NET MAUI app uses the Preferences API or directly accesses the NSUserDefaults API.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/privacy-manifest.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>C617.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategorySystemBootTime</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>35F9.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryDiskSpace</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>E174.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>CA92.1</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Text Alignment with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the vertical text alignment of a Label to end using the `-maui-vertical-text-alignment` property. Possible values are `start`, `center`, `end`, or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_72\n\nLANGUAGE: css\nCODE:\n```\n-maui-vertical-text-alignment: end;\n```\n\n----------------------------------------\n\nTITLE: Setting FlyoutLayoutBehavior in XAML\nDESCRIPTION: This code snippet demonstrates how to set the `FlyoutLayoutBehavior` property of a `FlyoutPage` in XAML. The `FlyoutLayoutBehavior` property controls how the flyout and detail pages are displayed based on the device form factor and orientation. In this example, it's set to `Split`, which means the flyout and detail pages will be displayed side-by-side on larger screens.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/flyoutpage.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<FlyoutPage ...\n            FlyoutLayoutBehavior=\"Split\">\n  ...\n</FlyoutPage>\n```\n\n----------------------------------------\n\nTITLE: Base Behavior Class Definition C#\nDESCRIPTION: This snippet shows the basic structure for creating a .NET MAUI behavior by inheriting from the `Behavior<View>` class and overriding the `OnAttachedTo` and `OnDetachingFrom` methods. These methods are used for setup and cleanup when the behavior is attached or detached from a control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBehavior : Behavior<View>\n{\n    protected override void OnAttachedTo(View bindable)\n    {\n        base.OnAttachedTo(bindable);\n        // Perform setup\n    }\n\n    protected override void OnDetachingFrom(View bindable)\n    {\n        base.OnDetachingFrom(bindable);\n        // Perform clean up\n    }\n\n    // Behavior implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Drag and Drop iOS/Mac Catalyst C#\nDESCRIPTION: This C# snippet shows how to handle drag and drop events on iOS and Mac Catalyst when dragging from another application into the .NET MAUI application.  It accesses the `DropSession` from the `PlatformArgs` and iterates through the `UIDragItem` objects to retrieve file paths using the `LoadItemAsync` helper method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n#if IOS || MACCATALYST\nusing UIKit;\nusing Foundation;\n#endif\n\nasync void OnDropGestureRecognizerDrop(object? sender, DropEventArgs e)\n{\n    var filePaths = new List<string>();\n\n#if IOS || MACCATALYST\n    var session = e.PlatformArgs?.DropSession;\n    if (session == null)\n        return;\n\n    foreach (UIDragItem item in session.Items)\n    {\n        var result = await LoadItemAsync(item.ItemProvider, item.ItemProvider.RegisteredTypeIdentifiers.ToList());\n        if (result is not null)\n            filePaths.Add(result.FileUrl?.Path!);\n    }\n    foreach (var item in filePaths)\n    {\n        Debug.WriteLine($\"Path: {item}\");\n    }\n\n    static async Task<LoadInPlaceResult?> LoadItemAsync(NSItemProvider itemProvider, List<string> typeIdentifiers)\n    {\n        if (typeIdentifiers is null || typeIdentifiers.Count == 0)\n            return null;\n\n        var typeIdent = typeIdentifiers.First();\n\n        if (itemProvider.HasItemConformingTo(typeIdent))\n            return await itemProvider.LoadInPlaceFileRepresentationAsync(typeIdent);\n\n        typeIdentifiers.Remove(typeIdent);\n        return await LoadItemAsync(itemProvider, typeIdentifiers);\n    }\n#endif\n\n    string filePath = filePaths.FirstOrDefault();\n\n    // Process the dropped file\n}\n```\n\n----------------------------------------\n\nTITLE: BoxView Color Set with StaticResource\nDESCRIPTION: This snippet demonstrates how to use the `StaticResource` markup extension to set the `Color` property of a `BoxView` from a value stored in a resource dictionary. This allows for centralized management of style properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<BoxView Color=\"{StaticResource themeColor}\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with HttpClient.DeleteAsync in C#\nDESCRIPTION: This code snippet demonstrates how to delete a todo item from a REST web service using the HttpClient.DeleteAsync method. It constructs a URI from the item's ID and sends a DELETE request. The response's IsSuccessStatusCode property is checked to determine if the deletion was successful. Exceptions are caught and logged in case of failure. The _client object should be an instance of HttpClient.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/rest.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task DeleteTodoItemAsync(string id)\n{\n    Uri uri = new Uri(string.Format(Constants.RestUrl, id));\n\n    try\n    {\n        HttpResponseMessage response = await _client.DeleteAsync(uri);\n        if (response.IsSuccessStatusCode)\n            Debug.WriteLine(@\"\\tTodoItem successfully deleted.\");\n    }\n    catch (Exception ex)\n    {\n        Debug.WriteLine(@\"\\tERROR {0}\", ex.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Frame appearance in XAML\nDESCRIPTION: This XAML snippet shows how to customize the appearance of a Frame by setting the BorderColor and CornerRadius properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/frame.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Frame BorderColor=\"Gray\"\n       CornerRadius=\"10\">\n  <Label Text=\"Frame wrapped around a Label\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Creating MauiVideoPlayer with C#\nDESCRIPTION: This code snippet shows the creation of the `MauiVideoPlayer` class, which encapsulates the `MediaPlayerElement` on Windows.  It derives from `Grid` to automatically size the `MediaPlayerElement` to fill the available space. The constructor adds the `MediaPlayerElement` as a child to the `Grid`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        ...\n\n        public MauiVideoPlayer(Video video)\n        {\n            _video = video;\n            _mediaPlayerElement = new MediaPlayerElement();\n            this.Children.Add(_mediaPlayerElement);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Drag and Drop Windows C#\nDESCRIPTION: This C# snippet demonstrates handling drag and drop events on Windows when dragging from another application to the .NET MAUI application. It accesses the `DragEventArgs` from the `PlatformArgs`, retrieves `StorageItems` and extracts file paths if they are available.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n#if WINDOWS\nusing Windows.ApplicationModel.DataTransfer;\nusing Windows.Storage;\n#endif\n\nasync void OnDropGestureRecognizerDrop(object? sender, DropEventArgs e)\n{\n    var filePaths = new List<string>();\n\n#if WINDOWS\n    if (e.PlatformArgs is not null && e.PlatformArgs.DragEventArgs.DataView.Contains(StandardDataFormats.StorageItems))\n    {\n        var items = await e.PlatformArgs.DragEventArgs.DataView.GetStorageItemsAsync();\n        if (items.Any())\n        {\n            foreach (var item in items)\n            {\n                if (item is StorageFile file)\n                    filePaths.Add(item.Path);\n            }\n        }\n    }\n#endif\n\n    string filePath = filePaths.FirstOrDefault();\n\n    // Process the dropped file\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a New Window in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to open a new window in a .NET MAUI application using the `OpenWindow` method on the `Application` object. This allows for creating multi-window applications on supported platforms.  A `MyPage` instance is used as the content of the new window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nWindow secondWindow = new Window(new MyPage());\nApplication.Current?.OpenWindow(secondWindow);\n```\n\n----------------------------------------\n\nTITLE: Use TypeConverter for Implicit Conversion Replacement\nDESCRIPTION: This code demonstrates how to define a `TypeConverter` for a custom type (`SizeRequest`) to handle type conversions, particularly when full trimming is enabled. The `TypeConverter` provides methods for converting from and to other types (in this case, `Size`), ensuring that the conversion logic is preserved even if implicit conversion operators are removed by the trimmer. The `TypeConverterAttribute` associates the converter with the `SizeRequest` type.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/trimming.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\n\nnamespace MyMauiApp;\n\n[TypeConverter(typeof(SizeRequestTypeConverter))]\npublic struct SizeRequest : IEquatable<SizeRequest>\n{\n    public Size Request { get; set; }\n    public Size Minimum { get; set; }\n\n    public SizeRequest(Size request, Size minimum)\n    {\n        Request = request;\n        Minimum = minimum;\n    }\n\n    public SizeRequest(Size request)\n    {\n        Request = request;\n        Minimum = request;\n    }\n\n    public override string ToString()\n    {\n        return string.Format(\"{{Request={0} Minimum={1}}}\", Request, Minimum);\n    }\n\n    public bool Equals(SizeRequest other) => Request.Equals(other.Request) && Minimum.Equals(other.Minimum);\n\n    public static implicit operator SizeRequest(Size size) => new SizeRequest(size);\n    public static implicit operator Size(SizeRequest size) => size.Request;\n    public override bool Equals(object? obj) => obj is SizeRequest other && Equals(other);\n    public override int GetHashCode() => Request.GetHashCode() ^ Minimum.GetHashCode();\n    public static bool operator ==(SizeRequest left, SizeRequest right) => left.Equals(right);\n    public static bool operator !=(SizeRequest left, SizeRequest right) => !(left == right);\n\n    private sealed class SizeRequestTypeConverter : TypeConverter\n    {\n        public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType)\n            => sourceType == typeof(Size);\n\n        public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value)\n            => value switch\n            {\n                Size size => (SizeRequest)size,\n                _ => throw new NotSupportedException()\n            };\n\n        public override bool CanConvertTo(ITypeDescriptorContext? context, [NotNullWhen(true)] Type? destinationType)\n            => destinationType == typeof(Size);\n\n        public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)\n        {\n            if (value is SizeRequest sizeRequest)\n            {\n                if (destinationType == typeof(Size))\n                    return (Size)sizeRequest;\n            }\n            throw new NotSupportedException();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Map in .NET MAUI\nDESCRIPTION: This code snippet shows how to initialize the Microsoft.Maui.Controls.Maps NuGet package by calling the UseMauiMaps() method on the MauiAppBuilder object in the CreateMauiApp method of your MauiProgram class. It is a required step before using the Map control in your .NET MAUI app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            })\n            .UseMauiMaps();\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ToolbarItem Clicked Event in XAML\nDESCRIPTION: This XAML snippet demonstrates attaching an event handler to the Clicked event of a ToolbarItem. When the ToolbarItem is clicked, the OnItemClicked event handler will be executed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/toolbaritem.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ToolbarItem ...\n             Clicked=\"OnItemClicked\" />\n```\n\n----------------------------------------\n\nTITLE: Define AnimalGroup Class C#\nDESCRIPTION: This C# code defines the `AnimalGroup` class, which inherits from `List<Animal>`.  It includes a `Name` property to represent the group name and a constructor to initialize the group with a name and a list of animals. This class models a group of animals for the CollectionView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class AnimalGroup : List<Animal>\n{\n    public string Name { get; private set; }\n\n    public AnimalGroup(string name, List<Animal> animals) : base(animals)\n    {\n        Name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Style to Entry XAML\nDESCRIPTION: This snippet shows how to apply a defined style (NumericValidationStyle) to an Entry control using the StaticResource markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Placeholder=\"Enter a System.Double\" Style=\"{StaticResource NumericValidationStyle}\">\n```\n\n----------------------------------------\n\nTITLE: Request Notification Permission at Runtime\nDESCRIPTION: This C# code snippet shows how to request the notification permission from the user at runtime using the `Permissions.RequestAsync` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPermissionStatus status = await Permissions.RequestAsync<NotificationPermission>();\n```\n\n----------------------------------------\n\nTITLE: Style-based Behavior with Attached Property C#\nDESCRIPTION: This snippet shows a behavior with an attached property, allowing it to be applied via a style.  The AttachBehavior property controls adding and removing the behavior from the associated control through the `OnAttachBehaviorChanged` callback.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NumericValidationStyleBehavior : Behavior<Entry>\n{\n    public static readonly BindableProperty AttachBehaviorProperty =\n        BindableProperty.CreateAttached(\"AttachBehavior\", typeof(bool), typeof(NumericValidationStyleBehavior), false, propertyChanged: OnAttachBehaviorChanged);\n\n    public static bool GetAttachBehavior(BindableObject view)\n    {\n        return (bool)view.GetValue(AttachBehaviorProperty);\n    }\n\n    public static void SetAttachBehavior(BindableObject view, bool value)\n    {\n        view.SetValue(AttachBehaviorProperty, value);\n    }\n\n    static void OnAttachBehaviorChanged(BindableObject view, object oldValue, object newValue)\n    {\n        Entry entry = view as Entry;\n        if (entry == null)\n        {\n            return;\n        }\n\n        bool attachBehavior = (bool)newValue;\n        if (attachBehavior)\n        {\n            entry.Behaviors.Add(new NumericValidationStyleBehavior());\n        }\n        else\n        {\n            Behavior toRemove = entry.Behaviors.FirstOrDefault(b => b is NumericValidationStyleBehavior);\n            if (toRemove != null)\n            {\n                entry.Behaviors.Remove(toRemove);\n            }\n        }\n    }\n\n    protected override void OnAttachedTo(Entry entry)\n    {\n        entry.TextChanged += OnEntryTextChanged;\n        base.OnAttachedTo(entry);\n    }\n\n    protected override void OnDetachingFrom(Entry entry)\n    {\n        entry.TextChanged -= OnEntryTextChanged;\n        base.OnDetachingFrom(entry);\n    }\n\n    void OnEntryTextChanged(object sender, TextChangedEventArgs args)\n    {\n        double result;\n        bool isValid = double.TryParse(args.NewTextValue, out result);\n        ((Entry)sender).TextColor = isValid ? Colors.Black : Colors.Red;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rows and Columns in XAML\nDESCRIPTION: This code snippet demonstrates how to define rows and columns in a .NET MAUI Grid using XAML.  It uses the Grid.RowDefinitions and Grid.ColumnDefinitions properties to specify the height and width of rows and columns, respectively. The `Height` property of `RowDefinition` and `Width` property of `ColumnDefinition` are defined using `GridLength` with `GridUnitType` values like `Star` and `Absolute`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"GridDemos.Views.XAML.BasicGridPage\"\n             Title=\"Basic Grid demo\">\n   <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"2*\" />\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"100\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"*\" />\n            <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Opening the phone dialer with IPhoneDialer.Open (C#)\nDESCRIPTION: This code snippet shows how to open the phone dialer using the IPhoneDialer interface in .NET MAUI. It calls the Open method with a phone number, which automatically formats the number based on the country code if specified. The IPhoneDialer.Default property is used to get the default implementation of the interface.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/phone-dialer.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (PhoneDialer.Default.IsSupported)\n{\n    PhoneDialer.Default.Open(\"911\");\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing Image in .NET MAUI\nDESCRIPTION: This code shows how to resize an image in .NET MAUI using the Resize method. It loads an image from an embedded resource stream and resizes it to specific dimensions using a stretch resize mode. The source image is disposed after resizing, and the new resized image is drawn onto a canvas.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/images.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Graphics.Platform;\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    IImage newImage = image.Resize(100, 60, ResizeMode.Stretch, true);\n    canvas.DrawImage(newImage, 10, 10, newImage.Width, newImage.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: Set SupportedOSPlatformVersion in .csproj - C#\nDESCRIPTION: This code snippet sets the `SupportedOSPlatformVersion` for iOS in the project file (.csproj) to 13.0. This ensures that the app targets a compatible version of iOS that supports the necessary push notification features. This setting affects how the app is built and deployed to iOS devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\n<SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'\">13.0</SupportedOSPlatformVersion>\n```\n\n----------------------------------------\n\nTITLE: Customize Switch Appearance in XAML (net-maui-8.0 <=net-maui-9.0)\nDESCRIPTION: This code snippet shows how to customize the appearance of a Switch in XAML by setting the OnColor and ThumbColor properties.  OnColor defines the color when the switch is toggled on, and ThumbColor defines the color of the switch thumb.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch OnColor=\"Orange\"\n        ThumbColor=\"Green\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Item Resizing in CarouselView (C#)\nDESCRIPTION: This C# code snippet demonstrates how to dynamically resize an Image and its parent Border within a CarouselView when the Image is tapped. The `OnImageTapped` event handler toggles the HeightRequest and WidthRequest properties of the Image between 150 and 200, and the HeightRequest of the parent Border between 360 and 410.  It requires the `sender` object to be cast to an `Image` and accesses its parent's parent to reach the `Border`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnImageTapped(object sender, EventArgs e)\n{\n    Image image = sender as Image;\n    image.HeightRequest = image.WidthRequest = image.HeightRequest.Equals(150) ? 200 : 150;\n    Border border = ((Border)image.Parent.Parent);\n    border.HeightRequest = border.HeightRequest.Equals(360) ? 410 : 360;\n}\n```\n\n----------------------------------------\n\nTITLE: Closing SwipeView Programmatically C#\nDESCRIPTION: This code snippet demonstrates how to programmatically close a .NET MAUI SwipeView using the `Close` method.  The `Close` method can optionally take a boolean to determine if the close should be animated.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nswipeView.Close();\n```\n\n----------------------------------------\n\nTITLE: Holy Grail Layout with FlexLayout in .NET MAUI XAML\nDESCRIPTION: This XAML code demonstrates how to implement the 'holy grail' web design layout using nested FlexLayouts in a .NET MAUI application. It creates a header, footer, content, navigation, and aside sections. The example uses the Direction, Grow, Basis, and Order properties of the FlexLayout to arrange the elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"FlexLayoutDemos.Views.HolyGrailLayoutPage\"\n             Title=\"Holy Grail Layout\">\n\n    <FlexLayout Direction=\"Column\">\n\n        <!-- Header -->\n        <Label Text=\"HEADER\"\n               FontSize=\"18\"\n               BackgroundColor=\"Aqua\"\n               HorizontalTextAlignment=\"Center\" />\n\n        <!-- Body -->\n        <FlexLayout FlexLayout.Grow=\"1\">\n\n            <!-- Content -->\n            <Label Text=\"CONTENT\"\n                   FontSize=\"18\"\n                   BackgroundColor=\"Gray\"\n                   HorizontalTextAlignment=\"Center\"\n                   VerticalTextAlignment=\"Center\"\n                   FlexLayout.Grow=\"1\" />\n\n            <!-- Navigation items-->\n            <BoxView FlexLayout.Basis=\"50\"\n                     FlexLayout.Order=\"-1\"\n                     Color=\"Blue\" />\n\n            <!-- Aside items -->\n            <BoxView FlexLayout.Basis=\"50\"\n                     Color=\"Green\" />\n\n        </FlexLayout>\n\n        <!-- Footer -->\n        <Label Text=\"FOOTER\"\n               FontSize=\"18\"\n               BackgroundColor=\"Pink\"\n               HorizontalTextAlignment=\"Center\" />\n    </FlexLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Registering fonts in .NET MAUI with C#\nDESCRIPTION: This code snippet demonstrates how to register custom fonts (TTF or OTF) for use in a .NET MAUI application. It uses the `ConfigureFonts` method on the `MauiAppBuilder` object and adds fonts using the `AddFont` method, specifying the font filename and an optional alias. The fonts are then accessible within the application by either the font name or alias.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"Lobster-Regular.ttf\", \"Lobster\");\n                });\n\n            return builder.Build();\n        }\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Create a Border with RoundRectangle in C#\nDESCRIPTION: This C# code creates a Border control with a RoundRectangle stroke shape. It sets properties such as Stroke, Background, StrokeThickness, Padding, HorizontalOptions, and StrokeShape (as a RoundRectangle object). The Border's Content is a Label with specified text, color, font size, and attributes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/border.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Shapes;\nusing GradientStop = Microsoft.Maui.Controls.GradientStop;\n...\n\nBorder border = new Border\n{\n    Stroke = Color.FromArgb(\"#C49B33\"),\n    Background = Color.FromArgb(\"#2B0B98\"),\n    StrokeThickness = 4,\n    Padding = new Thickness(16, 8),\n    HorizontalOptions = LayoutOptions.Center,\n    StrokeShape = new RoundRectangle\n    {\n        CornerRadius = new CornerRadius(40, 0, 0, 40)\n    },\n    Content = new Label\n    {\n        Text = \".NET MAUI\",\n        TextColor = Colors.White,\n        FontSize = 18,\n        FontAttributes = FontAttributes.Bold\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating .NET MAUI App with Sample Content using dotnet CLI\nDESCRIPTION: This dotnet CLI command creates a new .NET MAUI App project named 'MyProject' that includes sample content. The `--sample-content` or `-sc` option includes a fully functional todo app, including controls from the Syncfusion Toolkit for .NET MAUI to visualize data and persist it to a local database based on SQLite.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_20\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new maui --sample-content -n MyProject\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies for WebView - C#\nDESCRIPTION: This code snippet demonstrates how to set cookies on a WebView so that they are sent with the web request to the specified URL. It creates a CookieContainer, adds a Cookie object to it with specified name, value, domain, and path, and then sets the CookieContainer as the value of the WebView.Cookies bindable property.  The WebView.Source is also set to load the corresponding URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Net;\n\nCookieContainer cookieContainer = new CookieContainer();\nUri uri = new Uri(\"https://learn.microsoft.com/dotnet/maui\", UriKind.RelativeOrAbsolute);\n\nCookie cookie = new Cookie\n{\n    Name = \"DotNetMAUICookie\",\n    Expires = DateTime.Now.AddDays(1),\n    Value = \"My cookie\",\n    Domain = uri.Host,\n    Path = \"/\"\n};\ncookieContainer.Add(uri, cookie);\nwebView.Cookies = cookieContainer;\nwebView.Source = new UrlWebViewSource { Url = uri.ToString() };\n```\n\n----------------------------------------\n\nTITLE: Modifying CreateMauiApp to Register Services and Views - C#\nDESCRIPTION: This method modifies the `CreateMauiApp` method to call the `RegisterServices` and `RegisterViews` extension methods. This ensures that the required services and views are registered with the dependency injection container during app startup.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\npublic static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            })\n            .RegisterServices()\n            .RegisterViews();\n\n    #if DEBUG\n          builder.Logging.AddDebug();\n    #endif\n          return builder.Build();\n    }\n```\n\n----------------------------------------\n\nTITLE: TargetNullValue with StaticResource in XAML (Image and Label)\nDESCRIPTION: This XAML snippet shows how to define TargetNullValue using StaticResource for both Image and Label controls. Using StaticResource centralizes the definition of fallback values, making them easier to maintain and localize.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"{Binding ImageUrl, TargetNullValue={StaticResource fallbackImageUrl}}\"\n       ... />\n<Label Text=\"{Binding Location, TargetNullValue={StaticResource locationUnknown}}\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: Passing Data via Query Parameters in MAUI Shell\nDESCRIPTION: This snippet demonstrates how to pass data as a query parameter when navigating to a new route in MAUI Shell. It appends the query parameter to the route using a string interpolation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    string elephantName = (e.CurrentSelection.FirstOrDefault() as Animal).Name;\n    await Shell.Current.GoToAsync($\"elephantdetails?name={elephantName}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting StackLayout Objects (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to nest StackLayout objects within a parent StackLayout.  The inner StackLayout objects are horizontally oriented and contain a BoxView and a Label, all within a Border. The outer StackLayout is vertically oriented.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.XAML.CombinedStackLayoutPage\"\n             Title=\"Combined StackLayouts demo\">\n    <StackLayout Margin=\"20\">\n        ...\n        <Border Stroke=\"Black\"\n                Padding=\"5\">\n            <StackLayout Orientation=\"Horizontal\"\n                         Spacing=\"15\">\n                <BoxView Color=\"Red\"\n                         WidthRequest=\"40\" />\n                <Label Text=\"Red\"\n                       FontSize=\"18\"\n                       VerticalOptions=\"Center\" />\n            </StackLayout>\n        </Border>\n        <Border Stroke=\"Black\"\n                Padding=\"5\">\n            <StackLayout Orientation=\"Horizontal\"\n                         Spacing=\"15\">\n                <BoxView Color=\"Yellow\"\n                         WidthRequest=\"40\" />\n                <Label Text=\"Yellow\"\n                       FontSize=\"18\"\n                       VerticalOptions=\"Center\" />\n            </StackLayout>\n        </Border>\n        <Border Stroke=\"Black\"\n                Padding=\"5\">\n            <StackLayout Orientation=\"Horizontal\"\n                         Spacing=\"15\">\n                <BoxView Color=\"Blue\"\n                         WidthRequest=\"40\" />\n                <Label Text=\"Blue\"\n                       FontSize=\"18\"\n                       VerticalOptions=\"Center\" />\n            </StackLayout>\n        </Border>\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using BoolToObjectConverter with Style in XAML\nDESCRIPTION: This XAML code snippet demonstrates using the `BoolToObjectConverter` to dynamically change the style of a `Label` based on the state of a `Switch`. The `x:TypeArguments` is set to `Style`.  The `TrueObject` and `FalseObject` properties are assigned inline style definitions that change the `Text`, `FontAttributes`, and `TextColor` properties of the label. When the switch is toggled, the label's style is updated accordingly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Label FontSize=\"18\"\n       VerticalOptions=\"Center\">\n    <Label.Style>\n        <Binding x:DataType=\"Switch\"\n                 Source=\"{x:Reference switch3}\"\n                 Path=\"IsToggled\">\n            <Binding.Converter>\n                <local:BoolToObjectConverter x:TypeArguments=\"Style\">\n                    <local:BoolToObjectConverter.TrueObject>\n                        <Style TargetType=\"Label\">\n                            <Setter Property=\"Text\" Value=\"Indubitably!\" />\n                            <Setter Property=\"FontAttributes\" Value=\"Italic, Bold\" />\n                            <Setter Property=\"TextColor\" Value=\"Green\" />\n                        </Style>\n                    </local:BoolToObjectConverter.TrueObject>\n\n                    <local:BoolToObjectConverter.FalseObject>\n                        <Style TargetType=\"Label\">\n                            <Setter Property=\"Text\" Value=\"Maybe later\" />\n                            <Setter Property=\"FontAttributes\" Value=\"None\" />\n                            <Setter Property=\"TextColor\" Value=\"Red\" />\n                        </Style>\n                    </local:BoolToObjectConverter.FalseObject>\n                </local:BoolToObjectConverter>\n            </Binding.Converter>\n        </Binding>\n    </Label.Style>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewCell in TableView XAML\nDESCRIPTION: This XAML code demonstrates how to define a TableView using a ViewCell to customize the cell's appearance.  It uses a Grid layout within the ViewCell to arrange a Label, a Switch, and a Slider.  The row and column definitions are used to position the UI elements, and the Grid.ColumnSpan, HorizontalOptions, and Margin properties are used to customize the layout of the controls.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<TableView Intent=\"Settings\">\n    <TableRoot>\n        <TableSection Title=\"Silent\">\n            <ViewCell>\n                <Grid RowDefinitions=\"Auto,Auto\"\n                      ColumnDefinitions=\"0.5*,0.5*\">\n                    <Label Text=\"Vibrate\"\n                           Margin=\"10,10,0,0\"/>\n                    <Switch Grid.Column=\"1\"\n                            HorizontalOptions=\"End\" />\n                    <Slider Grid.Row=\"1\"\n                            Grid.ColumnSpan=\"2\"\n                            Margin=\"10\"\n                            Minimum=\"0\"\n                            Maximum=\"10\"\n                            Value=\"3\" />\n                </Grid>\n            </ViewCell>\n        </TableSection>\n    </TableRoot>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Concatenating Transforms using Matrix3x2 in C#\nDESCRIPTION: This code demonstrates how to use the `ConcatenateTransform` method with a `Matrix3x2` object to apply combined transformations to a `PathF` object in .NET MAUI Graphics. The code creates a path, defines a transformation matrix for scaling, shearing, and translating, and then applies the concatenated transform to the path before filling it with a red color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nPathF path = new PathF();\nfor (int i = 0; i < 11; i++)\n{\n    double angle = 5 * i * 2 * Math.PI / 11;\n    PointF point = new PointF(100 * (float)Math.Sin(angle), -100 * (float)Math.Cos(angle));\n\n    if (i == 0)\n        path.MoveTo(point);\n    else\n        path.LineTo(point);\n}\n\nMatrix3x2 transform = new Matrix3x2(1.5f, 1, 0, 1, 150, 150);     \ncanvas.ConcatenateTransform(transform);\ncanvas.FillColor = Colors.Red;\ncanvas.FillPath(path);\n```\n\n----------------------------------------\n\nTITLE: Transforming Path with MatrixTransform in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply a custom transformation to a Path object using MatrixTransform. The matrix is defined within the MatrixTransform.Matrix property, specifying offset, scaling, and skewing. It stretches the path by a factor of 1.5 in the X direction, skews it, and offsets it by 10 units in both X and 100 in Y direction.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <MatrixTransform>\n            <MatrixTransform.Matrix>\n                <!-- M11 stretches, M12 skews -->\n                <Matrix OffsetX=\"10\"\n                        OffsetY=\"100\"\n                        M11=\"1.5\"\n                        M12=\"1\" />\n            </MatrixTransform.Matrix>\n        </MatrixTransform>\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Navigating Backwards with a Route in MAUI Shell\nDESCRIPTION: This snippet shows how to navigate backwards and then to a specific route in a MAUI Shell application. It uses the `GoToAsync` method with \"../route\" to navigate back one level and then to the specified route.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait Shell.Current.GoToAsync(\"../route\");\n```\n\n----------------------------------------\n\nTITLE: Define DeviceOrientation Enum C#\nDESCRIPTION: Defines an enumeration named `DeviceOrientation` with values for `Undefined`, `Landscape`, and `Portrait`. This enum represents the orientation of a device and is used across different platforms. No dependencies are required, and the output is a simple enumeration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InvokePlatformCodeDemos.Services\n{\n    public enum DeviceOrientation\n    {\n        Undefined,\n        Landscape,\n        Portrait\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Group Header XAML\nDESCRIPTION: This XAML code customizes the group header of the CollectionView. It defines a `GroupHeaderTemplate` that displays the group name using a Label with a light gray background, larger font size, and bold font attributes. This demonstrates customizing the visual appearance of group headers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Animals}\"\n                IsGrouped=\"true\">\n    ...\n    <CollectionView.GroupHeaderTemplate>\n        <DataTemplate x:DataType=\"models:AnimalGroup\">\n            <Label Text=\"{Binding Name}\"\n                   BackgroundColor=\"LightGray\"\n                   FontSize=\"18\"\n                   FontAttributes=\"Bold\" />\n        </DataTemplate>\n    </CollectionView.GroupHeaderTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Show User Location - C#\nDESCRIPTION: This C# code enables the display of the user's current location on a .NET MAUI Map. A new Map object is created, and its IsShowingUser property is set to true, which triggers the map to show the user's location, assuming the app has location permissions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map\n{\n    IsShowingUser = true\n};\n```\n\n----------------------------------------\n\nTITLE: Implement iOS Orientation Service C#\nDESCRIPTION: This code implements the `GetOrientation` method for the iOS platform as a partial method within the `DeviceOrientationService` class. It uses iOS APIs (`UIKit`) to determine the device's orientation and returns a `DeviceOrientation` enum value. This implementation must be placed in the `Platforms/iOS` folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing UIKit;\n\nnamespace InvokePlatformCodeDemos.Services.PartialMethods;\n\npublic partial class DeviceOrientationService\n{\n    public partial DeviceOrientation GetOrientation()\n    {\n        UIInterfaceOrientation orientation = UIApplication.SharedApplication.StatusBarOrientation;\n        bool isPortrait = orientation == UIInterfaceOrientation.Portrait || orientation == UIInterfaceOrientation.PortraitUpsideDown;\n        return isPortrait ? DeviceOrientation.Portrait : DeviceOrientation.Landscape;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to CultureInfo's DayNames (XAML)\nDESCRIPTION: Demonstrates binding to an element within a collection (DayNames) of the DateTimeFormat property of the CultureInfo class.  The source is set to the static CultureInfo.CurrentCulture property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding x:DataType='globe:CultureInfo',\n                      Source={x:Static globe:CultureInfo.CurrentCulture},\n                      Path=DateTimeFormat.DayNames[3],\n                      StringFormat='The middle day of the week is {0}'}\" />\n```\n\n----------------------------------------\n\nTITLE: C# XML Namespace Declaration\nDESCRIPTION: These C# snippets show how to declare XML namespaces within a XAML file to access types defined in C# code. The first declaration, `xmlns:local`, allows referencing types within the `XamlSamples` namespace. The second, `xmlns:sys`, allows accessing types in the `System` namespace from the `netstandard` assembly. These declarations are crucial for using `x:Static` to access static members of these types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nxmlns:local=\"clr-namespace:XamlSamples\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nxmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n```\n\n----------------------------------------\n\nTITLE: Direction CSS in .NET MAUI\nDESCRIPTION: Sets the text direction for a .NET MAUI VisualElement.  Valid values are ltr, rtl, inherit, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_21\n\nLANGUAGE: CSS\nCODE:\n```\ndirection: rtl;\n```\n\n----------------------------------------\n\nTITLE: Enabling Version Tracking in .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to enable version tracking in a .NET MAUI application using the ConfigureEssentials method on the MauiAppBuilder object in the MauiProgram.cs file. It utilizes the UseVersionTracking method on the IEssentialsBuilder object to configure version tracking.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/version-tracking.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t\tfonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n\t\t\t});\n\n\t\tbuilder.ConfigureEssentials(essentials =>\n\t\t{\n\t\t\tessentials.UseVersionTracking();\n\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell TabBar Foreground Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell TabBar foreground color for an Element to gray using the `-maui-shell-tabbar-foreground` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_80\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-tabbar-foreground: gray;\n```\n\n----------------------------------------\n\nTITLE: Accessing SQLite Data with New Instance in C#\nDESCRIPTION: This C# code shows an alternative to dependency injection for accessing the SQLite database in a .NET MAUI application.  Instead of injecting TodoItemDatabase, it creates a new instance of the class within the TodoItemPage constructor.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/database-sqlite.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTodoItemDatabase database;\n\npublic TodoItemPage()\n{\n    InitializeComponent();\n    database = new TodoItemDatabase();\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Notification Permission Class in Android\nDESCRIPTION: This C# code shows how to implement a permission class that checks for the `POST_NOTIFICATIONS` permission at runtime on Android. The `NotificationPermission` class inherits from `Permissions.BasePlatformPermission` and overrides the `RequiredPermissions` property to include the `POST_NOTIFICATIONS` permission when running on Android 13 or higher.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android;\n\nnamespace LocalNotificationsDemo.Platforms.Android;\n\npublic class NotificationPermission : Permissions.BasePlatformPermission\n{\n    public override (string androidPermission, bool isRuntime)[] RequiredPermissions\n    {\n        get\n        {\n            var result = new List<(string androidPermission, bool isRuntime)>();\n            if (OperatingSystem.IsAndroidVersionAtLeast(33))\n                result.Add((Manifest.Permission.PostNotifications, true));\n            return result.ToArray();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Notification Request Model C#\nDESCRIPTION: This code defines the `NotificationRequest` class, which represents a request to send a push notification. It includes properties for the notification text, action, tags, and a flag indicating whether the notification is silent. The `Tags` property represents the target audience. This model is used as input when requesting a push notification through the `INotificationService`. The `Tags` property is initialized to an empty string array. This class is part of the `PushNotificationsAPI.Models` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsAPI.Models;\n\npublic class NotificationRequest\n{\n    public string Text { get; set; }\n    public string Action { get; set; }\n    public string[] Tags { get; set; } = Array.Empty<string>();\n    public bool Silent { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Data Loading in CollectionView (C#)\nDESCRIPTION: This C# snippet demonstrates how to enable incremental data loading in a CollectionView. It sets the RemainingItemsThreshold property and attaches an event handler to the RemainingItemsThresholdReached event. It also binds the ItemsSource property to a viewmodel property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    RemainingItemsThreshold = 5\n};\ncollectionView.RemainingItemsThresholdReached += OnCollectionViewRemainingItemsThresholdReached;\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (AnimalsViewModel vm) => vm.Animals);\n```\n\n----------------------------------------\n\nTITLE: Open URI with Launcher (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the `ILauncher` interface to open a URI. It first checks if the URI scheme can be handled by an app on the device using `CanOpenAsync`. If the URI scheme is supported, it then opens the URI using `OpenAsync`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/launcher.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (Launcher.Default.CanOpenAsync(uri)){\n    await Launcher.Default.OpenAsync(uri);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current UIViewController - iOS/Mac Catalyst - C#\nDESCRIPTION: This code snippet illustrates how to retrieve the currently visible UIViewController on iOS and Mac Catalyst platforms using the Platform class. The GetCurrentUIViewController method attempts to retrieve the current view controller and returns null if unable to detect one.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/platform-helpers.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar viewController = Platform.GetCurrentUIViewController();\n```\n\n----------------------------------------\n\nTITLE: Adding Media Picker Permissions (Android) XML\nDESCRIPTION: This XML snippet demonstrates how to declare the necessary permissions for camera and media access in the AndroidManifest.xml file. It specifies permissions for using the camera, reading external storage (with a maximum SDK version of 32), writing to external storage (with a maximum SDK version of 32), and reading media images, videos, and audio. This is crucial for Android apps needing to capture or access media.\nDependencies: Android project, AndroidManifest.xml\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/picker.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\" />    \n<!-- Required only if your app needs to access images or photos that other apps created -->\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n<!-- Required only if your app needs to access videos that other apps created -->\n<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n<!-- Required only if your app needs to access audio files that other apps created -->\n<uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" />    \n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Partial Class (Windows) C#\nDESCRIPTION: This code snippet provides a platform-specific implementation of the partial class (CustomizeEntryPartialMethodsPage) for Windows. It implements the ChangedHandler and ChangingHandler partial methods, subscribing to and unsubscribing from the GotFocus event of the native TextBox control. This enables selecting all text in the Entry when it gains focus on Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\n\nnamespace CustomizeHandlersDemo.Views\n{\n    public partial class CustomizeEntryPartialMethodsPage : ContentPage\n    {\n        partial void ChangedHandler(object sender, EventArgs e)\n        {\n            Entry entry = sender as Entry;\n            (entry.Handler.PlatformView as TextBox).GotFocus += OnGotFocus;\n        }\n\n        partial void ChangingHandler(object sender, HandlerChangingEventArgs e)\n        {\n            if (e.OldHandler != null)\n            {\n                (e.OldHandler.PlatformView as TextBox).GotFocus -= OnGotFocus;\n            }\n        }\n\n        void OnGotFocus(object sender, RoutedEventArgs e)\n        {\n            var nativeView = sender as TextBox;\n            nativeView.SelectAll();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Dashed Polygon in XAML\nDESCRIPTION: This XAML example shows how to create a dashed polygon using the StrokeDashArray and StrokeDashOffset properties.  StrokeDashArray defines the pattern of dashes and gaps, while StrokeDashOffset specifies the distance to start the dash pattern.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polygon.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Polygon Points=\"40,10 70,80 10,50\"\n         Fill=\"AliceBlue\"\n         Stroke=\"Green\"\n         StrokeThickness=\"5\"\n         StrokeDashArray=\"1,1\"\n         StrokeDashOffset=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Animations Concurrently with Task.WhenAll in MAUI (C#)\nDESCRIPTION: This code snippet shows how to run multiple rotation animations concurrently using Task.WhenAll. The snippet rotates an image around the X, Y, and Z axes with different rotation counts using prime numbers to avoid repetitive patterns.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// 10 minute animation\nuint duration = 10 * 60 * 1000;\nawait Task.WhenAll\n(\n  image.RotateToAsync(307 * 360, duration),\n  image.RotateXToAsync(251 * 360, duration),\n  image.RotateYToAsync(199 * 360, duration)\n);\n```\n\n----------------------------------------\n\nTITLE: Instantiate Switch in XAML\nDESCRIPTION: This code snippet shows how to instantiate a Switch control in XAML and set its IsToggled property to true. This will initialize the Switch to the 'on' state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch IsToggled=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Define a simple Person class in C#\nDESCRIPTION: This code snippet shows the definition of a simple `Person` class with `Name`, `Age`, and `Location` properties. This class is used as a data source for demonstrating data templates.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Location { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SwitchCell in TableView XAML\nDESCRIPTION: This XAML code snippet demonstrates how to define a TableView with SwitchCell items.  It sets the Text and On properties of the SwitchCell to control the display text and initial state of the switch. The Intent property of the TableView is set to Settings indicating a settings-oriented interface.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<TableView Intent=\"Settings\">\n    <TableRoot>\n        <TableSection>\n            <SwitchCell Text=\"Airplane Mode\"\n                        On=\"False\" />\n            <SwitchCell Text=\"Notifications\"\n                        On=\"True\" />\n        </TableSection>\n    </TableRoot>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Enabling TabbedPage Swipe Paging in C#\nDESCRIPTION: This C# code snippet shows how to enable swipe paging in a TabbedPage on Android using the fluent API. It sets the `OffscreenPageLimit` to 2 and enables swipe paging.  Requires `using Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-page-swiping.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nOn<Microsoft.Maui.Controls.PlatformConfiguration.Android>()\n    .SetOffscreenPageLimit(2)\n    .SetIsSwipePagingEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menus in CarouselView with SwipeView (C#)\nDESCRIPTION: This C# snippet demonstrates how to programmatically create a CarouselView with SwipeView for context menus. It creates SwipeItems for 'Favorite' and 'Delete' actions and binds their commands and command parameters. The Binding.Create method is used to define the binding expression with the appropriate source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/populate-data.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView();\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n\ncarouselView.ItemTemplate = new DataTemplate(() =>\n{\n    StackLayout stackLayout = new StackLayout();\n    Border border = new Border { ... };\n\n    SwipeView swipeView = new SwipeView();\n    SwipeItem favoriteSwipeItem = new SwipeItem\n    {\n        Text = \"Favorite\",\n        IconImageSource = \"favorite.png\",\n        BackgroundColor = Colors.LightGreen\n    };\n    favoriteSwipeItem.SetBinding(MenuItem.CommandProperty, Binding.Create(static (MonkeysViewModel vm) => vm.FavoriteCommand, source: carouselView.BindingContext);\n    favoriteSwipeItem.SetBinding(MenuItem.CommandParameterProperty, static (CarouselView cv) => cv.CurrentItem, source: carouselView);\n\n    SwipeItem deleteSwipeItem = new SwipeItem\n    {\n        Text = \"Delete\",\n        IconImageSource = \"delete.png\",\n        BackgroundColor = Colors.LightPink\n    };\n    deleteSwipeItem.SetBinding(MenuItem.CommandProperty, Binding.Create(static (MonkeysViewModel vm) => vm.DeleteCommand, source: carouselView.BindingContext);\n    deleteSwipeItem.SetBinding(MenuItem.CommandParameterProperty, static (CarouselView cv) => cv.CurrentItem, source: carouselView);\n\n    swipeView.TopItems = new SwipeItems { favoriteSwipeItem };\n    swipeView.BottomItems = new SwipeItems { deleteSwipeItem };\n\n    StackLayout swipeViewStackLayout = new StackLayout { ... };\n    swipeView.Content = swipeViewStackLayout;\n    border.Content = swipeView;\n    stackLayout.Add(border);\n\n    return stackLayout;\n});\n```\n\n----------------------------------------\n\nTITLE: Applying a Style with Attached Property in XAML\nDESCRIPTION: This XAML code demonstrates how to apply a style with an attached property to a `Label` control. The `Style` property of the `Label` is set to the `Style` instance using the `StaticResource` markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label with shadow\" Style=\"{StaticResource ShadowStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Concise Child Animations in MAUI\nDESCRIPTION: This code provides a more concise way to create and run child animations using the Animation class, achieving the same scaling and rotation effect as the previous example.  It demonstrates initializing the Animation inline with collection initializer syntax.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnew Animation\n{\n    { 0, 0.5, new Animation (v => image.Scale = v, 1, 2) },\n    { 0, 1, new Animation (v => image.Rotation = v, 0, 360) },\n    { 0.5, 1, new Animation (v => image.Scale = v, 2, 1) }\n}.Commit (this, \"ChildAnimations\", 16, 4000, null, (v, c) => SetIsEnabledButtonState (true, false));\n```\n\n----------------------------------------\n\nTITLE: XAML with Multiple Type Arguments\nDESCRIPTION: This XAML code demonstrates how to use the `x:TypeArguments` directive to specify type arguments for a generic `List` containing `KeyValuePair` objects. The `KeyValuePair` itself takes two type arguments: `string` and a custom `Monkey` model. The example populates a `CollectionView` with data using this generic list.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/generics.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:models=\"clr-namespace:GenericsDemo.Models\"\n             xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=netstandard\"\n             ...>\n    <CollectionView>\n        <CollectionView.ItemsSource>\n            <scg:List x:TypeArguments=\"scg:KeyValuePair(x:String,models:Monkey)\">\n                <scg:KeyValuePair x:TypeArguments=\"x:String,models:Monkey\">\n                    <x:Arguments>\n                        <x:String>Baboon</x:String>\n                        <models:Monkey Location=\"Africa and Asia\"\n                                       ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Papio_anubis_%28Serengeti%2C_2009%29.jpg/200px-Papio_anubis_%28Serengeti%2C_2009%29.jpg\" />\n                    </x:Arguments>\n                </scg:KeyValuePair>\n                <scg:KeyValuePair x:TypeArguments=\"x:String,models:Monkey\">\n                    <x:Arguments>\n                        <x:String>Capuchin Monkey</x:String>\n                        <models:Monkey Location=\"Central and South America\"\n                                       ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/Capuchin_Costa_Rica.jpg/200px-Capuchin_Costa_Rica.jpg\" />   \n                    </x:Arguments>\n                </scg:KeyValuePair>\n                <scg:KeyValuePair x:TypeArguments=\"x:String,models:Monkey\">\n                    <x:Arguments>\n                        <x:String>Blue Monkey</x:String>\n                        <models:Monkey Location=\"Central and East Africa\"\n                                       ImageUrl=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/BlueMonkey.jpg/220px-BlueMonkey.jpg\" />\n                    </x:Arguments>\n                </scg:KeyValuePair>\n            </scg:List>\n        </CollectionView.ItemsSource>\n        <CollectionView.ItemTemplate>\n            <DataTemplate x:DataType=\"scg:KeyValuePair(x:String,models:Monkey)\">\n                <Grid Padding=\"10\">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height=\"Auto\" />\n                        <RowDefinition Height=\"Auto\" />\n                    </Grid.RowDefinitions>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"Auto\" />\n                        <ColumnDefinition Width=\"Auto\" />\n                    </Grid.ColumnDefinitions>\n                    <Image Grid.RowSpan=\"2\"\n                           Source=\"{Binding Value.ImageUrl}\"\n                           Aspect=\"AspectFill\"\n                           HeightRequest=\"60\"\n                           WidthRequest=\"60\" />\n                    <Label Grid.Column=\"1\"\n                           Text=\"{Binding Key}\"\n                           FontAttributes=\"Bold\" />\n                    <Label Grid.Row=\"1\"\n                           Grid.Column=\"1\"\n                           Text=\"{Binding Value.Location}\"\n                           FontAttributes=\"Italic\"\n                           VerticalOptions=\"End\" />\n                </Grid>\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage    \n\n```\n\n----------------------------------------\n\nTITLE: XAML for consuming the KeypadViewModel\nDESCRIPTION: This XAML code defines the UI for a keypad page, binding to the `KeypadViewModel`. It uses a Grid layout to arrange buttons and a label. The `Command` properties of the buttons are bound to the `AddCharCommand` and `DeleteCharCommand` in the viewmodel. The `CommandParameter` for each button is set to the character that the button represents. The `DisplayText` property is bound to a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.KeypadPage\"\n             Title=\"Keypad Page\"\n             x:DataType=\"local:KeypadViewModel\">\n    <ContentPage.BindingContext>\n        <local:KeypadViewModel />\n    </ContentPage.BindingContext>\n\n    <Grid HorizontalOptions=\"Center\" VerticalOptions=\"Center\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"80\" />\n            <ColumnDefinition Width=\"80\" />\n            <ColumnDefinition Width=\"80\" />\n        </Grid.ColumnDefinitions>\n\n        <Label Text=\"{Binding DisplayText}\"\n               Margin=\"0,0,10,0\" FontSize=\"20\" LineBreakMode=\"HeadTruncation\"\n               VerticalTextAlignment=\"Center\" HorizontalTextAlignment=\"End\"\n               Grid.ColumnSpan=\"2\" />\n\n        <Button Text=\"&#x21E6;\" Command=\"{Binding DeleteCharCommand}\" Grid.Column=\"2\"/>\n\n        <Button Text=\"1\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"1\" Grid.Row=\"1\" />\n        <Button Text=\"2\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"2\" Grid.Row=\"1\" Grid.Column=\"1\" />\n        <Button Text=\"3\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"3\" Grid.Row=\"1\" Grid.Column=\"2\" />\n\n        <Button Text=\"4\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"4\" Grid.Row=\"2\" />\n        <Button Text=\"5\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"5\" Grid.Row=\"2\" Grid.Column=\"1\" />\n        <Button Text=\"6\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"6\" Grid.Row=\"2\" Grid.Column=\"2\" />\n\n        <Button Text=\"7\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"7\" Grid.Row=\"3\" />\n        <Button Text=\"8\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"8\" Grid.Row=\"3\" Grid.Column=\"1\" />\n        <Button Text=\"9\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"9\" Grid.Row=\"3\" Grid.Column=\"2\" />\n\n        <Button Text=\"*\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"*\" Grid.Row=\"4\" />\n        <Button Text=\"0\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"0\" Grid.Row=\"4\" Grid.Column=\"1\" />\n        <Button Text=\"#\" Command=\"{Binding AddCharCommand}\" CommandParameter=\"#\" Grid.Row=\"4\" Grid.Column=\"2\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Applying MAUI Style Classes to Controls in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply defined style classes to BoxView controls using the `StyleClass` property.  The `StyleClass` property accepts a comma-separated list of class names. Styles are applied in the order they appear in the list, with later styles overriding earlier ones if they set the same properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        ...\n    </ContentPage.Resources>\n    <StackLayout>\n        <BoxView StyleClass=\"Separator\" />       \n        <BoxView WidthRequest=\"100\"\n                 HeightRequest=\"100\"\n                 HorizontalOptions=\"Center\"\n                 StyleClass=\"Rounded, Rotated\" />\n        <BoxView HorizontalOptions=\"Center\"\n                 StyleClass=\"Circle\" />\n    </StackLayout>\n</ContentPage>    \n```\n\n----------------------------------------\n\nTITLE: Displaying Icons on Menu Items with FontImageSource in XAML\nDESCRIPTION: This XAML snippet demonstrates how to display icons on context menu items using FontImageSource.  The Button control has a context menu defined using FlyoutBase.ContextFlyout, which contains two MenuFlyoutItem objects. Each MenuFlyoutItem has an IconImageSource defined using FontImageSource, specifying the Glyph and FontFamily for the icon. Requires a font that supports the specified glyphs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/context-menu.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"&#x25B6;&#xFE0F; Play\"\n        WidthRequest=\"80\">\n    <FlyoutBase.ContextFlyout>\n        <MenuFlyout>\n            <MenuFlyoutItem Text=\"Pause\"\n                            Clicked=\"OnPauseClicked\">\n                <MenuFlyoutItem.IconImageSource>\n                    <FontImageSource Glyph=\"&#x23F8;\"\n                                     FontFamily=\"Arial\" />\n                </MenuFlyoutItem.IconImageSource>\n            </MenuFlyoutItem>\n            <MenuFlyoutItem Text=\"Stop\"\n                            Clicked=\"OnStopClicked\">\n                <MenuFlyoutItem.IconImageSource>\n                    <FontImageSource Glyph=\"&#x23F9;\"\n                                     FontFamily=\"Arial\" />\n                </MenuFlyoutItem.IconImageSource>\n            </MenuFlyoutItem>\n        </MenuFlyout>\n    </FlyoutBase.ContextFlyout>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using ItemTemplateSelector in XAML for MAUI Map\nDESCRIPTION: This XAML code demonstrates how to use an ItemTemplateSelector to customize the appearance of items in a MAUI Map based on the data. The Map control's ItemSource is bound to a collection of Position objects, and the ItemTemplateSelector chooses between different DataTemplates based on the address of the Position. This requires defining a MapItemTemplateSelector in the page resources, which contains different templates.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_36\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:templates=\"clr-namespace:WorkingWithMaps.Templates\"\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:viewmodels=\"clr-namespace:WorkingWithMaps.ViewModels\"\n             x:DataType=\"viewmodels:PinItemsSourcePageViewModel\">\n    <ContentPage.Resources>\n       <templates:MapItemTemplateSelector x:Key=\"MapItemTemplateSelector\">\n           <templates:MapItemTemplateSelector.DefaultTemplate>\n               <DataTemplate x:DataType=\"models:Position\">\n                   <maps:Pin Location=\"{Binding Location}\"\n                             Address=\"{Binding Address}\"\n                             Label=\"{Binding Description}\" />\n               </DataTemplate>\n           </templates:MapItemTemplateSelector.DefaultTemplate>\n           <templates:MapItemTemplateSelector.SanFranTemplate>\n               <DataTemplate x:DataType=\"models:Position\">\n                   <maps:Pin Location=\"{Binding Location}\"\n                             Address=\"{Binding Address}\"\n                             Label=\"Xamarin!\" />\n               </DataTemplate>\n           </templates:MapItemTemplateSelector.SanFranTemplate>    \n       </templates:MapItemTemplateSelector>\n    </ContentPage.Resources>\n\n    <Grid>\n        ...\n        <maps:Map x:Name=\"map\"\n                  ItemsSource=\"{Binding Positions}\"\n                  ItemTemplateSelector=\"{StaticResource MapItemTemplateSelector}\">\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView to String in C#\nDESCRIPTION: Demonstrates setting the EmptyView property of a CarouselView to a string in C#. This string is displayed when the ItemsSource is null or empty. Uses data binding to bind ItemsSource to a property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    EmptyView = \"No items to display.\"\n};\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.EmptyMonkeys);\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll Animation (C#)\nDESCRIPTION: This C# code snippet shows how to disable the scroll animation when programmatically scrolling to an item using the `ScrollTo` method. The `animate` parameter is set to `false` to prevent the animation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncarouselView.ScrollTo(monkey, animate: false);\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Note at the Top of the List in .NET MAUI\nDESCRIPTION: This C# code snippet shows how to insert a new note at the beginning of the `AllNotes` collection using the `Insert` method. This ensures that newly created notes appear at the top of the list. It expects the `AllNotes` ObservableCollection and `matchedNote` Note object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/bugs.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAllNotes.Insert(0, matchedNote);\n```\n\n----------------------------------------\n\nTITLE: Setting SwipeTransitionMode in C# for iOS SwipeView\nDESCRIPTION: This C# code snippet shows how to programmatically set the SwipeTransitionMode of a SwipeView to 'Drag' specifically for iOS.  It uses the fluent API provided by the Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespace. This snippet requires including the specified namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/swipeview-swipetransitionmode.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nvar swipeView = new Microsoft.Maui.Controls.SwipeView();\nswipeView.On<iOS>().SetSwipeTransitionMode(SwipeTransitionMode.Drag);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Handle ListView Scrolled Event in XAML\nDESCRIPTION: This XAML snippet demonstrates how to subscribe to the `Scrolled` event of a ListView to detect scrolling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_23\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView Scrolled=\"OnListViewScrolled\">\n    ...\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Drawing Overlapping Circles with Multiply Blend Mode in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to use the `Multiply` blend mode to draw three overlapping circles of cyan, magenta, and yellow in .NET MAUI. It calculates the centers of the circles, sets the `BlendMode` property of the canvas to `Multiply`, and then fills the circles with the specified colors. The code snippet requires the .NET MAUI graphics context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/blendmodes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPointF center = new PointF(dirtyRect.Center.X, dirtyRect.Center.Y);\nfloat radius = Math.Min(dirtyRect.Width, dirtyRect.Height) / 4;\nfloat distance = 0.8f * radius;\n\nPointF center1 = new PointF(distance * (float)Math.Cos(9 * Math.PI / 6) + center.X,\n    distance * (float)Math.Sin(9 * Math.PI / 6) + center.Y);\nPointF center2 = new PointF(distance * (float)Math.Cos(1 * Math.PI / 6) + center.X,\n    distance * (float)Math.Sin(1 * Math.PI / 6) + center.Y);\nPointF center3 = new PointF(distance * (float)Math.Cos(5 * Math.PI / 6) + center.X,\n    distance * (float)Math.Sin(5 * Math.PI / 6) + center.Y);\n\ncanvas.BlendMode = BlendMode.Multiply;\n\ncanvas.FillColor = Colors.Cyan;\ncanvas.FillCircle(center1, radius);\n\ncanvas.FillColor = Colors.Magenta;\ncanvas.FillCircle(center2, radius);\n\ncanvas.FillColor = Colors.Yellow;\ncanvas.FillCircle(center3, radius);\n```\n\n----------------------------------------\n\nTITLE: Set background color for splash screen in XML\nDESCRIPTION: This XML snippet demonstrates how to set the background color for the splash screen. The `Color` attribute sets the background color of the splash screen, and can be specified in hexadecimal format or using a .NET MAUI color name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" Color=\"#512BD4\" />\n```\n\n----------------------------------------\n\nTITLE: Change ProgressBar Color in XAML\nDESCRIPTION: This XAML example shows how to set the color of a ProgressBar to Orange using the ProgressColor property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/progressbar.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ProgressBar Progress=\"0.5\"\n             ProgressColor=\"Orange\" />\n```\n\n----------------------------------------\n\nTITLE: XAML Resources Workaround: App Constructor (net-maui-8.0) C#\nDESCRIPTION: This code demonstrates a workaround for a XAML resource issue. It injects an IServiceProvider into the App class and uses it to resolve the page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic App(IServiceProvider serviceProvider)\n{\n    InitializeComponent();\n    MainPage = serviceProvider.GetService<MyFirstAppPage>();\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Markup for NotePage Layout\nDESCRIPTION: This XAML code defines the layout of the `NotePage`. It includes a `VerticalStackLayout` containing an `Editor` for text input and a `Grid` with two `Button` controls for saving and deleting notes. The `Grid` is used to arrange the buttons side-by-side.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Notes.NotePage\"\n             Title=\"Note\">\n    <VerticalStackLayout Padding=\"30\">\n        <Editor\n            x:Name=\"TextEditor\"\n            HeightRequest=\"100\"\n            Placeholder=\"Enter your note\"/>\n        <Grid ColumnDefinitions=\"*,*\">\n            <Button\n                Text=\"Save\"\n                Clicked=\"SaveButton_Clicked\" />\n            <Button\n                Grid.Column=\"1\"\n                Text=\"Delete\"\n                Clicked=\"DeleteButton_Clicked\" />\n        </Grid>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Override ToString() method in Person class (C#)\nDESCRIPTION: This code snippet shows how to override the `ToString()` method in the `Person` class to display the `Name` property. This is a basic way to control the text shown for each item in the `CollectionView` if a data template is not used.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    ...\n    public override string ToString ()\n    {\n        return Name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Indicator Appearance with DataTemplate\nDESCRIPTION: This example shows how to define the appearance of each indicator using a DataTemplate and the IndicatorTemplate property.  In this case, each indicator is a Label that displays a font icon. The IndicatorColor and SelectedIndicatorColor are set to Transparent to allow the icon color to be visible.  Requires ionicons font family to be set up.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"*,Auto\">\n    <CarouselView ItemsSource=\"{Binding Monkeys}\"\n                  IndicatorView=\"indicatorView\">\n        <CarouselView.ItemTemplate>\n            <!-- DataTemplate that defines item appearance -->\n        </CarouselView.ItemTemplate>\n    </CarouselView>\n    <IndicatorView x:Name=\"indicatorView\"\n                   Grid.Row=\"1\"\n                   Margin=\"0,0,0,40\"\n                   IndicatorColor=\"Transparent\"\n                   SelectedIndicatorColor=\"Transparent\"\n                   HorizontalOptions=\"Center\">\n        <IndicatorView.IndicatorTemplate>\n            <DataTemplate>\n                <Label Text=\"&#xf30c;\"\n                       FontFamily=\"ionicons\"\n                       FontSize=\"12\" />\n            </DataTemplate>\n        </IndicatorView.IndicatorTemplate>\n    </IndicatorView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Respond to Switch State Change in XAML\nDESCRIPTION: This code snippet shows how to register an event handler for the Toggled event of a Switch in XAML.  The OnToggled method will be called whenever the IsToggled property changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch Toggled=\"OnToggled\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the placeholder color for an Entry, Editor, or SearchBar to green using the `-maui-placeholder-color` property.  It accepts a color value or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_67\n\nLANGUAGE: css\nCODE:\n```\n-maui-placeholder-color: green;\n```\n\n----------------------------------------\n\nTITLE: Diagonal LinearGradientBrush in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a diagonal LinearGradientBrush in .NET MAUI and set it as the Background of a Border. The gradient interpolates from yellow to green. The StartPoint defaults to (0,0) and the EndPoint defaults to (1,1).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/lineargradient.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\">\n    <Border.Background>\n        <!-- StartPoint defaults to (0,0)      \n             Endpoint defaults to (1,1) -->\n        <LinearGradientBrush>\n            <GradientStop Color=\"Yellow\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"Green\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Border.Background>\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Grids in XAML\nDESCRIPTION: This XAML code defines a ContentPage with nested Grid layouts. The outer Grid contains a BoxView and an inner Grid. The inner Grid contains Sliders and Labels for controlling the color of the BoxView. The Grid.Row attached properties are used to position the elements within the nested Grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:converters=\"clr-namespace:GridDemos.Converters\"\n             x:Class=\"GridDemos.Views.XAML.ColorSlidersGridPage\"\n             Title=\"Nested Grids demo\">\n\n    <ContentPage.Resources>\n        <converters:DoubleToIntConverter x:Key=\"doubleToInt\" />\n\n        <Style TargetType=\"Label\">\n            <Setter Property=\"HorizontalTextAlignment\"\n                    Value=\"Center\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"500\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n\n        <BoxView x:Name=\"boxView\"\n                 Color=\"Black\" />\n        <Grid Grid.Row=\"1\"\n              Margin=\"20\">\n            <Grid.RowDefinitions>\n                <RowDefinition />\n                <RowDefinition />\n                <RowDefinition />\n                <RowDefinition />\n                <RowDefinition />\n                <RowDefinition />\n            </Grid.RowDefinitions>\n            <Slider x:Name=\"redSlider\"\n                    ValueChanged=\"OnSliderValueChanged\" />\n            <Label x:DataType=\"Slider\"\n                   Grid.Row=\"1\"\n                   Text=\"{Binding Source={x:Reference redSlider},\n                                  Path=Value,\n                                  Converter={StaticResource doubleToInt},\n                                  ConverterParameter=255,\n                                  StringFormat='Red = {0}'}\" />\n            <Slider x:Name=\"greenSlider\"\n                    Grid.Row=\"2\"\n                    ValueChanged=\"OnSliderValueChanged\" />\n            <Label x:DataType=\"Slider\"\n                   Grid.Row=\"3\"\n                   Text=\"{Binding Source={x:Reference greenSlider},\n                                  Path=Value,\n                                  Converter={StaticResource doubleToInt},\n                                  ConverterParameter=255,\n                                  StringFormat='Green = {0}'}\" />\n            <Slider x:Name=\"blueSlider\"\n                    Grid.Row=\"4\"\n                    ValueChanged=\"OnSliderValueChanged\" />\n            <Label x:DataType=\"Slider\"\n                   Grid.Row=\"5\"\n                   Text=\"{Binding Source={x:Reference blueSlider},\n                                  Path=Value,\n                                  Converter={StaticResource doubleToInt},\n                                  ConverterParameter=255,\n                                  StringFormat='Blue = {0}'}\" />\n        </Grid>\n    </Grid>\n</ContentPage>\n\n```\n\n----------------------------------------\n\nTITLE: Set SearchIconColor on SearchBar - XAML\nDESCRIPTION: This XAML code snippet shows how to set the `SearchIconColor` property of a <xref:Microsoft.Maui.Controls.SearchBar> to blue.  This modifies the color of the search icon displayed within the search bar control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<SearchBar Placeholder=\"Search items...\"\n           SearchIconColor=\"Blue\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Title Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell title color for an Element to teal using the `-maui-shell-title` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_83\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-title: teal;\n```\n\n----------------------------------------\n\nTITLE: Detecting Mock Locations (MAUI C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the IsFromMockProvider property of the Location object to determine if the location data is from a mock location provider. This is useful for detecting and handling potentially inaccurate location data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/SensorsPage.xaml.cs\" id=\"geolocation_ismock\":::\n```\n\n----------------------------------------\n\nTITLE: Handle Toggled Event with Lambda in C#\nDESCRIPTION: This code snippet demonstrates how to assign the Toggled event handler in code using a lambda expression, providing a concise way to respond to the switch's state change.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nSwitch switchControl = new Switch {...};\nswitchControl.Toggled += (sender, e) =>\n{\n    // Perform an action after examining e.Value\n};\n```\n\n----------------------------------------\n\nTITLE: CustomEntryHandler Implementation (Android, net-maui-10.0+)\nDESCRIPTION: This C# code defines a `CustomEntryHandler` for Android, inheriting from `ViewHandler<CustomEntry, MauiAppCompatEditText>`.  It overrides `CreatePlatformView`, `ConnectHandler`, and `DisconnectHandler` to manage the native `MauiAppCompatEditText`. It also implements `MapText` and `MapTextColor` methods to update the native control's properties based on the cross-platform `CustomEntry` control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nusing Microsoft.Maui.Handlers;\nusing Microsoft.Maui.Platform;\nusing MyMauiControl.Controls;\n\nnamespace MyMauiControl.Handlers\n{\n    public partial class CustomEntryHandler : ViewHandler<CustomEntry, MauiAppCompatEditText>\n    {\n        protected override AppCompatEditText CreatePlatformView() => new MauiAppCompatEditText(Context);\n\n        protected override void ConnectHandler(MauiAppCompatEditText platformView)\n        {\n            base.ConnectHandler(platformView);\n\n            // Perform any control setup here\n        }\n\n        protected override void DisconnectHandler(MauiAppCompatEditText platformView)\n        {\n            // Perform any native view cleanup here\n            platformView.Dispose();\n            base.DisconnectHandler(platformView);\n        }\n\n        public static void MapText(CustomEntryHandler handler, CustomEntry view)\n        {\n            handler.PlatformView.Text = view.Text;\n            handler.PlatformView?.SetSelection(handler.PlatformView?.Text?.Length ?? 0);\n        }\n\n        public static void MapTextColor(CustomEntryHandler handler, CustomEntry view)\n        {\n            handler.PlatformView?.SetTextColor(view.TextColor.ToPlatform());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Cleartext Traffic in MainApplication.cs (C#)\nDESCRIPTION: Enables clear-text traffic on Android for DEBUG builds by setting the `UsesCleartextTraffic` property to `true`. This configuration, applied via a compiler directive, is essential for allowing unencrypted HTTP communication during development and debugging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#if DEBUG\n[Application(UsesCleartextTraffic = true)]\n#else\n[Application]\n#endif\npublic class MainApplication : MauiApplication\n{\n    public MainApplication(IntPtr handle, JniHandleOwnership ownership)\n        : base(handle, ownership)\n    {\n    }\n\n    protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadow to an Image (property element syntax)\nDESCRIPTION: This XAML code snippet shows how to add a shadow to an Image control using property element syntax. It sets the Shadow property of the Image to a Shadow object and defines the Brush, Offset, Radius, and Opacity properties of the shadow. This approach is compatible with all .NET MAUI versions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/shadow.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n       WidthRequest=\"250\"\n       HeightRequest=\"310\">\n    <Image.Shadow>\n        <Shadow Brush=\"Black\"\n                Offset=\"20,20\"\n                Radius=\"40\"\n                Opacity=\"0.8\" />\n    </Image.Shadow>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Setting TargetNullValue in XAML (ListView)\nDESCRIPTION: This XAML snippet demonstrates setting TargetNullValue for Image and Label controls within a ListView's ItemTemplate. TargetNullValue is used when the binding source resolves to null. If ImageUrl or Location properties are null, the respective controls will display the defined TargetNullValue.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\"\n          ...>\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:Monkey\">\n            <ViewCell>\n                <Grid>\n                    ...\n                    <Image Source=\"{Binding ImageUrl, TargetNullValue='https://upload.wikimedia.org/wikipedia/commons/2/20/Point_d_interrogation.jpg'}\"\n                           ... />\n                    ...\n                    <Label Text=\"{Binding Location, TargetNullValue='Location unknown'}\"\n                           ... />\n                </Grid>\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Add Context Menu Items in XAML\nDESCRIPTION: This XAML snippet shows how to add context menu items (MenuItem objects) to a ListView using the ViewCell.ContextActions collection within the DataTemplate for each item. It demonstrates how to bind commands and command parameters to the menu items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_33\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView x:Name=\"listView\"\n          ItemsSource=\"{Binding Monkeys}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <ViewCell>\n                <ViewCell.ContextActions>\n                    <MenuItem Text=\"Favorite\"\n                              Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=FavoriteCommand}\"\n                              CommandParameter=\"{Binding}\" />\n                    <MenuItem Text=\"Delete\"\n                              Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=DeleteCommand}\"\n                              CommandParameter=\"{Binding}\" />\n                </ViewCell.ContextActions>\n\n                ...\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Publish .NET MAUI App with dotnet publish\nDESCRIPTION: This command publishes the .NET MAUI app for Windows. It specifies the target framework, build configuration (Release), and a runtime identifier override to workaround a Windows SDK bug. Replace `net8.0-windows10.0.19041.0` with your target framework and choose the correct runtime identifier based on your target platform (x64 or x86).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64\n```\n\n----------------------------------------\n\nTITLE: Initializing NavigationPage with a Root Page in App Class (net-maui-8.0)\nDESCRIPTION: This code snippet shows how to initialize a NavigationPage with a root page in the App class for .NET MAUI 8.0. It creates a new NavigationPage instance and sets the MainPage property of the Application to this instance, providing the initial page for the app's navigation stack. This ensures the app starts with a NavigationPage containing the specified root page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        MainPage = new NavigationPage(new MainPage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consume Localized Images in XAML\nDESCRIPTION: This example shows how to consume localized images by setting the `Source` property of an `Image` control to the image filename. This assumes that the images are correctly placed in platform-specific folders.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"flag.png\" />\n```\n\n----------------------------------------\n\nTITLE: Display a prompt with options in C#\nDESCRIPTION: This code snippet shows how to display a prompt with optional arguments using the `DisplayPromptAsync` method in .NET MAUI. It sets the initial value, maximum length, and keyboard type for user input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pop-ups.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring result = await DisplayPromptAsync(\"Question 2\", \"What's 5 + 5?\", initialValue: \"10\", maxLength: 2, keyboard: Keyboard.Numeric);\n```\n\n----------------------------------------\n\nTITLE: Setting CurrentItem in C# for Tab Selection in .NET MAUI\nDESCRIPTION: This C# code demonstrates how to select a tab programmatically by setting the `CurrentItem` property of the Shell object. The `CurrentItem` property is assigned the `ShellContent` object named `dogsItem`. The second example illustrates how to access the `Shell.Current` static property from any class to set the `CurrentItem`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nCurrentItem = dogsItem;\n```\n\nLANGUAGE: C#\nCODE:\n```\nShell.Current.CurrentItem = dogsItem;\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Scroll Bar Visibility with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the vertical scroll bar visibility of a ScrollView to always using the `-maui-vertical-scroll-bar-visibility` property. Possible values are `default`, `always`, `never`, or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_71\n\nLANGUAGE: css\nCODE:\n```\n-maui-vertical-scroll-bar-visibility: always;\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in CollectionView (C#)\nDESCRIPTION: This C# code demonstrates enabling multiple item selection in a CollectionView programmatically. The `SelectionMode` property is set to `Multiple`, and the `SelectionChanged` event is handled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    SelectionMode = SelectionMode.Multiple\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\ncollectionView.SelectionChanged += OnCollectionViewSelectionChanged;\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Page onto the Navigation Stack\nDESCRIPTION: This code snippet shows how to push a new page onto the navigation stack using the PushAsync method. It assumes that you are within a Page-derived class and have access to the Navigation property.  The DetailsPage instance is created and pushed onto the stack, making it the currently visible page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait Navigation.PushAsync(new DetailsPage());\n```\n\n----------------------------------------\n\nTITLE: MSBuild Property for Resource Designer Generation\nDESCRIPTION: This XML snippet shows how to disable the generation of `Resource.designer.cs` in a Xamarin.Android binding project by setting the `$(AndroidGenerateResourceDesigner)` property to `false`. This can be useful to resolve conflicts or issues during migration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <AndroidGenerateResourceDesigner>false</AndroidGenerateResourceDesigner>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Open map app with a GPS location (C#)\nDESCRIPTION: This C# code snippet demonstrates how to open the installed map application at a specific GPS location using the IMap interface. It creates a Location object with latitude and longitude coordinates and then calls the OpenAsync method to launch the map app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar location = new Location(47.645160, -122.1306032);\n\nawait Map.Default.OpenAsync(location);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Window Object from Lifecycle Event C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the `Window` object within a Windows lifecycle event handler in .NET MAUI. It retrieves the `IWindow` instance using the `GetWindow` extension method. It depends on `Microsoft.Maui.LifecycleEvents`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n\nnamespace PlatformLifecycleDemo\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureLifecycleEvents(events =>\n                {\n#if WINDOWS\n                    events.AddWindows(windows => windows\n                            .OnClosed((window, args) =>\n                            {\n                                IWindow appWindow = window.GetWindow();\n                            }));\n#endif\n                });\n\n            return builder.Build();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Version Information in .NET MAUI C#\nDESCRIPTION: This code snippet showcases how to read and display version tracking information in a .NET MAUI application. It accesses properties of the IVersionTracking interface to display information such as current version, build number, and first launch status.  The data is written to labels on the page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/version-tracking.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.ApplicationModel;\n\nnamespace ApplicationModel;\n\npublic partial class AppModelPage : ContentPage\n{\n\tpublic AppModelPage()\n\t{\n\t\tInitializeComponent();\n\n\t\tVersionTracking.Track();\n\n\t\tVersionLabel.Text = VersionTracking.CurrentVersion;\n\t\tBuildLabel.Text = VersionTracking.CurrentBuild;\n\t\tPreviousVersionLabel.Text = VersionTracking.PreviousVersion ?? \"none\";\n\t\tPreviousBuildLabel.Text = VersionTracking.PreviousBuild ?? \"none\";\n\t\tFirstVersionLabel.Text = VersionTracking.FirstVersion ?? \"none\";\n\t\tFirstBuildLabel.Text = VersionTracking.FirstBuild ?? \"none\";\n\n\t\tIsFirstLaunchEverLabel.Text = VersionTracking.IsFirstLaunchEver.ToString();\n\t\tIsFirstLaunchForCurrentVersionLabel.Text = VersionTracking.IsFirstLaunchForCurrentVersion.ToString();\n\t\tIsFirstLaunchForCurrentBuildLabel.Text = VersionTracking.IsFirstLaunchForCurrentBuild.ToString();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross-Platform Control in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to create a cross-platform control named `Video` that inherits from `Microsoft.Maui.Controls.View`. It defines bindable properties for `AreTransportControlsEnabled`, `Source`, `AutoPlay`, and `IsLooping`, which provide the public API for the control. These properties allow developers to customize the video playback behavior and appearance from a cross-platform perspective.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\n\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        public static readonly BindableProperty AreTransportControlsEnabledProperty =\n            BindableProperty.Create(nameof(AreTransportControlsEnabled), typeof(bool), typeof(Video), true);\n\n        public static readonly BindableProperty SourceProperty =\n            BindableProperty.Create(nameof(Source), typeof(VideoSource), typeof(Video), null);\n\n        public static readonly BindableProperty AutoPlayProperty =\n            BindableProperty.Create(nameof(AutoPlay), typeof(bool), typeof(Video), true);\n\n        public static readonly BindableProperty IsLoopingProperty =\n            BindableProperty.Create(nameof(IsLooping), typeof(bool), typeof(Video), false);            \n\n        public bool AreTransportControlsEnabled\n        {\n            get { return (bool)GetValue(AreTransportControlsEnabledProperty); }\n            set { SetValue(AreTransportControlsEnabledProperty, value); }\n        }\n\n        [TypeConverter(typeof(VideoSourceConverter))]\n        public VideoSource Source\n        {\n            get { return (VideoSource)GetValue(SourceProperty); }\n            set { SetValue(SourceProperty, value); }\n        }\n\n        public bool AutoPlay\n        {\n            get { return (bool)GetValue(AutoPlayProperty); }\n            set { SetValue(AutoPlayProperty, value); }\n        }\n\n        public bool IsLooping\n        {\n            get { return (bool)GetValue(IsLoopingProperty); }\n            set { SetValue(IsLoopingProperty, value); }\n        }        \n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Draw a Rectangle on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a dark blue rectangle on an ICanvas object using the DrawRectangle method. It sets the stroke color to dark blue and the stroke size to 4 before drawing the rectangle with dimensions 100x50 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.DarkBlue;\ncanvas.StrokeSize = 4;\ncanvas.DrawRectangle(10, 10, 100, 50);\n```\n\n----------------------------------------\n\nTITLE: Adding Platform Behavior in XAML\nDESCRIPTION: This XAML snippet shows how to add a custom `TintColorBehavior` to an `Image` control. The behavior is defined within the `Image.Behaviors` collection and sets the `TintColor` property to \"Red\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_16\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n       HeightRequest=\"200\"\n       HorizontalOptions=\"Center\">\n    <Image.Behaviors>\n        <local:TintColorBehavior TintColor=\"Red\" />\n    </Image.Behaviors>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Getting Device Type (Physical/Virtual) - .NET MAUI (C#)\nDESCRIPTION: This code snippet shows how to determine if the application is running on a physical device or a virtual device (emulator or simulator) using the DeviceInfo.DeviceType property. This information can be used to adjust application behavior or enable/disable certain features based on the environment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/information.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nif (DeviceInfo.DeviceType == DeviceType.Physical)\n{\n\t// Do something if it's a physical device\n}\nelse\n{\n\t// Do something if it's a virtual device\n}\n```\n\n----------------------------------------\n\nTITLE: Change Selected Item Color - XAML\nDESCRIPTION: This XAML snippet demonstrates how to change the background color of a selected item in a CollectionView using Visual States.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_15\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style TargetType=\"Grid\">\n            <Setter Property=\"VisualStateManager.VisualStateGroups\">\n                <VisualStateGroupList>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\" />\n                        <VisualState x:Name=\"Selected\">\n                            <VisualState.Setters>\n                                <Setter Property=\"BackgroundColor\"\n                                        Value=\"LightSkyBlue\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateGroupList>\n            </Setter>\n        </Style>\n    </ContentPage.Resources>\n    <Grid Margin=\"20\">\n        <CollectionView ItemsSource=\"{Binding Monkeys}\"\n                        SelectionMode=\"Single\">\n            <CollectionView.ItemTemplate>\n                <DataTemplate>\n                    <Grid Padding=\"10\">\n                        ...\n                    </Grid>\n                </DataTemplate>\n            </CollectionView.ItemTemplate>\n        </CollectionView>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Implicit Grid Row Declaration in Xamarin.Forms (XML)\nDESCRIPTION: This XML snippet shows how Xamarin.Forms automatically infers missing rows in a Grid. Adding a Label with Grid.Row=\"1\" to a Grid without explicitly defining RowDefinitions results in the creation of a second row in Xamarin.Forms. This behavior differs from .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/layouts.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n    <Label Text=\"Hello\"/>\n    <Label Grid.Row=\"1\" Text=\"World\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Alignment Preferences in StackLayout (C#)\nDESCRIPTION: This C# snippet creates a StackLayout and adds Label objects with different HorizontalOptions settings (Start, Center, End, Fill). This demonstrates how to achieve the same layout as the XAML example using C# code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AlignmentPage : ContentPage\n{\n    public AlignmentPage()\n    {\n        Title = \"Alignment demo\";\n\n        StackLayout stackLayout = new StackLayout\n        {\n            Margin = new Thickness(20),\n            Spacing = 6\n        };\n\n        stackLayout.Add(new Label { Text = \"Start\", BackgroundColor = Colors.Gray, HorizontalOptions = LayoutOptions.Start });\n        stackLayout.Add(new Label { Text = \"Center\", BackgroundColor = Colors.Gray, HorizontalOptions = LayoutOptions.Center });\n        stackLayout.Add(new Label { Text = \"End\", BackgroundColor = Colors.Gray, HorizontalOptions = LayoutOptions.End });\n        stackLayout.Add(new Label { Text = \"Fill\", BackgroundColor = Colors.Gray, HorizontalOptions = LayoutOptions.Fill });\n\n        Content = stackLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Padding Right CSS in .NET MAUI\nDESCRIPTION: Sets the right padding for .NET MAUI Button, ImageButton, Layout, and Page. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_47\n\nLANGUAGE: CSS\nCODE:\n```\npadding-right: 2;\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Queries for SMS Intent (XML)\nDESCRIPTION: This XML snippet configures Android manifest to declare the intent for SMS functionality. It is necessary when the target Android version is Android 11 (API 30) or higher, in order to comply with Android's package visibility requirements. Add this within the <manifest> node in Platforms/Android/AndroidManifest.xml.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/sms.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"smsto\"/>\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Arranging elements in AbsoluteLayout using XAML\nDESCRIPTION: This XAML snippet demonstrates how to position and size elements within an AbsoluteLayout using the AbsoluteLayout.LayoutBounds and AbsoluteLayout.LayoutFlags attached properties.  Each BoxView is given an explicit size and positioned proportionally within the layout.  Rotation is applied to some of the BoxView elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<AbsoluteLayout Margin=\"40\">\n    <BoxView Color=\"Red\"\n             AbsoluteLayout.LayoutFlags=\"PositionProportional\"\n             AbsoluteLayout.LayoutBounds=\"0.5, 0, 100, 100\"\n             Rotation=\"30\" />\n    <BoxView Color=\"Green\"\n             AbsoluteLayout.LayoutFlags=\"PositionProportional\"\n             AbsoluteLayout.LayoutBounds=\"0.5, 0, 100, 100\"\n             Rotation=\"60\" />\n    <BoxView Color=\"Blue\"\n             AbsoluteLayout.LayoutFlags=\"PositionProportional\"\n             AbsoluteLayout.LayoutBounds=\"0.5, 0, 100, 100\" />\n</AbsoluteLayout>\n```\n\n----------------------------------------\n\nTITLE: Define INotificationActionService Interface C#\nDESCRIPTION: Defines an interface for a service that handles notification actions. It contains a single method, `TriggerAction`, that accepts an action string as input. It provides a centralized mechanism for handling notification-related actions triggered from the app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsDemo.Services;\n\npublic interface INotificationActionService\n{\n    void TriggerAction(string action);\n}\n```\n\n----------------------------------------\n\nTITLE: Apply ControlTemplate with Style XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply a ControlTemplate to a custom control using an implicit style. It shows how to define a style targeting the CardView control and set its ControlTemplate property to a StaticResource referencing a defined ControlTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"\n             ...>\n    <ContentPage.Resources>\n        <ControlTemplate x:Key=\"CardViewControlTemplate\">\n            ...\n        </ControlTemplate>\n\n        <Style TargetType=\"controls:CardView\">\n            <Setter Property=\"ControlTemplate\"\n                    Value=\"{StaticResource CardViewControlTemplate}\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout Margin=\"30\">\n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"John Doe\"\n                           CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Toggle Shake Detection - .NET MAUI\nDESCRIPTION: This C# code snippet shows how to toggle shake detection using the accelerometer sensor in a .NET MAUI application. It demonstrates starting and stopping the accelerometer and subscribing to the ShakeDetected event. The code is intended to be part of a larger application, likely within a XAML page's code-behind file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// This code snippet is present in multiple documents under the same ID, and should only be included once.\n// To prevent duplication, this placeholder is used.\n// The complete code can be found in the other document, which is also processed by the same pipeline.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom IDrawable Class in C#\nDESCRIPTION: This code snippet demonstrates how to create a class that implements the IDrawable interface.  The Draw method is where the drawing code is implemented. It takes an ICanvas and RectF as arguments, providing the drawing surface and its dimensions. This custom drawable class is then assigned to a GraphicsView to render its contents.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/graphicsview.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public class GraphicsDrawable : IDrawable\n    {\n        public void Draw(ICanvas canvas, RectF dirtyRect)\n        {\n            // Drawing code goes here\n        }      \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Distance Object Using FromMeters - C#\nDESCRIPTION: This C# code creates a Distance object using the FromMeters factory method, specifying the distance in meters.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nDistance distance2 = Distance.FromMeters(1450.5);   // argument represents the number of meters\n```\n\n----------------------------------------\n\nTITLE: Run Code on UI Thread with Lambda - .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to use the BeginInvokeOnMainThread method with a lambda expression to execute code on the main UI thread. The lambda expression encapsulates the code to be executed, which in this case updates a label's text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/main-thread.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMainThread.BeginInvokeOnMainThread(() =>\n{\n    myLabel.Text = \"Hello from the main thread!\";\n});\n```\n\n----------------------------------------\n\nTITLE: Toggle Accelerometer Monitoring in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to start and stop monitoring the accelerometer sensor using the IAccelerometer interface in .NET MAUI. It also handles the ReadingChanged event to display the accelerometer data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool _isAccelerometerAvailable = Accelerometer.Default.IsSupported;\n\nprivate void AccelerometerStartStop()\n{\n    if (!_isAccelerometerAvailable)\n    {\n        return;\n    }\n\n    if (!Accelerometer.Default.IsMonitoring)\n    {\n        Accelerometer.Default.ReadingChanged += Accelerometer_ReadingChanged;\n        Accelerometer.Default.Start(SensorSpeed.UI);\n    }\n    else\n    {\n        Accelerometer.Default.Stop();\n        Accelerometer.Default.ReadingChanged -= Accelerometer_ReadingChanged;\n    }\n}\n\n\nprivate void Accelerometer_ReadingChanged(object sender, AccelerometerChangedEventArgs e)\n{\n    // Update UI Label with accelerometer reading\n    lblAccelerometer.Text = $\"Accelerometer: X: {e.Reading.X}, Y: {e.Reading.Y}, Z: {e.Reading.Z}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching SwipeGestureRecognizer to BoxView XAML\nDESCRIPTION: This XAML snippet demonstrates how to attach a SwipeGestureRecognizer to a BoxView, setting the direction to 'Left' and specifying an event handler 'OnSwiped'.  It configures the BoxView to detect left swipes and trigger the associated event handler. Requires .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView Color=\"Teal\" ...>\n    <BoxView.GestureRecognizers>\n        <SwipeGestureRecognizer Direction=\"Left\" Swiped=\"OnSwiped\"/>\n    </BoxView.GestureRecognizers>\n</BoxView>\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Profiles in .NET MAUI\nDESCRIPTION: This C# code snippet shows how to check the type of connection profile the device is actively using through the IConnectivity interface. This helps determine whether the device is connected via Bluetooth, cellular, WiFi, or other means.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/networking.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/NetworkingPage.cs\" id=\"network_profiles\":::\n```\n\n----------------------------------------\n\nTITLE: Create MauiProgram.cs for App Entry Point\nDESCRIPTION: Creates the MauiProgram.cs file which defines the cross-platform app entry point. The CreateMauiApp method is implemented to create a MauiApp builder, use the App class, and build the MauiApp instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nnamespace YOUR_NAMESPACE_HERE;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>();\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Switch in C#\nDESCRIPTION: This code snippet demonstrates how to create a Switch control programmatically in C# and set its IsToggled property to true, initializing it to the 'on' state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSwitch switchControl = new Switch { IsToggled = true };\n```\n\n----------------------------------------\n\nTITLE: Add Razor SDK to CSPROJ File\nDESCRIPTION: Adds the Razor SDK to a .NET MAUI project's CSPROJ file.  This is required to build and package projects containing Razor files for Blazor components within a .NET MAUI app.  The SDK enables the project to properly handle Razor files during the build process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\n```\n\n----------------------------------------\n\nTITLE: Add Menu Item to Flyout - XAML\nDESCRIPTION: This XAML snippet illustrates how to add a MenuItem to a .NET MAUI Shell flyout. The MenuItem is configured with text, an icon, a command, and a command parameter. The command is bound to the HelpCommand property and passes a URL as the parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       xmlns:local=\"clr-namespace:Xaminals\"\n       x:DataType=\"local:AppShell\">\n    ...\n    <MenuItem Text=\"Help\"\n              IconImageSource=\"help.png\"\n              Command=\"{Binding HelpCommand}\"\n              CommandParameter=\"https://learn.microsoft.com/dotnet/maui/fundamentals/shell\" />\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll Animation in C#\nDESCRIPTION: This C# code snippet demonstrates how to disable the scroll animation when scrolling an item into view using the `ScrollTo` method.  It sets the `animate` parameter to `false`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nlistView.ScrollTo(monkey, position: ScrollToPosition.MakeVisible, animate: false);\n```\n\n----------------------------------------\n\nTITLE: Build and Run .NET MAUI Mac Catalyst App\nDESCRIPTION: This snippet demonstrates how to build and run a .NET MAUI app targeting Mac Catalyst using the .NET CLI. The `dotnet build` command restores dependencies, builds the application, and then launches it on the macOS platform. It requires .NET MAUI to be installed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/cli.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\ncd MyMauiApp\ndotnet build -t:Run -f net8.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Consuming IMultiValueConverter in XAML\nDESCRIPTION: This XAML code demonstrates how to consume a IMultiValueConverter by instantiating it in a resource dictionary and then referencing it using the StaticResource markup extension to set the MultiBinding.Converter property. It binds the CheckBox.IsChecked property to a MultiBinding that uses the AllTrueMultiConverter to determine if the CheckBox should be checked.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.MultiBindingConverterPage\"\n             Title=\"MultiBinding Converter demo\"\n             x:DataType=\"local:GroupViewModel\">\n\n    <ContentPage.Resources>\n        <local:AllTrueMultiConverter x:Key=\"AllTrueConverter\" />\n        <local:InverterConverter x:Key=\"InverterConverter\" />\n    </ContentPage.Resources>\n\n    <CheckBox>\n        <CheckBox.IsChecked>\n            <MultiBinding Converter=\"{StaticResource AllTrueConverter}\">\n                <Binding Path=\"Employee.IsOver16\" />\n                <Binding Path=\"Employee.HasPassedTest\" />\n                <Binding Path=\"Employee.IsSuspended\"\n                         Converter=\"{StaticResource InverterConverter}\" />\n            </MultiBinding>\n        </CheckBox.IsChecked>\n    </CheckBox>\n</ContentPage>    \n```\n\n----------------------------------------\n\nTITLE: StackLayout Spacing C#\nDESCRIPTION: Demonstrates setting the Spacing property of a StackLayout using C# to add space between child elements. It contains Label and BoxView objects within the StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class StackLayoutSpacingPage : ContentPage\n{\n    public StackLayoutSpacingPage()\n    {\n        Title = \"StackLayout Spacing demo\";\n\n        StackLayout stackLayout = new StackLayout\n        {\n            Margin = new Thickness(20),\n            Spacing = 6\n        };\n\n        stackLayout.Add(new Label { Text = \"Primary colors\" });\n        stackLayout.Add(new BoxView { Color = Colors.Red, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Yellow, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Blue, HeightRequest = 40 });\n        stackLayout.Add(new Label { Text = \"Secondary colors\" });\n        stackLayout.Add(new BoxView { Color = Colors.Green, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Orange, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Purple, HeightRequest = 40 });\n\n        Content = stackLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a Modal Page - C#\nDESCRIPTION: This snippet demonstrates how to push a new page onto the modal stack using the `PushModalAsync` method. This makes the new page the active page, covering the previous one. The `DetailsPage` will be displayed as a modal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait Navigation.PushModalAsync(new DetailsPage());\n```\n\n----------------------------------------\n\nTITLE: Enabling TabbedPage Swipe Paging in XAML\nDESCRIPTION: This XAML snippet shows how to enable swipe paging in a TabbedPage on Android by setting the `TabbedPage.IsSwipePagingEnabled` attached property to `true`. It also sets the `OffscreenPageLimit` to 2, which retains two pages on either side of the current page. Requires xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-page-swiping.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage ...\n            xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\"\n            android:TabbedPage.OffscreenPageLimit=\"2\"\n            android:TabbedPage.IsSwipePagingEnabled=\"true\">\n    ...\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Disable Selection - C#\nDESCRIPTION: This C# code shows how to disable selection in a CollectionView by setting the SelectionMode property to None.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    SelectionMode = SelectionMode.None\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying Multiple Explicit Styles in .NET MAUI XAML\nDESCRIPTION: This example shows how to define multiple explicit styles (labelRedStyle, labelGreenStyle, labelBlueStyle) within a ContentPage's ResourceDictionary. Each style customizes the HorizontalOptions, VerticalOptions, FontSize, and TextColor of Label elements. The styles are then applied to individual Label controls using the StaticResource markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style x:Key=\"labelRedStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n            <Setter Property=\"FontSize\" Value=\"18\" />\n            <Setter Property=\"TextColor\" Value=\"Red\" />\n        </Style>\n        <Style x:Key=\"labelGreenStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n            <Setter Property=\"FontSize\" Value=\"18\" />\n            <Setter Property=\"TextColor\" Value=\"Green\" />\n        </Style>\n        <Style x:Key=\"labelBlueStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n            <Setter Property=\"FontSize\" Value=\"18\" />\n            <Setter Property=\"TextColor\" Value=\"Blue\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <Label Text=\"These labels\"\n               Style=\"{StaticResource labelRedStyle}\" />\n        <Label Text=\"are demonstrating\"\n               Style=\"{StaticResource labelGreenStyle}\" />\n        <Label Text=\"explicit styles,\"\n               Style=\"{StaticResource labelBlueStyle}\" />\n        <Label Text=\"and an explicit style override\"\n               Style=\"{StaticResource labelBlueStyle}\"\n               TextColor=\"Teal\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Apple Sign In (C#)\nDESCRIPTION: This C# code snippet shows how to use the native Apple Sign In APIs for iOS 13 and higher and fall back to web authentication flow for older versions and other platforms. It uses the AppleSignInAuthenticator and WebAuthenticator classes to perform authentication.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar scheme = \"...\"; // Apple, Microsoft, Google, Facebook, etc.\nvar authUrlRoot = \"https://mysite.com/mobileauth/\";\nWebAuthenticatorResult result = null;\n\nif (scheme.Equals(\"Apple\")\n    && DeviceInfo.Platform == DevicePlatform.iOS\n    && DeviceInfo.Version.Major >= 13)\n{\n    // Use Native Apple Sign In API's\n    result = await AppleSignInAuthenticator.AuthenticateAsync();\n}\nelse\n{\n    // Web Authentication flow\n    var authUrl = new Uri($\"{authUrlRoot}{scheme}\");\n    var callbackUrl = new Uri(\"myapp://\");\n\n    result = await WebAuthenticator.Default.AuthenticateAsync(authUrl, callbackUrl);\n}\n\nvar authToken = string.Empty;\n\nif (result.Properties.TryGetValue(\"name\", out string name) && !string.IsNullOrEmpty(name))\n    authToken += $\"Name: {name}{Environment.NewLine}\";\n\nif (result.Properties.TryGetValue(\"email\", out string email) && !string.IsNullOrEmpty(email))\n    authToken += $\"Email: {email}{Environment.NewLine}\";\n\n// Note that Apple Sign In has an IdToken and not an AccessToken\nauthToken += result?.AccessToken ?? result?.IdToken;\n```\n\n----------------------------------------\n\nTITLE: Set Home Indicator Visibility in C# - .NET MAUI\nDESCRIPTION: This C# snippet demonstrates how to set the `PrefersHomeIndicatorAutoHidden` property on a `Page` using the fluent API to control the visibility of the home indicator on iOS. It utilizes the `On<iOS>()` extension method and requires the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-home-indicator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nOn<iOS>().SetPrefersHomeIndicatorAutoHidden(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in Program.cs (C#)\nDESCRIPTION: This code snippet configures API key authentication in the `Program.cs` file. It adds authentication services to the container, sets the default authentication and challenge schemes, and registers the API key authentication scheme using the custom extension method. The API key configuration is bound from the \"Authentication\" section of the application configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsAPI.Authentication;\n\nbuilder.Services.AddControllers();\n\nbuilder.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = ApiKeyAuthOptions.DefaultScheme;\n    options.DefaultChallengeScheme = ApiKeyAuthOptions.DefaultScheme;\n}).AddApiKeyAuth(builder.Configuration.GetSection(\"Authentication\").Bind);\n```\n\n----------------------------------------\n\nTITLE: Perform navigation with absolute route in C#\nDESCRIPTION: This C# code demonstrates how to perform navigation using an absolute URI with the GoToAsync method. It navigates to the page associated with the 'monkeys' route, which is defined on a ShellContent object. Note: Absolute routes do not work with pages registered with Routing.RegisterRoute.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nawait Shell.Current.GoToAsync(\"//animals/monkeys\");\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll - C#\nDESCRIPTION: This C# code disables scrolling on a .NET MAUI Map. A new Map object is created, and its IsScrollEnabled property is set to false, which prevents the user from scrolling the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map\n{\n    IsScrollEnabled = false\n};\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in Android Fragment - C#\nDESCRIPTION: This code initializes .NET MAUI within an Android Fragment.  It overrides `OnCreateView` and `OnViewCreated` to inflate the layout and create the MAUI embedded window context using `CreateEmbeddedWindowContext`. Requires AndroidX Fragment library and `MyEmbeddedMauiApp.Shared` to be initialized elsewhere.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Runtime;\nusing Android.Views;\nusing AndroidX.Navigation.Fragment;\nusing Microsoft.Maui.Controls.Embedding;\nusing Fragment = AndroidX.Fragment.App.Fragment;\nusing View = Android.Views.View;\n\nnamespace MyNativeEmbeddedApp.Droid;\n\n[Register(\"com.companyname.nativeembeddingdemo.\" + nameof(FirstFragment))]\npublic class FirstFragment : Fragment\n{\n    Activity? _window;\n    IMauiContext? _windowContext;\n\n    public IMauiContext WindowContext =>\n        _windowContext ??= MyEmbeddedMauiApp.Shared.CreateEmbeddedWindowContext(_window ?? throw new InvalidOperationException());\n\n    public override View? OnCreateView(LayoutInflater inflater, ViewGroup? container, Bundle? savedInstanceState) =>\n        inflater.Inflate(Resource.Layout.fragment_first, container, false);\n\n    public override void OnViewCreated(View view, Bundle? savedInstanceState)\n    {\n        base.OnViewCreated(view, savedInstanceState);\n\n        _window ??= Activity;\n\n        // Create MAUI embedded window context\n        var context = WindowContext;\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Padding Top CSS in .NET MAUI\nDESCRIPTION: Sets the top padding for .NET MAUI Button, ImageButton, Layout, and Page. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_46\n\nLANGUAGE: CSS\nCODE:\n```\npadding-top: 4;\n```\n\n----------------------------------------\n\nTITLE: Register DragOver Handler XAML\nDESCRIPTION: This XAML snippet demonstrates how to register a handler for the `DragOver` event of a `DropGestureRecognizer` attached to an `Image` control. The `DragOver` event is raised when a drag source is dragged over the drop target.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<Image BackgroundColor=\"Silver\"\n       HeightRequest=\"300\"\n       WidthRequest=\"250\">\n    <Image.GestureRecognizers>\n        <DropGestureRecognizer DragOver=\"OnDragOver\" />\n    </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Using GraphicsView with a Drawable in XAML\nDESCRIPTION: This XAML snippet shows how to define an IDrawable object as a resource and then use it in a GraphicsView by referencing its key. The GraphicsView displays the content drawn by the specified IDrawable implementation. HeightRequest and WidthRequest define the size of the view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/graphicsview.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n             xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n             xmlns:drawable=\"clr-namespace:MyMauiApp\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Resources>\n        <drawable:GraphicsDrawable x:Key=\"drawable\" />\n    </ContentPage.Resources>\n    <VerticalStackLayout>\n        <GraphicsView Drawable=\"{StaticResource drawable}\"\n                      HeightRequest=\"300\"\n                      WidthRequest=\"400\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker UpdateMode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `UpdateMode` attached property on a `DatePicker` to control when item selection occurs on iOS.  It uses the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace. The `UpdateMode` is set to `WhenFinished`, meaning selection only occurs when the 'Done' button is pressed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/datepicker-selection.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n       <DatePicker MinimumDate=\"01/01/2020\"\n                   MaximumDate=\"12/31/2020\"\n                   ios:DatePicker.UpdateMode=\"WhenFinished\" />\n       ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Processing FileVideoSource for iOS/Mac Catalyst in MAUI\nDESCRIPTION: This code snippet demonstrates how to process a `FileVideoSource` on iOS and Mac Catalyst within a MAUI application. It uses `AVAsset.FromUrl` with `NSUrl.CreateFileUrl` to create an `AVAsset` from the file URI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            AVAsset asset = null;\n            ...\n\n            else if (_video.Source is FileVideoSource)\n            {\n                string uri = (_video.Source as FileVideoSource).File;\n                if (!string.IsNullOrWhiteSpace(uri))\n                    asset = AVAsset.FromUrl(NSUrl.CreateFileUrl(new [] { uri }));\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Announcing Text with Semantic Screen Reader - MAUI\nDESCRIPTION: This C# code snippet uses the `SemanticScreenReader.Announce` method to instruct the screen reader to announce a specific text.  This allows the application to provide custom announcements to the user.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nSemanticScreenReader.Default.Announce(\"This is the announcement text.\");\n```\n\n----------------------------------------\n\nTITLE: Create SolidPaint Object with Color Property\nDESCRIPTION: Demonstrates creating a SolidPaint object and setting its color property to silver, then using it to fill a rounded rectangle, and adding a shadow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSolidPaint solidPaint = new SolidPaint\n{\n    Color = Colors.Silver\n};\n\nRectF solidRectangle = new RectF(100, 100, 200, 100);\ncanvas.SetFillPaint(solidPaint, solidRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(solidRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Set State on Multiple Elements - .NET MAUI XAML\nDESCRIPTION: This example demonstrates setting the Text property of an Entry and the Scale property of a Button within the Pressed visual state. The TargetName allows setting properties on elements other than the one whose state is changing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Label Text=\"What is the capital of France?\" />\n    <Entry x:Name=\"entry\"\n           Placeholder=\"Enter answer\" />\n    <Button Text=\"Reveal answer\">\n        <VisualStateManager.VisualStateGroups>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\" />\n                <VisualState Name=\"Pressed\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Scale\"\n                                Value=\"0.8\" />\n                        <Setter TargetName=\"entry\"\n                                Property=\"Entry.Text\"\n                                Value=\"Paris\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateManager.VisualStateGroups>\n    </Button>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Loading Pages at App Startup in .NET MAUI Shell\nDESCRIPTION: This XAML code snippet demonstrates how to load ContentPage objects at app startup within a .NET MAUI Shell application by setting the Content property of ShellContent objects. This approach bypasses the typical on-demand page creation in response to navigation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n     <ShellContent Title=\"Cats\"\n                   Icon=\"cat.png\">\n         <views:CatsPage />\n     </ShellContent>\n     <ShellContent Title=\"Dogs\"\n                   Icon=\"dog.png\">\n         <views:DogsPage />\n     </ShellContent>\n     <ShellContent Title=\"Monkeys\"\n                   Icon=\"monkey.png\">\n         <views:MonkeysPage />\n     </ShellContent>\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Max Lines CSS in .NET MAUI\nDESCRIPTION: Sets the maximum number of lines for a .NET MAUI Label. The value should be an integer or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_39\n\nLANGUAGE: CSS\nCODE:\n```\nmax-lines: 2;\n```\n\n----------------------------------------\n\nTITLE: Share Multiple Files with IShare.RequestAsync - C#\nDESCRIPTION: This C# code snippet demonstrates sharing multiple files using the IShare.RequestAsync method with ShareMultipleFilesRequest. It first creates two text files in the cache directory and writes content to them.  Then, it creates a ShareMultipleFilesRequest object with a list of ShareFile objects, each representing a file to be shared. Finally, it calls IShare.RequestAsync to initiate the sharing process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/share.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the files\nList<string> files = new();\nfiles.Add(Path.Combine(FileSystem.CacheDirectory, \"tempfile1.txt\"));\nfiles.Add(Path.Combine(FileSystem.CacheDirectory, \"tempfile2.txt\"));\n\nFile.WriteAllText(files[0], \"Hello World of Share 1!\");\nFile.WriteAllText(files[1], \"Hello World of Share 2!\");\n\nList<ShareFile> shareFiles = new();\nforeach (string file in files)\n{\n    shareFiles.Add(new ShareFile(file));\n}\n\nawait Share.Default.RequestAsync(new ShareMultipleFilesRequest\n{\n    Title = \"Share Multiple Files\",\n    Files = shareFiles\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Text with Spans in XAML - MAUI\nDESCRIPTION: This XAML snippet demonstrates how to use FormattedString and Span objects within a Label control to display text with multiple fonts, colors, and gesture recognizers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_15\n\nLANGUAGE: xaml\nCODE:\n```\n<Label LineBreakMode=\"WordWrap\">\n    <Label.FormattedText>\n        <FormattedString>\n            <Span Text=\"Red Bold, \" TextColor=\"Red\" FontAttributes=\"Bold\" />\n            <Span Text=\"default, \" FontSize=\"14\">\n                <Span.GestureRecognizers>\n                    <TapGestureRecognizer Command=\"{Binding TapCommand}\" />\n                </Span.GestureRecognizers>\n            </Span>\n            <Span Text=\"italic small.\" FontAttributes=\"Italic\" FontSize=\"12\" />\n        </FormattedString>\n    </Label.FormattedText>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Creating ImageButton in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to create an ImageButton, set its source image, and bind its Clicked event to an event handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/imagebutton.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ControlGallery.Views.XAML.ImageButtonDemoPage\"\n             Title=\"ImageButton Demo\">\n    <StackLayout>\n       <ImageButton Source=\"image.png\"\n                    Clicked=\"OnImageButtonClicked\"\n                    HorizontalOptions=\"Center\"\n                    VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to Start in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the `SnapPointsAlignment` property to `Start` programmatically for a `CarouselView`. The leading edge of each item will be aligned with the leading edge of the view after scrolling stops. Requires creating a `CarouselView` and `LinearItemsLayout` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ItemsLayout = new LinearItemsLayout(ItemsLayoutOrientation.Horizontal)\n    {\n        SnapPointsType = SnapPointsType.MandatorySingle,\n        SnapPointsAlignment = SnapPointsAlignment.Start\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching DragGestureRecognizer to an Image (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to attach a `DragGestureRecognizer` to an `Image` control in .NET MAUI. When a drag gesture is initiated on the image, the drag operation starts. The `Source` property specifies the image to be displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"monkeyface.png\">\n    <Image.GestureRecognizers>\n        <DragGestureRecognizer />\n    </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Registering a Validation Callback for a BindableProperty (C#)\nDESCRIPTION: This snippet demonstrates how to register a validation callback method with a BindableProperty. The `IsValidValue` method is invoked when the value of the `Angle` bindable property is set. The callback checks if the input value is a double between 0 and 360.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly BindableProperty AngleProperty =\n    BindableProperty.Create(\"Angle\", typeof(double), typeof(MainPage), 0.0, validateValue: IsValidValue);\n...\n\nstatic bool IsValidValue(BindableObject view, object value)\n{\n    double result;\n    double.TryParse(value.ToString(), out result);\n    return (result >= 0 && result <= 360);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Animation in MAUI\nDESCRIPTION: This code demonstrates creating a custom animation using the Animation class to animate the BackgroundColor property of a page. The animation uses Color.FromHsla to cycle through hues of the rainbow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnew Animation (callback: v => BackgroundColor = Color.FromHsla (v, 1, 0.5),\n  start: 0,\n  end: 1).Commit (this, \"Animation\", 16, 4000, Easing.Linear, (v, c) => BackgroundColor = Colors.Black);\n```\n\n----------------------------------------\n\nTITLE: Set OffColor and OnColor on Switch - XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `OffColor` and `OnColor` properties of a <xref:Microsoft.Maui.Controls.Switch>. This will change the color of the switch when it's in the off (Red) and on (Green) states, respectively.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Switch OffColor=\"Red\"\n        OnColor=\"Green\" />\n```\n\n----------------------------------------\n\nTITLE: Detecting Clipboard Changes .NET MAUI C#\nDESCRIPTION: Demonstrates how to subscribe to the ClipboardContentChanged event of the IClipboard interface to detect when the clipboard's content changes. This allows the application to react to external changes to the clipboard.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/clipboard.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnAppearing()\n{\n    base.OnAppearing();\n    Clipboard.Default.ClipboardContentChanged += OnClipboardContentChanged;\n}\n\nprotected override void OnDisappearing()\n{\n    base.OnDisappearing();\n    Clipboard.Default.ClipboardContentChanged -= OnClipboardContentChanged;\n}\n\nprivate void OnClipboardContentChanged(object sender, EventArgs e)\n{\n    // Perform some action when the clipboard content changes\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Multiple Windows in Android WebView Handler with C#\nDESCRIPTION: This snippet shows how to modify the WebViewHandler on Android to disable support for multiple windows.  This is useful when handling hyperlinks that specify `target=\"_blank\"`. This code should be executed before any hyperlinks are clicked and requires the Microsoft.Maui namespace.  It relies on preprocessor directives for platform-specific compilation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\n    Microsoft.Maui.Handlers.WebViewHandler.Mapper.AppendToMapping(\"SupportMultipleWindows\", (handler, view) =>\n    {\n        handler.PlatformView.Settings.SetSupportMultipleWindows(false);\n    });\n#endif\n```\n\n----------------------------------------\n\nTITLE: Resolve Contacts Namespace Conflict in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to resolve a namespace conflict between the `Contacts` type in the `Microsoft.Maui.ApplicationModel.Communication` namespace and the iOS/macOS `Contacts` namespace. It uses a `using` directive to create an alias `Communication` for the `Microsoft.Maui.ApplicationModel.Communication` namespace. This approach allows using `Communication.Contacts` without ambiguity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Communication = Microsoft.Maui.ApplicationModel.Communication;\n\n// Code that uses the namespace:\nvar contact = await Communication.Contacts.Default.PickContactAsync();\n```\n\n----------------------------------------\n\nTITLE: Fix Mac Catalyst ARM64 launch exception by enabling Interpreter\nDESCRIPTION: This snippet provides a solution for a common launch exception encountered in .NET MAUI Mac Catalyst apps running on the ARM64 architecture. Enabling the interpreter by setting the `$(MtouchInterpreter)` property can resolve this issue. It AOT compiles all assemblies except `MyAssembly` which will be interpreted.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(RuntimeIdentifier)' == 'maccatalyst-arm64' and '$(Configuration)' == 'Release'\">\n    <MtouchInterpreter>-all,MyAssembly</MtouchInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Event Unsubscription: Lambda and Handler Field - C#\nDESCRIPTION: This code demonstrates how to unsubscribe from an event when using lambda expressions as event handlers. It stores a reference to the anonymous method in a field (`_handler`) to allow for unsubscribing in the `Dispose` method, preventing memory leaks caused by strong references.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class Subscriber : IDisposable\n{\n    readonly Publisher _publisher;\n    EventHandler _handler;\n\n    public Subscriber(Publisher publish)\n    {\n        _publisher = publish;\n        _handler = (sender, e) =>\n        {\n            Debug.WriteLine(\"The publisher notified the subscriber of an event\");\n        };\n        _publisher.MyEvent += _handler;\n    }\n\n    public void Dispose()\n    {\n        _publisher.MyEvent -= _handler;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ToolbarItem Clicked Event in C#\nDESCRIPTION: This C# code snippet shows how to attach an event handler to the Clicked event of a ToolbarItem in code. The item.Clicked += OnItemClicked; line adds the OnItemClicked method to the list of methods that will be called when the Clicked event is raised.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/toolbaritem.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nToolbarItem item = new ToolbarItem { ... };\nitem.Clicked += OnItemClicked;\n```\n\n----------------------------------------\n\nTITLE: Setting Field Modifiers in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `x:FieldModifier` attribute on Label elements to control the access level of the generated fields. It shows examples of private (default), internal (NotPublic), and public access levels.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/field-modifiers.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Label x:Name=\"privateLabel\" />\n<Label x:Name=\"internalLabel\" x:FieldModifier=\"NotPublic\" />\n<Label x:Name=\"publicLabel\" x:FieldModifier=\"Public\" />\n```\n\n----------------------------------------\n\nTITLE: Activity Definition with Attribute XML Output\nDESCRIPTION: This XML fragment is generated by the C# code with the `ActivityAttribute`. The `android:name` attribute represents the fully qualified name of the activity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:name=\"crc64bdb9c38958c20c7c.MyActivity\" />\n```\n\n----------------------------------------\n\nTITLE: Define Cross-Platform API C#\nDESCRIPTION: This code defines a partial class `DeviceOrientationService` with a partial method `GetOrientation`. The partial method allows platform-specific implementations to be provided in separate files, enabling cross-platform functionality. The code file must be located outside the Platforms folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InvokePlatformCodeDemos.Services.PartialMethods\n{\n    public partial class DeviceOrientationService\n    {\n        public partial DeviceOrientation GetOrientation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Full Size Drag Previews on iOS/Mac Catalyst\nDESCRIPTION: This code snippet demonstrates how to configure drag previews to be full-sized on iOS and Mac Catalyst using the SetPrefersFullSizePreviews method.  The lambda expression provided to SetPrefersFullSizePreviews returns true, instructing the system to use full-sized previews for the dragged item.  This is done within the DragStarting event handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n#if IOS || MACCATALYST\n    e.PlatformArgs.SetPrefersFullSizePreviews((interaction, session) => { return true; });\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Legacy App Property Data (C#)\nDESCRIPTION: This code snippet demonstrates how to consume data from the legacy Xamarin.Forms app properties dictionary using the `LegacyApplication` class and store it in .NET MAUI preferences using the `Preferences` class.  It checks if a specific key exists in the legacy properties before attempting to read and migrate the value. A conditional compilation symbol is used to only include this code on Android, iOS, and Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID || IOS || WINDOWS\nusing MigrationHelpers;\n...\n\nint id;\nif (LegacyApplication.Current.Properties.ContainsKey(\"id\"))\n{\n    id = (int)LegacyApplication.Current.Properties[\"id\"];\n    Preferences.Set(\"id\", id);\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Selection in CollectionView (XAML)\nDESCRIPTION: This XAML snippet shows how to enable single item selection in a CollectionView. The `SelectionMode` property is set to `Single`, and the `SelectionChanged` event is bound to an event handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                SelectionMode=\"Single\"\n                SelectionChanged=\"OnCollectionViewSelectionChanged\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Update Project File to SDK-Style (XML)\nDESCRIPTION: This code snippet demonstrates how to update your Xamarin.Forms UWP project file to an SDK-style WinUI 3 project file. It includes setting the OutputType, TargetFramework, RootNamespace, and other essential properties.  It also includes disabling default maui items to avoid build errors related to InitializeComponent.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/uwp-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType> <!-- in Xamarin.Forms this was AppContainerExe -->\n    <TargetFramework>net8.0-windows10.0.19041.0</TargetFramework>\n    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>\n    <RootNamespace>YOUR_NAMESPACE_HERE.WinUI</RootNamespace>\n    <ApplicationManifest>app.manifest</ApplicationManifest>\n    <Platforms>x86;x64;ARM64</Platforms>\n    <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>\n    <UseWinUI>true</UseWinUI>\n    <EnableMsixTooling>true</EnableMsixTooling>\n    <UseMaui>true</UseMaui>\n    <!-- We do not want XAML files to be processed as .NET MAUI XAML -->\n    <EnableDefaultMauiItems>false</EnableDefaultMauiItems>\n  </PropertyGroup>\n  ...\n</Project>\n```\n\n----------------------------------------\n\nTITLE: StringFormat usage with Slider binding - XAML\nDESCRIPTION: Demonstrates how to use the `StringFormat` property in a data binding to format a Slider's Value property, displaying it with two decimal places.  The target property must be of type string, and the binding mode should be OneWay or TwoWay. The formatting string is delimited by single quotes to avoid XAML parser issues.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/string-formatting.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Slider x:Name=\"slider\" />\n<Label x:DataType=\"Slider\"\n       Text=\"{Binding Source={x:Reference slider},\n                      Path=Value,\n                      StringFormat='The slider value is {0:F2}'}\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset (C#)\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset from the application package using `FileSystem.OpenAppPackageFileAsync`. It opens a stream to the asset, reads its contents using a `StreamReader`, and stores the contents in a string variable. This relies on the Microsoft.Maui.Essentials package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/allnotes/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: List Devices Using devicectl\nDESCRIPTION: This command lists the connected devices and returns their identifiers. The device identifier is required for subsequent commands.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcrun devicectl list devices\n```\n\n----------------------------------------\n\nTITLE: Using EnterActions and ExitActions with a Property Trigger in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a property trigger for an Entry control, specifying EnterActions and ExitActions using a custom FadeTriggerAction. When the Entry is focused, the EnterAction is triggered, and when focus is lost, the ExitAction is triggered.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Placeholder=\"Enter job title\">\n    <Entry.Triggers>\n        <Trigger TargetType=\"Entry\"\n                 Property=\"Entry.IsFocused\"\n                 Value=\"True\">\n            <Trigger.EnterActions>\n                <local:FadeTriggerAction StartsFrom=\"0\" />\n            </Trigger.EnterActions>\n\n            <Trigger.ExitActions>\n                <local:FadeTriggerAction StartsFrom=\"1\" />\n            </Trigger.ExitActions>\n        </Trigger>\n    </Entry.Triggers>\n</Entry>\n```\n\n----------------------------------------\n\nTITLE: Install .NET MAUI workload on Windows using dotnet CLI\nDESCRIPTION: This snippet shows how to install the .NET MAUI workload on Windows using the dotnet command-line interface. It opens a terminal and executes the command `dotnet workload install maui`. This command installs the necessary components for .NET MAUI development.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet workload install maui\n```\n\n----------------------------------------\n\nTITLE: Define EmptyViewTemplate with DataTemplateSelector C#\nDESCRIPTION: This C# code snippet demonstrates how to define and set the EmptyView and EmptyViewTemplate of a CarouselView using a SearchBar and DataTemplateSelector.  It programmatically creates the CarouselView, SearchBar, and DataTemplateSelector, and binds properties to connect them. This assumes the SearchTermDataTemplateSelector class is already defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nSearchBar searchBar = new SearchBar { ... };\nCarouselView carouselView = new CarouselView()\n{\n    EmptyView = searchBar.Text,\n    EmptyViewTemplate = new SearchTermDataTemplateSelector { ... }\n};\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: CollectionView Horizontal List with LinearItemsLayout XAML\nDESCRIPTION: This XAML snippet demonstrates using LinearItemsLayout with Horizontal orientation to create a horizontal list layout in CollectionView. It explicitly sets the ItemsLayout to a LinearItemsLayout and configures its Orientation to Horizontal. This gives control over item spacing and custom layout settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Horizontal\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Enabling .NET MAUI Support in Project File (XML)\nDESCRIPTION: This snippet shows how to enable .NET MAUI support in a native app's project file by setting the `UseMaui` and `MauiEnablePlatformUsings` build properties to `true`. This is a crucial step for integrating .NET MAUI controls into native applications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    ...\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n\n    <UseMaui>true</UseMaui>\n    <MauiEnablePlatformUsings>true</MauiEnablePlatformUsings>  \n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Explicit Grouping RadioButtons with RadioButtonGroup.GroupName Attached Property XAML\nDESCRIPTION: This XAML snippet shows how to use the `RadioButtonGroup.GroupName` attached property on a parent layout to implicitly assign the same group name to all RadioButtons within that layout, ensuring mutual exclusivity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout RadioButtonGroup.GroupName=\"colors\">\n    <Label Text=\"What's your favorite color?\" />\n    <RadioButton Content=\"Red\" />\n    <RadioButton Content=\"Green\" />\n    <RadioButton Content=\"Blue\" />\n    <RadioButton Content=\"Other\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Detecting the current system theme in C#\nDESCRIPTION: This C# snippet shows how to detect the current system theme using the Application.Current.RequestedTheme property. It retrieves an AppTheme enumeration value representing the current theme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nAppTheme currentTheme = Application.Current.RequestedTheme;\n```\n\n----------------------------------------\n\nTITLE: Translating an Image in MAUI (C#)\nDESCRIPTION: This code snippet translates a MAUI Image instance horizontally and vertically using the TranslateToAsync method. It moves the image 100 device-independent units to the left and 100 units upwards over 1 second.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateToAsync(-100, -100, 1000);\n```\n\n----------------------------------------\n\nTITLE: Update App Class Inheritance in C#\nDESCRIPTION: This code snippet shows how to update the code-behind for the `App` class to derive from the `App` class in the .NET MAUI UI project. It initializes the base resources and then calls `InitializeComponent()`, followed by merging the base resources back into the `Resources` collection. Finally, it sets the `MainPage` to a `HostPage`. This ensures that the test harness app correctly inherits from and utilizes the resources defined in the .NET MAUI UI project, enabling the hot reload functionality to work correctly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class TestApp : myMauiUIProject.App\n    {\n        public TestApp()\n        {\n            var baseResources = Resources;\n            InitializeComponent();\n            Resources.MergedDictionaries.Add(baseResources);\n            MainPage = new HostPage();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard C#\nDESCRIPTION: This C# snippet is equivalent to the XAML example and shows how to customize the `Keyboard` to offer word completions and capitalize every entered character using the `Keyboard.Create` factory method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nEditor editor = new Editor();\neditor.Keyboard = Keyboard.Create(KeyboardFlags.Suggestions | KeyboardFlags.CapitalizeCharacter);\n```\n\n----------------------------------------\n\nTITLE: Specifying generic type arguments in XAML\nDESCRIPTION: Shows how to use the x:TypeArguments attribute to specify the generic type argument for the OnPlatform class. It sets the StackLayout.Margin property to a platform-specific Thickness.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/pass-arguments.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <StackLayout.Margin>\n        <OnPlatform x:TypeArguments=\"Thickness\">\n          <On Platform=\"iOS\" Value=\"0,20,0,0\" />\n          <On Platform=\"Android\" Value=\"5, 10\" />\n        </OnPlatform>\n    </StackLayout.Margin>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Write Legacy Data to .NET MAUI Preferences C#\nDESCRIPTION: This code snippet demonstrates how to write legacy version and build history data to .NET MAUI preferences using the Preferences API. It joins the history data into a single string separated by a delimiter and stores it under a specific key, using the application's package name as part of the preference scope. The #if directive ensures this runs only on Android, iOS, and Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvoid WriteHistory(string key, IEnumerable<string> history)\n{\n    Preferences.Default.Set(key, string.Join(\"|\", history), $\"{AppInfo.Current.PackageName}.microsoft.maui.essentials.versiontracking\");\n}\n\n#if ANDROID || IOS || WINDOWS\nWriteHistory(LegacyVersionTracking.VersionsKey, LegacyVersionTracking.VersionHistory);\nWriteHistory(LegacyVersionTracking.BuildsKey, LegacyVersionTracking.BuildHistory);\n#endif\n```\n\n----------------------------------------\n\nTITLE: Securely Define Android Signing Passwords using Environment Variables (XML)\nDESCRIPTION: This XML snippet demonstrates how to securely define Android signing passwords by referencing environment variables. It prevents passwords from appearing in build logs.  It relies on an environment variable called `AndroidSigningPassword` for both keystore and key passwords.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'\">\n    <AndroidSigningKeyStore>myapp.keystore</AndroidSigningKeyStore>\n    <AndroidSigningKeyAlias>myapp</AndroidSigningKeyAlias>\n    <AndroidSigningKeyPass>env:AndroidSigningPassword</AndroidSigningKeyPass>\n    <AndroidSigningStorePass>env:AndroidSigningPassword</AndroidSigningStorePass>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with DataTemplate in XAML\nDESCRIPTION: This code snippet demonstrates how to define the appearance of each item in a BindableLayout using a DataTemplate in XAML.  It binds a `StackLayout` to the `User.TopFollowers` collection and uses a `DataTemplate` to display each item as an `Image`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout BindableLayout.ItemsSource=\"{Binding User.TopFollowers}\"\n             Orientation=\"Horizontal\"\n             ...>\n    <BindableLayout.ItemTemplate>\n        <DataTemplate x:DataType=\"sys:String\">\n            <Image Source=\"{Binding}\"\n                   Aspect=\"AspectFill\"\n                   WidthRequest=\"44\"\n                   HeightRequest=\"44\"\n                   ... />\n        </DataTemplate>\n    </BindableLayout.ItemTemplate>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Set Character Spacing - MAUI XAML\nDESCRIPTION: Demonstrates how to set the character spacing for the text displayed in the Editor using the CharacterSpacing property. Requires a double value for spacing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor ...\n        CharacterSpacing=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Override Binding Mode - OneWayToSource Binding on Scale Property\nDESCRIPTION: This XAML snippet demonstrates using OneWayToSource binding on the Scale property of a Label, bound to a Slider's Value. This initializes the Slider to the default Scale value (1), but changes to the Slider do not update the Label's Scale property because data only flows from the Label (target) to the Slider (source).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-mode.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"TEXT\"\n       FontSize=\"40\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"CenterAndExpand\"\n       Scale=\"{Binding x:DataType='Slider',\n                       Source={x:Reference slider},\n                       Path=Value,\n                       Mode=OneWayToSource}\" />\n```\n\n----------------------------------------\n\nTITLE: Full NotesViewModel Class C#\nDESCRIPTION: This is the complete `NotesViewModel` class, including properties, commands, constructor and implementation of `IQueryAttributable` interface. It represents the final state of the viewmodel described in the guide, including handling updates to the AllNotes collection when notes are created, saved or deleted.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.Mvvm.Input;\nusing System.Collections.ObjectModel;\nusing System.Windows.Input;\n\nnamespace Notes.ViewModels;\n\ninternal class NotesViewModel: IQueryAttributable\n{\n    public ObservableCollection<ViewModels.NoteViewModel> AllNotes { get; }\n    public ICommand NewCommand { get; }\n    public ICommand SelectNoteCommand { get; }\n\n    public NotesViewModel()\n    {\n        AllNotes = new ObservableCollection<ViewModels.NoteViewModel>(Models.Note.LoadAll().Select(n => new ViewModels.NoteViewModel(n)));\n        NewCommand = new AsyncRelayCommand(NewNoteAsync);\n        SelectNoteCommand = new AsyncRelayCommand<ViewModels.NoteViewModel>(SelectNoteAsync);\n    }\n\n    private async Task NewNoteAsync()\n    {\n        await Shell.Current.GoToAsync(nameof(Views.NotePage));\n    }\n\n    private async Task SelectNoteAsync(ViewModels.NoteViewModel note)\n    {\n        if (note != null)\n            await Shell.Current.GoToAsync($\"{nameof(Views.NotePage)}?noteId={note.Id}\");\n\n    }\n\n    public void ApplyQueryAttributes(IDictionary<string, object> query)\n    {\n        if (query.ContainsKey(\"deleted\"))\n        {\n            string noteId = query[\"deleted\"].ToString();\n            ViewModels.NoteViewModel matchedNote = AllNotes.Where((n) => n.Id == noteId).FirstOrDefault();\n\n            // If note exists, delete it\n            if (matchedNote != null)\n                AllNotes.Remove(matchedNote);\n        }\n        else if (query.ContainsKey(\"saved\"))\n        {\n            string noteId = query[\"saved\"].ToString();\n            ViewModels.NoteViewModel matchedNote = AllNotes.Where((n) => n.Id == noteId).FirstOrDefault();\n\n            // If note is found, update it\n            if (matchedNote != null)\n            {\n                matchedNote.Reload();\n                matchedNote.Update();\n            }\n            // If note isn't found, it's new; add it.\n            else\n                AllNotes.Add(new ViewModels.NoteViewModel(Models.Note.Load(noteId)));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles with DynamicResource in .NET MAUI XAML\nDESCRIPTION: This XAML snippet demonstrates how to define styles in the application-level ResourceDictionary that consume theme resources using the DynamicResource markup extension. This ensures that when a different theme is selected at runtime, the styles will update accordingly. These styles are applied to Label objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"ThemingDemo.App\">\n    <Application.Resources>\n\n        <Style x:Key=\"LargeLabelStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"TextColor\"\n                    Value=\"{DynamicResource SecondaryTextColor}\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"30\" />\n        </Style>\n\n        <Style x:Key=\"MediumLabelStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"TextColor\"\n                    Value=\"{DynamicResource PrimaryTextColor}\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"25\" />\n        </Style>\n\n        <Style x:Key=\"SmallLabelStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"TextColor\"\n                    Value=\"{DynamicResource TertiaryTextColor}\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"15\" />\n        </Style>\n\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Main Launcher Activity C#\nDESCRIPTION: This example demonstrates how to designate an activity as the main launcher activity using the `MainLauncher` property of the `ActivityAttribute`. This ensures that the activity is launchable from the app launcher.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\n\nnamespace MyMauiApp;\n\n[Activity (Label=\"My Maui App\", MainLauncher = true)]\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Large Title Display Mode in C# - .NET MAUI iOS\nDESCRIPTION: This C# code snippet shows how to toggle between the different `LargeTitleDisplayMode` enumeration values. It uses the `LargeTitleDisplay` method to get the current display mode and then uses a switch statement to set the mode to the next value in the sequence (Always -> Automatic -> Never -> Always).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-large-title.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nswitch (On<iOS>().LargeTitleDisplay())\n{\n    case LargeTitleDisplayMode.Always:\n        On<iOS>().SetLargeTitleDisplay(LargeTitleDisplayMode.Automatic);\n        break;\n    case LargeTitleDisplayMode.Automatic:\n        On<iOS>().SetLargeTitleDisplay(LargeTitleDisplayMode.Never);\n        break;\n    case LargeTitleDisplayMode.Never:\n        On<iOS>().SetLargeTitleDisplay(LargeTitleDisplayMode.Always);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a ControlTemplate to CardView XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply a ControlTemplate to a CardView instance.  It sets the ControlTemplate property of the CardView to a StaticResource referencing the `CardViewControlTemplate`.  Properties of the CardView are set, which will then be displayed according to the template's data bindings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"\n             ...>\n    <StackLayout Margin=\"30\">\n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"John Doe\"\n                           CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\"\n                           ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n        <controls:CardView BorderColor=\"DarkGray\"\n                           CardTitle=\"Jane Doe\"\n                           CardDescription=\"Phasellus eu convallis mi. In tempus augue eu dignissim fermentum. Morbi ut lacus vitae eros lacinia.\"\n                           IconBackgroundColor=\"SlateGray\"\n                           IconImageSource=\"user.png\"\n                           ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Disable TabbedPage Animation in XAML - Android\nDESCRIPTION: This XAML snippet shows how to disable the page transition animation within a TabbedPage on Android using the `IsSmoothScrollEnabled` property from the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace. This is done by setting the `android:TabbedPage.IsSmoothScrollEnabled` bindable property to `false`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-transition-animations.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage ...\n            xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\"\n            android:TabbedPage.IsSmoothScrollEnabled=\"false\">\n    ...\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush from Color Property (XAML)\nDESCRIPTION: This XAML snippet demonstrates creating a SolidColorBrush explicitly using the SolidColorBrush element and setting its Color property to a predefined Color value (DarkBlue).  This approach is more verbose but explicitly defines the SolidColorBrush.  It showcases how to define properties using property element syntax.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/solidcolor.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Border Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\">\n    <Border.Background>\n         <SolidColorBrush Color=\"DarkBlue\" />    \n    </Border.Background>\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Creating a RefreshView in C# - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to create a RefreshView programmatically, including setting up the refresh command and adding a ScrollView with a FlexLayout as its content. It also shows how to toggle the `IsRefreshing` property to indicate the refresh state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/refreshview.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nRefreshView refreshView = new RefreshView();\nICommand refreshCommand = new Command(() =>\n{\n    // IsRefreshing is true\n    // Refresh data here\n    refreshView.IsRefreshing = false;\n});\nrefreshView.Command = refreshCommand;\n\nScrollView scrollView = new ScrollView();\nFlexLayout flexLayout = new FlexLayout { ... };\nscrollView.Content = flexLayout;\nrefreshView.Content = scrollView;\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush from Predefined Brush (XAML)\nDESCRIPTION: This XAML snippet demonstrates using a predefined SolidColorBrush object from the Brush class (Brush.Indigo) as the Background of a Border.  This approach utilizes the x:Static markup extension to access the static Brush.Indigo property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/solidcolor.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Border Background=\"{x:Static Brush.Indigo}\"\n        Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\" />   \n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Menu Items in a Context Menu with XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a context menu with sub-menu items for a Label control. The context menu has a MenuFlyout with MenuFlyoutItem and MenuFlyoutSubItem objects. Each MenuFlyoutItem within the sub-menus has a Clicked event handler (OnLabelClicked) and a CommandParameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/context-menu.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Label x:Name=\"label\"\n       Text=\"Right-click to choose color\">\n   <FlyoutBase.ContextFlyout>\n       <MenuFlyout>\n           <MenuFlyoutItem Text=\"Black\"\n                           Clicked=\"OnLabelClicked\"\n                           CommandParameter=\"Black\" />\n           <MenuFlyoutSubItem Text=\"Light\">\n               <MenuFlyoutItem Text=\"Blue\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"LightBlue\" />\n               <MenuFlyoutItem Text=\"Coral\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"LightCoral\" />\n               <MenuFlyoutItem Text=\"Cyan\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"LightCyan\" />\n           </MenuFlyoutSubItem>\n           <MenuFlyoutSubItem Text=\"Dark\">\n               <MenuFlyoutItem Text=\"Blue\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"DarkBlue\" />\n               <MenuFlyoutItem Text=\"Cyan\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"DarkCyan\" />\n               <MenuFlyoutItem Text=\"Magenta\"\n                               Clicked=\"OnLabelClicked\"\n                               CommandParameter=\"DarkMagenta\" />\n           </MenuFlyoutSubItem>\n       </MenuFlyout>\n   </FlyoutBase.ContextFlyout>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Enable Large Titles in XAML - .NET MAUI iOS\nDESCRIPTION: This XAML snippet shows how to enable large titles on a NavigationPage using the `NavigationPage.PrefersLargeTitles` attached property. This will display the page title as a large title on iOS devices that support it.  The `ios` namespace must be declared to reference platform-specific properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-large-title.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<NavigationPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n                ...\n                ios:NavigationPage.PrefersLargeTitles=\"true\">\n  ...\n</NavigationPage>\n```\n\n----------------------------------------\n\nTITLE: Defining Video Position Property in C#\nDESCRIPTION: This code defines the `Position` property as a bindable property with both `get` and `set` accessors. The `get` accessor returns the current playback position, while the `set` accessor allows modifying the position, enabling binding to a `Slider` control for seeking.  The property changed handler calls `SetTimeToEnd`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        public static readonly BindableProperty PositionProperty =\n            BindableProperty.Create(nameof(Position), typeof(TimeSpan), typeof(Video), new TimeSpan(),\n                propertyChanged: (bindable, oldValue, newValue) => ((Video)bindable).SetTimeToEnd());\n\n        public TimeSpan Position\n        {\n            get { return (TimeSpan)GetValue(PositionProperty); }\n            set { SetValue(PositionProperty, value); }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing App Properties on iOS (C#)\nDESCRIPTION: This code snippet defines the `PropertiesDeserializer` class for iOS. It deserializes the Xamarin.Forms `PropertyStore.forms` file from isolated storage.  It attempts to open the file and deserialize the data using a `DataContractSerializer`.  Dependencies include `System.IO.IsolatedStorage`, `System.Runtime.Serialization`, and `System.Xml`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.IO.IsolatedStorage;\nusing System.Runtime.Serialization;\nusing System.Xml;\n\nnamespace MigrationHelpers;\n\npublic class PropertiesDeserializer\n{\n    const string PropertyStoreFile = \"PropertyStore.forms\";\n\n    public Task<IDictionary<string, object>> DeserializePropertiesAsync()\n    {\n        // Deserialize property dictionary to local storage\n        return Task.Run(() =>\n        {\n            using (var store = IsolatedStorageFile.GetUserStoreForApplication())\n            using (var stream = store.OpenFile(PropertyStoreFile, System.IO.FileMode.OpenOrCreate))\n            using (var reader = XmlDictionaryReader.CreateBinaryReader(stream, XmlDictionaryReaderQuotas.Max))\n            {\n                if (stream.Length == 0)\n                    return null;\n\n                try\n                {\n                    var dcs = new DataContractSerializer(typeof(Dictionary<string, object>));\n                    return (IDictionary<string, object>)dcs.ReadObject(reader);\n                }\n                catch (Exception e)\n                {\n                    Debug.WriteLine(\"Could not deserialize properties: \" + e.Message);\n                    Console.WriteLine($\"PropertyStore Exception while reading Application properties: {e}\");\n                }\n            }\n            return null;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Legacy Version Tracking Data C#\nDESCRIPTION: This code snippet removes the legacy version tracking data from the device's storage using the LegacyPreferences class. It targets Android, iOS, and Windows platforms and removes the version and build history data using specific keys and the shared name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n#if ANDROID || IOS || WINDOWS\nLegacyPreferences.Remove(LegacyVersionTracking.VersionsKey, LegacyVersionTracking.SharedName);\nLegacyPreferences.Remove(LegacyVersionTracking.BuildsKey, LegacyVersionTracking.SharedName);\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthenticatorCallbackActivity for Android in C#\nDESCRIPTION: This code snippet demonstrates how to inherit from the WebAuthenticatorCallbackActivity class in Android to handle the callback URI for web authentication. This is required for Android to properly handle the authentication flow's redirect back to the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/Platforms/Android/WebAuthActivity.cs\":::\n```\n\n----------------------------------------\n\nTITLE: Fading an Image in MAUI\nDESCRIPTION: This snippet demonstrates how to fade an Image in a MAUI application. It sets the initial opacity to 0 and then uses the `FadeTo` method to gradually increase the opacity to 1 over a specified duration. The parameters are the target opacity and duration in milliseconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nimage.Opacity = 0;\nawait image.FadeTo(1, 4000);\n```\n\n----------------------------------------\n\nTITLE: ToolbarItem Clicked Event Handler\nDESCRIPTION: This C# code defines the OnItemClicked event handler. It retrieves the ToolbarItem that raised the event, and updates a label with a message indicating which item was clicked.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/toolbaritem.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnItemClicked(object sender, EventArgs e)\n{\n    ToolbarItem item = (ToolbarItem)sender;\n    messageLabel.Text = $\"You clicked the \\\"{item.Text}\\\" toolbar item.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Video Position on Windows using MediaPlayerElement\nDESCRIPTION: This C# code snippet demonstrates how to update the video position on Windows using MediaPlayerElement. The UpdateStatus and UpdatePosition methods synchronize the video's position, and the code ensures that seeking occurs only when there's a significant difference in position to prevent feedback loops.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        bool _isMediaPlayerAttached;\n        ...\n\n        public void UpdateStatus()\n        {\n            if (_isMediaPlayerAttached)\n            {\n                ...\n                _video.Position = _mediaPlayerElement.MediaPlayer.Position;\n            }\n        }\n\n        public void UpdatePosition()\n        {\n            if (_isMediaPlayerAttached)\n            {\n                if (Math.Abs((_mediaPlayerElement.MediaPlayer.Position - _video.Position).TotalSeconds) > 1)\n                {\n                    _mediaPlayerElement.MediaPlayer.Position = _video.Position;\n                }\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stretching a Path Shape with XAML\nDESCRIPTION: This snippet demonstrates how to stretch a Path shape using the Aspect property in XAML. The Aspect property controls how the shape's content is resized to fit its allocated space, while preserving the aspect ratio using `Uniform`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/index.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Aspect=\"Uniform\"\n      Stroke=\"Yellow\"\n      Fill=\"Red\"\n      BackgroundColor=\"LightGray\"\n      HorizontalOptions=\"Start\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\">\n    <Path.Data>\n        <!-- Path data goes here -->\n    </Path.Data>  \n</Path>      \n```\n\n----------------------------------------\n\nTITLE: Define JsonSerializable Context\nDESCRIPTION: This C# code defines a partial class `HybridSampleJSContext` that inherits from `JsonSerializerContext`. It uses attributes to specify JSON serialization information for the types used when invoking JavaScript methods.  This allows the .NET runtime to correctly serialize and deserialize the objects when interoping with javascript.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[JsonSourceGenerationOptions(WriteIndented = true)]\n[JsonSerializable(typeof(Dictionary<string, string>))]\n[JsonSerializable(typeof(string))]\ninternal partial class HybridSampleJSContext : JsonSerializerContext\n{\n    // This type's attributes specify JSON serialization info to preserve type structure\n    // for trimmed builds.  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating .NET MAUI Extension Methods\nDESCRIPTION: This code snippet defines extension methods for `MauiAppBuilder` and `MauiApp` to enable .NET MAUI embedding in native applications. It configures services, initializes the platform application, and creates a window context. It uses preprocessor directives for platform-specific implementations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.Maui.Platform;\n\n#if ANDROID\nusing PlatformView = Android.Views.View;\nusing PlatformWindow = Android.App.Activity;\nusing PlatformApplication = Android.App.Application;\n#elif IOS || MACCATALYST\nusing PlatformView = UIKit.UIView;\nusing PlatformWindow = UIKit.UIWindow;\nusing PlatformApplication = UIKit.IUIApplicationDelegate;\n#elif WINDOWS\nusing PlatformView = Microsoft.UI.Xaml.FrameworkElement;\nusing PlatformWindow = Microsoft.UI.Xaml.Window;\nusing PlatformApplication = Microsoft.UI.Xaml.Application;\n#endif\n\nnamespace Microsoft.Maui.Controls;\n\npublic static class EmbeddedExtensions\n{\n    public static MauiAppBuilder UseMauiEmbedding(this MauiAppBuilder builder, PlatformApplication? platformApplication = null)\n    {\n#if ANDROID\n        platformApplication ??= (Android.App.Application)Android.App.Application.Context;\n#elif IOS || MACCATALYST\n        platformApplication ??= UIKit.UIApplication.SharedApplication.Delegate;\n#elif WINDOWS\n        platformApplication ??= Microsoft.UI.Xaml.Application.Current;\n#endif\n\n        builder.Services.AddSingleton(platformApplication);\n        builder.Services.AddSingleton<EmbeddedPlatformApplication>();\n        builder.Services.AddScoped<EmbeddedWindowProvider>();\n\n        // Returning null is acceptable here as the platform window is optional - but we don't know until we resolve it\n        builder.Services.AddScoped<PlatformWindow>(svc => svc.GetRequiredService<EmbeddedWindowProvider>().PlatformWindow!);\n        builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IMauiInitializeService, EmbeddedInitializeService>());\n        builder.ConfigureMauiHandlers(handlers =>\n        {\n            handlers.AddHandler(typeof(Window), typeof(EmbeddedWindowHandler));\n        });\n\n        return builder;\n    }\n\n    public static IMauiContext CreateEmbeddedWindowContext(this MauiApp mauiApp, PlatformWindow platformWindow, Window? window = null)\n    {\n        var windowScope = mauiApp.Services.CreateScope();\n\n#if ANDROID\n        var windowContext = new MauiContext(windowScope.ServiceProvider, platformWindow);\n#else\n        var windowContext = new MauiContext(windowScope.ServiceProvider);\n#endif\n\n        window ??= new Window();\n\n        var wndProvider = windowContext.Services.GetRequiredService<EmbeddedWindowProvider>();\n        wndProvider.SetWindow(platformWindow, window);\n        window.ToHandler(windowContext);\n\n        return windowContext;\n    }\n\n    public static PlatformView ToPlatformEmbedded(this IElement element, IMauiContext context)\n    {\n        var wndProvider = context.Services.GetService<EmbeddedWindowProvider>();\n        if (wndProvider is not null && wndProvider.Window is Window wnd && element is VisualElement visual)\n            wnd.AddLogicalChild(visual);\n\n        return element.ToPlatform(context);\n    }\n\n    private class EmbeddedInitializeService : IMauiInitializeService\n    {\n        public void Initialize(IServiceProvider services) =>\n            services.GetRequiredService<EmbeddedPlatformApplication>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Appearance with ControlTemplate in XAML\nDESCRIPTION: This XAML code demonstrates how to customize the appearance of a custom control (CardView) using a ControlTemplate. It defines a new layout for the CardView within a ResourceDictionary. The TemplateBinding markup extension is used for data binding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/contentview.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <ControlTemplate x:Key=\"CardViewCompressed\">\n            <Grid>\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"100\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"100\" />\n                    <ColumnDefinition Width=\"100*\" />\n                </Grid.ColumnDefinitions>\n                <Image Source=\"{TemplateBinding IconImageSource}\"\n                       BackgroundColor=\"{TemplateBinding IconBackgroundColor}\"\n                       WidthRequest=\"100\"\n                       HeightRequest=\"100\"\n                       Aspect=\"AspectFill\"\n                       HorizontalOptions=\"Center\"\n                       VerticalOptions=\"Center\" />\n                <StackLayout Grid.Column=\"1\">\n                    <Label Text=\"{TemplateBinding CardTitle}\"\n                           FontAttributes=\"Bold\" />\n                    <Label Text=\"{TemplateBinding CardDescription}\" />\n                </StackLayout>\n            </Grid>\n        </ControlTemplate>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Main Launcher Activity XML Output\nDESCRIPTION: This XML fragment demonstrates the activity being marked as the main launcher activity. The `<intent-filter>` with the `MAIN` action and `LAUNCHER` category is used for this purpose.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:label=\"My Maui App\"\n          android:name=\"crc64bdb9c38958c20c7c.MainActivity\">\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Display arbitrary content in RadioButtons - XAML\nDESCRIPTION: This XAML code snippet demonstrates how to display arbitrary content (Images in this case) within RadioButton controls on iOS and Windows.  Note that on Android, a string representation of the view is displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Label Text=\"What's your favorite animal?\" />\n    <RadioButton>\n        <RadioButton.Content>\n            <Image Source=\"cat.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton>\n        <RadioButton.Content>\n            <Image Source=\"dog.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton>\n        <RadioButton.Content>\n            <Image Source=\"elephant.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton>\n        <RadioButton.Content>\n            <Image Source=\"monkey.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Create Cross-Platform Partial Class for Behavior\nDESCRIPTION: This code defines a cross-platform partial class for a .NET MAUI behavior. It includes a BindableProperty for TintColor, allowing the behavior to be configured via data binding. The other partial class will be platform specific. Requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace BehaviorsDemos\n{\n    public partial class TintColorBehavior\n    {\n        public static readonly BindableProperty TintColorProperty =\n            BindableProperty.Create(nameof(TintColor), typeof(Color), typeof(TintColorBehavior));\n\n        public Color TintColor\n        {\n            get => (Color)GetValue(TintColorProperty);\n            set => SetValue(TintColorProperty, value);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding BackButtonBehavior - .NET MAUI XAML\nDESCRIPTION: This code snippet demonstrates how to bind the properties of a BackButtonBehavior in a Shell app using XAML.  It uses BindingMode.OneWay for `IsVisible` and `IsEnabled` to control the back button's behavior at runtime through data bindings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>    \n    <Shell.BackButtonBehavior>\n        <BackButtonBehavior Command=\"{Binding BackCommand}\"\n                            IsVisible=\"{Binding IsBackButtonVisible}\"\n                            IconOverride=\"back.png\" />   \n    </Shell.BackButtonBehavior>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Event Trigger Example XAML\nDESCRIPTION: This example demonstrates an Event Trigger that applies an action in response to an event.  Specifically, it uses the TextChanged event and calls a NumericValidationTriggerAction. Unlike other trigger types, EventTriggers do not revert the action when the condition is no longer met.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<EventTrigger Event=\"TextChanged\">\n    <local:NumericValidationTriggerAction />\n</EventTrigger>\n```\n\n----------------------------------------\n\nTITLE: Define a Light Theme Resource Dictionary XAML\nDESCRIPTION: This XAML code defines a ResourceDictionary for a light theme named `LightTheme`. It includes definitions for various colors used throughout the application, such as PageBackgroundColor, NavigationBarColor, and PrimaryTextColor, using specific color values.  A code-behind file is required for this ResourceDictionary, which calls the InitializeComponent method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/theming.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                    x:Class=\"ThemingDemo.LightTheme\">\n    <Color x:Key=\"PageBackgroundColor\">White</Color>\n    <Color x:Key=\"NavigationBarColor\">WhiteSmoke</Color>\n    <Color x:Key=\"PrimaryColor\">WhiteSmoke</Color>\n    <Color x:Key=\"SecondaryColor\">Black</Color>\n    <Color x:Key=\"PrimaryTextColor\">Black</Color>\n    <Color x:Key=\"SecondaryTextColor\">White</Color>\n    <Color x:Key=\"TertiaryTextColor\">Gray</Color>\n    <Color x:Key=\"TransparentColor\">Transparent</Color>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Animate ProgressBar in C#\nDESCRIPTION: This C# code animates the ProgressBar from its current progress value to 0.75 (75%) over 500 milliseconds, using linear easing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/progressbar.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// animate to 75% progress over 500 milliseconds with linear easing\nawait progressBar.ProgressTo(0.75, 500, Easing.Linear);\n```\n\n----------------------------------------\n\nTITLE: Activating a Window in C#\nDESCRIPTION: This C# code shows how to bring a specific window to the front on Mac Catalyst and Windows using the `Application.Current.ActivateWindow` method.  `windowToActivate` should be a reference to the window object you want to bring to the front.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nApplication.Current?.ActivateWindow(windowToActivate);\n```\n\n----------------------------------------\n\nTITLE: Register and Unregister Asset Pack Listener C#\nDESCRIPTION: Registers the asset pack listener in the `OnResume` lifecycle method and unregisters it in the `OnPause` method. This ensures that the download progress is monitored only when the app is active.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnResume()\n{\n    assetPackManager.RegisterListener(listener.Listener);\n    base.OnResume();\n}\n\nprotected override void OnPause()\n{\n    assetPackManager.UnregisterListener(listener.Listener);\n    base.OnPause();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Context Menu for a WebView in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a context menu for a WebView using the FlyoutBase.ContextFlyout attached property. The context menu contains two MenuFlyoutItem objects, each with a Text property, a Clicked event handler (OnWebViewGoToRepoClicked), and a CommandParameter.  The WebView is bound to a URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/context-menu.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<WebView x:Name=\"webView\"\n         Source=\"https://learn.microsoft.com/dotnet/maui\"\n         MinimumHeightRequest=\"400\">\n    <FlyoutBase.ContextFlyout>\n        <MenuFlyout>\n            <MenuFlyoutItem Text=\"Go to docs repo\"\n                            Clicked=\"OnWebViewGoToRepoClicked\"\n                            CommandParameter=\"docs\" />\n            <MenuFlyoutItem Text=\"Go to engineering repo\"\n                            Clicked=\"OnWebViewGoToRepoClicked\"\n                            CommandParameter=\"eng\" />\n        </MenuFlyout>\n    </FlyoutBase.ContextFlyout>\n</WebView>\n```\n\n----------------------------------------\n\nTITLE: Defining TargetFramework and SupportedOSPlatformVersion\nDESCRIPTION: This snippet illustrates how to set the `TargetFramework` and `SupportedOSPlatformVersion` in a .NET for Android project's `.csproj` file. These properties map to `android:targetSdkVersion` and `android:minSdkVersion` in `AndroidManifest.xml`, respectively.  Using MSBuild properties is the recommended approach.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <TargetFramework>net8.0-android</TargetFramework>\n    <SupportedOSPlatformVersion>21</SupportedOSPlatformVersion>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Set CachingStrategy on Subclassed ListView in XAML\nDESCRIPTION: Demonstrates how to set the `ListViewCachingStrategy` on a subclassed ListView in XAML using the `x:Arguments` attribute.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_16\n\nLANGUAGE: XAML\nCODE:\n```\n<local:CustomListView>\n    <x:Arguments>\n        <ListViewCachingStrategy>RecycleElement</ListViewCachingStrategy>\n    </x:Arguments>\n</local:CustomListView>\n```\n\n----------------------------------------\n\nTITLE: XAML Page using Custom and System Static Fields\nDESCRIPTION: This XAML snippet shows a ContentPage that uses the previously defined `AppConstants` and `System` namespace (via `Math.PI` and `Math.E`) to set properties of a Label and BoxView using the `x:Static` markup extension. It also sets the background color and foreground color of the Label from the `AppConstants` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             x:Class=\"XamlSamples.StaticConstantsPage\"\n             Title=\"Static Constants Page\"\n             Padding=\"5,25,5,0\">\n    <StackLayout>\n       <Label Text=\"Hello, XAML!\"\n              TextColor=\"{x:Static local:AppConstants.BackgroundColor}\"\n              BackgroundColor=\"{x:Static local:AppConstants.ForegroundColor}\"\n              FontAttributes=\"Bold\"\n              FontSize=\"30\"\n              HorizontalOptions=\"Center\" />\n      <BoxView WidthRequest=\"{x:Static sys:Math.PI}\"\n               HeightRequest=\"{x:Static sys:Math.E}\"\n               Color=\"{x:Static local:AppConstants.ForegroundColor}\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"CenterAndExpand\"\n               Scale=\"100\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Slider Value Coercion in C#\nDESCRIPTION: This code snippet demonstrates the Slider's Value property coercion behavior. When Value is set outside the range defined by Minimum and Maximum, it is automatically adjusted to the closest bound.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nSlider slider = new Slider\n{\n    Value = 10\n};\n```\n\n----------------------------------------\n\nTITLE: Using ColorTo Extension Method in C#\nDESCRIPTION: This code demonstrates how to use the ColorTo extension method to animate various Color properties in .NET MAUI. It animates the TextColor and BackgroundColor of a Label, the BackgroundColor of a Page, and the Color property of a BoxView. The method takes start and end colors, a callback to apply the color, and animation duration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait Task.WhenAll(\n  label.ColorTo(Colors.Red, Colors.Blue, c => label.TextColor = c, 5000),\n  label.ColorTo(Colors.Blue, Colors.Red, c => label.BackgroundColor = c, 5000));\nawait this.ColorTo(Color.FromRgb(0, 0, 0), Color.FromRgb(255, 255, 255), c => BackgroundColor = c, 5000);\nawait boxView.ColorTo(Colors.Blue, Colors.Red, c => boxView.Color = c, 4000);\n```\n\n----------------------------------------\n\nTITLE: Setting WindowSoftInputModeAdjust in C#\nDESCRIPTION: This C# snippet demonstrates how to set the `WindowSoftInputModeAdjust` property to `Resize` using the fluent API. This configures the Android application to resize the window when the soft keyboard is displayed.  It requires the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/soft-keyboard-input-mode.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nApp.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);\n```\n\n----------------------------------------\n\nTITLE: Fill a Rectangle on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a dark blue filled rectangle on an ICanvas object using the FillRectangle method. It sets the fill color to dark blue before drawing the rectangle with dimensions 100x50 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FillColor = Colors.DarkBlue;\ncanvas.FillRectangle(10, 10, 100, 50);\n```\n\n----------------------------------------\n\nTITLE: Install .NET Upgrade Assistant CLI\nDESCRIPTION: This command installs the .NET Upgrade Assistant tool globally using the dotnet CLI. It allows the tool to be accessed from any terminal window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/upgrade-assistant.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install -g upgrade-assistant\n```\n\n----------------------------------------\n\nTITLE: Suppress Trim Analysis Warnings (XML)\nDESCRIPTION: This XML snippet shows how to suppress trim analysis warnings by setting the SuppressTrimAnalysisWarnings MSBuild property to false in the project file. When enabled, this will include warnings about the entire app, including code, library code, and SDK code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <SuppressTrimAnalysisWarnings>false</SuppressTrimAnalysisWarnings>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URI Pattern in Info.plist for iOS/Mac Catalyst (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the application's callback URI pattern to the Info.plist files for iOS and Mac Catalyst. This configuration is essential for the operating system to correctly redirect the authentication flow back to the application after the user authenticates in the web browser.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>My App</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>myapp</string>\n        </array>\n        <key>CFBundleTypeRole</key>\n        <string>Editor</string>\n    </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Simplified Basic Code Binding XAML\nDESCRIPTION: This XAML code shows a simplified version of the previous XAML example, using the content property feature of the x:Reference and Binding markup extensions. This allows for more concise syntax when specifying the data binding, making the code more readable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Label x:DataType=\"Slider\"\n       Text=\"TEXT\"\n       FontSize=\"80\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\"\n       BindingContext=\"{x:Reference slider}\"\n       Rotation=\"{Binding Value}\" />\n```\n\n----------------------------------------\n\nTITLE: Registering a Coerce Value Callback for a BindableProperty (C#)\nDESCRIPTION: This snippet shows how to register a coerce value callback method with a BindableProperty. The `CoerceAngle` method is invoked when the value of the `Angle` bindable property is about to change. It coerces the value of the `Angle` property to be no greater than the value of the `MaximumAngle` property. It also shows how to force the coerce callback to run when MaximumAngle changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly BindableProperty AngleProperty =\n    BindableProperty.Create(\"Angle\", typeof(double), typeof(MainPage), 0.0, coerceValue: CoerceAngle);\npublic static readonly BindableProperty MaximumAngleProperty =\n    BindableProperty.Create(\"MaximumAngle\", typeof(double), typeof(MainPage), 360.0, propertyChanged: ForceCoerceValue);\n...\n\nstatic object CoerceAngle(BindableObject bindable, object value)\n{\n    MainPage page = bindable as MainPage;\n    double input = (double)value;\n\n    if (input > page.MaximumAngle)\n    {\n        input = page.MaximumAngle;\n    }\n\n    return input;\n}\n\nstatic void ForceCoerceValue(BindableObject bindable, object oldValue, object newValue)\n{\n    bindable.CoerceValue(AngleProperty);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadow to a clipped Image\nDESCRIPTION: This XAML snippet demonstrates how to add a shadow to a clipped Image control. It defines an EllipseGeometry to clip the image and then adds a shadow with a specified brush, offset, and opacity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/shadow.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"https://aka.ms/campus.jpg\"\n       Aspect=\"AspectFill\"\n       HeightRequest=\"220\"\n       WidthRequest=\"220\"\n       HorizontalOptions=\"Center\">\n    <Image.Clip>\n        <EllipseGeometry Center=\"220,250\"\n                         RadiusX=\"220\"\n                         RadiusY=\"220\" />\n    </Image.Clip>\n    <Image.Shadow>\n        <Shadow Brush=\"Black\"\n                Offset=\"10,10\"\n                Opacity=\"0.8\" />\n    </Image.Shadow>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Defining a .NET 8 iOS Project\nDESCRIPTION: This XML snippet defines a .NET 8 project for a .NET for iOS app. It specifies the target framework, output type, nullable settings, implicit usings, and the supported OS platform version. This configuration is a fundamental starting point for building iOS applications with .NET.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/apple-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-ios</TargetFramework>\n    <OutputType>Exe</OutputType>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <SupportedOSPlatformVersion>13.0</SupportedOSPlatformVersion>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Add Foldable Namespace Alias in XAML\nDESCRIPTION: This XAML snippet shows how to add a `foldable` namespace alias for the Foldable NuGet package. This alias is used to reference the `TwoPaneView` control in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/twopaneview.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:foldable=\"clr-namespace:Microsoft.Maui.Controls.Foldable;assembly=Microsoft.Maui.Controls.Foldable\"\n```\n\n----------------------------------------\n\nTITLE: Setting ConverterParameter in C#\nDESCRIPTION: Shows how to set the `ConverterParameter` property of a `Binding` object in C# code. The parameter is set to an integer value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nbinding.ConverterParameter = 255;\n```\n\n----------------------------------------\n\nTITLE: Drawing Dashed Square with Regular Dash in C#\nDESCRIPTION: This snippet demonstrates how to draw a dashed square on a .NET MAUI canvas using a regular dash pattern. It sets the `StrokeColor`, `StrokeSize`, and `StrokeDashPattern` properties, and then calls the `DrawRectangle` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.StrokeDashPattern = new float[] { 2, 2 };\ncanvas.DrawRectangle(10, 10, 90, 100);\n```\n\n----------------------------------------\n\nTITLE: Handling the Scrolled Event\nDESCRIPTION: This C# code snippet shows an example of the `OnCarouselViewScrolled` event handler. This handler receives `ItemsViewScrolledEventArgs` that contain information about the scroll event, such as the horizontal and vertical delta, offset, and visible item indices. The handler outputs these values to the debug console.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnCarouselViewScrolled(object sender, ItemsViewScrolledEventArgs e)\n{\n    Debug.WriteLine(\"HorizontalDelta: \" + e.HorizontalDelta);\n    Debug.WriteLine(\"VerticalDelta: \" + e.VerticalDelta);\n    Debug.WriteLine(\"HorizontalOffset: \" + e.HorizontalOffset);\n    Debug.WriteLine(\"VerticalOffset: \" + e.VerticalOffset);\n    Debug.WriteLine(\"FirstVisibleItemIndex: \" + e.FirstVisibleItemIndex);\n    Debug.WriteLine(\"CenterItemIndex: \" + e.CenterItemIndex);\n    Debug.WriteLine(\"LastVisibleItemIndex: \" + e.LastVisibleItemIndex);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Text to Uppercase in XAML - MAUI\nDESCRIPTION: This XAML snippet demonstrates how to transform text to uppercase in a Label control using the TextTransform property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_14\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"This text will be displayed in uppercase.\"\n       TextTransform=\"Uppercase\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Text with Spans in C# - MAUI\nDESCRIPTION: This C# snippet demonstrates how to create FormattedString and Span objects within a Label control to display text with multiple fonts, colors, and gesture recognizers. It includes conditional compilation based on the .NET MAUI version.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nFormattedString formattedString = new FormattedString ();\nformattedString.Spans.Add (new Span { Text = \"Red bold, \", TextColor = Colors.Red, FontAttributes = FontAttributes.Bold });\n\nSpan span = new Span { Text = \"default, \" };\nspan.GestureRecognizers.Add(new TapGestureRecognizer { Command = new Command(async () => await DisplayAlert(\"Tapped\", \"This is a tapped Span.\", \"OK\")) });\nformattedString.Spans.Add(span);\nformattedString.Spans.Add (new Span { Text = \"italic small.\", FontAttributes = FontAttributes.Italic, FontSize = 14 });\n\nLabel label = new Label { FormattedText = formattedString };\n```\n\nLANGUAGE: csharp\nCODE:\n```\nFormattedString formattedString = new FormattedString ();\nformattedString.Spans.Add (new Span { Text = \"Red bold, \", TextColor = Colors.Red, FontAttributes = FontAttributes.Bold });\n\nSpan span = new Span { Text = \"default, \" };\nspan.GestureRecognizers.Add(new TapGestureRecognizer { Command = new Command(async () => await DisplayAlertAsync(\"Tapped\", \"This is a tapped Span.\", \"OK\")) });\nformattedString.Spans.Add(span);\nformattedString.Spans.Add (new Span { Text = \"italic small.\", FontAttributes = FontAttributes.Italic, FontSize = 14 });\n\nLabel label = new Label { FormattedText = formattedString };\n```\n\n----------------------------------------\n\nTITLE: Override .NET MAUI Version (XML)\nDESCRIPTION: Demonstrates how to override the default .NET MAUI version by adding the `$(MauiVersion)` build property to the project file.  It also shows setting `<UseMaui>True</UseMaui>`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <UseMaui>True</UseMaui>\n        <MauiVersion>8.0.3</MauiVersion>\n    </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Default Content Property\nDESCRIPTION: This is the most concise form of the `x:Static` markup extension. Because the `Member` property is the default content property of the `StaticExtension` class, it can be omitted. This example requires a namespace alias `local` that points to the namespace where `AppConstants` is defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label No. 5\"\n       FontSize=\"{x:Static local:AppConstants.NormalFontSize}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a TitleBar in C# - .NET MAUI\nDESCRIPTION: This code snippet illustrates how to create a TitleBar programmatically in C# and assign it to a Window. It demonstrates setting the Icon, Title, Subtitle, and Content properties of the TitleBar.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nWindow window = new Window\n{\n    TitleBar = new TitleBar\n    {\n        Icon = \"titlebar_icon.png\"\n        Title = \"My App\",\n        Subtitle = \"Demo\"\n        Content = new SearchBar { ... }      \n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying a remote web page in WebView using XAML\nDESCRIPTION: This code snippet demonstrates how to display a remote web page in a .NET MAUI WebView using XAML. The `Source` property is set to the URL of the desired web page. The URI must be a fully formed URI with the protocol specified (e.g., https://).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<WebView Source=\"https://learn.microsoft.com/dotnet/maui\" />\n```\n\n----------------------------------------\n\nTITLE: Disconnect Handlers Extension Method C#\nDESCRIPTION: This C# code demonstrates using the `DisconnectHandlers()` extension method to disconnect handlers from a given `IView`. The disconnection process propagates down the control tree until it completes or arrives at a control that has set a manual policy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvideo.DisconnectHandlers();\n```\n\n----------------------------------------\n\nTITLE: Basis Property Usage in C# (Device-Independent Units)\nDESCRIPTION: This snippet demonstrates how to set the Basis property on a Label within a FlexLayout using C# code, specifying the initial size of the child in device-independent units. The FlexLayout.SetBasis method is used to apply the basis size to the Label instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nFlexLayout.SetBasis(label, 40);\n```\n\n----------------------------------------\n\nTITLE: Populate Picker with Data Binding in XAML\nDESCRIPTION: This XAML snippet shows how to populate a .NET MAUI Picker with data using data binding. The ItemsSource property is bound to a Monkeys property on the binding context, and the ItemDisplayBinding is set to the Name property of the Monkey object, indicating which property to display in the Picker.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Picker Title=\"Select a monkey\"\n        ItemsSource=\"{Binding Monkeys}\"\n        ItemDisplayBinding=\"{Binding Name}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting UseMauiEssentials property in iOS project file (XML)\nDESCRIPTION: This code snippet demonstrates how to modify the iOS project file to enable .NET MAUI's native device functionality by setting the `$(UseMauiEssentials)` property to `true`. This allows access to features previously found in Xamarin.Essentials.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-ios</TargetFramework>\n    ...\n    <UseMauiEssentials>true</UseMauiEssentials>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Registering fonts using a wildcard in the .NET MAUI project file (XML)\nDESCRIPTION: This XML snippet shows how to register all fonts within a specified directory by using a wildcard character in the .NET MAUI project file.  It allows the application to automatically recognize and package all font files within the 'Resources\\Fonts' folder (and optionally its subfolders) during the build process. This is an alternative to adding each font file individually.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n   <MauiFont Include=\"Resources\\Fonts\\*\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Updating Transport Controls in MauiVideoPlayer with C#\nDESCRIPTION: This code snippet shows how to update the transport controls of the `MediaPlayerElement` based on the `Video.AreTransportControlsEnabled` property. The `UpdateTransportControlsEnabled` method sets the `AreTransportControlsEnabled` property of the `MediaPlayerElement` to match the value of the corresponding property in the cross-platform `Video` control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : Grid, IDisposable\n{\n    MediaPlayerElement _mediaPlayerElement;\n    Video _video;\n    bool _isMediaPlayerAttached;\n    ...\n\n    public void UpdateTransportControlsEnabled()\n    {\n        _mediaPlayerElement.AreTransportControlsEnabled = _video.AreTransportControlsEnabled;\n    }\n    ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Determine UI Idiom at Runtime (C#)\nDESCRIPTION: This C# snippet demonstrates how to determine the user interface idiom being used by the .NET MAUI Mac Catalyst app at runtime. It checks the `UserInterfaceIdiom` property of the `UIViewController`'s `TraitCollection`.  It uses preprocessor directives to ensure it's only compiled for Mac Catalyst. It requires referencing the `UIKit` namespace and utilizes the `Platform.GetCurrentUIViewController()` method from .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/user-interface-idiom.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#if MACCATALYST\n    UIKit.UIViewController viewController = Platform.GetCurrentUIViewController();\n    if (viewController.TraitCollection.UserInterfaceIdiom == UIKit.UIUserInterfaceIdiom.Mac)\n        // Mac user interface idiom\n    else\n        // iPad user interface idiom\n#endif\n```\n\n----------------------------------------\n\nTITLE: Toggling TimePicker Update Mode in C#\nDESCRIPTION: This C# snippet demonstrates how to toggle the `UpdateMode` of a `TimePicker` between `Immediately` and `WhenFinished`. It first retrieves the current `UpdateMode` and then sets it to the opposite value. This allows dynamic control of the time selection behavior at runtime on iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/timepicker-selection.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nswitch (timePicker.On<iOS>().UpdateMode())\n{\n    case UpdateMode.Immediately:\n        timePicker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n        break;\n    case UpdateMode.WhenFinished:\n        timePicker.On<iOS>().SetUpdateMode(UpdateMode.Immediately);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining .NET for Android project\nDESCRIPTION: This code snippet defines a basic .NET 8 project for a .NET for Android application. It sets the TargetFramework to net8.0-android and the OutputType to Exe. For library projects, OutputType should be omitted or set to Library.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-android</TargetFramework>\n    <OutputType>Exe</OutputType>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Defining ImageButton Visual States in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define visual states for an ImageButton, specifically the Normal and Pressed states. When the button is pressed, its Scale property changes to 0.8, and when released, it returns to the normal state with a Scale of 1.  The PointerOver state is also included.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/imagebutton.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ImageButton Source=\"image.png\"\n             ...>\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Scale\"\n                                Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Pressed\">\n                    <VisualState.Setters>\n                        <Setter Property=\"Scale\"\n                                Value=\"0.8\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"PointerOver\" />\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</ImageButton>\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Background Gradient XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the flyout background to a `LinearGradientBrush`. It defines gradient stops with different colors and offsets to create a gradient effect for the flyout background.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_21\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <Shell.FlyoutBackground>\n        <LinearGradientBrush StartPoint=\"0,0\"\n                             EndPoint=\"1,1\">\n            <GradientStop Color=\"#8A2387\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"#E94057\"\n                          Offset=\"0.6\" />\n            <GradientStop Color=\"#F27121\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Shell.FlyoutBackground>\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Using Grid with Implicit Row Definitions in XAML\nDESCRIPTION: This XAML example showcases how the custom layout manager can automatically add the necessary RowDefinitions at runtime, even when they are not explicitly specified in the Grid definition. The Grid.Row attached property is used on the child labels.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid>\n    <Label Text=\"This Grid demonstrates replacing the LayoutManager for an existing layout type.\" />\n    <Label Grid.Row=\"1\"\n           Text=\"In this case, it's a LayoutManager for Grid which automatically adds enough rows to accommodate the rows specified in the child views' attached properties.\" />\n    <Label Grid.Row=\"2\"\n           Text=\"Notice that the Grid doesn't explicitly specify a RowDefinitions collection.\" />\n    <Label Grid.Row=\"3\"\n           Text=\"In MauiProgram.cs, an instance of an ILayoutManagerFactory has been added that replaces the default GridLayoutManager. The custom manager will automatically add the necessary RowDefinitions at runtime.\" />\n    <Label Grid.Row=\"5\"\n           Text=\"We can even skip some rows, and it will add the intervening ones for us (notice the gap between the previous label and this one).\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Create Path with path markup syntax in XAML\nDESCRIPTION: This XAML code demonstrates how to create a triangle using the path markup syntax for the Path.Data property. The path is defined using move (`M`), line (`L`), and close (`Z`) commands to specify the triangle's vertices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Data=\"M 10,100 L 100,100 100,50Z\"\n      Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a ToolbarItem in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a ToolbarItem with text and an icon, and add it to the ToolbarItems collection of a ContentPage. The Text property sets the displayed text, and the IconImageSource property specifies the icon to use.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/toolbaritem.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage.ToolbarItems>\n    <ToolbarItem Text=\"Add item\"\n                 IconImageSource=\"add.png\" />\n</ContentPage.ToolbarItems>\n```\n\n----------------------------------------\n\nTITLE: Configure iOS/Mac Catalyst Info.plist for Sharing Media Files\nDESCRIPTION: To enable sharing media files (photos and videos) on iOS and Mac Catalyst, the NSPhotoLibraryAddUsageDescription and NSPhotoLibraryUsageDescription keys must be added to the Info.plist file. These keys provide a description of why the app needs access to the photo library, which is displayed to the user when requesting permission.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/share.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>This app needs access to the photo gallery to save photos and videos.</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>This app needs access to the photo gallery to save photos and videos.</string>\n```\n\n----------------------------------------\n\nTITLE: Setting MaxLines in XAML\nDESCRIPTION: This snippet demonstrates setting the maximum number of lines for a Label using the MaxLines property in XAML. It also utilizes LineBreakMode to wrap the text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In facilisis nulla eu felis fringilla vulputate. Nullam porta eleifend lacinia. Donec at iaculis tellus.\"\n       LineBreakMode=\"WordWrap\"\n       MaxLines=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Context and Activity - Android - C#\nDESCRIPTION: This code snippet demonstrates how to access the current application context and activity on the Android platform using the Platform class. It retrieves the Android Context and the current Activity. The CurrentActivity property may return null if the app is not initialized or started.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/platform-helpers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = Platform.AppContext;\n\n// Current Activity or null if not initialized or not started.\nvar activity = Platform.CurrentActivity;\n```\n\n----------------------------------------\n\nTITLE: Proportional Positioning with AbsoluteLayout in C#\nDESCRIPTION: Demonstrates how to create an AbsoluteLayout with proportionally positioned child views in C#. It uses the AbsoluteLayout.SetLayoutBounds and AbsoluteLayout.SetLayoutFlags methods to achieve proportional positioning.  The position is set using proportional values while the size is set using absolute device-independent units.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/absolutelayout.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ProportionalDemoPage : ContentPage\n{\n    public ProportionalDemoPage()\n    {\n        BoxView blue = new BoxView { Color = Colors.Blue };\n        AbsoluteLayout.SetLayoutBounds(blue, new Rect(0.5, 0, 100, 25));\n        AbsoluteLayout.SetLayoutFlags(blue, AbsoluteLayoutFlags.PositionProportional);\n\n        BoxView green = new BoxView { Color = Colors.Green };\n        AbsoluteLayout.SetLayoutBounds(green, new Rect(0, 0.5, 25, 100));\n        AbsoluteLayout.SetLayoutFlags(green, AbsoluteLayoutFlags.PositionProportional);\n\n        BoxView red = new BoxView { Color = Colors.Red };\n        AbsoluteLayout.SetLayoutBounds(red, new Rect(1, 0.5, 25, 100));\n        AbsoluteLayout.SetLayoutFlags(red, AbsoluteLayoutFlags.PositionProportional);\n\n        BoxView black = new BoxView { Color = Colors.Black };\n        AbsoluteLayout.SetLayoutBounds(black, new Rect(0.5, 1, 100, 25));\n        AbsoluteLayout.SetLayoutFlags(black, AbsoluteLayoutFlags.PositionProportional);\n\n        Label label = new Label { Text = \"Centered text\" };\n        AbsoluteLayout.SetLayoutBounds(label, new Rect(0.5, 0.5, 110, 25));\n        AbsoluteLayout.SetLayoutFlags(label, AbsoluteLayoutFlags.PositionProportional);\n\n        Title = \"Proportional demo\";\n        Content = new AbsoluteLayout\n        {\n            Children =  { blue, green, red, black, label }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement NotificationManagerService for iOS/Mac Catalyst\nDESCRIPTION: This C# code snippet demonstrates how to implement the `INotificationManagerService` interface for iOS and Mac Catalyst.  It requests notification permissions, sends notifications using `UNUserNotificationCenter`, and handles received notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Foundation;\nusing UserNotifications;\n\nnamespace LocalNotificationsDemo.Platforms.iOS;\n\npublic class NotificationManagerService : INotificationManagerService\n{\n    int messageId = 0;\n    bool hasNotificationsPermission;\n\n    public event EventHandler? NotificationReceived;\n\n    public NotificationManagerService()\n    {\n        // Create a UNUserNotificationCenterDelegate to handle incoming messages.\n        UNUserNotificationCenter.Current.Delegate = new NotificationReceiver();\n\n        // Request permission to use local notifications.\n        UNUserNotificationCenter.Current.RequestAuthorization(UNAuthorizationOptions.Alert, (approved, err) =>\n        {\n            hasNotificationsPermission = approved;\n        });\n    }\n\n    public void SendNotification(string title, string message, DateTime? notifyTime = null)\n    {\n        // App doesn't have permissions.\n        if (!hasNotificationsPermission)\n            return;\n\n        messageId++;\n        var content = new UNMutableNotificationContent()\n        {\n            Title = title,\n            Subtitle = \"\",\n            Body = message,\n            Badge = 1\n        };\n\n        UNNotificationTrigger trigger;\n        if (notifyTime != null)\n            // Create a calendar-based trigger.\n            trigger = UNCalendarNotificationTrigger.CreateTrigger(GetNSDateComponents(notifyTime.Value), false);\n        else\n            // Create a time-based trigger, interval is in seconds and must be greater than 0.\n            trigger = UNTimeIntervalNotificationTrigger.CreateTrigger(0.25, false);\n\n        var request = UNNotificationRequest.FromIdentifier(messageId.ToString(), content, trigger);\n        UNUserNotificationCenter.Current.AddNotificationRequest(request, (err) =>\n        {\n            if (err != null)\n                throw new Exception($\"Failed to schedule notification: {err}\");\n        });\n    }\n\n    public void ReceiveNotification(string title, string message)\n    {\n        var args = new NotificationEventArgs()\n        {\n            Title = title,\n            Message = message\n        };\n        NotificationReceived?.Invoke(null, args);\n    }\n\n    NSDateComponents GetNSDateComponents(DateTime dateTime)\n    {\n        return new NSDateComponents\n        {\n            Month = dateTime.Month,\n            Day = dateTime.Day,\n            Year = dateTime.Year,\n            Hour = dateTime.Hour,\n            Minute = dateTime.Minute,\n            Second = dateTime.Second\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Build Version Codes for Android Versions\nDESCRIPTION: This table lists Android versions, their corresponding API Levels, release dates, and their associated Build Version Codes.  These codes are used in application development to target specific Android API levels and features.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/includes/api-levels.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n| Name               | Version     | API Level | Released | Build Version Code                      |\n|--------------------|-------------|-----------|----------|-----------------------------------------|\n| S                  | 12.0        | 31        | Oct 2021 | `BuildVersionCodes.S`                   |\n| R                  | 11.0        | 30        | Aug 2020 | `BuildVersionCodes.R`                   |\n| Q                  | 10.0        | 29        | Sep 2019 | `BuildVersionCodes.Q`                   |\n| Pie                | 9.0         | 28        | Aug 2018 | `BuildVersionCodes.P`                   |\n| Oreo               | 8.1         | 27        | Dec 2017 | `BuildVersionCodes.OMr1`                |\n| Oreo               | 8.0         | 26        | Aug 2017 | `BuildVersionCodes.O`                   |\n| Nougat             | 7.1         | 25        | Dec 2016 | `BuildVersionCodes.NMr1`                |\n| Nougat             | 7.0         | 24        | Aug 2016 | `BuildVersionCodes.N`                   |\n| Marshmallow        | 6.0         | 23        | Aug 2015 | `BuildVersionCodes.M`                   |\n| Lollipop           | 5.1         | 22        | Mar 2015 | `BuildVersionCodes.LollipopMr1`         |\n| Lollipop           | 5.0         | 21        | Nov 2014 | `BuildVersionCodes.Lollipop`            |\n| Kitkat Watch       | 4.4W        | 20        | Jun 2014 | `BuildVersionCodes.KitKatWatch`         |\n| Kitkat             | 4.4         | 19        | Oct 2013 | `BuildVersionCodes.KitKat`              |\n| Jelly Bean         | 4.3         | 18        | Jul 2013 | `BuildVersionCodes.JellyBeanMr2`        |\n| Jelly Bean         | 4.2-4.2.2   | 17        | Nov 2012 | `BuildVersionCodes.JellyBeanMr1`        |\n| Jelly Bean         | 4.1-4.1.1   | 16        | Jun 2012 | `BuildVersionCodes.JellyBean`           |\n| Ice Cream Sandwich | 4.0.3-4.0.4 | 15        | Dec 2011 | `BuildVersionCodes.IceCreamSandwichMr1` |\n| Ice Cream Sandwich | 4.0-4.0.2   | 14        | Oct 2011 | `BuildVersionCodes.IceCreamSandwich`    |\n| Honeycomb          | 3.2         | 13        | Jun 2011 | `BuildVersionCodes.HoneyCombMr2`        |\n| Honeycomb          | 3.1.x       | 12        | May 2011 | `BuildVersionCodes.HoneyCombMr1`        |\n| Honeycomb          | 3.0.x       | 11        | Feb 2011 | `BuildVersionCodes.HoneyComb`           |\n| Gingerbread        | 2.3.3-2.3.4 | 10        | Feb 2011 | `BuildVersionCodes.GingerBreadMr1`      |\n| Gingerbread        | 2.3-2.3.2   | 9         | Nov 2010 | `BuildVersionCodes.GingerBread`         |\n| Froyo              | 2.2.x       | 8         | Jun 2010 | `BuildVersionCodes.Froyo`               |\n| Eclair             | 2.1.x       | 7         | Jan 2010 | `BuildVersionCodes.EclairMr1`           |\n| Eclair             | 2.0.1       | 6         | Dec 2009 | `BuildVersionCodes.Eclair01`            |\n| Eclair             | 2.0         | 5         | Nov 2009 | `BuildVersionCodes.Eclair`              |\n| Donut              | 1.6         | 4         | Sep 2009 | `BuildVersionCodes.Donut`               |\n| Cupcake            | 1.5         | 3         | May 2009 | `BuildVersionCodes.Cupcake`             |\n| Base               | 1.1         | 2         | Feb 2009 | `BuildVersionCodes.Base11`              |\n| Base               | 1.0         | 1         | Oct 2008 | `BuildVersionCodes.Base`                |\n```\n\n----------------------------------------\n\nTITLE: Define CSS styles for .NET MAUI\nDESCRIPTION: This CSS snippet demonstrates how to define styles for various .NET MAUI elements, including NavigationPage, ContentPage, ListView, StackLayout, and Grid. It sets properties like background color, margin, spacing, and font styles.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nnavigationpage {\n    -maui-bar-background-color: lightgray;\n}\n\n^contentpage {\n    background-color: lightgray;\n}\n\n#listView {\n    background-color: lightgray;\n}\n\nstacklayout {\n    margin: 20;\n    -maui-spacing: 6;\n}\n\ngrid {\n    row-gap: 6;\n    column-gap: 6;\n}\n.mainPageTitle {\n    font-style: bold;\n    font-size: 14;\n}\n\n.mainPageSubtitle {\n    margin-top: 15;\n}\n\n.detailPageTitle {\n    font-style: bold;\n    font-size: 14;\n    text-align: center;\n}\n\n.detailPageSubtitle {\n    text-align: center;\n    font-style: italic;\n}\n\nlistview image {\n    height: 60;\n    width: 60;\n}\n\nstacklayout>image {\n    height: 200;\n    width: 200;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Project Build Settings (Windows)\nDESCRIPTION: This XML snippet configures the project build settings specifically for Windows target frameworks and the Release configuration. It sets the RuntimeIdentifier to avoid a known bug in the Windows App SDK. This configuration is processed during the build or publish process in Release mode.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-unpackaged-cli.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows' and '$(RuntimeIdentifierOverride)' != ''\">\n    <RuntimeIdentifier>$(RuntimeIdentifierOverride)</RuntimeIdentifier>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties in VideoHandler\nDESCRIPTION: This code snippet shows how to map properties from the cross-platform `Video` control to the native `MauiVideoPlayer` on Android. Each `Map` method is a static function which takes the `VideoHandler` and `Video` instances as arguments. It then calls a method on the `PlatformView` (MauiVideoPlayer) to update the corresponding property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapAreTransportControlsEnabled(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateTransportControlsEnabled();\n    }\n\n    public static void MapSource(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateSource();\n    }\n\n    public static void MapIsLooping(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdateIsLooping();\n    }\n\n    public static void MapPosition(VideoHandler handler, Video video)\n    {\n        handler.PlatformView?.UpdatePosition();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Keyboard Accelerator .NET MAUI XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable a keyboard accelerator by setting the `IsEnabled` property of a `MenuFlyoutItem` to `false`. When the `MenuFlyoutItem` is disabled, the associated keyboard accelerator (CTRL+X in this case) will not function. The `Clicked` event is also included for a functional menu item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Cut\"\n                Clicked=\"OnCutMenuFlyoutItemClicked\"\n                IsEnabled=\"false\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <KeyboardAccelerator Modifiers=\"Ctrl\"\n                             Key=\"X\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Using RelativeSource Binding in MultiBinding XAML\nDESCRIPTION: This XAML demonstrates how to use a RelativeSource binding within a MultiBinding inside a ControlTemplate.  The `TemplatedParent` relative binding mode binds to the runtime object instance to which the template is applied, allowing access to properties of the CardViewExpander control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             xmlns:controls=\"clr-namespace:DataBindingDemos.Controls\">\n    <ContentPage.Resources>\n        <local:AllTrueMultiConverter x:Key=\"AllTrueConverter\" />\n\n        <ControlTemplate x:Key=\"CardViewExpanderControlTemplate\"\n                         x:DataType=\"controls:CardViewExpander\">\n            <local:Expander BindingContext=\"{Binding Source={RelativeSource TemplatedParent}}\"\n                            IsExpanded=\"{Binding IsExpanded, Source={RelativeSource TemplatedParent}}\"\n                            BackgroundColor=\"{Binding CardColor}\"\n                            RowDefinitions=\"Auto,Auto\"\n                            Padding=\"8\">\n                <local:Expander.IsVisible>\n                    <MultiBinding Converter=\"{StaticResource AllTrueConverter}\">\n                        <Binding Path=\"IsExpanded\" />\n                        <Binding Path=\"IsEnabled\" />\n                    </MultiBinding>\n                </local:Expander.IsVisible>\n                <Grid>\n                    <!-- XAML that defines Expander header goes here -->\n                </Grid>\n                <Grid>\n                    <!-- XAML that defines Expander content goes here -->\n                </Grid>\n            </local:Expander>\n        </ControlTemplate>\n    </ContentPage.Resources>\n\n    <StackLayout>\n        <controls:CardViewExpander BorderColor=\"DarkGray\"\n                                   CardTitle=\"John Doe\"\n                                   CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                                   IconBackgroundColor=\"SlateGray\"\n                                   IconImageSource=\"user.png\"\n                                   ControlTemplate=\"{StaticResource CardViewExpanderControlTemplate}\"\n                                   IsEnabled=\"True\"\n                                   IsExpanded=\"True\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull to Refresh in CollectionView (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to enable pull-to-refresh functionality in a CollectionView using RefreshView.  The IsRefreshing property is bound to a viewmodel property, and the Command property is bound to a command that refreshes the data. It requires a binding context with an `IsRefreshing` property and a `RefreshCommand`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<RefreshView IsRefreshing=\"{Binding IsRefreshing}\"\n             Command=\"{Binding RefreshCommand}\">\n    <CollectionView ItemsSource=\"{Binding Animals}\">\n        ...\n    </CollectionView>\n</RefreshView>\n```\n\n----------------------------------------\n\nTITLE: Disable TabbedPage Animation in C# - Android\nDESCRIPTION: This C# snippet demonstrates how to disable the page transition animation within a TabbedPage on Android using the fluent API.  It utilizes the `On<Android>()` method to specify the Android platform and the `SetIsSmoothScrollEnabled(false)` method to disable the animation.  The `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace must be included.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-transition-animations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nOn<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetIsSmoothScrollEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Background Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the background color of a NavigationPage or TabbedPage bar to teal using the `-maui-bar-background-color` property. The property accepts a color value or `initial` to revert to the default value. It's a .NET MAUI-specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_59\n\nLANGUAGE: css\nCODE:\n```\n-maui-bar-background-color: teal;\n```\n\n----------------------------------------\n\nTITLE: Implementing SceneDelegate for Multi-Window Support - C#\nDESCRIPTION: This C# code snippet defines a `SceneDelegate` class, which is required to enable multi-window support on iPadOS and Mac Catalyst. It inherits from `MauiUISceneDelegate` and registers itself as a scene delegate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Foundation;\nusing Microsoft.Maui;\nusing UIKit;\n\nnamespace MyMauiApp;\n\n[Register(\"SceneDelegate\")]\npublic class SceneDelegate : MauiUISceneDelegate\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Spell Check on SearchBar in XAML (.NET MAUI, Windows)\nDESCRIPTION: This XAML snippet demonstrates how to enable spell checking for a SearchBar control on the Windows platform using the `SearchBar.IsSpellCheckEnabled` attached property. It requires importing the Windows-specific namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/searchbar-spell-check.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <SearchBar ... windows:SearchBar.IsSpellCheckEnabled=\"true\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: ViewModel for Preselected Items - C#\nDESCRIPTION: This C# code defines a ViewModel that contains a collection of selected monkeys. It initializes the SelectedMonkeys collection with specific indices from the Monkeys collection, enabling preselection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CollectionViewDemos.ViewModels\n{\n    public class MonkeysViewModel : INotifyPropertyChanged\n    {\n        ...\n        ObservableCollection<object> selectedMonkeys;\n        public ObservableCollection<object> SelectedMonkeys\n        {\n            get\n            {\n                return selectedMonkeys;\n            }\n            set\n            {\n                if (selectedMonkeys != value)\n                {\n                    selectedMonkeys = value;\n                }\n            }\n        }\n\n        public MonkeysViewModel()\n        {\n            ...\n            SelectedMonkeys = new ObservableCollection<object>()\n            {\n                Monkeys[1], Monkeys[3], Monkeys[4]\n            };\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XmlnsPrefixAttribute in C#\nDESCRIPTION: This code snippet demonstrates how to define a recommended namespace prefix at the assembly level using the `XmlnsPrefixAttribute` constructor. The constructor takes the XAML namespace identifier and the recommended prefix as arguments.  This helps XAML editors and design environments provide better support for the namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-prefix.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: XmlnsPrefix(\"http://schemas.microsoft.com/dotnet/2021/maui\", \"maui\")]\n```\n\n----------------------------------------\n\nTITLE: Control Scroll Position - Center (C#)\nDESCRIPTION: This C# code snippet demonstrates how to scroll an item to the center of the CarouselView using the `ScrollToPosition.Center` enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\ncarouselViewView.ScrollTo(monkey, position: ScrollToPosition.Center);\n```\n\n----------------------------------------\n\nTITLE: Drawing an Analog Clock with Combined Transforms in C#\nDESCRIPTION: This code snippet demonstrates how to combine translation, scaling, and rotation to draw an analog clock using the .NET MAUI Graphics canvas. It initializes the canvas, applies global translation and scaling, then draws the hour and minute marks using rotation. Finally, it draws the hour, minute, and second hands, rotating them according to the current time.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeLineCap = LineCap.Round;\ncanvas.FillColor = Colors.Gray;\n\n// Translation and scaling\ncanvas.Translate(dirtyRect.Center.X, dirtyRect.Center.Y);\nfloat scale = Math.Min(dirtyRect.Width / 200f, dirtyRect.Height / 200f);\ncanvas.Scale(scale, scale);\n\n// Hour and minute marks\nfor (int angle = 0; angle < 360; angle += 6)\n{\n    canvas.FillCircle(0, -90, angle % 30 == 0 ? 4 : 2);\n    canvas.Rotate(6);\n}\n\nDateTime now = DateTime.Now;\n\n// Hour hand\ncanvas.StrokeSize = 20;\ncanvas.SaveState();\ncanvas.Rotate(30 * now.Hour + now.Minute / 2f);\ncanvas.DrawLine(0, 0, 0, -50);\ncanvas.RestoreState();\n\n// Minute hand\ncanvas.StrokeSize = 10;\ncanvas.SaveState();\ncanvas.Rotate(6 * now.Minute + now.Second / 10f);\ncanvas.DrawLine(0, 0, 0, -70);\ncanvas.RestoreState();\n\n// Second hand\ncanvas.StrokeSize = 2;\ncanvas.SaveState();\ncanvas.Rotate(6 * now.Second);\ncanvas.DrawLine(0, 10, 0, -80);\ncanvas.RestoreState();\n```\n\n----------------------------------------\n\nTITLE: ScrollToAsync Method Example (C#)\nDESCRIPTION: This C# code demonstrates how to use the `ScrollToAsync` method to programmatically scroll a ScrollView to a specific position. It scrolls to 150 device-independent units from the top of the ScrollView with an animation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nawait scrollView.ScrollToAsync(0, 150, true);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Converter in XAML\nDESCRIPTION: This XAML code shows how to instantiate the `FloatToIntConverter` in the page's resource dictionary. This allows the converter to be shared among multiple bindings within the XAML page, improving efficiency and maintainability.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<local:FloatToIntConverter x:Key=\"intConverter\" />\n```\n\n----------------------------------------\n\nTITLE: Filling an Arc in .NET MAUI Graphics\nDESCRIPTION: This code snippet shows how to fill an arc on an ICanvas using the FillArc method. It sets the fill color and defines the arc's position, dimensions, start angle, end angle, and direction. The arc is automatically closed when filled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FillColor = Colors.Teal;\ncanvas.FillArc(10, 10, 100, 100, 0, 180, true);\n```\n\n----------------------------------------\n\nTITLE: Enabling Android Marshal Methods in .NET XML\nDESCRIPTION: This XML snippet shows how to enable Android marshal methods in a .NET for Android project by setting the `$(AndroidEnableMarshalMethods)` property to `true` in the project file. This can improve performance in applications. Setting `<AndroidEnableMarshalMethods>true</AndroidEnableMarshalMethods>` enables a new feature which optimizes JNI interop, potentially leading to performance gains.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <AndroidEnableMarshalMethods>true</AndroidEnableMarshalMethods>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a TableView with ImageCells in XAML\nDESCRIPTION: This XAML snippet shows how to create a TableView containing ImageCell objects. Each ImageCell displays text and an image. The Text and Detail properties define the text displayed in the cell, and the ImageSource property defines the image to display. The xbox.png file is assumed to be available as an embedded resource or in a platform-specific location.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<TableView Intent=\"Menu\">\n    <TableRoot>\n        <TableSection Title=\"Learn how to use your XBox\">\n            <ImageCell Text=\"1. Introduction\"\n                       Detail=\"Learn about your XBox and its capabilities.\"\n                       ImageSource=\"xbox.png\" />\n            <ImageCell Text=\"2. Turn it on\"\n                       Detail=\"Learn how to turn on your XBox.\"\n                       ImageSource=\"xbox.png\" />\n            <ImageCell Text=\"3. Connect your controller\"\n                       Detail=\"Learn how to connect your wireless controller.\"\n                       ImageSource=\"xbox.png\" />\n            <ImageCell Text=\"4. Launch a game\"\n                       Detail=\"Learn how to launch a game.\"\n                       ImageSource=\"xbox.png\" />\n        </TableSection>\n    </TableRoot>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Update iOS AppDelegate Class (C#)\nDESCRIPTION: Shows how to update the `AppDelegate` class in a .NET MAUI iOS project. The class must inherit from `MauiUIApplicationDelegate` and override the `CreateMauiApp` method to return the result of `MauiProgram.CreateMauiApp()`.  Dependencies: System, System.Collections.Generic, System.Linq, Microsoft.Maui, Foundation, UIKit.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Maui;\nusing Foundation;\nusing UIKit;\nusing YOUR_MAUI_CLASS_LIB_HERE;\n\nnamespace YOUR_NAMESPACE_HERE.iOS\n{\n    [Register(\"AppDelegate\")]\n    public partial class AppDelegate : MauiUIApplicationDelegate\n    {\n        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ControlTemplate in XAML\nDESCRIPTION: This XAML snippet defines a ControlTemplate named `CardViewControlTemplate` within a ContentPage's resources. It uses a Border as the root element and sets the BindingContext to the templated parent. The UI elements within the Border will bind to properties of the CardView instance to which the template is applied.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"\n             ...>\n    <ContentPage.Resources>\n      <ControlTemplate x:Key=\"CardViewControlTemplate\"\n                       x:DataType=\"controls:CardView\">\n          <Border BindingContext=\"{Binding Source={RelativeSource TemplatedParent}}\"\n                  BackgroundColor=\"{Binding CardColor}\"\n                  Stroke=\"{Binding BorderColor}\"\n                 ...>\n              <!-- UI objects that define the CardView visual structure -->\n          </Border>\n      </ControlTemplate>\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a FlexLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a FlexLayout that displays its views in a single column. It utilizes the Direction, AlignItems, and JustifyContent properties to control the layout's behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<FlexLayout Direction=\"Column\"\n            AlignItems=\"Center\"\n            JustifyContent=\"SpaceEvenly\">\n    <Label Text=\"FlexLayout in Action\" />\n    <Button Text=\"Button\" />\n    <Label Text=\"Another Label\" />\n</FlexLayout>\n```\n\n----------------------------------------\n\nTITLE: Intent Filter C#\nDESCRIPTION: This example shows how to use the `IntentFilterAttribute` to specify intent actions and categories for an activity.  Multiple intent filters can be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\nusing Android.Content;\n\nnamespace MyMauiApp;\n\n[Activity(Label = \"My Maui App\", MainLauncher = true)]\n[IntentFilter(new[] {Intent.ActionView},\n    Categories = new[] {Intent.CategorySampleCode, \"my.custom.category\"})]\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Set TabbedPage Translucency Mode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the translucency mode of a TabbedPage's tab bar to Opaque using the ios:TabbedPage.TranslucencyMode bindable property. It requires the Microsoft.Maui.Controls namespace and the iOS specific namespace to be declared in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/tabbedpage-translucent-tabbar.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage ...\n            xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n            ios:TabbedPage.TranslucencyMode=\"Opaque\">\n    ...\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: SearchBar Style in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet shows how to set the SearchBarStyle property of a SearchBar to 'Minimal' on iOS. This removes the background from the SearchBar, making the search field translucent. The code uses the ios namespace to access iOS-specific configurations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/searchbar-style.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <SearchBar ios:SearchBar.SearchBarStyle=\"Minimal\"\n                   Placeholder=\"Enter search term\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Picker UpdateMode in C# for iOS\nDESCRIPTION: This C# snippet demonstrates how to set the `UpdateMode` property of a `Picker` control to `WhenFinished` using the fluent API. This specifies that item selection occurs only when the Done button is pressed on iOS. The `On<iOS>()` method ensures that the platform-specific configuration only applies to iOS. Requires importing `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/picker-selection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\npicker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n```\n\n----------------------------------------\n\nTITLE: Initializing Privacy Manifest XML Structure\nDESCRIPTION: This XML snippet shows the initial structure of the PrivacyInfo.xcprivacy file, including the NSPrivacyAccessedAPITypes key with an empty array. This array will be populated with dictionaries detailing the required reason API categories and their corresponding reasons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/privacy-manifest.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n    </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Combine Compiled and Classic Bindings - XAML\nDESCRIPTION: This XAML snippet demonstrates how to combine compiled bindings with classic bindings by setting `x:DataType` to `null` using the `x:Null` markup extension. This indicates that any binding expressions within the view hierarchy will use classic bindings. It demonstrates switching between compiled and classic bindings within a view hierarchy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout x:DataType=\"local:HslColorViewModel\">\n    <StackLayout.BindingContext>\n        <local:HslColorViewModel Color=\"Sienna\" />\n    </StackLayout.BindingContext>\n    <BoxView Color=\"{Binding Color}\"\n             VerticalOptions=\"FillAndExpand\" />\n    <StackLayout x:DataType=\"{x:Null}\"\n                 Margin=\"10, 0\">\n        <Label Text=\"{Binding Name}\" />\n        <Slider Value=\"{Binding Hue}\" />\n        <Label Text=\"{Binding Hue, StringFormat='Hue = {0:F2}'}\" />\n        <Slider Value=\"{Binding Saturation}\" />\n        <Label Text=\"{Binding Saturation, StringFormat='Saturation = {0:F2}'}\" />\n        <Slider Value=\"{Binding Luminosity}\" />\n        <Label Text=\"{Binding Luminosity, StringFormat='Luminosity = {0:F2}'}\" />\n    </StackLayout>\n</StackLayout>   \n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Visibility in XAML (iOS)\nDESCRIPTION: This XAML snippet demonstrates how to set the status bar visibility and update animation on an iOS ContentPage using attached properties. It requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace to be declared. The `PrefersStatusBarHidden` property controls the visibility, and `PreferredStatusBarUpdateAnimation` controls the animation when the status bar's visibility changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-status-bar-visibility.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             ios:Page.PrefersStatusBarHidden=\"True\"\n             ios:Page.PreferredStatusBarUpdateAnimation=\"Fade\">\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Get Named Element from Template in C#\nDESCRIPTION: This C# snippet demonstrates how to retrieve a named element from a ControlTemplate using the `GetTemplateChild` method. The method is called within the `OnApplyTemplate` override, which is invoked after the template has been instantiated.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class AccessTemplateElementPage : HeaderFooterPage\n{\n    Label themeLabel;\n\n    public AccessTemplateElementPage()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnApplyTemplate()\n    {\n        base.OnApplyTemplate();\n        themeLabel = (Label)GetTemplateChild(\"changeThemeLabel\");\n        themeLabel.Text = OriginalTemplate ? \"Aqua Theme\" : \"Teal Theme\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Switch Appearance in C# (net-maui-8.0 <=net-maui-9.0)\nDESCRIPTION: This code snippet demonstrates how to customize the appearance of a Switch in C# by setting the OnColor and ThumbColor properties. The Colors class provides predefined colors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSwitch switch = new Switch { OnColor = Colors.Orange, ThumbColor = Colors.Green };\n```\n\n----------------------------------------\n\nTITLE: Binding to CultureInfo with Constructor (XAML)\nDESCRIPTION: Shows how to bind to a CultureInfo object created with a constructor, specifying the culture as 'fr-FR' for French. Demonstrates using the Source property of the Binding to instantiate a CultureInfo object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Label>\n    <Label.Text>\n        <Binding x:DataType=\"globe:CultureInfo\",\n                 Path=\"DateTimeFormat.DayNames[3]\"\n                 StringFormat=\"The middle day of the week in France is {0}\">\n            <Binding.Source>\n                <globe:CultureInfo>\n                    <x:Arguments>\n                        <x:String>fr-FR</x:String>\n                    </x:Arguments>\n                </globe:CultureInfo>\n            </Binding.Source>\n        </Binding>\n    </Label.Text>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Handle ListView Scrolled Event in C#\nDESCRIPTION: This C# snippet shows how to subscribe to the `Scrolled` event of a ListView in code behind. It creates a new ListView instance and attaches an event handler to the `Scrolled` event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nListView listView = new ListView();\nlistView.Scrolled += OnListViewScrolled;\n```\n\n----------------------------------------\n\nTITLE: Add initial Entitlements.plist file\nDESCRIPTION: This XML snippet shows the basic structure required for a new Entitlements.plist file in a .NET MAUI iOS app. This file allows you to request elevated permissions for accessing system resources. It's placed in the Platforms\\iOS folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/entitlements.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Declare Supported Languages in Package.appxmanifest - XML\nDESCRIPTION: This code shows how to declare the supported languages in the Package.appxmanifest file for Windows applications. This is required for the Windows application to support multiple languages and properly localize resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n    <Resource Language=\"en-US\"/>\n    <Resource Language=\"de-DE\"/>\n    <Resource Language=\"es-ES\"/>\n    <Resource Language=\"fr-FR\"/>\n    <Resource Language=\"ja-JP\"/>\n    <Resource Language=\"pt-BR\"/>\n    <Resource Language=\"pt-PT\"/>\n    <Resource Language=\"ru-RU\"/>\n    <Resource Language=\"zh-CN\"/>\n    <Resource Language=\"zh-TW\"/>\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Set TitleView in XAML\nDESCRIPTION: This snippet demonstrates how to display a custom view (in this case, a `Slider`) in the navigation bar of a `ContentPage` using the `NavigationPage.TitleView` attached property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"NavigationPageTitleView.TitleViewPage\">\n    <NavigationPage.TitleView>\n        <Slider HeightRequest=\"44\"\n                WidthRequest=\"300\" />\n    </NavigationPage.TitleView>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting ShouldDelayContentTouches in C#\nDESCRIPTION: This C# code snippet shows how to use the fluent API to set `ShouldDelayContentTouches` to `false` on a ScrollView specifically for iOS. It utilizes the `On<iOS>()` method to ensure the platform-specific configuration is applied only on iOS devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/scrollview-content-touches.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nscrollView.On<iOS>().SetShouldDelayContentTouches(false);\n```\n\n----------------------------------------\n\nTITLE: Add launchSettings.json for Debugging\nDESCRIPTION: Adds a launchSettings.json file to the Properties folder of the .NET MAUI project. This configuration is used for debugging and specifies the command name and enables native debugging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"profiles\": {\n    \"Windows Machine\": {\n      \"commandName\": \"MsixPackage\",\n      \"nativeDebugging\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppThemeBinding Markup Extension in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the AppThemeBinding markup extension to set the TextColor of a Label and the Source of an Image based on the current system theme (light or dark). It uses inline values for Light and Dark themes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Label Text=\"This text is green in light mode, and red in dark mode.\"\n           TextColor=\"{AppThemeBinding Light=Green, Dark=Red}\" />\n    <Image Source=\"{AppThemeBinding Light=lightlogo.png, Dark=darklogo.png}\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Backdrop Gradient XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the flyout backdrop to a `LinearGradientBrush`. It defines gradient stops with different colors and offsets to create a gradient effect for the flyout backdrop.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_24\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <Shell.FlyoutBackdrop>\n        <LinearGradientBrush StartPoint=\"0,0\"\n                             EndPoint=\"1,1\">\n            <GradientStop Color=\"#8A2387\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"#E94057\"\n                          Offset=\"0.6\" />\n            <GradientStop Color=\"#F27121\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Shell.FlyoutBackdrop>\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Display View in Navigation Bar - XAML\nDESCRIPTION: Displays an Image view in the navigation bar of a ContentPage using the `Shell.TitleView` attached property. The Image source, horizontal and vertical options are also set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <Shell.TitleView>\n        <Image Source=\"logo.png\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </Shell.TitleView>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Passing Data via BindingContext - C#\nDESCRIPTION: This snippet demonstrates how to pass data to a new page by setting the page's `BindingContext` property to the data object. The `Contact` object is assigned to the `BindingContext` of the `DetailsPage`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nContact contact = new Contact\n{\n    Name = \"Jane Doe\",\n    Age = 30,\n    Occupation = \"Developer\",\n    Country = \"USA\"\n};\n\nawait Navigation.PushAsync(new DetailsPage\n{\n    BindingContext = contact  \n});\n```\n\n----------------------------------------\n\nTITLE: CarouselView PeekAreaInsets C#\nDESCRIPTION: This C# code programmatically sets the PeekAreaInsets property of a CarouselView to 100, causing adjacent items to be partially visible.  Dependencies: Microsoft.Maui.Controls\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ...\n    PeekAreaInsets = new Thickness(100)\n};\n```\n\n----------------------------------------\n\nTITLE: Create a CheckBox in C#\nDESCRIPTION: This code snippet demonstrates how to create a CheckBox programmatically in C# and set its IsChecked property to true. This approach allows creating CheckBoxes dynamically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nCheckBox checkBox = new CheckBox { IsChecked = true };\n```\n\n----------------------------------------\n\nTITLE: Activity Name Override C#\nDESCRIPTION: This example shows how to override the default activity name using the `Name` property of the `ActivityAttribute`. This is useful for backward compatibility or when a readable Java name is needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\n\nnamespace MyMauiApp;\n\n[Activity (Name=\"companyname.mymauiapp.activity\")]\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Bind SemanticProperties.Description to a Label in XAML\nDESCRIPTION: This code snippet shows how to bind the SemanticProperties.Description of a Switch control to the Text property of a Label. This allows the screen reader to use the Label's text to describe the Switch. The `{Binding ...}` syntax connects the Switch description to the Label's text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Label x:Name=\"label\"\n       Text=\"Enable dark mode: \" />\n<Switch SemanticProperties.Description=\"{Binding x:DataType='Label', Source={x:Reference label}, Path=Text}\" />\n```\n\n----------------------------------------\n\nTITLE: UpdateStatus Method on iOS/Mac Catalyst (C#)\nDESCRIPTION: This code snippet demonstrates how the `UpdateStatus` method is implemented on iOS and Mac Catalyst. It uses the `AVPlayer.Status` and `AVPlayer.TimeControlStatus` properties to determine the current `VideoStatus` which is then set on the `Video` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        Video _video;\n        ...\n\n        public void UpdateStatus()\n        {\n            VideoStatus videoStatus = VideoStatus.NotReady;\n\n            switch (_player.Status)\n            {\n                case AVPlayerStatus.ReadyToPlay:\n                    switch (_player.TimeControlStatus)\n                    {\n                        case AVPlayerTimeControlStatus.Playing:\n                            videoStatus = VideoStatus.Playing;\n                            break;\n\n                        case AVPlayerTimeControlStatus.Paused:\n                            videoStatus = VideoStatus.Paused;\n                            break;\n                    }\n                    break;\n            }\n            ((IVideoController)_video).Status = videoStatus;\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consume HSL Color ViewModel in XAML\nDESCRIPTION: This XAML snippet demonstrates how to consume the HslColorViewModel by setting it as the BindingContext of a ContentPage. It defines data bindings for a BoxView (Color), a Label (Name), and three Sliders (Hue, Saturation, Luminosity) to the corresponding properties in the ViewModel. The Sliders use TwoWay binding to allow changes from the UI to update the ViewModel, and vice versa.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-mode.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.SimpleColorSelectorPage\"\n             x:DataType=\"local:HslColorViewModel\">\n    <ContentPage.BindingContext>\n        <local:HslColorViewModel Color=\"MediumTurquoise\" />\n    </ContentPage.BindingContext>\n\n    <ContentPage.Resources>\n        <Style TargetType=\"Slider\">\n            <Setter Property=\"VerticalOptions\" Value=\"CenterAndExpand\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"*\" />\n        </Grid.RowDefinitions>\n        <BoxView Color=\"{Binding Color}\"\n                 Grid.Row=\"0\" />\n        <StackLayout Grid.Row=\"1\"\n                     Margin=\"10, 0\">\n            <Label Text=\"{Binding Name}\"\n                   HorizontalTextAlignment=\"Center\" />\n            <Slider Value=\"{Binding Hue}\" />\n            <Slider Value=\"{Binding Saturation}\" />\n            <Slider Value=\"{Binding Luminosity}\" />\n        </StackLayout>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Item Clicks for WebView Navigation in C#\nDESCRIPTION: This C# code snippet shows the event handler for the Clicked event of the MenuFlyoutItem in the WebView's context menu. It retrieves the CommandParameter of the clicked menu item and uses it to construct a URL, which is then loaded into the WebView.  The event handler expects the sender to be a MenuFlyoutItem and the CommandParameter to be a string.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/context-menu.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnWebViewGoToRepoClicked(object sender, EventArgs e)\n{\n    MenuFlyoutItem menuItem = sender as MenuFlyoutItem;\n    string repo = menuItem.CommandParameter as string;\n    string url = repo == \"docs\" ? \"docs-maui\" : \"maui\";\n    webView.Source = new UrlWebViewSource { Url = $\"https://github.com/dotnet/{url}\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Labels in StackLayout (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to align labels within a vertically oriented StackLayout using the HorizontalOptions property and the Start, Center, End, and Fill fields of the LayoutOptions structure. It showcases different horizontal alignments for labels.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/align-position.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n  ...\n  <Label Text=\"Start\" BackgroundColor=\"Gray\" HorizontalOptions=\"Start\" />\n  <Label Text=\"Center\" BackgroundColor=\"Gray\" HorizontalOptions=\"Center\" />\n  <Label Text=\"End\" BackgroundColor=\"Gray\" HorizontalOptions=\"End\" />\n  <Label Text=\"Fill\" BackgroundColor=\"Gray\" HorizontalOptions=\"Fill\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Running .NET for Android projects with dotnet run\nDESCRIPTION: These commands demonstrate how to run .NET for Android projects using the `dotnet run` command. The `-p:AdbTarget` parameter is used to specify the target Android device or emulator. The first command runs on the only attached physical device, the second on the only running emulator, and the third on a specified device or emulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\n// Run on the only attached Android physical device\ndotnet run -p:AdbTarget=-d\n\n// Run on the only running Android emulator\ndotnet run -p:AdbTarget=-e\n\n// Run on the specified Android physical device or emulator\ndotnet run -p:AdbTarget=\"-s emulator-5554\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a Pin Collection with Data Binding in XAML .NET MAUI\nDESCRIPTION: This XAML demonstrates how to display a collection of pins on a .NET MAUI Map using data binding. It binds the Map's ItemsSource property to a collection of Position objects in the viewmodel and uses an ItemTemplate to define how each Position object is rendered as a Pin.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_35\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\">    \n    <Grid>\n        ...\n        <maps:Map x:Name=\"map\"\n                  ItemsSource=\"{Binding Positions}\">\n            <maps:Map.ItemTemplate>\n                <DataTemplate x:DataType=\"models:Position\">\n                    <maps:Pin Location=\"{Binding Location}\"\n                              Address=\"{Binding Address}\"\n                              Label=\"{Binding Description}\" />\n                </DataTemplate>    \n            </maps:Map.ItemTemplate>\n        </maps:Map>\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Instantiate a CheckBox in XAML\nDESCRIPTION: This code snippet demonstrates how to create a basic CheckBox in XAML. It creates a default checkbox without any initial state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox />\n```\n\n----------------------------------------\n\nTITLE: C# Class with Static Fields\nDESCRIPTION: This C# code defines a static class `AppConstants` with two public static readonly fields: `BackgroundColor` and `ForegroundColor`. These fields are initialized with `Colors.Aqua` and `Colors.Brown` respectively.  This class is designed to hold constants accessible throughout a .NET MAUI application via the `x:Static` markup extension.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace XamlSamples\n{\n    static class AppConstants\n    {\n        public static readonly Color BackgroundColor = Colors.Aqua;\n        public static readonly Color ForegroundColor = Colors.Brown;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Element into View with ScrollToAsync in C#\nDESCRIPTION: This code snippet demonstrates how to scroll a specified Label element into view within a ScrollView using the ScrollToAsync method in .NET MAUI. It specifies the element to scroll to, the desired position after scrolling, and whether the scrolling should be animated. Requires a ScrollView named `scrollView` and a Label named `label` to be defined in the XAML or C# code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait scrollView.ScrollToAsync(label, ScrollToPosition.End, true);\n```\n\n----------------------------------------\n\nTITLE: Adding POST_NOTIFICATIONS permission XML\nDESCRIPTION: This snippet demonstrates how to add the POST_NOTIFICATIONS permission to the AndroidManifest.xml file. This permission is required to send push notifications on Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_51\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the maximum input length for an Entry, Editor, or SearchBar to 20 characters using the `-maui-max-length` property. It accepts an integer value or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_62\n\nLANGUAGE: css\nCODE:\n```\n-maui-max-length: 20;\n```\n\n----------------------------------------\n\nTITLE: AbsoluteLayout Extension Methods in C#\nDESCRIPTION: This C# code shows extension methods for AbsoluteLayout to simplify adding child views with specific layout bounds and flags. These methods allow adding views with either a Rect for size and position or a Point for only the position, setting the size to AutoSize by default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/absolutelayout.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Layouts;\n\nnamespace Microsoft.Maui.Controls\n{\n    public static class AbsoluteLayoutExtensions\n    {\n        public static void Add(this AbsoluteLayout absoluteLayout, IView view, Rect bounds, AbsoluteLayoutFlags flags = AbsoluteLayoutFlags.None)\n        {\n            if (view == null)\n                throw new ArgumentNullException(nameof(view));\n            if (bounds.IsEmpty)\n                throw new ArgumentNullException(nameof(bounds));\n\n            absoluteLayout.Add(view);\n            absoluteLayout.SetLayoutBounds(view, bounds);\n            absoluteLayout.SetLayoutFlags(view, flags);\n        }\n\n        public static void Add(this AbsoluteLayout absoluteLayout, IView view, Point position)\n        {\n            if (view == null)\n                throw new ArgumentNullException(nameof(view));\n            if (position.IsEmpty)\n                throw new ArgumentNullException(nameof(position));\n\n            absoluteLayout.Add(view);\n            absoluteLayout.SetLayoutBounds(view, new Rect(position.X, position.Y, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Text in XAML\nDESCRIPTION: This snippet shows how to display HTML text in a Label using XAML. The TextType property is set to Html, and the Text property contains the HTML string. The HTML string requires special escaping.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"This is &lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/span&gt; text.\"\n       TextType=\"Html\"  />\n```\n\n----------------------------------------\n\nTITLE: Enable Slider UpdateOnTap in XAML\nDESCRIPTION: This XAML snippet demonstrates how to enable the `Slider.UpdateOnTap` property on iOS, which allows the `Slider.Value` property to be set by tapping on the Slider bar. It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/slider-thumb.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <Slider ... ios:Slider.UpdateOnTap=\"true\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Declare POST_NOTIFICATIONS Permission in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to declare the `POST_NOTIFICATIONS` permission in the `AndroidManifest.xml` file. This permission is required for sending notifications on Android 13 (API 33) and higher.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Window.SizeChanged event handler in .NET MAUI C#\nDESCRIPTION: Registers an event handler for the WinUI Window.SizeChanged event within a .NET MAUI application's lifecycle configuration. It uses the AddWindows extension method to access the Windows-specific lifecycle events and attach the OnSizeChanged event handler to the WindowCreated event. This allows the app to receive notifications when the native app window's size changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n...\n\npublic static MauiApp CreateMauiApp()\n{\n      var builder = MauiApp.CreateBuilder();\n      builder\n            .UseMauiApp<App>()\n            .ConfigureLifecycleEvents(events =>\n            {\n#if WINDOWS\n                  events.AddWindows(windows => windows\n                         .OnWindowCreated(window =>\n                         {\n                                window.SizeChanged += OnSizeChanged;\n                         }));\n#endif\n            });\n\n      return builder.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Set TrimMode Property in .NET MAUI Project File (csproj)\nDESCRIPTION: This code snippet shows how to set the `TrimMode` build property in the project file to control the trimming behavior. `TrimMode` can be set to `full` to remove all unused code or `partial` to trim only the base class library (BCL), platform-specific assemblies, and assemblies that have opted into trimming. This property allows developers to fine-tune the amount of code removed during the build process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/trimming.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <TrimMode>full</TrimMode>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Implement RegisteredForRemoteNotifications Method - C#\nDESCRIPTION: This C# code defines the `RegisteredForRemoteNotifications` method in the `AppDelegate` class. This method is called when the app is successfully registered to receive remote notifications. It passes the `deviceToken` obtained from APNS to the `CompleteRegistrationAsync` method.  The `ContinueWith` ensures that any exceptions during the registration process are handled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(\"application:didRegisterForRemoteNotificationsWithDeviceToken:\")]\npublic void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\n{\n    CompleteRegistrationAsync(deviceToken)\n        .ContinueWith((task) =>\n        {\n            if (task.IsFaulted)\n                throw task.Exception;\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new .NET MAUI project\nDESCRIPTION: This command creates a new .NET MAUI project named 'MyMauiApp'. It uses the 'maui' template and specifies the project name with the '-n' option. It requires the .NET SDK to be installed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new maui -n \"MyMauiApp\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Strings with MultiBinding XAML\nDESCRIPTION: This XAML snippet shows how to use the `StringFormat` property in a `MultiBinding` to format the combined values from multiple bindings into a single string, which is then displayed in a Label. Note the empty curly braces prefix to avoid XAML parser confusion.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label>\n    <Label.Text>\n        <MultiBinding StringFormat=\"{}{0} {1} {2}\">\n            <Binding Path=\"Employee1.Forename\" />\n            <Binding Path=\"Employee1.MiddleName\" />\n            <Binding Path=\"Employee1.Surname\" />\n        </MultiBinding>\n    </Label.Text>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Implement CompleteRegistrationAsync Method - C#\nDESCRIPTION: This C# code defines the `CompleteRegistrationAsync` method in the `AppDelegate` class. It sets the `IDeviceInstallationService.Token` property value using the hex string representation of the device token provided by APNS. It then calls the `RefreshRegistrationAsync` method of the `INotificationRegistrationService` to update the device registration with the notification hub.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\nTask CompleteRegistrationAsync(NSData deviceToken)\n{\n    DeviceInstallationService.Token = deviceToken.ToHexString();\n    return NotificationRegistrationService.RefreshRegistrationAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Set the base size of the splash screen image in XML\nDESCRIPTION: This XML snippet demonstrates how to set the base size of the splash screen image. The base size is used for resizing the image for different platforms. The `BaseSize` attribute specifies the width and height of the image.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" BaseSize=\"128,128\" />\n```\n\n----------------------------------------\n\nTITLE: Enable .NET MAUI Support in Project File (XML)\nDESCRIPTION: Demonstrates how to enable .NET MAUI support in a platform project by setting the `$(UseMaui)` build property to `true` within the project file. This setting is required to properly configure the project for .NET MAUI development.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    ...\n    <UseMaui>true</UseMaui>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Data Binding with Slider in XAML\nDESCRIPTION: This XAML code demonstrates data binding the Rotation property of a Label and the Text property of another Label to the Value property of a Slider. The Slider's value is formatted to display only the integer portion.  It relies on the `x:Reference` markup extension to bind to the named Slider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"SliderDemos.BasicSliderBindingsPage\"\n             Title=\"Basic Slider Bindings\"\n             Padding=\"10, 0\">\n    <StackLayout>\n        <Label Text=\"ROTATING TEXT\"\n               Rotation=\"{Binding x:DataType='Slider',\n                                  Source={x:Reference slider},\n                                  Path=Value}\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Slider x:Name=\"slider\"\n                Maximum=\"360\" />\n        <Label x:Name=\"displayLabel\"\n               Text=\"{Binding x:DataType='Slider',\n                              Source={x:Reference slider},\n                              Path=Value,\n                              StringFormat='The Slider value is {0:F0}'}\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set ListView CachingStrategy in C#\nDESCRIPTION: Shows how to set the `ListViewCachingStrategy` in C# by using the constructor overload to initialize a ListView with `RecycleElement` strategy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nListView listView = new ListView(ListViewCachingStrategy.RecycleElement);\n```\n\n----------------------------------------\n\nTITLE: Reset Xcode Selection\nDESCRIPTION: This snippet provides a command to reset the Xcode selection if a build error occurs, specifically when the Xcode app bundle is not found. It resolves potential issues with Xcode configurations by resetting the active Xcode installation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/cli.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nxcode-select --reset\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets Using Essentials (C#)\nDESCRIPTION: This C# snippet demonstrates how to access raw assets that have been deployed with a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. The method takes the name of the asset file as a parameter and returns a stream that can be used to read the file's contents.  Dependencies: Requires the `Microsoft.Maui.Essentials` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/viewmodel-shared/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting HorizontalStackLayout in VerticalStackLayout XAML\nDESCRIPTION: This XAML code demonstrates how to nest HorizontalStackLayout objects within a VerticalStackLayout in .NET MAUI. The outer VerticalStackLayout arranges the child HorizontalStackLayouts vertically, each containing a colored rectangle and a label representing a primary color.  The Border elements provide visual separation and padding. It requires the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/verticalstacklayout.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.VerticalStackLayoutPage\">\n    <VerticalStackLayout Margin=\"20\"\n                         Spacing=\"6\">\n       <Label Text=\"Primary colors\" />\n       <Border Stroke=\"Black\"\n               Padding=\"5\">\n           <HorizontalStackLayout Spacing=\"15\">\n               <Rectangle Fill=\"Red\"\n                          HeightRequest=\"30\"\n                          WidthRequest=\"30\" />\n               <Label Text=\"Red\"\n                      FontSize=\"18\" />\n           </HorizontalStackLayout>\n       </Border>\n       <Border Stroke=\"Black\"\n               Padding=\"5\">\n           <HorizontalStackLayout Spacing=\"15\">\n               <Rectangle Fill=\"Yellow\"\n                          HeightRequest=\"30\"\n                          WidthRequest=\"30\" />\n               <Label Text=\"Yellow\"\n                      FontSize=\"18\" />\n           </HorizontalStackLayout>\n       </Border>\n       <Border Stroke=\"Black\"\n               Padding=\"5\">\n           <HorizontalStackLayout Spacing=\"15\">\n               <Rectangle Fill=\"Blue\"\n                          HeightRequest=\"30\"\n                          WidthRequest=\"30\" />\n               <Label Text=\"Blue\"\n                      FontSize=\"18\" />\n           </HorizontalStackLayout>\n       </Border>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Consuming Bindable Property in XAML\nDESCRIPTION: This code demonstrates how to use a bindable property in XAML, setting the `IsExpanded` property of an `Expander` control to `true` using the previously defined `local` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Expander IsExpanded=\"true\">\n    ...\n</Expander>\n```\n\n----------------------------------------\n\nTITLE: Create .NET SDK-style Project File\nDESCRIPTION: This XML snippet demonstrates the structure of a .NET SDK-style project file for Android. It specifies the target framework, supported OS platform, output type, and other properties.  The TargetFramework element identifies the project as a .NET project targeting Android net8.0-android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-android</TargetFramework>\n    <SupportedOSPlatformVersion>21</SupportedOSPlatformVersion>\n    <OutputType>Exe</OutputType>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <ApplicationId>com.companyname.AndroidApp2</ApplicationId>\n    <ApplicationVersion>1</ApplicationVersion>\n    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Playing Inline Video on iOS - UrlLoading Event in C#\nDESCRIPTION: This code snippet sets the UrlLoadingStrategy property to `OpenInWebView` for iOS to play inline video in a Blazor hybrid app. This is accomplished in the event handler for the BlazorWebView.UrlLoading event. Requires the IOS preprocessor directive.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprivate void BlazorUrlLoading(object? sender, UrlLoadingEventArgs e)\n{\n#if IOS\n    e.UrlLoadingStrategy = UrlLoadingStrategy.OpenInWebView;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Override OnCreate in MainActivity (C#)\nDESCRIPTION: This C# method overrides the `OnCreate` method in the `MainActivity` class. It retrieves the Firebase token and adds the `MainActivity` as an `IOnSuccessListener` to receive the token. It also calls the `ProcessNotificationActions` method to handle any notification actions passed in the initial `Intent`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnCreate(Bundle? savedInstanceState)\n{\n    base.OnCreate(savedInstanceState);\n\n    if (DeviceInstallationService.NotificationsSupported)\n        FirebaseMessaging.Instance.GetToken().AddOnSuccessListener(this);\n\n    ProcessNotificationsAction(Intent);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable fast scrolling in ListView using C# - .NET MAUI Android\nDESCRIPTION: This C# snippet shows how to enable fast scrolling in a .NET MAUI ListView on Android using the fluent API.  It utilizes the `ListView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>` method to specify that the configuration is Android-specific and then uses the `SetIsFastScrollEnabled` method to enable fast scrolling.  Requires `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/listview-fast-scrolling.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nvar listView = new Microsoft.Maui.Controls.ListView { IsGroupingEnabled = true, ItemTemplate = personDataTemplate };\nlistView.SetBinding(ItemsView<Cell>.ItemsSourceProperty, static (ListViewViewModel vm) => vm.GroupedEmployees); // .NET 9+ compiled binding\nlistView.GroupDisplayBinding = Binding.Create(static (Grouping<char, Person> g) => g.Key); // .NET 9+ compiled binding\nlistView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetIsFastScrollEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Polyline in XAML for MAUI Map\nDESCRIPTION: This XAML code demonstrates how to create a Polyline on a MAUI Map. The Polyline's StrokeColor and StrokeWidth properties are set. The GeoPath property is populated with a list of Location objects, which define the line's vertices.  The Microsoft.Maui.Devices.Sensors namespace is required for the Location type. The polyline will appear on the map with the specified style connecting all the defined location points.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_40\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:sensors=\"clr-namespace:Microsoft.Maui.Devices.Sensors;assembly=Microsoft.Maui.Essentials\">\n    <maps:Map>\n        <maps:Map.MapElements>\n            <maps:Polyline StrokeColor=\"Black\"\n                           StrokeWidth=\"12\">\n                <maps:Polyline.Geopath>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>47.6381401</x:Double>\n                            <x:Double>-122.1317367</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>47.6381473</x:Double>\n                            <x:Double>-122.1350841</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    ...\n                </maps:Polyline.Geopath>\n            </maps:Polyline>\n        </maps:Map.MapElements>\n    </maps:Map>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Check Status of FastFollow Asset Packs (C#)\nDESCRIPTION: This C# snippet demonstrates how to check if a `FastFollow` asset pack is installed before accessing its contents. It uses the `AssetPackManager` from the `Xamarin.Google.Android.Play.Asset.Delivery` NuGet package to query the location of the asset pack and determine if it's installed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Xamarin.Google.Android.Play.Core.AssetPacks;\n\nvar assetPackManager = AssetPackManagerFactory.GetInstance(this);\nAssetPackLocation assetPackPath = assetPackManager.GetPackLocation(\"myfastfollowpack\");\nstring assetsFolderPath = assetPackPath?.AssetsPath() ?? null;\nif (assetsFolderPath is null)\n{\n    // FastFollow asset pack isn't installed.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mobile Auth Controller (C#)\nDESCRIPTION: This C# code snippet demonstrates how to create a custom API controller in ASP.NET Core for handling mobile authentication flows. The controller receives the authentication scheme (provider) and initiates the authentication flow.  It then redirects to the app's callback URI after receiving the result from the provider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"mobileauth\")]\n[ApiController]\npublic class AuthController : ControllerBase\n{\n    const string callbackScheme = \"myapp\";\n\n    [HttpGet(\"{scheme}\")] // eg: Microsoft, Facebook, Apple, etc\n    public async Task Get([FromRoute]string scheme)\n    {\n        // 1. Initiate authentication flow with the scheme (provider)\n        // 2. When the provider calls back to this URL\n        //    a. Parse out the result\n        //    b. Build the app callback URL\n        //    c. Redirect back to the app\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AOT Compilation Properties\nDESCRIPTION: This snippet shows the AOT compilation properties set for Release builds. When `RunAOTCompilation` and `AndroidEnableProfiledAot` properties are unset, optimal settings for startup time and app size are chosen.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n  <RunAOTCompilation>true</RunAOTCompilation>\n  <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Set Map Type to Satellite using XAML\nDESCRIPTION: This XAML snippet shows how to set the MapType property of a Map control to Satellite.  This will display the map with satellite imagery.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map MapType=\"Satellite\" />\n```\n\n----------------------------------------\n\nTITLE: Navigating Backwards in MAUI Shell\nDESCRIPTION: This snippet demonstrates how to navigate backwards in a MAUI Shell application using the `GoToAsync` method with \"..\" as the argument. This will navigate to the previous page in the navigation stack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait Shell.Current.GoToAsync(\"..\");\n```\n\n----------------------------------------\n\nTITLE: Dynamic Resizing of Items C#\nDESCRIPTION: This code demonstrates how to dynamically resize items in a `CollectionView` at runtime by changing the `HeightRequest` and `WidthRequest` properties of an `Image` object in response to a tap event. The image toggles between two size configurations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnImageTapped(object sender, EventArgs e)\n{\n    Image image = sender as Image;\n    image.HeightRequest = image.WidthRequest = image.HeightRequest.Equals(60) ? 100 : 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Rotate Transform - Rotating Text Around the Origin (C#)\nDESCRIPTION: This code snippet shows how to use the Rotate transform to rotate text around the upper-left corner (0,0) of the canvas. The text \".NET MAUI\" is drawn and then rotated 45 degrees clockwise. Requires the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FontColor = Colors.Blue;\ncanvas.FontSize = 18;\n\ncanvas.Rotate(45);\ncanvas.DrawString(\".NET MAUI\", 50, 50, HorizontalAlignment.Left);\n```\n\n----------------------------------------\n\nTITLE: Handling MenuItem Clicked Event in C#\nDESCRIPTION: This C# code demonstrates how to attach an event handler to the Clicked event of a MenuItem programmatically.  When the MenuItem is clicked, the OnItemClicked method will be executed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menuitem.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMenuItem item = new MenuItem { ... };\nitem.Clicked += OnItemClicked;\n```\n\n----------------------------------------\n\nTITLE: Check and Download OnDemand Asset Pack C#\nDESCRIPTION: Checks if the `OnDemand` asset pack is already installed using `AssetPackManager.GetPackLocation`. If it's not installed, the `Fetch` method is called to start the download. Requires Android.Gms.Extensions namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Gms.Extensions;\n\nvar assetPackPath = assetPackManager.GetPackLocation (\"myondemandpack\");\nstring assetsFolderPath = assetPackPath?.AssetsPath() ?? null;\nif (assetsFolderPath is null)\n{\n    await assetPackManager.Fetch(new string[] { \"myondemandpack\" }).AsAsync<AssetPackStates>();\n}\n```\n\n----------------------------------------\n\nTITLE: Draw a Square on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a dark blue square on an ICanvas object using the DrawRectangle method. It sets the stroke color to dark blue and the stroke size to 4 before drawing the square with dimensions 100x100 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.DarkBlue;\ncanvas.StrokeSize = 4;\ncanvas.DrawRectangle(10, 10, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to Center in C#\nDESCRIPTION: This C# snippet demonstrates setting `SnapPointsAlignment` to `Center` programmatically. It requires creating instances of `CarouselView` and `LinearItemsLayout`. When scrolling stops, the center of the item will be aligned with the center of the view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ItemsLayout = new LinearItemsLayout(ItemsLayoutOrientation.Horizontal)\n    {\n        SnapPointsType = SnapPointsType.MandatorySingle,\n        SnapPointsAlignment = SnapPointsAlignment.Center\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Toggle Magnetometer Monitoring - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to start and stop monitoring the magnetometer sensor in a .NET MAUI application. The snippet shows how to subscribe to the ReadingChanged event to receive magnetometer data updates. The code is part of a larger application, likely within a XAML page's code-behind file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// This code snippet is present in multiple documents under the same ID, and should only be included once.\n// To prevent duplication, this placeholder is used.\n// The complete code can be found in the other document, which is also processed by the same pipeline.\n```\n\n----------------------------------------\n\nTITLE: Creating a NamedColor class in C#\nDESCRIPTION: This C# code defines a `NamedColor` class with properties for color name, friendly name, color value, and RGB components. It also includes a static constructor to generate a collection of all named colors available in the `Colors` class using reflection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing System.Text;\n\nnamespace XamlSamples\n{\n    public class NamedColor\n    {\n        public string Name { get; private set; }\n        public string FriendlyName { get; private set; }\n        public Color Color { get; private set; }\n\n        // Expose the Color fields as properties\n        public float Red => Color.Red;\n        public float Green => Color.Green;\n        public float Blue => Color.Blue;\n\n        public static IEnumerable<NamedColor> All { get; private set; }\n\n        static NamedColor()\n        {\n            List<NamedColor> all = new List<NamedColor>();\n            StringBuilder stringBuilder = new StringBuilder();\n\n            // Loop through the public static fields of the Color structure.\n            foreach (FieldInfo fieldInfo in typeof(Colors).GetRuntimeFields())\n            {\n                if (fieldInfo.IsPublic &&\n                    fieldInfo.IsStatic &&\n                    fieldInfo.FieldType == typeof(Color))\n                {\n                    // Convert the name to a friendly name.\n                    string name = fieldInfo.Name;\n                    stringBuilder.Clear();\n                    int index = 0;\n\n                    foreach (char ch in name)\n                    {\n                        if (index != 0 && Char.IsUpper(ch))\n                        {\n                            stringBuilder.Append(' ');\n                        }\n                        stringBuilder.Append(ch);\n                        index++;\n                    }\n\n                    // Instantiate a NamedColor object.\n                    NamedColor namedColor = new NamedColor\n                    {\n                        Name = name,\n                        FriendlyName = stringBuilder.ToString(),\n                        Color = (Color)fieldInfo.GetValue(null)\n                    };\n\n                    // Add it to the collection.\n                    all.Add(namedColor);\n                }\n            }\n            all.TrimExcess();\n            All = all;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Select Direct Child Elements\nDESCRIPTION: This CSS snippet shows how to select direct child elements using the `element>element` selector. It targets `Image` elements that are direct children of `StackLayout` elements and sets their height and width to 200.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nstacklayout>image {\n    height: 200;\n    width: 200;\n}\n```\n\n----------------------------------------\n\nTITLE: Pressed/Released Event Handlers C#\nDESCRIPTION: This C# code defines the event handlers for the `Pressed` and `Released` events of a `Button`. It uses a `DispatcherTimer` and `Stopwatch` to animate the rotation of a `Label` while the button is pressed and stops the animation when the button is released.  The `OnButtonPressed` handler starts the timer and stopwatch, and the `OnButtonReleased` handler stops them.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class PressAndReleaseButtonPage : ContentPage\n{\n    IDispatcherTimer timer;\n    Stopwatch stopwatch = new Stopwatch();\n\n    public PressAndReleaseButtonPage()\n    {\n        InitializeComponent();\n\n        timer = Dispatcher.CreateTimer();\n        timer.Interval = TimeSpan.FromMilliseconds(16);\n        timer.Tick += (s, e) =>\n        {\n            label.Rotation = 360 * (stopwatch.Elapsed.TotalSeconds % 1);\n        };\n    }\n\n    void OnButtonPressed(object sender, EventArgs args)\n    {\n        stopwatch.Start();\n        timer.Start();\n    }\n\n    void OnButtonReleased(object sender, EventArgs args)\n    {\n        stopwatch.Stop();\n        timer.Stop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Min Track Color with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the color of the minimum track on a Slider to yellow using the `-maui-min-track-color` property. It accepts a color value or `initial`. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_64\n\nLANGUAGE: css\nCODE:\n```\n-maui-min-track-color: yellow;\n```\n\n----------------------------------------\n\nTITLE: Disable splash screen resizing in XML\nDESCRIPTION: This XML snippet demonstrates how to prevent the resizing of a vector image used as a splash screen by setting the `Resize` attribute to `false`. This is useful when you want to maintain the original dimensions of the image.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" Resize=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Apple Pay Entitlement XML\nDESCRIPTION: Defines the Apple Pay entitlement that allows users to make payments using stored payment information. It uses the `com.apple.developer.in-app-payments` key of type `Array` of `String`. Replace `merchant.your.merchantid` with your actual merchant ID. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.in-app-payments</key>\n<array>\n  <string>merchant.your.merchantid</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Window Class\nDESCRIPTION: This code snippet shows how to create a custom `Window` class (`MyWindow`) that inherits from the `Window` class.  It overrides the `OnCreated` method to register services. This allows for custom initialization logic to be encapsulated within the window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public class MyWindow : Window\n    {\n        public MyWindow() : base()\n        {\n        }\n\n        public MyWindow(Page page) : base(page)\n        {\n        }\n\n        protected override void OnCreated()\n        {\n            // Register services\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Identifiers Conditionally in Multi-Targeted .NET XML\nDESCRIPTION: This XML snippet shows how to conditionally add runtime identifiers (RIDs) for Android architectures in a multi-targeted .NET project. The `RuntimeIdentifiers` are only added if the target framework is Android. This ensures that the RIDs are only included when building for Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<RuntimeIdentifiers Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">android-arm;android-arm64;android-x86;android-x64</RuntimeIdentifiers>\n```\n\n----------------------------------------\n\nTITLE: Setting StrokeLineJoin to Round in XAML\nDESCRIPTION: This XAML snippet shows how to set the StrokeLineJoin property of a Polyline shape to Round, creating rounded joins at the vertices of the polyline. The polyline has three points: (20, 20), (250, 50), and (20, 120), a dark blue stroke, and a stroke thickness of 20.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/index.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Polyline Points=\"20 20,250 50,20 120\"\n          Stroke=\"DarkBlue\"\n          StrokeThickness=\"20\"\n          StrokeLineJoin=\"Round\" />\n```\n\n----------------------------------------\n\nTITLE: Consuming XAML Resource Dictionaries from C# (.NET MAUI)\nDESCRIPTION: This C# code snippet shows how to add XAML-based resource dictionaries to the MergedDictionaries collection of the application's resources. The resource dictionaries must be backed by code-behind files and have their build action set to MauiXaml. It depends on the existence of `MyMauiApp.Resources.Styles.MyColors` and `MyMauiApp.Resources.Styles.MyStyles` classes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nResources.MergedDictionaries.Add(new MyMauiApp.Resources.Styles.MyColors());\nResources.MergedDictionaries.Add(new MyMauiApp.Resources.Styles.MyStyles());\n```\n\n----------------------------------------\n\nTITLE: Creating .NET MAUI Blazor Hybrid and Web App using dotnet CLI\nDESCRIPTION: This dotnet CLI command creates a new .NET MAUI Blazor Hybrid and Web App project named 'MyProject'. The app shares common code in a Razor class library project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_21\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new maui-blazor-web -n MyProject\n```\n\n----------------------------------------\n\nTITLE: Bool to Byte Conversion Wrapper (C#)\nDESCRIPTION: Illustrates how `bool` return values are handled when interacting with native code by converting to `byte` for JNI compatibility using the ternary operator to handle potential true value representations other than 1.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[UnmanagedCallersOnly]\nstatic byte n_OnTouch_Landroid_view_View_Landroid_view_MotionEvent__mm_wrapper(IntPtr jnienv, IntPtr native__this, IntPtr native_v, IntPtr native_e)\n{\n    try\n    {\n        return n_OnTouch_Landroid_view_View_Landroid_view_MotionEvent_(jnienv, native__this, native_v, native_e) ? 1 : 0;\n    }\n    catch (Exception ex)\n    {\n        Android.Runtime.AndroidEnvironmentInternal.UnhandledException(ex);\n        return default;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set SwipeView SwipeTransitionMode in C# (Android)\nDESCRIPTION: This C# snippet shows how to programmatically set the `SwipeTransitionMode` of a `SwipeView` to `Drag` on Android using the fluent API. It includes the required namespace and the method call to configure the swipe transition mode.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/swipeview-swipetransitionmode.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nSwipeView swipeView = new Microsoft.Maui.Controls.SwipeView();\nswipeView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetSwipeTransitionMode(SwipeTransitionMode.Drag);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Line Height CSS in .NET MAUI\nDESCRIPTION: Sets the line height for .NET MAUI Label and Span. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_33\n\nLANGUAGE: CSS\nCODE:\n```\nline-height: 1.8;\n```\n\n----------------------------------------\n\nTITLE: Update .NET Upgrade Assistant CLI\nDESCRIPTION: This command updates the .NET Upgrade Assistant tool to the latest version using the dotnet CLI. This ensures that the tool has the newest features and bug fixes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/upgrade-assistant.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool update -g upgrade-assistant\n```\n\n----------------------------------------\n\nTITLE: Mapping Commands for VideoHandler in MAUI\nDESCRIPTION: This code snippet demonstrates how to map commands from the cross-platform `Video` control to the native `MauiVideoPlayer` in the `VideoHandler`. Each `Map` method is a static function that takes the handler, control, and optional arguments. It extracts necessary data from the arguments (if available) and then calls a corresponding method on the `MauiVideoPlayer` to execute the command on the native video player.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n{\n    ...\n    public static void MapUpdateStatus(VideoHandler handler, Video video, object? args)\n    {\n        handler.PlatformView?.UpdateStatus();\n    }\n\n    public static void MapPlayRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PlayRequested(position);\n    }\n\n    public static void MapPauseRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.PauseRequested(position);\n    }\n\n    public static void MapStopRequested(VideoHandler handler, Video video, object? args)\n    {\n        if (args is not VideoPositionEventArgs)\n            return;\n\n        TimeSpan position = ((VideoPositionEventArgs)args).Position;\n        handler.PlatformView?.StopRequested(position);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stepper in XAML\nDESCRIPTION: This XAML code demonstrates how to create a Stepper control with specified Maximum and Increment values.  It also includes two Labels for displaying and rotating text based on the Stepper's value. The ValueChanged event is used to update the UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StepperDemo.BasicStepperXAMLPage\"\n             Title=\"Basic Stepper XAML\">\n    <StackLayout Margin=\"20\">\n        <Label x:Name=\"_rotatingLabel\"\n               Text=\"ROTATING TEXT\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Stepper Maximum=\"360\"\n                 Increment=\"30\"\n                 HorizontalOptions=\"Center\"\n                 ValueChanged=\"OnStepperValueChanged\" />\n        <Label x:Name=\"_displayLabel\"\n               Text=\"(uninitialized)\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />        \n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Recognizing All Swipe Directions C#\nDESCRIPTION: This C# code programmatically creates separate SwipeGestureRecognizer objects for each swipe direction and attaches them to a BoxView.  Each recognizer has its Swiped event associated with the 'OnSwiped' handler. Requires .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nBoxView boxView = new BoxView { Color = Colors.Teal, ... };\nSwipeGestureRecognizer leftSwipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Left };\nleftSwipeGesture.Swiped += OnSwiped;\nSwipeGestureRecognizer  rightSwipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Right };\nrightSwipeGesture.Swiped += OnSwiped;\nSwipeGestureRecognizer  upSwipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Up };\nupSwipeGesture.Swiped += OnSwiped;\nSwipeGestureRecognizer  downSwipeGesture = new SwipeGestureRecognizer { Direction = SwipeDirection.Down };\ndownSwipeGesture.Swiped += OnSwiped;\n\nboxView.GestureRecognizers.Add(leftSwipeGesture);\nboxView.GestureRecognizers.Add(rightSwipeGesture);\nboxView.GestureRecognizers.Add(upSwipeGesture);\nboxView.GestureRecognizers.Add(downSwipeGesture);\n```\n\n----------------------------------------\n\nTITLE: C# Static and Default Interface Members with C# 8\nDESCRIPTION: This C# code demonstrates the use of static and default members directly within an interface, a feature introduced in C# 8.  This eliminates the need for a separate class for static members and allows default implementations of interface methods.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo\n{\n    public static void Bar () { ... }\n    public default void Baz () { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Margin Right CSS in .NET MAUI\nDESCRIPTION: Sets the right margin for a .NET MAUI View. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_37\n\nLANGUAGE: CSS\nCODE:\n```\nmargin-right: 1;\n```\n\n----------------------------------------\n\nTITLE: Android (FCM) JSON Payload for Azure Notification Hub - JSON\nDESCRIPTION: This JSON payload is for sending test push notifications to Android devices (FCM) through the Azure portal. It includes a `message` dictionary with a `notification` dictionary (containing the notification's `title` and `body`) and a `data` dictionary (containing the custom `action` field).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_71\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"message\": {\n        \"notification\": {\n          \"title\": \"PushDemo\",\n          \"body\": \"Message from Notification Hub!\"\n        },\n        \"data\": {\n          \"action\": \"action_a\"\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Transport Controls in MauiVideoPlayer\nDESCRIPTION: This code snippet demonstrates the `UpdateTransportControlsEnabled` method in the `MauiVideoPlayer` class. This method updates the visibility of the transport controls based on the `AreTransportControlsEnabled` property of the cross-platform `Video` control. It sets the `ShowsPlaybackControls` property of the `AVPlayerViewController` to control whether the native playback controls are displayed or hidden.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : UIView\n{\n    AVPlayerViewController _playerViewController;\n    Video _video;\n    ...\n\n    public void UpdateTransportControlsEnabled()\n    {\n        _playerViewController.ShowsPlaybackControls = _video.AreTransportControlsEnabled;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bottom and Top Tabs Combination\nDESCRIPTION: This XAML snippet shows how to create a combination of bottom and top tabs in a .NET MAUI Shell application. The TabBar contains Tab objects that define the bottom tabs, and each Tab contains multiple ShellContent objects, which create top tabs within that bottom tab. The ContentTemplate is used to dynamically load the ContentPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <Tab Title=\"Domestic\"\n            Icon=\"paw.png\">\n           <ShellContent Title=\"Cats\"\n                         ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n           <ShellContent Title=\"Dogs\"\n                         ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n       </Tab>\n       <Tab Title=\"Monkeys\"\n            Icon=\"monkey.png\">\n           <ShellContent ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n       </Tab>\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Basis Property Usage in XAML (Device-Independent Units)\nDESCRIPTION: This snippet demonstrates how to set the Basis property on a Label within a FlexLayout in XAML, specifying the initial size of the child in device-independent units. This value defines the size along the main axis.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Label FlexLayout.Basis=\"40\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: Converting .NET MAUI to iOS UIView (net-maui-9.0+)\nDESCRIPTION: This snippet converts a .NET MAUI control to a UIKit.UIView object in iOS using `ToPlatformEmbedded`. For .NET MAUI 9.0 and later, the `ContainerView` is used to wrap the .NET MAUI view to ensure correct sizing. The `Microsoft.Maui.Controls.Embedding` namespace must be included.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nvar mauiView = new MyMauiContent();\nUIView nativeView = mauiView.ToPlatformEmbedded(context);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstackView.AddArrangedSubView(new ContainerView(nativeView));\n```\n\n----------------------------------------\n\nTITLE: Setting Spacing in HorizontalStackLayout in XAML\nDESCRIPTION: This XAML snippet illustrates how to use the `Spacing` property of the HorizontalStackLayout to add space between child views.  It demonstrates adding 10 device-independent units of space between a Rectangle and a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/horizontalstacklayout.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.HorizontalStackLayoutPage\">\n    <HorizontalStackLayout Margin=\"20\"\n                           Spacing=\"10\">\n       <Rectangle Fill=\"Red\"\n                  HeightRequest=\"30\"\n                  WidthRequest=\"30\" />\n       <Label Text=\"Red\"\n              FontSize=\"18\" />\n    </HorizontalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Legacy Preferences Helper Class in C#\nDESCRIPTION: This C# code defines the `LegacyPreferences` partial class, which is designed to access the Xamarin.Essentials `Preferences` data stored in a Xamarin.Forms application. It provides platform-specific implementations for checking if a key exists, removing a key, and getting a value from the preferences container. It makes use of conditional compilation directives (`#if ANDROID || IOS || WINDOWS`) to include the code only for the relevant platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID || IOS || WINDOWS\nnamespace MigrationHelpers;\n\npublic static partial class LegacyPreferences\n{\n    internal static string GetPrivatePreferencesSharedName(string feature) => $\"{AppInfo.PackageName}.xamarinessentials.{feature}\";\n\n    public static bool ContainsKey(string key, string sharedName) => PlatformContainsKey(key, sharedName);\n    public static void Remove(string key, string sharedName) => PlatformRemove(key, sharedName);\n    public static string Get(string key, string defaultValue, string sharedName) => PlatformGet<string>(key, defaultValue, sharedName);\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Check Hardware Acceleration Command\nDESCRIPTION: This command checks if hardware acceleration is enabled for the Android Emulator. It's a crucial step in diagnosing performance issues, as hardware acceleration significantly improves emulator speed and responsiveness. The command assumes the default Android SDK installation path; modify as needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n\"C:\\\\Program Files (x86)\\\\Android\\\\android-sdk\\\\emulator\\\\emulator-check.exe\" accel\n```\n\n----------------------------------------\n\nTITLE: Defining a TitleBar in XAML - .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to define a TitleBar in XAML, setting its Title, Icon, Height, and including a SearchBar as Content. It shows how to customize the appearance of the TitleBar on Mac Catalyst and Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Window.TitleBar>\n    <TitleBar x:Name=\"TeamsTitleBar\"\n              Title=\"Hello World\"\n              Icon=\"appicon.png\"\n              HeightRequest=\"46\">\n        <TitleBar.Content>\n            <SearchBar Placeholder=\"Search\"\n                       PlaceholderColor=\"White\"\n                       MaximumWidthRequest=\"300\"\n                       HorizontalOptions=\"Fill\"\n                       VerticalOptions=\"Center\" />\n        </TitleBar.Content>\n    </TitleBar>\n</Window.TitleBar>\n```\n\n----------------------------------------\n\nTITLE: Adding Associated Domains Entitlement (XML)\nDESCRIPTION: This XML snippet shows how to add the associated domains entitlement to the *Entitlements.plist* file in your iOS or Mac Catalyst app. The `com.apple.developer.associated-domains` key specifies a list of domains that the app is associated with. Replace `applinks:recipe-app.com` with the correct value for your domain, ensuring you only include the desired subdomain and the top-level domain.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.associated-domains</key>\n<array>\n  <string>applinks:recipe-app.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: XAML Resources Workaround: App Constructor (net-maui-9.0+) C#\nDESCRIPTION: This code demonstrates a workaround for a XAML resource issue. It injects an IServiceProvider into the App class and uses it to resolve the page in CreateWindow method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMyFirstAppPage _firstPage;\n\npublic App(IServiceProvider serviceProvider)\n{\n    InitializeComponent();\n    _firstPage = serviceProvider.GetService<MyFirstAppPage>();\n}\n\nprotected override Window CreateWindow(IActivationState? activationState)\n{\n    return new Window(_firstPage);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Visual States for Indicators\nDESCRIPTION: This code demonstrates how to use Visual States to change the appearance of the selected indicator. It defines a Style for the Label inside the IndicatorTemplate, and uses VisualStateGroups to change the TextColor to Black when the state is Selected, and LightGray otherwise. Requires ionicons font family to be set up.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style x:Key=\"IndicatorLabelStyle\"\n               TargetType=\"Label\">\n            <Setter Property=\"VisualStateManager.VisualStateGroups\">\n                <VisualStateGroupList>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\">\n                            <VisualState.Setters>\n                                <Setter Property=\"TextColor\"\n                                        Value=\"LightGray\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState x:Name=\"Selected\">\n                            <VisualState.Setters>\n                                <Setter Property=\"TextColor\"\n                                        Value=\"Black\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateGroupList>\n            </Setter>\n        </Style>\n    </ContentPage.Resources>\n\n    <Grid RowDefinitions=\"*,Auto\">\n        ...\n        <IndicatorView x:Name=\"indicatorView\"\n                       Grid.Row=\"1\"\n                       Margin=\"0,0,0,40\"\n                       IndicatorColor=\"Transparent\"\n                       SelectedIndicatorColor=\"Transparent\"\n                       HorizontalOptions=\"Center\">\n            <IndicatorView.IndicatorTemplate>\n                <DataTemplate>\n                    <Label Text=\"&#xf30c;\"\n                           FontFamily=\"ionicons\"\n                           FontSize=\"12\"\n                           Style=\"{StaticResource IndicatorLabelStyle}\" />\n                </DataTemplate>\n            </IndicatorView.IndicatorTemplate>\n        </IndicatorView>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Full AllNotesPage.xaml XAML\nDESCRIPTION: This XAML code represents the `AllNotesPage` view, which has been updated to bind to the `NotesViewModel`. It defines the XML namespace, the `BindingContext`, and bindings for the toolbar and CollectionView. Includes use of Commanding to react to selected item changes using `SelectionChangedCommand`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewModels=\"clr-namespace:Notes.ViewModels\"\n             x:Class=\"Notes.Views.AllNotesPage\"\n             Title=\"All Notes\">\n    <ContentPage.BindingContext>\n        <viewModels:NotesViewModel />\n    </ContentPage.BindingContext>\n    <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Add\" Command=\"{Binding NewCommand}\" />\n    </ContentPage.ToolbarItems>\n\n    <CollectionView ItemsSource=\"{Binding AllNotes}\" Margin=\"10\">\n        <CollectionView.ItemsLayout>\n            <LinearItemsLayout Orientation=\"Vertical\"/>\n        </CollectionView.ItemsLayout>\n        <CollectionView.ItemTemplate>\n            <DataTemplate>\n                <Grid Padding=\"10\">\n                    <Label Text=\"{Binding Text}\"\n                           FontSize=\"22\"/>\n                </Grid>\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n        <CollectionView.SelectionMode=\"Single\">\n            <CollectionView.Behaviors>\n\n            </CollectionView.Behaviors>\n            <CollectionView.SelectionChangedCommandParameter>\n                <Binding Source=\"{RelativeSource Self}\" Path=\"SelectedItem\"/>\n            </CollectionView.SelectionChangedCommandParameter>\n            <CollectionView.SelectionChangedCommand>\n                <Binding Path=\"SelectNoteCommand\"/>\n            </CollectionView.SelectionChangedCommand>\n        </CollectionView.SelectionMode>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: AOT Compile specific assemblies using MtouchInterpreter\nDESCRIPTION: This snippet illustrates how to AOT compile all assemblies except for a specific one (`System.Numerics.dll` in this example) using the `$(MtouchInterpreter)` MSBuild property. The `-all` option compiles all assemblies and then the specified assembly is interpreted.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-ios')) and '$(Configuration)' == 'Release'\">\n    <!-- AOT everything, except System.Numerics.dll, which will be interpreted -->\n    <MtouchInterpreter>-all,System.Numerics</MtouchInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Polygon in XAML\nDESCRIPTION: This XAML example demonstrates how to create a filled polygon with specific points, fill color, stroke color, and stroke thickness.\nThe Points property defines the vertices of the polygon, Fill sets the fill color, Stroke sets the outline color, and StrokeThickness sets the thickness of the outline.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polygon.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Polygon Points=\"40,10 70,80 10,50\"\n         Fill=\"AliceBlue\"\n         Stroke=\"Green\"\n         StrokeThickness=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Location Permissions in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to add the ACCESS_FINE_LOCATION and ACCESS_COARSE_LOCATION permissions to the AndroidManifest.xml file. These permissions are required if your app needs to access the user's location on Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  ...\n  <!-- Required to access the user's location -->\n  <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n  <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Using StaticResource for Numeric Values\nDESCRIPTION: This XAML snippet demonstrates how to use the `StaticResource` markup extension to reference the numeric resources defined earlier, applying them to the `BorderWidth`, `Rotation`, and `FontSize` properties of a button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"Do this!\"\n        HorizontalOptions=\"{StaticResource horzOptions}\"\n        VerticalOptions=\"{StaticResource vertOptions}\"\n        BorderWidth=\"{StaticResource borderWidth}\"\n        Rotation=\"{StaticResource rotationAngle}\"\n        TextColor=\"Red\"\n        FontSize=\"{StaticResource fontSize}\" />\n```\n\n----------------------------------------\n\nTITLE: Using RelativeLayout in .NET MAUI (XML)\nDESCRIPTION: This XML snippet demonstrates how to use RelativeLayout in .NET MAUI by including the `Microsoft.Maui.Controls.Compatibility` namespace. While not recommended, this shows how to access RelativeLayout for cases where it's absolutely necessary.  It requires adding a specific xmlns declaration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/layouts.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:compat=\"clr-namespace:Microsoft.Maui.Controls.Compatibility;assembly=Microsoft.Maui.Controls\"\n             x:Class=\"MyMauiApp.MyPage\"\n             Title=\"MyPage\">\n    <compat:RelativeLayout>\n        <!-- Your code goes here -->\n    </compat:RelativeLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Register Map Click Handler - XAML\nDESCRIPTION: This XAML code registers the OnMapClicked event handler to the MapClicked event of a .NET MAUI Map.  The handler is called whenever the map is tapped.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_23\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map MapClicked=\"OnMapClicked\" />\n```\n\n----------------------------------------\n\nTITLE: Adding File Timestamp, Boot Time, and Disk Space API Reasons to Manifest\nDESCRIPTION: This XML snippet demonstrates how to add NSPrivacyAccessedAPICategoryFileTimestamp, NSPrivacyAccessedAPICategorySystemBootTime, and NSPrivacyAccessedAPICategoryDiskSpace API categories with their respective reason codes (C617.1, 35F9.1, E174.1) to the NSPrivacyAccessedAPITypes array in the privacy manifest. These entries are required due to the .NET runtime and Base Class Library's usage of these APIs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/privacy-manifest.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>C617.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategorySystemBootTime</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>35F9.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryDiskSpace</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>E174.1</string>\n            </array>\n        </dict>       \n    </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring NFC Tag Reader Entitlement in XML\nDESCRIPTION: This snippet defines the near field communication tag reader entitlement, enabling reading NFC tags. The `com.apple.developer.nfc.readersession.formats` key is an array of strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.nfc.readersession.formats</key>\n<array>\n  <string>NDEF</string>\n  <string>TAG</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Painting an Ellipse Shape with XAML\nDESCRIPTION: This snippet demonstrates how to paint the stroke and fill of an Ellipse shape using XAML in .NET MAUI. It sets the Fill, Stroke, and StrokeThickness properties to customize the appearance of the ellipse.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/index.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Ellipse Fill=\"DarkBlue\"\n         Stroke=\"Red\"\n         StrokeThickness=\"4\"\n         WidthRequest=\"150\"\n         HeightRequest=\"50\"\n         HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Manager Factory in C#\nDESCRIPTION: This C# code defines a layout manager factory that implements the ILayoutManagerFactory interface. It creates and returns an instance of the CustomGridLayoutManager if the layout is a Grid.  It depends on Microsoft.Maui.Layouts namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Layouts;\n\npublic class CustomLayoutManagerFactory : ILayoutManagerFactory\n{\n    public ILayoutManager CreateLayoutManager(Layout layout)\n    {\n        if (layout is Grid)\n        {\n            return new CustomGridLayoutManager(layout as IGridLayout);\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Control in OnHandlerChanged C#\nDESCRIPTION: This code snippet illustrates converting a cross-platform control (`video`) to its native platform representation within the `OnHandlerChanged` method of a `ContentPage`. It uses preprocessor directives (`#if`) to conditionally compile the correct platform-specific code for Android, iOS/Mac Catalyst, and Windows. It requires the `Microsoft.Maui.Platform` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Platform;\n\nnamespace VideoDemos.Views;\n\npublic partial class MyPage : ContentPage\n{\n    ...\n    protected override void OnHandlerChanged()\n    {\n        // Convert cross-platform control to its underlying platform control\n#if ANDROID\n        Android.Views.View nativeView = video.ToPlatform(video.Handler.MauiContext);\n#elif IOS || MACCATALYST\n        UIKit.UIView nativeView = video.ToPlatform(video.Handler.MauiContext);\n#elif WINDOWS\n        Microsoft.UI.Xaml.FrameworkElement nativeView = video.ToPlatform(video.Handler.MauiContext);\n#endif\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Code-Behind for XAML Page (>=net-maui-10.0)\nDESCRIPTION: This C# snippet shows the complete code-behind for a XAML page that includes handlers for the ValueChanged event of a Slider and the Clicked event of a Button. It demonstrates the basic structure of a code-behind file in .NET MAUI.  It uses DisplayAlertAsync instead of DisplayAlert.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace XamlSamples\n{\n    public partial class XamlPlusCodePage\n    {\n        public XamlPlusCodePage()\n        {\n            InitializeComponent();\n        }\n\n        void OnSliderValueChanged(object sender, ValueChangedEventArgs args)\n        {\n            valueLabel.Text = args.NewValue.ToString(\"F3\");\n        }\n\n        async void OnButtonClicked(object sender, EventArgs args)\n        {\n            Button button = (Button)sender;\n            await DisplayAlertAsync(\"Clicked!\", \"The button labeled '\" + button.Text + \"' has been clicked\", \"OK\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List .NET MAUI Templates\nDESCRIPTION: This command lists all available .NET MAUI project templates that can be created using the `dotnet new` command. It helps verify that the .NET MAUI templates are correctly installed after installing the .NET MAUI workload.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new maui --list\n```\n\n----------------------------------------\n\nTITLE: Getting LocalApplicationData path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet retrieves the LocalApplicationData path on Mac Catalyst using NSFileManager to align with macOS. It avoids Environment.GetFolderPath and uses Xamarin.Mac APIs to fetch the desired path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.ApplicationSupportDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: ScrollView Scrolled Event Handler (XAML)\nDESCRIPTION: This XAML snippet shows how to attach an event handler to the `Scrolled` event of a ScrollView.  The `Scrolled` event is raised whenever the ScrollView is scrolled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ScrollView Scrolled=\"OnScrollViewScrolled\">\n    ...\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Get Service Provider Target Information C#\nDESCRIPTION: Shows how to use the IServiceProvider to access information about the target object and property to which the markup extension is applied. This allows the markup extension to adapt its behavior based on the context in which it's used.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIProvideValueTarget provideValueTarget = serviceProvider.GetService(typeof(IProvideValueTarget)) as IProvideValueTarget;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Video Position Bar in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet shows how to implement a custom positioning bar for a video player using a custom control `PositionSlider`. It binds the `Video.Position` to the `PositionSlider.Position` and also displays current position and remaining time using Labels. A DataTrigger disables the PositionSlider when the video is not ready.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_73\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:VideoDemos.Controls\"\n             x:Class=\"VideoDemos.Views.CustomPositionBarPage\"\n             Unloaded=\"OnContentPageUnloaded\"\n             Title=\"Custom position bar\">\n    <Grid x:DataType=\"controls:Video\"\n          RowDefinitions=\"*,Auto,Auto\">\n        <controls:Video x:Name=\"video\"\n                        AreTransportControlsEnabled=\"False\"\n                        Source=\"{StaticResource ElephantsDream}\" />\n        ...\n        <Grid Grid.Row=\"1\"\n              Margin=\"10,0\"\n              ColumnDefinitions=\"0.25*,0.25*,0.25*,0.25*\"\n              BindingContext=\"{x:Reference video}\">\n            <Label Text=\"{Binding Path=Position,\n                                  StringFormat='{0:hh\\\\:mm\\\\:ss}'}\"\n                   HorizontalOptions=\"Center\"\n                   VerticalOptions=\"Center\" />\n            ...\n            <Label Grid.Column=\"3\"\n                   Text=\"{Binding Path=TimeToEnd,\n                                  StringFormat='{0:hh\\\\:mm\\\\:ss}'}\"\n                   HorizontalOptions=\"Center\"\n                   VerticalOptions=\"Center\" />\n        </Grid>\n        <controls:PositionSlider Grid.Row=\"2\"\n                                 Margin=\"10,0,10,10\"\n                                 BindingContext=\"{x:Reference video}\"\n                                 Duration=\"{Binding Duration}\"\n                                 Position=\"{Binding Position}\">\n            <controls:PositionSlider.Triggers>\n                <DataTrigger TargetType=\"controls:PositionSlider\"\n                             Binding=\"{Binding Status}\"\n                             Value=\"{x:Static controls:VideoStatus.NotReady}\">\n                    <Setter Property=\"IsEnabled\"\n                            Value=\"False\" />\n                </DataTrigger>\n            </controls:PositionSlider.Triggers>\n        </controls:PositionSlider>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set Default value for OnIdiom in XAML\nDESCRIPTION: This snippet shows how to set a Default value for the OnIdiom class. The Margin property is set to a specific value on the Desktop idiom, while all other idioms will use the Default value of 20.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Margin>\n        <OnIdiom x:TypeArguments=\"Thickness\" Default=\"20\">\n            <OnIdiom.Desktop>0,60,0,0</OnIdiom.Desktop>\n        </OnIdiom>\n    </ContentPage.Margin>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set Drop Proposal on iOS/Mac Catalyst with C#\nDESCRIPTION: This code snippet demonstrates how to set the UIDropProposal on iOS and Mac Catalyst when a drag source is over a drop target. It specifies that the data represented by the drag item should be moved rather than copied.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragOver(object sender, DragEventArgs e)\n{\n#if IOS || MACCATALYST\n    e.PlatformArgs.SetDropProposal(new UIKit.UIDropProposal(UIKit.UIDropOperation.Move));\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: FallbackValue with StaticResource in XAML\nDESCRIPTION: This XAML snippet demonstrates using a StaticResource to define the FallbackValue. This approach promotes reusability and localization by defining the fallback value in a ResourceDictionary.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding Population, FallbackValue={StaticResource populationUnknown}}\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: This snippet illustrates how to declare a XAML namespace for a custom type containing a bindable property.  It defines a `local` prefix that maps to the `DataBindingDemos` CLR namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ... xmlns:local=\"clr-namespace:DataBindingDemos\" ...>\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configure .csproj to include Privacy Manifest\nDESCRIPTION: This XML snippet demonstrates how to modify the .NET MAUI project file (.csproj) to include the PrivacyInfo.xcprivacy file as a BundleResource for iOS builds. It ensures the privacy manifest is correctly packaged into the iOS app bundle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/privacy-manifest.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'\">\n    <BundleResource Include=\"Platforms\\iOS\\PrivacyInfo.xcprivacy\" LogicalName=\"PrivacyInfo.xcprivacy\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: iOS/Mac Catalyst Contacts Usage Description (XML)\nDESCRIPTION: This XML snippet adds the `NSContactsUsageDescription` key to the Info.plist file for iOS and Mac Catalyst projects.  It provides a description that's displayed to the user when the app requests access to contacts.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>This app needs access to contacts to pick a contact and get info.</string>\n```\n\n----------------------------------------\n\nTITLE: Geocoding an Address to Location Coordinates in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use the IGeocoding interface to get the location coordinates for a given address in a .NET MAUI application. It uses the Geocoding.GetLocationsAsync method to retrieve a list of locations matching the address, and then iterates through the list to access the latitude, longitude, and altitude of each location.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geocoding.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string> GetLocation()\n{\n\ttry\n\t{\n\t\tIEnumerable<Location> locations = await Geocoding.GetLocationsAsync(\"Microsoft Building 25 Redmond WA USA\");\n\n\t\tLocation location = locations?.FirstOrDefault();\n\n\t\tif (location != null)\n\t\t\treturn $\"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}\";\n\t}\n\tcatch (Exception ex)\n\t{\n\t\treturn ex.ToString();\n\t}\n\n\treturn \"Unable to find the location.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SwipeView with directional SwipeItems in XAML\nDESCRIPTION: This XAML snippet demonstrates how to configure a SwipeView with different SwipeItems for left and right swipe directions. When the SwipeView is swiped to the left, it displays the 'Favorite' and 'Share' swipe items. When swiped to the right, it displays the 'Delete' swipe item. Commands are bound to each item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems>\n            <SwipeItem Text=\"Delete\"\n                       IconImageSource=\"delete.png\"\n                       BackgroundColor=\"LightPink\"\n                       Command=\"{Binding DeleteCommand}\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <SwipeView.RightItems>\n        <SwipeItems>\n            <SwipeItem Text=\"Favorite\"\n                       IconImageSource=\"favorite.png\"\n                       BackgroundColor=\"LightGreen\"\n                       Command=\"{Binding FavoriteCommand}\" />\n            <SwipeItem Text=\"Share\"\n                       IconImageSource=\"share.png\"\n                       BackgroundColor=\"LightYellow\"\n                       Command=\"{Binding ShareCommand}\" />\n        </SwipeItems>\n    </SwipeView.RightItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Scroll to MakeVisible Position in C#\nDESCRIPTION: This C# code snippet shows how to scroll an item into view, ensuring it is fully visible using ScrollToPosition.MakeVisible.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nlistView.ScrollTo(monkey, position: ScrollToPosition.MakeVisible, animate: true);\n```\n\n----------------------------------------\n\nTITLE: Setting Shell TabBar Unselected Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell TabBar unselected color for an Element to cyan using the `-maui-shell-tabbar-unselected` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_82\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-tabbar-unselected: cyan;\n```\n\n----------------------------------------\n\nTITLE: Handling Query String Parameter in .NET MAUI\nDESCRIPTION: This C# code snippet adds a QueryProperty attribute to the NotePage class. It defines an ItemId property that is populated from the query string parameter with the same name. When ItemId is set, it calls the LoadNote method to load the note data based on the filename provided in the query parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n [QueryProperty(nameof(ItemId), nameof(ItemId))]\n```\n\n----------------------------------------\n\nTITLE: Overriding Java Virtual Methods in C#\nDESCRIPTION: This C# code shows how to override Java virtual methods within a .NET for Android application. The `MainActivity` class inherits from `AppCompatActivity` and overrides the `OnCreateView` and `OnCreate` methods, which are originally defined in the Java `AppCompatActivity` class. The `Java.Lang.Object` base class enables interoperability with Java types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MainActivity : AppCompatActivity\n{\n    public override Android.Views.View? OnCreateView(Android.Views.View? parent, string name, Android.Content.Context context, Android.Util.IAttributeSet attrs)\n    {\n        return base.OnCreateView(parent, name, context, attrs);\n    }\n\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n        DoSomething(savedInstanceState);\n    }\n\n    void DoSomething(Bundle bundle)\n    {\n        // do something with the bundle\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set SemanticProperties.Description in C#\nDESCRIPTION: This code snippet demonstrates how to set the SemanticProperties.Description attached property in C# to provide a screen reader with a description for an image. The screen reader will announce \"Cute dot net bot waving hi to you!\" when the image gains accessibility focus. It programmatically creates an Image object and sets the description.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image { Source = \"dotnet_bot.png\" };\nSemanticProperties.SetDescription(image, \"Cute dot net bot waving hi to you!\");\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with DataTemplate in C#\nDESCRIPTION: This code snippet shows how to define the appearance of items in a bindable layout using a DataTemplate in C#. A DataTemplate for the Image is created and then assigned to the StackLayout using BindableLayout.SetItemTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDataTemplate imageTemplate = ...;\nStackLayout stackLayout = new StackLayout();\nBindableLayout.SetItemsSource(stackLayout, viewModel.User.TopFollowers);\nBindableLayout.SetItemTemplate(stackLayout, imageTemplate);\n```\n\n----------------------------------------\n\nTITLE: Defining Flyout Footer with DataTemplate (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to define the flyout footer appearance using a DataTemplate assigned to the Shell.FlyoutFooterTemplate property. The DataTemplate contains a StackLayout with labels to display the application name and the current date.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_16\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       xmlns:sys=\"clr-namespace:System;assembly=netstandard\">\n    <Shell.FlyoutFooterTemplate>\n        <DataTemplate>\n            <StackLayout>\n                <Label Text=\"Xaminals\"\n                       TextColor=\"GhostWhite\"\n                       FontAttributes=\"Bold\"\n                       HorizontalOptions=\"Center\" />\n                <Label x:DataType=\"sys:DateTime\"\n                       Text=\"{Binding Source={x:Static sys:DateTime.Now}, StringFormat='{0:MMMM dd, yyyy}'}\"\n                       TextColor=\"GhostWhite\"\n                       HorizontalOptions=\"Center\" />\n            </StackLayout>\n        </DataTemplate>\n    </Shell.FlyoutFooterTemplate>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Window Handler\nDESCRIPTION: This code snippet defines the `EmbeddedWindowHandler` class, which handles the .NET MAUI `Window` in an embedded scenario. It inherits from `ElementHandler` and provides a platform-specific window implementation. It uses preprocessor directives for platform-specific implementations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Handlers;\n\n#if ANDROID\nusing PlatformWindow = Android.App.Activity;\n#elif IOS || MACCATALYST\nusing PlatformWindow = UIKit.UIWindow;\n#elif WINDOWS\nusing PlatformWindow = Microsoft.UI.Xaml.Window;\n#endif\n\nnamespace Microsoft.Maui.Controls;\n\ninternal class EmbeddedWindowHandler : ElementHandler<IWindow, PlatformWindow>, IWindowHandler\n{\n    public static IPropertyMapper<IWindow, IWindowHandler> Mapper =\n        new PropertyMapper<IWindow, IWindowHandler>(ElementHandler.ElementMapper)\n        {\n        };\n\n    public static CommandMapper<IWindow, IWindowHandler> CommandMapper =\n        new CommandMapper<IWindow, IWindowHandler>(ElementHandler.ElementCommandMapper)\n        {\n        };\n\n    public EmbeddedWindowHandler() : base(Mapper)\n    {\n    }\n\n    protected override PlatformWindow CreatePlatformElement() =>\n        MauiContext!.Services.GetRequiredService<PlatformWindow>() ??\n        throw new InvalidOperationException(\"EmbeddedWindowHandler could not locate a platform window.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scene Manifest in Info.plist for iOS/Mac Catalyst with XML\nDESCRIPTION: This XML snippet shows how to add the UIApplicationSceneManifest to the Info.plist file for iOS and Mac Catalyst. This configuration is essential for supporting multiple scenes in the native iOS/Mac Catalyst app when using .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_23\n\nLANGUAGE: XML\nCODE:\n```\n<key>UIApplicationSceneManifest</key>\n<dict>\n  <key>UIApplicationSupportsMultipleScenes</key>\n  <true/>\n  <key>UISceneConfigurations</key>\n  <dict>\n    <key>UIWindowSceneSessionRoleApplication</key>\n    <array>\n      <dict>\n        <key>UISceneConfigurationName</key>\n        <string>Default Configuration</string>\n        <key>UISceneDelegateClassName</key>\n        <string>SceneDelegate</string>\n      </dict>\n    </array>\n  </dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Adding CreateMauiApp Overload (C#)\nDESCRIPTION: This snippet presents an overload of the `CreateMauiApp` method that uses the default `App` class. This simplifies creating a .NET MAUI app with the default application and allows for optional additional configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    ...\n\n    // Create a MauiApp using the default application.\n    public static MauiApp CreateMauiApp(Action<MauiAppBuilder>? additional = null) =>\n        CreateMauiApp<App>(additional);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ListView Group Header Style in C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically set the ListView's GroupHeaderStyle property to 'Grouped' using the fluent API, which prevents header cells from floating during scrolling on iOS. It requires importing the Microsoft.Maui.Controls.PlatformConfiguration and Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-group-header-style.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nlistView.On<iOS>().SetGroupHeaderStyle(GroupHeaderStyle.Grouped);\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity with Maui.SplashTheme in C#\nDESCRIPTION: This C# snippet shows the `MainActivity` class in Android, which is decorated with the `Activity` attribute. The `Theme` property is set to `@style/Maui.SplashTheme`, ensuring that the splash screen is displayed. The `ConfigurationChanges` property specifies which configuration changes the activity will handle itself.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Android.Content.PM;\n\nnamespace MyMauiApp\n{\n      [Activity(Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize)]\n      public class MainActivity : MauiAppCompatActivity\n      {\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Distance Object - C#\nDESCRIPTION: This C# code creates a Distance object, representing a distance of 1450.5 meters. Distance objects encapsulate distance in meters.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nDistance distance = new Distance(1450.5);\n```\n\n----------------------------------------\n\nTITLE: Native Callback and Wrapper Example (C#)\nDESCRIPTION: Illustrates the generated C# code after assembly rewriting for a marshal method, including the native callback, exception wrapper using `UnmanagedCallersOnly`, and the target method. It shows how exceptions are handled and propagated to the Android runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainActivity : AppCompatActivity\n{\n    // Native callback\n    static void n_OnCreate_Landroid_os_Bundle_(IntPtr jnienv, IntPtr native__this, IntPtr native_savedInstanceState)\n    {\n        var __this = global::Java.Lang.Object.GetObject<Android.App.Activity>(jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;\n        var savedInstanceState = global::Java.Lang.Object.GetObject<Android.OS.Bundle>(native_savedInstanceState, JniHandleOwnership.DoNotTransfer);\n        __this.OnCreate(savedInstanceState);\n    }\n\n    // Native callback exception wrapper\n    [UnmanagedCallersOnly]\n    static void n_OnCreate_Landroid_os_Bundle__mm_wrapper(IntPtr jnienv, IntPtr native__this, IntPtr native_savedInstanceState)\n    {\n        try\n        {\n            n_OnCreate_Landroid_os_Bundle_(jnienv, native__this, native_savedInstanceState)\n        }\n        catch (Exception ex)\n        {\n            Android.Runtime.AndroidEnvironmentInternal.UnhandledException(ex);\n        }\n    }\n\n    // Target method\n    [Register(\"onCreate\", \"(Landroid/os/Bundle;)V\", \"GetOnCreate_Landroid_os_Bundle_Handler\")]\n    protected virtual unsafe void OnCreate(Android.OS.Bundle? savedInstanceState)\n    {\n        const string __id = \"onCreate.(Landroid/os/Bundle;)V\";\n        try\n        {\n            JniArgumentValue* __args = stackalloc JniArgumentValue[1];\n            __args[0] = new JniArgumentValue((savedInstanceState == null) ? IntPtr.Zero : ((global::Java.Lang.Object)savedInstanceState).Handle);\n            _members.InstanceMethods.InvokeVirtualVoidMethod(__id, this, __args);\n        }\n        finally\n        {\n            global::System.GC.KeepAlive(savedInstanceState);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Navigation Bar Shadow - XAML\nDESCRIPTION: Enables the navigation bar shadow on a ContentPage using the `Shell.NavBarHasShadow` attached property. Setting this to `true` will display a shadow below the navigation bar.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             Shell.NavBarHasShadow=\"true\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Overload CreateMauiApp method in MauiProgram C#\nDESCRIPTION: This code snippet demonstrates how to overload the `CreateMauiApp` method in the `MauiProgram` class. It adds a generic overload to allow specifying the `App` class. It configures the MauiAppBuilder, adds fonts, configures logging in debug mode, invokes an optional additional configuration action, and builds the MauiApp. This modified `CreateMauiApp` method is used later by the test harness application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp(Action<MauiAppBuilder>? additional = null) =>\n            CreateMauiApp<App>(additional);\n\n        public static MauiApp CreateMauiApp<TApp>(Action<MauiAppBuilder>? additional = null) where TApp : App\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<TApp>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                });\n\n    #if DEBUG\n            builder.Logging.AddDebug();\n    #endif\n            additional?.Invoke(builder);\n\n            return builder.Build();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure App Transport Security (ATS) - Specific Domain\nDESCRIPTION: This code snippet shows how to configure App Transport Security (ATS) on iOS and Mac Catalyst to enable a specific domain to bypass ATS requirements. It's the best practice to only enable specific domains to bypass ATS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n\t<key>NSExceptionDomains</key>\n\t<dict>\n\t\t<key>mydomain.com</key>\n\t\t<dict>\n\t\t\t<key>NSIncludesSubdomains</key>\n\t\t\t<true/>\n\t\t\t<key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n\t\t\t<true/>\n\t\t\t<key>NSTemporaryExceptionMinimumTLSVersion</key>\n\t\t\t<string>TLSv1.1</string>\n\t\t</dict>\n\t</dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menus with SwipeView in XAML\nDESCRIPTION: This XAML snippet demonstrates implementing context menus in a `CollectionView` using `SwipeView`. The `SwipeView` wraps the content of each item in the `CollectionView`. `SwipeItems` are defined for the left side of the `SwipeView`, containing `SwipeItem` objects for \"Favorite\" and \"Delete\" actions. Commands and command parameters are bound to the `MonkeysViewModel`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView x:Name=\"collectionView\"\n                ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <SwipeView>\n                <SwipeView.LeftItems>\n                    <SwipeItems>\n                        <SwipeItem Text=\"Favorite\"\n                                   IconImageSource=\"favorite.png\"\n                                   BackgroundColor=\"LightGreen\"\n                                   Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=FavoriteCommand}\"\n                                   CommandParameter=\"{Binding}\" />\n                        <SwipeItem Text=\"Delete\"\n                                   IconImageSource=\"delete.png\"\n                                   BackgroundColor=\"LightPink\"\n                                   Command=\"{Binding x:DataType='viewmodels:MonkeysViewModel', Source={RelativeSource AncestorType={x:Type viewmodels:MonkeysViewModel}}, Path=DeleteCommand}\"\n                                   CommandParameter=\"{Binding}\" />\n                    </SwipeItems>\n                </SwipeView.LeftItems>\n                <Grid BackgroundColor=\"White\"\n                      Padding=\"10\">\n                    <!-- Define item appearance -->\n                </Grid>\n            </SwipeView>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Activity - Android - C#\nDESCRIPTION: This code snippet shows how to wait for an Android Activity to be created or become active using the WaitForActivityAsync method. This is useful when the Activity is needed but the app hasn't fully started. The method returns a Task that resolves to the Activity object when available.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/platform-helpers.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar activity = await Platform.WaitForActivityAsync();\n```\n\n----------------------------------------\n\nTITLE: Native View Cleanup in C# (.NET MAUI)\nDESCRIPTION: This C# code snippet demonstrates how to disconnect the handler for the Video control to perform native view cleanup. This is done by registering an event handler for the page's `Unloaded` event and invoking the `DisconnectHandler` method on the Video control's handler instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnContentPageUnloaded(object sender, EventArgs e)\n{\n    video.Handler?.DisconnectHandler();\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude SecureStorage from backup in auto_backup_rules.xml\nDESCRIPTION: This XML snippet is used to exclude SecureStorage items from being backed up on Android. It includes all shared preferences except those used by `SecureStorage`, which are identified by the package ID and preferences XML file name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<full-backup-content>\n    <include domain=\"sharedpref\" path=\".\"/>\n    <exclude domain=\"sharedpref\" path=\"${applicationId}.microsoft.maui.essentials.preferences.xml\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Requesting POST_NOTIFICATIONS Permission C#\nDESCRIPTION: This C# code snippet requests the POST_NOTIFICATIONS permission at runtime when the MainPage appears on Android. It utilizes the .NET MAUI Permissions API.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\n#if ANDROID\n            protected override async void OnAppearing()\n            {\n                base.OnAppearing();\n\n                PermissionStatus status = await Permissions.RequestAsync<Permissions.PostNotifications>();\n            }\n    #endif\n```\n\n----------------------------------------\n\nTITLE: Vertical Grid CollectionView Definition in XAML\nDESCRIPTION: Defines a CollectionView in XAML to display items in a vertical grid with two columns.  It binds to a `Monkeys` data source and uses a DataTemplate to define the appearance of each item within a Grid.  The `ItemsLayout` property is set to `VerticalGrid, 2` to achieve the two-column vertical grid layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                ItemsLayout=\"VerticalGrid, 2\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <Grid Padding=\"10\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"35\" />\n                    <RowDefinition Height=\"35\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"70\" />\n                    <ColumnDefinition Width=\"80\" />\n                </Grid.ColumnDefinitions>\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\"\n                       LineBreakMode=\"TailTruncation\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       LineBreakMode=\"TailTruncation\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Recognizing Left and Right Swipes XAML\nDESCRIPTION: This XAML code snippet shows how to configure a SwipeGestureRecognizer to recognize both left and right swipes by specifying 'Left,Right' as the direction. The Swiped event is associated with the 'OnSwiped' handler. It uses comma to combine different direction values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeGestureRecognizer Direction=\"Left,Right\" Swiped=\"OnSwiped\"/>\n```\n\n----------------------------------------\n\nTITLE: Position CSS in .NET MAUI\nDESCRIPTION: Sets the position of a .NET MAUI FlexLayout. Valid values are relative, absolute, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_49\n\nLANGUAGE: CSS\nCODE:\n```\nposition: absolute;\n```\n\n----------------------------------------\n\nTITLE: Create Location Object - C#\nDESCRIPTION: This C# code creates a Location object using the Location constructor, specifying latitude and longitude. Location objects encapsulate a location as latitude and longitude values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nLocation location = new Location(36.9628066, -122.0194722);\n```\n\n----------------------------------------\n\nTITLE: Digital Asset Links File - Multiple Apps JSON\nDESCRIPTION: This JSON snippet shows an assetlinks.json file configured to grant link-opening rights to multiple Android apps.  Each app is defined with its namespace, package name, and SHA256 certificate fingerprints. This is used when multiple apps are associated with the same domain. The file must be hosted at `https://domain.name/.well-known/assetlinks.json`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n      \"relation\": [\n         \"delegate_permission/common.handle_all_urls\"\n      ],\n      \"target\": {\n         \"namespace\": \"android_app\",\n         \"package_name\": \"com.companyname.myrecipeapp\",\n         \"sha256_cert_fingerprints\": [\n            \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\"\n         ]\n      }\n   },\n   {\n      \"relation\": [\n         \"delegate_permission/common.handle_all_urls\"\n      ],\n      \"target\": {\n         \"namespace\": \"android_app\",\n         \"package_name\": \"com.companyname.mycookingapp\",\n         \"sha256_cert_fingerprints\": [\n            \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\"\n         ]\n      }\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Define Asynchronous JavaScript Method\nDESCRIPTION: This JavaScript code defines an asynchronous function `EvaluateMeWithParamsAndAsyncReturn` that retrieves JSON data from a specified endpoint, modifies it, and returns the modified JSON data. It uses the `fetch` API to make an asynchronous HTTP request and handles potential errors by throwing an exception.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function EvaluateMeWithParamsAndAsyncReturn(s1, s2) {\n    const response = await fetch(\"/asyncdata.txt\");\n    if (!response.ok) {\n            throw new Error(`HTTP error: ${response.status}`);\n    }\n    var jsonData = await response.json();\n    jsonData[s1] = s2;\n\n    return jsonData;\n}\n```\n\n----------------------------------------\n\nTITLE: Confirm .NET SDK-style Project - Class Library (XML)\nDESCRIPTION: This code snippet from a .NET MAUI class library project file confirms it's using the .NET SDK-style project structure. It defines target frameworks for multiple platforms, enables implicit usings, and specifies that the project uses .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project-with-template.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFrameworks>net8.0;net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFramework>\n        <TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>\n        <SingleProject>true</SingleProject>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <UseMaui>true</UseMaui>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Nonzero Fill Rule XAML Example\nDESCRIPTION: This XAML snippet demonstrates the Nonzero fill rule on a composite shape of concentric ellipses.  The rings are all filled because a ray drawn from any point will cross one or more segments in the same direction.  The FillRule property is set explicitly to \"Nonzero\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/fillrules.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Fill=\"#CCCCFF\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Start\">\n    <Path.Data>\n        <GeometryGroup FillRule=\"Nonzero\">\n            <EllipseGeometry RadiusX=\"50\"\n                             RadiusY=\"50\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"70\"\n                             RadiusY=\"70\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"75,75\" />\n            <EllipseGeometry RadiusX=\"120\"\n                             RadiusY=\"120\"\n                             Center=\"75,75\" />\n        </GeometryGroup>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: AbsoluteLayout with Absolute Positioning in C#\nDESCRIPTION: This C# code demonstrates how to create an AbsoluteLayout and add BoxView and Label elements to it, specifying their positions and sizes using absolute values. It uses the Rect and Point objects to define the layout bounds of the child elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/absolutelayout.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class StylishHeaderDemoPage : ContentPage\n{\n    public StylishHeaderDemoPage()\n    {\n        AbsoluteLayout absoluteLayout = new AbsoluteLayout\n        {\n            Margin = new Thickness(20)\n        };\n\n        absoluteLayout.Add(new BoxView\n        {\n            Color = Colors.Silver\n        }, new Rect(0, 10, 200, 5));\n        absoluteLayout.Add(new BoxView\n        {\n            Color = Colors.Silver\n        }, new Rect(0, 20, 200, 5));\n        absoluteLayout.Add(new BoxView\n        {\n            Color = Colors.Silver\n        }, new Rect(10, 0, 5, 65));\n        absoluteLayout.Add(new BoxView\n        {\n            Color = Colors.Silver\n        }, new Rect(20, 0, 5, 65));\n\n        absoluteLayout.Add(new Label\n        {\n            Text = \"Stylish Header\",\n            FontSize = 24\n        }, new Point(30,25));                     \n\n        Title = \"Stylish header demo\";\n        Content = absoluteLayout;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Changing Indicator Size\nDESCRIPTION: This snippet shows how to change the size of the indicators using the IndicatorSize property.  The example sets the IndicatorSize to 18, making the indicators larger. IndicatorSize is of type `double`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<IndicatorView x:Name=\"indicatorView\"\n               IndicatorSize=\"18\" />\n```\n\n----------------------------------------\n\nTITLE: Setting font properties per platform in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet uses the `OnPlatform` markup extension to set different font families and sizes based on the operating system. The example configures specific font properties for iOS, Android, and WinUI platforms, enabling platform-specific UI customizations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"Different font properties on different platforms\"\n       FontSize=\"{OnPlatform iOS=20, Android=22, WinUI=24}\">\n    <Label.FontFamily>\n        <OnPlatform x:TypeArguments=\"x:String\">\n            <On Platform=\"iOS\" Value=\"MarkerFelt-Thin\" />\n            <On Platform=\"Android\" Value=\"Lobster-Regular\" />\n            <On Platform=\"WinUI\" Value=\"ArimaMadurai-Black\" />\n        </OnPlatform>\n    </Label.FontFamily>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Invalidating the GraphicsView in C#\nDESCRIPTION: This code snippet demonstrates how to invalidate a GraphicsView, which forces it to redraw itself. This is necessary when the content of the GraphicsView has changed and needs to be updated on the screen.  The graphicsView variable is an instance of the Microsoft.Maui.Controls.GraphicsView class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/graphicsview.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ngraphicsView.Invalidate();\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color in XAML\nDESCRIPTION: This snippet demonstrates setting the text color of a Label control using the TextColor property in XAML. The color is specified as a hexadecimal value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Label TextColor=\"#77d065\"\n       Text=\"This is a green label.\" />\n```\n\n----------------------------------------\n\nTITLE: Create Complex Geometries with PathSegments in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to create a complex geometry by combining different types of PathSegment objects: BezierSegment, LineSegment, and ArcSegment.  The segments are added to a PathFigure within a PathGeometry, allowing you to draw intricate shapes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigure StartPoint=\"10,50\">\n                    <PathFigure.Segments>\n                        <BezierSegment Point1=\"100,0\"\n                                       Point2=\"200,200\"\n                                       Point3=\"300,100\"/>\n                        <LineSegment Point=\"400,100\" />\n                        <ArcSegment Size=\"50,50\"\n                                    RotationAngle=\"45\"\n                                    IsLargeArc=\"True\"\n                                    SweepDirection=\"Clockwise\"\n                                    Point=\"200,100\"/>\n                    </PathFigure.Segments>\n                </PathFigure>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Enable XAML Compilation - Type Level - C#\nDESCRIPTION: This C# code snippet demonstrates how to explicitly enable XAML compilation for a specific class (`MyPage`) by applying the `XamlCompilationAttribute` to the class. This ensures that XAML errors are reported at compile time for this particular page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/xamlc.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[XamlCompilation (XamlCompilationOptions.Compile)]\npublic partial class MyPage : ContentPage\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a simple DataTemplate for ListView Items in XAML\nDESCRIPTION: This XAML code defines a `DataTemplate` for the `ListView` items. The `DataTemplate` contains a `ViewCell` with a `Label` that is bound to the `FriendlyName` property of the `NamedColor` object. This customizes the way each item is displayed in the ListView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView ItemsSource=\"{x:Static local:NamedColor.All}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:NamedColor\">\n            <ViewCell>\n                <Label Text=\"{Binding FriendlyName}\" />\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoHandler for Android\nDESCRIPTION: This code snippet demonstrates the partial implementation of the `VideoHandler` class for the Android platform. It inherits from `ViewHandler<Video, MauiVideoPlayer>`, creating a `MauiVideoPlayer` instance in `CreatePlatformView`, and overrides `ConnectHandler` and `DisconnectHandler` for setup and cleanup, including disposing of the `MauiVideoPlayer`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nusing Microsoft.Maui.Handlers;\nusing VideoDemos.Controls;\nusing VideoDemos.Platforms.Android;\n\nnamespace VideoDemos.Handlers\n{\n    public partial class VideoHandler : ViewHandler<Video, MauiVideoPlayer>\n    {\n        protected override MauiVideoPlayer CreatePlatformView() => new MauiVideoPlayer(Context, VirtualView);\n\n        protected override void ConnectHandler(MauiVideoPlayer platformView)\n        {\n            base.ConnectHandler(platformView);\n\n            // Perform any control setup here\n        }\n\n        protected override void DisconnectHandler(MauiVideoPlayer platformView)\n        {\n            platformView.Dispose();\n            base.DisconnectHandler(platformView);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic HeadingLevel Property in XAML - MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set the `HeadingLevel` attached property of `SemanticProperties`.  This allows screen readers to understand the hierarchical structure of the UI by marking elements as headings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Get started with .NET MAUI\"\n       SemanticProperties.HeadingLevel=\"Level1\" />\n<Label Text=\"Paragraphs of text go here.\" />\n<Label Text=\"Installation\"\n       SemanticProperties.HeadingLevel=\"Level2\" />\n<Label Text=\"Paragraphs of text go here.\" />    \n<Label Text=\"Build your first app\"\n       SemanticProperties.HeadingLevel=\"Level3\" />\n<Label Text=\"Paragraphs of text go here.\" />     \n<Label Text=\"Publish your app\"\n       SemanticProperties.HeadingLevel=\"Level4\" />\n<Label Text=\"Paragraphs of text go here.\" />   \n```\n\n----------------------------------------\n\nTITLE: Consume Data with .NET MAUI VersionTracking C#\nDESCRIPTION: This code snippet shows how to consume version and build history data using the .NET MAUI VersionTracking class after it has been migrated to preferences. It accesses the VersionHistory and BuildHistory properties of the VersionTracking.Default instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar mauiVersionHistory = VersionTracking.Default.VersionHistory;\nvar mauiBuildHistory = VersionTracking.Default.BuildHistory;\n```\n\n----------------------------------------\n\nTITLE: Enable Safe Area in C# (.NET MAUI)\nDESCRIPTION: This C# snippet demonstrates how to enable the safe area layout guide on an iOS page using the fluent API. It uses the `On<iOS>()` method to specify that the platform-specific code should only run on iOS. Requires the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-safe-area-layout.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n\nOn<iOS>().SetUseSafeArea(true);\n```\n\n----------------------------------------\n\nTITLE: Setting DisconnectPolicy in C# - .NET MAUI\nDESCRIPTION: Demonstrates how to set the `HandlerProperties.DisconnectPolicy` attached property to `Manual` in C# code, which necessitates manually disconnecting the handler at a suitable point in the application's lifecycle to prevent memory leaks and ensure proper resource cleanup.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nVideo video = new Video\n{\n    Source = \"video.mp4\",\n    AutoPlay = false\n};\nHandlerProperties.SetDisconnectPolicy(video, HandlerDisconnectPolicy.Manual);\n```\n\n----------------------------------------\n\nTITLE: Translating an Image in MAUI\nDESCRIPTION: This code translates an Image instance horizontally and vertically in a MAUI application. The `TranslateTo` method moves the image by the specified X and Y distances over a given duration. The parameters are the X translation, Y translation, and duration in milliseconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateTo(-100, -100, 1000);\n```\n\n----------------------------------------\n\nTITLE: Provide a Code Reference to Enable XAML Compiler (C#)\nDESCRIPTION: Shows how to provide a code reference to the assembly that defines the custom types. This involves creating an `Init` method within the namespace that defines the custom controls. This is necessary for the XAML compiler to locate the assembly during compilation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyCompany.Controls\n{\n    public static class Controls\n    {\n        public static void Init()\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use XML Descriptor to Preserve Code (XML)\nDESCRIPTION: This XML snippet shows how to use an XML descriptor file (MyRoots.xml) with the TrimmerRootDescriptor MSBuild item to specify members that should be excluded from the trimming process.  The XML file then uses the trimmer descriptor format to define which members to exclude.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <TrimmerRootDescriptor Include=\"MyRoots.xml\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling DragStarting Event to Store Text Data (C#)\nDESCRIPTION: This C# snippet shows how to handle the `DragStarting` event of a `DragGestureRecognizer` to store text data in the `DataPackage`. The event handler sets the `Text` property of the `DataPackage` to a string, making it available during the drop operation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n    e.Data.Text = \"My text data goes here\";\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Simultaneous Pan Gesture Recognition in C#\nDESCRIPTION: This C# code snippet demonstrates how to enable simultaneous pan gesture recognition using the fluent API. It utilizes the `On<iOS>()` method to ensure the platform-specific configuration is only applied to iOS. The `SetPanGestureRecognizerShouldRecognizeSimultaneously(true)` method configures the application to allow both the PanGestureRecognizer and the scrolling view to handle pan gestures.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/application-pan-gesture.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nApplication.Current.On<iOS>().SetPanGestureRecognizerShouldRecognizeSimultaneously(true);\n```\n\n----------------------------------------\n\nTITLE: Define Search Result Item Appearance in XAML\nDESCRIPTION: This code snippet demonstrates how to define the appearance of each search result item by setting the SearchHandler.ItemTemplate property to a DataTemplate. The DataTemplate uses a Grid to arrange an Image and a Label, binding their properties to the ImageUrl and Name properties of each Animal object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:Xaminals.Controls\">    \n    <Shell.SearchHandler>\n        <controls:AnimalSearchHandler Placeholder=\"Enter search term\"\n                                      ShowsResults=\"true\">\n            <controls:AnimalSearchHandler.ItemTemplate>\n                <DataTemplate x:DataType=\"models:Animal\">\n                    <Grid Padding=\"10\"\n                          ColumnDefinitions=\"0.15*,0.85*\">\n                        <Image Source=\"{Binding ImageUrl}\"\n                               HeightRequest=\"40\"\n                               WidthRequest=\"40\" />\n                        <Label Grid.Column=\"1\"\n                               Text=\"{Binding Name}\"\n                               FontAttributes=\"Bold\"\n                               VerticalOptions=\"Center\" />\n                    </Grid>\n                </DataTemplate>\n            </controls:AnimalSearchHandler.ItemTemplate>\n       </controls:AnimalSearchHandler>\n    </Shell.SearchHandler>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: StringFormat with ViewModel properties - XAML\nDESCRIPTION: Demonstrates the usage of `StringFormat` to display ViewModel properties in Labels, bound to Slider values. This example shows best practices for data binding between a view and a viewmodel. The binding to the Label is defined from the viewmodel, ensuring that the ViewModel bindings are valid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/string-formatting.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.BetterColorSelectorPage\"\n             Title=\"Better Color Selector\"\n             x:DataType=\"local:HslColorViewModel\">\n    <ContentPage.BindingContext>\n        <local:HslColorViewModel Color=\"Sienna\" />\n    </ContentPage.BindingContext>\n\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <Style TargetType=\"Slider\">\n                <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n            </Style>\n\n            <Style TargetType=\"Label\">\n                <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n            </Style>\n        </ResourceDictionary>\n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"20\">\n        <BoxView Color=\"{Binding Color}\"\n                 HeightRequest=\"100\"\n                 WidthRequest=\"100\"\n                 HorizontalOptions=\"Center\" />\n        <StackLayout Margin=\"10, 0\">\n            <Label Text=\"{Binding Name}\" />\n            <Slider Value=\"{Binding Hue}\" />\n            <Label Text=\"{Binding Hue, StringFormat='Hue = {0:F2}'}\" />\n            <Slider Value=\"{Binding Saturation}\" />\n            <Label Text=\"{Binding Saturation, StringFormat='Saturation = {0:F2}'}\" />\n            <Slider Value=\"{Binding Luminosity}\" />\n            <Label Text=\"{Binding Luminosity, StringFormat='Luminosity = {0:F2}'}\" />\n        </StackLayout>\n    </StackLayout>\n</ContentPage>    \n```\n\n----------------------------------------\n\nTITLE: Paint Rectangle with Image Using Extension\nDESCRIPTION: Demonstrates painting a rectangle with an image using the SetFillImage extension method, simplifying the code. It assumes that 'image' has already been loaded from a stream.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nif (image != null)\n{\n    canvas.SetFillImage(image.Downsize(100));\n    canvas.FillRectangle(0, 0, 240, 300);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Diagonal Linear Gradient in C#\nDESCRIPTION: This code snippet demonstrates how to create a diagonal linear gradient using the LinearGradientPaint class in .NET MAUI. It sets the start and end colors, start and end points, adds gradient stops with colors and offsets, and then applies the gradient to fill a rounded rectangle with a shadow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nLinearGradientPaint linearGradientPaint = new LinearGradientPaint\n{\n    StartColor = Colors.Yellow,\n    EndColor = Colors.Green,\n    StartPoint = new Point(0, 0),\n    EndPoint = new Point(1, 1)\n};\n\nlinearGradientPaint.AddOffset(0.25f, Colors.Red);\nlinearGradientPaint.AddOffset(0.75f, Colors.Blue);\n\nRectF linearRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(linearGradientPaint, linearRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(linearRectangle, 12);                                                     \n```\n\n----------------------------------------\n\nTITLE: Multi Trigger Example XAML\nDESCRIPTION: This example demonstrates a Multi Trigger that disables a Button when both the email and phone Entry fields are empty.  The conditions in the MultiTrigger.Conditions section all have to be true before the Setter is applied and the Button is disabled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry x:Name=\"email\"\n       Text=\"\" />\n<Entry x:Name=\"phone\"\n       Text=\"\" />\n<Button Text=\"Save\">\n    <Button.Triggers>\n        <MultiTrigger TargetType=\"Button\">\n            <MultiTrigger.Conditions>\n                <BindingCondition Binding=\"{Binding x:DataType='Entry',\n                                                    Source={x:Reference email},\n                                                    Path=Text.Length}\"\n                                  Value=\"0\" />\n                <BindingCondition Binding=\"{Binding x:DataType='Entry',\n                                                    Source={x:Reference phone},\n                                                    Path=Text.Length}\"\n                                  Value=\"0\" />\n            </MultiTrigger.Conditions>\n            <Setter Property=\"IsEnabled\" Value=\"False\" />\n            <!-- multiple Setter elements are allowed -->\n        </MultiTrigger>\n    </Button.Triggers>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Merging Resource Dictionaries in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet demonstrates how to merge resource dictionaries from the same assembly and an external assembly into a page-level ResourceDictionary using the MergedDictionaries property.  It includes references to resource dictionaries defined in the local namespace and a themed assembly. Requires corresponding resource dictionary files to exist.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:ResourceDictionaryDemo\"\n             xmlns:theme=\"clr-namespace:MyThemes;assembly=MyThemes\">\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <!-- Add more resources here -->\n            <ResourceDictionary.MergedDictionaries>\n                <!-- Add more resource dictionaries here -->\n                <local:MyResourceDictionary />\n                <theme:DefaultTheme />\n                <!-- Add more resource dictionaries here -->\n            </ResourceDictionary.MergedDictionaries>\n            <!-- Add more resources here -->\n        </ResourceDictionary>\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Resolving duplicate image filename errors in .NET MAUI\nDESCRIPTION: This XML snippet shows how to resolve duplicate image filename errors in .NET MAUI projects by using the `Update` attribute instead of `Include` for specific image files when including all images in a folder. This avoids conflicts when duplicate filenames exist.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\*\" />\n<MauiImage Update=\"Resources\\Images\\dotnet_bot.svg\" BaseSize=\"168,208\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Text in C#\nDESCRIPTION: This snippet shows how to display HTML text in a Label using C#. The TextType property is set to Html, and the Text property contains the HTML string.  Note that double quotes in the HTML string must be escaped.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label\n{\n    Text = \"This is <span style=\\\"color:red;\\\"><strong>HTML</strong></span> text.\",\n    TextType = TextType.Html\n};\n```\n\n----------------------------------------\n\nTITLE: Customize UI appearance based on device idiom with OnIdiom in XAML\nDESCRIPTION: This snippet uses the OnIdiom class in XAML to customize the Margin property of a ContentPage based on the device idiom (Phone, Tablet, Desktop). It sets different Thickness values for each idiom.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Margin>\n        <OnIdiom x:TypeArguments=\"Thickness\">\n            <OnIdiom.Phone>0,20,0,0</OnIdiom.Phone>\n            <OnIdiom.Tablet>0,40,0,0</OnIdiom.Tablet>\n            <OnIdiom.Desktop>0,60,0,0</OnIdiom.Desktop>\n        </OnIdiom>\n    </ContentPage.Margin>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Binding Path Variations (XAML)\nDESCRIPTION: This XAML code demonstrates several examples of binding to sub-properties and collection members. It includes bindings to TimePicker.Time.TotalSeconds, StackLayout.Children.Count, CultureInfo.DateTimeFormat.DayNames[3], and Label.Text.Length, showcasing different ways to use the Path property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:globe=\"clr-namespace:System.Globalization;assembly=netstandard\"\n             x:Class=\"DataBindingDemos.PathVariationsPage\"\n             Title=\"Path Variations\"\n             x:Name=\"page\">\n    <ContentPage.Resources>\n        <Style TargetType=\"Label\">\n            <Setter Property=\"FontSize\" Value=\"18\" />\n            <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"10, 0\">\n        <TimePicker x:Name=\"timePicker\" />\n        <Label Text=\"{Binding x:DataType='TimePicker',\n                              Source={x:Reference timePicker},\n                              Path=Time.TotalSeconds,\n                              StringFormat='{0} total seconds'}\" />\n        <Label Text=\"{Binding x:DataType='StackLayout',\n                              Source={x:Reference page},\n                              Path=Children.Count,\n                              StringFormat='There are {0} children in this StackLayout'}\" />\n        <Label Text=\"{Binding x:DataType='globe:CultureInfo',\n                              Source={x:Static globe:CultureInfo.CurrentCulture},\n                              Path=DateTimeFormat.DayNames[3],\n                              StringFormat='The middle day of the week is {0}'}\" />\n        <Label>\n            <Label.Text>\n                <Binding x:DataType=\"globe:CultureInfo\"\n                         Path=\"DateTimeFormat.DayNames[3]\"\n                         StringFormat=\"The middle day of the week in France is {0}\">\n                    <Binding.Source>\n                        <globe:CultureInfo>\n                            <x:Arguments>\n                                <x:String>fr-FR</x:String>\n                            </x:Arguments>\n                        </globe:CultureInfo>\n                    </Binding.Source>\n                </Binding>\n            </Label.Text>\n        </Label>\n        <Label Text=\"{Binding x:DataType='Label',\n                              Source={x:Reference label},\n                              Path=Text.Length,\n                              StringFormat='The second Label has {0} characters'}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Define Push Notification Templates C#\nDESCRIPTION: This code defines the `PushTemplates` class, which contains string constants representing tokenized notification payloads for both generic and silent push notifications.  These templates are used to format the messages sent to different platforms (Android and iOS) through Azure Notification Hubs. The placeholders $(alertMessage) and $(alertAction) are replaced with actual values at runtime. These templates allow for easy experimentation without modifying existing installations. This class is part of the `PushNotificationsAPI.Models` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsAPI.Models;\n\npublic class PushTemplates\n{\n    public class Generic\n    {\n        public const string Android = \"{ \\\"message\\\" : { \\\"notification\\\" : { \\\"title\\\" : \\\"PushDemo\\\", \\\"body\\\" : \\\"$(alertMessage)\\\"}, \\\"data\\\" : { \\\"action\\\" : \\\"$(alertAction)\\\" } } }\";\n        public const string iOS = \"{ \\\"aps\\\" : {\\\"alert\\\" : \\\"$(alertMessage)\\\"}, \\\"action\\\" : \\\"$(alertAction)\\\" }\";\n    }\n\n    public class Silent\n    {\n        public const string Android = \"{ \\\"message\\\" : { \\\"data\\\" : {\\\"message\\\" : \\\"$(alertMessage)\\\", \\\"action\\\" : \\\"$(alertAction)\\\"} } }\";\n        public const string iOS = \"{ \\\"aps\\\" : {\\\"content-available\\\" : 1, \\\"apns-priority\\\": 5, \\\"sound\\\" : \\\"\\\", \\\"badge\\\" : 0}, \\\"message\\\" : \\\"$(alertMessage)\\\", \\\"action\\\" : \\\"$(alertAction)\\\" }\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling App Sandbox Entitlement in MacCatalyst\nDESCRIPTION: This XML snippet demonstrates how to enable the App Sandbox entitlement in the Entitlements.plist file for a .NET MAUI MacCatalyst app. It defines the `com.apple.security.app-sandbox` key and sets its value to `true`. This entitlement is required for sandboxing the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/add-entitlements.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function with Func in .NET MAUI\nDESCRIPTION: This snippet illustrates defining a custom easing function using `Func<double, double>`.  The lambda expression calculates the easing value based on the input time `t`. The result is used to control animation progress in the `TranslateTo` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet9.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nFunc<double, double> CustomEaseFunc = t => 9 * t * t * t - 13.5 * t * t + 5.5 * t;\nawait image.TranslateTo(0, 200, 2000, CustomEaseFunc);\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Abbreviated Tag Syntax\nDESCRIPTION: This XAML code shows a more concise way to use the `x:Static` markup extension. It uses the abbreviated tag `x:Static` instead of `x:StaticExtension`, setting the `Member` property to reference the `NormalFontSize` constant. The namespace alias `local` must be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label No. 2\">\n    <Label.FontSize>\n        <x:Static Member=\"local:AppConstants.NormalFontSize\" />\n    </Label.FontSize>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Disable Selection - XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable selection in a CollectionView by setting the SelectionMode to None.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_17\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ...\n                SelectionMode=\"None\" />\n```\n\n----------------------------------------\n\nTITLE: Add Vibrate Permission to Android Manifest (C#)\nDESCRIPTION: This code snippet shows how to add the `Vibrate` permission to the Android project by adding the assembly attribute in the `MainApplication.cs` file. This is required to use haptic feedback on Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/haptic-feedback.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.Vibrate)]\n```\n\n----------------------------------------\n\nTITLE: Configuring App Shell with XAML\nDESCRIPTION: This XAML code configures the AppShell to define the app's visual hierarchy using a TabBar. It includes two ShellContent objects, each representing a tab in the TabBar. The ContentTemplate property of each ShellContent specifies the page to display in that tab. The Icon property uses OnPlatform to specify different icons for different platforms. This code snippet requires that the AboutPage and MainPage exist.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/shell.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:Notes\"\n    Title=\"Notes\"\n    x:Class=\"Notes.AppShell\">\n\n    <TabBar>\n        <ShellContent\n            Title=\"Notes\"\n            ContentTemplate=\"{DataTemplate local:MainPage}\"\n            Icon=\"icon_notes.png\" />\n\n        <ShellContent\n            Title=\"About\"\n            ContentTemplate=\"{DataTemplate local:AboutPage}\"\n            Icon=\"icon_about.png\">\n            <ShellContent.Icon>\n                <OnPlatform x:TypeArguments=\"ImageSource\">\n                    <On Platform=\"iOS, MacCatalyst\" Value=\"icon_about_ios.png\" />\n                </OnPlatform>\n            </ShellContent.Icon>\n        </ShellContent>\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Create a ProgressBar in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a ProgressBar and set its initial progress to 0.5 (50%).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/progressbar.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ProgressBar Progress=\"0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Use Wildcards to Update Auto-Imported Assets\nDESCRIPTION: This XML snippet shows how to use wildcards to update auto-imported assets, placing all assets in the *Assets* folder into an asset pack named `myassets`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <AndroidAsset Update=\"Assets/*\" AssetPack=\"myassets\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Native Embedding with ToPlatformEmbedded in C#\nDESCRIPTION: This C# code demonstrates creating a native view using `ToPlatformEmbedded`, which simplifies the native embedding process. It requires the `MauiApp` and the `Window` to be passed in. `nativeView` represents the platform-specific version of the `mauiView`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvar mauiApp = MauiProgram.CreateMauiApp();\nvar mauiView = new MyMauiContent();\nvar nativeView = mauiView.ToPlatformEmbedded(mauiApp, window);\n```\n\n----------------------------------------\n\nTITLE: Setting Base Address for Web Service (C#)\nDESCRIPTION: This C# code snippet defines the base address for a local web service, dynamically adjusting the hostname based on the platform (Android or other). It uses the DeviceInfo class to detect the current platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string BaseAddress =\n    DeviceInfo.Platform == DevicePlatform.Android ? \"https://10.0.2.2:5001\" : \"https://localhost:5001\";\npublic static string TodoItemsUrl = $\"{BaseAddress}/api/todoitems/\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper - Correct Order - C#\nDESCRIPTION: This C# code snippet demonstrates the correct order to set the Minimum and Maximum properties of a Stepper control to avoid exceptions. The Maximum property is set before the Minimum property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nStepper stepper = new Stepper\n{\n    Maximum = 360,\n    Minimum = 180\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Client Entitlement in MacCatalyst\nDESCRIPTION: This XML snippet demonstrates how to enable both the App Sandbox and outgoing network connections entitlements in the Entitlements.plist file for a .NET MAUI MacCatalyst app. It defines both the `com.apple.security.app-sandbox` and `com.apple.security.network.client` keys, setting their values to `true`. The `com.apple.security.network.client` entitlement is necessary for allowing the application to make outgoing network connections.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/add-entitlements.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.network.client</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Curly Brace Syntax\nDESCRIPTION: This XAML code demonstrates how to use the `x:Static` markup extension within curly braces to directly set the `FontSize` attribute of a `Label`. This is a more compact syntax. The namespace alias `local` must be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label No. 3\"\n       FontSize=\"{x:StaticExtension Member=local:AppConstants.NormalFontSize}\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical LinearGradientBrush in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a vertical LinearGradientBrush in .NET MAUI and set it as the Background of a Border. The gradient interpolates from yellow to green.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/lineargradient.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\">\n    <Border.Background>\n        <!-- StartPoint defaults to (0,0) -->    \n        <LinearGradientBrush EndPoint=\"0,1\">\n            <GradientStop Color=\"Yellow\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"Green\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Border.Background>\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Hiding TabBar in XAML with Shell.TabBarIsVisible in .NET MAUI\nDESCRIPTION: This XAML code shows how to hide the TabBar on a specific ShellContent page using the `Shell.TabBarIsVisible` attached property.  When the \"Dogs\" tab is selected, the tab bar will be hidden. Other tabs, such as \"Cats\" and \"Monkeys\" retain the default TabBar visibility.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<TabBar>\n   <Tab Title=\"Domestic\"\n        Icon=\"paw.png\">\n       <ShellContent Title=\"Cats\"\n                     ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       <ShellContent Shell.TabBarIsVisible=\"false\"\n                     Title=\"Dogs\"\n                     ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n   </Tab>\n   <Tab Title=\"Monkeys\"\n        Icon=\"monkey.png\">\n       <ShellContent ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n   </Tab>\n</TabBar>\n```\n\n----------------------------------------\n\nTITLE: Defining a Composed App Icon in .NET MAUI\nDESCRIPTION: This XML snippet shows how to define a composed app icon using a background and a foreground image in a .NET MAUI project.  The `Include` attribute specifies the background image, while the `ForegroundFile` attribute specifies the foreground image. Ensure the background image is specified.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: AdaptiveTrigger Style Definition XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a style that uses AdaptiveTrigger to change the orientation of a StackLayout based on the window width.  It defines two visual states, Vertical and Horizontal, and uses AdaptiveTrigger to switch between them.  The MinWindowWidth property determines the minimum width at which the Horizontal state is activated. The style implicitly targets StackLayout objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"StackLayout\">\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup>\n                <VisualState x:Name=\"Vertical\">\n                    <VisualState.StateTriggers>\n                        <AdaptiveTrigger MinWindowWidth=\"0\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"Orientation\"\n                                Value=\"Vertical\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Horizontal\">\n                    <VisualState.StateTriggers>\n                        <AdaptiveTrigger MinWindowWidth=\"800\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"Orientation\"\n                                Value=\"Horizontal\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Updating Target Frameworks in .csproj - .NET 9\nDESCRIPTION: This XML snippet illustrates the TargetFrameworks section of a .csproj file for a .NET 9 project. It defines target frameworks for Android, iOS, MacCatalyst, Tizen, and Windows. The key difference is changing the `net8.0` to `net9.0`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_26\n\nLANGUAGE: XML\nCODE:\n```\n<TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst;net9.0-tizen</TargetFrameworks>\n<TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Securely Define Android Signing Passwords using Files (XML)\nDESCRIPTION: This XML snippet shows how to securely define Android signing passwords by referencing files. It prevents passwords from appearing directly in the project file or build logs. It assumes that the password is stored in the specified text files.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'\">\n    <AndroidSigningKeyStore>myapp.keystore</AndroidSigningKeyStore>\n    <AndroidSigningKeyAlias>key</AndroidSigningKeyAlias>\n    <AndroidSigningKeyPass>file:C:\\Users\\user1\\AndroidSigningPassword.txt</AndroidSigningKeyPass>\n    <AndroidSigningStorePass>file:C:\\Users\\user1\\AndroidSigningPassword.txt</AndroidSigningStorePass>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Implement Constructor for Note Model C#\nDESCRIPTION: This constructor initializes a new `Note` instance, setting default values for its properties. It generates a random filename for the note using `Path.GetRandomFileName()` and sets the initial `Date` to the current date and time. This ensures that new notes have a unique filename and a valid creation date.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\n\nnamespace Notes.Models;\n\npublic partial class Note\n{\n    public Note()\n    {\n        Filename = $\"{Path.GetRandomFileName()}.notes.txt\";\n        Date = DateTime.Now;\n        Text = \"\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Local Image in C#\nDESCRIPTION: This C# code snippet demonstrates how to load and display an image from a local file within a .NET MAUI application. It uses the ImageSource.FromFile method to create an ImageSource object from the local file (dotnet_bot.png), and assigns it to the Source property of the Image control.  The image file (dotnet_bot.png) should be located in the Resources\\Images folder of the project with its build action set to MauiImage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image\n{\n    Source = ImageSource.FromFile(\"dotnet_bot.png\")\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Foreground Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell foreground color for an Element to yellow using the `-maui-shell-foreground` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_77\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-foreground: yellow;\n```\n\n----------------------------------------\n\nTITLE: Recognizing All Swipe Directions XAML\nDESCRIPTION: This XAML code creates separate SwipeGestureRecognizer instances for each direction (Left, Right, Up, Down) and attaches them to a BoxView. This approach allows handling each swipe direction individually. Requires .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView Color=\"Teal\" ...>\n    <BoxView.GestureRecognizers>\n        <SwipeGestureRecognizer Direction=\"Left\" Swiped=\"OnSwiped\"/>\n        <SwipeGestureRecognizer Direction=\"Right\" Swiped=\"OnSwiped\"/>\n        <SwipeGestureRecognizer Direction=\"Up\" Swiped=\"OnSwiped\"/>\n        <SwipeGestureRecognizer Direction=\"Down\" Swiped=\"OnSwiped\"/>\n    </BoxView.GestureRecognizers>\n</BoxView>\n```\n\n----------------------------------------\n\nTITLE: Display tooltip using C# in .NET MAUI\nDESCRIPTION: This code snippet shows how to display a tooltip on a Button control using C# in a .NET MAUI application. It programmatically creates a Button and sets the ToolTipProperties.Text attached property using the ToolTipProperties.SetText method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/tooltips.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nButton button = new Button { Text = \"Save\" };\nToolTipProperties.SetText(button, \"Click to Save your data\");\n```\n\n----------------------------------------\n\nTITLE: Fill an Ellipse on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a red filled ellipse on an ICanvas object using the FillEllipse method. It sets the fill color to red before drawing the ellipse with dimensions 150x50 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FillColor = Colors.Red;\ncanvas.FillEllipse(10, 10, 150, 50);\n```\n\n----------------------------------------\n\nTITLE: Transform Origin CSS in .NET MAUI\nDESCRIPTION: Sets the transform origin for .NET MAUI VisualElement. The value should be two doubles or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_55\n\nLANGUAGE: CSS\nCODE:\n```\ntransform-origin: 7.5, 12.5;\n```\n\n----------------------------------------\n\nTITLE: Setting Access Keys in XAML for .NET MAUI Windows\nDESCRIPTION: This XAML snippet demonstrates how to set access keys for various VisualElement controls, such as ContentPage, Switch, Entry, and Button, in a .NET MAUI application targeting the Windows platform.  It shows how to specify the AccessKey, AccessKeyPlacement, AccessKeyHorizontalOffset, and AccessKeyVerticalOffset attached properties for fine-grained control over the access key behavior and appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/visualelement-access-keys.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<TabbedPage ...\n            xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\">\n    <ContentPage Title=\"Page 1\"\n                 windows:VisualElement.AccessKey=\"1\">\n        <StackLayout>\n            ...\n            <Switch windows:VisualElement.AccessKey=\"A\" />\n            <Entry Placeholder=\"Enter text here\"\n                   windows:VisualElement.AccessKey=\"B\" />\n            ...\n            <Button Text=\"Access key F, placement top with offsets\"\n                    Clicked=\"OnButtonClicked\"\n                    windows:VisualElement.AccessKey=\"F\"\n                    windows:VisualElement.AccessKeyPlacement=\"Top\"\n                    windows:VisualElement.AccessKeyHorizontalOffset=\"20\"\n                    windows:VisualElement.AccessKeyVerticalOffset=\"20\" />\n            ...\n        </StackLayout>\n    </ContentPage>\n    ...\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Capture Screenshot with .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to capture a screenshot of the current application screen using the IScreenshot interface in .NET MAUI. The CaptureAsync method is used to initiate the screenshot capture, returning an IScreenshotResult object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/screenshot.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar screenImageSource = ImageSource.FromStream(async token =>\n{\n    var screenShot = await Screenshot.Default.CaptureAsync();\n    var stream = await screenShot.OpenReadAsync();\n    return stream;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper - XAML\nDESCRIPTION: This XAML code snippet demonstrates the correct order to set the Minimum and Maximum properties of a Stepper control to avoid exceptions, ensuring Maximum is greater than Minimum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Stepper Maximum=\"360\"\n         Minimum=\"180\" ... />\n```\n\n----------------------------------------\n\nTITLE: Select child elements in CSS\nDESCRIPTION: This CSS snippet demonstrates how to select child elements using the `element element` selector. The styles set the height and width of any Image elements that are children of ListView elements to 60.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nlistview image {\n    height: 60;\n    width: 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Proportional Positioning with AbsoluteLayout in XAML\nDESCRIPTION: Demonstrates how to use proportional positioning within an AbsoluteLayout in XAML. The AbsoluteLayout.LayoutBounds and AbsoluteLayout.LayoutFlags attached properties are used to define the position and size of child elements proportionally to the size of the AbsoluteLayout container. Each BoxView and Label are positioned using PositionProportional flag which sets the x and y values as proportional while the width and height are absolute.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/absolutelayout.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"AbsoluteLayoutDemos.Views.XAML.ProportionalDemoPage\"\n             Title=\"Proportional demo\">\n    <AbsoluteLayout>\n        <BoxView Color=\"Blue\"\n                 AbsoluteLayout.LayoutBounds=\"0.5,0,100,25\"\n                 AbsoluteLayout.LayoutFlags=\"PositionProportional\" />\n        <BoxView Color=\"Green\"\n                 AbsoluteLayout.LayoutBounds=\"0,0.5,25,100\"\n                 AbsoluteLayout.LayoutFlags=\"PositionProportional\" />\n        <BoxView Color=\"Red\"\n                 AbsoluteLayout.LayoutBounds=\"1,0.5,25,100\"\n                 AbsoluteLayout.LayoutFlags=\"PositionProportional\" />\n        <BoxView Color=\"Black\"\n                 AbsoluteLayout.LayoutBounds=\"0.5,1,100,25\"\n                 AbsoluteLayout.LayoutFlags=\"PositionProportional\" />\n        <Label Text=\"Centered text\"\n               AbsoluteLayout.LayoutBounds=\"0.5,0.5,110,25\"\n               AbsoluteLayout.LayoutFlags=\"PositionProportional\" />\n    </AbsoluteLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling App Actions in iOS (C#)\nDESCRIPTION: This code snippet shows how to handle app actions in an iOS `AppDelegate`.  It overrides the `PerformActionForShortcutItem` method and calls `Platform.PerformActionForShortcutItem` to invoke the action corresponding to the chosen `AppAction`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void PerformActionForShortcutItem(UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler)\n{\n    Platform.PerformActionForShortcutItem(application, shortcutItem, completionHandler);\n}\n```\n\n----------------------------------------\n\nTITLE: Using x:Reference Markup Extension in XAML\nDESCRIPTION: This XAML code demonstrates the use of the `x:Reference` markup extension with data bindings. It shows how to reference an element on the page and bind properties to it. The first example binds the `Text` property of a `Label` to the type of the `ContentPage`. The second example binds the `BindingContext` and `Rotation` of a `Label` to the `Value` of a `Slider`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MarkupExtensions.ReferenceDemoPage\"\n             x:Name=\"page\"\n             Title=\"x:Reference Demo\">    \n    <StackLayout Margin=\"10, 0\">        \n        <Label x:DataType=\"ContentPage\"\n               Text=\"{Binding Source={x:Reference page},\n                              StringFormat='The type of this page is {0}'}\"\n               FontSize=\"18\"\n               VerticalOptions=\"Center\"\n               HorizontalTextAlignment=\"Center\" />\n        <Slider x:Name=\"slider\"\n                Maximum=\"360\"\n                VerticalOptions=\"Center\" />\n        <Label x:DataType=\"Slider\"\n               BindingContext=\"{x:Reference slider}\"\n               Text=\"{Binding Value, StringFormat='{0:F0}&#x00B0; rotation'}\"\n               Rotation=\"{Binding Value}\"\n               FontSize=\"24\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />        \n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Loading Note with ItemId in .NET MAUI\nDESCRIPTION: This C# code snippet defines the ItemId property in NotePage.  The setter of this property calls the LoadNote method, passing in the ItemId (filename of the note) as a parameter.  This enables loading a specific note based on the ItemId passed via the query string when navigating to the NotePage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n public string ItemId\n    {\n        set\n        {\n            LoadNote(value);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Play/Pause and Stop Button Clicks in C# (.NET MAUI)\nDESCRIPTION: This C# code snippet defines the event handlers for the play/pause and stop buttons. The `OnPlayPauseButtonClicked` method toggles the video playback between playing and paused states based on the current video status. The `OnStopButtonClicked` method stops the video playback.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class CustomTransportPage : ContentPage\n{\n    ...\n    void OnPlayPauseButtonClicked(object sender, EventArgs args)\n    {\n        if (video.Status == VideoStatus.Playing)\n        {\n            video.Pause();\n        }\n        else if (video.Status == VideoStatus.Paused)\n        {\n            video.Play();\n        }\n    }\n\n    void OnStopButtonClicked(object sender, EventArgs args)\n    {\n        video.Stop();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: LineGeometry Definition XAML\nDESCRIPTION: This XAML code demonstrates how to create and render a LineGeometry in a Path object.  The LineGeometry is defined by a start point and an end point. The Path is styled with a black stroke.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n  <Path.Data>\n    <LineGeometry StartPoint=\"10,20\"\n                  EndPoint=\"100,130\" />\n  </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Register Map Click Handler - C#\nDESCRIPTION: This C# code programmatically registers the OnMapClicked event handler to the MapClicked event of a .NET MAUI Map.  The handler is called when the map is tapped.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map();\nmap.MapClicked += OnMapClicked;\n```\n\n----------------------------------------\n\nTITLE: Handling Pin Click Events in C# .NET MAUI (<=net-maui-9.0)\nDESCRIPTION: This C# code shows how to handle the MarkerClicked and InfoWindowClicked events for a Pin on a .NET MAUI Map. The MarkerClicked event hides the info window and displays an alert, while the InfoWindowClicked event displays an alert when the info window is tapped. This version targets .NET MAUI 9.0 and earlier.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.Maps;\nusing Microsoft.Maui.Maps;\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n...\n\nPin boardwalkPin = new Pin\n{\n    Location = new Location(36.9641949, -122.0177232),\n    Label = \"Boardwalk\",\n    Address = \"Santa Cruz\",\n    Type = PinType.Place\n};\nboardwalkPin.MarkerClicked += async (s, args) =>\n{\n    args.HideInfoWindow = true;\n    string pinName = ((Pin)s).Label;\n    await DisplayAlert(\"Pin Clicked\", $\"{pinName} was clicked.\", \"Ok\");\n};\n\nPin wharfPin = new Pin\n{\n    Location = new Location(36.9571571, -122.0173544),\n    Label = \"Wharf\",\n    Address = \"Santa Cruz\",\n    Type = PinType.Place\n};\nwharfPin.InfoWindowClicked += async (s, args) =>\n{\n    string pinName = ((Pin)s).Label;\n    await DisplayAlert(\"Info Window Clicked\", $\"The info window was clicked for {pinName}.\", \"Ok\");\n};\n```\n\n----------------------------------------\n\nTITLE: Remove Value from Secure Storage - C#\nDESCRIPTION: This C# code snippet demonstrates how to remove a specific value from secure storage by removing its key using the `SecureStorage.Remove` method.  It takes a key as input and removes the key and its associated value. This method is synchronous.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSecureStorage.Remove(\"oauth_token\");\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Native Embedded App in C#\nDESCRIPTION: This C# code snippet demonstrates how to bootstrap a native embedded app using the `UseMauiEmbeddedApp` extension method on the `MauiAppBuilder`.  The type `App` represents the .NET MAUI application's main `App` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n\n        builder\n            .UseMauiEmbeddedApp<App>();\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Attached Property with an Explicit Style in XAML\nDESCRIPTION: This XAML code shows how to define an explicit style for `Label` controls, using the `HasShadow` attached property. The style is defined using a `Style` element, with a `Setter` that sets the `HasShadow` property to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Style x:Key=\"ShadowStyle\" TargetType=\"Label\">\n  <Style.Setters>\n    <Setter Property=\"local:MyControl.HasShadow\" Value=\"true\" />\n  </Style.Setters>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Set CheckBox Color property in XAML\nDESCRIPTION: This code snippet demonstrates how to set the color of a CheckBox in XAML using the Color property. Setting the color property changes the color of the check mark inside the CheckBox.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox Color=\"Red\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring BlazorWebView Async Disposal - .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to configure BlazorWebView's disposal behavior, opting out of the fire-and-forget async disposal and blocking until disposal is complete. It involves setting an AppContext switch in the MauiProgram class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstatic MauiProgram()\n{\n    AppContext.SetSwitch(\"BlazorWebView.AndroidFireAndForgetAsync\", false);\n}\n```\n\n----------------------------------------\n\nTITLE: Justify Content CSS in .NET MAUI\nDESCRIPTION: Defines the alignment along the main axis for a .NET MAUI FlexLayout. Valid values are start, center, end, spacebetween, spacearound, spaceevenly, flex-start, flex-end, space-between, space-around, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_31\n\nLANGUAGE: CSS\nCODE:\n```\njustify-content: flex-end;\n```\n\n----------------------------------------\n\nTITLE: Adding Queries for Package Visibility in Android Manifest (XML)\nDESCRIPTION: This XML snippet shows how to add queries to the AndroidManifest.xml file to satisfy Android's package visibility requirements when targeting Android 11 (API 30) or higher. It specifically adds an intent filter for the CustomTabsService, which is used for web authentication.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.support.customtabs.action.CustomTabsService\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Configure iOS SceneDelegate - C#\nDESCRIPTION: This code snippet modifies the `SceneDelegate` class in an iOS application. It creates the main view controller and sets it as the view of the `UINavigationController`, which is essential for UI setup in iOS. It overrides the `WillConnect` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"SceneDelegate\")]\npublic class SceneDelegate : UIResponder, IUIWindowSceneDelegate\n{\n    [Export(\"window\")]\n    public UIWindow? Window { get; set; }\n\n    [Export(\"scene:willConnectToSession:options:\")]\n    public void WillConnect(UIScene scene, UISceneSession session, UISceneConnectionOptions connectionOptions)\n    {\n        if (scene is not UIWindowScene windowScene)\n            return;\n\n        Window = new UIWindow(windowScene);\n\n        var mainVC = new MainViewController();\n        var navigationController = new UINavigationController(mainVC);\n        navigationController.NavigationBar.PrefersLargeTitles = true;\n\n        Window.RootViewController = navigationController;\n        Window.MakeKeyAndVisible();\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Device Orientation Service C#\nDESCRIPTION: This C# code demonstrates how to create an instance of the `DeviceOrientationService` and invoke its `GetOrientation` method to retrieve the device's orientation. The orientation is stored in the `orientation` variable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing InvokePlatformCodeDemos.Services;\nusing InvokePlatformCodeDemos.Services.ConditionalCompilation;\n...\n\nDeviceOrientationService deviceOrientationService = new DeviceOrientationService();\nDeviceOrientation orientation = deviceOrientationService.GetOrientation();\n```\n\n----------------------------------------\n\nTITLE: Update App Class Inheritance in XAML\nDESCRIPTION: This code snippet shows how to update the `App` class in the test harness app to inherit from the `App` class in the .NET MAUI UI project. The `xmlns:myMauiUIProject` namespace is defined to reference the .NET MAUI UI project's assembly, and the `App` element inherits from `myMauiUIProject:App`. This allows the test harness app to utilize the resources and behavior defined in the .NET MAUI UI project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_41\n\nLANGUAGE: xaml\nCODE:\n```\n<myMauiUIProject:App xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                         xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                         xmlns:myMauiUIProject=\"clr-namespace:NativeEmbeddingDemo;assembly=NativeEmbeddingDemo\"\n                         x:Class=\"TestHarnessApp.TestApp\">\n        <myMauiUIProject:App.Resources>\n            <!-- App specific resources go here -->\n        </myMauiUIProject:App.Resources>\n    </myMauiUIProject:App>\n```\n\n----------------------------------------\n\nTITLE: Hiding Tabs in XAML with IsVisible Property in .NET MAUI\nDESCRIPTION: This XAML example demonstrates how to hide a specific tab using the `IsVisible` bindable property on a `ShellContent` element. Setting `IsVisible` to `False` will remove the tab from the TabBar.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<TabBar>\n    <ShellContent Title=\"Cats\"\n                  Icon=\"cat.png\"\n                  ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n    <ShellContent Title=\"Dogs\"\n                  Icon=\"dog.png\"\n                  ContentTemplate=\"{DataTemplate views:DogsPage}\n                  IsVisible=\"False\" />\n    <ShellContent Title=\"Monkeys\"\n                  Icon=\"monkey.png\"\n                  ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n</TabBar>\n```\n\n----------------------------------------\n\nTITLE: Setting Window.Page in C#\nDESCRIPTION: This C# example demonstrates how to set the Page property on a Window instance, replacing the obsolete Application.MainPage property. It involves overriding the CreateWindow method of the Application class to return a new Window with the desired content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n\n    protected override Window CreateWindow(IActivationState? activationState)\n    {\n        return new Window(new AppShell());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Lifecycle Events for Universal Links in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to configure lifecycle events in the `MauiProgram` class to handle universal links on iOS and Mac Catalyst. It registers handlers for `FinishedLaunching`, `ContinueUserActivity`, `SceneWillConnect`, and `SceneContinueUserActivity` to process the `NSUserActivity` object containing the universal link URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\nusing Microsoft.Extensions.Logging;\n\nnamespace MyNamespace;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            })\n            .ConfigureLifecycleEvents(lifecycle =>\n            {\n#if IOS || MACCATALYST\n                lifecycle.AddiOS(ios =>\n                {\n                    // Universal link delivered to FinishedLaunching after app launch.\n                    ios.FinishedLaunching((app, data) => HandleAppLink(app.UserActivity));\n\n                    // Universal link delivered to ContinueUserActivity when the app is running or suspended.\n                    ios.ContinueUserActivity((app, userActivity, handler) => HandleAppLink(userActivity));\n\n                    // Only required if using Scenes for multi-window support.\n                    if (OperatingSystem.IsIOSVersionAtLeast(13) || OperatingSystem.IsMacCatalystVersionAtLeast(13))\n                    {\n                        // Universal link delivered to SceneWillConnect after app launch\n                        ios.SceneWillConnect((scene, sceneSession, sceneConnectionOptions)\n                            => HandleAppLink(sceneConnectionOptions.UserActivities.ToArray()\n                                .FirstOrDefault(a => a.ActivityType == Foundation.NSUserActivityType.BrowsingWeb)));\n\n                        // Universal link delivered to SceneContinueUserActivity when the app is running or suspended\n                        ios.SceneContinueUserActivity((scene, userActivity) => HandleAppLink(userActivity));\n                    }\n                });\n#endif\n            });\n\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n\n        return builder.Build();\n    }\n\n#if IOS || MACCATALYST\n    static bool HandleAppLink(Foundation.NSUserActivity? userActivity)\n    {\n        if (userActivity is not null && userActivity.ActivityType == Foundation.NSUserActivityType.BrowsingWeb && userActivity.WebPageUrl is not null)\n        {\n            HandleAppLink(userActivity.WebPageUrl.ToString());\n            return true;\n        }\n        return false;\n    }\n#endif\n\n    static void HandleAppLink(string url)\n    {\n        if (Uri.TryCreate(url, UriKind.RelativeOrAbsolute, out var uri))\n            App.Current?.SendOnAppLinkRequestReceived(uri);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Targeting iOS Bindings in .NET XML\nDESCRIPTION: This XML snippet shows how to multi-target versions of .NET for iOS bindings in a library project. By specifying multiple target frameworks with different iOS versions, you can produce separate libraries for each version.  For example, building for both iOS 17.0 and iOS 17.2. This helps to support different versions of the iOS SDK.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>net9.0-ios17.0;net9.0-ios17.2</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Background Brush XAML\nDESCRIPTION: This XAML snippet shows how to set the flyout background using the `Shell.FlyoutBackground` bindable property and a `SolidColorBrush`. It sets the background to LightGray.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_20\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutBackground=\"LightGray\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Change commandName to Project in launchSettings.json\nDESCRIPTION: This JSON snippet shows how to modify the `commandName` value in the *Properties/launchSettings.json* file from `MsixPackage` to `Project`. This configures Visual Studio to launch the application as a standard project rather than through the MSIX package. The input is the existing launchSettings.json file, and the output is the updated JSON configuration.  Requires a .NET MAUI project with configured launch settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/includes/convert-packaged-to-unpackaged.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profiles\": {\n    \"Windows Machine\": {\n      \"commandName\": \"Project\",\n      \"nativeDebugging\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Min Width CSS in .NET MAUI\nDESCRIPTION: Sets the minimum width of a .NET MAUI VisualElement. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_41\n\nLANGUAGE: CSS\nCODE:\n```\nmin-width: 112;\n```\n\n----------------------------------------\n\nTITLE: Attaching DragGestureRecognizer to a Rectangle (XAML)\nDESCRIPTION: This XAML code snippet demonstrates attaching a `DragGestureRecognizer` to a `Rectangle` shape. The `DragStarting` event is handled to customize the data package that will be available during the drag operation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Rectangle Stroke=\"Red\"\n           Fill=\"DarkBlue\"\n           StrokeThickness=\"4\"\n           HeightRequest=\"200\"\n           WidthRequest=\"200\">\n    <Rectangle.GestureRecognizers>\n        <DragGestureRecognizer DragStarting=\"OnDragStarting\" />\n    </Rectangle.GestureRecognizers>\n</Rectangle>\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for High Sampling Rate Sensors (XML)\nDESCRIPTION: This XML snippet shows how to add the `HIGH_SAMPLING_RATE_SENSORS` permission directly to the AndroidManifest.xml file.  This approach is an alternative to using an assembly attribute and achieves the same result: allowing .NET MAUI Android apps targeting API 31+ to access high sampling rate sensors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/android-sensors.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\" />\n```\n\n----------------------------------------\n\nTITLE: Include App Icon in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to include an SVG file as the app icon in a .NET MAUI project. The MauiIcon build action ensures the image will be resized appropriately for various platforms and devices during the build process. The file is located in the Resources\\AppIcon folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting EmptyView with multiple child views in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the EmptyView property of a BindableLayout to a StackLayout containing multiple Label views. This view will be displayed when the ItemsSource property is null or empty.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout BindableLayout.ItemsSource=\"{Binding UserWithoutAchievements.Achievements}\">\n    <BindableLayout.EmptyView>\n        <StackLayout>\n            <Label Text=\"None.\"\n                   FontAttributes=\"Italic\"\n                   FontSize=\"{StaticResource smallTextSize}\" />\n            <Label Text=\"Try harder and return later?\"\n                   FontAttributes=\"Italic\"\n                   FontSize=\"{StaticResource smallTextSize}\" />\n        </StackLayout>\n    </BindableLayout.EmptyView>\n    ...\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: SwipeItems in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define SwipeItem objects within the LeftItems collection of a SwipeView.  Each SwipeItem has properties for Text, IconImageSource, BackgroundColor, and an Invoked event handler. This example illustrates how to configure the appearance and behavior of swipe items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView>\n    <SwipeView.LeftItems>\n        <SwipeItems>\n            <SwipeItem Text=\"Favorite\"\n                       IconImageSource=\"favorite.png\"\n                       BackgroundColor=\"LightGreen\"\n                       Invoked=\"OnFavoriteSwipeItemInvoked\" />\n            <SwipeItem Text=\"Delete\"\n                       IconImageSource=\"delete.png\"\n                       BackgroundColor=\"LightPink\"\n                       Invoked=\"OnDeleteSwipeItemInvoked\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Installing xcsync .NET tool\nDESCRIPTION: This command installs the preview version of the .NET xcsync tool globally using the dotnet tool install command. It specifies the package name, indicates a pre-release version, and adds a specific NuGet package source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install dotnet-xcsync -g --prerelease --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Rotating Image Around Center Point in MAUI\nDESCRIPTION: This code snippet demonstrates how to rotate an Image around the center of a layout in MAUI by adjusting the AnchorY property. The calculation ensures the image rotates fully around the layout's center point. Requires a MAUI project with an Image control named `image` and an AbsoluteLayout named `absoluteLayout`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ndouble radius = Math.Min(absoluteLayout.Width, absoluteLayout.Height) / 2;\nimage.AnchorY = radius / image.Height;\nawait image.RotateTo(360, 2000);\n```\n\n----------------------------------------\n\nTITLE: Using StateTriggers in a Style in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use StateTriggers within a Style to change the background color of a Grid based on the IsToggled property. It utilizes two VisualStates, Checked and Unchecked, and an inverse boolean converter to manage the background color transition.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Style TargetType=\"Grid\">\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup>\n                <VisualState x:Name=\"Checked\">\n                    <VisualState.StateTriggers>\n                        <StateTrigger IsActive=\"{Binding IsToggled}\"\n                                      IsActiveChanged=\"OnCheckedStateIsActiveChanged\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"Black\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Unchecked\">\n                    <VisualState.StateTriggers>\n                        <StateTrigger IsActive=\"{Binding IsToggled, Converter={StaticResource inverseBooleanConverter}}\"\n                                      IsActiveChanged=\"OnUncheckedStateIsActiveChanged\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"White\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Loading MauiAsset file in .NET MAUI (C#)\nDESCRIPTION: This C# code demonstrates how to access a MauiAsset file named 'AboutAssets.txt' using the FileSystem.OpenAppPackageFileAsync method.  It opens the file as a stream, reads its contents using a StreamReader, and stores the content in a variable named 'contents'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_3/PlatformIntegration/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Updated AppShell.xaml with New Namespace\nDESCRIPTION: This snippet shows the updated AppShell.xaml content after refactoring namespaces. The local XML namespace is removed and replaced with the views XML namespace, which maps to the Notes.Views namespace. The ContentTemplate properties are updated to use the views namespace to refer to NotePage and AboutPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Shell\n    x:Class=\"Notes.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:views=\"clr-namespace:Notes.Views\"\n    Shell.FlyoutBehavior=\"Disabled\">\n\n    <TabBar>\n        <ShellContent\n            Title=\"Notes\"\n            ContentTemplate=\"{DataTemplate views:NotePage}\"\n            Icon=\"{OnPlatform 'icon_notes.png', iOS='icon_notes_ios.png', MacCatalyst='icon_notes_ios.png'}\" />\n\n        <ShellContent\n            Title=\"About\"\n            ContentTemplate=\"{DataTemplate views:AboutPage}\"\n            Icon=\"{OnPlatform 'icon_about.png', iOS='icon_about_ios.png', MacCatalyst='icon_about_ios.png'}\" />\n    </TabBar>\n\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Handle Completed Event - MAUI C#\nDESCRIPTION: Shows how to handle the Completed event of the Editor, which is raised when the user finalizes text input (e.g., by pressing Tab on Windows).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnEditorCompleted(object sender, EventArgs e)\n{\n   string text = ((Editor)sender).Text;\n}\n```\n\n----------------------------------------\n\nTITLE: Using OperatingSystem.IsAndroidVersionAtLeast in C#\nDESCRIPTION: This C# code snippet demonstrates how to safely use Android APIs that are only available on certain Android versions.  The `OperatingSystem.IsAndroidVersionAtLeast` API is used to check the Android version at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nif (OperatingSystem.IsAndroidVersionAtLeast(23))\n{\n    // Use the API here\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollView Scrolled Event Handler (C#)\nDESCRIPTION: This C# code demonstrates how to subscribe to the `Scrolled` event of a ScrollView instance programmatically. The `OnScrollViewScrolled` event handler will be called whenever the ScrollView is scrolled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/scrollview.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nScrollView scrollView = new ScrollView();\nscrollView.Scrolled += OnScrollViewScrolled;\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon in XAML for MAUI Map\nDESCRIPTION: This XAML code shows how to create a Polygon on a MAUI Map. The Polygon's StrokeColor, StrokeWidth, and FillColor properties are set, and its GeoPath is defined using a collection of Location objects. The Microsoft.Maui.Devices.Sensors namespace is required for the Location type. The polygon will appear on the map with the specified style and shape, connecting all the defined location points.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_38\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\"\n             xmlns:sensors=\"clr-namespace:Microsoft.Maui.Devices.Sensors;assembly=Microsoft.Maui.Essentials\">\n    <maps:Map>\n        <maps:Map.MapElements>\n            <maps:Polygon StrokeColor=\"#FF9900\"\n                          StrokeWidth=\"8\"\n                          FillColor=\"#88FF9900\">\n                <maps:Polygon.Geopath>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>47.6458676</x:Double>\n                            <x:Double>-122.1356007</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    <sensors:Location>\n                        <x:Arguments>\n                            <x:Double>47.6458097</x:Double>\n                            <x:Double>-122.142789</x:Double>\n                        </x:Arguments>\n                    </sensors:Location>\n                    ...\n                </maps:Polygon.Geopath>\n            </maps:Polygon>\n        </maps:Map.MapElements>\n    </maps:Map>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Standalone Resource Dictionary XAML Example\nDESCRIPTION: This XAML code shows how to create a stand-alone ResourceDictionary.  It defines a DataTemplate for a 'Person' object.  It requires the removal of the 'x:Class' attribute and setting the 'MauiXaml' build action.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                    xmlns:local=\"clr-namespace:ResourceDictionaryDemo\">\n    <DataTemplate x:Key=\"PersonDataTemplate\"\n                  x:DataType=\"local:Person\">\n        <ViewCell>\n            <Grid RowSpacing=\"6\"\n                  ColumnSpacing=\"6\">\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"0.5*\" />\n                    <ColumnDefinition Width=\"0.2*\" />\n                    <ColumnDefinition Width=\"0.3*\" />\n                </Grid.ColumnDefinitions>\n                <Label Text=\"{Binding Name}\"\n                       TextColor=\"{StaticResource NormalTextColor}\"\n                       FontAttributes=\"Bold\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Age}\"\n                       TextColor=\"{StaticResource NormalTextColor}\" />\n                <Label Grid.Column=\"2\"\n                       Text=\"{Binding Location}\"\n                       TextColor=\"{StaticResource NormalTextColor}\"\n                       HorizontalTextAlignment=\"End\" />\n            </Grid>\n        </ViewCell>\n    </DataTemplate>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Create a Border with LinearGradientBrush in XAML\nDESCRIPTION: This XAML example shows how to create a Border with a linear gradient stroke. It defines a LinearGradientBrush with Orange and Brown colors as gradient stops, setting their offsets. The Border also has properties for StrokeThickness, StrokeShape, Background, and Padding. The Border contains a Label as its content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/border.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Border StrokeThickness=\"4\"\n        StrokeShape=\"RoundRectangle 40,0,0,40\"\n        Background=\"#2B0B98\"\n        Padding=\"16,8\"\n        HorizontalOptions=\"Center\">\n    <Border.Stroke>\n        <LinearGradientBrush EndPoint=\"0,1\">\n            <GradientStop Color=\"Orange\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"Brown\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Border.Stroke>\n    <Label Text=\".NET MAUI\"\n           TextColor=\"White\"\n           FontSize=\"18\"\n           FontAttributes=\"Bold\" />\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Consuming fonts in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet shows how to consume a registered font within a .NET MAUI application by setting the `FontFamily` property of a `Label` control.  The font can be specified either by its filename (without the extension) or by its alias, which was defined during font registration. This allows the application to customize the appearance of text within the UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Use font name -->\n<Label Text=\"Hello .NET MAUI\"\n       FontFamily=\"Lobster-Regular\" />\n\n<!-- Use font alias -->\n<Label Text=\"Hello .NET MAUI\"\n       FontFamily=\"Lobster\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Page Shell App with Tab and ShellContent\nDESCRIPTION: This XAML snippet demonstrates how to create a single-page .NET MAUI Shell application by adding a Tab object to a TabBar object and setting the ContentTemplate of a ShellContent object to a ContentPage object. It defines the visual structure for a simple Shell app with a single tab.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <Tab>\n           <ShellContent ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       </Tab>\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Populating Items Collection (C#)\nDESCRIPTION: This C# code shows how to populate the `Items` collection of a `Picker` control by adding strings to it using the `Items.Add` method. Each added string becomes an item in the picker's dropdown list.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nPicker picker = new Picker { Title = \"Select a monkey\" };\npicker.Items.Add(\"Baboon\");\npicker.Items.Add(\"Capuchin Monkey\");\npicker.Items.Add(\"Blue Monkey\");\npicker.Items.Add(\"Squirrel Monkey\");\npicker.Items.Add(\"Golden Lion Tamarin\");\npicker.Items.Add(\"Howler Monkey\");\npicker.Items.Add(\"Japanese Macaque\");\n```\n\n----------------------------------------\n\nTITLE: Handling ValueChanged Event in C#\nDESCRIPTION: This C# code handles the ValueChanged event of the Slider.  It updates the Rotation property of a Label based on the Slider's value and displays the current Slider value in another Label. Dependencies include the ContentPage class and controls defined in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class BasicSliderXamlPage : ContentPage\n{\n    public BasicSliderXamlPage()\n    {\n        InitializeComponent();\n    }\n\n    void OnSliderValueChanged(object sender, ValueChangedEventArgs args)\n    {\n        double value = args.NewValue;\n        rotatingLabel.Rotation = value;\n        displayLabel.Text = String.Format(\"The Slider value is {0}\", value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running .NET for Android apps with dotnet build -t:Run\nDESCRIPTION: This shows an alternative way to launch a .NET for Android app on a device or emulator by using the `dotnet build` command and specifying the `Run` MSBuild target using the `-t:Run` parameter. This approach executes the 'Run' target after the build process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_11\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet build HelloAndroid.csproj -t:Run\n```\n\n----------------------------------------\n\nTITLE: Create Self-Signed Certificate with PowerShell\nDESCRIPTION: This PowerShell script creates a self-signed certificate for signing the MSIX package. The certificate is stored in the current user's certificate store. Replace `<PublisherName>` with your desired publisher name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-cli.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-SelfSignedCertificate -Type Custom `\n                              -Subject \"CN=<PublisherName>\" `\n                              -KeyUsage DigitalSignature `\n                              -FriendlyName \"My temp dev cert\" `\n                              -CertStoreLocation \"Cert:\\CurrentUser\\My\" `\n                              -TextExtension @(\"2.5.29.37={text}1.3.6.1.5.5.7.3.3\", \"2.5.29.19={text}\")\n```\n\n----------------------------------------\n\nTITLE: Define Implicit Conversion Operators\nDESCRIPTION: This code defines a `SizeRequest` struct with implicit conversion operators to and from the `Size` struct. However, these implicit operators may be removed by the trimmer when full trimming is enabled, especially if they are only used in XAML. The presence of these operators enable conversion between `Size` and `SizeRequest`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/trimming.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp;\n\npublic struct SizeRequest : IEquatable<SizeRequest>\n{\n    public Size Request { get; set; }\n    public Size Minimum { get; set; }\n\n    public SizeRequest(Size request, Size minimum)\n    {\n        Request = request;\n        Minimum = minimum;\n    }\n\n    public SizeRequest(Size request)\n    {\n        Request = request;\n        Minimum = request;\n    }\n\n    public override string ToString()\n    {\n        return string.Format(\"{{Request={0} Minimum={1}}}\", Request, Minimum);\n    }\n\n    public bool Equals(SizeRequest other) => Request.Equals(other.Request) && Minimum.Equals(other.Minimum);\n\n    public static implicit operator SizeRequest(Size size) => new SizeRequest(size);\n    public static implicit operator Size(SizeRequest size) => size.Request;\n    public override bool Equals(object? obj) => obj is SizeRequest other && Equals(other);\n    public override int GetHashCode() => Request.GetHashCode() ^ Minimum.GetHashCode();\n    public static bool operator ==(SizeRequest left, SizeRequest right) => left.Equals(right);\n    public static bool operator !=(SizeRequest left, SizeRequest right) => !(left == right);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Reference in Project File XML\nDESCRIPTION: This XML snippet shows how to include a native library in a .NET for iOS binding project using the `<NativeReference>` item. It specifies the path to the native library, its kind (Static), and forces it to load.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/ios-binding-projects.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <NativeReference Include=\"libXMBindingLibraryUniversal.a\">\n        <Kind>Static</Kind>\n        <ForceLoad>True</ForceLoad>\n    </NativeReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Accessing Legacy App Properties in .NET MAUI (C#)\nDESCRIPTION: This code defines the `LegacyApplication` class, which provides access to data stored in the Xamarin.Forms app properties dictionary. It uses a `PropertiesDeserializer` to read the data. The class uses a singleton pattern to ensure only one instance exists. It handles asynchronous deserialization of properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MigrationHelpers;\n\npublic class LegacyApplication\n{\n    readonly PropertiesDeserializer deserializer;\n    Task<IDictionary<string, object>>? propertiesTask;\n\n    static LegacyApplication? current;\n    public static LegacyApplication? Current\n    {\n        get\n        {\n            current ??= (LegacyApplication)Activator.CreateInstance(typeof(LegacyApplication));\n            return current;\n        }\n    }\n\n    public LegacyApplication()\n    {\n        deserializer = new PropertiesDeserializer();\n    }\n\n    public IDictionary<string, object> Properties\n    {\n        get\n        {\n            propertiesTask ??= GetPropertiesAsync();\n            return propertiesTask.Result;\n        }\n    }\n\n    async Task<IDictionary<string, object>> GetPropertiesAsync()\n    {\n        IDictionary<string, object> properties = await deserializer.DeserializePropertiesAsync().ConfigureAwait(false);\n        properties ??= new Dictionary<string, object>(4);\n        return properties;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Grouped Data CollectionView C#\nDESCRIPTION: This C# code creates a CollectionView and binds its `ItemsSource` to the `Animals` collection and sets `IsGrouped` to true, enabling the display of grouped data. It programmatically configures the CollectionView to show grouped data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    IsGrouped = true\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (AnimalsViewModel vm) => vm.Animals);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Download Provisioning Profiles in Visual Studio\nDESCRIPTION: This snippet explains how to download provisioning profiles in Visual Studio after they are created in the Apple Developer Account. It involves navigating to the Apple Accounts options, selecting a team, viewing details, verifying the profile, and clicking the 'Download All Profiles' button. The profiles are then downloaded on Windows and exported to the Mac build host when paired.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/device-provisioning/manual-provisioning.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1. In Visual Studio, go to **Tools > Options > Xamarin > Apple Accounts**.\n2. In the **Apple Developer Accounts** dialog, select a team and click the **View Details...** button.\n3. In the **Details** dialog, verify that the new profile appears in the **Provisioning Profiles** list. You may need to restart Visual Studio to refresh the list.\n4. In the **Details** dialog, click the **Download All Profiles** button.\n```\n\n----------------------------------------\n\nTITLE: Generating or Syncing Xcode files with dotnet CLI\nDESCRIPTION: This dotnet CLI command used with `dotnet build` generates or synchronizes Xcode project files for managing Apple-specific resources. Requires specifying the project file, target Xcode directory, target framework moniker, and verbosity level.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_22\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet build /t:xcsync-generate\n    /p:xcSyncProjectFile=<PROJECT>\n    /p:xcSyncXcodeFolder=<TARGET_XCODE_DIRECTORY>\n    /p:xcSyncTargetFrameworkMoniker=<FRAMEWORK>\n    /p:xcSyncVerbosity=<LEVEL>\n```\n\n----------------------------------------\n\nTITLE: Relatively Scale VisualElement .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to scale a VisualElement (Image) relatively using the RelScaleTo extension method. The image is scaled by a factor of 2 relative to its current scale over 2 seconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RelScaleTo(2, 2000);\n```\n\n----------------------------------------\n\nTITLE: Defining Margin with Thickness (C#)\nDESCRIPTION: This C# code snippet demonstrates how to set the Margin property of Label controls within a StackLayout using the Thickness structure. It shows three different ways to initialize the Thickness: with a single uniform value, with horizontal and vertical values, and with four distinct values for each side. It mirrors the XAML example for setting margins.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/align-position.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nStackLayout stackLayout = new StackLayout\n{\n  Padding = new Thickness(0,20,0,0)\n};\n// Margin defined by a single uniform value.\nstackLayout.Add(new Label { Text = \".NET MAUI\", Margin = new Thickness(20) });\n// Margin defined by horizontal and vertical values.\nstackLayout.Add(new Label { Text = \".NET for iOS\", Margin = new Thickness(10,25) });\n// Margin defined by four distinct values that are applied to the left, top, right, and bottom.\nstackLayout.Add(new Label { Text = \".NET for Android\", Margin = new Thickness(0,20,15,5) });  \n```\n\n----------------------------------------\n\nTITLE: Customize Browser Launch Options (C#)\nDESCRIPTION: This C# code snippet shows how to customize the browser launch options, specifically the toolbar color. It creates a BrowserLaunchOptions object and sets its values before calling the OpenAsync method with the options.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/open-browser.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar browserOptions = new BrowserLaunchOptions()\n{\n    TitleMode = BrowserTitleMode.Show,\n    PreferredToolbarColor = Colors.Violet,\n    PreferredControlColor = Colors.Silver\n};\n\nawait Browser.Default.OpenAsync(\"https://aka.ms/maui\", browserOptions);\n```\n\n----------------------------------------\n\nTITLE: CollectionView Vertical List with ItemsLayout XAML\nDESCRIPTION: This XAML snippet shows how to explicitly set the CollectionView's ItemsLayout property to 'VerticalList' to achieve a vertical list layout. It demonstrates an alternative way to create a vertical list by directly specifying the layout type. This snippet binds the CollectionView to a data source named Monkeys.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                ItemsLayout=\"VerticalList\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Setting up user secrets for Azure Notification Hub in ASP.NET Core\nDESCRIPTION: These commands initialize and set the Azure Notification Hub name and connection string as user secrets in an ASP.NET Core project. This prevents sensitive information from being stored in the project's source control. The placeholders `<value>` should be replaced with the actual name and connection string from the Azure portal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet user-secrets init\ndotnet user-secrets set \"NotificationHub:Name\" <value>\ndotnet user-secrets set \"NotificationHub:ConnectionString\" \"<value>\"\n```\n\n----------------------------------------\n\nTITLE: Handling Button Clicked Event (>=net-maui-10.0)\nDESCRIPTION: This C# snippet defines an event handler for the Clicked event of a Button control. It displays an alert with the text of the button that was clicked. The method uses DisplayAlertAsync to show a modal alert. The 'sender' object is cast to a Button to access its Text property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnButtonClicked(object sender, EventArgs args)\n{\n    Button button = (Button)sender;\n    await DisplayAlertAsync(\"Clicked!\", \"The button labeled '\" + button.Text + \"' has been clicked\", \"OK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Open a Browser with OpenAsync (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the IBrowser interface to open a specified URI in the system-preferred browser. It uses the Browser.Default.OpenAsync method, which takes a Uri object as input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/open-browser.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Browser.Default.OpenAsync(\"https://aka.ms/maui\");\n```\n\n----------------------------------------\n\nTITLE: Define Animal Class C#\nDESCRIPTION: This code defines a simple C# class called `Animal` with properties for `Name`, `Location`, `Details`, and `ImageUrl`. This class is used as the model for individual items in the CollectionView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Animal\n{\n    public string Name { get; set; }\n    public string Location { get; set; }\n    public string Details { get; set; }\n    public string ImageUrl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spacing with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the spacing of a StackLayout to 8 using the `-maui-spacing` property. It accepts a double value or `initial`.  This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_68\n\nLANGUAGE: css\nCODE:\n```\n-maui-spacing: 8;\n```\n\n----------------------------------------\n\nTITLE: Setting TimePicker Update Mode in XAML\nDESCRIPTION: This XAML snippet sets the `TimePicker.UpdateMode` attached property to `WhenFinished`, which configures the TimePicker on iOS to only select the time once the user presses the 'Done' button. The `xmlns:ios` namespace declaration is necessary to use the platform-specific.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/timepicker-selection.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n       <TimePicker Time=\"14:00:00\"\n                   ios:TimePicker.UpdateMode=\"WhenFinished\" />\n       ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Testing Push Notifications (REST API) - JSON\nDESCRIPTION: This JSON payload is used for sending a test push notification via the REST API. It contains a `text` field for the message body and an `action` field for specifying an action to be performed when the notification is received.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_69\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"text\": \"Message from REST tooling!\",\n        \"action\": \"action_a\"\n    }\n```\n\n----------------------------------------\n\nTITLE: NotesViewModel Commands C#\nDESCRIPTION: This snippet defines the asynchronous command methods `NewNoteAsync` and `SelectNoteAsync` within the `NotesViewModel` class.  `NewNoteAsync` handles creating a new note and `SelectNoteAsync` handles selecting an existing note for navigation. The `SelectNoteAsync` method takes a parameter representing the selected note.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task NewNoteAsync()\n{\n    await Shell.Current.GoToAsync(nameof(Views.NotePage));\n}\n\nprivate async Task SelectNoteAsync(ViewModels.NoteViewModel note)\n{\n    if (note != null)\n        await Shell.Current.GoToAsync($\"{nameof(Views.NotePage)}?noteId={note.Id}\");\n\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating List<string> with x:String in .NET MAUI XAML\nDESCRIPTION: This example demonstrates how to instantiate a `List<string>` in .NET MAUI XAML using the `x:TypeArguments` directive and the XAML 2009 built-in `x:String` type. The `CollectionView.ItemsSource` property is bound to this list, which is then populated with string values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/generics.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=netstandard\"\n             ...>\n    <CollectionView>\n        <CollectionView.ItemsSource>\n            <scg:List x:TypeArguments=\"x:String\">\n                <x:String>Baboon</x:String>\n                <x:String>Capuchin Monkey</x:String>\n                <x:String>Blue Monkey</x:String>\n                <x:String>Squirrel Monkey</x:String>\n                <x:String>Golden Lion Tamarin</x:String>\n                <x:String>Howler Monkey</x:String>\n                <x:String>Japanese Macaque</x:String>\n            </scg:List>\n        </CollectionView.ItemsSource>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting SwipeTransitionMode in XAML for iOS SwipeView\nDESCRIPTION: This XAML snippet demonstrates how to set the SwipeTransitionMode property of a SwipeView to 'Drag' using the iOS platform-specific namespace. This controls the transition used when opening the SwipeView on iOS. The SwipeView includes a left swipe item with a delete action.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/swipeview-swipetransitionmode.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <SwipeView ios:SwipeView.SwipeTransitionMode=\"Drag\">\n            <SwipeView.LeftItems>\n                <SwipeItems>\n                    <SwipeItem Text=\"Delete\"\n                               IconImageSource=\"delete.png\"\n                               BackgroundColor=\"LightPink\"\n                               Invoked=\"OnDeleteSwipeItemInvoked\" />\n                </SwipeItems>\n            </SwipeView.LeftItems>\n            <!-- Content -->\n        </SwipeView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Clipping Image with ClipPath in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to clip an image using the ClipPath method in .NET MAUI. It loads an image from a stream, defines a circular path, clips the canvas to that path, and then draws the image. Only the portion of the image within the circle will be visible.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\nusing Microsoft.Maui.Graphics.Platform;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    PathF path = new PathF();\n    path.AppendCircle(100, 90, 80);\n    canvas.ClipPath(path);  // Must be called before DrawImage\n    canvas.DrawImage(image, 10, 10, image.Width, image.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: Share Request with PresentationSourceBounds in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to create a ShareFileRequest and set the PresentationSourceBounds property based on the device platform and idiom. This is relevant when sharing on iPadOS where you may want the share sheet to appear as a popover.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/ios-PresentationSourceBounds.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Share.RequestAsync(new ShareFileRequest\n    {\n        Title = Title,\n        File = new ShareFile(file),\n        PresentationSourceBounds = DeviceInfo.Platform == DevicePlatform.iOS && DeviceInfo.Idiom == DeviceIdiom.Tablet\n                                ? new Rect(0, 20, 0, 0)\n                                : Rect.Zero\n    });\n```\n\n----------------------------------------\n\nTITLE: Processing FileVideoSource for Android in MAUI\nDESCRIPTION: This code snippet demonstrates how to process a `FileVideoSource` on Android within a MAUI application. It uses the `SetVideoPath` method of `VideoView` to specify the video file to be played.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        bool _isPrepared;\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            _isPrepared = false;\n            bool hasSetSource = false;\n            ...\n\n            else if (_video.Source is FileVideoSource)\n            {\n                string filename = (_video.Source as FileVideoSource).File;\n                if (!string.IsNullOrWhiteSpace(filename))\n                {\n                    _videoView.SetVideoPath(filename);\n                    hasSetSource = true;\n                }\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Override OnNewIntent in MainActivity (C#)\nDESCRIPTION: This C# method overrides the `OnNewIntent` method in the `MainActivity` class. It calls the `ProcessNotificationActions` method to handle incoming intents that may contain notification actions. This is necessary because the `LaunchMode` is set to `SingleTop`, which means that a new instance of the activity is not created when it's already running.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnNewIntent(Intent? intent)\n{\n    base.OnNewIntent(intent);\n    ProcessNotificationsAction(intent);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Drop Gesture Recognition in XAML\nDESCRIPTION: This XAML code snippet shows how to attach a DropGestureRecognizer to an Image control in .NET MAUI. This allows the Image to become a drop target for drag and drop operations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Image BackgroundColor=\"Silver\"\n       HeightRequest=\"300\"\n       WidthRequest=\"250\">\n    <Image.GestureRecognizers>\n        <DropGestureRecognizer />\n    </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Initial AppShell.xaml Content\nDESCRIPTION: This snippet shows the initial content of AppShell.xaml before refactoring namespaces. The local XML namespace is mapped to the Notes namespace. The ContentTemplate properties use this local namespace to refer to NotePage and AboutPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Shell\n    x:Class=\"Notes.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:Notes\"\n    Shell.FlyoutBehavior=\"Disabled\">\n\n    <TabBar>\n        <ShellContent\n            Title=\"Notes\"\n            ContentTemplate=\"{DataTemplate local:NotePage}\"\n            Icon=\"{OnPlatform 'icon_notes.png', iOS='icon_notes_ios.png', MacCatalyst='icon_notes_ios.png'}\" />\n\n        <ShellContent\n            Title=\"About\"\n            ContentTemplate=\"{DataTemplate local:AboutPage}\"\n            Icon=\"{OnPlatform 'icon_about.png', iOS='icon_about_ios.png', MacCatalyst='icon_about_ios.png'}\" />\n    </TabBar>\n\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Setting DetectReadingOrderFromContent in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `DetectReadingOrderFromContent` attached property on an Editor control to `true`. This enables dynamic detection of reading order for bidirectional text within the editor on Windows platforms. It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/inputview-reading-order.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <Editor ... windows:InputView.DetectReadingOrderFromContent=\"true\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Valid Compiled Binding Expressions in .NET MAUI (C#)\nDESCRIPTION: Shows examples of valid compiled binding expressions using property access, array and indexer access, and casts with Func arguments. These expressions are compatible with compiled bindings because they are simple property access expressions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Valid: Property access\nstatic (PersonViewModel vm) => vm.Name;\nstatic (PersonViewModel vm) => vm.Address?.Street;\n\n// Valid: Array and indexer access\nstatic (PersonViewModel vm) => vm.PhoneNumbers[0];\nstatic (PersonViewModel vm) => vm.Config[\"Font\"];\n\n// Valid: Casts\nstatic (Label label) => (label.BindingContext as PersonViewModel).Name;\nstatic (Label label) => ((PersonViewModel)label.BindingContext).Name;\n```\n\n----------------------------------------\n\nTITLE: Toggle NavigationBar Translucency in C# (.NET MAUI iOS)\nDESCRIPTION: This C# code snippet demonstrates how to toggle the translucency of the navigation bar on iOS for a NavigationPage in .NET MAUI. It uses the `SetIsNavigationBarTranslucent` method in conjunction with `IsNavigationBarTranslucent` to switch the transparency state. It requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace and assumes the app has a single window with the root page cast to NavigationPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/navigation-bar-translucent.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Assume the app has a single window\n(App.Current.Windows[0].Page as Microsoft.Maui.Controls.NavigationPage)\n  .On<iOS>()\n  .SetIsNavigationBarTranslucent(!(App.Current.Windows[0].Page as Microsoft.Maui.Controls.NavigationPage).On<iOS>().IsNavigationBarTranslucent());\n```\n\n----------------------------------------\n\nTITLE: Setting TableView FlowDirection in XAML\nDESCRIPTION: This XAML code shows how to set the FlowDirection property to RightToLeft on a ContentPage, which will cause the TableView and all other elements within the page to layout their content from right to left.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TableViewDemos.RightToLeftTablePage\"\n             Title=\"Right to left TableView\"\n             FlowDirection=\"RightToLeft\">\n    <TableView Intent=\"Settings\">\n        ...\n    </TableView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Load CSS style sheet inline in XAML\nDESCRIPTION: This XAML snippet shows how to load a CSS style sheet by inlining it within a `CDATA` section in the XAML file. This allows you to define CSS styles directly within the XAML markup.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <StyleSheet>\n            <![CDATA[\n            ^contentpage {\n                background-color: lightgray;\n            }\n            ]]>\n        </StyleSheet>\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Flex Direction CSS in .NET MAUI\nDESCRIPTION: Sets the direction of the flex items in a .NET MAUI FlexLayout. Valid values are column, columnreverse, row, rowreverse, row-reverse, column-reverse, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_22\n\nLANGUAGE: CSS\nCODE:\n```\nflex-direction: column-reverse;\n```\n\n----------------------------------------\n\nTITLE: Zoom Map Programmatically using C#\nDESCRIPTION: This C# code snippet shows how to programmatically zoom a map without changing its location. It calculates the latitude and longitude degrees based on a zoom level and uses the current map's center location to create a new MapSpan.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\ndouble zoomLevel = 0.5;\ndouble latlongDegrees = 360 / (Math.Pow(2, zoomLevel));\nif (map.VisibleRegion != null)\n{\n    map.MoveToRegion(new MapSpan(map.VisibleRegion.Center, latlongDegrees, latlongDegrees));\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve INotificationManagerService Instance\nDESCRIPTION: This code snippet shows how to resolve an instance of the `INotificationManagerService` using explicit dependency resolution in .NET MAUI. It retrieves the service from the application's service provider and casts it to the `INotificationManagerService` interface. This allows accessing the platform-specific implementation of the notification manager.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Assume the app uses a single window.\nINotificationManagerService notificationManager =\n    Application.Current?.Windows[0].Page?.Handler?.MauiContext?.Services.GetService<INotificationManagerService>();\n```\n\n----------------------------------------\n\nTITLE: Disable ListView Row Animations in C# (.NET MAUI, iOS)\nDESCRIPTION: This C# snippet demonstrates how to disable row animations in a .NET MAUI ListView on iOS using the fluent API.  It uses the `On<iOS>()` extension method and requires the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces. The `SetRowAnimationsEnabled` method is used to disable the animations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-row-animations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nlistView.On<iOS>().SetRowAnimationsEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Invoking events using ILifecycleEventService in .NET MAUI C#\nDESCRIPTION: Invokes the platform-specific event using the ILifecycleEventService. The OnSizeChanged method retrieves the ILifecycleEventService instance and calls its InvokeEvents method, passing the name of the platform event (Microsoft.UI.Xaml.Window.SizeChanged) as an argument. This triggers any registered actions associated with the event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.LifecycleEvents;\n...\n\n#if WINDOWS\n        static void OnSizeChanged(object sender, Microsoft.UI.Xaml.WindowSizeChangedEventArgs args)\n        {\n            ILifecycleEventService service = MauiWinUIApplication.Current.Services.GetRequiredService<ILifecycleEventService>();\n            service.InvokeEvents(nameof(Microsoft.UI.Xaml.Window.SizeChanged));\n        }\n#endif\n```\n\n----------------------------------------\n\nTITLE: JCW with Dynamic Registration - Java\nDESCRIPTION: This Java code shows the generated Java Callable Wrapper (JCW) with dynamic registration enabled. The static constructor registers the managed methods by concatenating registration strings into the `__md_methods` variable and calling `mono.android.Runtime.register`. This approach is used in Debug configurations or when marshal methods are disabled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class MainActivity extends androidx.appcompat.app.AppCompatActivity\n{\n  public static final String __md_methods;\n  static\n  {\n    __md_methods =\n            \"n_onCreateView:(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;:GetOnCreateView_Landroid_view_View_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler\\n\" +\n            \"n_onCreate:(Landroid/os/Bundle;)V:GetOnCreate_Landroid_os_Bundle_Handler\\n\" +\n            \"\";\n    mono.android.Runtime.register (\"HelloAndroid.MainActivity, HelloAndroid\", MainActivity.class, __md_methods);\n  }\n\n  public android.view.View onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3)\n  {\n    return n_onCreateView (p0, p1, p2, p3);\n  }\n\n  private native android.view.View n_onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3);\n\n  public void onCreate (android.os.Bundle p0)\n  {\n    n_onCreate (p0);\n  }\n\n  private native void n_onCreate (android.os.Bundle p0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmptyView options in ResourceDictionary (XAML)\nDESCRIPTION: This XAML snippet shows how to define different ContentView objects in a ResourceDictionary to be used as EmptyViews. These views can be switched at runtime based on application logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:viewmodels=\"clr-namespace:BindableLayoutDemos.ViewModels\"\n             x:DataType=\"viewmodels:UserProfileViewModel\">\n    <ContentPage.Resources>\n        ...\n        <ContentView x:Key=\"BasicEmptyView\">\n            <StackLayout>\n                <Label Text=\"No achievements.\"\n                       FontSize=\"14\" />\n            </StackLayout>\n        </ContentView>\n        <ContentView x:Key=\"AdvancedEmptyView\">\n            <StackLayout>\n                <Label Text=\"None.\"\n                       FontAttributes=\"Italic\"\n                       FontSize=\"14\" />\n                <Label Text=\"Try harder and return later?\"\n                       FontAttributes=\"Italic\"\n                       FontSize=\"14\" />\n            </StackLayout>\n        </ContentView>\n    </ContentPage.Resources>\n\n    <StackLayout>\n        ...\n        <Switch Toggled=\"OnEmptyViewSwitchToggled\" />\n\n        <StackLayout x:Name=\"stackLayout\"\n                     BindableLayout.ItemsSource=\"{Binding UserWithoutAchievements.Achievements}\">\n            ...\n        </StackLayout>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using system fonts in .NET MAUI on Android with C#\nDESCRIPTION: This C# snippet demonstrates how to apply an Android system font to a Label control's `FontFamily` property in a .NET MAUI application. The example utilizes the 'monospace' font. This technique allows apps to leverage system-provided fonts for a consistent and platform-appropriate text rendering.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Use font name\nLabel label1 = new Label\n{\n    Text = \"Hello .NET MAUI!\",\n    FontFamily = \"monospace\"\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling font auto scaling in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable font auto-scaling for a Label control in a .NET MAUI application. By setting `FontAutoScalingEnabled` to `false`, the text will render at the specified `FontSize` regardless of the operating system's text scaling preferences.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"Scaling disabled\"\n       FontSize=\"18\"\n       FontAutoScalingEnabled=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Name Property in C#\nDESCRIPTION: This code snippet shows how to set the `Name` attached property for an `ActivityIndicator` in C#. The `Name` property provides a short, descriptive text string that a screen reader uses to announce the element. Note: This property has been deprecated in .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nActivityIndicator activityIndicator = new ActivityIndicator();\nAutomationProperties.SetIsInAccessibleTree(activityIndicator, true);\nAutomationProperties.SetName(activityIndicator, \"Progress indicator\");\n```\n\n----------------------------------------\n\nTITLE: Define Mac Catalyst Build Properties in .NET MAUI Project (XML)\nDESCRIPTION: This XML snippet defines a property group within a .NET MAUI project file for building and signing a Mac Catalyst application for distribution through the Mac App Store.  It specifies the link mode, enables code and package signing, creates a package, and sets the code signing key, provisioning profile, entitlements file, and package signing key.  These settings are specific to the 'Release|net8.0-maccatalyst|AnyCPU' configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-app-store.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-maccatalyst|AnyCPU'\">\n  <MtouchLink>SdkOnly</MtouchLink>\n  <EnableCodeSigning>True</EnableCodeSigning>\n  <EnablePackageSigning>true</EnablePackageSigning>\n  <CreatePackage>true</CreatePackage>\n  <CodesignKey>Apple Distribution: John Smith (AY2GDE9QM7)</CodesignKey>\n  <CodesignProvision>MyMauiApp</CodesignProvision>\n  <CodesignEntitlements>Platforms\\MacCatalyst\\Entitlements.plist</CodesignEntitlements>\n  <PackageSigningKey>3rd Party Mac Developer Installer: John Smith (AY2GDE9QM7)</PackageSigningKey>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Margin CSS in .NET MAUI\nDESCRIPTION: Sets the margin for a .NET MAUI View. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_34\n\nLANGUAGE: CSS\nCODE:\n```\nmargin: 6 12;\n```\n\n----------------------------------------\n\nTITLE: Generate Specific Keystore File Example\nDESCRIPTION: This example demonstrates how to create a keystore file named 'myapp.keystore' with an alias of 'myapp' using the keytool utility.  It specifies the keystore name, alias, RSA key algorithm, a key size of 2048 bits, and a validity period of 10000 days.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkeytool -genkeypair -v -keystore myapp.keystore -alias myapp -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Modifying Project File (XML)\nDESCRIPTION: This code snippet shows how to modify the project file to set the `TargetFramework` to `net8.0` or `net9.0` (depending on the .NET MAUI version) and remove the `OutputType` property. This configuration is essential for defining the target framework for .NET MAUI apps.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <TargetFramework>net8.0</TargetFramework>\n\n  <RootNamespace>MyMauiApp</RootNamespace>\n  <UseMaui>true</UseMaui>\n  <SingleProject>true</SingleProject>\n  <ImplicitUsings>enable</ImplicitUsings>\n  <Nullable>enable</Nullable>\n\n  ...\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Changing Indicator Shape\nDESCRIPTION: This snippet shows how to change the shape of the indicators using the IndicatorsShape property.  The example sets the indicators to be squares instead of the default circles.  The IndicatorColor and SelectedIndicatorColor properties are also set for styling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<IndicatorView x:Name=\"indicatorView\"\n               IndicatorsShape=\"Square\"\n               IndicatorColor=\"LightGray\"\n               SelectedIndicatorColor=\"DarkGray\" />\n```\n\n----------------------------------------\n\nTITLE: Relative Scaling of a .NET MAUI Image\nDESCRIPTION: This C# code snippet scales a .NET MAUI Image instance by a factor of 2 relative to its current size, over a duration of 2 seconds, using the RelScaleToAsync method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RelScaleToAsync(2, 2000);\n```\n\n----------------------------------------\n\nTITLE: Enable Safe Area in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet demonstrates how to enable the safe area layout guide on an iOS page using the `Page.UseSafeArea` attached property. This ensures that the page content is positioned within the safe area on the device screen, avoiding clipping due to device features like rounded corners or the home indicator. Requires the `Microsoft.Maui.Controls` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-safe-area-layout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             ios:Page.UseSafeArea=\"True\">\n    <StackLayout>\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling DragStarting Event to Store Custom Data in Property Bag (C#)\nDESCRIPTION: This C# code snippet illustrates handling the `DragStarting` event of a `DragGestureRecognizer` to store custom data in the `DataPackage.Properties` collection. It retrieves the `Shape`'s dimensions and stores a `Square` object with those dimensions in the `Properties` dictionary using the key \"Square\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n    Shape shape = (sender as Element).Parent as Shape;\n    e.Data.Properties.Add(\"Square\", new Square(shape.Width, shape.Height));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Styles in XAML\nDESCRIPTION: This XAML code defines several styles for a SearchBar, including a base style and two dynamic styles (blueSearchBarStyle and greenSearchBarStyle). The blueSearchBarStyle is initially applied to the SearchBar using DynamicResource, allowing it to be updated dynamically at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style x:Key=\"baseStyle\"\n               TargetType=\"View\">\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n        <Style x:Key=\"blueSearchBarStyle\"\n               TargetType=\"SearchBar\"\n               BasedOn=\"{StaticResource baseStyle}\">\n            <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n            <Setter Property=\"PlaceholderColor\" Value=\"Blue\" />\n        </Style>\n        <Style x:Key=\"greenSearchBarStyle\"\n               TargetType=\"SearchBar\">\n            <Setter Property=\"FontAttributes\" Value=\"None\" />\n            <Setter Property=\"PlaceholderColor\" Value=\"Green\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <SearchBar Placeholder=\"SearchBar demonstrating dynamic styles\"\n                   Style=\"{DynamicResource blueSearchBarStyle}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Create a Border with LinearGradientBrush in C#\nDESCRIPTION: This C# example demonstrates creating a Border with a linear gradient stroke. It defines a LinearGradientBrush with two GradientStop objects (Orange and Brown) and sets their offsets. The Border properties include StrokeThickness, Background, Padding, HorizontalOptions, StrokeShape, and Stroke (the LinearGradientBrush). The Border contains a Label as its content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/border.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Shapes;\nusing GradientStop = Microsoft.Maui.Controls.GradientStop;\n...\n\nBorder gradientBorder = new Border\n{\n    StrokeThickness = 4,\n    Background = Color.FromArgb(\"#2B0B98\"),\n    Padding = new Thickness(16, 8),\n    HorizontalOptions = LayoutOptions.Center,\n    StrokeShape = new RoundRectangle\n    {\n        CornerRadius = new CornerRadius(40, 0, 0, 40)\n    },\n    Stroke = new LinearGradientBrush\n    {\n        EndPoint = new Point(0, 1),\n        GradientStops = new GradientStopCollection\n        {\n            new GradientStop { Color = Colors.Orange, Offset = 0.1f },\n            new GradientStop { Color = Colors.Brown, Offset = 1.0f }\n        },\n    },\n    Content = new Label\n    {\n        Text = \".NET MAUI\",\n        TextColor = Colors.White,\n        FontSize = 18,\n        FontAttributes = FontAttributes.Bold\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Explicit Dependency Resolution: HandlerChanged Event C#\nDESCRIPTION: This example demonstrates explicit dependency resolution from an <xref:Microsoft.Maui.Controls.Element> using the `Handler.MauiContext.Services` property within the `HandlerChanged` event. It retrieves a `MainPageViewModel` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/dependency-injection.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n\n        HandlerChanged += OnHandlerChanged;\n    }\n\n    void OnHandlerChanged(object sender, EventArgs e)\n    {\n        BindingContext = Handler.MauiContext.Services.GetService<MainPageViewModel>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IVideoController Interface (C#)\nDESCRIPTION: This code defines the `IVideoController` interface which is used to control the `Video` class from outside, specifically for setting the `Status` and `Duration` properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IVideoController\n{\n    VideoStatus Status { get; set; }\n    TimeSpan Duration { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling a Path in .NET MAUI Graphics\nDESCRIPTION: This code snippet shows how to fill a path on an ICanvas using the FillPath method. It creates a PathF object, moves to a starting point, adds lines to create a triangle, sets the fill color, and then fills the path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nPathF path = new PathF();\npath.MoveTo(40, 10);\npath.LineTo(70, 80);\npath.LineTo(10, 50);\ncanvas.FillColor = Colors.SlateBlue;\ncanvas.FillPath(path);\n```\n\n----------------------------------------\n\nTITLE: Attaching PointerGestureRecognizer with Events - C#\nDESCRIPTION: This C# snippet demonstrates how to programmatically create and attach a PointerGestureRecognizer to an Image control, handling the PointerEntered, PointerExited, and PointerMoved events using lambda expressions. The gesture recognizer is added to the Image's GestureRecognizers collection. Each event handler executes custom logic when the corresponding pointer event is raised.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pointer.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nPointerGestureRecognizer pointerGestureRecognizer = new PointerGestureRecognizer();\npointerGestureRecognizer.PointerEntered += (s, e) =>\n{\n    // Handle the pointer entered event\n};\npointerGestureRecognizer.PointerExited += (s, e) =>\n{\n    // Handle the pointer exited event\n};\npointerGestureRecognizer.PointerMoved += (s, e) =>\n{\n    // Handle the pointer moved event\n};\n\nImage image = new Image();\nimage.GestureRecognizers.Add(pointerGestureRecognizer);\n```\n\n----------------------------------------\n\nTITLE: Adding a shadow to an Image (long format, .NET MAUI 9.0+)\nDESCRIPTION: This XAML snippet demonstrates how to add a shadow to an Image control using a formatted string to define the shadow properties. This shorthand syntax is available in .NET MAUI 9.0 and later. The format used here is 'offset X, offset Y, radius, color, opacity'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/shadow.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n           WidthRequest=\"250\"\n           HeightRequest=\"310\"\n           Shadow=\"4 4 16 AliceBlue 0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Set ItemsUpdatingScrollMode in XAML\nDESCRIPTION: This XAML code snippet shows how to set the `ItemsUpdatingScrollMode` property to `KeepLastItemInView`. This ensures that the last item in the list is displayed when new items are added to the CarouselView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsUpdatingScrollMode=\"KeepLastItemInView\">\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Xamarin.Forms StackLayout with FillAndExpand (XAML)\nDESCRIPTION: This XAML snippet showcases a Xamarin.Forms StackLayout using the FillAndExpand vertical option on an Image.  In Xamarin.Forms, this would cause the Image to fill the remaining vertical space within the StackLayout. To achieve similar results in .NET MAUI, this StackLayout should be converted to a Grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/layouts.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<StackLayout>\n    <Label Text=\"Hello world!\"/>\n    <Image VerticalOptions=\"FillAndExpand\" Source=\"dotnetbot.png\"/>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: UpdateStatus Method on Android (C#)\nDESCRIPTION: This code snippet shows how the `UpdateStatus` method is implemented on Android. It checks if the video is prepared and then uses the `VideoView.IsPlaying` property to determine the current `VideoStatus` which is then set on the `Video` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        bool _isPrepared;\n        Video _video;\n        ...\n\n        public MauiVideoPlayer(Context context, Video video) : base(context)\n        {\n            _video = video;\n            ...\n            _videoView.Prepared += OnVideoViewPrepared;\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                _videoView.Prepared -= OnVideoViewPrepared;\n                ...\n            }\n\n            base.Dispose(disposing);\n        }\n\n        void OnVideoViewPrepared(object sender, EventArgs args)\n        {\n            _isPrepared = true;\n            ((IVideoController)_video).Duration = TimeSpan.FromMilliseconds(_videoView.Duration);\n        }\n\n        public void UpdateStatus()\n        {\n            VideoStatus status = VideoStatus.NotReady;\n\n            if (_isPrepared)\n                status = _videoView.IsPlaying ? VideoStatus.Playing : VideoStatus.Paused;\n\n            ((IVideoController)_video).Status = status;\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Use Object-Based Navigation Data in .NET MAUI\nDESCRIPTION: This code snippet shows how to pass multiple-use object-based navigation data using a Dictionary in .NET MAUI. It retrieves the selected item from a CollectionView, creates a Dictionary with the item as a value, and navigates to another page, passing the dictionary as a navigation parameter. The data will be retained until the page is removed from the navigation stack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    Animal animal = e.CurrentSelection.FirstOrDefault() as Animal;\n    var navigationParameter = new Dictionary<string, object>\n    {\n        { \"Bear\", animal }\n    };\n    await Shell.Current.GoToAsync($\"beardetails\", navigationParameter);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Bind Switch in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to data bind a Switch's IsToggled property to a Label's FontAttributes and FontSize properties using a DataTrigger.  When the switch is toggled on, the Label's formatting changes; when toggled off, the Label reverts to its original formatting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/switch.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<Switch x:Name=\"styleSwitch\" />\n<Label Text=\"Lorem ipsum dolor sit amet, elit rutrum, enim hendrerit augue vitae praesent sed non, lorem aenean quis praesent pede.\">\n    <Label.Triggers>\n        <DataTrigger TargetType=\"Label\"\n                     Binding=\"{Binding x:DataType='Switch', Source={x:Reference styleSwitch}, Path=IsToggled}\"\n                     Value=\"true\">\n            <Setter Property=\"FontAttributes\"\n                    Value=\"Italic, Bold\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"18\" />\n        </DataTrigger>\n    </Label.Triggers>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Create Distance Object Using BetweenPositions - C#\nDESCRIPTION: This C# code creates a Distance object using the BetweenPositions factory method, calculating the distance between two Location objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nDistance distance4 = Distance.BetweenPositions(location1, location2);\n```\n\n----------------------------------------\n\nTITLE: Load Embedded Image with Markup Extension - XAML\nDESCRIPTION: This XAML code demonstrates how to use the `ImageResourceExtension` markup extension to load an embedded image. It declares a namespace alias `local` and then uses it to specify the image source within the `Image` element.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:ImageDemos\">\n    <StackLayout>\n        <Image Source=\"{local:ImageResource monkey.png}\"\n               HeightRequest=\"100\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set iPad UI Idiom in Info.plist (XML)\nDESCRIPTION: This XML snippet configures the .NET MAUI Mac Catalyst app to use the iPad user interface idiom. It sets the value of the `UIDeviceFamily` key to 2 within the app's *Info.plist* file, instructing macOS to scale the UI to match the Mac display environment while maintaining an iPad-like appearance. The code is within an array element.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/user-interface-idiom.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIDeviceFamily</key>\n<array>\n  <integer>2</integer>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Move Map Region using C#\nDESCRIPTION: This C# code snippet demonstrates how to move the displayed region of a map using the MoveToRegion method.  It requires the Microsoft.Maui.Maps and Microsoft.Maui.Controls.Maps.Map namespaces. It moves the map to a specified location with a zoom level defined by the radius.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Maps;\nusing Microsoft.Maui.Controls.Maps.Map;\n...\n\nMapSpan mapSpan = MapSpan.FromCenterAndRadius(location, Distance.FromKilometers(0.444));\nmap.MoveToRegion(mapSpan);\n```\n\n----------------------------------------\n\nTITLE: ADB Connect Windows CMD\nDESCRIPTION: This command connects the Android Debug Bridge (ADB) client in the Windows VM to the Android emulator running on the Mac, using the specified IP address and port. It's used after setting up either packet forwarding with `nc` or SSH port forwarding. Replace `ip-address-of-the-mac` with the actual IP address of the Mac, and `5555` with the port used for forwarding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nadb connect ip-address-of-the-mac:5555\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid Compiled Binding Expressions - C#\nDESCRIPTION: This example shows valid and invalid compiled binding expressions using lambda functions. Valid expressions include property access, array/indexer access, and casts. Invalid expressions involve method calls or complex expressions. These examples illustrate the limitations of compiled bindings in .NET MAUI 9.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Valid: Property access\nstatic (PersonViewModel vm) => vm.Name;\nstatic (PersonViewModel vm) => vm.Address?.Street;\n\n// Valid: Array and indexer access\nstatic (PersonViewModel vm) => vm.PhoneNumbers[0];\nstatic (PersonViewModel vm) => vm.Config[\"Font\"];\n\n// Valid: Casts\nstatic (Label label) => (label.BindingContext as PersonViewModel).Name;\nstatic (Label label) => ((PersonViewModel)label.BindingContext).Name;\n\n// Invalid: Method calls\nstatic (PersonViewModel vm) => vm.GetAddress();\nstatic (PersonViewModel vm) => vm.Address?.ToString();\n\n// Invalid: Complex expressions\nstatic (PersonViewModel vm) => vm.Address?.Street + \" \" + vm.Address?.City;\nstatic (PersonViewModel vm) => $\"Name: {vm.Name}\";\n```\n\n----------------------------------------\n\nTITLE: Activating a Specific Window in .NET MAUI (net9.0+)\nDESCRIPTION: This code snippet shows how to bring a specific window to the front in a .NET MAUI application using the `ActivateWindow` method. This method is available in .NET MAUI 9.0 and later and works on Mac Catalyst and Windows. The `secondWindow` instance is brought to the foreground.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nApplication.Current?.ActivateWindow(secondWindow);\n```\n\n----------------------------------------\n\nTITLE: Processing FileVideoSource for Windows in MAUI\nDESCRIPTION: This code snippet demonstrates how to process a `FileVideoSource` on Windows within a MAUI application. It retrieves a `StorageFile` from the file path and sets the `MediaPlayerElement.Source` to a `MediaSource` created from the `StorageFile`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        ...\n\n        public async void UpdateSource()\n        {\n            bool hasSetSource = false;\n\n            ...\n            else if (_video.Source is FileVideoSource)\n            {\n                string filename = (_video.Source as FileVideoSource).File;\n                if (!string.IsNullOrWhiteSpace(filename))\n                {\n                    StorageFile storageFile = await StorageFile.GetFileFromPathAsync(filename);\n                    _mediaPlayerElement.Source = MediaSource.CreateFromStorageFile(storageFile);\n                    hasSetSource = true;\n                }\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Entry Cursor Color in C# (iOS)\nDESCRIPTION: This C# code snippet shows how to set the cursor color of an Entry control to LimeGreen on iOS using the fluent API. It utilizes the `On<iOS>` method to specify the platform and the `SetCursorColor` method to set the color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/entry-cursor-color.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nEntry entry = new Microsoft.Maui.Controls.Entry();\nentry.On<iOS>().SetCursorColor(Colors.LimeGreen);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Initialization in XAML\nDESCRIPTION: This XAML snippet shows how to initialize a DatePicker with MinimumDate, MaximumDate, and Date properties set to specific dates. It demonstrates the basic structure for defining a DatePicker in XAML with initial date constraints and a selected date.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/datepicker.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<DatePicker MinimumDate=\"01/01/2022\"\n            MaximumDate=\"12/31/2022\"\n            Date=\"06/21/2022\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling AOT Compilation\nDESCRIPTION: This code shows how to disable AOT compilation in a Release build by explicitly setting both the `RunAOTCompilation` and `AndroidEnableProfiledAot` properties to `false`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n  <RunAOTCompilation>false</RunAOTCompilation>\n  <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Incorrect DataTemplate Binding\nDESCRIPTION: This XAML code demonstrates incorrect usage of compiled bindings in a DataTemplate by not setting the x:DataType, leading to the compiler inferring an incorrect binding context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             x:DataType=\"local:AnimalsPageViewModel\">\n    <!-- Binding to AnimalsPageViewModel.Animals -->\n    <CollectionView ItemsSource=\"{Binding Animals}\">\n        <CollectionView.ItemTemplate>\n            <DataTemplate>\n                <!-- incorrect: compiler thinks you want to bind to AnimalsPageViewModel.Name -->  \n                <Label Text=\"{Binding Name}\" />\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Hide Flyout Item XAML\nDESCRIPTION: This XAML snippet shows how to hide a flyout item using the `FlyoutItemIsVisible` property. Setting it to `False` hides the item in the flyout but it is still reachable using `GoToAsync` navigation. Also, `IsVisible` can remove the item from the visual tree.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_30\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <FlyoutItem ...\n                FlyoutItemIsVisible=\"False\">\n        ...\n    </FlyoutItem>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Flex Shrink CSS in .NET MAUI\nDESCRIPTION: Sets the flex shrink factor of a flex item in a .NET MAUI VisualElement, determining how much the item will shrink relative to other flex items in the flex container. The value should be a float or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_25\n\nLANGUAGE: CSS\nCODE:\n```\nflex-shrink: 1;\n```\n\n----------------------------------------\n\nTITLE: ContainerView Implementation (iOS, net-maui-9.0+)\nDESCRIPTION: Defines a custom `ContainerView` class derived from `UIView` that wraps the .NET MAUI view to ensure that it's sized correctly. It redirects `IntrinsicContentSize` to the .NET MAUI view's `SizeThatFits` method, handling sizing and layout within the native iOS environment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nclass ContainerView : UIView\n{\n    public ContainerView(UIView view)\n    {\n        AddSubview(view);\n    }\n\n    public override CGSize IntrinsicContentSize =>\n        SizeThatFits(new CGSize(nfloat.MaxValue, nfloat.MaxValue));\n\n    public override CGSize SizeThatFits(CGSize size) =>\n        Subviews?.FirstOrDefault()?.SizeThatFits(size) ?? CGSize.Empty;\n\n    public override void LayoutSubviews()\n    {\n        if (Subviews?.FirstOrDefault() is { } view)\n            view.Frame = Bounds;\n    }\n\n    public override void SetNeedsLayout()\n    {\n        base.SetNeedsLayout();\n          InvalidateIntrinsicContentSize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker XAML Definition\nDESCRIPTION: Defines a TimePicker control in XAML. This TimePicker is later used as the source for a data binding example that accesses its Time.TotalSeconds property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<TimePicker x:Name=\"timePicker\">\n```\n\n----------------------------------------\n\nTITLE: Interpret specific assemblies using MtouchInterpreter\nDESCRIPTION: This snippet demonstrates the usage of the `$(MtouchInterpreter)` MSBuild property to specify assemblies to be interpreted, using a comma-separated list. The `all` keyword can be used to interpret all assemblies. Assemblies can be excluded from AOT compilation by prefixing their name with a minus sign.  This allows fine-grained control over which parts of the application use the interpreter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-ios')) and '$(Configuration)' == 'Release'\">\n    <!-- Interpret everything, except System.Xml.dll -->\n    <MtouchInterpreter>all,-System.Xml</MtouchInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configure Android App Bundle for Local Testing XML\nDESCRIPTION: Configures the *.csproj* file to use the Android App Bundle (AAB) package format for debugging, enabling local testing of asset packs. The `--local-testing` flag is added to `AndroidBundleToolExtraArgs` to use a mock downloader.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <AndroidPackageFormat>aab</AndroidPackageFormat>\n    <EmbedAssembliesIntoApk>true</EmbedAssembliesIntoApk>\n    <AndroidBundleToolExtraArgs>--local-testing</AndroidBundleToolExtraArgs>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: C#: Data Binding without BindingContext using SetBinding\nDESCRIPTION: Initializes the AlternativeCodeBindingPage and sets up a binding between the Label's Scale property and the Slider's Value property using the SetBinding method. The Slider instance is passed as the source, and a lambda expression is used to extract the Value from the slider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/basic-bindings.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class AlternativeCodeBindingPage : ContentPage\n{\n    public AlternativeCodeBindingPage()\n    {\n        InitializeComponent();\n\n        label.SetBinding(Label.ScaleProperty, static (Slider s) => s.Value, source: slider);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ContentProperty Attribute Definition\nDESCRIPTION: This C# code snippet illustrates the use of the ContentProperty attribute to define the default content property of a class. In this case, the Content property of the ContentPage class is marked as the default, which allows XAML content within the ContentPage tags to be automatically assigned to the Content property without explicitly specifying <ContentPage.Content>.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentProperty(\"Content\")]\npublic class ContentPage : TemplatedPage\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Localized App Name - Android C#\nDESCRIPTION: This C# code snippet shows how to set the `Label` property of the `Activity` attribute in the `MainActivity` class to use the localized app name defined in the Android resources. The `Label` is set to `@string/app_name`, which refers to the resource ID defined in the `Strings.xml` file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Activity(Label = \"@string/app_name\", Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Drag UI on Windows with C#\nDESCRIPTION: This code snippet shows how to customize the drag UI on Windows by accessing the native DragEventArgs. It disables the drag glyph and caption text that overlays the drag visual.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragOver(object sender, DragEventArgs e)\n{\n#if WINDOWS\n    var dragUI = e.PlatformArgs.DragEventArgs.DragUIOverride;\n    dragUI.IsCaptionVisible = false;\n    dragUI.IsGlyphVisible = false;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: xUnit Test Project File Example (csproj)\nDESCRIPTION: This XML snippet shows an example of a .csproj file for an xUnit test project. It defines the target framework, enables implicit usings and nullable reference types, and includes package references for xunit, xunit.runner.visualstudio, Microsoft.NET.Test.Sdk and coverlet.collector.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"coverlet.collector\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.5.3\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.3\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Using Include=\"Xunit\" />\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Scale Path using ScaleTransform in XAML\nDESCRIPTION: This example demonstrates how to scale a Path object to 1.5 times its original size using ScaleTransform in .NET MAUI XAML. It sets the ScaleX and ScaleY properties to 1.5 to enlarge the Path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <ScaleTransform CenterX=\"0\"\n                        CenterY=\"0\"\n                        ScaleX=\"1.5\"\n                        ScaleY=\"1.5\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Displaying an EmptyView string in XAML\nDESCRIPTION: This code snippet shows how to set the `EmptyView` property of a BindableLayout to a string, which is displayed when the `ItemsSource` property is null or empty. The `StackLayout` will display \"No achievements\" when the bound collection is null.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout BindableLayout.ItemsSource=\"{Binding UserWithoutAchievements.Achievements}\"\n             BindableLayout.EmptyView=\"No achievements\">\n    ...\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing IQueryAttributable in NotesViewModel C#\nDESCRIPTION: This snippet implements the `IQueryAttributable.ApplyQueryAttributes` method in the `NotesViewModel` class. It detects if the query string contains either the `deleted` or `saved` key, indicating a note was either deleted or saved from the Note viewmodel. It then either removes the deleted note from the `AllNotes` collection or updates/adds the saved note to the collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ApplyQueryAttributes(IDictionary<string, object> query)\n{\n    if (query.ContainsKey(\"deleted\"))\n    {\n        string noteId = query[\"deleted\"].ToString();\n        ViewModels.NoteViewModel matchedNote = AllNotes.Where((n) => n.Id == noteId).FirstOrDefault();\n\n        // If note exists, delete it\n        if (matchedNote != null)\n            AllNotes.Remove(matchedNote);\n    }\n    else if (query.ContainsKey(\"saved\"))\n    {\n        string noteId = query[\"saved\"].ToString();\n        ViewModels.NoteViewModel matchedNote = AllNotes.Where((n) => n.Id == noteId).FirstOrDefault();\n\n        // If note is found, update it\n        if (matchedNote != null)\n        {\n            matchedNote.Reload();\n            matchedNote.Update();\n        }\n        // If note isn't found, it's new; add it.\n        else\n            AllNotes.Add(new ViewModels.NoteViewModel(Models.Note.Load(noteId)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Clicked Event (<=net-maui-9.0)\nDESCRIPTION: This C# snippet defines an event handler for the Clicked event of a Button control. It displays an alert with the text of the button that was clicked. The method uses DisplayAlert to show a modal alert.  The 'sender' object is cast to a Button to access its Text property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnButtonClicked(object sender, EventArgs args)\n{\n    Button button = (Button)sender;\n    await DisplayAlert(\"Clicked!\", \"The button labeled '\" + button.Text + \"' has been clicked\", \"OK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Handler Class in .NET MAUI (C#)\nDESCRIPTION: Defines a partial handler class for the custom entry control, using conditional compilation to define the `PlatformView` type for different platforms. This handler will be completed on each platform with additional partial classes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#if IOS || MACCATALYST\nusing PlatformView = Microsoft.Maui.Platform.MauiTextField;\n#elif ANDROID\nusing PlatformView = AndroidX.AppCompat.Widget.AppCompatEditText;\n#elif WINDOWS\nusing PlatformView = Microsoft.UI.Xaml.Controls.TextBox;\n#elif (NETSTANDARD || !PLATFORM) || (NET6_0_OR_GREATER && !IOS && !ANDROID)\nusing PlatformView = System.Object;\n#endif\nusing MyMauiControl.Controls;\nusing Microsoft.Maui.Handlers;\n\nnamespace MyMauiControl.Handlers\n{\n    public partial class CustomEntryHandler\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Linear Gradient in C#\nDESCRIPTION: This code snippet demonstrates how to create a vertical linear gradient using the LinearGradientPaint class in .NET MAUI. It sets the start and end colors, sets the end point to (0,1) to make the gradient vertical, and then applies the gradient to fill a rounded rectangle with a shadow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nLinearGradientPaint linearGradientPaint = new LinearGradientPaint\n{\n    StartColor = Colors.Yellow,\n    EndColor = Colors.Green,\n    // StartPoint is already (0,0)\n    EndPoint = new Point(0, 1)\n};\n\nRectF linearRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(linearGradientPaint, linearRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(linearRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Instantiating List<string> with sys:String in .NET MAUI XAML\nDESCRIPTION: This example shows an alternative way to instantiate a `List<string>` in .NET MAUI XAML, using the CLR `String` type with the `sys` namespace prefix.  The `CollectionView.ItemsSource` property is set to this list, which is then initialized with string values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/generics.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=netstandard\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             ...>\n    <CollectionView>\n        <CollectionView.ItemsSource>\n            <scg:List x:TypeArguments=\"sys:String\">\n                <sys:String>Baboon</sys:String>\n                <sys:String>Capuchin Monkey</sys:String>\n                <sys:String>Blue Monkey</sys:String>\n                <sys:String>Squirrel Monkey</sys:String>\n                <sys:String>Golden Lion Tamarin</sys:String>\n                <sys:String>Howler Monkey</sys:String>\n                <sys:String>Japanese Macaque</sys:String>\n            </scg:List>\n        </CollectionView.ItemsSource>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Padding for Multiple Platforms .NET MAUI XAML\nDESCRIPTION: This snippet demonstrates how to set a single padding value for multiple platforms (iOS and Android) in .NET MAUI XAML using the OnPlatform and On classes. It uses the Platform property of the On class to specify multiple platforms separated by a comma.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"...\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\" Default=\"20\">\n            <On Platform=\"iOS, Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Scaling a .NET MAUI Image\nDESCRIPTION: This C# code demonstrates how to scale a .NET MAUI Image instance to twice its size over 2 seconds using the ScaleToAsync method. The animation scales the image from its current scale value to the specified value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.ScaleToAsync(2, 2000);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Text Data from DataPackage C#\nDESCRIPTION: This C# snippet demonstrates how to retrieve text data from the data package within the `Drop` event handler.  It uses the `GetTextAsync` method of the `DataPackageView` class to asynchronously retrieve the text. The retrieved text can then be used for further processing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnDrop(object sender, DropEventArgs e)\n{\n    string text = await e.Data.GetTextAsync();\n\n    // Perform logic to take action based on the text value.\n}\n```\n\n----------------------------------------\n\nTITLE: Styling FlyoutItem and MenuItem Objects (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to style FlyoutItem and MenuItem objects using style classes in a .NET MAUI Shell application. It defines styles for Label, Image, and Layout elements with specific TextColor, HeightRequest, Aspect, and BackgroundColor properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<Style TargetType=\"Label\"\n       Class=\"FlyoutItemLabelStyle\">\n    <Setter Property=\"TextColor\"\n            Value=\"Black\" />\n    <Setter Property=\"HeightRequest\"\n            Value=\"100\" />\n</Style>\n\n<Style TargetType=\"Image\"\n       Class=\"FlyoutItemImageStyle\">\n    <Setter Property=\"Aspect\"\n            Value=\"Fill\" />\n</Style>\n\n<Style TargetType=\"Layout\"\n       Class=\"FlyoutItemLayoutStyle\"\n       ApplyToDerivedTypes=\"True\">\n    <Setter Property=\"BackgroundColor\"\n            Value=\"Teal\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Disabling image packaging in .NET MAUI\nDESCRIPTION: This XML snippet shows how to disable image resource packaging in a .NET MAUI project. By setting the `EnableMauiImageProcessing` property to `false` within the first `PropertyGroup` node of the project file, image resources won't be processed during the build.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<EnableMauiImageProcessing>false</EnableMauiImageProcessing>\n```\n\n----------------------------------------\n\nTITLE: Define Notification Service Interface C#\nDESCRIPTION: This code defines the `INotificationService` interface, which outlines the contract for a service responsible for managing device installations and sending push notifications. It includes methods for creating/updating installations, deleting installations, and requesting notifications. This interface promotes loose coupling and allows for different implementations of the notification service. This interface is part of the `PushNotificationsAPI.Services` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsAPI.Models;\n\nnamespace PushNotificationsAPI.Services;\n\npublic interface INotificationService\n{\n    Task<bool> CreateOrUpdateInstallationAsync(DeviceInstallation deviceInstallation, CancellationToken token);\n    Task<bool> DeleteInstallationByIdAsync(string installationId, CancellationToken token);\n    Task<bool> RequestNotificationAsync(NotificationRequest notificationRequest, CancellationToken token);\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Navigation Bar Visibility - XAML\nDESCRIPTION: Disables the navigation bar on a ContentPage using the `Shell.NavBarIsVisible` attached property. Setting this property to `false` makes the navigation bar invisible.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             Shell.NavBarIsVisible=\"false\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Get Hyper-V Status (PowerShell)\nDESCRIPTION: These PowerShell commands check if the Hyper-V feature is enabled on the system. They are used to diagnose Hyper-V related issues that can prevent the Android Emulator from functioning correctly with hardware acceleration. This is a common cause of performance problems.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online\n```\n\n----------------------------------------\n\nTITLE: Legacy Secure Storage Usage C#\nDESCRIPTION: This C# code demonstrates how to use the `LegacySecureStorage` class to read and remove data from Xamarin.Forms secure storage and then write that data to .NET MAUI secure storage. It retrieves a username, removes it from legacy storage, and then saves it using the .NET MAUI `SecureStorage` API. This snippet is conditionally compiled for Android and iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/secure-storage.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n#if ANDROID || IOS\nusing MigrationHelpers;\n...\n\nstring username = await LegacySecureStorage.GetAsync(\"username\");\nbool result = LegacySecureStorage.Remove(\"username\");\nawait SecureStorage.SetAsync(\"username\", username);\n#endif\n```\n\n----------------------------------------\n\nTITLE: LegacyPreferences Implementation for Android in C#\nDESCRIPTION: This code snippet shows the LegacyPreferences implementation for the Android platform.  It uses Android's SharedPreferences to store and retrieve data. The class provides methods to check if a key exists, remove a key, and get a value by key. The implementation uses a locker to ensure thread safety.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Globalization;\nusing Android.Content;\nusing Android.Preferences;\nusing Application = Android.App.Application;\n\nnamespace MigrationHelpers;\n\npublic static partial class LegacyPreferences\n{\n    static readonly object locker = new object();\n\n    static bool PlatformContainsKey(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            using (var sharedPreferences = GetSharedPreferences(sharedName))\n            {\n                return sharedPreferences.Contains(key);\n            }\n        }\n    }\n\n    static void PlatformRemove(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            using (var sharedPreferences = GetSharedPreferences(sharedName))\n            using (var editor = sharedPreferences.Edit())\n            {\n                editor.Remove(key).Apply();\n            }\n        }\n    }\n\n    static T PlatformGet<T>(string key, T defaultValue, string sharedName)\n    {\n        lock (locker)\n        {\n            object value = null;\n            using (var sharedPreferences = GetSharedPreferences(sharedName))\n            {\n                if (defaultValue == null)\n                {\n                    value = sharedPreferences.GetString(key, null);\n                }\n                else\n                {\n                    switch (defaultValue)\n                    {\n                        case int i:\n                            value = sharedPreferences.GetInt(key, i);\n                            break;\n                        case bool b:\n                            value = sharedPreferences.GetBoolean(key, b);\n                            break;\n                        case long l:\n                            value = sharedPreferences.GetLong(key, l);\n                            break;\n                        case double d:\n                            var savedDouble = sharedPreferences.GetString(key, null);\n                            if (string.IsNullOrWhiteSpace(savedDouble))\n                            {\n                                value = defaultValue;\n                            }\n                            else\n                            {\n                                if (!double.TryParse(savedDouble, NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.InvariantCulture, out var outDouble))\n                                {\n                                    var maxString = Convert.ToString(double.MaxValue, CultureInfo.InvariantCulture);\n                                    outDouble = savedDouble.Equals(maxString) ? double.MaxValue : double.MinValue;\n                                }\n\n                                value = outDouble;\n                            }\n                            break;\n                        case float f:\n                            value = sharedPreferences.GetFloat(key, f);\n                            break;\n                        case string s:\n                            // the case when the string is not null\n                            value = sharedPreferences.GetString(key, s);\n                            break;\n                    }\n                }\n            }\n\n            return (T)value;\n        }\n    }\n\n    static ISharedPreferences GetSharedPreferences(string sharedName)\n    {\n        var context = Application.Context;\n\n        return string.IsNullOrWhiteSpace(sharedName) ?\n#pragma warning disable CS0618 // Type or member is obsolete\n            PreferenceManager.GetDefaultSharedPreferences(context) :\n#pragma warning restore CS0618 // Type or member is obsolete\n                context.GetSharedPreferences(sharedName, FileCreationMode.Private);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UI Layout with XAML\nDESCRIPTION: Defines the UI layout in XAML with two buttons: Register and Deregister.  These buttons trigger the registration and deregistration processes for push notifications. The layout is a simple vertical stack layout with specified margins and spacing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_30\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout Margin=\"20\"\n                     Spacing=\"6\">\n    <Button x:Name=\"registerButton\"\n            Text=\"Register\"\n            Clicked=\"OnRegisterButtonClicked\" />\n    <Button x:Name=\"deregisterButton\"\n            Text=\"Deregister\"\n            Clicked=\"OnDeregisterButtonClicked\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Network Access Permission\nDESCRIPTION: This code snippet shows how to update the AndroidManifest.xml file to include the ACCESS_NETWORK_STATE permission. This allows the application to access information about the device's network state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/networking.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Android emulator components on macOS\nDESCRIPTION: These commands install the Android emulator and a specific system image for Android 35 (Android 14) using the `sdkmanager` tool.  The emulator allows testing apps without a physical device. The system image provides the Android OS environment for the emulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n./sdkmanager --install emulator\n./sdkmanager --install \"system-images;android-35;google_apis;arm64-v8a\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Play Filtering for Camera Features - Android\nDESCRIPTION: This code snippet shows how to disable Google Play filtering for devices without specific camera hardware features. This is achieved by adding assembly attributes to the MainApplication.cs file, setting the 'Required' property to 'false'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/flashlight.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesFeature(\"android.hardware.camera\", Required = false)]\n[assembly: UsesFeature(\"android.hardware.camera.autofocus\", Required = false)]\n```\n\n----------------------------------------\n\nTITLE: Build .NET MAUI Mac Catalyst App (dotnet CLI)\nDESCRIPTION: This command builds a .NET MAUI application for the Mac Catalyst target framework in Release mode. It uses the dotnet CLI to execute the build process. The resulting package (*.pkg*) will be located in the publish folder within the bin/Release/net8.0-maccatalyst directory.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-ad-hoc.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet build -f net8.0-maccatalyst -c Release\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function as a Func in .NET MAUI\nDESCRIPTION: This code defines a custom easing function as a Func<double, double>. The CustomEaseFunc represents an easing function that starts fast, slows down, reverses course, and then reverses course again. The animation temporarily reverses direction. It requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet10.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nFunc<double, double> CustomEaseFunc = t => 9 * t * t * t - 13.5 * t * t + 5.5 * t;\nawait image.TranslateToAsync(0, 200, 2000, CustomEaseFunc);\n```\n\n----------------------------------------\n\nTITLE: Resolving INotificationRegistrationService C#\nDESCRIPTION: Resolves the `INotificationRegistrationService` implementation in the `MainPage` constructor using dependency injection and assigns it to the `_notificationRegistrationService` backing field. This ensures that the `MainPage` has access to the notification registration service implementation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\npublic MainPage(INotificationRegistrationService service)\n{\n    InitializeComponent();\n\n    _notificationRegistrationService = service;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Maui.Controls Package Reference (XML)\nDESCRIPTION: This snippet shows how to add a `PackageReference` build item to the project file for the `Microsoft.Maui.Controls` NuGet package. This includes the core .NET MAUI controls in the project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Registering Services for Dependency Injection - C#\nDESCRIPTION: This extension method registers the `DeviceInstallationService` (platform-specific), `PushDemoNotificationActionService`, and `NotificationRegistrationService` with the dependency injection container. It uses conditional compilation (`#if IOS`, `#elif ANDROID`) to register the correct platform-specific implementation of `IDeviceInstallationService`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\npublic static MauiAppBuilder RegisterServices(this MauiAppBuilder builder)\n    {\n    #if IOS\n        builder.Services.AddSingleton<IDeviceInstallationService, PushNotificationsDemo.Platforms.iOS.DeviceInstallationService>();\n    #elif ANDROID\n        builder.Services.AddSingleton<IDeviceInstallationService, PushNotificationsDemo.Platforms.Android.DeviceInstallationService>();\n    #endif\n\n        builder.Services.AddSingleton<IPushDemoNotificationActionService, PushDemoNotificationActionService>();\n        builder.Services.AddSingleton<INotificationRegistrationService>(new NotificationRegistrationService(Config.BackendServiceEndpoint, Config.ApiKey));\n\n        return builder;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using x:Array Markup Extension in XAML\nDESCRIPTION: This XAML code demonstrates the use of the `x:Array` markup extension to define an array of `Color` objects within the `ListView.ItemsSource`. This array is then used to populate the `ListView` with a series of `BoxView` elements, each colored according to the corresponding `Color` value in the array.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MarkupExtensions.ArrayDemoPage\"\n             Title=\"x:Array Demo Page\">\n    <ListView Margin=\"10\">\n        <ListView.ItemsSource>\n            <x:Array Type=\"{x:Type Color}\">\n                <Color>Aqua</Color>\n                <Color>Black</Color>\n                <Color>Blue</Color>\n                <Color>Fuchsia</Color>\n                <Color>Gray</Color>\n                <Color>Green</Color>\n                <Color>Lime</Color>\n                <Color>Maroon</Color>\n                <Color>Navy</Color>\n                <Color>Olive</Color>\n                <Color>Pink</Color>\n                <Color>Purple</Color>\n                <Color>Red</Color>\n                <Color>Silver</Color>\n                <Color>Teal</Color>\n                <Color>White</Color>\n                <Color>Yellow</Color>\n            </x:Array>\n        </ListView.ItemsSource>\n        <ListView.ItemTemplate>\n            <DataTemplate x:DataType=\"Color\">\n                <ViewCell>\n                    <BoxView Color=\"{Binding}\"\n                             Margin=\"3\" />\n                </ViewCell>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>  \n```\n\n----------------------------------------\n\nTITLE: Setting App Category in Info.plist XML\nDESCRIPTION: This XML snippet shows how to set the app's primary category in the Info.plist file. The `LSApplicationCategoryType` key is used to specify the category.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-app-store.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationCategoryType</key>\n<string>public.app-category.utilities</string>\n```\n\n----------------------------------------\n\nTITLE: Configure Launch Settings for MSIX Package in .NET MAUI (JSON)\nDESCRIPTION: This JSON snippet configures the launch settings for a .NET MAUI Windows app to use an MSIX package. It changes the `commandName` from `Project` to `MsixPackage`, which is necessary for deploying and debugging the app as a packaged application. This configuration is located in the `Properties/launchSettings.json` file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/includes/convert-unpackaged-to-packaged.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"profiles\": {\n    \"Windows Machine\": {\n      \"commandName\": \"MsixPackage\",\n      \"nativeDebugging\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting for Windows\nDESCRIPTION: This XML snippet configures the build system to exclude Windows-specific C# files (those ending with .Windows.cs) when not building for Windows. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Windows -->\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true\">\n  <Compile Remove=\"**\\*.Windows.cs\" />\n  <None Include=\"**\\*.Windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Query Certificate Store with PowerShell\nDESCRIPTION: This PowerShell script queries the certificate store and displays the thumbprint, subject, and friendly name of the certificates. This is used to retrieve the thumbprint of the newly created self-signed certificate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-cli.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem \"Cert:\\CurrentUser\\My\" | Format-Table Thumbprint, Subject, FriendlyName\n```\n\n----------------------------------------\n\nTITLE: List iOS Simulators with simctl\nDESCRIPTION: This command lists available iOS simulators using the `simctl list` command, which is part of the Xcode command-line tools. It's used to retrieve UDIDs for specific simulators.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/cli.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n/Applications/Xcode.app/Contents/Developer/usr/bin/simctl list\n```\n\n----------------------------------------\n\nTITLE: Styling TabBar Colors using XAML Style in .NET MAUI\nDESCRIPTION: This XAML style demonstrates how to customize the background color, title color, and unselected color of the TabBar in a .NET MAUI Shell application. It sets the `Shell.TabBarBackgroundColor`, `Shell.TabBarTitleColor`, and `Shell.TabBarUnselectedColor` properties using a style targeting the `TabBar` type.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"TabBar\">\n    <Setter Property=\"Shell.TabBarBackgroundColor\"\n            Value=\"CornflowerBlue\" />\n    <Setter Property=\"Shell.TabBarTitleColor\"\n            Value=\"Black\" />\n    <Setter Property=\"Shell.TabBarUnselectedColor\"\n            Value=\"AntiqueWhite\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Create ActivityIndicator in C#\nDESCRIPTION: This C# code snippet demonstrates how to create an ActivityIndicator programmatically and start its animation. An ActivityIndicator object is instantiated, and its IsRunning property is set to true.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/activityindicator.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nActivityIndicator activityIndicator = new ActivityIndicator { IsRunning = true };\n```\n\n----------------------------------------\n\nTITLE: Setting RefreshView pull direction in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `RefreshPullDirection` property of a `RefreshView` to `LeftToRight`. This will change the pull direction to left-to-right on Windows, enabling a refresh when the user swipes from left to right. It requires the inclusion of the `windows` namespace to access the Windows-specific properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/refreshview-pulldirection.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:PlatformSpecifics\"\n             xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\"\n             x:DataType=\"local:WindowsRefreshViewPageViewModel\">\n    <RefreshView windows:RefreshView.RefreshPullDirection=\"LeftToRight\"\n                 IsRefreshing=\"{Binding IsRefreshing}\"\n                 Command=\"{Binding RefreshCommand}\">\n        <ScrollView>\n            ...\n        </ScrollView>\n    </RefreshView>\n </ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Border Color CSS in .NET MAUI\nDESCRIPTION: Sets the border color for .NET MAUI Border, Button, Frame, and ImageButton.  The value should be a color or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\nborder-color: #9acd32;\n```\n\n----------------------------------------\n\nTITLE: Set ItemsUpdatingScrollMode in C#\nDESCRIPTION: This C# code snippet shows how to set the `ItemsUpdatingScrollMode` property to `KeepLastItemInView` programmatically.  This ensures that the last item in the list is displayed when new items are added to the CarouselView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ItemsUpdatingScrollMode = ItemsUpdatingScrollMode.KeepLastItemInView\n};\n```\n\n----------------------------------------\n\nTITLE: Composite Transform XAML Example\nDESCRIPTION: This XAML snippet demonstrates how to apply a composite transform to a Path object in .NET MAUI. It scales the path by a factor of 1.5, rotates it by 45 degrees, and translates it by 50 device-independent units along both the X and Y axes. This is achieved using the CompositeTransform element within the Path.RenderTransform property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <CompositeTransform ScaleX=\"1.5\"\n                            ScaleY=\"1.5\"\n                            Rotation=\"45\"\n                            TranslateX=\"50\"\n                            TranslateY=\"50\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Get Current Geolocation with CancellationToken - C#\nDESCRIPTION: This C# code snippet demonstrates how to retrieve the device's current location using the `IGeolocation.GetLocationAsync` method. It configures a `GeolocationRequest` for desired accuracy and uses a `CancellationToken` to allow for cancellation of the location request, providing a way to handle long-running location queries and user cancellation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n        private async Task GetCurrentLocation()\n        {\n            try\n            {\n                GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Medium, TimeSpan.FromSeconds(10));\n                CancellationTokenSource _cancelTokenSource = new CancellationTokenSource();\n                CancellationToken token = _cancelTokenSource.Token;\n\n                var location = await Geolocation.Default.GetLocationAsync(request, token);\n\n\n                if (location != null)\n                    UpdateLocationDisplay(location);\n            }\n            catch (Exception ex)\n            {\n                 // Unable to get location\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Using TargetNullValue\nDESCRIPTION: This XAML snippet demonstrates the use of TargetNullValue to display a specific value when the bound property (FirstName) is null. The Label will display \"No name available\" in such cases.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding FirstName, TargetNullValue='No name available'}\" />\n```\n\n----------------------------------------\n\nTITLE: Configure iOS/Mac Catalyst Info.plist for Email\nDESCRIPTION: This XML snippet shows how to configure the Info.plist file for iOS and Mac Catalyst to declare the mailto scheme as one that the application intends to query.  This is required by Apple to declare the schemes you want to use.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/email.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>mailto</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Define INotificationRegistrationService Interface C#\nDESCRIPTION: Defines an interface for a service that handles device registration and deregistration for push notifications. It includes methods for registering, deregistering, and refreshing the device registration with the backend service. This service facilitates communication with the backend for push notification management.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsDemo.Services;\n\npublic interface INotificationRegistrationService\n{\n    Task DeregisterDeviceAsync();\n    Task RegisterDeviceAsync(params string[] tags);\n    Task RefreshRegistrationAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with Lazy<T> in C#\nDESCRIPTION: This code snippet demonstrates how to use the `Lazy<T>` class to defer the initialization of an expensive object until it is actually needed. This can improve performance by avoiding unnecessary computation and reducing memory usage. The `dataRequired` parameter controls whether the lazy-initialized value will be accessed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ProcessData(bool dataRequired = false)\n{\n    Lazy<double> data = new Lazy<double>(() =>\n    {\n        return ParallelEnumerable.Range(0, 1000)\n                     .Select(d => Compute(d))\n                     .Aggregate((x, y) => x + y);\n    });\n\n    if (dataRequired)\n    {\n        if (data.Value > 90)\n        {\n            ...\n        }\n    }\n}\n\ndouble Compute(double x)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Color Resource\nDESCRIPTION: This XAML snippet demonstrates how to define a platform-specific color resource using the `OnPlatform` class within a resource dictionary. Different color values are defined for iOS and Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<OnPlatform x:Key=\"textColor\"\n            x:TypeArguments=\"Color\">\n    <On Platform=\"iOS\" Value=\"Red\" />\n    <On Platform=\"Android\" Value=\"Aqua\" />\n</OnPlatform>\n```\n\n----------------------------------------\n\nTITLE: Get Hypervisor Platform Status (PowerShell)\nDESCRIPTION: These PowerShell commands check if the Windows Hypervisor Platform feature is enabled on the system. They are used to diagnose Hypervisor Platform related issues that can prevent the Android Emulator from functioning correctly with hardware acceleration. This is a common cause of performance problems.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-WindowsOptionalFeature -FeatureName HypervisorPlatform -Online\n```\n\n----------------------------------------\n\nTITLE: Declare Namespace for Types in External Assembly\nDESCRIPTION: Declares a namespace for types residing in a separate assembly (MyControlLibrary). The `clr-namespace` specifies the CLR namespace (Controls), and `assembly` specifies the assembly name.  This enables usage of controls from external libraries in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/index.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ... xmlns:controls=\"clr-namespace:Controls;assembly=MyControlLibrary\" ...>\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Colors with XAML Style in .NET MAUI Shell\nDESCRIPTION: This XAML snippet shows how to define a XAML style to set the color properties for elements within a .NET MAUI Shell application.  This allows for re-usable styling across multiple pages or elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"DomesticShell\"\n       TargetType=\"Element\" >\n    <Setter Property=\"Shell.BackgroundColor\"\n            Value=\"#039BE6\" />\n    <Setter Property=\"Shell.ForegroundColor\"\n            Value=\"White\" />\n    <Setter Property=\"Shell.TitleColor\"\n            Value=\"White\" />\n    <Setter Property=\"Shell.DisabledColor\"\n            Value=\"#B4FFFFFF\" />\n    <Setter Property=\"Shell.UnselectedColor\"\n            Value=\"#95FFFFFF\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting Handler Disconnect Policy in C#\nDESCRIPTION: This C# code demonstrates how to set the `HandlerProperties.DisconnectPolicy` attached property to `Manual` for a `Video` control programmatically.  This achieves the same effect as the XAML example, preventing automatic handler disconnection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nVideo video = new Video\n{\n    Source = \"video.mp4\",\n    AutoPlay = false\n};\nHandlerProperties.SetDisconnectPolicy(video, HandlerDisconnectPolicy.Manual);\n```\n\n----------------------------------------\n\nTITLE: Define INotificationManagerService Interface (C#)\nDESCRIPTION: Defines a cross-platform interface for sending and receiving local notifications. This interface allows a .NET MAUI app to interact with local notifications without needing platform-specific code in the main application logic. It defines the `NotificationReceived` event, the `SendNotification` method for sending notifications, and the `ReceiveNotification` method for processing received notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface INotificationManagerService\n{\n    event EventHandler NotificationReceived;\n    void SendNotification(string title, string message, DateTime? notifyTime = null);\n    void ReceiveNotification(string title, string message);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding TimePicker Time to ViewModel in XAML\nDESCRIPTION: This XAML snippet shows how to bind the TimePicker's `Time` property to a `SelectedTime` property in a ViewModel. The `Time` property uses `BindingMode.TwoWay`, so changes in the TimePicker update the ViewModel and vice versa.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/timepicker.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<TimePicker Time=\"{Binding SelectedTime}\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Trimming in .NET XML\nDESCRIPTION: This XML snippet demonstrates how to opt into full trimming in a .NET project by setting the `$(TrimMode)` property to `Full` in the project file. Full trimming reduces the size of the application by removing unused code. This is enabled by setting `<TrimMode>Full</TrimMode>`, which removes unused code, but requires careful attention to trim warnings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TrimMode>Full</TrimMode>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating an Android emulator on Windows\nDESCRIPTION: This command creates a new Android Virtual Device (AVD) named 'MyAndroidVirtualDevice-API35' using the `avdmanager` tool, based on the specified system image. An AVD allows running an Android emulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\navdmanager create avd -n MyAndroidVirtualDevice-API35 -k \"system-images;android-35;google_apis;x86_64\"\n```\n\n----------------------------------------\n\nTITLE: Start Compass with Lowpass Filter - Android\nDESCRIPTION: This C# code snippet shows how to start the compass sensor in .NET MAUI, applying a low-pass filter on the Android platform to smooth out sensor readings. The `Compass.Default.Start` method is called with the `SensorSpeed.UI` and `applyLowPassFilter: true` parameters. This is only applied on the Android platform, and the parameter is ignored on iOS and Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCompass.Default.Start(SensorSpeed.UI, applyLowPassFilter: true);\n```\n\n----------------------------------------\n\nTITLE: Optimize Wasteful Layouts XAML\nDESCRIPTION: This example optimizes the previous layout by removing the unnecessary VerticalStackLayout element, directly placing the Image within the ContentPage. This reduces layout calculations and improves performance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <Image Source=\"waterfront.jpg\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Update AssetPack Metadata in .NET MAUI\nDESCRIPTION: This XML snippet shows how to update the `AssetPack` metadata for a specific item, `myvideo.mp4`, within a .NET MAUI project, placing it in the `myassets` asset pack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Update=\"Resources\\Raw\\myvideo.mp4\" AssetPack=\"myassets\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper - Exception Case - C#\nDESCRIPTION: This C# code snippet demonstrates a scenario that throws an exception when initializing a Stepper control because the Minimum property is set to a value greater than the default Maximum value before Maximum is explicitly set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Throws an exception!\nStepper stepper = new Stepper\n{\n    Minimum = 180,\n    Maximum = 360\n};\n```\n\n----------------------------------------\n\nTITLE: LegacyPreferences Implementation for iOS in C#\nDESCRIPTION: This code snippet shows the LegacyPreferences implementation for the iOS platform using C#. It uses NSUserDefaults to store and retrieve data. The class provides methods to check if a key exists, remove a key, and get a value by key. The implementation uses a locker to ensure thread safety.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Foundation;\nusing System.Globalization;\n\nnamespace MigrationHelpers;\n\npublic static partial class LegacyPreferences\n{\n    static readonly object locker = new object();\n\n    static bool PlatformContainsKey(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            return GetUserDefaults(sharedName)[key] != null;\n        }\n    }\n\n    static void PlatformRemove(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            using (var userDefaults = GetUserDefaults(sharedName))\n            {\n                if (userDefaults[key] != null)\n                    userDefaults.RemoveObject(key);\n            }\n        }\n    }\n\n    static T PlatformGet<T>(string key, T defaultValue, string sharedName)\n    {\n        object value = null;\n\n        lock (locker)\n        {\n            using (var userDefaults = GetUserDefaults(sharedName))\n            {\n                if (userDefaults[key] == null)\n                    return defaultValue;\n\n                switch (defaultValue)\n                {\n                    case int i:\n                        value = (int)(nint)userDefaults.IntForKey(key);\n                        break;\n                    case bool b:\n                        value = userDefaults.BoolForKey(key);\n                        break;\n                    case long l:\n                        var savedLong = userDefaults.StringForKey(key);\n                        value = Convert.ToInt64(savedLong, CultureInfo.InvariantCulture);\n                        break;\n                    case double d:\n                        value = userDefaults.DoubleForKey(key);\n                        break;\n                    case float f:\n                        value = userDefaults.FloatForKey(key);\n                        break;\n                    case string s:\n                        // the case when the string is not null\n                        value = userDefaults.StringForKey(key);\n                        break;\n                    default:\n                        // the case when the string is null\n                        if (typeof(T) == typeof(string))\n                            value = userDefaults.StringForKey(key);\n                        break;\n                }\n            }\n        }\n\n        return (T)value;\n    }\n\n    static NSUserDefaults GetUserDefaults(string sharedName)\n    {\n        if (!string.IsNullOrWhiteSpace(sharedName))\n            return new NSUserDefaults(sharedName, NSUserDefaultsType.SuiteName);\n        else\n            return NSUserDefaults.StandardUserDefaults;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Explicit Style in .NET MAUI XAML\nDESCRIPTION: This code defines an explicit style named `labelStyle` for Label elements in XAML. It sets the HorizontalOptions, VerticalOptions, and FontSize properties. The style is applied by referencing its `x:Key` using `StaticResource`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"labelStyle\" TargetType=\"Label\">\n    <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n    <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    <Setter Property=\"FontSize\" Value=\"18\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Override OnAppLinkRequestReceived in .NET MAUI App (C#) - net10.0+\nDESCRIPTION: This code snippet shows how to override the `OnAppLinkRequestReceived` method in the .NET MAUI `App` class to handle universal links. This version is for net10.0+ and uses DisplayAlertAsync. It receives a `Uri` object containing the URL from the universal link and displays an alert with the URL for testing purposes. In a real application, this method should navigate the user to the content represented by the URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNamespace;\n\npublic partial class App : Application\n{\n    ...\n\n    protected override async void OnAppLinkRequestReceived(Uri uri)\n    {\n        base.OnAppLinkRequestReceived(uri);\n\n        // Show an alert to test that the app link was received.\n        await Dispatcher.DispatchAsync(async () =>\n        {\n            await Windows[0].Page!.DisplayAlertAsync(\"App link received\", uri.ToString(), \"OK\");\n        });\n\n        Console.WriteLine(\"App link: \" + uri.ToString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Android Emulator from Command Line\nDESCRIPTION: This command starts the Android Emulator from the command line, allowing you to view its output directly. This can be helpful for diagnosing issues that are not immediately apparent when launching the emulator from within Visual Studio.  Modify the path and AVD name as needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n\"C:\\\\Program Files (x86)\\\\Android\\\\android-sdk\\\\emulator\\\\emulator.exe\" -partition-size 2000 -no-boot-anim -verbose -feature WindowsHypervisorPlatform -avd pixel_5_-_api_30 -prop monodroid.avdname=pixel_5_-_api_30\n```\n\n----------------------------------------\n\nTITLE: Formatting Strings with MultiBinding C#\nDESCRIPTION: This C# code demonstrates how to create a MultiBinding with a StringFormat to combine the values of multiple bindings. It then binds the combined string to the TextProperty of a Label. The Binding.Create method simplifies creating the individual bindings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/multibinding.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label = new Label();\nlabel.SetBinding(Label.TextProperty, new MultiBinding\n{\n    Bindings = new Collection<BindingBase>\n    {\n        Binding.Create(static (GroupViewModel vm) => vm.Employee1.Forename),\n        Binding.Create(static (GroupViewModel vm) => vm.Employee1.MiddleName),\n        Binding.Create(static (GroupViewModel vm) => vm.Employee1.Surname)\n    },\n    StringFormat = \"{0} {1} {2}\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting for iOS and MacCatalyst\nDESCRIPTION: This XML snippet configures the build system to exclude iOS and MacCatalyst-specific C# files (those ending with .MaciOS.cs) when not building for either iOS or MacCatalyst. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Both iOS and Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true AND $(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MaciOS.cs\" />\n  <None Include=\"**\\*.MaciOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enable RTL support in Android Manifest (XML)\nDESCRIPTION: This XML snippet shows how to enable right-to-left (RTL) support in the AndroidManifest.xml file by setting the `android:supportsRtl` attribute to `true` within the `<application>` node. This allows the Android app to correctly display layouts and text in right-to-left languages.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application ... android:supportsRtl=\"true\" />\n    ...\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Method for Addition\nDESCRIPTION: This Javascript code defines a simple function named AddNumbers that takes two arguments a and b, adds them together, and returns the result.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction AddNumbers(a, b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnItemClicked Event Handler\nDESCRIPTION: This C# code shows the implementation of the OnItemClicked event handler. It retrieves the MenuItem that raised the event and accesses the associated list item through the BindingContext property. This allows performing actions based on the clicked menu item and its associated data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menuitem.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnItemClicked(object sender, EventArgs e)\n{\n    MenuItem menuItem = sender as MenuItem;\n\n    // Access the list item through the BindingContext\n    var contextItem = menuItem.BindingContext;\n\n    // Do something with the contextItem here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Function in HTML\nDESCRIPTION: This HTML code defines a JavaScript function named 'factorial' that calculates the factorial of a given number. The function handles base cases for 0 and 1, and then iteratively calculates the factorial for numbers greater than 1. The script is embedded within a basic HTML structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<body>\n<script type=\"text/javascript\">\nfunction factorial(num) {\n        if (num === 0 || num === 1)\n            return 1;\n        for (var i = num - 1; i >= 1; i--) {\n            num *= i;\n        }\n        return num;\n}\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Check Hyper-V Support using systeminfo Command (cmd)\nDESCRIPTION: This command is used to verify if the computer meets the requirements for running Hyper-V. It checks for hardware and software compatibility, including CPU features like VT-x, EPT, and UG, and the Windows version. The output lists Hyper-V requirements, indicating whether each is met with 'Yes' or 'No'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/hardware-acceleration.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nsysteminfo\n```\n\n----------------------------------------\n\nTITLE: Display View Header and Footer in ListView (XAML)\nDESCRIPTION: Demonstrates how to display custom views in the Header and Footer of a ListView, enabling more complex layouts.  The example uses Grid and Label for the header and footer.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_18\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\">\n    <ListView.Header>\n        <Grid BackgroundColor=\"LightGray\">\n            <Label Margin=\"10,0,0,0\"\n                   Text=\"Monkeys\"\n                   FontSize=\"12\"\n                   FontAttributes=\"Bold\" />\n        </Grid>\n    </ListView.Header>\n    <ListView.Footer>\n        <Grid BackgroundColor=\"LightGray\">\n            <Label Margin=\"10,0,0,0\"\n                   Text=\"Friends of Monkey\"\n                   FontSize=\"12\"\n                   FontAttributes=\"Bold\" />\n        </Grid>\n    </ListView.Footer>\n    ...\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Text Alignment (Justify) - XAML\nDESCRIPTION: This XAML snippet illustrates the use of `HorizontalTextAlignment.Justify` to justify text within a Label control. The text will be aligned to both the left and right edges of the control, distributing spaces between words to achieve this alignment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In facilisis nulla eu felis fringilla vulputate.\"\n       HorizontalTextAlignment=\"Justify\"/>\n```\n\n----------------------------------------\n\nTITLE: Set CheckBox IsChecked property in XAML\nDESCRIPTION: This code snippet demonstrates how to create a CheckBox in XAML and set its IsChecked property to true, which means the CheckBox is checked by default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox IsChecked=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Define DeviceOrientation Enum for Partial Methods C#\nDESCRIPTION: Defines an enumeration named `DeviceOrientation` with values for `Undefined`, `Landscape`, and `Portrait`. This enum represents the orientation of a device and is used across different platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InvokePlatformCodeDemos.Services\n{\n    public enum DeviceOrientation\n    {\n        Undefined,\n        Landscape,\n        Portrait\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ListView Selection in XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable item selection in a ListView by setting the SelectionMode property to None.  When selection is disabled, the ItemSelected event will not be fired, and the SelectedItem property will remain null.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ...\n          SelectionMode=\"None\" />\n```\n\n----------------------------------------\n\nTITLE: Clearing Clipboard Text .NET MAUI C#\nDESCRIPTION: Demonstrates clearing the system clipboard by setting its content to null using the IClipboard.SetTextAsync method. This removes any existing text data from the clipboard.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/clipboard.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Clear the clipboard\nawait Clipboard.Default.SetTextAsync(null);\n```\n\n----------------------------------------\n\nTITLE: Calling factory methods in XAML\nDESCRIPTION: Illustrates how to use the x:FactoryMethod attribute to call static factory methods of the Microsoft.Maui.Graphics.Color class, such as FromRgba, FromHsla, and FromHex. The x:Arguments attribute is used to supply the arguments required by each factory method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/pass-arguments.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n  <BoxView.Color>\n    <Color x:FactoryMethod=\"FromRgba\">\n      <x:Arguments>\n        <x:Byte>192</x:Byte>\n        <x:Byte>75</x:Byte>\n        <x:Byte>150</x:Byte>\n        <x:Byte>128</x:Byte>\n      </x:Arguments>\n    </Color>\n  </BoxView.Color>\n</BoxView>\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n  <BoxView.Color>\n    <Color x:FactoryMethod=\"FromHsla\">\n      <x:Arguments>\n        <x:Double>0.23</x:Double>\n        <x:Double>0.42</x:Double>\n        <x:Double>0.69</x:Double>\n        <x:Double>0.7</x:Double>\n      </x:Arguments>\n    </Color>\n  </BoxView.Color>\n</BoxView>\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n  <BoxView.Color>\n    <Color x:FactoryMethod=\"FromHex\">\n      <x:Arguments>\n        <x:String>#FF048B9A</x:String>\n      </x:Arguments>\n    </Color>\n  </BoxView.Color>\n</BoxView>\n```\n\n----------------------------------------\n\nTITLE: Visibility CSS in .NET MAUI\nDESCRIPTION: Sets the visibility of a .NET MAUI VisualElement. Valid values are true, visible, false, hidden, collapse, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_57\n\nLANGUAGE: CSS\nCODE:\n```\nvisibility: hidden;\n```\n\n----------------------------------------\n\nTITLE: Using Different App Icons per Platform in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to use different app icon resources or settings per platform in a .NET MAUI project.  The `Condition` attribute is used to query for the specific target platform, and a fallback icon without a condition is provided for other platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <!-- App icon for Windows -->\n    <MauiIcon Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\"\n              Include=\"Resources\\AppIcon\\backicon.png\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" TintColor=\"#40FF00FF\" />\n\n    <!-- App icon for all other platforms -->\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.png\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" TintColor=\"Yellow\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Focus Behavior on Windows (NET8) - XAML\nDESCRIPTION: This XAML snippet demonstrates the focus behavior in .NET MAUI 8 on Windows. The `OnFocused` event handler is executed when the `VerticalStackLayout`, `Entry`, or `Editor` gains focus due to the event bubbling to child elements. This behavior is changing in .NET MAUI 9.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<VerticalStackLayout Focus=\"OnFocused\">\n    <Entry />\n    <Editor />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Network Security Config XML (XML)\nDESCRIPTION: Defines a network security configuration XML file for Android to permit clear-text traffic to the `localhost` (10.0.2.2) address. This configuration restricts clear-text traffic only to the specified domain, enhancing security compared to allowing it for all domains.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n  <domain-config cleartextTrafficPermitted=\"true\">\n    <domain includeSubdomains=\"true\">10.0.2.2</domain>\n  </domain-config>\n</network-security-config>\n```\n\n----------------------------------------\n\nTITLE: Configure AndroidAsset ItemGroup in .csproj\nDESCRIPTION: This XML snippet demonstrates how to move a large asset into its own asset pack by specifying the `<ItemGroup>` element in the project's *.csproj* file. It defines the asset pack name as `myassets`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <AndroidAsset Update=\"Assets/MyLargeAsset.mp4\" AssetPack=\"myassets\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Set SupportedOSPlatformVersion for Android (XML)\nDESCRIPTION: This XML snippet sets the SupportedOSPlatformVersion to 26.0 for the Android target framework within the .NET MAUI project. This ensures compatibility with Android API level 26 and later, which is required due to changes in Android notification channels. The condition ensures that this setting only applies when building for Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">26.0</SupportedOSPlatformVersion>\n```\n\n----------------------------------------\n\nTITLE: Configure Conditional Compilation in .NET MAUI .csproj\nDESCRIPTION: This XML snippet configures the .NET MAUI build system to conditionally compile code based on the target platform. It removes compilation units for platform-specific code (Android, iOS, MacCatalyst, Windows) when the target framework doesn't match the platform. This combines filename and folder-based multi-targeting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Android -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-android')) != true\">\n  <Compile Remove=\"**\\*.Android.cs\" />\n  <None Include=\"**\\*.Android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  <Compile Remove=\"**\\Android\\**\\*.cs\" />\n  <None Include=\"**\\Android\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />  \n</ItemGroup>\n\n<!-- Both iOS and Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true AND $(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MaciOS.cs\" />\n  <None Include=\"**\\*.MaciOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  <Compile Remove=\"**\\MaciOS\\**\\*.cs\" />\n  <None Include=\"**\\MaciOS\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- iOS -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true\">\n  <Compile Remove=\"**\\*.iOS.cs\" />\n  <None Include=\"**\\*.iOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  <Compile Remove=\"**\\iOS\\**\\*.cs\" />\n  <None Include=\"**\\iOS\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />  \n</ItemGroup>\n\n<!-- Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MacCatalyst.cs\" />\n  <None Include=\"**\\*.MacCatalyst.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  <Compile Remove=\"**\\MacCatalyst\\**\\*.cs\" />\n  <None Include=\"**\\MacCatalyst\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- Windows -->\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true\">\n  <Compile Remove=\"**\\*.Windows.cs\" />\n  <None Include=\"**\\*.Windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n  <Compile Remove=\"**\\Windows\\**\\*.cs\" />\n  <None Include=\"**\\Windows\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />  \n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Add queries intent to AndroidManifest.xml\nDESCRIPTION: This XML snippet configures the AndroidManifest.xml file to allow the application to query for apps that can handle the 'geo:' URI scheme, which is necessary to launch map applications. It ensures the app can discover and interact with compatible mapping apps installed on the device.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"geo\"/>\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Setting AndroidResource Build Action in .csproj (XML)\nDESCRIPTION: This XML snippet sets the AndroidResource build action for all files within the Platforms\\Android\\Resources folder and its subfolders in a .NET MAUI Android project. The TargetPath attribute defines the output path for each resource, preserving the directory structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/includes/android-resource-xml.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"$(TargetFramework.Contains('-android'))\">\n   <AndroidResource Include=\"Platforms\\Android\\Resources\\**\" TargetPath=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Minimal Horizontal Line in XAML\nDESCRIPTION: This XAML snippet shows how to define a horizontal line with minimal syntax using the Line shape in .NET MAUI. It only sets the Stroke and X2 properties, relying on the default values of 0 for X1, Y1, and Y2. This results in a horizontal line starting at (0,0) and ending at (200,0).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/line.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Line Stroke=\"Red\"\n      X2=\"200\" />\n```\n\n----------------------------------------\n\nTITLE: Getting MyMusic path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet shows how to retrieve the MyMusic path on Mac Catalyst using NSFileManager to match macOS behavior.  It avoids Environment.GetFolderPath, relying on Xamarin.Mac APIs to obtain the correct directory.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.MusicDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Compile Bindings with Generic Type - XAML\nDESCRIPTION: This code snippet demonstrates how to specify a generic type with the `x:DataType` attribute in XAML. The generic constraint is specified as a prefixed string argument in parentheses.  It requires XAML and a corresponding ViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MyMauiApp\"\n             x:Class=\"MyMauiApp.MyPage\"\n             x:DataType=\"local:MyViewModel(x:Boolean)\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Positioning Child Views with VerticalOptions in XAML\nDESCRIPTION: This XAML snippet shows how to use the `VerticalOptions` property with `LayoutOptions` to control the vertical alignment of child views within a HorizontalStackLayout.  The example demonstrates Start, Center, End, and Fill alignment options.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/horizontalstacklayout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.HorizontalStackLayoutPage\">\n    <HorizontalStackLayout Margin=\"20\"\n                           HeightRequest=\"200\">\n        <Label Text=\"Start\"\n               BackgroundColor=\"Gray\"\n               VerticalOptions=\"Start\" />\n        <Label Text=\"Center\"\n               BackgroundColor=\"Gray\"\n               VerticalOptions=\"Center\" />\n        <Label Text=\"End\"\n               BackgroundColor=\"Gray\"\n               VerticalOptions=\"End\" />\n        <Label Text=\"Fill\"\n               BackgroundColor=\"Gray\"\n               VerticalOptions=\"Fill\" />\n    </HorizontalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Moving an Updated Note to Top of List in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to move an updated note to the top of the `AllNotes` collection using the `Move` method of an `ObservableCollection`. This ensures that recently modified notes are prominently displayed in the list. It requires the `AllNotes` ObservableCollection and `matchedNote` Note object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/bugs.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAllNotes.Move(AllNotes.IndexOf(matchedNote), 0);\n```\n\n----------------------------------------\n\nTITLE: Using DataTemplate Markup Extension in .NET MAUI XAML\nDESCRIPTION: This XAML code demonstrates the use of the `DataTemplate` markup extension to convert a ContentPage (MonkeysPage) into a DataTemplate within a Shell application. This allows the MonkeysPage to be instantiated only when it is navigated to, improving application startup performance. The DataTemplate extension is part of the XAML standard and typically used in .NET MAUI Shell applications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<ShellContent Title=\"Monkeys\"\n              Icon=\"monkey.png\"\n              ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n```\n\n----------------------------------------\n\nTITLE: Getting ApplicationData path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet demonstrates how to retrieve the ApplicationData path on Mac Catalyst using NSFileManager to match the behavior of macOS. It avoids using Environment.GetFolderPath and directly queries the file system using Xamarin.Mac APIs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.ApplicationSupportDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Enable Strict XAML Compilation - XML\nDESCRIPTION: This XML snippet shows how to enable strict XAML compilation and treat all warnings as errors by setting the `$(MauiStrictXamlCompilation)` and `$(TreatWarningsAsErrors)` build properties to `true`. This enforces the use of compiled bindings and surfaces related warnings as errors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n<MauiStrictXamlCompilation>true</MauiStrictXamlCompilation>\n```\n\n----------------------------------------\n\nTITLE: Draw a Circle on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a red circle on an ICanvas object using the DrawEllipse method. It sets the stroke color to red and the stroke size to 4 before drawing the circle with dimensions 100x100 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.DrawEllipse(10, 10, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Right-to-Left Layout with FlowDirection (XAML)\nDESCRIPTION: This XAML code snippet shows how to set the `FlowDirection` property to `RightToLeft` on a `ContentPage` to enable right-to-left layout for all elements within the page, including the `CarouselView`. The `FlowDirection` property is set on the root `ContentPage` and inherited by the `CarouselView` because its default `FlowDirection` is `MatchParent`. It assumes the existence of a ViewModel named `MonkeysViewModel` and a `Monkeys` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewmodels=\"clr-namespace:CarouselViewDemos.ViewModels\"\n             x:Class=\"CarouselViewDemos.Views.HorizontalTemplateLayoutRTLPage\"\n             Title=\"Horizontal layout (RTL FlowDirection)\"\n             FlowDirection=\"RightToLeft\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">    \n    <CarouselView ItemsSource=\"{Binding Monkeys}\">\n        ...\n    </CarouselView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set Copyright Key in .NET MAUI Mac Catalyst\nDESCRIPTION: This XML snippet sets the human-readable copyright notice for the .NET MAUI Mac Catalyst app. It sets the NSHumanReadableCopyright key in the app's Info.plist file to a string containing the copyright information (e.g., \"MyMauiApp © 2023\").\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/update-info-plist.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSHumanReadableCopyright</key>\n<string>MyMauiApp © 2023</string>\n```\n\n----------------------------------------\n\nTITLE: List connected Android devices using ADB\nDESCRIPTION: This command lists all Android devices currently connected to the computer via ADB, whether they are connected via USB or WiFi. It is useful for verifying that the device is properly connected.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/device/setup.md#_snippet_3\n\nLANGUAGE: command\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Updating Target Frameworks in .NET MAUI .csproj (Net7)\nDESCRIPTION: This XML snippet demonstrates the Target Framework Monikers (TFMs) configuration for a .NET 7 .csproj file.  It specifies target platforms like Android, iOS, MacCatalyst, Tizen, and Windows. It uses MSBuild conditions to conditionally include the Windows target framework based on the operating system.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-8.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>net7.0-android;net7.0-ios;net7.0-maccatalyst;net7.0-tizen</TargetFrameworks>\n<TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net7.0-windows10.0.19041.0</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Setting LabeledBy Property in XAML\nDESCRIPTION: This code snippet shows how to use the `LabeledBy` attached property in XAML to associate a `Label` with an `Entry` for accessibility purposes.  The `LabeledBy` property allows another element to define accessibility information for the current element.  Note: This property has been deprecated in .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_21\n\nLANGUAGE: xaml\nCODE:\n```\n<Label x:Name=\"label\" Text=\"Enter your name: \" />\n<Entry AutomationProperties.IsInAccessibleTree=\"true\"\n       AutomationProperties.LabeledBy=\"{x:Reference label}\" />\n```\n\n----------------------------------------\n\nTITLE: Composite Animation in MAUI\nDESCRIPTION: This snippet shows how to create a composite animation in MAUI, where scaling and rotation occur simultaneously.  The rotation starts immediately, while the scaling consists of two sequential animations that run concurrently with the rotation. Requires an Image control named `image`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nimage.RotateTo(360, 4000);\nawait image.ScaleTo(2, 2000);\nawait image.ScaleTo(1, 2000);\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Hint Property in XAML - MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set the `Hint` attached property of `SemanticProperties` to provide additional context for screen readers. The `Hint` augments the `Description` property, offering more detail about the purpose of a control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Image Source=\"like.png\"\n       SemanticProperties.Description=\"Like\"\n       SemanticProperties.Hint=\"Like this post.\" />\n```\n\n----------------------------------------\n\nTITLE: Text Decoration CSS in .NET MAUI\nDESCRIPTION: Sets the text decoration for .NET MAUI Label and Span. Valid values are none, underline, strikethrough, line-through, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_52\n\nLANGUAGE: CSS\nCODE:\n```\ntext-decoration: underline, line-through;\n```\n\n----------------------------------------\n\nTITLE: Nesting VerticalStackLayout in HorizontalStackLayout with XAML\nDESCRIPTION: This XAML snippet demonstrates nesting VerticalStackLayout objects within a HorizontalStackLayout. It shows how to create a layout with primary and secondary colors arranged horizontally, with each color group displayed vertically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/horizontalstacklayout.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.HorizontalStackLayoutPage\">\n    <HorizontalStackLayout Margin=\"20\"\n                           Spacing=\"6\">\n        <Label Text=\"Primary colors:\" />\n        <VerticalStackLayout Spacing=\"6\">\n            <Rectangle Fill=\"Red\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n            <Rectangle Fill=\"Yellow\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n            <Rectangle Fill=\"Blue\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n        </VerticalStackLayout>\n        <Label Text=\"Secondary colors:\" />\n        <VerticalStackLayout Spacing=\"6\">\n            <Rectangle Fill=\"Green\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n            <Rectangle Fill=\"Orange\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n            <Rectangle Fill=\"Purple\"\n                       WidthRequest=\"30\"\n                       HeightRequest=\"30\" />\n        </VerticalStackLayout>\n    </HorizontalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Updating Namespace in C# Code-Behind\nDESCRIPTION: This code snippet demonstrates how to update the namespace of a C# code-behind file (e.g., NotePage.xaml.cs or AboutPage.xaml.cs) to reflect the new location of the view within the project structure.  The namespace is changed to Notes.Views to align with the 'Views' folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Views;\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle in XAML\nDESCRIPTION: This XAML code snippet shows how to create an unfilled red circle with a stroke thickness of 4 and a diameter of 150 device-independent units. The Stroke property is set to Red, StrokeThickness is set to 4, and WidthRequest and HeightRequest are both set to 150 to ensure the shape is a circle.  Horizontal alignment is set using HorizontalOptions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/ellipse.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Ellipse Stroke=\"Red\"\n         StrokeThickness=\"4\"\n         WidthRequest=\"150\"\n         HeightRequest=\"150\"\n         HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Consuming fonts in .NET MAUI with C#\nDESCRIPTION: This C# snippet demonstrates consuming registered fonts in a .NET MAUI application by setting the `FontFamily` property of a `Label` control. The code shows how to apply a font by specifying either its full filename (without extension) or its defined alias, allowing for custom font styling within the application's UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Use font name\nLabel label1 = new Label\n{\n    Text = \"Hello .NET MAUI!\",\n    FontFamily = \"Lobster-Regular\"\n};\n\n// Use font alias\nLabel label2 = new Label\n{\n    Text = \"Hello .NET MAUI!\",\n    FontFamily = \"Lobster\"\n};\n```\n\n----------------------------------------\n\nTITLE: Running .NET for Android apps with dotnet run\nDESCRIPTION: This shows how to launch a .NET for Android app on a device or emulator using the `dotnet run` command with the `--project` argument, specifying the project file.  Alternatively, the `Run` MSBuild target can be used to achieve the same result.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_10\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet run --project HelloAndroid.csproj\n```\n\n----------------------------------------\n\nTITLE: Configure MauiAsset in .csproj (XML)\nDESCRIPTION: This snippet shows how to include raw assets using the `MauiAsset` Build Action in the `.csproj` file. The `LogicalName` attribute specifies the path within the app package where the asset will be located. `%(RecursiveDir)%(Filename)%(Extension)` preserves the directory structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/allnotes/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Marshal Methods in .NET for Android\nDESCRIPTION: This XML snippet shows how to disable the marshal methods in a .NET for Android project by setting the `$(AndroidEnableMarshalMethods)` MSBuild property to `false` in the project file. This can be used as a workaround for startup hangs that may occur in .NET 10 previews.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <AndroidEnableMarshalMethods>false</AndroidEnableMarshalMethods>\n<PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Scroll to Index in CarouselView (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the `ScrollTo` method to programmatically scroll the CarouselView to a specific item at a given index. In this example, the CarouselView scrolls to the item at index 6.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\ncarouselView.ScrollTo(6);\n```\n\n----------------------------------------\n\nTITLE: Loading a Remote Image in C# (Implicit Conversion)\nDESCRIPTION: This C# code snippet demonstrates a simplified way to load and display a remote image in a .NET MAUI application. It leverages the implicit conversion for string-based URIs, allowing directly assigning the URI string to the Source property of the Image control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image { Source = \"https://aka.ms/campus.jpg\" };\n```\n\n----------------------------------------\n\nTITLE: Creating a Top-Left Radial Gradient in MAUI Graphics (C#)\nDESCRIPTION: This code snippet shows how to create a radial gradient with the center positioned at the top-left corner of the rectangle. It sets the StartColor to red, the EndColor to dark blue, and the Center property to (0.0, 0.0). The Radius property remains at its default value of 0.5. The gradient is then applied to fill a rounded rectangle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nRadialGradientPaint radialGradientPaint = new RadialGradientPaint\n{\n    StartColor = Colors.Red,\n    EndColor = Colors.DarkBlue,\n    Center = new Point(0.0, 0.0)\n    // Radius is already 0.5\n};\n\nRectF radialRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(radialGradientPaint, radialRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(radialRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard for SearchHandler in XAML\nDESCRIPTION: This XAML code shows how to customize the default keyboard for a SearchHandler to offer word completions and capitalize every entered character. It uses the Keyboard.Create factory method and specifies KeyboardFlags.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<SearchHandler Placeholder=\"Enter search terms\">\n    <SearchHandler.Keyboard>\n        <Keyboard x:FactoryMethod=\"Create\">\n            <x:Arguments>\n                <KeyboardFlags>Suggestions,CapitalizeCharacter</KeyboardFlags>\n            </x:Arguments>\n        </Keyboard>\n    </SearchHandler.Keyboard>\n</SearchHandler>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI project (XML)\nDESCRIPTION: This XML snippet demonstrates how to include a raw asset file (AboutAssets.txt) in a .NET MAUI project by setting its Build Action to \"MauiAsset\". This ensures the file is deployed with the application package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_2/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Setting the Background Color of an Image in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to set the background color of an image using the `Color` attribute. The `Color` attribute accepts a hexadecimal color value or a .NET MAUI color name (e.g., \"Red\"), which is used as the background color for the image.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/images.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\logo.svg\" Color=\"#512BD4\" />\n```\n\n----------------------------------------\n\nTITLE: Padding Bottom CSS in .NET MAUI\nDESCRIPTION: Sets the bottom padding for .NET MAUI Button, ImageButton, Layout, and Page. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_48\n\nLANGUAGE: CSS\nCODE:\n```\npadding-bottom: 6;\n```\n\n----------------------------------------\n\nTITLE: Configure WebView Mixed Content in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `WebView.MixedContentMode` attached property to `AlwaysAllow` to allow a WebView to load HTTP content from an HTTPS origin. It requires the `android` XML namespace to be defined, referencing the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/webview-mixed-content.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\">\n    <WebView ... android:WebView.MixedContentMode=\"AlwaysAllow\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling Play, Pause, and Stop Commands on iOS/Mac Catalyst\nDESCRIPTION: This C# code snippet shows the `PlayRequested`, `PauseRequested`, and `StopRequested` methods on iOS and Mac Catalyst within the `MauiVideoPlayer` class. These methods are executed in response to the `Video` control sending the corresponding commands. Each method invokes the corresponding action on the `AVPlayer` and logs the current video position.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        ...\n\n        public void PlayRequested(TimeSpan position)\n        {\n            _player.Play();\n            Debug.WriteLine($\"Video playback from {position.Hours:X2}:{position.Minutes:X2}:{position.Seconds:X2}.\");\n        }\n\n        public void PauseRequested(TimeSpan position)\n        {\n            _player.Pause();\n            Debug.WriteLine($\"Video paused at {position.Hours:X2}:{position.Minutes:X2}:{position.Seconds:X2}.\");\n        }\n\n        public void StopRequested(TimeSpan position)\n        {\n            _player.Pause();\n            _player.Seek(new CMTime(0, 1));\n            Debug.WriteLine($\"Video stopped at {position.Hours:X2}:{position.Minutes:X2}:{position.Seconds:X2}.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stepper ValueChanged Event - XAML\nDESCRIPTION: This XAML code snippet shows how to attach a ValueChanged event handler to the Stepper control. It also notes that setting the Minimum value may cause the Value to be coerced, triggering this event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Stepper ValueChanged=\"OnStepperValueChanged\"\n         Maximum=\"360\"\n         Minimum=\"180\" />\n```\n\n----------------------------------------\n\nTITLE: Registering for Activity Lifecycle Events in Android (C#)\nDESCRIPTION: This code snippet shows how to register for Android `Activity` lifecycle events, such as creation, resuming, pausing, and destruction.  An event handler is attached to `Platform.ActivityStateChanged` to receive notifications about state changes, allowing for responsive behavior based on the current activity state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnCreate(Bundle bundle)\n{\n    base.OnCreate(bundle);\n    Platform.Init(this, bundle);\n    Platform.ActivityStateChanged += Platform_ActivityStateChanged;\n}\n\nprotected override void OnDestroy()\n{\n    base.OnDestroy();\n    Platform.ActivityStateChanged -= Platform_ActivityStateChanged;\n}\n\nvoid Platform_ActivityStateChanged(object sender, ActivityStateChangedEventArgs e) =>\n    Toast.MakeText(this, e.State.ToString(), ToastLength.Short).Show();\n```\n\n----------------------------------------\n\nTITLE: Set Modal Presentation Style in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the modal presentation style of a ContentPage to OverFullScreen using the Page.ModalPresentationStyle attached property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-presentation-style.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             ios:Page.ModalPresentationStyle=\"OverFullScreen\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Associated Domains Entitlement XML\nDESCRIPTION: Defines the associated domains entitlement that associates the app with specific domains for services like Safari access. It uses the `com.apple.developer.associated-domains` key of type `Array` of `String`.  Replace `webcredentials:example.com` with your domain. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.associated-domains</key>\n<array>\n  <string>webcredentials:example.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Opt-out of bundling original resources in .NET MAUI library\nDESCRIPTION: This XML snippet demonstrates how to opt out of the default behavior of bundling original resources in a .NET MAUI library project. By setting the `BundleOriginalResources` MSBuild property to `false` in the project file, the original resources will not be bundled. This setting is used when decision-making based on the original resources is desired during app building.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <BundleOriginalResources>false</BundleOriginalResources>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Receiving Query Parameters using QueryPropertyAttribute in C#\nDESCRIPTION: This C# code snippet demonstrates how to receive multiple string-based query parameters using the QueryPropertyAttribute in .NET MAUI.  The ElephantDetailPage class is decorated with QueryPropertyAttribute for each query parameter ('name' and 'location'). These attributes map the 'name' and 'location' query parameters to the Name and Location properties of the class, respectively. Custom logic can be added to the set accessors of the properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[QueryProperty(nameof(Name), \"name\")]\n[QueryProperty(nameof(Location), \"location\")]\npublic partial class ElephantDetailPage : ContentPage\n{\n    public string Name\n    {\n        set\n        {\n            // Custom logic\n        }\n    }\n\n    public string Location\n    {\n        set\n        {\n            // Custom logic\n        }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specify DeliveryType Attribute in .NET MAUI\nDESCRIPTION: This XML snippet shows how to specify the `DeliveryType` attribute on a `MauiAsset` in a .NET MAUI project, setting the delivery type to `FastFollow` for the `myvideo.mp4` file in the `myassets` asset pack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Update=\"Resources\\Raw\\myvideo.mp4\" AssetPack=\"myassets\" DeliveryType=\"FastFollow\" />\n```\n\n----------------------------------------\n\nTITLE: Display string-based content in RadioButtons - XAML\nDESCRIPTION: This XAML code snippet demonstrates how to display text content within RadioButton controls using the Content property. The RadioButtons are implicitly grouped within the StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Label Text=\"What's your favorite animal?\" />\n    <RadioButton Content=\"Cat\" />\n    <RadioButton Content=\"Dog\" />\n    <RadioButton Content=\"Elephant\" />\n    <RadioButton Content=\"Monkey\"\n                 IsChecked=\"true\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Publishing with Native AOT (dotnet CLI)\nDESCRIPTION: This code snippet demonstrates how to publish a .NET MAUI application for iOS and Mac Catalyst using Native AOT deployment via the `dotnet publish` command.  Different runtime identifiers (RIDs) are used to specify the target platform architecture.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\n# iOS\ndotnet publish -f net9.0-ios -r ios-arm64\n\n# Mac Catalyst\ndotnet publish -f net9.0-maccatalyst -r maccatalyst-arm64\ndotnet publish -f net9.0-maccatalyst -r maccatalyst-x64\n\n# Universal Mac Catalyst apps\n# (when <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> is set in the project file)\ndotnet publish -f net9.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Set App Icon in .NET MAUI Project File (XML)\nDESCRIPTION: This XML snippet shows how to configure the app icon displayed in the Start Menu entry by modifying the `<MauiIcon>` element in the .NET MAUI project file. The `Include` attribute specifies the icon file, `ForegroundFile` specifies the foreground icon file (if any), and `Color` sets the background color of the icon.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/setup.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <MauiIcon Include=\"Resources\\appicon.svg\" ForegroundFile=\"Resources\\appiconfg.svg\" Color=\"#512BD4\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Unloaded Event Handler in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet shows how to register an event handler for the `Unloaded` event of a ContentPage. This event is used to perform native view cleanup when the page is navigated away from. This ties to the corresponding csharp snippet.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_75\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:VideoDemos.Controls\"\n             Unloaded=\"OnContentPageUnloaded\">\n    <controls:Video x:Name=\"video\"\n                    ... />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add a splash screen to the project XML file\nDESCRIPTION: This XML snippet demonstrates how to include a splash screen image (SVG in this example) in your .NET MAUI project by adding an entry to the ItemGroup within the project file. The `MauiSplashScreen` build action is used to identify the image as a splash screen. The image will be located in the Resources\\Splash folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: XAML ContentPage with ViewModel Binding in .NET MAUI\nDESCRIPTION: This XAML code defines a ContentPage that consumes a viewmodel named `PeopleViewModel`. It sets the page's BindingContext to an instance of `PeopleViewModel` and uses a DataTemplate to display a collection of `Person` objects within a StackLayout. The visual representation of each `Person` is defined by a CardView control, which uses a ControlTemplate named `CardViewControlTemplate`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:ControlTemplateDemos\"\n             xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"\n             x:DataType=\"local:PeopleViewModel\"\n             ...>\n    <ContentPage.BindingContext>\n        <local:PeopleViewModel />\n    </ContentPage.BindingContext>\n\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"PersonTemplate\"\n                      x:DataType=\"local:Person\">\n            <controls:CardView BorderColor=\"DarkGray\"\n                               CardTitle=\"{Binding Name}\"\n                               CardDescription=\"{Binding Description}\"\n                               ControlTemplate=\"{StaticResource CardViewControlTemplate}\" />\n        </DataTemplate>\n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"10\"\n                 BindableLayout.ItemsSource=\"{Binding People}\"\n                 BindableLayout.ItemTemplate=\"{StaticResource PersonTemplate}\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Relative Rotation of a .NET MAUI Image\nDESCRIPTION: This C# code snippet shows how to perform a relative rotation on a .NET MAUI Image by 360 degrees over 2 seconds using the RelRotateToAsync method. The rotation is relative to the image's starting position.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RelRotateToAsync(360, 2000);\n```\n\n----------------------------------------\n\nTITLE: Modifying SceneDelegate on iOS/Mac Catalyst with C#\nDESCRIPTION: This code snippet shows how to modify the SceneDelegate class on iOS and Mac Catalyst to create the main view controller and set it as the view of the UINavigationController. This is a crucial step for integrating .NET MAUI within a native iOS/Mac Catalyst application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"SceneDelegate\")]\npublic class SceneDelegate : UIResponder, IUIWindowSceneDelegate\n{\n    [Export(\"window\")]\n    public UIWindow? Window { get; set; }\n\n    [Export(\"scene:willConnectToSession:options:\")]\n    public void WillConnect(UIScene scene, UISceneSession session, UISceneConnectionOptions connectionOptions)\n    {\n        if (scene is not UIWindowScene windowScene)\n            return;\n\n        Window = new UIWindow(windowScene);\n\n        var mainVC = new MainViewController();\n        var navigationController = new UINavigationController(mainVC);\n        navigationController.NavigationBar.PrefersLargeTitles = true;\n\n        Window.RootViewController = navigationController;\n        Window.MakeKeyAndVisible();\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable FlyoutPage Shadow in C# - iOS\nDESCRIPTION: This C# snippet demonstrates how to enable the shadow effect on the detail page of a FlyoutPage when revealing the flyout page. It uses the fluent API with On<iOS>().SetApplyShadow(true) to target the iOS platform. This requires the Microsoft.Maui.Controls.PlatformConfiguration and Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespaces to be imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/flyoutpage-shadow.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\npublic class iOSFlyoutPageCode : FlyoutPage\n{\n    public iOSFlyoutPageCode()\n    {\n        On<iOS>().SetApplyShadow(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration for Attached Property\nDESCRIPTION: This XAML snippet demonstrates how to declare a namespace for a custom type containing an attached property. The namespace declaration indicates the Common Language Runtime (CLR) namespace name, which allows the attached property to be used in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ... xmlns:local=\"clr-namespace:ShadowDemo\" ...>\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add VIBRATE permission in Android MainApplication.cs - C#\nDESCRIPTION: This C# code snippet demonstrates how to add the VIBRATE permission to the Android project by adding the `UsesPermission` assembly attribute to the _Platforms/Android/MainApplication.cs_ file. This is required to use the vibration functionality on Android devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/vibrate.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.Vibrate)]\n```\n\n----------------------------------------\n\nTITLE: Publishing with Specific Keystore Details\nDESCRIPTION: This code snippet provides a concrete example of publishing a .NET MAUI Android app with specific keystore details like the filename (myapp.keystore), key alias (myapp), and password (mypassword). This example clarifies how to fill in the placeholders in the previous snippet.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-android -c Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore=myapp.keystore -p:AndroidSigningKeyAlias=myapp -p:AndroidSigningKeyPass=mypassword -p:AndroidSigningStorePass=mypassword\n```\n\n----------------------------------------\n\nTITLE: Specify Multiple Modifiers in XAML\nDESCRIPTION: This XAML code demonstrates how to specify multiple modifiers for a keyboard accelerator. In this example, both Shift and Ctrl keys must be pressed along with the R key to activate the menu item's command.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Refresh\"\n                Command=\"{Binding RefreshCommand}\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <KeyboardAccelerator Modifiers=\"Shift,Ctrl\"\n                             Key=\"R\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Polygon with EvenOdd FillRule in XAML\nDESCRIPTION: This XAML example demonstrates a polygon using the default EvenOdd fill rule. The fill behavior is determined by considering the number of times a ray from a point crosses the polygon's path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polygon.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Polygon Points=\"0 48, 0 144, 96 150, 100 0, 192 0, 192 96, 50 96, 48 192, 150 200 144 48\"\n         Fill=\"Blue\"\n         Stroke=\"Red\"\n         StrokeThickness=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Set Header and Footer Templates XAML\nDESCRIPTION: This code demonstrates how to set the `HeaderTemplate` and `FooterTemplate` properties of a `CollectionView` using XAML to display custom headers and footers. The templates use a `StackLayout` with a `Label` to display text.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_17\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.HeaderTemplate>\n        <DataTemplate>\n            <StackLayout BackgroundColor=\"LightGray\">\n                <Label Margin=\"10,0,0,0\"\n                       Text=\"Monkeys\"\n                       FontSize=\"12\"\n                       FontAttributes=\"Bold\" />\n            </StackLayout>\n        </DataTemplate>\n    </CollectionView.HeaderTemplate>\n    <CollectionView.FooterTemplate>\n        <DataTemplate>\n            <StackLayout BackgroundColor=\"LightGray\">\n                <Label Margin=\"10,0,0,0\"\n                       Text=\"Friends of Xamarin Monkey\"\n                       FontSize=\"12\"\n                       FontAttributes=\"Bold\" />\n            </StackLayout>\n        </DataTemplate>\n    </CollectionView.FooterTemplate>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Special Keys in Keyboard Accelerators (XAML)\nDESCRIPTION: This XAML shows how to use special keys (like F1) in keyboard accelerators, using platform-specific constants.  It uses UIKeyInputF1 for MacCatalyst and F1 for WinUI. It also notes that 112 can be used to represent F1 on Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Help\"\n                Command=\"{Binding HelpCommand}\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <!-- Alternatively, 112 can be used to specify F1 on Windows -->\n        <KeyboardAccelerator Modifiers=\"None\"\n                             Key=\"{OnPlatform MacCatalyst=UIKeyInputF1, WinUI=F1}\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Translate Transform - Drawing an 11-Pointed Star (C#)\nDESCRIPTION: This code demonstrates how to use the Translate transform to shift an 11-pointed star, originally centered at (0,0), to the coordinates (150,150) on the canvas. It uses the PathF object to define the star's shape and then applies the Translate transform before filling the path with red color. The example requires the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPathF path = new PathF();\nfor (int i = 0; i < 11; i++)\n{\n    double angle = 5 * i * 2 * Math.PI / 11;\n    PointF point = new PointF(100 * (float)Math.Sin(angle), -100 * (float)Math.Cos(angle));\n\n    if (i == 0)\n        path.MoveTo(point);\n    else\n        path.LineTo(point);\n}\n\ncanvas.FillColor = Colors.Red;\ncanvas.Translate(150, 150);\ncanvas.FillPath(path);\n```\n\n----------------------------------------\n\nTITLE: Set Default Language and Region in .NET MAUI Mac Catalyst\nDESCRIPTION: This XML snippet sets the default language and region for the .NET MAUI Mac Catalyst app.  It sets the CFBundleDevelopmentRegion key in the app's Info.plist file to a string that represents the localization native development region (e.g., \"en\" for English).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/update-info-plist.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>CFBundleDevelopmentRegion</key>\n<string>en</string>\n```\n\n----------------------------------------\n\nTITLE: Conditional Code Exclusion with HOTRESTART - C#\nDESCRIPTION: This code snippet demonstrates how to conditionally exclude a block of code from execution when debugging with .NET MAUI hot restart. By using the `HOTRESTART` preprocessor symbol, you can prevent specific code segments from running during hot restart debugging sessions, useful for features not supported by hot restart or for performance optimization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/hot-restart.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#if !HOTRESTART\n  // Code here won't be executed when debugging with hot restart\n#endif\n```\n\n----------------------------------------\n\nTITLE: Populate Picker with ItemsSource Array in XAML\nDESCRIPTION: This XAML snippet demonstrates how to populate a .NET MAUI Picker control with a static array of strings using the ItemsSource property. The array is defined inline using the x:Array element and the x:String type. The Picker is initialized with a Title.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Picker x:Name=\"picker\"\n        Title=\"Select a monkey\">\n  <Picker.ItemsSource>\n    <x:Array Type=\"{x:Type x:String}\">\n      <x:String>Baboon</x:String>\n      <x:String>Capuchin Monkey</x:String>\n      <x:String>Blue Monkey</x:String>\n      <x:String>Squirrel Monkey</x:String>\n      <x:String>Golden Lion Tamarin</x:String>\n      <x:String>Howler Monkey</x:String>\n      <x:String>Japanese Macaque</x:String>\n    </x:Array>\n  </Picker.ItemsSource>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Remove a .NET MAUI Behavior\nDESCRIPTION: This code snippet demonstrates how to remove a specific behavior from a .NET MAUI control's Behaviors collection.  It searches for a behavior of type NumericValidationStyleBehavior and removes it if found. Requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nBehavior toRemove = entry.Behaviors.FirstOrDefault(b => b is NumericValidationStyleBehavior);\nif (toRemove != null)\n{\n    entry.Behaviors.Remove(toRemove);\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal StackLayout XAML\nDESCRIPTION: Demonstrates creating a horizontally oriented StackLayout using XAML. It contains BoxView objects and sets the Orientation property to Horizontal. HorizontalOptions is set to Center to align the content. The Margin property provides padding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.XAML.HorizontalStackLayoutPage\"\n             Title=\"Horizontal StackLayout demo\">\n    <StackLayout Margin=\"20\"\n                 Orientation=\"Horizontal\"\n                 HorizontalOptions=\"Center\">\n        <BoxView Color=\"Red\"\n                 WidthRequest=\"40\" />\n        <BoxView Color=\"Yellow\"\n                 WidthRequest=\"40\" />\n        <BoxView Color=\"Blue\"\n                 WidthRequest=\"40\" />\n        <BoxView Color=\"Green\"\n                 WidthRequest=\"40\" />\n        <BoxView Color=\"Orange\"\n                 WidthRequest=\"40\" />\n        <BoxView Color=\"Purple\"\n                 WidthRequest=\"40\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Define PushDemoAction Enum C#\nDESCRIPTION: Defines an enumeration for push notification actions, used to strongly type the actions that can be triggered by push notifications. It provides a clear and maintainable way to handle different actions within the application's logic. Required to handle notification actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsDemo.Models;\n\npublic enum PushDemoAction\n{\n    ActionA,\n    ActionB\n}\n```\n\n----------------------------------------\n\nTITLE: Handle CheckBox CheckedChanged event in XAML\nDESCRIPTION: This code snippet shows how to subscribe to the CheckedChanged event of a CheckBox in XAML.  When the CheckBox's state changes, the OnCheckBoxCheckedChanged method will be called.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/checkbox.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<CheckBox CheckedChanged=\"OnCheckBoxCheckedChanged\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Bing Maps API Token for Geocoding in .NET MAUI\nDESCRIPTION: This code snippet configures the Bing Maps API token for geocoding functionality in a .NET MAUI application. It invokes the ConfigureEssentials method on the MauiAppBuilder object in the MauiProgram.cs file and calls the UseMapServiceToken method on the IEssentialsBuilder object, passing the Bing Maps API key as the argument. This configuration is required for the Windows platform to enable geocoding functionality.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geocoding.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t\tfonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n\t\t\t});\n\n\t\tbuilder.ConfigureEssentials(essentials =>\n\t\t{\n\t\t\tessentials.UseMapServiceToken(\"YOUR_API_KEY\");\n\t\t});\n\n#if DEBUG\n\t\tbuilder.Logging.AddDebug();\n#endif\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing ListView with CachingStrategy in C#\nDESCRIPTION: Illustrates how to subclass a ListView to enable setting the CachingStrategy from XAML by defining a constructor that accepts a `ListViewCachingStrategy` parameter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomListView : ListView\n{\n    public CustomListView (ListViewCachingStrategy strategy) : base (strategy)\n    {\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LineSegment in XAML\nDESCRIPTION: This XAML snippet shows how to create LineSegment objects within a Path object in .NET MAUI to draw lines. The LineSegment is defined by its end point (Point). The PathFigure's IsClosed property is set to true to close the shape, resulting in a triangle. It requires .NET MAUI to be correctly configured in the project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"      \n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Start\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure IsClosed=\"True\"\n                                StartPoint=\"10,100\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <LineSegment Point=\"100,100\" />\n                                <LineSegment Point=\"100,50\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Creating a Label in C#\nDESCRIPTION: This snippet shows how to create a Label control programmatically in C# with the text \"Hello world\".  It instantiates a Label object and sets its Text property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label { Text = \"Hello world\" };\n```\n\n----------------------------------------\n\nTITLE: Implement Android Platform Behavior\nDESCRIPTION: This code implements the Android-specific part of the TintColorBehavior, inheriting from PlatformBehavior<Image, ImageView>. It overrides OnAttachedTo to apply the tint color when the behavior is attached and OnDetachedFrom to clear the color filter when detached. Requires the Android.Graphics, Android.Widget, Microsoft.Maui.Platform, and Microsoft.Maui.Graphics namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Graphics;\nusing Android.Widget;\nusing Microsoft.Maui.Platform;\nusing Color = Microsoft.Maui.Graphics.Color;\n\nnamespace BehaviorsDemos\n{\n    public partial class TintColorBehavior : PlatformBehavior<Image, ImageView>\n    {\n        protected override void OnAttachedTo(Image bindable, ImageView platformView)\n        {\n            base.OnAttachedTo(bindable, platformView);\n\n            if (bindable is null)\n                return;\n            if (TintColor is null)\n                ClearColor(platformView);\n            else\n                ApplyColor(platformView, TintColor);\n        }\n\n        protected override void OnDetachedFrom(Image bindable, ImageView platformView)\n        {\n            base.OnDetachedFrom(bindable, platformView);\n\n            if (bindable is null)\n                return;\n            ClearColor(platformView);\n        }\n\n        void ApplyColor(ImageView imageView, Color color)\n        {\n            imageView.SetColorFilter(new PorterDuffColorFilter(color.ToPlatform(), PorterDuff.Mode.SrcIn ?? throw new NullReferenceException()));\n        }\n\n        void ClearColor(ImageView imageView)\n        {\n            imageView.ClearColorFilter();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consume SearchHandler in C#\nDESCRIPTION: This code snippet demonstrates how to consume a subclassed SearchHandler in C# by using Shell.SetSearchHandler. It sets the Placeholder, ShowsResults, and DisplayMemberName properties of the AnimalSearchHandler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/search.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nShell.SetSearchHandler(this, new AnimalSearchHandler\n{\n    Placeholder = \"Enter search term\",\n    ShowsResults = true,\n    DisplayMemberName = \"Name\"\n});\n```\n\n----------------------------------------\n\nTITLE: Vertical StackLayout C#\nDESCRIPTION: Demonstrates creating a vertically oriented StackLayout using C#. It initializes a StackLayout, adds Label and BoxView objects as children, and sets the Content of the ContentPage to the StackLayout. The Margin property is set for spacing around the StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerticalStackLayoutPage : ContentPage\n{\n    public VerticalStackLayoutPage()\n    {\n        Title = \"Vertical StackLayout demo\";\n\n        StackLayout stackLayout = new StackLayout { Margin = new Thickness(20) };\n\n        stackLayout.Add(new Label { Text = \"Primary colors\" });\n        stackLayout.Add(new BoxView { Color = Colors.Red, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Yellow, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Blue, HeightRequest = 40 });\n        stackLayout.Add(new Label { Text = \"Secondary colors\" });\n        stackLayout.Add(new BoxView { Color = Colors.Green, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Orange, HeightRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Purple, HeightRequest = 40 });\n\n        Content = stackLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Video from URI on Windows with MediaPlayerElement\nDESCRIPTION: This code snippet demonstrates how to play a video from a URI on Windows using the `MediaPlayerElement`. It creates a `MediaSource` from the URI and sets it as the source of the `MediaPlayerElement`. It also handles the `AutoPlay` property and attaches an event handler for when the media is opened.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        bool _isMediaPlayerAttached;\n        ...\n\n        public async void UpdateSource()\n        {\n            bool hasSetSource = false;\n\n            if (_video.Source is UriVideoSource)\n            {\n                string uri = (_video.Source as UriVideoSource).Uri;\n                if (!string.IsNullOrWhiteSpace(uri))\n                {\n                    _mediaPlayerElement.Source = MediaSource.CreateFromUri(new Uri(uri));\n                    hasSetSource = true;\n                }\n            }\n            ...\n\n            if (hasSetSource && !_isMediaPlayerAttached)\n            {\n                _isMediaPlayerAttached = true;\n                _mediaPlayerElement.MediaPlayer.MediaOpened += OnMediaPlayerMediaOpened;\n            }\n\n            if (hasSetSource && _video.AutoPlay)\n            {\n                _mediaPlayerElement.AutoPlay = true;\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CodesignEntitlements in .csproj File\nDESCRIPTION: This snippet shows how to configure the `CodesignEntitlements` build property in the app's .csproj file. This property specifies the path to the Entitlements.plist file, enabling the app to consume the defined entitlements during the build process. This configuration is set within a PropertyGroup that targets a specific configuration, target framework, and platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/entitlements.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0-maccatalyst|AnyCPU'\">\n  <CodesignEntitlements>Platforms\\MacCatalyst\\Entitlements.plist</CodesignEntitlements>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Add Scene Manifest to iOS Info.plist XML\nDESCRIPTION: Adds XML to the Info.plist file to support multiple scenes in the iOS application. This configuration enables the app to handle multiple windows or scenes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIApplicationSceneManifest</key>\n<dict>\n  <key>UIApplicationSupportsMultipleScenes</key>\n  <true/>\n  <key>UISceneConfigurations</key>\n  <dict>\n    <key>UIWindowSceneSessionRoleApplication</key>\n    <array>\n      <dict>\n        <key>UISceneConfigurationName</key>\n        <string>Default Configuration</string>\n        <key>UISceneDelegateClassName</key>\n        <string>SceneDelegate</string>\n      </dict>\n    </array>\n  </dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: StackLayout Spacing XAML\nDESCRIPTION: Demonstrates setting the Spacing property of a StackLayout using XAML to add space between child elements. It contains Label and BoxView objects within the StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.XAML.StackLayoutSpacingPage\"\n             Title=\"StackLayout Spacing demo\">\n    <StackLayout Margin=\"20\"\n                 Spacing=\"6\">\n        <Label Text=\"Primary colors\" />\n        <BoxView Color=\"Red\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Yellow\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Blue\"\n                 HeightRequest=\"40\" />\n        <Label Text=\"Secondary colors\" />\n        <BoxView Color=\"Green\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Orange\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Purple\"\n                 HeightRequest=\"40\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Killing CoreSimulatorService\nDESCRIPTION: This command kills the `com.apple.CoreSimulator.CoreSimulatorService` process. This is used in the troubleshooting section to reset the simulators on the Mac build host.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/remote-simulator.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkillall -9 com.apple.CoreSimulator.CoreSimulatorService\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI in Android Fragment with C#\nDESCRIPTION: This code snippet shows how to initialize .NET MAUI within an Android fragment. It includes necessary using statements and demonstrates creating a MauiContext object within the OnViewCreated method, passing in the Activity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Runtime;\nusing Android.Views;\nusing AndroidX.Navigation.Fragment;\nusing Microsoft.Maui.Controls.Embedding;\nusing Fragment = AndroidX.Fragment.App.Fragment;\nusing View = Android.Views.View;\n\nnamespace MyNativeEmbeddedApp.Droid;\n\n[Register(\"com.companyname.nativeembeddingdemo.\" + nameof(FirstFragment))]\npublic class FirstFragment : Fragment\n{\n    public override View? OnCreateView(LayoutInflater inflater, ViewGroup? container, Bundle? savedInstanceState) =>\n        inflater.Inflate(Resource.Layout.fragment_first, container, false);\n\n    public override void OnViewCreated(View view, Bundle? savedInstanceState)\n    {\n        base.OnViewCreated(view, savedInstanceState);\n\n        // Ensure .NET MAUI app is built before creating .NET MAUI views\n        var mauiApp = MyEmbeddedMauiApp.Shared;\n\n        // Create .NET MAUI context\n        var context = new MauiContext(mauiApp.Services, Activity);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Binding to HslViewModel Properties\nDESCRIPTION: This XAML code defines a `ContentPage` that binds to the `HslViewModel`. It includes a `BoxView` whose `Color` property is bound to the `Color` property of the viewmodel, and three `Slider` and `Label` views bound to the `Hue`, `Saturation`, and `Luminosity` properties. The `Slider` controls utilize `TwoWay` binding, while the `Label` controls use the default `OneWay` binding. The viewmodel is instantiated with an initial color of Aqua.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.HslColorScrollPage\"\n             Title=\"HSL Color Scroll Page\"\n             x:DataType=\"local:HslViewModel\">\n    <ContentPage.BindingContext>\n        <local:HslViewModel Color=\"Aqua\" />\n    </ContentPage.BindingContext>\n\n    <VerticalStackLayout Padding=\"10, 0, 10, 30\">\n        <BoxView Color=\"{Binding Color}\"\n                 HeightRequest=\"100\"\n                 WidthRequest=\"100\"\n                 HorizontalOptions=\"Center\" />\n        <Label Text=\"{Binding Hue, StringFormat='Hue = {0:F2}'}\"\n               HorizontalOptions=\"Center\" />\n        <Slider Value=\"{Binding Hue}\"\n                Margin=\"20,0,20,0\" />\n        <Label Text=\"{Binding Saturation, StringFormat='Saturation = {0:F2}'}\"\n               HorizontalOptions=\"Center\" />\n        <Slider Value=\"{Binding Saturation}\"\n                Margin=\"20,0,20,0\" />\n        <Label Text=\"{Binding Luminosity, StringFormat='Luminosity = {0:F2}'}\"\n               HorizontalOptions=\"Center\" />\n        <Slider Value=\"{Binding Luminosity}\"\n                Margin=\"20,0,20,0\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Hiding Soft Input Keyboard C#\nDESCRIPTION: This C# code shows how to hide the soft input keyboard on an <xref:Microsoft.Maui.Controls.Editor> named `editor`, if it's currently showing, using the `HideSoftInputAsync` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nif (editor.IsSoftInputShowing())\n    await editor.HideSoftInputAsync(System.Threading.CancellationToken.None);\n```\n\n----------------------------------------\n\nTITLE: Setting Orientation with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the orientation of a ScrollView or StackLayout to horizontal using the `-maui-orientation` property.  Possible values are `horizontal`, `vertical`, `both`, or `initial`. `both` is only supported on a ScrollView. This is a .NET MAUI specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_65\n\nLANGUAGE: css\nCODE:\n```\n-maui-orientation: horizontal;\n```\n\n----------------------------------------\n\nTITLE: Example: Notarize .NET MAUI Mac Catalyst App (Zsh)\nDESCRIPTION: This zsh command shows an example of using `notarytool` to submit a .NET MAUI Mac Catalyst application package for notarization.  It requires an app-specific password due to App Store Connect's two-factor authentication requirement. The command waits for the notarization process to complete before exiting.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nxcrun notarytool submit MyMauiApp-1.0.pkg --wait --apple-id johm.smith@provider.com --password fqtk-cprr-gqdt-bvyo --team-id AY2GDE9QM7\n```\n\n----------------------------------------\n\nTITLE: Custom Cell with OnBindingContextChanged in C#\nDESCRIPTION: This C# code demonstrates how to properly handle binding context changes in a custom cell when using the RecycleElement caching strategy.  It updates the image source within the OnBindingContextChanged override instead of the constructor.  Requires an ImageItem model with an ImageUrl property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomCell : ViewCell\n{\n    Image image = null;\n\n    public CustomCell()\n    {\n        image = new Image();\n        View = image;\n    }\n\n    protected override void OnBindingContextChanged()\n    {\n        base.OnBindingContextChanged();\n\n        var item = BindingContext as ImageItem;\n        if (item != null)\n        {\n            image.Source = item.ImageUrl;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associate values with RadioButtons - XAML\nDESCRIPTION: This XAML code snippet demonstrates how to associate a value with each RadioButton, separate from its displayed content. This is useful when the displayed content is a View, but a string value is desired.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Label Text=\"What's your favorite animal?\" />\n    <RadioButton Value=\"Cat\">\n        <RadioButton.Content>\n            <Image Source=\"cat.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton Value=\"Dog\">\n        <RadioButton.Content>\n            <Image Source=\"dog.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton Value=\"Elephant\">\n        <RadioButton.Content>\n            <Image Source=\"elephant.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n    <RadioButton Value=\"Monkey\">\n        <RadioButton.Content>\n            <Image Source=\"monkey.png\" />\n        </RadioButton.Content>\n    </RadioButton>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Opacity CSS in .NET MAUI\nDESCRIPTION: Sets the opacity of a .NET MAUI VisualElement. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_42\n\nLANGUAGE: CSS\nCODE:\n```\nopacity: .3;\n```\n\n----------------------------------------\n\nTITLE: Setting Name Property in XAML\nDESCRIPTION: This code snippet shows how to set the `Name` attached property for an `ActivityIndicator` in XAML.  The `Name` property provides a short, descriptive text string that a screen reader uses to announce the element. Note: This property has been deprecated in .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_17\n\nLANGUAGE: xaml\nCODE:\n```\n<ActivityIndicator AutomationProperties.IsInAccessibleTree=\"true\"\n                   AutomationProperties.Name=\"Progress indicator\" />\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a red diagonal line using the Line shape in .NET MAUI.  It sets the X1, Y1, X2, and Y2 properties to define the start and end points of the line, and the Stroke property to set the line's color. The Line shape requires the Stroke property to be set for the line to be visible.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/line.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Line X1=\"40\"\n      Y1=\"0\"\n      X2=\"0\"\n      Y2=\"120\"\n      Stroke=\"Red\" />\n```\n\n----------------------------------------\n\nTITLE: ViewHelpers Extension Method for Bounds Calculation in .NET MAUI\nDESCRIPTION: This C# extension method calculates the absolute bounds of a Microsoft.Maui.Controls.View element by traversing up the visual tree and summing the X and Y coordinates. This allows you to precisely position popovers relative to the UI element that triggered the share or open action.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/ios-PresentationSourceBounds.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ViewHelpers\n{\n    public static Rect GetAbsoluteBounds(this Microsoft.Maui.Controls.View element)\n    {\n        Element looper = element;\n\n        var absoluteX = element.X + element.Margin.Top;\n        var absoluteY = element.Y + element.Margin.Left;\n\n        // Add logic to handle titles, headers, or other non-view bars\n\n        while (looper.Parent != null)\n        {\n            looper = looper.Parent;\n            if (looper is Microsoft.Maui.Controls.View v)\n            {\n                absoluteX += v.X + v.Margin.Top;\n                absoluteY += v.Y + v.Margin.Left;\n            }\n        }\n\n        return new Rect(absoluteX, absoluteY, element.Width, element.Height);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MapUpdateStatus Method (C#)\nDESCRIPTION: This code shows the `MapUpdateStatus` method which is invoked by the handler's command mapper when the `UpdateStatus` command is sent from the `Video` control. This method then calls the `UpdateStatus` method on the handler's `PlatformView` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\npublic static void MapUpdateStatus(VideoHandler handler, Video video, object? args)\n{\n    handler.PlatformView?.UpdateStatus();\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Binding Path (XAML - Step 2)\nDESCRIPTION: Second step in debugging complex binding. Add Content property. This allows for verifying that the Content property exists and retrieves the data from Content property. Type of Content Property is revealed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding x:DataType='ContentPage',\n                      Source={x:Reference page},\n                      Path=Content,\n                      StringFormat='{0}'}\" />\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Queries for Text-to-Speech\nDESCRIPTION: This XML snippet configures the Android manifest to allow querying for the text-to-speech (TTS) service. It's required when the target Android version is Android 11 (API 30) or higher. The intent filter declares that the application intends to use the TTS service, enabling the app to interact with the system's TTS engine.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.TTS_SERVICE\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Compiled Bindings with Source Property - XAML\nDESCRIPTION: This code snippet demonstrates how to define compiled bindings with the `Source` property in XAML.  Ensure the correct `x:DataType` is specified for the binding. The compilation of bindings with `Source` improves runtime performance in .NET MAUI 9 and later if the build property is enabled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<HorizontalStackLayout BindingContext=\"{x:Reference slider}\" x:DataType=\"Slider\">\n    <Label Text=\"{Binding Value}\" />\n    <Label Text=\"{Binding Text, Source={x:Reference entry}, x:DataType=Entry}\" />\n</HorizontalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Basic Label elements without Styles in .NET MAUI XAML\nDESCRIPTION: This code snippet shows three Label controls in XAML without using styles. Each label has the same HorizontalOptions, VerticalOptions, and FontSize properties set individually, which can lead to redundancy and maintainability issues.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"These labels\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\"\n       FontSize=\"18\" />\n<Label Text=\"are not\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\"\n       FontSize=\"18\" />\n<Label Text=\"using styles\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\"\n       FontSize=\"18\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Padding with OnPlatform .NET MAUI XAML\nDESCRIPTION: This snippet demonstrates how to set platform-specific padding values for a ContentPage in .NET MAUI using the OnPlatform and On classes within XAML. It specifies different padding values for iOS and Android platforms. The x:TypeArguments attribute specifies the type of the Padding property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"...\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\">\n            <On Platform=\"iOS\" Value=\"0,20,0,0\" />\n            <On Platform=\"Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Implement NSData Extension for Token Conversion - C#\nDESCRIPTION: This C# code defines an extension method `ToHexString` for the `NSData` class. It converts the `NSData` object, which represents the device token, into a hexadecimal string. This string representation is commonly used for identifying and registering devices for push notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\nusing Foundation;\nusing System.Text;\n\nnamespace PushNotificationsDemo.Platforms.iOS;\n\ninternal static class NSDataExtensions\n{\n    internal static string ToHexString(this NSData data)\n    {\n        var bytes = data.ToArray();\n\n        if (bytes == null)\n            return null;\n\n        StringBuilder sb = new StringBuilder(bytes.Length * 2);\n\n        foreach (byte b in bytes)\n            sb.AppendFormat(\"{0:x2}\", b);\n\n        return sb.ToString().ToUpperInvariant();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling ShouldDelayContentTouches in C#\nDESCRIPTION: This C# code snippet demonstrates how to toggle the `ShouldDelayContentTouches` property on a ScrollView in iOS using the fluent API. It retrieves the current value of the property and then sets it to the opposite value, effectively enabling or disabling the content touch delay.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/scrollview-content-touches.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nscrollView.On<iOS>().SetShouldDelayContentTouches(!scrollView.On<iOS>().ShouldDelayContentTouches());\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a Grid layout with two rows and two columns.  It uses RowDefinitions and ColumnDefinitions to define the structure and demonstrates the use of Grid.Row and Grid.Column attached properties to position the elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"50\" />\n        <RowDefinition Height=\"50\" />\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>    \n    <Label Text=\"Column 0, Row 0\"\n           WidthRequest=\"200\" />\n    <Label Grid.Column=\"1\"\n           Text=\"Column 1, Row 0\" />\n    <Label Grid.Row=\"1\"\n           Text=\"Column 0, Row 1\" />\n    <Label Grid.Column=\"1\"\n           Grid.Row=\"1\"\n           Text=\"Column 1, Row 1\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Creating a VerticalStackLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a VerticalStackLayout containing three Label objects. It illustrates the use of Margin, Padding, and Spacing properties for controlling the layout of child elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<VerticalStackLayout Margin=\"20,35,20,25\">\n    <Label Text=\"The VericalStackLayout has its Margin property set, to control the rendering position of the VerticalStackLayout.\" />\n    <Label Text=\"The Padding property can be set to specify the distance between the VerticalStackLayout and its children.\" />\n    <Label Text=\"The Spacing property can be set to specify the distance between views in the VerticalStackLayout.\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Consume Behavior in XAML\nDESCRIPTION: This snippet demonstrates how to consume a custom behavior (NumericValidationBehavior) in XAML by adding it to the Behaviors collection of an Entry control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Placeholder=\"Enter a System.Double\">\n    <Entry.Behaviors>\n        <local:NumericValidationBehavior />\n    </Entry.Behaviors>\n</Entry>\n```\n\n----------------------------------------\n\nTITLE: Modify iOS SceneDelegate for .NET MAUI C#\nDESCRIPTION: Modifies the iOS SceneDelegate class to create the main view controller and set it as the view of the UINavigationController. This involves creating a UIWindow, instantiating the MainViewController, and setting up the navigation controller.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"SceneDelegate\")]\npublic class SceneDelegate : UIResponder, IUIWindowSceneDelegate\n{\n    [Export(\"window\")]\n    public UIWindow? Window { get; set; }\n\n    [Export(\"scene:willConnectToSession:options:\")]\n    public void WillConnect(UIScene scene, UISceneSession session, UISceneConnectionOptions connectionOptions)\n    {\n        if (scene is not UIWindowScene windowScene)\n            return;\n\n        Window = new UIWindow(windowScene);\n\n        var mainVC = new MainViewController();\n        var navigationController = new UINavigationController(mainVC);\n        navigationController.NavigationBar.PrefersLargeTitles = true;\n\n        Window.RootViewController = navigationController;\n        Window.MakeKeyAndVisible();\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Authentication Options in C#\nDESCRIPTION: This C# class defines the options for API key authentication. It inherits from `AuthenticationSchemeOptions` and includes properties for the authentication scheme and the API key. The `DefaultScheme` constant specifies the default scheme name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authentication;\n\nnamespace PushNotificationsAPI.Authentication;\n\npublic class ApiKeyAuthOptions : AuthenticationSchemeOptions\n{\n    public const string DefaultScheme = \"ApiKey\";\n    public string Scheme => DefaultScheme;\n    public string ApiKey { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Android Activity (C#)\nDESCRIPTION: This code snippet shows how to use `Platform.WaitForActivityAsync()` to wait for an Android `Activity` to be created and become active. This is useful in situations where the activity is needed before the app has fully started.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar activity = await Platform.WaitForActivityAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Pack in .NET MAUI XML\nDESCRIPTION: This XML snippet demonstrates how to define an asset pack in a .NET MAUI app using the `MauiAsset` build action. It includes the path to the assets using globbing patterns, a logical name for the assets, and the `AssetPack` attribute to specify the asset pack name. The `Include` attribute specifies the assets to include in the asset pack and the `LogicalName` provides the path within the asset pack. This enables you to place assets into a separate package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset\n    Include=\"Resources\\Raw\\**\"\n    LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\"\n    AssetPack=\"myassetpack\" />\n```\n\n----------------------------------------\n\nTITLE: Using FallbackValue\nDESCRIPTION: This XAML snippet shows the use of FallbackValue to provide a default value when the binding process fails, for example, due to an incorrect path or missing binding context. In this case, the Label will display \"Binding failed\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding FirstName, FallbackValue='Binding failed'}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining EntryCell in TableView XAML\nDESCRIPTION: This XAML code demonstrates how to define a TableView using EntryCell items. It sets the Label and Placeholder properties to provide context and guidance for user input within each cell. The Intent is set to Settings, indicating that it is part of a settings section.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/tableview.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<TableView Intent=\"Settings\">\n    <TableRoot>\n        <TableSection>\n            <EntryCell Label=\"Login\"\n                       Placeholder=\"username\" />\n            <EntryCell Label=\"Password\"\n                       Placeholder=\"password\" />\n        </TableSection>\n    </TableRoot>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Scroll to Start Position in C#\nDESCRIPTION: This C# code snippet demonstrates scrolling an item to the start of the ListView using ScrollToPosition.Start.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nlistView.ScrollTo(monkey, position: ScrollToPosition.Start, animate: true);\n```\n\n----------------------------------------\n\nTITLE: Add Backing Fields in AppDelegate Class - C#\nDESCRIPTION: These backing fields are added to the `AppDelegate` class to hold references to the `IPushDemoNotificationActionService`, `INotificationRegistrationService`, and `IDeviceInstallationService` implementations. These are used to access push notification-related services.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nIPushDemoNotificationActionService _notificationActionService;\nINotificationRegistrationService _notificationRegistrationService;\nIDeviceInstallationService _deviceInstallationService;\n```\n\n----------------------------------------\n\nTITLE: Create PolyQuadraticBezierSegment in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to create and render a PolyQuadraticBezierSegment within a Path object in .NET MAUI. The PolyQuadraticBezierSegment defines multiple quadratic Bezier curves using a collection of points. The `Points` attribute specifies the control and end points for each curve segment. The starting point of the first curve is defined by the `StartPoint` of the PathFigure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,10\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <PolyQuadraticBezierSegment Points=\"100,100 150,50 0,100 15,200\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in iOS MainViewController C#\nDESCRIPTION: Initializes .NET MAUI within the iOS MainViewController's ViewDidLoad method. It creates a Lazy<MauiApp> and a MauiContext for embedding .NET MAUI views. It retrieves the UIWindow and uses MauiApp.CreateEmbeddedWindowContext to create a window context, if UseWindowContext is true.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Platform;\n\nnamespace MyNativeEmbeddedApp.iOS;\n\npublic class MainViewController : UIViewController\n{\n    UIWindow GetWindow() =>\n        View?.Window ??\n        ParentViewController?.View?.Window ??\n        MainViewController.MauiApp.Value.Services.GetRequiredService<IUIApplicationDelegate>().GetWindow() ??\n        UIApplication.SharedApplication.Delegate.GetWindow();\n\n    public static readonly Lazy<MauiApp> MauiApp = new(() =>\n    {\n        var mauiApp = MauiProgram.CreateMauiApp(builder =>\n        {\n            builder.UseMauiEmbedding();\n        });\n        return mauiApp;\n    });\n\n    public static bool UseWindowContext = true;\n\n    public override void ViewDidLoad()\n    {\n        base.ViewDidLoad();\n\n        // Ensure app is built before creating .NET MAUI views\n        var mauiApp = MainViewController.MauiApp.Value;\n\n        // Create .NET MAUI context\n        var context = UseWindowContext\n            ? mauiApp.CreateEmbeddedWindowContext(GetWindow()) // Create window context\n            : new MauiContext(mauiApp.Services);               // Create app context\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create ActivityIndicator in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create an ActivityIndicator and start its animation. The IsRunning property is set to true to make the indicator visible and animated.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/activityindicator.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ActivityIndicator IsRunning=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Min Height CSS in .NET MAUI\nDESCRIPTION: Sets the minimum height of a .NET MAUI VisualElement. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_40\n\nLANGUAGE: CSS\nCODE:\n```\nmin-height: 50;\n```\n\n----------------------------------------\n\nTITLE: Configure Modal Popover on iOS using Fluent API (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a modal page to display as a popover on iOS using the fluent API. It sets the `ModalPopoverView`, `ModalPopoverRect`, and `ModalPresentationStyle` properties to control the popover's appearance and origin. Requires `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-popover.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\npublic partial class PopoverPage : ContentPage\n{\n    public PopoverPage(View modal, Rectangle rectangle)\n    {\n        InitializeComponent();\n        On<iOS>().SetModalPopoverView(modal);\n        On<iOS>().SetModalPopoverRect(rectangle);\n        On<iOS>().SetModalPresentationStyle(UIModalPresentationStyle.Popover);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TapGestureRecognizer with Secondary Button Mask in XAML\nDESCRIPTION: This XAML code shows how to configure a TapGestureRecognizer to only detect taps from the secondary (right) mouse button by setting the Buttons property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\">\n    <Image.GestureRecognizers>\n        <TapGestureRecognizer Tapped=\"OnTapGestureRecognizerTapped\"\n                              Buttons=\"Secondary\" />\n  </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Handling Stepper ValueChanged Event in C#\nDESCRIPTION: This C# code shows how to handle the ValueChanged event of a Stepper control. It retrieves the new value from the event arguments and updates the Rotation property of a Label and the Text property of another Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class BasicStepperXAMLPage : ContentPage\n{\n    public BasicStepperXAMLPage()\n    {\n        InitializeComponent();\n    }\n\n    void OnStepperValueChanged(object sender, ValueChangedEventArgs e)\n    {\n        double value = e.NewValue;\n        _rotatingLabel.Rotation = value;\n        _displayLabel.Text = string.Format(\"The Stepper value is {0}\", value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting x:ClassModifier in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `x:ClassModifier` attribute to `NotPublic` on a `ContentPage`. This restricts access to the generated class to types within the same assembly.  It requires the standard .NET MAUI XAML namespace declarations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/class-modifiers.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\"\n             x:ClassModifier=\"NotPublic\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Request Camera Permission in C#\nDESCRIPTION: This C# code snippet demonstrates how to request camera permission from the user. It first checks the current permission status and then requests the permission if it hasn't already been granted.  The code uses the `Permissions` class and requires the `Microsoft.Maui.ApplicationModel` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task RequestCameraPermission()\n{\n    PermissionStatus status = await Permissions.CheckStatusAsync<Permissions.Camera>();\n\n    if (status != PermissionStatus.Granted)\n        await Permissions.RequestAsync<Permissions.Camera>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Linker Behavior in .csproj - XML\nDESCRIPTION: This XML snippet demonstrates how to configure the linker behavior for a .NET MAUI Mac Catalyst app by setting the `MtouchLink` build property in the *.csproj* file. The `MtouchLink` property is set to `SdkOnly` for the 'Debug|net8.0-maccatalyst|AnyCPU' configuration. The value can be `None`, `SdkOnly`, or `Full`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/linking.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0-maccatalyst|AnyCPU'\">\n  <MtouchLink>SdkOnly</MtouchLink>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating an Associated Domains File (JSON)\nDESCRIPTION: This JSON snippet shows the structure and content of an associated domains file, which is required to associate a website with your app for universal links. The `apps` and `appID` keys must be configured with the correct app identifier prefix and bundle identifier for your app. This file must be hosted at `https://domain.name/.well-known/apple-app-site-association` using HTTPS with a valid certificate and no redirects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"activitycontinuation\": {\n        \"apps\": [ \"85HMA3YHJX.com.companyname.myrecipeapp\" ]\n    },\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"85HMA3YHJX.com.companyname.myrecipeapp\",\n                \"paths\": [ \"*\", \"/*\" ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Large Titles in C# - .NET MAUI iOS\nDESCRIPTION: This C# code snippet shows how to enable large titles programmatically on a NavigationPage using the fluent API and the `SetPrefersLargeTitles` method. It requires the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces. The `On<iOS>()` method ensures that this functionality is only applied to the iOS platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-large-title.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nvar navigationPage = new Microsoft.Maui.Controls.NavigationPage(new iOSLargeTitlePageCode());\nnavigationPage.On<iOS>().SetPrefersLargeTitles(true);\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Android Library in Project File\nDESCRIPTION: This XML snippet demonstrates how to remove a specific `.jar` file from being included as an `AndroidLibrary` in the build process. This is useful for excluding unwanted JAR files that might cause compilation errors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <AndroidLibrary Remove=\"AndroidStudio\\gradle\\wrapper\\gradle-wrapper.jar\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Looping on iOS/Mac Catalyst with AVPlayer\nDESCRIPTION: This C# code snippet shows how to enable video looping on iOS and Mac Catalyst by using `AVPlayer` and `NSNotificationCenter`. The `UpdateIsLooping` method adds an observer for the `AVPlayerItem.DidPlayToEndTimeNotification` notification. When the notification is received, the `PlayedToEnd` method is executed, which resumes playback from the beginning of the video.  If `Video.IsLooping` is false, the video pauses at the end.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        AVPlayerViewController _playerViewController;\n        Video _video;\n        NSObject? _playedToEndObserver;\n        ...\n\n        public void UpdateIsLooping()\n        {\n            DestroyPlayedToEndObserver();\n            if (_video.IsLooping)\n            {\n                _player.ActionAtItemEnd = AVPlayerActionAtItemEnd.None;\n                _playedToEndObserver = NSNotificationCenter.DefaultCenter.AddObserver(AVPlayerItem.DidPlayToEndTimeNotification, PlayedToEnd);\n            }\n            else\n                _player.ActionAtItemEnd = AVPlayerActionAtItemEnd.Pause;\n        }\n\n        void PlayedToEnd(NSNotification notification)\n        {\n            if (_video == null || notification.Object != _playerViewController.Player?.CurrentItem)\n                return;\n\n            _playerViewController.Player?.Seek(CMTime.Zero);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CurrentItem in XAML for Tab Selection in .NET MAUI\nDESCRIPTION: This XAML snippet shows how to programmatically select a tab when the Shell application is initialized by setting the `CurrentItem` property of the Shell object to a specific ShellContent element using `x:Reference`. This will select and display the corresponding tab on startup.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell ...\n       CurrentItem=\"{x:Reference dogsItem}\">\n    <TabBar>\n        <ShellContent Title=\"Cats\"\n                      Icon=\"cat.png\"\n                      ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n        <ShellContent x:Name=\"dogsItem\"\n                      Title=\"Dogs\"\n                      Icon=\"dog.png\"\n                      ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker UpdateMode in C#\nDESCRIPTION: This C# code snippet shows how to set the `UpdateMode` for a `DatePicker` on iOS using the fluent API.  It utilizes the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace and the `On<iOS>()` extension method. `UpdateMode.WhenFinished` specifies that the date is only selected after the user presses the \"Done\" button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/datepicker-selection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\ndatePicker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n```\n\n----------------------------------------\n\nTITLE: Add Using Statements to MainActivity (C#)\nDESCRIPTION: These using statements import necessary namespaces for push notification handling in the `MainActivity.cs` file. They provide access to Android application components, Firebase Cloud Messaging, and custom services for push notification actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.App;\nusing Android.Content;\nusing Android.Content.PM;\nusing Android.OS;\nusing PushNotificationsDemo.Services;\nusing Firebase.Messaging;\n```\n\n----------------------------------------\n\nTITLE: Disable Flyout XAML\nDESCRIPTION: This XAML snippet shows how to disable the flyout by setting the `Shell.FlyoutBehavior` attached property to `Disabled`. This prevents the user from opening the flyout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_25\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutBehavior=\"Disabled\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Consume Custom Control in XAML\nDESCRIPTION: This XAML snippet illustrates how to use a custom control within a `ContentPage`. It defines the namespace for the custom controls and then instantiates the `CustomEntry` control, setting properties like `Text` and `TextColor`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:MyMauiControl.Controls\"\n             x:Class=\"MyMauiControl.MainPage\">\n    <Grid>\n        <controls:CustomEntry Text=\"Hello world\"\n                              TextColor=\"Blue\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Adding BackgroundColor Setter to Focused Visual State in XAML\nDESCRIPTION: This XAML snippet adds a BackgroundColor Setter to the Focused visual state. This ensures that when the Entry is in the Focused state, it will have a Lime background in addition to the increased font size. This is necessary because visual states are mutually exclusive, and properties from previous states are unset when switching states.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<VisualState Name=\"Focused\">\n    <VisualState.Setters>\n        <Setter Property=\"FontSize\" Value=\"36\" />\n        <Setter Property=\"BackgroundColor\" Value=\"Lime\" />\n    </VisualState.Setters>\n</VisualState>\n```\n\n----------------------------------------\n\nTITLE: Handling ActionTriggered Event C#\nDESCRIPTION: Implements the event handler `NotificationActionTriggered` for the `IPushDemoNotificationActionService.ActionTriggered` event. This handler demonstrates how to receive and process actions triggered by push notifications. It displays an alert with the received action as a basic example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nvoid NotificationActionTriggered(object sender, PushDemoAction e)\n{\n    ShowActionAlert(e);\n}\n\nvoid ShowActionAlert(PushDemoAction action)\n{\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        Windows[0].Page?.DisplayAlert(\"Push notifications demo\", $\"{action} action received.\", \"OK\")\n            .ContinueWith((task) =>\n            {\n                if (task.IsFaulted)\n                    throw task.Exception;\n            });\n    });\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid NotificationActionTriggered(object sender, PushDemoAction e)\n{\n    ShowActionAlert(e);\n}\n\nvoid ShowActionAlert(PushDemoAction action)\n{\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        Windows[0].Page?.DisplayAlertAsync(\"Push notifications demo\", $\"{action} action received.\", \"OK\")\n            .ContinueWith((task) =>\n            {\n                if (task.IsFaulted)\n                    throw task.Exception;\n            });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Run on iOS Device\nDESCRIPTION: This command builds and runs the .NET MAUI app on a physical iOS device. It specifies the target runtime (`ios-arm64`) and the device UDID using MSBuild properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/cli.md#_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios -p:RuntimeIdentifier=ios-arm64 -p:_DeviceName=MY_SPECIFIC_UDID\n```\n\n----------------------------------------\n\nTITLE: Getting ProgramFiles path (constant) on Mac Catalyst (C#)\nDESCRIPTION: This snippet retrieves the ProgramFiles path on Mac Catalyst, hardcoding the path to \"/Applications\" to match macOS behavior. It's a direct replacement for Environment.GetFolderPath and doesn't require NSFileManager.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n\"/Applications\"\n```\n\n----------------------------------------\n\nTITLE: Implement PushDemoNotificationActionService C#\nDESCRIPTION: Implements the IPushDemoNotificationActionService interface, providing a mechanism to trigger actions based on received push notifications. It uses a dictionary to map action strings to PushDemoAction enum values. When an action is triggered, it raises the ActionTriggered event, notifying any registered handlers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsDemo.Models;\n\nnamespace PushNotificationsDemo.Services;\n\npublic class PushDemoNotificationActionService : IPushDemoNotificationActionService\n{\n    readonly Dictionary<string, PushDemoAction> _actionMappings = new Dictionary<string, PushDemoAction>\n    {\n        { \"action_a\", PushDemoAction.ActionA },\n        { \"action_b\", PushDemoAction.ActionB }\n    };\n\n    public event EventHandler<PushDemoAction> ActionTriggered = delegate { };\n\n    public void TriggerAction(string action)\n    {\n        if (!_actionMappings.TryGetValue(action, out var pushDemoAction))\n            return;\n\n        List<Exception> exceptions = new List<Exception>();\n\n        foreach (var handler in ActionTriggered?.GetInvocationList())\n        {\n            try\n            {\n                handler.DynamicInvoke(this, pushDemoAction);\n            }\n            catch (Exception ex)\n            {\n                exceptions.Add(ex);\n            }\n        }\n\n        if (exceptions.Any())\n            throw new AggregateException(exceptions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell TabBar Title Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell TabBar title color for an Element to lightgray using the `-maui-shell-tabbar-title` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_81\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-tabbar-title: lightgray;\n```\n\n----------------------------------------\n\nTITLE: Setting Flyout Header Behavior (XAML)\nDESCRIPTION: This XAML snippet shows how to collapse the flyout header as the user scrolls by setting the FlyoutHeaderBehavior property to CollapseOnScroll in a .NET MAUI Shell application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_13\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutHeaderBehavior=\"CollapseOnScroll\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notifications Demo Namespaces C#\nDESCRIPTION: Adds `using` statements for `PushNotificationsDemo.Models` and `PushNotificationsDemo.Services` in `App.xaml.cs`. These imports enable access to necessary models and services related to push notifications, such as `PushDemoAction` and `IPushDemoNotificationActionService`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nusing PushNotificationsDemo.Models;\nusing PushNotificationsDemo.Services;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull to Refresh in CollectionView (C#)\nDESCRIPTION: This C# snippet demonstrates how to enable pull-to-refresh functionality in a CollectionView using RefreshView. It creates a RefreshView, defines a command to handle the refresh, and sets the CollectionView as the content of the RefreshView.  It requires `Microsoft.Maui.Controls` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/populate-data.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nRefreshView refreshView = new RefreshView();\nICommand refreshCommand = new Command(() =>\n{\n    // IsRefreshing is true\n    // Refresh data here\n    refreshView.IsRefreshing = false;\n});\nrefreshView.Command = refreshCommand;\n\nCollectionView collectionView = new CollectionView();\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty, static (AnimalsViewModel vm) => vm.Animals);\nrefreshView.Content = collectionView;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Button in C# (<=net-maui-9.0)\nDESCRIPTION: This C# code demonstrates how to create a Button instance programmatically. The Text, VerticalOptions, and HorizontalOptions properties are set, and a lambda expression is used to handle the Clicked event. The event handler rotates a label by 360 degrees over 1 second.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nButton button = new Button\n{\n    Text = \"Click to Rotate Text!\",\n    VerticalOptions = LayoutOptions.Center,\n    HorizontalOptions = LayoutOptions.Center\n};\nbutton.Clicked += async (sender, args) => await label.RelRotateTo(360, 1000);\n```\n\n----------------------------------------\n\nTITLE: Set Home Indicator Visibility in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set the `PrefersHomeIndicatorAutoHidden` property on a `ContentPage` to control the visibility of the home indicator on iOS.  It requires the `ios` namespace to be declared, pointing to `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-home-indicator.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             ios:Page.PrefersHomeIndicatorAutoHidden=\"true\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Native Embedding with MauiContext in C#\nDESCRIPTION: This C# code demonstrates how to create a native view from a .NET MAUI view using `ToPlatform` with a `MauiContext`.  The `MauiContext` needs to be created using the `MauiApp.Services`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nvar mauiApp = MauiProgram.CreateMauiApp();\n\n#if ANDROID\nvar mauiContext = new MauiContext(mauiApp.Services, window);\n#else\nvar mauiContext = new MauiContext(mauiApp.Services);\n#endif\n\nvar mauiView = new MyMauiContent();\nvar nativeView = mauiView.ToPlatform(mauiContext);\n```\n\n----------------------------------------\n\nTITLE: Setting ShouldDelayContentTouches in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `ScrollView.ShouldDelayContentTouches` attached property to `false` to disable the delay of content touches on a ScrollView in iOS. This allows the content of the ScrollView to receive touch gestures more immediately.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/scrollview-content-touches.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<FlyoutPage ...\n            xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <FlyoutPage.Flyout>\n        <ContentPage Title=\"Menu\"\n                     BackgroundColor=\"Blue\" />\n    </FlyoutPage.Flyout>\n    <FlyoutPage.Detail>\n        <ContentPage>\n            <ScrollView x:Name=\"scrollView\"\n                        ios:ScrollView.ShouldDelayContentTouches=\"false\">\n                <StackLayout Margin=\"0,20\">\n                    <Slider />\n                    <Button Text=\"Toggle ScrollView DelayContentTouches\"\n                            Clicked=\"OnButtonClicked\" />\n                </StackLayout>\n            </ScrollView>\n        </ContentPage>\n    </FlyoutPage.Detail>\n</FlyoutPage>\n```\n\n----------------------------------------\n\nTITLE: Enable NavigationBar Translucency in XAML (.NET MAUI iOS)\nDESCRIPTION: This XAML code snippet demonstrates how to enable the translucent navigation bar on iOS for a NavigationPage in .NET MAUI by setting the `NavigationPage.IsNavigationBarTranslucent` attached property to `true`. It requires the `ios` namespace to be declared and imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/navigation-bar-translucent.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<NavigationPage ...\n                xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n                BackgroundColor=\"Blue\"\n                ios:NavigationPage.IsNavigationBarTranslucent=\"true\">\n  ...\n</NavigationPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Content Build Action for Windows Platform (XML)\nDESCRIPTION: This XML snippet demonstrates how to set the build action for files within a specific folder (Platforms\\Windows\\Assets\\Images) to 'Content' in a .NET MAUI project targeting the Windows platform.  It uses the TargetPath attribute to set the output path for each file, preserving the directory structure. The Condition ensures that this configuration is only applied when targeting Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/includes/content-xml.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows'))\">\n   <Content Include=\"Platforms\\Windows\\Assets\\Images\\**\" TargetPath=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting the Spacing property of a VerticalStackLayout - XAML\nDESCRIPTION: This XAML code demonstrates how to set the Spacing property of a VerticalStackLayout to define the space between child views.  The Spacing property is set to 10, which adds 10 device-independent units of space between the Label and Rectangle objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/verticalstacklayout.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.VerticalStackLayoutPage\">\n    <VerticalStackLayout Margin=\"20\"\n                         Spacing=\"10\">\n        <Label Text=\"Primary colors\" />\n        <Rectangle Fill=\"Red\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Yellow\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Blue\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Label Text=\"Secondary colors\" />\n        <Rectangle Fill=\"Green\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Orange\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n        <Rectangle Fill=\"Purple\"\n                   HeightRequest=\"30\"\n                   WidthRequest=\"300\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Specify Asset Pack in .NET MAUI Apps\nDESCRIPTION: This XML snippet shows how to define assets and specify an asset pack via the `AssetPack` attribute in .NET MAUI apps using the `MauiAsset` build action. The example places all files in `Resources\\Raw` into asset pack named `myassetpack`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset\n    Include=\"Resources\\Raw\\**\"\n    LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\"\n    AssetPack=\"myassetpack\" />\n```\n\n----------------------------------------\n\nTITLE: Avoid Layout Combinations XAML\nDESCRIPTION: This example shows an inefficient use of HorizontalStackLayout elements nested within a VerticalStackLayout to create a form-like layout.  This approach results in unnecessary layout calculations and should be avoided.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <VerticalStackLayout>\n        <HorizontalStackLayout>\n            <Label Text=\"Name:\" />\n            <Entry Placeholder=\"Enter your name\" />\n        </HorizontalStackLayout>\n        <HorizontalStackLayout>\n            <Label Text=\"Age:\" />\n            <Entry Placeholder=\"Enter your age\" />\n        </HorizontalStackLayout>\n        <HorizontalStackLayout>\n            <Label Text=\"Occupation:\" />\n            <Entry Placeholder=\"Enter your occupation\" />\n        </HorizontalStackLayout>\n        <HorizontalStackLayout>\n            <Label Text=\"Address:\" />\n            <Entry Placeholder=\"Enter your address\" />\n        </HorizontalStackLayout>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set Grid Item Spacing XAML\nDESCRIPTION: This code shows how to set the `VerticalItemSpacing` and `HorizontalItemSpacing` properties of a `GridItemsLayout` within a `CollectionView` using XAML. These properties define the vertical and horizontal space between items in the grid layout. The Span is set to 2, creating a two-column grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_21\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n       <GridItemsLayout Orientation=\"Vertical\"\n                        Span=\"2\"\n                        VerticalItemSpacing=\"20\"\n                        HorizontalItemSpacing=\"30\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Define IPushDemoNotificationActionService Interface C#\nDESCRIPTION: Defines an interface specific to the push notification demo app, extending the INotificationActionService. It includes an event, ActionTriggered, that is raised when a specific push notification action is triggered. This provides a strongly-typed approach to handling actions using the PushDemoAction enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsDemo.Models;\n\nnamespace PushNotificationsDemo.Services;\n\npublic interface IPushDemoNotificationActionService : INotificationActionService\n{\n    event EventHandler<PushDemoAction> ActionTriggered;\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Run .NET MAUI iOS App on Simulator\nDESCRIPTION: This command navigates to the project directory and then builds and runs the .NET MAUI app for iOS in the default simulator. It uses the `dotnet build` command with the `-t:Run` target and `-f net8.0-ios` framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/cli.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\ncd MyMauiApp\ndotnet build -t:Run -f net8.0-ios\n```\n\n----------------------------------------\n\nTITLE: Canceling a MAUI Animation\nDESCRIPTION: This code demonstrates how to cancel a custom animation using the AbortAnimation extension method.  It requires the owner and the name of the animation to be specified.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nthis.AbortAnimation (\"SimpleAnimation\");\n```\n\n----------------------------------------\n\nTITLE: Override OnAppLinkRequestReceived in .NET MAUI App (C#)\nDESCRIPTION: This code snippet shows how to override the `OnAppLinkRequestReceived` method in the .NET MAUI `App` class to handle universal links. It receives a `Uri` object containing the URL from the universal link and displays an alert with the URL for testing purposes. In a real application, this method should navigate the user to the content represented by the URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/universal-links.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNamespace;\n\npublic partial class App : Application\n{\n    ...\n\n    protected override async void OnAppLinkRequestReceived(Uri uri)\n    {\n        base.OnAppLinkRequestReceived(uri);\n\n        // Show an alert to test that the app link was received.\n        await Dispatcher.DispatchAsync(async () =>\n        {\n            await Windows[0].Page!.DisplayAlert(\"App link received\", uri.ToString(), \"OK\");\n        });\n\n        Console.WriteLine(\"App link: \" + uri.ToString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CancelCommand in MAUI\nDESCRIPTION: This code snippet shows the implementation of the `CancelCommand` within the `PersonCollectionViewModel`. The `execute` method removes the property changed handler from the `PersonEdit` object and resets the editing state. The `canExecute` method checks if the `IsEditing` property is true, indicating that a `PersonViewModel` is being edited. The `CancelCommand` constructor takes the `execute` and `canExecute` delegates as parameters.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/commanding.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class PersonCollectionViewModel : INotifyPropertyChanged\n{\n    ···\n    public PersonCollectionViewModel()\n    {\n        ···\n        CancelCommand = new Command(\n            execute: () =>\n            {\n                PersonEdit.PropertyChanged -= OnPersonEditPropertyChanged;\n                PersonEdit = null;\n                IsEditing = false;\n                RefreshCanExecutes();\n            },\n            canExecute: () =>\n            {\n                return IsEditing;\n            });\n    }\n    ···\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing of the AVPlayer Observer on iOS/Mac Catalyst\nDESCRIPTION: This C# code snippet demonstrates how to properly dispose of the observer added for video looping on iOS/Mac Catalyst. The `Dispose` override calls the `DestroyPlayedToEndObserver` method, which removes the observer from `NSNotificationCenter` and disposes of the `NSObject`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : UIView\n{\n    AVPlayer _player;\n    AVPlayerViewController _playerViewController;\n    Video _video;\n    NSObject? _playedToEndObserver;\n    ...\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            if (_player != null)\n            {\n                DestroyPlayedToEndObserver();\n                ...\n            }\n            ...\n        }\n\n        base.Dispose(disposing);\n    }\n\n    void DestroyPlayedToEndObserver()\n    {\n        if (_playedToEndObserver != null)\n        {\n            NSNotificationCenter.DefaultCenter.RemoveObserver(_playedToEndObserver);\n            DisposeObserver(ref _playedToEndObserver);\n        }\n    }\n\n    void DisposeObserver(ref NSObject? disposable)\n    {\n        disposable?.Dispose();\n        disposable = null;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Font Size CSS in .NET MAUI\nDESCRIPTION: Sets the font size for various .NET MAUI controls like Button, DatePicker, Editor, Entry, Label, Picker, SearchBar, TimePicker, and Span. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_28\n\nLANGUAGE: CSS\nCODE:\n```\nfont-size: 12;\n```\n\n----------------------------------------\n\nTITLE: Adding Shadows to Objects in C#\nDESCRIPTION: This snippet shows how to add shadows to filled objects on a .NET MAUI canvas using the `SetShadow` method. It sets the `FillColor`, calls `SetShadow` with specified offset, blur, and color, and then fills the object with `FillRectangle`, `FillEllipse`, and `FillRoundedRectangle` methods.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\ncanvas.FillColor = Colors.Red;\ncanvas.SetShadow(new SizeF(10, 10), 4, Colors.Grey);\ncanvas.FillRectangle(10, 10, 90, 100);\n\ncanvas.FillColor = Colors.Green;\ncanvas.SetShadow(new SizeF(10, -10), 4, Colors.Grey);\ncanvas.FillEllipse(110, 10, 90, 100);\n\ncanvas.FillColor = Colors.Blue;\ncanvas.SetShadow(new SizeF(-10, 10), 4, Colors.Grey);\ncanvas.FillRoundedRectangle(210, 10, 90, 100, 25);\n```\n\n----------------------------------------\n\nTITLE: CollectionView with Grouped Data XAML\nDESCRIPTION: This XAML snippet configures a CollectionView to display grouped data. The ItemsSource is bound to a property named Animals, and the IsGrouped property is set to true. The data will be displayed using the ToString() method of the data models, since no ItemTemplate is specified.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Animals}\"\n                IsGrouped=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implement a NO-OP Platform Behavior\nDESCRIPTION: This code shows how to create a NO-OP platform behavior for Windows using a partial class. It inherits from PlatformBehavior<Image, FrameworkElement> but contains no implementation, effectively disabling the behavior on the Windows platform. Requires the Microsoft.UI.Xaml namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.UI.Xaml;\n\nnamespace BehaviorsDemos\n{\n    public partial class TintColorBehavior : PlatformBehavior<Image, FrameworkElement>\n    {\n        // NO-OP on Windows\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering NotificationHubService as Singleton in C#\nDESCRIPTION: This C# code snippet demonstrates how to register the NotificationHubService as a singleton instance of INotificationService in the ASP.NET Core dependency injection container. It configures API Key authentication and binds the NotificationHubOptions from the appsettings.json configuration. It uses builder.Services.AddSingleton and builder.Services.AddOptions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsAPI.Authentication;\nusing PushNotificationsAPI.Services;\nusing PushNotificationsAPI.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n\nbuilder.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = ApiKeyAuthOptions.DefaultScheme;\n    options.DefaultChallengeScheme = ApiKeyAuthOptions.DefaultScheme;\n}).AddApiKeyAuth(builder.Configuration.GetSection(\"Authentication\").Bind);\n\nbuilder.Services.AddSingleton<INotificationService, NotificationHubService>();\nbuilder.Services.AddOptions<NotificationHubOptions>()\n    .Configure(builder.Configuration.GetSection(\"NotificationHub\").Bind)\n    .ValidateDataAnnotations();\n\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Soft Keyboard Input (Date) - XAML\nDESCRIPTION: This XAML snippet shows how to enable soft keyboard input for `Date` on an `Entry` control in .NET MAUI 9. Setting the `Keyboard` property to `Date` configures the entry to use the appropriate soft keyboard for date input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Keyboard=\"Date\" />\n```\n\n----------------------------------------\n\nTITLE: Uninstall .NET SDK Package\nDESCRIPTION: This command uninstalls a specific .NET SDK package using its GUID. The `/q` flag performs a silent uninstall, and `IGNOREDEPENDENCIES=ALL` forces the uninstall even if dependencies exist. Replace `{EEC1BB5F-3391-43C2-810E-42D78ADF3140}` with the actual GUID obtained from the previous `reg query` command.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nmsiexec /x {EEC1BB5F-3391-43C2-810E-42D78ADF3140} /q IGNOREDEPENDENCIES=ALL\n```\n\n----------------------------------------\n\nTITLE: Configure MainActivity LaunchMode (C#)\nDESCRIPTION: This C# attribute sets the `LaunchMode` for the `MainActivity` to `SingleTop`. This ensures that a new instance of the `MainActivity` is not created if it already exists in the activity stack. Instead, the existing instance will receive a new `Intent` via the `OnNewIntent` method, which is important for handling notification actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n[Activity(\n        Theme = \"@style/Maui.SplashTheme\",\n        MainLauncher = true,\n        LaunchMode = LaunchMode.SingleTop,\n        ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]\n```\n\n----------------------------------------\n\nTITLE: Set TabbedPage Toolbar Placement in C# (Android)\nDESCRIPTION: This C# code uses the fluent API to set the TabbedPage toolbar placement to the bottom of the screen on Android. It requires the Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-toolbar-placement.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;\n...\n\nOn<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetToolbarPlacement(ToolbarPlacement.Bottom);\n```\n\n----------------------------------------\n\nTITLE: Customize Group Footer XAML\nDESCRIPTION: This XAML code customizes the group footer of the CollectionView. It defines a `GroupFooterTemplate` that displays the total number of animals in each group using a Label and StringFormat. This illustrates how to display summary information in group footers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/grouping.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Animals}\"\n                IsGrouped=\"true\">\n    ...\n    <CollectionView.GroupFooterTemplate>\n        <DataTemplate x:DataType=\"models:AnimalGroup\">\n            <Label Text=\"{Binding Count, StringFormat='Total animals: {0:D}'}\"\n                   Margin=\"0,0,0,10\" />\n        </DataTemplate>\n    </CollectionView.GroupFooterTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Writing and Sharing a File with FileProvider Paths Override - C#\nDESCRIPTION: This C# code snippet demonstrates how to write a file to the sharing-root directory within the app's cache and then share it using the Launcher.OpenAsync method. The code first creates the sharing-root directory if it doesn't exist, writes the file to that directory, and then shares the file using an OpenFileRequest object. This ensures that the file is shared using the configured file provider paths, enhancing security.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/android-fileproviderpaths.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Write into the specific sub-directory\nvar dir = Path.Combine(FileSystem.CacheDirectory, \"sharing-root\");  \nDirectory.CreateDirectory(dir);\nvar file = Path.Combine(dir, \"mydata.txt\");\nawait File.WriteAllTextAsync(file, $\"My data: {count}\");\n\n// Share the file\nawait Launcher.OpenAsync(new OpenFileRequest\n{\n  Title = \"My data\",\n  File = new ReadOnlyFile(file),\n});\n```\n\n----------------------------------------\n\nTITLE: Playing Video from Resource on Android with VideoView\nDESCRIPTION: This code snippet demonstrates how to play a video from a resource file on Android using the `VideoView`. It constructs a content URI from the app's package name and the video's filename, and then sets this URI as the video source for the `VideoView`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        bool _isPrepared;\n        Context _context;\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            _isPrepared = false;\n            bool hasSetSource = false;\n            ...\n\n            else if (_video.Source is ResourceVideoSource)\n            {\n                string package = Context.PackageName;\n                string path = (_video.Source as ResourceVideoSource).Path;\n                if (!string.IsNullOrWhiteSpace(path))\n                {\n                    string assetFilePath = \"content://\" + package + \"/\" + path;\n                    _videoView.SetVideoPath(assetFilePath);\n                    hasSetSource = true;\n                }\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical StackLayout XAML\nDESCRIPTION: Demonstrates creating a vertically oriented StackLayout using XAML. It contains Label and BoxView objects to display primary and secondary colors. The Margin property is set for spacing around the StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.XAML.VerticalStackLayoutPage\"\n             Title=\"Vertical StackLayout demo\">\n    <StackLayout Margin=\"20\">\n        <Label Text=\"Primary colors\" />\n        <BoxView Color=\"Red\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Yellow\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Blue\"\n                 HeightRequest=\"40\" />\n        <Label Text=\"Secondary colors\" />\n        <BoxView Color=\"Green\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Orange\"\n                 HeightRequest=\"40\" />\n        <BoxView Color=\"Purple\"\n                 HeightRequest=\"40\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining FileVideoSource Class in MAUI\nDESCRIPTION: This code snippet defines the `FileVideoSource` class in MAUI, which is used to access videos in the device's video library. It includes a `File` property backed by a bindable property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class FileVideoSource : VideoSource\n    {\n        public static readonly BindableProperty FileProperty =\n            BindableProperty.Create(nameof(File), typeof(string), typeof(FileVideoSource));\n\n        public string File\n        {\n            get { return (string)GetValue(FileProperty); }\n            set { SetValue(FileProperty, value); }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Path with NonZero Winding Mode in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to fill a five-pointed star path using the `NonZero` winding mode in .NET MAUI graphics. The `FillPath` method is used without explicitly specifying the winding mode, which defaults to `NonZero`. The path is then outlined with a red stroke.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/windingmodes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nfloat radius = 0.45f * Math.Min(dirtyRect.Width, dirtyRect.Height);\n\nPathF path = new PathF();\npath.MoveTo(dirtyRect.Center.X, dirtyRect.Center.Y - radius);\n\nfor (int i = 1; i < 5; i++)\n{\n    double angle = i * 4 * Math.PI / 5;\n    path.LineTo(new PointF(radius * (float)Math.Sin(angle) + dirtyRect.Center.X, -radius * (float)Math.Cos(angle) + dirtyRect.Center.Y));\n}\npath.Close();\n\ncanvas.StrokeSize = 15;\ncanvas.StrokeLineJoin = LineJoin.Round;\ncanvas.StrokeColor = Colors.Red;\ncanvas.FillColor = Colors.Blue;\ncanvas.FillPath(path); // Overload automatically uses a NonZero winding mode\ncanvas.DrawPath(path);\n```\n\n----------------------------------------\n\nTITLE: Setting Handler Disconnect Policy in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `HandlerProperties.DisconnectPolicy` attached property to `Manual` for a `Video` control. This prevents the handler from being automatically disconnected when navigating away from the page or control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<controls:Video x:Name=\"video\"\n                HandlerProperties.DisconnectPolicy=\"Manual\"\n                Source=\"video.mp4\"\n                AutoPlay=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Image Directory in XAML for .NET MAUI Windows\nDESCRIPTION: This XAML code snippet demonstrates how to set the default image directory for a .NET MAUI application on Windows. It defines the `ImageDirectory` property within the `<Application>` tag, specifying the directory where image assets are located. The `xmlns:windows` namespace is used to access the Windows-specific configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/default-image-directory.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\"\n             ...\n             windows:Application.ImageDirectory=\"Assets\">\n    ...\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources by Key in C# (.NET MAUI)\nDESCRIPTION: This C# code snippet demonstrates how to retrieve a resource from a page's resource dictionary using TryGetValue. It attempts to retrieve the \"Primary\" color and apply it to a label's TextColor. This approach avoids KeyNotFoundExceptions if the resource is not found. Requires a Label control instance named `myLabel`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/resource-dictionaries.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Retrieve the Primary color value which is in the page's resource dictionary\nvar hasValue = Resources.TryGetValue(\"Primary\", out object primaryColor);\n\nif (hasValue)\n{\n    myLabel.TextColor = (Color)primaryColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Check AEHD Driver Status (AEHD 2.0 and lower) (cmd)\nDESCRIPTION: This command checks the status of the Android Emulator Hypervisor Driver (AEHD) for versions 2.0 and lower. It queries the service control manager to determine if the 'gvm' service is running, stopped, or encountering errors. The expected output when running shows the service is in the 'RUNNING' state (STATE : 4  RUNNING).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/hardware-acceleration.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nsc query gvm\n```\n\n----------------------------------------\n\nTITLE: Configure Folder-Based Multi-Targeting for MacCatalyst\nDESCRIPTION: This XML snippet configures the build system to exclude C# files located within the MacCatalyst folder (or its subfolders) when not building for MacCatalyst. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\MacCatalyst\\**\\*.cs\" />\n  <None Include=\"**\\MacCatalyst\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configure App Transport Security (ATS) - Disable for App\nDESCRIPTION: This code snippet shows how to disable App Transport Security (ATS) for an entire iOS/Mac Catalyst app.  It's strongly recommended to use `NSExceptionDomains` instead of disabling ATS entirely using `NSAllowsArbitraryLoads`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n\t<key>NSAllowsArbitraryLoads</key>\n\t<true/>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Enable WebView Zoom Controls in XAML (.NET MAUI)\nDESCRIPTION: This XAML snippet demonstrates how to enable pinch-to-zoom and display zoom controls on a .NET MAUI WebView for the Android platform. It requires the inclusion of the Android-specific namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/webview-zoom-controls.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\">\n    <WebView Source=\"https://www.microsoft.com\"\n             android:WebView.EnableZoomControls=\"true\"\n             android:WebView.DisplayZoomControls=\"true\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: AutoFill Credential Provider Entitlement XML\nDESCRIPTION: Defines the AutoFill credential provider entitlement that allows an app to provide usernames and passwords for AutoFill. It uses the `com.apple.developer.authentication-services.autofill-credential-provider` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.authentication-services.autofill-credential-provider</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Define Build Properties in .NET MAUI Project File (XML)\nDESCRIPTION: This XML snippet demonstrates how to define build properties in a .NET MAUI project file for a Mac Catalyst app. These properties control code signing, packaging, and runtime behavior.  Configuration, TargetFramework, and Platform conditions must be met for this property group to be applied.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-maccatalyst|AnyCPU'\">\n  <MtouchLink>SdkOnly</MtouchLink>\n  <EnableCodeSigning>True</EnableCodeSigning>\n  <EnablePackageSigning>true</EnablePackageSigning>\n  <CreatePackage>true</CreatePackage>\n  <CodesignKey>Developer ID Application: John Smith (AY2GDE9QM7)</CodesignKey>\n  <CodesignProvision>MyMauiApp (Non-App Store)</CodesignProvision>\n  <CodesignEntitlements>Platforms\\MacCatalyst\\Entitlements.plist</CodesignEntitlements>\n  <PackageSigningKey>Developer ID Installer: John Smith (AY2GDE9QM7)</PackageSigningKey>\n  <UseHardenedRuntime>true</UseHardenedRuntime>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Dispose Method for MauiVideoPlayer\nDESCRIPTION: This code snippet shows the `Dispose` method override in the `MauiVideoPlayer` class. This method is crucial for releasing native resources when the video player is no longer needed. It handles the disposal of the `AVPlayer` and `AVPlayerViewController` instances, ensuring that the video playback is stopped and that no memory leaks occur when navigating away from the video playback page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : UIView\n{\n    AVPlayer _player;\n    AVPlayerViewController _playerViewController;\n    Video _video;\n    ...\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            if (_player != null)\n            {\n                DestroyPlayedToEndObserver();\n                _player.ReplaceCurrentItemWithPlayerItem(null);\n                _player.Dispose();\n            }\n            if (_playerViewController != null)\n                _playerViewController.Dispose();\n\n            _video = null;\n        }\n\n        base.Dispose(disposing);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Folder-Based Multi-Targeting for Windows\nDESCRIPTION: This XML snippet configures the build system to exclude C# files located within the Windows folder (or its subfolders) when not building for Windows. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Windows -->\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true\">\n  <Compile Remove=\"**\\Windows\\**\\*.cs\" />\n  <None Include=\"**\\Windows\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Create Path with Geometry objects in XAML\nDESCRIPTION: This XAML code shows how to create a triangle using Geometry objects, specifically PathGeometry, PathFigure, and LineSegment. The PathGeometry contains a PathFigure with a starting point and two line segments that define the triangle's edges.  The IsClosed property connects the last segment to the starting point.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Start\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure IsClosed=\"True\"\n                                StartPoint=\"10,100\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <LineSegment Point=\"100,100\" />\n                                <LineSegment Point=\"100,50\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Implement DataTemplateSelector C#\nDESCRIPTION: This C# code snippet implements a DataTemplateSelector that selects different DataTemplates based on a search query.  It defines properties for DefaultTemplate and OtherTemplate and overrides the OnSelectTemplate method to return the appropriate template based on the input item (search query).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class SearchTermDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate DefaultTemplate { get; set; }\n    public DataTemplate OtherTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        string query = (string)item;\n        return query.ToLower().Equals(\"xamarin\") ? OtherTemplate : DefaultTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Centered Radial Gradient in MAUI Graphics (C#)\nDESCRIPTION: This code snippet demonstrates how to create a centered radial gradient using the RadialGradientPaint class in MAUI Graphics. It sets the StartColor to red and the EndColor to dark blue. The Center property defaults to (0.5, 0.5), and the Radius property defaults to 0.5, which positions the center of the gradient in the middle of the rectangle. The gradient is then used to fill a rounded rectangle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nRadialGradientPaint radialGradientPaint = new RadialGradientPaint\n{\n    StartColor = Colors.Red,\n    EndColor = Colors.DarkBlue\n    // Center is already (0.5,0.5)\n    // Radius is already 0.5\n};\n\nRectF radialRectangle = new RectF(10, 10, 200, 100);\ncanvas.SetFillPaint(radialGradientPaint, radialRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(radialRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Border Width CSS in .NET MAUI\nDESCRIPTION: Sets the border width for .NET MAUI Border, Button, and ImageButton. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\nborder-width: .5;\n```\n\n----------------------------------------\n\nTITLE: Register Attribute and Connector Methods in C#\nDESCRIPTION: This C# code demonstrates the use of the `Register` attribute and connector methods for static registration of Java methods. The `Register` attribute specifies the Java method name, JNI signature, and connector method. The connector method (`GetOnCreate_Landroid_os_Bundle_Handler`) creates a delegate that enables invocation of the native callback method (`n_OnCreate_Landroid_os_Bundle_`).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class MainActivity : AppCompatActivity\n{\n    // Connector backing field\n    static Delegate? cb_onCreate_Landroid_os_Bundle_;\n\n    // Connector method\n    static Delegate GetOnCreate_Landroid_os_Bundle_Handler()\n    {\n        if (cb_onCreate_Landroid_os_Bundle_ == null)\n            cb_onCreate_Landroid_os_Bundle_ = JNINativeWrapper.CreateDelegate((_JniMarshal_PPL_V)n_OnCreate_Landroid_os_Bundle_);\n        return cb_onCreate_Landroid_os_Bundle_;\n    }\n\n    // Native callback\n    static void n_OnCreate_Landroid_os_Bundle_(IntPtr jnienv, IntPtr native__this, IntPtr native_savedInstanceState)\n    {\n        var __this = global::Java.Lang.Object.GetObject<Android.App.Activity>(jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;\n        var savedInstanceState = global::Java.Lang.Object.GetObject<Android.OS.Bundle>(native_savedInstanceState, JniHandleOwnership.DoNotTransfer);\n        __this.OnCreate(savedInstanceState);\n    }\n\n    // Target method\n    [Register(\"onCreate\", \"(Landroid/os/Bundle;)V\", \"GetOnCreate_Landroid_os_Bundle_Handler\")]\n    protected virtual unsafe void OnCreate(Android.OS.Bundle? savedInstanceState)\n    {\n        const string __id = \"onCreate.(Landroid/os/Bundle;)V\";\n        try\n        {\n            JniArgumentValue* __args = stackalloc JniArgumentValue[1];\n            __args[0] = new JniArgumentValue((savedInstanceState == null) ? IntPtr.Zero : ((global::Java.Lang.Object)savedInstanceState).Handle);\n            _members.InstanceMethods.InvokeVirtualVoidMethod(__id, this, __args);\n        }\n        finally\n        {\n            global::System.GC.KeepAlive(savedInstanceState);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Class Definition in .NET MAUI 9.0 C#\nDESCRIPTION: This code snippet shows the structure of the `App` class in a .NET MAUI application for .NET MAUI 9.0 and later.  The `App` class derives from `Application`. The constructor calls `InitializeComponent()`. It overrides the `CreateWindow` method, which creates a new `Window` whose initial content is set to a new `AppShell` object. The `IActivationState` parameter provides activation information.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp;\n\npublic class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n\n    protected override Window CreateWindow(IActivationState? activationState)\n    {\n        return new Window(new AppShell());\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Bind HeightRequest to WidthRequest using Self Binding in XAML\nDESCRIPTION: This XAML snippet demonstrates how to bind the HeightRequest property of a BoxView to its WidthRequest property using the Self relative binding mode. This ensures that the BoxView is always a square.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/relative-bindings.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<BoxView x:DataType=\"ContentPage\"\n         Color=\"Red\"\n         WidthRequest=\"200\"\n         HeightRequest=\"{Binding Source={RelativeSource Self}, Path=WidthRequest}\"\n         HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Scale Transform - Scaling a Rounded Rectangle and Text (C#)\nDESCRIPTION: This example demonstrates the Scale transform, which changes the size of graphical objects. It draws a rounded rectangle and text, then applies a scaling factor of 2 in both horizontal and vertical directions.  Subsequent drawing calls result in scaled versions of the original objects. Requires the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.StrokeDashPattern = new float[] { 2, 2 };\ncanvas.FontColor = Colors.Blue;\ncanvas.FontSize = 18;\n\ncanvas.DrawRoundedRectangle(50, 50, 80, 20, 5);\ncanvas.DrawString(\".NET MAUI\", 50, 50, 80, 20, HorizontalAlignment.Left, VerticalAlignment.Top);\n\ncanvas.Scale(2, 2);\ncanvas.DrawRoundedRectangle(50, 100, 80, 20, 5);\ncanvas.DrawString(\".NET MAUI\", 50, 100, 80, 20, HorizontalAlignment.Left, VerticalAlignment.Top);\n```\n\n----------------------------------------\n\nTITLE: Create Distance Object Using FromKilometers - C#\nDESCRIPTION: This C# code creates a Distance object using the FromKilometers factory method, specifying the distance in kilometers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nDistance distance1 = Distance.FromKilometers(1.45); // argument represents the number of kilometers\n```\n\n----------------------------------------\n\nTITLE: Binding to TimePicker's TotalSeconds Property (XAML)\nDESCRIPTION: Creates a data binding that references the TotalSeconds property of the TimeSpan value returned by the Time property of a TimePicker control.  It demonstrates binding to a sub-property. Requires a TimePicker named 'timePicker' to be defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n{Binding x:DataType='TimePicker',\n         Source={x:Reference timePicker},\n         Path=Time.TotalSeconds}\n```\n\n----------------------------------------\n\nTITLE: Clearing Selected Item on NavigatedTo Event in .NET MAUI\nDESCRIPTION: This C# code snippet shows how to clear the selected item in a `CollectionView` when the page is navigated to. This is done within the `NavigatedTo` event handler in the code-behind. The `notesCollection` variable must be properly initialized and refer to the desired CollectionView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/bugs.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ContentPage_NavigatedTo(object sender, NavigatedToEventArgs e)\n{\n    notesCollection.SelectedItem = null;\n}\n```\n\n----------------------------------------\n\nTITLE: CollectionView Header and Footer as Views in C#\nDESCRIPTION: Creates a CollectionView in C# where the header and footer are set to StackLayouts containing Labels. This allows for more structured and styled headers and footers compared to simple string implementations. The CollectionView's `ItemsSourceProperty` is bound to a `Monkeys` property of a `MonkeysViewModel` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nStackLayout headerStackLayout = new StackLayout();\nheader.StackLayout.Add(new Label { Text = \"Monkeys\", ... } );\nStackLayout footerStackLayout = new StackLayout();\nfooterStackLayout.Add(new Label { Text = \"Friends of Xamarin Monkey\", ... } );\n\nCollectionView collectionView = new CollectionView\n{\n    Header = headerStackLayout,\n    Footer = footerStackLayout            \n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Registering a Device with Apple Developer Account for Ad-Hoc Distribution\nDESCRIPTION: This snippet describes how to register a macOS device with the Apple Developer Account by providing the Hardware UUID or Provisioning UDID. This is a prerequisite for creating an ad-hoc provisioning profile which allows the app to be installed on specified Macs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-ad-hoc.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Embedded Window Provider\nDESCRIPTION: This code snippet defines the `EmbeddedWindowProvider` class, which provides access to the platform window and the .NET MAUI window in an embedded environment. It uses weak references to prevent memory leaks and allows setting and retrieving the window instances. It uses preprocessor directives for platform-specific implementations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\nusing PlatformWindow = Android.App.Activity;\n#elif IOS || MACCATALYST\nusing PlatformWindow = UIKit.UIWindow;\n#elif WINDOWS\nusing PlatformWindow = Microsoft.UI.Xaml.Window;\n#endif\n\nnamespace Microsoft.Maui.Controls;\n\npublic class EmbeddedWindowProvider\n{\n    WeakReference<PlatformWindow?>? platformWindow;\n    WeakReference<Window?>? window;\n\n    public PlatformWindow? PlatformWindow => Get(platformWindow);\n    public Window? Window => Get(window);\n\n    public void SetWindow(PlatformWindow? platformWindow, Window? window)\n    {\n        this.platformWindow = new WeakReference<PlatformWindow?>(platformWindow);\n        this.window = new WeakReference<Window?>(window);\n    }\n\n    private static T? Get<T>(WeakReference<T?>? weak) where T : class =>\n        weak is not null && weak.TryGetTarget(out var target) ? target : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IWindowCreator - C#\nDESCRIPTION: This C# code snippet demonstrates how to decouple window management from the `App` class by implementing the `IWindowCreator` interface. The `CreateWindow` method creates and configures a `Window` object with a basic `ContentPage`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class WindowCreator : IWindowCreator\n{\n    public Window CreateWindow(Application app, IActivationState activationState)\n    {\n        var window = new Window(new ContentPage\n        {\n            Content = new Grid\n            {\n                new Label\n                {\n                    Text = \"Hello from IWindowCreator\",\n                    HorizontalOptions = LayoutOptions.Center,\n                    VerticalOptions = LayoutOptions.Center\n                }\n            }\n        });\n\n        return window;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set ListView Item Separator Color (XAML)\nDESCRIPTION: Demonstrates how to change the color of the separators between ListView items using the `SeparatorColor` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_21\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ...\n          SeparatorColor=\"Blue\" />\n```\n\n----------------------------------------\n\nTITLE: Add Vibrate Permission to Android Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the `VIBRATE` permission to the AndroidManifest.xml file. This is necessary for enabling haptic feedback functionality on Android devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/haptic-feedback.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n----------------------------------------\n\nTITLE: Attaching PointerGestureRecognizer with Events - XAML\nDESCRIPTION: This XAML snippet demonstrates how to attach a PointerGestureRecognizer to an Image control and handle the PointerEntered, PointerExited, and PointerMoved events.  The event handlers are defined in the code-behind file. The gesture recognizer is added to the Image's GestureRecognizers collection. The handler methods are `OnPointerEntered`, `OnPointerExited`, and `OnPointerMoved`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pointer.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\">\n    <Image.GestureRecognizers>\n        <PointerGestureRecognizer PointerEntered=\"OnPointerEntered\"\n                                  PointerExited=\"OnPointerExited\"\n                                  PointerMoved=\"OnPointerMoved\" />\n  </Image.GestureRecognizers>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Setting font size in .NET MAUI with C#\nDESCRIPTION: This C# snippet demonstrates how to set the font size of a `Label` control programmatically using the `FontSize` property in a .NET MAUI application.  The font size is defined as a `double` value representing the size in device-independent units, ensuring consistent scaling across different screen resolutions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label = new Label\n{\n    Text = \"Font size 24\",\n    FontSize = 24\n};\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to End in XAML\nDESCRIPTION: This XAML code snippet shows how to set the `SnapPointsAlignment` property to `End` in a `CarouselView` using XAML. When the user stops scrolling, the trailing edge of the item will align with the trailing edge of the view. The `Monkeys` collection needs to be bound to the `ItemsSource` property of the `CarouselView`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_16\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\"\n              PeekAreaInsets=\"100\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Horizontal\"\n                           SnapPointsType=\"MandatorySingle\"\n                           SnapPointsAlignment=\"End\" />\n    </CarouselView.ItemsLayout>\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Create AssetPackManager and Register Listener C#\nDESCRIPTION: Creates an `IAssetPackManager` instance and registers the `Listener_StateUpdate` event handler.  This involves instantiating `AssetPackManagerFactory` and `AssetPackStateUpdateListenerWrapper`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nassetPackManager = AssetPackManagerFactory.GetInstance (this);\nlistener = new AssetPackStateUpdateListenerWrapper();\nlistener.StateUpdate += Listener_StateUpdate;\n```\n\n----------------------------------------\n\nTITLE: Creating a MenuItem in C# for ListView Context Menu\nDESCRIPTION: This C# code demonstrates how to create a MenuItem programmatically and add it to a ListView's context menu. It creates a DataTemplate that contains a ViewCell with a Label for displaying the item text and a MenuItem added to the ViewCell's ContextActions. The Monkey object is used for data binding to display monkey names in a list view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menuitem.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Return a ViewCell instance that is used as the template for each list item\nDataTemplate dataTemplate = new DataTemplate(() =>\n{\n    // A Label displays the list item text\n    Label label = new Label();\n    label.SetBinding(Label.TextProperty, static (Monkey monkey) => monkey.Name);\n\n    // A ViewCell serves as the DataTemplate\n    ViewCell viewCell = new ViewCell\n    {\n        View = label\n    };\n\n    // Add a MenuItem to the ContextActions\n    MenuItem menuItem = new MenuItem\n    {\n        Text = \"Context menu option\"\n    };\n    viewCell.ContextActions.Add(menuItem);\n\n    // Return the custom ViewCell to the DataTemplate constructor\n    return viewCell;\n});\n\nListView listView = new ListView\n{\n    ...\n    ItemTemplate = dataTemplate\n};\n```\n\n----------------------------------------\n\nTITLE: Data Binding a Stepper in XAML\nDESCRIPTION: This XAML code demonstrates how to bind the Value property of a Stepper control to the Rotation and Text properties of Labels. The Stepper is named '_stepper' and referenced in the bindings.  StringFormat is used for the Text property to display the value.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StepperDemo.BasicStepperBindingsPage\"\n             Title=\"Basic Stepper Bindings\">\n    <StackLayout Margin=\"20\">\n        <Label Text=\"ROTATING TEXT\"\n               Rotation=\"{Binding x:DataType='Stepper', Source={x:Reference _stepper}, Path=Value}\"\n               FontSize=\"18\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n        <Stepper x:Name=\"_stepper\"\n                 Maximum=\"360\"\n                 Increment=\"30\"\n                 HorizontalOptions=\"Center\" />\n        <Label Text=\"{Binding x:DataType='Stepper', Source={x:Reference _stepper}, Path=Value, StringFormat='The Stepper value is {0:F0}'}\"\n               HorizontalOptions=\"Center\"\n               VerticalOptions=\"Center\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Enable fast scrolling in ListView using XAML - .NET MAUI Android\nDESCRIPTION: This XAML snippet demonstrates how to enable fast scrolling in a .NET MAUI ListView on Android by setting the `ListView.IsFastScrollEnabled` attached property to `true`. The `android` namespace is used to access the Android-specific configuration. Requires the `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace to be imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/listview-fast-scrolling.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\"\n             xmlns:local=\"clr-namespace:PlatformSpecifics\"\n             x:DataType=\"local:ListViewViewModel\">\n    <StackLayout>\n        ...\n        <ListView ItemsSource=\"{Binding GroupedEmployees}\"\n                  GroupDisplayBinding=\"{Binding Key}\"\n                  IsGroupingEnabled=\"true\"\n                  android:ListView.IsFastScrollEnabled=\"true\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Display a Map using XAML\nDESCRIPTION: This XAML snippet demonstrates how to add a Map control to a ContentPage using the maps namespace. The Map control is named 'map'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:maps=\"http://schemas.microsoft.com/dotnet/2021/maui/maps\">\n    <maps:Map x:Name=\"map\" />\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: List Keystore Contents with keytool\nDESCRIPTION: This command lists the keys stored in a keystore file. It uses the keytool utility with the -list option to display the contents of the specified keystore.  This is useful for verifying the keystore's contents and confirming the presence of the expected keys.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkeytool -list -keystore {filename}.keystore\n```\n\n----------------------------------------\n\nTITLE: Saving Image to Stream in .NET MAUI\nDESCRIPTION: This code shows how to save a downsized image to a memory stream in .NET MAUI. It loads an image from an embedded resource stream, downsizes it to a maximum dimension of 150 pixels, and then saves the downsized image to a memory stream.  The original image is disposed after downsizing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/images.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Graphics.Platform;\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\n// Save image to a memory stream\nif (image != null)\n{\n    IImage newImage = image.Downsize(150, true);\n    using (MemoryStream memStream = new MemoryStream())\n    {\n        newImage.Save(memStream);\n        // Reset destination stream position to 0 if saving to a file\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Targeting in .NET MAUI XML\nDESCRIPTION: This XML snippet configures filename-based multi-targeting in a .NET MAUI project. It removes compilation of platform-specific files based on the target framework and prevents them from being included as content. This allows having platform specific implementations, like VideoHandler.Android.cs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Android -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-android')) != true\">\n  <Compile Remove=\"**\\*.Android.cs\" />\n  <None Include=\"**\\*.Android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- iOS and Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true AND $(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MaciOS.cs\" />\n  <None Include=\"**\\*.MaciOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- Windows -->\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true \">\n  <Compile Remove=\"**\\*.Windows.cs\" />\n  <None Include=\"**\\*.Windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Activity Definition with Attribute C#\nDESCRIPTION: This example demonstrates how to use the `ActivityAttribute` to ensure an activity is included in the Android manifest file. This causes an `<activity/>` element to be generated in the manifest.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\n\nnamespace MyMauiApp;\n\n[Activity]\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Reselection - XAML\nDESCRIPTION: This XAML snippet demonstrates how to subscribe to the SelectionChanged event of a CollectionView to enable reselection of items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ...\n                SelectionChanged=\"OnCollectionViewSelectionChanged\" />\n```\n\n----------------------------------------\n\nTITLE: Configure Display Name and Description in App Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to set the display name and description used for the Start Menu entry of a .NET MAUI app by modifying the `<uap:VisualElements>` element within the `Package.appxmanifest` file. The `DisplayName` attribute defines the name shown in the Start Menu, and the `Description` attribute provides a brief description of the app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/setup.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n        <uap:VisualElements\n          DisplayName=\"My MAUI App\"\n          Description=\"MauiApp3\"\n          ... >\n```\n\n----------------------------------------\n\nTITLE: Set Map Type to Satellite using C#\nDESCRIPTION: This C# code snippet shows how to set the MapType property of a Map control to Satellite programmatically. It creates a new Map instance and sets the MapType property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map\n{\n    MapType = MapType.Satellite\n};\n```\n\n----------------------------------------\n\nTITLE: AssemblyMetadata Attribute (C#)\nDESCRIPTION: This C# code snippet shows how to mark an assembly as trimmable by adding the AssemblyMetadata attribute with the key \"IsTrimmable\" and the value \"True\". This indicates that the assembly can be trimmed without causing runtime errors. While the MSBuild property is preferred, this attribute provides an alternative way to mark an assembly as trimmable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: AssemblyMetadata(\"IsTrimmable\", \"True\")]\n```\n\n----------------------------------------\n\nTITLE: Setting Target Framework for Android 15 in .NET XML\nDESCRIPTION: This XML snippet shows how to update the target framework of a .NET for Android project to build for Android 15 (API 35). Setting the `TargetFramework` to `net9.0-android` allows your app to utilize the latest Android APIs. The alternative `net9.0-android35` target framework is also mentioned, but its numeric suffix might change in future releases.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFramework>net9.0-android</TargetFramework>\n```\n\n----------------------------------------\n\nTITLE: Transforming Path with Simplified MatrixTransform in XAML\nDESCRIPTION: This XAML snippet shows a simplified approach to applying the same transformation as the previous example using a type converter. The Matrix property is directly assigned a comma-delimited string representing the matrix values: M11, M12, M21, M22, OffsetX, OffsetY. This example achieves the same stretching, skewing, and offsetting effect as the previous verbose example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <MatrixTransform Matrix=\"1.5,1,0,1,10,100\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Set SwipeView SwipeTransitionMode in XAML (Android)\nDESCRIPTION: This XAML snippet demonstrates how to set the `SwipeTransitionMode` property of a `SwipeView` to `Drag` on Android. It includes the necessary namespace declaration and the SwipeView definition with a SwipeItem.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/swipeview-swipetransitionmode.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\" >\n    <StackLayout>\n        <SwipeView android:SwipeView.SwipeTransitionMode=\"Drag\">\n            <SwipeView.LeftItems>\n                <SwipeItems>\n                    <SwipeItem Text=\"Delete\"\n                               IconImageSource=\"delete.png\"\n                               BackgroundColor=\"LightPink\"\n                               Invoked=\"OnDeleteSwipeItemInvoked\" />\n                </SwipeItems>\n            </SwipeView.LeftItems>\n            <!-- Content -->\n        </SwipeView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Pinch To Zoom Container XAML Usage\nDESCRIPTION: This XAML snippet demonstrates how to use the PinchToZoomContainer to wrap an Image control. This allows the image to be zoomed in and out using pinch gestures. It defines the namespace for the PinchGesture assembly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pinch.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:PinchGesture;assembly=PinchGesture\"\n             x:Class=\"PinchGesture.HomePage\">\n    <Grid>\n        <local:PinchToZoomContainer>\n            <Image Source=\"waterfront.jpg\" />\n        </local:PinchToZoomContainer>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-App Audio Entitlement in XML\nDESCRIPTION: This snippet defines the inter-app audio entitlement, enabling the app to send and receive audio to/from other apps. The `inter-app-audio` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<key>inter-app-audio</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Setting Stepper Value - C#\nDESCRIPTION: This C# code snippet shows setting the Value property of a Stepper control. If the value is outside the Minimum/Maximum range, it will be coerced to fit within the range without raising an exception.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nStepper stepper = new Stepper\n{\n    Value = 180\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New Lines in XAML using Property Element Syntax\nDESCRIPTION: This snippet shows how to add a new line to a Label in XAML using property element syntax. This allows for more readable multiline text definitions in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Label>\n    <Label.Text>\n        First line\n        Second line\n    </Label.Text>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Define DeviceInstallation Model C#\nDESCRIPTION: Defines a data model for device installation information, including installation ID, platform, push channel, and tags. It uses System.Text.Json.Serialization to map property names to JSON keys. Required for representing device registration details in the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\n\nnamespace PushNotificationsDemo.Models;\n\npublic class DeviceInstallation\n{\n    [JsonPropertyName(\"installationId\")]\n    public string InstallationId { get; set; }\n\n    [JsonPropertyName(\"platform\")]\n    public string Platform { get; set; }\n\n    [JsonPropertyName(\"pushChannel\")]\n    public string PushChannel { get; set; }\n\n    [JsonPropertyName(\"tags\")]\n    public List<string> Tags { get; set; } = new List<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Queueing Text-to-Speech in .NET MAUI C#\nDESCRIPTION: This C# snippet illustrates the automatic queueing of speech requests from the same thread in .NET MAUI's text-to-speech functionality. When multiple SpeakAsync calls are made sequentially, the system queues these requests, playing each utterance in order. This eliminates the need for manual synchronization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait TextToSpeech.Default.SpeakAsync(\"Hello World 1\");\nawait TextToSpeech.Default.SpeakAsync(\"Hello World 2\");\n```\n\n----------------------------------------\n\nTITLE: Generate Xcode project example\nDESCRIPTION: This example demonstrates generating an Xcode project for a .NET MAUI project that uses the project file in the current directory and supports the `net9.0-ios` target framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync generate -tfm net9.0-ios\n```\n\n----------------------------------------\n\nTITLE: DynamicDependency Attribute Examples (C#)\nDESCRIPTION: This code snippet provides multiple examples of using the DynamicDependency attribute with different parameters. It shows how to specify members by name, with and without parameters, on different types, and in unreferenced assemblies.  These examples illustrate how to keep various methods and members from being trimmed by specifying their signatures, types, and assemblies.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[DynamicDependency(\"Method()\")]\n[DynamicDependency(\"Method(System,Boolean,System.String)\")]\n[DynamicDependency(\"MethodOnDifferentType()\", typeof(ContainingType))]\n[DynamicDependency(\"MemberName\")]\n[DynamicDependency(\"MemberOnUnreferencedAssembly\", \"ContainingType\", \"UnreferencedAssembly\")]\n[DynamicDependency(\"MemberName\", \"Namespace.ContainingType.NestedType\", \"Assembly\")]\n// generics\n[DynamicDependency(\"GenericMethodName``1\")]\n[DynamicDependency(\"GenericMethod``2(``0,``1)\")]\n[DynamicDependency(\"MethodWithGenericParameterTypes(System.Collections.Generic.List{System.String})\")]\n[DynamicDependency(\"MethodOnGenericType(`0)\", \"GenericType`1\", \"UnreferencedAssembly\")]\n[DynamicDependency(\"MethodOnGenericType(`0)\", typeof(GenericType<>))]\n```\n\n----------------------------------------\n\nTITLE: Configure BundleResource build action for iOS in .NET MAUI\nDESCRIPTION: This XML snippet configures the BundleResource build action for all files within the 'Platforms\\iOS\\Resources' folder and its subfolders in a .NET MAUI iOS project. It utilizes the ItemGroup to include the specified files and sets the TargetPath to define the output location for the bundled resources during the build process. The TargetFramework condition ensures this configuration is applied only for iOS targets.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/includes/bundle-resource-ios-xml.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"$(TargetFramework.Contains('-ios'))\">\n   <BundleResource Include=\"Platforms\\iOS\\Resources\\**\" TargetPath=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Animations in MAUI (C#)\nDESCRIPTION: This code snippet creates a composite animation by simultaneously rotating and scaling a MAUI Image. The RotateToAsync method runs concurrently with two sequential ScaleToAsync animations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nimage.RotateToAsync(360, 4000);\nawait image.ScaleToAsync(2, 2000);\nawait image.ScaleToAsync(1, 2000);\n```\n\n----------------------------------------\n\nTITLE: Correct DataTemplate Binding\nDESCRIPTION: This XAML code demonstrates correct usage of compiled bindings in a DataTemplate by setting the x:DataType attribute to the type of the data object, ensuring that the compiler can resolve the binding expressions correctly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             x:DataType=\"local:AnimalsPageViewModel\">\n    <!-- Binding to AnimalsPageViewModel.Animals -->\n    <CollectionView ItemsSource=\"{Binding Animals}\">\n        <CollectionView.ItemTemplate>\n            <DataTemplate x:DataType=\"local:Animal\">\n                <!-- correct: compiler knows you want to bind to Animal.Name -->\n                <Label Text=\"{Binding Name}\" />\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Rotating a .NET MAUI Image\nDESCRIPTION: This C# code snippet demonstrates how to rotate a .NET MAUI Image instance by 360 degrees over 2 seconds using the RotateToAsync method. After the animation completes, the image's Rotation property is reset to 0 to allow for additional rotations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RotateToAsync(360, 2000);\nimage.Rotation = 0;\n```\n\n----------------------------------------\n\nTITLE: List Installed .NET Workloads using dotnet CLI\nDESCRIPTION: This snippet demonstrates how to list the installed .NET workloads using the dotnet command-line interface. It opens a terminal, executes the command `dotnet workload list`, and displays the installed workloads and their versions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet workload list\n```\n\n----------------------------------------\n\nTITLE: Enabling Native AOT in Project File (XML)\nDESCRIPTION: This code snippet shows how to modify a .NET MAUI project file to enable Native AOT deployment for iOS and Mac Catalyst. It sets the `IsAotCompatible` property to `true` to enable trimming and AOT analyzers, and conditionally sets the `PublishAot` property to `true` based on the target platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <!-- enable trimming and AOT analyzers on all platforms -->\n  <IsAotCompatible>true</IsAotCompatible>\n\n  <!-- select platforms to use with NativeAOT -->\n  <PublishAot Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'\">true</PublishAot>\n  <PublishAot Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'\">true</PublishAot>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Simple Data Binding with DateTime.Now in XAML\nDESCRIPTION: This code snippet demonstrates simple data binding in XAML using the `x:Static` markup extension to display the current date and time. It sets the `BindingContext` of a VerticalStackLayout to `DateTime.Now` and binds Label controls to various properties of the DateTime object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/mvvm.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             x:Class=\"XamlSamples.OneShotDateTimePage\"\n             Title=\"One-Shot DateTime Page\"\n             x:DataType=\"sys:DateTime\">\n\n    <VerticalStackLayout BindingContext=\"{x:Static sys:DateTime.Now}\"\n                         Spacing=\"25\" Padding=\"30,0\"\n                         VerticalOptions=\"Center\" HorizontalOptions=\"Center\">\n\n        <Label Text=\"{Binding Year, StringFormat='The year is {0}'}\" />\n        <Label Text=\"{Binding StringFormat='The month is {0:MMMM}'}\" />\n        <Label Text=\"{Binding Day, StringFormat='The day is {0}'}\" />\n        <Label Text=\"{Binding StringFormat='The time is {0:T}'}\" />\n\n    </VerticalStackLayout>\n\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Scroll to Center Position in C#\nDESCRIPTION: This C# code snippet shows how to scroll an item to the center of the ListView using ScrollToPosition.Center.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nlistView.ScrollTo(monkey, position: ScrollToPosition.Center, animate: true);\n```\n\n----------------------------------------\n\nTITLE: Modifying CreateMauiApp Method with Generic Type (C#)\nDESCRIPTION: This code snippet shows how to modify the `CreateMauiApp` method to accept a generic type `TApp` and use `UseMauiEmbeddedApp<TApp>`. This allows specifying a custom application type for the .NET MAUI app, which is essential for certain embedding scenarios.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    // Create a MauiApp using the specified application.\n    public static MauiApp CreateMauiApp<TApp>(Action<MauiAppBuilder>? additional = null) where TApp : App\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiEmbeddedApp<TApp>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n            builder.Logging.AddDebug();\n        #endif\n\n        additional?.Invoke(builder);\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Source Property to UpdateSource Method\nDESCRIPTION: This code snippet shows how the `MapSource` method is used to invoke the `UpdateSource` method on the handler's `PlatformView` property when the `Source` property is set to a `ResourceVideoSource`. This ensures that the video source is updated on the native platform view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\npublic static void MapSource(VideoHandler handler, Video video)\n{\n    handler?.PlatformView.UpdateSource();\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateStatus Method on Windows (C#)\nDESCRIPTION: This code shows the implementation of the `UpdateStatus` method on Windows. It uses the `MediaPlayerElement.MediaPlayer.CurrentState` property to determine the current `VideoStatus` which is then set on the `Video` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        bool _isMediaPlayerAttached;\n        ...\n\n        public void UpdateStatus()\n        {\n            if (_isMediaPlayerAttached)\n            {\n                VideoStatus status = VideoStatus.NotReady;\n\n                switch (_mediaPlayerElement.MediaPlayer.CurrentState)\n                {\n                    case MediaPlayerState.Playing:\n                        status = VideoStatus.Playing;\n                        break;\n                    case MediaPlayerState.Paused:\n                    case MediaPlayerState.Stopped:\n                        status = VideoStatus.Paused;\n                        break;\n                }\n\n                ((IVideoController)_video).Status = status;\n                _video.Position = _mediaPlayerElement.MediaPlayer.Position;\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Padding with Default Value .NET MAUI XAML\nDESCRIPTION: This code snippet shows how to set platform-specific padding values for a ContentPage in .NET MAUI XAML, while also defining a default value for all other platforms. It sets specific padding values for iOS and Android and applies a default padding of 20 to other platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"...\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\" Default=\"20\">\n            <On Platform=\"iOS\" Value=\"0,20,0,0\" />\n            <On Platform=\"Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add Entitlements.plist for Push Notifications - XML\nDESCRIPTION: This XML snippet represents the content of the *Entitlements.plist* file, which configures the APS environment for the app. The `aps-environment` key is set to `development`, indicating that the app should use the development Apple Push Notification service environment.  For production apps, this value should be set to `production`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_54\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>aps-environment</key>\n  <string>development</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Define Intent Filter for Deep Linking (Android)\nDESCRIPTION: This XML snippet configures an intent filter within the AndroidManifest.xml to enable deep linking into the application.  It specifies the URI schemes that the application will handle. The `<data>` elements define the specific schemes the app is registered to handle, such as 'lyft' or 'fb'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/launcher.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:name=\"appName\" android:exported=\"true\">\n    <intent-filter>\n       <action android:name=\"android.intent.action.VIEW\" />\n       <category android:name=\"android.intent.category.DEFAULT\" />\n       <category android:name=\"android.intent.category.BROWSABLE\" />\n       <data android:scheme=\"lyft\"/>\n       <data android:scheme=\"fb\"/>\n       </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Install .NET MAUI workload on macOS using dotnet CLI\nDESCRIPTION: This snippet shows how to install the .NET MAUI workload on macOS using the dotnet command-line interface. It opens a terminal and executes the command `sudo dotnet workload install maui`.  The `sudo` command is required for elevated permissions to install the workload.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\nsudo dotnet workload install maui\n```\n\n----------------------------------------\n\nTITLE: Configure Folder-Based Multi-Targeting for Android\nDESCRIPTION: This XML snippet configures the build system to exclude C# files located within the Android folder (or its subfolders) when not building for Android. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Android -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-android')) != true\">\n  <Compile Remove=\"**\\Android\\**\\*.cs\" />\n  <None Include=\"**\\Android\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Getting System path (constant) on Mac Catalyst (C#)\nDESCRIPTION: This snippet gets the System path on Mac Catalyst, hardcoding it to \"/System\" to align with macOS. It is a direct replacement for Environment.GetFolderPath and does not use NSFileManager.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n\"/System\"\n```\n\n----------------------------------------\n\nTITLE: Horizontal StackLayout C#\nDESCRIPTION: Demonstrates creating a horizontally oriented StackLayout using C#.  It initializes a StackLayout, sets its Orientation to Horizontal and HorizontalOptions to Center, and adds BoxView objects as children. The Margin property is used for spacing around the stackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class HorizontalStackLayoutPage : ContentPage\n{\n    public HorizontalStackLayoutPage()\n    {\n        Title = \"Horizontal StackLayout demo\";\n\n        StackLayout stackLayout = new StackLayout\n        {\n            Margin = new Thickness(20),\n            Orientation = StackOrientation.Horizontal,\n            HorizontalOptions = LayoutOptions.Center\n        };\n\n        stackLayout.Add(new BoxView { Color = Colors.Red, WidthRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Yellow, WidthRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Blue, WidthRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Green, WidthRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Orange, WidthRequest = 40 });\n        stackLayout.Add(new BoxView { Color = Colors.Purple, WidthRequest = 40 });\n\n        Content = stackLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Transform in XAML\nDESCRIPTION: This XAML snippet demonstrates how to translate a Path object using TranslateTransform. The Path is moved 50 units to the right and 50 units down.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <TranslateTransform X=\"50\"\n                            Y=\"50\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Set Mac UI Idiom in Info.plist (XML)\nDESCRIPTION: This XML snippet configures the .NET MAUI Mac Catalyst app to use the Mac user interface idiom. It modifies the app's *Info.plist* file, setting the value of the `UIDeviceFamily` key to 6. This prevents macOS from scaling the UI and enables Mac-like controls, enhancing the user experience on macOS 11.0+ systems. The code is within an array element.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/user-interface-idiom.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIDeviceFamily</key>\n<array>\n  <integer>6</integer>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Display modal as a popover on iOS/Mac Catalyst - C#\nDESCRIPTION: This code snippet shows how to display a modal page as a popover on iOS and Mac Catalyst using platform-specific configurations.  It sets the ModalPopoverSourceView, ModalPopoverRect, and ModalPresentationStyle properties. Requires `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n\npublic partial class PopoverPage : ContentPage\n{\n    public PopoverPage(View modal, Rectangle rectangle)\n    {\n        InitializeComponent();\n        On<iOS>().SetModalPopoverView(modal);\n        On<iOS>().SetModalPopoverRect(rectangle);\n        On<iOS>().SetModalPresentationStyle(UIModalPresentationStyle.Popover);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Open map app with a Placemark (C#)\nDESCRIPTION: This C# code snippet demonstrates how to open the installed map application using a Placemark object.  It shows how to provide detailed address information like CountryName, AdminArea, Thoroughfare, and Locality to assist the map application in finding the desired location. These details ensure the map app can accurately identify the intended place.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/maps.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar placemark = new Placemark\n{\n    CountryName = \"United States\",\n    AdminArea = \"WA\",\n    Thoroughfare = \"Microsoft Building 25\",\n    Locality = \"Redmond\"\n};\n\nawait Map.Default.OpenAsync(placemark);\n```\n\n----------------------------------------\n\nTITLE: Set Supported OS Platform Version (XML)\nDESCRIPTION: This XML snippet demonstrates setting the `SupportedOSPlatformVersion` property in the project file, indicating the minimum OS version required to run the app. It shows conditional setting based on the target platform and unconditional setting when only targeting Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/uwp-projects.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n   <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\">10.0.19041.0</SupportedOSPlatformVersion>\n</PropertyGroup>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n   <SupportedOSPlatformVersion>10.0.19041.0</SupportedOSPlatformVersion>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Appearance with DataTemplate (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to customize the appearance of each MenuItem in a .NET MAUI Shell application by defining a DataTemplate and assigning it to the Shell.MenuItemTemplate attached property. It displays the MenuItem's icon and text with italic font attributes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       xmlns:local=\"clr-namespace:Xaminals\"\n       x:DataType=\"local:AppShell\">\n    <Shell.MenuItemTemplate>\n        <DataTemplate x:DataType=\"MenuItem\">\n            <Grid ColumnDefinitions=\"0.2*,0.8*\">\n                <Image Source=\"{Binding IconImageSource}\"\n                       Margin=\"5\"\n                       HeightRequest=\"45\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Text}\"\n                       FontAttributes=\"Italic\"\n                       VerticalTextAlignment=\"Center\" />\n            </Grid>\n        </DataTemplate>\n    </Shell.MenuItemTemplate>\n    ...\n    <MenuItem Text=\"Help\"\n              IconImageSource=\"help.png\"\n              Command=\"{Binding HelpCommand}\"\n              CommandParameter=\"https://learn.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell\" />  \n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Setting ItemsSource in C#\nDESCRIPTION: This code snippet shows how to set the `ItemsSource` property of a BindableLayout in C# programmatically.  It creates a `Grid` instance and then calls `BindableLayout.SetItemsSource` to bind it to the `items` collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIEnumerable<string> items = ...;\nGrid grid = new Grid();\nBindableLayout.SetItemsSource(grid, items);\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Hint Property with SetValue - MAUI\nDESCRIPTION: This C# snippet uses the `SetValue` method to set the `Hint` attached property. This is an alternative way to set attached properties in .NET MAUI. It requires an instance of a `BindableObject` (like an `Image`).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nimage.SetValue(SemanticProperties.HintProperty, \"Like this post.\");\n```\n\n----------------------------------------\n\nTITLE: Display a Map using C#\nDESCRIPTION: This C# code snippet demonstrates how to create a Map control and add it to a ContentPage. It requires the Microsoft.Maui.Controls.Maps namespace and creates a simple map instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing Map = Microsoft.Maui.Controls.Maps.Map;\n\nnamespace WorkingWithMaps\n{\n    public class MapTypesPageCode : ContentPage\n    {\n        public MapTypesPageCode()\n        {\n            Map map = new Map();\n            Content = map;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DeviceStateTrigger Style Definition XAML\nDESCRIPTION: This XAML demonstrates how to use DeviceStateTrigger to change the background color of a ContentPage based on the device platform.  The style targets ContentPage objects and sets the background color to Silver on iOS and to a pale blue color on Android. The style is explicitly defined with an x:Key.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"DeviceStateTriggerPageStyle\"\n       TargetType=\"ContentPage\">\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup>\n                <VisualState x:Name=\"iOS\">\n                    <VisualState.StateTriggers>\n                        <DeviceStateTrigger Device=\"iOS\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"Silver\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Android\">\n                    <VisualState.StateTriggers>\n                        <DeviceStateTrigger Device=\"Android\" />\n                    </VisualState.StateTriggers>\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"\n                                Value=\"#2196F3\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Overriding CreateWindow method in .NET MAUI App (net8.0)\nDESCRIPTION: This code snippet demonstrates how to override the `CreateWindow` method in a .NET MAUI `App` class. The method allows you to create and manipulate a `Window` object before it's displayed. The `IActivationState` argument provides information about the activation state of the app. This example is specifically for .NET MAUI 8.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n\n            MainPage = new MainPage();\n        }\n\n        protected override Window CreateWindow(IActivationState activationState)\n        {\n            Window window = base.CreateWindow(activationState);\n\n            // Manipulate Window object\n\n            return window;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PanContainer in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the PanContainer class to wrap an Image.  This allows the image to be panned freely within the container. The monkey.jpg image is set as the source for the image, and its dimensions are set to 1024x768. The PanContainer handles the pan gesture and updates the image's position.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pan.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:PanGesture\"\n             x:Class=\"PanGesture.MainPage\">\n    <AbsoluteLayout>\n        <local:PanContainer>\n            <Image Source=\"monkey.jpg\" WidthRequest=\"1024\" HeightRequest=\"768\" />\n        </local:PanContainer>\n    </AbsoluteLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add .NET Framework to .NET MAUI App\nDESCRIPTION: This XML snippet demonstrates how to add the .NET framework target to a .NET MAUI app project. This allows the xUnit test project to reference and test code directly within the .NET MAUI app project. The `net8.0` target framework is added to the `$(TargetFrameworks)` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>net8.0;net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Implement DeviceInstallationService - C#\nDESCRIPTION: This C# code defines the `DeviceInstallationService` class, which implements the `IDeviceInstallationService` interface. It retrieves a unique device ID using `UIDevice.IdentifierForVendor`, checks for iOS version support, and prepares a `DeviceInstallation` object containing the device ID, platform, and push channel token. The `GetDeviceInstallation` method throws exceptions if notifications are not supported or the token is missing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsDemo.Services;\nusing PushNotificationsDemo.Models;\nusing UIKit;\n\nnamespace PushNotificationsDemo.Platforms.iOS;\n\npublic class DeviceInstallationService : IDeviceInstallationService\n{\n    const int SupportedVersionMajor = 13;\n    const int SupportedVersionMinor = 0;\n\n    public string Token { get; set; }\n\n    public bool NotificationsSupported =>\n        UIDevice.CurrentDevice.CheckSystemVersion(SupportedVersionMajor, SupportedVersionMinor);\n\n    public string GetDeviceId() =>\n        UIDevice.CurrentDevice.IdentifierForVendor.ToString();\n\n    public DeviceInstallation GetDeviceInstallation(params string[] tags)\n    {\n        if (!NotificationsSupported)\n            throw new Exception(GetNotificationsSupportError());\n\n        if (string.IsNullOrWhiteSpace(Token))\n            throw new Exception(\"Unable to resolve token for APNS\");\n\n        var installation = new DeviceInstallation\n        {\n            InstallationId = GetDeviceId(),\n            Platform = \"apns\",\n            PushChannel = Token\n        };\n\n        installation.Tags.AddRange(tags);\n\n        return installation;\n    }\n\n    string GetNotificationsSupportError()\n    {\n        if (!NotificationsSupported)\n            return $\"This app only supports notifications on iOS {SupportedVersionMajor}.{SupportedVersionMinor} and above. You are running {UIDevice.CurrentDevice.SystemVersion}.\";\n\n        if (Token == null)\n            return $\"This app can support notifications but you must enable this in your settings.\";\n\n        return \"An error occurred preventing the use of push notifications\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle EmptyView ContentViews C#\nDESCRIPTION: This C# code demonstrates how to dynamically switch between two ContentView objects defined in a ResourceDictionary and set them as the EmptyView of a CarouselView at runtime.  It depends on the XAML code snippet defining the ContentViews.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvoid ToggleEmptyView(bool isToggled)\n{\n    carouselView.EmptyView = isToggled ? Resources[\"BasicEmptyView\"] : Resources[\"AdvancedEmptyView\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Fahrenheit to Celsius in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use the `UnitConverters.FahrenheitToCelsius` method in .NET MAUI to convert a temperature from Fahrenheit to Celsius. The method is part of the `Microsoft.Maui.Media` namespace and returns the Celsius equivalent of the input Fahrenheit value. A double value representing Fahrenheit temperature is expected as input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/unit-converters.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar celsius = UnitConverters.FahrenheitToCelsius(32.0);\n```\n\n----------------------------------------\n\nTITLE: Configure iOS AppDelegate - C#\nDESCRIPTION: This code configures the `AppDelegate` class in an iOS application to return `true` for the `FinishedLaunching` override. This is a necessary step for properly integrating .NET MAUI in an iOS environment.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"AppDelegate\")]\npublic class AppDelegate : UIApplicationDelegate\n{\n    public override UIWindow? Window { get; set; }\n\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rounded Rectangle - XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a blue filled rectangle with rounded corners.  It sets the Fill, Stroke, StrokeThickness, RadiusX, RadiusY, WidthRequest, HeightRequest, and HorizontalOptions properties of the Rectangle object to customize its appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/rectangle.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Rectangle Fill=\"Blue\"\n           Stroke=\"Black\"\n           StrokeThickness=\"3\"\n           RadiusX=\"50\"\n           RadiusY=\"10\"\n           WidthRequest=\"200\"\n           HeightRequest=\"100\"\n           HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Full NotePage Code-Behind (C#)\nDESCRIPTION: This C# code represents the complete code-behind file for the `NotePage`. It includes the `_fileName` variable declaration, the constructor with file loading logic, and the event handlers for the Save and Delete buttons. It represents the entire `NotePage` class implementation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes;\n\npublic partial class NotePage : ContentPage\n{\n    private string _fileName = Path.Combine(FileSystem.AppDataDirectory, \"notes.txt\");\n\n    public NotePage()\n    {\n        InitializeComponent();\n\n        try\n        {\n            TextEditor.Text = File.ReadAllText(_fileName);\n        }\n        catch (Exception ex)\n        {\n            // Doesn't exist yet\n        }\n    }\n\n    private void SaveButton_Clicked(object sender, EventArgs e)\n    {\n        File.WriteAllText(_fileName, TextEditor.Text);\n    }\n\n    private void DeleteButton_Clicked(object sender, EventArgs e)\n    {\n        if (File.Exists(_fileName))\n        {\n            File.Delete(_fileName);\n        }\n\n        TextEditor.Text = string.Empty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bottom Tabs with Implicit Conversion\nDESCRIPTION: This XAML snippet demonstrates how to create bottom tabs in a .NET MAUI Shell application using ShellContent directly within a TabBar, relying on implicit conversion to wrap each ShellContent in a Tab object.  Each ShellContent defines Title, Icon, and the ContentTemplate to load the ContentPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/tabs.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <ShellContent Title=\"Cats\"\n                     Icon=\"cat.png\"\n                     ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       <ShellContent Title=\"Dogs\"\n                     Icon=\"dog.png\"\n                     ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Setting Label properties using XML attributes in XAML\nDESCRIPTION: This code demonstrates setting properties of a Label control in .NET MAUI using XML attributes. The properties Text, VerticalOptions, FontAttributes, FontSize, and TextColor are set directly within the Label tag.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Hello, XAML!\"\n       VerticalOptions=\"Center\"\n       FontAttributes=\"Bold\"\n       FontSize=\"18\"\n       TextColor=\"Aqua\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieve SelectedItem from Picker in C#\nDESCRIPTION: This C# snippet demonstrates how to bind the Text property of a Label to the SelectedItem property of a Picker.  The Label will dynamically update with the currently selected item from the Picker control. A lambda expression is used to define the binding path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nLabel monkeyNameLabel = new Label();\nmonkeyNameLabel.SetBinding(Label.TextProperty, Binding.Create(static (Picker picker) => picker.SelectedItem, source: picker));\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Resizing for a Vector Image in .NET MAUI\nDESCRIPTION: This XML snippet shows how to disable automatic resizing of a vector-based image (SVG) used as an app icon in a .NET MAUI project. Setting the `Resize` attribute to `false` prevents the image from being scaled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" Resize=\"false\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Changed Event\nDESCRIPTION: This C# code shows how to handle the SelectionChanged event of the CollectionView in the flyout menu.  It retrieves the selected item, creates an instance of the target page, and sets the Detail property of the FlyoutPage to a new NavigationPage containing the created instance. It also handles the IsPresented property to close the flyout on selection (except in split mode).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/flyoutpage.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : FlyoutPage\n{\n    public MainPage()\n    {\n        ...\n        flyoutPage.collectionView.SelectionChanged += OnSelectionChanged;\n    }\n\n    void OnSelectionChanged(object sender, SelectionChangedEventArgs e)\n    {\n        var item = e.CurrentSelection.FirstOrDefault() as FlyoutPageItem;\n        if (item != null)\n        {\n            Detail = new NavigationPage((Page)Activator.CreateInstance(item.TargetType));\n            if (!((IFlyoutPageController)this).ShouldShowSplitMode)\n                IsPresented = false;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Camera Permission in Android Manifest with XML\nDESCRIPTION: This XML snippet demonstrates how to add the camera permission to the AndroidManifest.xml file. This is necessary for a .NET MAUI application to access the device's camera.  The permission must be placed within the <manifest> node.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Source Property in MAUI VideoHandler\nDESCRIPTION: This code snippet shows how the `MapSource` method is defined in a MAUI video handler. It calls the `UpdateSource` method on the platform-specific `PlatformView` to update the video source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic static void MapSource(VideoHandler handler, Video video)\n{\n    handler?.PlatformView.UpdateSource();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DisconnectPolicy in XAML - .NET MAUI\nDESCRIPTION: Shows how to set the `HandlerProperties.DisconnectPolicy` attached property to `Manual` in XAML, preventing automatic handler disconnection for a Video control. This requires manual disconnection of the handler later in the application lifecycle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_76\n\nLANGUAGE: XAML\nCODE:\n```\n<controls:Video x:Name=\"video\"\n                HandlerProperties.DisconnectPolicy=\"Manual\"\n                Source=\"video.mp4\"\n                AutoPlay=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: Weak Reference: Breaking Circular Dependency - C#\nDESCRIPTION: This code shows how to break a strong circular reference by using a `WeakReference` from the child view (`MyView`) to the parent container (`Container`). This allows the garbage collector to reclaim the memory used by the parent, as the child no longer holds a strong reference.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nclass Container : UIView\n{\n    public void Poke()\n    {\n        // Call this method to poke this object\n    }\n}\n\nclass MyView : UIView\n{\n    WeakReference<Container> _weakParent;\n\n    public MyView(Container parent)\n    {\n        _weakParent = new WeakReference<Container>(parent);\n    }\n\n    void PokeParent()\n    {\n        if (weakParent.TryGetTarget (out var parent))\n            parent.Poke();\n    }\n}\n\nvar container = new Container();\ncontainer.AddSubview(new MyView container));\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationActionService Field C#\nDESCRIPTION: Adds a `readonly` backing field `_actionService` to store a reference to the `IPushDemoNotificationActionService` implementation in `App.xaml.cs`. This field holds the instance of the action service that handles triggered actions from push notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nreadonly IPushDemoNotificationActionService _actionService;\n```\n\n----------------------------------------\n\nTITLE: Implement VideoSourceConverter C#\nDESCRIPTION: This code provides a type converter, `VideoSourceConverter`, that implements `IExtendedTypeConverter` to convert strings from XAML into appropriate `VideoSource` objects (either `UriVideoSource` or `ResourceVideoSource`). It attempts to create a `Uri` from the string and, based on the success and the URI scheme, determines the appropriate source type. It throws an exception if the string is null or whitespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\n\nnamespace VideoDemos.Controls\n{\n    public class VideoSourceConverter : TypeConverter, IExtendedTypeConverter\n    {\n        object IExtendedTypeConverter.ConvertFromInvariantString(string value, IServiceProvider serviceProvider)\n        {\n            if (!string.IsNullOrWhiteSpace(value))\n            {\n                Uri uri;\n                return Uri.TryCreate(value, UriKind.Absolute, out uri) && uri.Scheme != \"file\" ?\n                    VideoSource.FromUri(value) : VideoSource.FromResource(value);\n            }\n            throw new InvalidOperationException(\"Cannot convert null or whitespace to VideoSource.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package Visibility Queries (Android) XML\nDESCRIPTION: This XML snippet shows how to add queries to the AndroidManifest.xml file for handling package visibility requirements, especially when targeting Android 11 (API level 30) or higher. It enables the app to discover and interact with apps that handle image capture intents. Adding this query allows your app to start the camera application for taking pictures.\nDependencies: Android project, AndroidManifest.xml, Android API level 30+\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/picker.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.media.action.IMAGE_CAPTURE\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Creating a MenuItem in XAML for ListView Context Menu\nDESCRIPTION: This XAML snippet demonstrates how to create a MenuItem within a ListView's ItemTemplate. The MenuItem is added to the ViewCell's ContextActions, making it available as a context menu option for each item in the ListView. The x:DataType is set to \"local:Monkey\" to enable compile-time binding validation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menuitem.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView>\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"local:Monkey\">\n            <ViewCell>\n                <ViewCell.ContextActions>\n                    <MenuItem Text=\"Context menu option\" />\n                </ViewCell.ContextActions>\n                <Label Text=\"{Binding Name}\" />\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function with Constructor in .NET MAUI\nDESCRIPTION: This code demonstrates creating a custom easing function directly within the `Easing` constructor using a lambda expression. This allows for inline definition of easing logic within the animation call, providing a concise way to customize animation behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet9.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateTo(0, 200, 2000, new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t)));\n```\n\n----------------------------------------\n\nTITLE: Including MauiAsset in .csproj file (XML)\nDESCRIPTION: This XML snippet shows how to include a file named 'AboutAssets.txt' as a MauiAsset in the .csproj file of a .NET MAUI project. This ensures that the file is included in the application package during the build process.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_3/PlatformIntegration/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\t<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a PolyBezierSegment in XAML\nDESCRIPTION: This XAML snippet illustrates how to create a PolyBezierSegment within a Path object in .NET MAUI to draw multiple connected cubic Bezier curves. The PolyBezierSegment uses the Points property, a PointCollection, to define the control and end points for each curve. It requires .NET MAUI to be correctly configured in the project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,10\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <PolyBezierSegment Points=\"0,0 100,0 150,100 150,0 200,0 300,10\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Configure Folder-Based Multi-Targeting for iOS and MacCatalyst\nDESCRIPTION: This XML snippet configures the build system to exclude C# files located within the MaciOS folder (or its subfolders) when not building for iOS or MacCatalyst. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Both iOS and Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true AND $(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\MaciOS\\**\\*.cs\" />\n  <None Include=\"**\\MaciOS\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Rotating Image around Layout Center in MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to rotate a MAUI Image around the center of its parent layout by adjusting the AnchorY property. It calculates the radius based on the layout dimensions and sets AnchorY relative to the Image's height.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ndouble radius = Math.Min(absoluteLayout.Width, absoluteLayout.Height) / 2;\nimage.AnchorY = radius / image.Height;\nawait image.RotateToAsync(360, 2000);\n```\n\n----------------------------------------\n\nTITLE: AppThemeBinding with DynamicResource in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the AppThemeBinding markup extension with DynamicResource to change the background and text color of a label based on system theme changes. The colors are dynamically resolved at runtime, allowing for theme switching without requiring a restart.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Color x:Key=\"Primary\">DarkGray</Color>\n        <Color x:Key=\"Secondary\">HotPink</Color>\n        <Color x:Key=\"Tertiary\">Yellow</Color>\n        <Style x:Key=\"labelStyle\" TargetType=\"Label\">\n            <Setter Property=\"Padding\" Value=\"5\"/>\n            <Setter Property=\"TextColor\" Value=\"{AppThemeBinding Light={StaticResource Secondary}, Dark={StaticResource Primary}}\" />\n            <Setter Property=\"BackgroundColor\" Value=\"{AppThemeBinding Light={DynamicResource Primary}, Dark={DynamicResource Secondary}}\" />\n        </Style>\n    </ContentPage.Resources>\n    <Label x:Name=\"myLabel\"\n           Style=\"{StaticResource labelStyle}\"/>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Activity Name Override XML Output\nDESCRIPTION: This XML fragment demonstrates the activity name override specified in the C# code. The `android:name` attribute reflects the overridden name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:name=\"companyname.mymauiapp.activity\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Label.TextColor using a property element in XAML\nDESCRIPTION: This example illustrates how to set the TextColor property of a Label control in .NET MAUI using a property element.  Instead of setting TextColor as an attribute, it's defined as an XML element nested within the Label element. This approach is functionally equivalent to the attribute syntax but is necessary for more complex property values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Hello, XAML!\"\n       VerticalOptions=\"Center\"\n       FontAttributes=\"Bold\"\n       FontSize=\"18\">\n    <Label.TextColor>\n        Aqua\n    </Label.TextColor>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HorizontalStackLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a basic HorizontalStackLayout containing a Rectangle and a Label. It shows the basic structure and default behavior of the layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/horizontalstacklayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.HorizontalStackLayoutPage\">\n    <HorizontalStackLayout Margin=\"20\">\n       <Rectangle Fill=\"Red\"\n                  HeightRequest=\"30\"\n                  WidthRequest=\"30\" />\n       <Label Text=\"Red\"\n              FontSize=\"18\" />\n    </HorizontalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Directory .NET MAUI C#\nDESCRIPTION: Demonstrates how to access the application's directory for storing cache data using the FileSystem.CacheDirectory property. Cache data is useful for persisting data longer than temporary data, but the OS may clear it.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/file-system-helpers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring cacheDir = FileSystem.CacheDirectory;\n```\n\n----------------------------------------\n\nTITLE: Update ResourceDictionary Source in XAML\nDESCRIPTION: This code snippet demonstrates how to update the `Source` property of `ResourceDictionary` elements in a XAML file. The `assembly` attribute is added to the `Source` property to specify the assembly that contains the resource dictionary. This ensures the resources can be loaded correctly when the .NET MAUI UI is used in a different project or context, specifically for use with XAML hot reload.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_40\n\nLANGUAGE: xaml\nCODE:\n```\n<ResourceDictionary Source=\"Resources/Styles/Colors.xaml;assembly=NativeEmbeddingDemo\" />\n<ResourceDictionary Source=\"Resources/Styles/Styles.xaml;assembly=NativeEmbeddingDemo\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying CreateMauiApp Method (C#)\nDESCRIPTION: This code snippet demonstrates how to modify the `CreateMauiApp` method in the `MauiProgram` class to accept an optional `Action<MauiAppBuilder>` argument. This enables additional configuration to be performed before the method returns. The `additional?.Invoke(builder)` line ensures that the provided action is executed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static MauiApp CreateMauiApp(Action<MauiAppBuilder>? additional = null)\n{\n    var builder = MauiApp.CreateBuilder();\n    builder\n        .UseMauiApp<App>()\n        .ConfigureFonts(fonts =>\n        {\n            fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n            fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n        });\n\n    #if DEBUG\n        builder.Logging.AddDebug();\n    #endif\n\n    additional?.Invoke(builder);\n    return builder.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Preserve Method with DynamicDependency Attribute (C#)\nDESCRIPTION: This code snippet demonstrates how to use the DynamicDependency attribute to preserve a method named 'Helper' in the 'MyType' class within the 'MyAssembly' assembly from being trimmed. The attribute ensures that the specified member is kept even if it's not statically referenced. This attribute is applied to the 'RunHelper' method to ensure that 'Helper' is available at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[DynamicDependency(\"Helper\", \"MyType\", \"MyAssembly\")]\nstatic void RunHelper()\n{\n    var helper = Assembly.Load(\"MyAssembly\").GetType(\"MyType\").GetMethod(\"Helper\");\n    helper.Invoke(null, null);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Animations Concurrently Using Task.WhenAll in MAUI\nDESCRIPTION: This snippet demonstrates running multiple rotation animations concurrently using `Task.WhenAll` in MAUI. All three rotations (`RotateTo`, `RotateXTo`, and `RotateYTo`) will execute simultaneously. The `Task.WhenAll` method completes only when all provided tasks are completed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// 10 minute animation\nuint duration = 10 * 60 * 1000;\nawait Task.WhenAll\n(\n  image.RotateTo(307 * 360, duration),\n  image.RotateXTo(251 * 360, duration),\n  image.RotateYTo(199 * 360, duration)\n);\n```\n\n----------------------------------------\n\nTITLE: Debugging Binding Path (XAML - Step 1)\nDESCRIPTION: This code is the first step in debugging a complex binding path. It displays the type of the binding source by omitting the Path property. In this case the source is the page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-path.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"{Binding Source={x:Reference page},\n                      StringFormat='{0}'}\" />\n```\n\n----------------------------------------\n\nTITLE: Publish to create an *.app* package .NET MAUI\nDESCRIPTION: This command publishes a .NET MAUI Mac Catalyst app and creates an *.app* package. It specifies the target framework, build configuration, and sets the `CreatePackage` property to `false` to generate the *.app* package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-unsigned.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-maccatalyst -c Release -p:CreatePackage=false\n```\n\n----------------------------------------\n\nTITLE: Enable XAML Compilation - Assembly Level - C#\nDESCRIPTION: This C# code snippet shows how to explicitly enable XAML compilation for an entire assembly. While XAML compilation is enabled by default, this can be used to ensure compilation if there are other settings that might disable it.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/xamlc.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: XamlCompilation(XamlCompilationOptions.Compile)]\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper - C#\nDESCRIPTION: This C# code snippet re-emphasizes the correct initialization order for the Stepper control's Maximum and Minimum properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nStepper stepper = new Stepper\n{\n    Maximum = 360,\n    Minimum = 180\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Xcode command-line tools using zsh\nDESCRIPTION: This command resets the Xcode command-line tools configuration. It's useful when encountering issues like 'Could not find a valid Xcode app bundle'. It requires administrative privileges.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nsudo xcode-select --reset\n```\n\n----------------------------------------\n\nTITLE: Setting Location Usage Description in Info.plist (iOS/Mac Catalyst)\nDESCRIPTION: This XML snippet shows how to set the NSLocationAlwaysAndWhenInUseUsageDescription and NSLocationWhenInUseUsageDescription keys in the Info.plist file for iOS and Mac Catalyst. These keys are required to request location permissions from the user and explain why the app needs access to their location.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Can we use your location at all times?</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Can we use your location when your app is being used?</string>\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Backdrop Color XAML\nDESCRIPTION: This XAML snippet illustrates how to set the backdrop of the flyout using the `Shell.FlyoutBackdrop` attached property. It applies a silver color to the flyout backdrop using a `SolidColorBrush`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_23\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutBackdrop=\"Silver\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Configure TCP/IP port for ADB connections via WiFi\nDESCRIPTION: This command configures the Android Debug Bridge (adb) to listen for TCP/IP connections on port 5555, allowing debugging over WiFi instead of USB. It requires a prior USB connection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/device/setup.md#_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nadb tcpip 5555\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Sensitive Notifications Entitlement in XML\nDESCRIPTION: This snippet defines the time sensitive notifications entitlement. The `com.apple.developer.usernotifications.time-sensitive` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.usernotifications.time-sensitive</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Type for .NET MAUI App\nDESCRIPTION: This XML snippet demonstrates how to conditionally set the output type of a .NET MAUI app project. When the target framework is `net8.0`, the output type is not set to Exe, preventing the app from building as an executable for the testing target framework.  This enables the test project to reference the MAUI app without conflicting output types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<OutputType Condition=\"'$(TargetFramework)' != 'net8.0'\">Exe</OutputType>\n```\n\n----------------------------------------\n\nTITLE: Transforming Path with RenderTransform Property in XAML\nDESCRIPTION: This XAML snippet demonstrates the most concise way to apply the matrix transformation. It directly sets the RenderTransform property of the Path element to a space-delimited string representing the matrix values: M11, M12, M21, M22, OffsetX, OffsetY. This approach is the shortest way to define the transformation matrix inline.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      RenderTransform=\"1.5 1 0 1 10 100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\" />\n```\n\n----------------------------------------\n\nTITLE: Add supported languages in iOS Info.plist (XML)\nDESCRIPTION: This XML snippet demonstrates how to add supported languages, specifically Arabic ('ar'), to the `CFBundleLocalizations` array in the Info.plist file for iOS and Mac Catalyst. This configuration enables the app to display localized content for the specified languages, including right-to-left languages.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleLocalizations</key>\n<array>\n    <string>en</string>\n    <string>ar</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: LegacySecureStorage Class for Xamarin.Essentials Compatibility (C#)\nDESCRIPTION: This class provides a way to access secure storage data created by Xamarin.Essentials within a .NET MAUI app. It handles the differences in secure storage implementations on Android and iOS. It depends on `AppInfo`, `Preferences`, `AndroidKeyStore` (Android), and `KeyChain` (iOS) helper classes, as well as conditional compilation symbols `ANDROID` and `IOS`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/secure-storage.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n#if ANDROID || IOS\n\nnamespace MigrationHelpers;\n\npublic class LegacySecureStorage\n{\n    internal static readonly string Alias = $\"{AppInfo.PackageName}.xamarinessentials\";\n\n    public static Task<string> GetAsync(string key)\n    {\n        if (string.IsNullOrWhiteSpace(key))\n            throw new ArgumentNullException(nameof(key));\n\n        string result = string.Empty;\n\n#if ANDROID\n        object locker = new object();\n        string? encVal = Preferences.Get(key, null, Alias);\n\n        if (!string.IsNullOrEmpty(encVal))\n        {\n            byte[] encData = Convert.FromBase64String(encVal);\n            lock (locker)\n            {\n                AndroidKeyStore keyStore = new AndroidKeyStore(Platform.AppContext, Alias, false);\n                result = keyStore.Decrypt(encData);\n            }\n        }\n#elif IOS\n        KeyChain keyChain = new KeyChain();\n        result = keyChain.ValueForKey(key, Alias);\n#endif\n        return Task.FromResult(result);\n    }\n\n    public static bool Remove(string key)\n    {\n        bool result = false;\n\n#if ANDROID\n        Preferences.Remove(key, Alias);\n        result = true;\n#elif IOS\n        KeyChain keyChain = new KeyChain();\n        result = keyChain.Remove(key, Alias);\n#endif\n        return result;\n    }\n\n    public static void RemoveAll()\n    {\n#if ANDROID\n        Preferences.Clear(Alias);\n#elif IOS\n        KeyChain keyChain = new KeyChain();\n        keyChain.RemoveAll(Alias);\n#endif\n    }\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Inefficient StackLayout Usage in XAML\nDESCRIPTION: This XAML snippet shows an example of inefficiently using nested StackLayouts to mimic a Grid layout. This is discouraged due to performance overhead from unnecessary layout calculations.  It demonstrates a bad practice that should be avoided in .NET MAUI development.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Details.HomePage\"\n             Padding=\"0,20,0,0\">\n    <StackLayout>\n        <StackLayout Orientation=\"Horizontal\">\n            <Label Text=\"Name:\" />\n            <Entry Placeholder=\"Enter your name\" />\n        </StackLayout>\n        <StackLayout Orientation=\"Horizontal\">\n            <Label Text=\"Age:\" />\n            <Entry Placeholder=\"Enter your age\" />\n        </StackLayout>\n        <StackLayout Orientation=\"Horizontal\">\n            <Label Text=\"Occupation:\" />\n            <Entry Placeholder=\"Enter your occupation\" />\n        </StackLayout>\n        <StackLayout Orientation=\"Horizontal\">\n            <Label Text=\"Address:\" />\n            <Entry Placeholder=\"Enter your address\" />\n        </StackLayout>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Activity Label XML Output\nDESCRIPTION: This XML fragment demonstrates the generated activity element with the specified label in the manifest file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:label=\"My Maui App\"\n          android:name=\"crc64bdb9c38958c20c7c.MyActivity\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Help on dev-certs tool (dotnet)\nDESCRIPTION: This command provides help and options for the `dev-certs` tool, allowing developers to understand its usage and available functionalities.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet dev-certs https --help\n```\n\n----------------------------------------\n\nTITLE: Column Gap CSS in .NET MAUI\nDESCRIPTION: Sets the gap between columns in a .NET MAUI Grid. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_20\n\nLANGUAGE: CSS\nCODE:\n```\ncolumn-gap: 9;\n```\n\n----------------------------------------\n\nTITLE: Disable ATS in Info.plist (XML)\nDESCRIPTION: Configures the `Info.plist` file in the iOS project to disable Apple Transport Security (ATS) for local networking. This allows the .NET MAUI app to connect to local web services running over HTTP by allowing insecure connections.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSAppTransportSecurity</key>    \n<dict>\n    <key>NSAllowsLocalNetworking</key>\n    <true/>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Handling CollectionView Selection Changed Event (C#)\nDESCRIPTION: This C# code demonstrates how to handle the `SelectionChanged` event in a CollectionView. It retrieves the previously selected item and the currently selected item from the `SelectionChangedEventArgs`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    string previous = (e.PreviousSelection.FirstOrDefault() as Monkey)?.Name;\n    string current = (e.CurrentSelection.FirstOrDefault() as Monkey)?.Name;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HelpText Property in XAML\nDESCRIPTION: This code snippet demonstrates setting the `HelpText` attached property for a `Button` in XAML. The `HelpText` property provides descriptive text for the UI element, similar to a tooltip. Note: This property has been deprecated in .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_19\n\nLANGUAGE: xaml\nCODE:\n```\n<Button Text=\"Toggle ActivityIndicator\"\n        AutomationProperties.IsInAccessibleTree=\"true\"\n        AutomationProperties.HelpText=\"Tap to toggle the activity indicator\" />\n```\n\n----------------------------------------\n\nTITLE: CarouselView Horizontal Layout XAML\nDESCRIPTION: This XAML code demonstrates the default horizontal layout of a .NET MAUI CarouselView. It binds to a data source named 'Monkeys' and defines the ItemTemplate using a StackLayout within a Border to display monkey details. No explicit ItemsLayout is defined, relying on the default horizontal orientation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <StackLayout>\n                <Border Stroke=\"DarkGray\"\n                        StrokeShape=\"RoundRectangle 5\"\n                        Margin=\"20\"\n                        Padding=\"20\"\n                        HeightRequest=\"360\"\n                        HorizontalOptions=\"Center\"\n                        VerticalOptions=\"Center\">  \n                    <StackLayout>\n                        <Label Text=\"{Binding Name}\"\n                               FontAttributes=\"Bold\"\n                               FontSize=\"18\"\n                               HorizontalOptions=\"Center\"\n                               VerticalOptions=\"Center\" />\n                        <Image Source=\"{Binding ImageUrl}\"\n                               Aspect=\"AspectFill\"\n                               HeightRequest=\"150\"\n                               WidthRequest=\"150\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Location}\"\n                               HorizontalOptions=\"Center\" />\n                        <Label Text=\"{Binding Details}\"\n                               FontAttributes=\"Italic\"\n                               HorizontalOptions=\"Center\"\n                               MaxLines=\"5\"\n                               LineBreakMode=\"TailTruncation\" />\n                    </StackLayout>\n                </Border>\n            </StackLayout>\n        </DataTemplate>\n    </CarouselView.ItemTemplate>\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Modifying AppDelegate on iOS/Mac Catalyst with C#\nDESCRIPTION: This code snippet demonstrates how to modify the AppDelegate class on iOS and Mac Catalyst to return true for the FinishedLaunching override. This step is required for initializing .NET MAUI in a native iOS/Mac Catalyst app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"AppDelegate\")]\npublic class AppDelegate : UIApplicationDelegate\n{\n    public override UIWindow? Window { get; set; }\n\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TLS minimum supported protocol version in NSUrlSessionHandler\nDESCRIPTION: This C# code snippet shows how to set the `TlsMinimumSupportedProtocolVersion` property in `NSUrlSessionConfiguration` before creating an `NSUrlSessionHandler`. The `System.Net.ServicePointManager` is deprecated, so manually setting the `TlsMinimumSupportedProtocolVersion` is required to configure the TLS protocol version for the session. It initializes a session configuration and sets the minimum supported TLS version to TLS 1.3.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessionConfiguration = NSUrlSessionConfiguration.DefaultSessionConfiguration;\nsessionConfiguration.TlsMinimumSupportedProtocolVersion = TlsProtocolVersion.Tls13;\nvar handler = new NSUrlSessionHandler(sessionConfiguration);\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset in .csproj\nDESCRIPTION: This XML snippet demonstrates how to include raw assets located in the `Resources\\Raw` directory and its subdirectories into the MAUI application package.  The `LogicalName` attribute specifies how the assets will be organized within the application package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/bugs/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Builder Extension in C#\nDESCRIPTION: This C# class defines an extension method for `AuthenticationBuilder` to simplify the registration of API key authentication. It uses the `AddScheme` method to register the `ApiKeyAuthOptions` and `ApiKeyAuthHandler` with the specified scheme name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authentication;\n\nnamespace PushNotificationsAPI.Authentication;\n\npublic static class AuthenticationBuilderExtensions\n{\n  public static AuthenticationBuilder AddApiKeyAuth(\n      this AuthenticationBuilder builder,\n      Action<ApiKeyAuthOptions> configureOptions)\n    {\n        return builder\n            .AddScheme<ApiKeyAuthOptions, ApiKeyAuthHandler>(\n            ApiKeyAuthOptions.DefaultScheme,\n            configureOptions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Platform Implementations of INotificationManagerService\nDESCRIPTION: This code snippet demonstrates how to register platform-specific implementations of the `INotificationManagerService` interface using dependency injection in .NET MAUI. It uses conditional compilation directives (`#if`) to register the appropriate implementation based on the target platform (Android, iOS, Mac Catalyst, or Windows).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\n            builder.Services.AddTransient<INotificationManagerService, LocalNotificationsDemo.Platforms.Android.NotificationManagerService>();\n#elif IOS\n            builder.Services.AddTransient<INotificationManagerService, LocalNotificationsDemo.Platforms.iOS.NotificationManagerService>();\n#elif MACCATALYST\n            builder.Services.AddTransient<INotificationManagerService, LocalNotificationsDemo.Platforms.MacCatalyst.NotificationManagerService>();\n#elif WINDOWS\n            builder.Services.AddTransient<INotificationManagerService, LocalNotificationsDemo.Platforms.Windows.NotificationManagerService>();          \n#endif\n```\n\n----------------------------------------\n\nTITLE: Adding FileProvider Paths Override XML File - XML\nDESCRIPTION: This XML snippet demonstrates the structure of the microsoft_maui_essentials_fileprovider_file_paths.xml file, which is used to override the default file provider paths. It specifies the allowed paths for sharing files, preventing exposure of unintended data. The `external-path`, `cache-path`, and `external-cache-path` elements define the sharing-root directories.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/android-fileproviderpaths.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<paths>\n   <external-path name=\"external_files\" path=\"sharing-root\" />\n   <cache-path name=\"internal_cache\" path=\"sharing-root\" />\n   <external-cache-path name=\"external_cache\" path=\"sharing-root\" />  \n</paths>\n```\n\n----------------------------------------\n\nTITLE: Toggle Barometer Monitoring in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to start and stop monitoring the barometer sensor using the IBarometer interface in .NET MAUI. It handles the ReadingChanged event to display the air pressure data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/sensors.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool _isBarometerAvailable = Barometer.Default.IsSupported;\n\nprivate void BarometerStartStop()\n{\n    if (!_isBarometerAvailable)\n    {\n        return;\n    }\n\n    if (!Barometer.Default.IsMonitoring)\n    {\n        Barometer.Default.ReadingChanged += Barometer_ReadingChanged;\n        Barometer.Default.Start(SensorSpeed.UI);\n    }\n    else\n    {\n        Barometer.Default.Stop();\n        Barometer.Default.ReadingChanged -= Barometer_ReadingChanged;\n    }\n}\n\nprivate void Barometer_ReadingChanged(object sender, BarometerChangedEventArgs e)\n{\n    // Update UI Label with barometer reading\n    lblBarometer.Text = $\"Barometer: {e.Reading.PressureInHectopascals} hectopascals\";\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Flyout Content - XAML\nDESCRIPTION: This XAML snippet demonstrates how to replace the default flyout content in a .NET MAUI Shell application. It sets the Shell.FlyoutContent property to a CollectionView that displays the titles of items from the FlyoutItems collection. It binds to the `FlyoutItems` property of the `AppShell` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       xmlns:local=\"clr-namespace:Xaminals\"\n       x:Name=\"shell\"\n       x:DataType=\"local:AppShell\">\n    ...\n    <Shell.FlyoutContent>\n        <CollectionView BindingContext=\"{x:Reference shell}\"\n                        IsGrouped=\"True\"\n                        ItemsSource=\"{Binding FlyoutItems}\">\n            <CollectionView.ItemTemplate>\n                <DataTemplate x:DataType=\"local:AppShell\">\n                    <Label Text=\"{Binding Title}\"\n                           TextColor=\"White\"\n                           FontSize=\"18\" />\n                </DataTemplate>\n            </CollectionView.ItemTemplate>\n        </CollectionView>\n    </Shell.FlyoutContent>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Transform Group in XAML\nDESCRIPTION: This XAML code illustrates how to apply multiple transforms (scaling and rotation) to a Path object using TransformGroup. The Path is scaled to 1.5 times its original size and then rotated by 45 degrees.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <TransformGroup>\n            <ScaleTransform ScaleX=\"1.5\"\n                            ScaleY=\"1.5\" />\n            <RotateTransform Angle=\"45\" />\n        </TransformGroup>\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: C# Alternative Class for Interface Constants (Legacy)\nDESCRIPTION: This C# code snippet shows the legacy approach to handling Java interface constants in Xamarin.Android before C# 8. It creates an abstract class that contains the constants as static fields. This alternative class may be depended upon by existing code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class Foo : Java.Lang.Object\n{\n   public static int Bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Value with a Func for a BindableProperty (C#)\nDESCRIPTION: This snippet demonstrates how to use a `Func` to initialize the default value of a bindable property. The `defaultValueCreator` parameter is set to a `Func` that returns a `DateTime` representing today's date.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/bindable-properties.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly BindableProperty DateProperty =\n    BindableProperty.Create (\"Date\", typeof(DateTime), typeof(MyPage), default(DateTime), BindingMode.TwoWay, defaultValueCreator: bindable => DateTime.Today);\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grid CollectionView with GridItemsLayout in XAML\nDESCRIPTION: Defines a CollectionView in XAML to display items in a horizontal grid using `GridItemsLayout`. The `Orientation` is set to `Horizontal` and `Span` is set to `4`, resulting in a four-row horizontal grid. It relies on the `Microsoft.Maui.Controls` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n       <GridItemsLayout Orientation=\"Horizontal\"\n                        Span=\"4\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Theme in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to get the current theme requested by the system for your application using the IAppInfo.RequestedTheme property. The returned value is an enum of type AppTheme, which can be Unspecified, Light, or Dark. The return `Unspecified` if the operating system doesn't have a specific user interface style.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-information.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAppTheme currentTheme = AppInfo.Current.RequestedTheme;\n```\n\n----------------------------------------\n\nTITLE: Apply ControlTemplate to CardView in XAML\nDESCRIPTION: This XAML code shows how to apply a defined ControlTemplate to a CardView instance. The ControlTemplate property of the CardView is set using a StaticResource referencing the ControlTemplate defined in the ResourceDictionary.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/contentview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<controls:CardView ControlTemplate=\"{StaticResource CardViewCompressed}\" />\n```\n\n----------------------------------------\n\nTITLE: Define a Simple .NET MAUI Control (C#)\nDESCRIPTION: Defines a simple custom control, `CircleButton`, inheriting from the `Button` class, within the `MyCompany.Controls` namespace. This control serves as an example of a type that can be exposed through a custom namespace schema.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyCompany.Controls\n{\n    public class CircleButton : Button\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Margin Bottom CSS in .NET MAUI\nDESCRIPTION: Sets the bottom margin for a .NET MAUI View. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_38\n\nLANGUAGE: CSS\nCODE:\n```\nmargin-bottom: 6;\n```\n\n----------------------------------------\n\nTITLE: MSBuild Property for Static/Default Interface Members\nDESCRIPTION: Setting `$AndroidBoundInterfacesContainStaticAndDefaultInterfaceMethods` to `false` in the project file reverts to legacy behavior for static and default interface members.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Publish to create a *.pkg* package .NET MAUI\nDESCRIPTION: This command publishes a .NET MAUI Mac Catalyst app and creates a *.pkg* package. It specifies the target framework and build configuration, and defaults to creating a *.pkg* package without explicitly setting `CreatePackage`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-unsigned.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-maccatalyst -c Release\n```\n\n----------------------------------------\n\nTITLE: Assigning DataTemplateSelector to CollectionView.ItemTemplate in XAML\nDESCRIPTION: This code snippet shows how to consume a `PersonDataTemplateSelector` object by assigning it to the `ItemTemplate` property of a `CollectionView` using the `StaticResource` markup extension. This enables the CollectionView to use the data template selector for each item in its collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<CollectionView x:Name=\"collectionView\"\n                ItemTemplate=\"{StaticResource personDataTemplateSelector}\" />\n```\n\n----------------------------------------\n\nTITLE: AbsoluteLayout with Absolute Positioning in XAML\nDESCRIPTION: This XAML code demonstrates how to use AbsoluteLayout to position BoxView and Label elements using absolute values for position and size. The LayoutBounds attached property is used to define the position and size of each child element within the AbsoluteLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/absolutelayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"AbsoluteLayoutDemos.Views.XAML.StylishHeaderDemoPage\"\n             Title=\"Stylish header demo\">\n    <AbsoluteLayout Margin=\"20\">\n        <BoxView Color=\"Silver\"\n                 AbsoluteLayout.LayoutBounds=\"0, 10, 200, 5\" />\n        <BoxView Color=\"Silver\"\n                 AbsoluteLayout.LayoutBounds=\"0, 20, 200, 5\" />\n        <BoxView Color=\"Silver\"\n                 AbsoluteLayout.LayoutBounds=\"10, 0, 5, 65\" />\n        <BoxView Color=\"Silver\"\n                 AbsoluteLayout.LayoutBounds=\"20, 0, 5, 65\" />\n        <Label Text=\"Stylish Header\"\n               FontSize=\"24\"\n               AbsoluteLayout.LayoutBounds=\"30, 25\" />\n    </AbsoluteLayout>\n</ContentPage>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MDM Managed Associated Domains Entitlement in XML\nDESCRIPTION: This snippet configures the MDM managed associated domains entitlement, allowing MDM to supplement associated domains. The `com.apple.developer.associated-domains.mdm-managed` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.associated-domains.mdm-managed</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Backup in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to disable Auto Backup for the entire Android application by setting the `android:allowBackup` attribute to false in the `AndroidManifest.xml` file. This prevents the app's data, including secure storage, from being backed up to Google Drive. This approach is recommended only when you have an alternative data backup strategy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n    ...\n    <application android:allowBackup=\"false\" ... >\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Grid in XAML\nDESCRIPTION: This code snippet demonstrates how to create a basic Grid in XAML. The Grid, by default, contains one row and one column. A Label is added as a child, which is automatically positioned in this single cell. No specific row or column definitions are provided, resulting in a single cell grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"GridTutorial.MainPage\">\n    <Grid Margin=\"20,35,20,20\">\n        <Label Text=\"By default, a Grid contains one row and one column.\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add .NET MAUI Package References (XML)\nDESCRIPTION: Shows how to include the necessary .NET MAUI NuGet packages within the project file.  Specifically, it adds references to `Microsoft.Maui.Controls` and `Microsoft.Maui.Controls.Compatibility`, pinning them to a specific version using the `$(MauiVersion)` variable. Dependencies: Microsoft.Maui.Controls, Microsoft.Maui.Controls.Compatibility.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n<PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"$(MauiVersion)\" />\n```\n\n----------------------------------------\n\nTITLE: Legacy Version Tracking Class in C#\nDESCRIPTION: This C# code defines the `LegacyVersionTracking` class, which is designed to read version tracking data created by a Xamarin.Forms application. It retrieves version and build information from the old preferences container using the `LegacyPreferences` class and exposes properties for accessing version history and determining first-launch status. It requires the `LegacyPreferences` helper class and uses `AppInfo` to determine the current version and build.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MigrationHelpers;\n\npublic static class LegacyVersionTracking\n{\n    const string versionsKey = \"VersionTracking.Versions\";\n    const string buildsKey = \"VersionTracking.Builds\";\n\n    static readonly string sharedName = LegacyPreferences.GetPrivatePreferencesSharedName(\"versiontracking\");\n\n    static Dictionary<string, List<string>> versionTrail;\n    static string LastInstalledVersion => versionTrail[versionsKey].LastOrDefault();\n    static string LastInstalledBuild => versionTrail[buildsKey].LastOrDefault();\n\n    public static string VersionsKey => versionsKey;\n    public static string BuildsKey => buildsKey;\n    public static string SharedName => sharedName;\n    public static bool IsFirstLaunchEver { get; private set; }\n    public static bool IsFirstLaunchForCurrentVersion { get; private set; }\n    public static bool IsFirstLaunchForCurrentBuild { get; private set; }\n    public static string CurrentVersion => AppInfo.VersionString;\n    public static string CurrentBuild => AppInfo.BuildString;\n    public static string PreviousVersion => GetPrevious(versionsKey);\n    public static string PreviousBuild => GetPrevious(buildsKey);\n    public static string FirstInstalledVersion => versionTrail[versionsKey].FirstOrDefault();\n    public static string FirstInstalledBuild => versionTrail[buildsKey].FirstOrDefault();\n    public static IEnumerable<string> VersionHistory => versionTrail[versionsKey].ToArray();\n    public static IEnumerable<string> BuildHistory => versionTrail[buildsKey].ToArray();\n    public static bool IsFirstLaunchForVersion(string version) => CurrentVersion == version && IsFirstLaunchForCurrentVersion;\n    public static bool IsFirstLaunchForBuild(string build) => CurrentBuild == build && IsFirstLaunchForCurrentBuild;\n\n    static LegacyVersionTracking()\n    {\n        InitVersionTracking();\n    }\n\n    internal static void InitVersionTracking()\n    {\n        IsFirstLaunchEver = !LegacyPreferences.ContainsKey(versionsKey, sharedName) || !LegacyPreferences.ContainsKey(buildsKey, sharedName);\n        if (IsFirstLaunchEver)\n        {\n            versionTrail = new Dictionary<string, List<string>>\n                {\n                    { versionsKey, new List<string>() },\n                    { buildsKey, new List<string>() }\n                };\n        }\n        else\n        {\n            versionTrail = new Dictionary<string, List<string>>\n                {\n                    { versionsKey, ReadHistory(versionsKey).ToList() },\n                    { buildsKey, ReadHistory(buildsKey).ToList() }\n                };\n        }\n\n        IsFirstLaunchForCurrentVersion = !versionTrail[versionsKey].Contains(CurrentVersion) || CurrentVersion != LastInstalledVersion;\n        if (IsFirstLaunchForCurrentVersion)\n        {\n            // Avoid duplicates and move current version to end of list if already present\n            versionTrail[versionsKey].RemoveAll(v => v == CurrentVersion);\n            versionTrail[versionsKey].Add(CurrentVersion);\n        }\n\n        IsFirstLaunchForCurrentBuild = !versionTrail[buildsKey].Contains(CurrentBuild) || CurrentBuild != LastInstalledBuild;\n        if (IsFirstLaunchForCurrentBuild)\n        {\n            // Avoid duplicates and move current build to end of list if already present\n            versionTrail[buildsKey].RemoveAll(b => b == CurrentBuild);\n            versionTrail[buildsKey].Add(CurrentBuild);\n        }\n    }\n\n    static string GetPrevious(string key)\n    {\n        var trail = versionTrail[key];\n        return (trail.Count >= 2) ? trail[trail.Count - 2] : null;\n    }\n\n    static string[] ReadHistory(string key) => LegacyPreferences.Get(key, null, sharedName)?.Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries) ?? new string[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets using FileSystem API (C#)\nDESCRIPTION: This C# snippet demonstrates how to access raw assets that have been deployed with the application using the `FileSystem.OpenAppPackageFileAsync` method. It opens a stream to the specified asset file, reads its contents, and stores them in a variable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/navigation/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: BoxView Color Set Directly\nDESCRIPTION: This code snippet shows how to set the `Color` property of a `BoxView` directly in XAML using a string literal. This is a standard way to set attributes and contrasts with using XAML markup extensions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<BoxView Color=\"Blue\" />\n```\n\n----------------------------------------\n\nTITLE: Generate Xcode project with path example\nDESCRIPTION: This example demonstrates generating and opening an Xcode project for a .NET MAUI project, specifying the path to the project file and the `net9.0-ios` target framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync generate -p path/to/maui.csproj -tfm net9.0-ios\n```\n\n----------------------------------------\n\nTITLE: Filling Path with EvenOdd Winding Mode in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to fill a five-pointed star path using the `EvenOdd` winding mode in .NET MAUI graphics. The `FillPath` method is used, explicitly specifying `WindingMode.EvenOdd`. The path is then outlined with a red stroke. This mode results in the central area of the star not being filled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/windingmodes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfloat radius = 0.45f * Math.Min(dirtyRect.Width, dirtyRect.Height);\n\nPathF path = new PathF();\npath.MoveTo(dirtyRect.Center.X, dirtyRect.Center.Y - radius);\n\nfor (int i = 1; i < 5; i++)\n{\n    double angle = i * 4 * Math.PI / 5;\n    path.LineTo(new PointF(radius * (float)Math.Sin(angle) + dirtyRect.Center.X, -radius * (float)Math.Cos(angle) + dirtyRect.Center.Y));\n}\npath.Close();\n\ncanvas.StrokeSize = 15;\ncanvas.StrokeLineJoin = LineJoin.Round;\ncanvas.StrokeColor = Colors.Red;\ncanvas.FillColor = Colors.Blue;\ncanvas.FillPath(path, WindingMode.EvenOdd);\ncanvas.DrawPath(path);\n```\n\n----------------------------------------\n\nTITLE: Adding Tint to an Image in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to add a tint color to an image using the `TintColor` attribute. The `TintColor` attribute accepts a hexadecimal color value, which is applied to the image.  This is useful for changing the color of icons or simple images.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/images.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\logo.svg\" TintColor=\"#66B3FF\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Pages in .NET MAUI Shell with DataTemplate\nDESCRIPTION: This XAML snippet shows how to display pages within a .NET MAUI Shell application using the DataTemplate markup extension to set the ContentTemplate property of ShellContent objects. Each ShellContent object represents a ContentPage and is rendered in a tab.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/pages.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:views=\"clr-namespace:Xaminals.Views\"\n       x:Class=\"Xaminals.AppShell\">\n    <TabBar>\n       <ShellContent Title=\"Cats\"\n                     Icon=\"cat.png\"\n                     ContentTemplate=\"{DataTemplate views:CatsPage}\" />\n       <ShellContent Title=\"Dogs\"\n                     Icon=\"dog.png\"\n                     ContentTemplate=\"{DataTemplate views:DogsPage}\" />\n       <ShellContent Title=\"Monkeys\"\n                     Icon=\"monkey.png\"\n                     ContentTemplate=\"{DataTemplate views:MonkeysPage}\" />\n    </TabBar>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Create a Border with RoundRectangle (Property Tag) in XAML\nDESCRIPTION: This XAML example demonstrates defining the StrokeShape property of a Border using property tag syntax. It creates a RoundRectangle with specific CornerRadius within the Border. The Border contains a Label as its content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/border.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"#C49B33\"\n        StrokeThickness=\"4\"\n        Background=\"#2B0B98\"\n        Padding=\"16,8\"\n        HorizontalOptions=\"Center\">\n    <Border.StrokeShape>\n        <RoundRectangle CornerRadius=\"40,0,0,40\" />\n    </Border.StrokeShape>\n    <Label Text=\".NET MAUI\"\n           TextColor=\"White\"\n           FontSize=\"18\"\n           FontAttributes=\"Bold\" />\n</Border>\n```\n\n----------------------------------------\n\nTITLE: Consume Easing Functions in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use predefined easing functions in .NET MAUI animations using the `TranslateTo`, `ScaleTo`, and `RotateTo` extension methods. Easing functions control the animation's velocity, creating effects like bouncing or acceleration/deceleration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet9.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateTo(0, 200, 2000, Easing.BounceIn);\nawait image.ScaleTo(2, 2000, Easing.CubicIn);\nawait image.RotateTo(360, 2000, Easing.SinInOut);\nawait image.ScaleTo(1, 2000, Easing.CubicOut);\nawait image.TranslateTo(0, -200, 2000, Easing.BounceOut);\n```\n\n----------------------------------------\n\nTITLE: Populating ListView with Data using C# Binding\nDESCRIPTION: This code snippet shows how to populate a .NET MAUI ListView with data using data binding in C#. The `SetBinding` method is used to bind the `ItemsSourceProperty` to the `Monkeys` property of a ViewModel. This requires a ViewModel with a property named `Monkeys` that implements `IEnumerable`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nListView listView = new ListView();\nlistView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Configuring HomeKit Entitlement in XML\nDESCRIPTION: This snippet defines the HomeKit entitlement, enabling interaction with HomeKit accessories. The `com.apple.developer.homekit` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.homekit</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Control with Bindable Properties C#\nDESCRIPTION: This code snippet defines a custom control named `CardView` that inherits from `ContentView`. It includes bindable properties for the card's title and description. The UI is not defined within the class; instead, it's intended to be defined by a control template.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CardView : ContentView\n{\n    public static readonly BindableProperty CardTitleProperty =\n        BindableProperty.Create(nameof(CardTitle), typeof(string), typeof(CardView), string.Empty);\n    public static readonly BindableProperty CardDescriptionProperty =\n        BindableProperty.Create(nameof(CardDescription), typeof(string), typeof(CardView), string.Empty);\n\n    public string CardTitle\n    {\n        get => (string)GetValue(CardTitleProperty);\n        set => SetValue(CardTitleProperty, value);\n    }\n\n    public string CardDescription\n    {\n        get => (string)GetValue(CardDescriptionProperty);\n        set => SetValue(CardDescriptionProperty, value);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kill ADB Server ZSH\nDESCRIPTION: This command stops the Android Debug Bridge (ADB) server. It's a necessary step before attempting to connect to an Android emulator running on a Mac from inside a Windows virtual machine. This ensures that any previous connections are terminated, allowing for a clean connection attempt using either `nc` or `ssh` port forwarding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nadb kill-server\n```\n\n----------------------------------------\n\nTITLE: Getting Pointer Position - C#\nDESCRIPTION: This C# code snippet demonstrates how to use the GetPosition method of the PointerEventArgs object to retrieve the position of the pointer gesture relative to different elements. The position can be obtained relative to the window, a specific view (like an Image), or the container view. The method returns a Point? object, which can be null if the position is not available.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pointer.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnPointerExited(object sender, PointerEventArgs e)\n{\n    // Position inside window\n    Point? windowPosition = e.GetPosition(null);\n\n    // Position relative to an Image\n    Point? relativeToImagePosition = e.GetPosition(image);\n\n    // Position relative to the container view\n    Point? relativeToContainerPosition = e.GetPosition((View)sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Communication Notifications Entitlement XML\nDESCRIPTION: Defines the communication notifications entitlement for sending notifications from a person to a person or multiple people. It uses the `com.apple.developer.usernotifications.communication` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.usernotifications.communication</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Exclude Assembly from Trimming (XML)\nDESCRIPTION: This XML snippet demonstrates how to exclude the 'MyAssembly' assembly from the trimming process by adding it to the TrimmerRootAssembly MSBuild item in the project file. By excluding an assembly, it and its statically understood dependencies are kept during trimming, preventing the trimmer from removing any of its code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <TrimmerRootAssembly Include=\"MyAssembly\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Passing Data Backwards via Query Properties in MAUI Shell\nDESCRIPTION: This snippet illustrates passing data backwards as a query parameter when navigating in MAUI Shell. It appends a query parameter to the \"..?\" route to send data to the previous page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait Shell.Current.GoToAsync($\"..?parameterToPassBack={parameterValueToPassBack}\");\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Frame in XAML\nDESCRIPTION: This XAML snippet demonstrates the basic usage of the Frame control to wrap a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/frame.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Frame>\n  <Label Text=\"Frame wrapped around a Label\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Specify language resources in Windows Package.appxmanifest (XML)\nDESCRIPTION: This XML snippet illustrates how to specify supported languages in the Package.appxmanifest file for Windows applications.  It replaces the default `<Resource Language=\"x-generate\">` element with individual `<Resource />` elements for each supported language (e.g., \"en\" and \"ar\"). This enables Windows to load the appropriate localized resources at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<Resources>\n    <Resource Language=\"en\" />\n    <Resource Language=\"ar\" />\n</Resources>\n```\n\n----------------------------------------\n\nTITLE: Localize Keyboard Accelerator (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to localize a keyboard accelerator key using a .NET resource file and the x:Static markup extension. This enables adapting the shortcut to different language preferences.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Cut\"\n                Clicked=\"OnCutMenuFlyoutItemClicked\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <KeyboardAccelerator Modifiers=\"Ctrl\"\n                             Key=\"{x:Static local:AppResources.CutAcceleratorKey}\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Binding Library Project File XML\nDESCRIPTION: This XML snippet demonstrates the structure of a .NET SDK-style project file for an iOS Binding Library. It defines the target framework, enables nullable reference types and implicit usings, and specifies that it is a binding project. It also includes items for API definition and core source files.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/ios-binding-projects.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0-ios</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <IsBindingProject>true</IsBindingProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ObjcBindingApiDefinition Include=\"ApiDefinition.cs\" />\n    <ObjcBindingCoreSource Include=\"StructsAndEnums.cs\" />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Override Large Title Display in C# - .NET MAUI iOS\nDESCRIPTION: This C# code snippet demonstrates how to override the large title display behavior on a ContentPage programmatically using the fluent API and the `SetLargeTitleDisplay` method. It requires the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces. The `On<iOS>()` method ensures that this functionality is only applied to the iOS platform. The example sets the display mode to `LargeTitleDisplayMode.Never`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-large-title.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\npublic class iOSLargeTitlePageCode : ContentPage\n{\n    public iOSLargeTitlePageCode\n    {\n        On<iOS>().SetLargeTitleDisplay(LargeTitleDisplayMode.Never);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting .NET MAUI Version in .csproj\nDESCRIPTION: This XML snippet demonstrates how to override the default `$(MauiVersion)` variable in a .NET MAUI .csproj file. This is useful for specifying a specific version of .NET MAUI, such as when using nightly builds or builds from pull requests. It also sets the TargetFrameworks and UseMaui properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-8.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>\n        <UseMaui>True</UseMaui>\n        <MauiVersion>8.0.3</MauiVersion>\n    </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Set Default value for OnPlatform in XAML\nDESCRIPTION: This snippet shows how to set a Default value for the OnPlatform class. The Padding property is set to different values on iOS and Android, while all other platforms will use the Default value of 20.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\" Default=\"20\">\n            <On Platform=\"iOS\" Value=\"0,20,0,0\" />\n            <On Platform=\"Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Nesting StackLayout Objects (C#)\nDESCRIPTION: This C# snippet demonstrates how to create nested StackLayout objects programmatically. It creates Border objects, each containing a horizontally oriented StackLayout with a BoxView and a Label. These are then added to a main, vertically oriented StackLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CombinedStackLayoutPage : ContentPage\n{\n    public CombinedStackLayoutPage()\n    {\n        Title = \"Combined StackLayouts demo\";\n\n        Border border1 = new Border\n        {\n            Stroke = Colors.Black,\n            Padding = new Thickness(5)\n        };\n        StackLayout border1StackLayout = new StackLayout\n        {\n            Orientation = StackOrientation.Horizontal,\n            Spacing = 15\n        };\n        border1StackLayout.Add(new BoxView { Color = Colors.Red, WidthRequest = 40 });\n        border1StackLayout.Add(new Label { Text = \"Red\", FontSize = 20, VerticalOptions = LayoutOptions.Center });\n        border1.Content = border1StackLayout;\n\n        Border border2 = new Border\n        {\n            Stroke = Colors.Black,\n            Padding = new Thickness(5)\n        };\n        StackLayout border2StackLayout = new StackLayout\n        {\n            Orientation = StackOrientation.Horizontal,\n            Spacing = 15\n        };\n        border2StackLayout.Add(new BoxView { Color = Colors.Yellow, WidthRequest = 40 });\n        border2StackLayout.Add(new Label { Text = \"Yellow\", FontSize =  20, VerticalOptions = LayoutOptions.Center });\n        border2.Content = border2StackLayout;\n\n        Border border3 = new Border\n        {\n            Stroke = Colors.Black,\n            Padding = new Thickness(5)\n        };\n        StackLayout border3StackLayout = new StackLayout\n        {\n            Orientation = StackOrientation.Horizontal,\n            Spacing = 15\n        };\n        border3StackLayout.Add(new BoxView { Color = Colors.Blue, WidthRequest = 40 });\n        border3StackLayout.Add(new Label { Text = \"Blue\", FontSize = 20, VerticalOptions = LayoutOptions.Center });\n        border3.Content = border3StackLayout;\n\n        ...\n\n        StackLayout stackLayout = new StackLayout { Margin = new Thickness(20) };\n        stackLayout.Add(new Label { Text = \"Primary colors\" });\n        stackLayout.Add(border1);\n        stackLayout.Add(border2);\n        stackLayout.Add(border3);\n        stackLayout.Add(new Label { Text = \"Secondary colors\" });\n        stackLayout.Add(border4);\n        stackLayout.Add(border5);\n        stackLayout.Add(border6);\n\n        Content = stackLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Image CSS in .NET MAUI\nDESCRIPTION: Sets the background image of a .NET MAUI Page.  The value should be a string representing the image source or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\nbackground-image: bg.png;\n```\n\n----------------------------------------\n\nTITLE: Group Activities Entitlement XML\nDESCRIPTION: Defines the group activities entitlement that allows the app to communicate with the same app on other devices for group activities. It uses the `com.apple.developer.group-session` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.group-session</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist showing UILaunchStoryboardName\nDESCRIPTION: This XML snippet shows the `UILaunchStoryboardName` key set to `MauiSplash` in the `Info.plist` file for iOS. This indicates that the `MauiSplash.storyboard` file is being used as the launch storyboard, effectively enabling the splash screen for iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  ...\n  <key>UILaunchStoryboardName</key>\n  <string>MauiSplash</string>\n  ...\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: AllNotesPage.xaml.cs Code Behind C#\nDESCRIPTION: This C# code represents the cleaned-up code-behind for `AllNotesPage.xaml`. It contains only the constructor, as the event handlers have been replaced with commands in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Views;\n\npublic partial class AllNotesPage : ContentPage\n{\n\tpublic AllNotesPage()\n\t{\n\t\tInitializeComponent();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disable AssemblyInfo Generation in .NET MAUI Project (XML)\nDESCRIPTION: This snippet demonstrates how to disable the automatic generation of an AssemblyInfo.cs file by setting the GenerateAssemblyInfo property to false in the .NET MAUI project file. This is useful if you want to manually manage assembly information or if you have migrated the assembly information to the project file itself.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/includes/assemblyinfo-changes.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting SupportedOSPlatformVersion for Mac Catalyst (XML)\nDESCRIPTION: This snippet demonstrates setting the `SupportedOSPlatformVersion` build property to a minimum of 14.2 (for .NET MAUI 8.0) or 15.0 (for .NET MAUI 9.0) in the project file for .NET for Mac Catalyst apps. This ensures compatibility with the target operating system version.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    ...\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n\n    <SupportedOSPlatformVersion>14.2</SupportedOSPlatformVersion>\n    <UseMaui>true</UseMaui>\n    <MauiEnablePlatformUsings>true</MauiEnablePlatformUsings>  \n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Uninstall AEHD (AEHD 2.0 and lower) (cmd)\nDESCRIPTION: These commands are used to uninstall the Android Emulator Hypervisor Driver (AEHD) for versions 2.0 and lower.  The first command stops the 'gvm' service, and the second command deletes the service entry from the service control manager. These commands should be run with administrator privileges.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/hardware-acceleration.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nsc stop gvm\nsc delete gvm\n```\n\n----------------------------------------\n\nTITLE: Order CSS in .NET MAUI\nDESCRIPTION: Sets the order of a flex item in a .NET MAUI VisualElement. The value should be an integer or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_43\n\nLANGUAGE: CSS\nCODE:\n```\norder: -1;\n```\n\n----------------------------------------\n\nTITLE: Setting API Key User Secret in .NET CLI\nDESCRIPTION: This command sets the API key as a user secret using the .NET CLI. Replace <value> with your desired API key. User secrets are stored outside of your project directory and are used for development environments to keep sensitive information secure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet user-secrets set \"Authentication:ApiKey\" <value>\n```\n\n----------------------------------------\n\nTITLE: Async Button Click Handlers in .NET MAUI\nDESCRIPTION: This C# code snippet updates the SaveButton_Clicked and DeleteButton_Clicked event handlers to be async. After either button is pressed, the code navigates back to the previous page using `Shell.Current.GoToAsync(\"..\")`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n private async void SaveButton_Clicked(object sender, EventArgs e)\n    {\n        if (string.IsNullOrEmpty(TextEditor.Text))\n        {\n            await DisplayAlert(\"Alert\", \"Note is required\", \"OK\");\n            return;\n        }\n\n        if (File.Exists(Filename))\n        {\n            File.WriteAllText(Filename, TextEditor.Text);\n        }\n        else\n        {\n            Filename = Path.Combine(FileSystem.AppDataDirectory, $\"{Path.GetRandomFileName()}.notes.txt\");\n            File.WriteAllText(Filename, TextEditor.Text);\n        }\n        await Shell.Current.GoToAsync(\"..\");\n    }\n\n    private async void DeleteButton_Clicked(object sender, EventArgs e)\n    {\n        if (File.Exists(Filename))\n        {\n            File.Delete(Filename);\n        }\n\n        await Shell.Current.GoToAsync(\"..\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Set Flow Direction XAML\nDESCRIPTION: This code shows how to set the `FlowDirection` property on a `ContentPage` to `RightToLeft` in XAML, which affects the layout of all elements within the page, including the `CollectionView`. This enables right-to-left layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_26\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewmodels=\"clr-namespace:CollectionViewDemos.ViewModels\"\n             x:Class=\"CollectionViewDemos.Views.VerticalListFlowDirectionPage\"\n             Title=\"Vertical list (RTL FlowDirection)\"\n             FlowDirection=\"RightToLeft\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <Grid Margin=\"20\">\n        <CollectionView ItemsSource=\"{Binding Monkeys}\">\n            ...\n        </CollectionView>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handle DragOver Event C#\nDESCRIPTION: This C# snippet shows how to handle the `DragOver` event.  It sets the `AcceptedOperation` property of the `DragEventArgs` object to `DataPackageOperation.None`, which ensures that no action is taken when a drag source is dropped over the drop target.  The event is raised when a drag source is dragged over the drop target, but hasn't been dropped.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragOver(object sender, DragEventArgs e)\n{\n    e.AcceptedOperation = DataPackageOperation.None;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HelpText Property in C#\nDESCRIPTION: This code snippet shows how to set the `HelpText` attached property for a `Button` in C#. The `HelpText` property provides descriptive text for the UI element, similar to a tooltip. Note: This property has been deprecated in .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nButton button = new Button { Text = \"Toggle ActivityIndicator\" };\nAutomationProperties.SetIsInAccessibleTree(button, true);\nAutomationProperties.SetHelpText(button, \"Tap to toggle the activity indicator\");\n```\n\n----------------------------------------\n\nTITLE: Enable XAMLC Binding with Source Compilation - XML\nDESCRIPTION: This XML snippet shows how to enable the `$(MauiEnableXamlCBindingWithSourceCompilation)` build property in your app's project file. This enables the compilation of bindings that define the `Source` property, improving runtime performance. This only applies to .NET MAUI 9 and later.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<MauiEnableXamlCBindingWithSourceCompilation>true</MauiEnableXamlCBindingWithSourceCompilation>\n```\n\n----------------------------------------\n\nTITLE: C# Nested Interface with C# 8\nDESCRIPTION: This C# code demonstrates the use of nested classes directly within an interface, a feature introduced in C# 8.  It showcases the more modern approach that aligns more closely with Java's capabilities. This removes the need for generated top-level classes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo\n{\n    public class Bar : Java.Lang.Object { }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotate Transform - Rotating Text Around Center Point (C#)\nDESCRIPTION: This example demonstrates rotating the \".NET MAUI\" text 45 degrees around the center of the canvas. It uses the Rotate overload that accepts the rotation angle, the x-coordinate of the center, and the y-coordinate of the center. The x and y coordinates are derived from dirtyRect.Center. Requires the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/transforms.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.FontColor = Colors.Blue;\ncanvas.FontSize = 18;\n\ncanvas.Rotate(45, dirtyRect.Center.X, dirtyRect.Center.Y);\ncanvas.DrawString(\".NET MAUI\", dirtyRect.Center.X, dirtyRect.Center.Y, HorizontalAlignment.Left);\n```\n\n----------------------------------------\n\nTITLE: Initializing NavigationPage with a Root Page in App Class (net-maui-9.0+)\nDESCRIPTION: This code snippet demonstrates how to initialize a NavigationPage with a root page in the App class for .NET MAUI 9.0 and later. It overrides the CreateWindow method to create a Window with a NavigationPage as its content. The NavigationPage is initialized with the app's root page, setting up the initial navigation structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n\n    protected override Window CreateWindow(IActivationState? activationState)\n    {\n        return new Window(new NavigationPage(new MainPage()));\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Animations in MAUI (C#)\nDESCRIPTION: This code snippet creates a compound animation by sequentially translating a MAUI Image in multiple directions. Each translation is awaited, ensuring that the animations run in order.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateToAsync(-100, 0, 1000);    // Move image left\nawait image.TranslateToAsync(-100, -100, 1000); // Move image diagonally up and left\nawait image.TranslateToAsync(100, 100, 2000);   // Move image diagonally down and right\nawait image.TranslateToAsync(0, 100, 1000);     // Move image left\nawait image.TranslateToAsync(0, 0, 1000);       // Move image up\n```\n\n----------------------------------------\n\nTITLE: xcsync help command\nDESCRIPTION: This command displays help and usage information for the xcsync tool.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync -h|--help\n```\n\n----------------------------------------\n\nTITLE: Compound Animation in MAUI\nDESCRIPTION: This code snippet demonstrates a compound animation in MAUI. The `await` keyword ensures that each animation completes before the next one starts, creating a sequence of translations. The parameters are the X translation, Y translation, and duration in milliseconds for each `TranslateTo` call.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateTo(-100, 0, 1000);    // Move image left\nawait image.TranslateTo(-100, -100, 1000); // Move image diagonally up and left\nawait image.TranslateTo(100, 100, 2000);   // Move image diagonally down and right\nawait image.TranslateTo(0, 100, 1000);     // Move image left\nawait image.TranslateTo(0, 0, 1000);       // Move image up\n```\n\n----------------------------------------\n\nTITLE: Process Notification Actions in MainActivity (C#)\nDESCRIPTION: This C# method, `ProcessNotificationsAction`, checks if a given `Intent` contains an extra value named \"action\" and, if so, triggers the corresponding action using the `IPushDemoNotificationActionService` implementation. It handles potential exceptions and logs any errors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ProcessNotificationsAction(Intent intent)\n{\n    try\n    {\n        if (intent?.HasExtra(\"action\") == true)\n        {\n            var action = intent.GetStringExtra(\"action\");\n\n            if (!string.IsNullOrEmpty(action))\n                NotificationActionService.TriggerAction(action);\n        }\n    }\n    catch (Exception ex)\n    {\n        System.Diagnostics.Debug.WriteLine(ex.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Spell Checking XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable spell checking for an `Editor` by setting the `IsSpellCheckEnabled` property to `false`. This is useful for scenarios like entering a username.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_12\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor ... IsSpellCheckEnabled=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Create QuadraticBezierSegment in .NET MAUI\nDESCRIPTION: This XAML snippet shows how to create and render a QuadraticBezierSegment within a Path object in .NET MAUI. The QuadraticBezierSegment defines a single quadratic Bezier curve using a control point (Point1) and an end point (Point2). The starting point of the curve is defined by the StartPoint of the PathFigure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,10\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <QuadraticBezierSegment Point1=\"200,200\"\n                                                        Point2=\"300,10\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: App Class Definition in .NET MAUI 8.0 C#\nDESCRIPTION: This code snippet shows the structure of the `App` class in a .NET MAUI application for .NET MAUI 8.0. The `App` class derives from the `Application` class. The constructor calls `InitializeComponent()` and sets the `MainPage` property to a new instance of `AppShell`. `AppShell` represents the visual structure of the app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp;\n\npublic class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n\n        MainPage = new AppShell();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Converter in Data Binding with Parameter\nDESCRIPTION: This XAML code demonstrates how to use the `FloatToIntConverter` in a data binding. It binds the `Red` property of a data source to the `Text` property of a `Label`. The `Converter` property specifies the converter instance, and the `ConverterParameter` property provides a multiplier of 255. The `StringFormat` is used to display the converted value in hexadecimal format.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/data-binding-basics.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding Red,\n                      Converter={StaticResource intConverter},\n                      ConverterParameter=255,\n                      StringFormat='R={0:X2}'}\" />\n```\n\n----------------------------------------\n\nTITLE: Toggling EmptyView at runtime (C#)\nDESCRIPTION: This C# snippet shows how to toggle between different EmptyView options defined in a ResourceDictionary at runtime, using the BindableLayout.SetEmptyView method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ToggleEmptyView(bool isToggled)\n{\n    object view = isToggled ? Resources[\"BasicEmptyView\"] : Resources[\"AdvancedEmptyView\"];\n    BindableLayout.SetEmptyView(stackLayout, view);\n}\n```\n\n----------------------------------------\n\nTITLE: Add .NET Aspire service defaults in .NET MAUI - C#\nDESCRIPTION: This code snippet demonstrates how to modify the `CreateMauiApp` method in your `MauiProgram` class to invoke the `AddServiceDefaults` method, from the .NET Aspire service defaults project, on the `MauiAppBuilder` object. This connects telemetry and service discovery to your .NET MAUI application. Requires .NET Aspire service defaults project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddServiceDefaults();\n```\n\n----------------------------------------\n\nTITLE: Declare Supported Languages in Info.plist - XML\nDESCRIPTION: This snippet shows how to declare the supported languages in the Info.plist file for iOS and Mac Catalyst. This informs the system which languages the app supports for localization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleLocalizations</key>\n<array>\n    <string>de</string>\n    <string>es</string>\n    <string>fr</string>\n    <string>ja</string>\n    <string>pt</string> <!-- Brazil -->\n    <string>pt-PT</string> <!-- Portugal -->\n    <string>ru</string>\n    <string>zh-Hans</string>\n    <string>zh-Hant</string>\n</array>\n<key>CFBundleDevelopmentRegion</key>\n<string>en</string>\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with a Frame in XAML\nDESCRIPTION: This XAML snippet demonstrates how to combine a Frame with a StackLayout to create a card UI element. It sets the BorderColor, CornerRadius, and Padding of the Frame.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/frame.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Frame BorderColor=\"Gray\"\n       CornerRadius=\"5\"\n       Padding=\"8\">\n  <StackLayout>\n    <Label Text=\"Card Example\"\n           FontSize=\"14\"\n           FontAttributes=\"Bold\" />\n    <BoxView Color=\"Gray\"\n             HeightRequest=\"2\"\n             HorizontalOptions=\"Fill\" />\n    <Label Text=\"Frames can wrap more complex layouts to create more complex UI components, such as this card!\"/>\n  </StackLayout>\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration with CLR Namespace\nDESCRIPTION: Demonstrates declaring an XML namespace in XAML, specifying the CLR namespace and assembly name. This is a traditional, and sometimes cumbersome, way to reference types in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:MyCompany.Controls;assembly=MyCompany.Controls\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Effect and Platform Implementations Combined C#\nDESCRIPTION: This code combines a RoutingEffect and PlatformEffect into a single file, using conditional compilation for platform-specific code. It defines a FocusRoutingEffect and corresponding FocusPlatformEffect implementations for Android, iOS, and Windows.  The PlatformEffect implementations are empty but would contain platform-specific customization logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/effects.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Platform;\n\nnamespace MyMauiApp.Effects;\n\ninternal class FocusRoutingEffect : RoutingEffect\n{\n}\n\n#if ANDROID\ninternal class FocusPlatformEffect : PlatformEffect\n{\n    protected override void OnAttached()\n    {\n        // Customize the control here\n    }\n\n    protected override void OnDetached()\n    {\n        // Cleanup the control customization here\n    }\n}\n#elif IOS\ninternal class FocusPlatformEffect : PlatformEffect\n{\n    protected override void OnAttached()\n    {\n        // Customize the control here\n    }\n\n    protected override void OnDetached()\n    {\n        // Cleanup the control customization here\n    }\n}\n#elif WINDOWS\ninternal class FocusPlatformEffect : PlatformEffect\n{\n    protected override void OnAttached()\n    {\n        // Customize the control here\n    }\n\n    protected override void OnDetached()\n    {\n        // Cleanup the control customization here\n    }\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Connect to Android device over WiFi using ADB\nDESCRIPTION: This command connects to an Android device over WiFi using its IP address and port 5555. The device and computer must be on the same WiFi network, and the device must be configured to listen on port 5555 using `adb tcpip`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/device/setup.md#_snippet_1\n\nLANGUAGE: command\nCODE:\n```\nadb connect 192.168.1.28:5555\n```\n\n----------------------------------------\n\nTITLE: Monkey Class Definition in C#\nDESCRIPTION: This C# code defines a simple Monkey class with properties for Name, Location, Details, and ImageUrl. This class is used in the data binding example for populating the Picker control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Monkey\n{\n  public string Name { get; set; }\n  public string Location { get; set; }\n  public string Details { get; set; }\n  public string ImageUrl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: x:Static Extension - Verbose Syntax\nDESCRIPTION: This XAML code shows the most verbose way to use the `x:Static` markup extension. It instantiates the `StaticExtension` class as an object element within the `Label.FontSize` property element and sets its `Member` property to reference the `NormalFontSize` constant defined in the `AppConstants` class.  The namespace alias `local` must be defined to point to the namespace containing `AppConstants`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             xmlns:local=\"clr-namespace:MarkupExtensions\"\n             x:Class=\"MarkupExtensions.StaticDemoPage\"\n             Title=\"x:Static Demo\">\n    <StackLayout Margin=\"10, 0\">\n        <Label Text=\"Label No. 1\">\n            <Label.FontSize>\n                <x:StaticExtension Member=\"local:AppConstants.NormalFontSize\" />\n            </Label.FontSize>\n        </Label>\n        ···\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting RefreshView pull direction in C#\nDESCRIPTION: This C# snippet demonstrates how to set the `RefreshPullDirection` property of a `RefreshView` to `LeftToRight` using the fluent API. This will change the pull direction to left-to-right on Windows. It requires the `Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific` namespace to be included.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/refreshview-pulldirection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\nrefreshView.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetRefreshPullDirection(RefreshPullDirection.LeftToRight);\n```\n\n----------------------------------------\n\nTITLE: Launch App on Device (Stopped)\nDESCRIPTION: This command launches the application on the specified physical device, starting it in a stopped state. It requires the device identifier and the bundle identifier of the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcrun devicectl device process launch --device <device-identifier> --start-stopped <bundle-identifier>\n```\n\n----------------------------------------\n\nTITLE: Configure BundleResource for MacCatalyst with XML\nDESCRIPTION: This XML snippet configures the BundleResource build action for all files within the Platforms\\MacCatalyst\\Resources folder and its subfolders. It uses the TargetPath attribute to specify the output path for each file, preserving the directory structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/includes/bundle-resource-maccat-xml.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup Condition=\"$(TargetFramework.Contains('-maccatalyst'))\">\n   <BundleResource Include=\"Platforms\\MacCatalyst\\Resources\\**\" TargetPath=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Set Current Flyout Item Statically C#\nDESCRIPTION: This C# snippet sets the `CurrentItem` property using the static `Shell.Current` property to access the current Shell instance. This approach can be used from any class within the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nShell.Current.CurrentItem = aboutItem;\n```\n\n----------------------------------------\n\nTITLE: Opening SwipeView to LeftItems Collection C#\nDESCRIPTION: This code snippet demonstrates how to programmatically open a .NET MAUI SwipeView to reveal the swipe items in the `LeftItems` collection using the `Open` method and the `OpenSwipeItem.LeftItems` enumeration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nswipeView.Open(OpenSwipeItem.LeftItems);\n```\n\n----------------------------------------\n\nTITLE: Drawing an Arc in .NET MAUI Graphics\nDESCRIPTION: This code snippet demonstrates how to draw an arc on an ICanvas using the DrawArc method. It sets the stroke color and size, and defines the arc's position, dimensions, start angle, end angle, direction, and whether the arc should be closed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Teal;\ncanvas.StrokeSize = 4;\ncanvas.DrawArc(10, 10, 100, 100, 0, 180, true, false);\n```\n\n----------------------------------------\n\nTITLE: Present Modal Page using Modal Navigation (C#)\nDESCRIPTION: This code snippet shows how to present a modal page that's configured as a popover using modal navigation.  The `Navigation.PushModalAsync` method is used to display the `PopoverPage` modally. This is required to trigger the popover presentation on iOS and Mac Catalyst.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-popover.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nPage modalPage = new PopoverPage(originButton, Rectangle.Empty);\nawait Navigation.PushModalAsync(modalPage);\n```\n\n----------------------------------------\n\nTITLE: Implicit Style Definition in XAML\nDESCRIPTION: This code shows how to define an implicit style within a ContentPage's ResourceDictionary. The style targets Entry objects and sets properties like HorizontalOptions, VerticalOptions, BackgroundColor, FontAttributes, and TextColor. Because no x:Key is provided, the style is implicitly applied to all Entry objects within the ContentPage scope that exactly match the TargetType.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style TargetType=\"Entry\">\n            <Setter Property=\"HorizontalOptions\" Value=\"Fill\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n            <Setter Property=\"BackgroundColor\" Value=\"Yellow\" />\n            <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n            <Setter Property=\"TextColor\" Value=\"Blue\" />\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <Entry Text=\"These entries\" />\n        <Entry Text=\"are demonstrating\" />\n        <Entry Text=\"implicit styles,\" />\n        <Entry Text=\"and an implicit style override\"\n               BackgroundColor=\"Lime\"\n               TextColor=\"Red\" />\n        <local:CustomEntry Text=\"Subclassed Entry is not receiving the style\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Strong Circular Reference: Parent/Child Relationship - C#\nDESCRIPTION: This example demonstrates how a strong circular reference can occur between a parent `Container` (UIView subclass) and a child `MyView` (UIView subclass) within the iOS/Mac Catalyst environment. The example shows the initial setup that leads to the cycle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nclass Container : UIView\n{\n    public void Poke()\n    {\n        // Call this method to poke this object\n    }\n}\n\nclass MyView : UIView\n{\n    Container _parent;\n\n    public MyView(Container parent)\n    {\n        _parent = parent;\n    }\n\n    void PokeParent()\n    {\n        _parent.Poke();\n    }\n}\n\nvar container = new Container();\ncontainer.AddSubview(new MyView(container));\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maps API Key to AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add the Google Maps API key to the AndroidManifest.xml file. The API key is required for the Map control to function properly on Android and allows the app to access Google Maps services.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<application android:allowBackup=\"true\" android:icon=\"@mipmap/appicon\" android:roundIcon=\"@mipmap/appicon_round\" android:supportsRtl=\"true\">\n  <meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"PASTE-YOUR-API-KEY-HERE\" />\n</application>\n```\n\n----------------------------------------\n\nTITLE: Enable Spell Check on SearchBar in C# (.NET MAUI, Windows)\nDESCRIPTION: This C# snippet demonstrates how to enable spell checking for a SearchBar control on the Windows platform using the fluent API. It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific` namespace and uses the `On<Windows>` extension method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/searchbar-spell-check.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\n\nsearchBar.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetIsSpellCheckEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting ConverterParameter in XAML\nDESCRIPTION: Demonstrates how to set the `ConverterParameter` in XAML using a static resource and string formatting. The `ConverterParameter` is set to the string \"255\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding Red,\n                      Converter={StaticResource doubleToInt},\n                      ConverterParameter=255,\n                      StringFormat='Red = {0:X2}'}\" />\n```\n\n----------------------------------------\n\nTITLE: Grid Alignment in C#\nDESCRIPTION: This C# code creates a Grid with nine cells programmatically and adds labels to each cell with different horizontal and vertical alignment configurations.  The code demonstrates setting `HorizontalOptions` and `VerticalOptions` to position the labels. It also shows how to add views to specific row and column indices in the Grid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/grid.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GridAlignmentPage : ContentPage\n{\n    public GridAlignmentPage()\n    {\n        Grid grid = new Grid\n        {\n            RowDefinitions =\n            {\n                new RowDefinition(),\n                new RowDefinition(),\n                new RowDefinition()\n            },\n            ColumnDefinitions =\n            {\n                new ColumnDefinition(),\n                new ColumnDefinition(),\n                new ColumnDefinition()\n            }\n        };\n\n        // Row 0\n        grid.Add(new BoxView\n        {\n            Color = Colors.AliceBlue\n        });\n        grid.Add(new Label\n        {\n            Text = \"Upper left\",\n            HorizontalOptions = LayoutOptions.Start,\n            VerticalOptions = LayoutOptions.Start\n        });\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.LightSkyBlue\n        }, 1, 0);\n        grid.Add(new Label\n        {\n            Text = \"Upper center\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Start\n        }, 1, 0);\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.CadetBlue\n        }, 2, 0);\n        grid.Add(new Label\n        {\n            Text = \"Upper right\",\n            HorizontalOptions = LayoutOptions.End,\n            VerticalOptions = LayoutOptions.Start\n        }, 2, 0);\n\n        // Row 1\n        grid.Add(new BoxView\n        {\n            Color = Colors.CornflowerBlue\n        }, 0, 1);\n        grid.Add(new Label\n        {\n            Text = \"Center left\",\n            HorizontalOptions = LayoutOptions.Start,\n            VerticalOptions = LayoutOptions.Center\n        }, 0, 1);\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.DodgerBlue\n        }, 1, 1);\n        grid.Add(new Label\n        {\n            Text = \"Center center\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Center\n        }, 1, 1);\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.DarkSlateBlue\n        }, 2, 1);\n        grid.Add(new Label\n        {\n            Text = \"Center right\",\n            HorizontalOptions = LayoutOptions.End,\n            VerticalOptions = LayoutOptions.Center\n        }, 2, 1);\n\n        // Row 2\n        grid.Add(new BoxView\n        {\n            Color = Colors.SteelBlue\n        }, 0, 2);\n        grid.Add(new Label\n        {\n            Text = \"Lower left\",\n            HorizontalOptions = LayoutOptions.Start,\n            VerticalOptions = LayoutOptions.End\n        }, 0, 2);\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.LightBlue\n        }, 1, 2);\n        grid.Add(new Label\n        {\n            Text = \"Lower center\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.End\n        }, 1, 2);\n\n        grid.Add(new BoxView\n        {\n            Color = Colors.BlueViolet\n        }, 2, 2);\n        grid.Add(new Label\n        {\n            Text = \"Lower right\",\n            HorizontalOptions = LayoutOptions.End,\n            VerticalOptions = LayoutOptions.End\n        }, 2, 2);\n\n        Title = \"Grid alignment demo\";\n        Content = grid;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Certificate Security Check (C#)\nDESCRIPTION: This C# code configures an HttpClientHandler to bypass SSL certificate validation errors when connecting to localhost over HTTPS. It is conditionally compiled for debug builds only to avoid security issues in production.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar handler = new HttpClientHandler();\n\n#if DEBUG\nhandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) =>\n{\n    if (cert != null && cert.Issuer.Equals(\"CN=localhost\"))\n        return true;\n    return errors == System.Net.Security.SslPolicyErrors.None;\n};\n#endif\n\nvar client = new HttpClient(handler);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hotspot Configuration Entitlement in XML\nDESCRIPTION: This snippet defines the hotspot configuration entitlement, allowing the app to configure WiFi networks. The `com.apple.developer.networking.HotspotConfiguration` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.networking.HotspotConfiguration</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView to Views in XAML\nDESCRIPTION: Demonstrates setting the EmptyView property of a CarouselView to a ContentView containing a StackLayout with Labels in XAML. The StackLayout and its labels are displayed when ItemsSource is null or empty. Note the use of ContentView as a root element.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout Margin=\"20\">\n    <SearchBar SearchCommand=\"{Binding FilterCommand}\"\n               SearchCommandParameter=\"{Binding x:DataType='SearchBar', Source={RelativeSource Self}, Path=Text}\"\n               Placeholder=\"Filter\" />\n    <CarouselView ItemsSource=\"{Binding Monkeys}\">\n        <CarouselView.EmptyView>\n            <ContentView>\n                <StackLayout HorizontalOptions=\"CenterAndExpand\"\n                             VerticalOptions=\"CenterAndExpand\">\n                    <Label Text=\"No results matched your filter.\"\n                           Margin=\"10,25,10,10\"\n                           FontAttributes=\"Bold\"\n                           FontSize=\"18\"\n                           HorizontalOptions=\"Fill\"\n                           HorizontalTextAlignment=\"Center\" />\n                    <Label Text=\"Try a broader filter?\"\n                           FontAttributes=\"Italic\"\n                           FontSize=\"12\"\n                           HorizontalOptions=\"Fill\"\n                           HorizontalTextAlignment=\"Center\" />\n                </StackLayout>\n            </ContentView>\n        </CarouselView.EmptyView>\n        <CarouselView.ItemTemplate>\n            ...\n        </CarouselView.ItemTemplate>\n    </CarouselView>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Skew Transform in XAML\nDESCRIPTION: This XAML code snippet shows how to apply a skew transform to a Path object. It skews the Path by 45 degrees along the X-axis from the center point (0,0).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <SkewTransform CenterX=\"0\"\n                       CenterY=\"0\"\n                       AngleX=\"45\"\n                       AngleY=\"0\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read/Write Storage Permission - C#\nDESCRIPTION: This code shows how to implement a custom permission for read and write storage access on Android.  It inherits from `BasePlatformPermission` and specifies the required Android permissions. Requires Android.Manifest namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/permissions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ReadWriteStoragePermission : Permissions.BasePlatformPermission\n{\n    public override (string androidPermission, bool isRuntime)[] RequiredPermissions => new List<(string androidPermission, bool isRuntime)>\n    {\n        (Android.Manifest.Permission.ReadExternalStorage, true),\n        (Android.Manifest.Permission.WriteExternalStorage, true)\n    }.ToArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Style Applied to Derived Types in XAML\nDESCRIPTION: This example demonstrates how to apply an implicit style to derived types using the ApplyToDerivedTypes property. The style targets Button objects and sets the BackgroundColor to Red.  Setting ApplyToDerivedTypes to True ensures the style is applied to all Button objects and any controls derived from Button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Button\"\n       ApplyToDerivedTypes=\"True\">\n    <Setter Property=\"BackgroundColor\"\n            Value=\"Red\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Load Font Icon - XAML\nDESCRIPTION: This XAML code demonstrates how to use the `FontImage` markup extension to display a font icon in an `Image` view. It sets the `Source` property of the `Image` to a `FontImage` instance, specifying the glyph, font family, and size.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<Image BackgroundColor=\"#D1D1D1\"\n       Source=\"{FontImage &#xf30c;, FontFamily=Ionicons, Size=44}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a PolyLineSegment in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a PolyLineSegment within a Path object in .NET MAUI to draw multiple connected line segments. The PolyLineSegment uses the Points property, a PointCollection, to define the end points for each line segment. It requires .NET MAUI to be correctly configured in the project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigure StartPoint=\"10,10\">\n                    <PathFigure.Segments>\n                        <PolyLineSegment Points=\"50,10 50,50\" />\n                    </PathFigure.Segments>\n                </PathFigure.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Adding NavigatedTo Event to ContentPage in .NET MAUI XAML\nDESCRIPTION: This XAML snippet demonstrates adding the `NavigatedTo` event to a `ContentPage`. This event is raised every time the page is navigated to, allowing you to execute code in response to navigation events.  The event handler `ContentPage_NavigatedTo` is assigned to the `NavigatedTo` event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/bugs.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Notes.Views.AllNotesPage\"\n             Title=\"All Notes\"\n             BackgroundColor=\"#F2F2F2\"\n             NavigatedTo=\"ContentPage_NavigatedTo\">\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset using FileSystem API - C#\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset that has been deployed with the application. It uses `FileSystem.OpenAppPackageFileAsync` to open a stream to the specified file within the app package. The stream is then read to retrieve the contents of the asset.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/shell/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting the Base Size of an Image in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to specify the base size of an image using the `BaseSize` attribute within the `<MauiImage>` element. The base size represents the baseline density of the image and is used for scaling the image to different densities for various target platforms. If a base size is not specified for a bitmap image, it will not be resized.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/images.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\logo.jpg\" BaseSize=\"376,678\" />\n```\n\n----------------------------------------\n\nTITLE: Instantiate and Use Custom Control in XAML\nDESCRIPTION: This code shows how to instantiate a custom control (`CardView`) in a XAML page. It includes the necessary namespace declaration and property settings. Properties like BorderColor, CardTitle, CardDescription, IconBackgroundColor, and IconImageSource are set on the CardView instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/contentview.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:controls=\"clr-namespace:CardViewDemo.Controls\"\n             x:Class=\"CardViewDemo.CardViewXamlPage\">\n   <ScrollView>\n       <StackLayout>\n           <controls:CardView BorderColor=\"DarkGray\"\n                              CardTitle=\"Slavko Vlasic\"\n                              CardDescription=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elit dolor, convallis non interdum.\"\n                              IconBackgroundColor=\"SlateGray\"\n                              IconImageSource=\"user.png\" />\n            <!-- More CardView objects -->\n       </StackLayout>\n   </ScrollView>\n</ContentPage>                   \n```\n\n----------------------------------------\n\nTITLE: Enable Simultaneous Pan Gesture Recognition in XAML\nDESCRIPTION: This XAML snippet shows how to enable the `PanGestureRecognizerShouldRecognizeSimultaneously` attached property, allowing a PanGestureRecognizer and a scrolling view to both respond to pan gestures simultaneously. This is achieved by setting the property to `true` within the `Application` tag, specifically targeting the iOS platform using the `ios` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/application-pan-gesture.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Application ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             ios:Application.PanGestureRecognizerShouldRecognizeSimultaneously=\"true\">\n    ...\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Implement Service Properties in MainActivity (C#)\nDESCRIPTION: These C# properties retrieve concrete implementations of `IPushDemoNotificationActionService` and `IDeviceInstallationService` from the application's dependency injection container. They use lazy initialization to ensure that the services are only resolved when needed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nIPushDemoNotificationActionService NotificationActionService =>\n    _notificationActionService ?? (_notificationActionService = IPlatformApplication.Current.Services.GetService<IPushDemoNotificationActionService>());\n\nIDeviceInstallationService DeviceInstallationService =>\n    _deviceInstallationService ?? (_deviceInstallationService = IPlatformApplication.Current.Services.GetService<IDeviceInstallationService>());\n```\n\n----------------------------------------\n\nTITLE: Getting Fonts path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet retrieves the Fonts path on Mac Catalyst using NSFileManager and Path.Combine, matching macOS behavior. It avoids Environment.GetFolderPath, utilizing Xamarin.Mac APIs for path resolution and combines the LibraryDirectory path with the \"Fonts\" subdirectory.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nPath.Combine(new NSFileManager().GetUrls(NSSearchPathDirectory.LibraryDirectory, NSSearchPathDomain.User)[0].Path, \"Fonts\")\n```\n\n----------------------------------------\n\nTITLE: Rotate VisualElement .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to rotate a VisualElement (specifically an Image) by a specified number of degrees using the RotateTo extension method. The image will rotate to 360 degrees over 2 seconds, and then the Rotation property is reset to 0 to allow for further rotations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RotateTo(360, 2000);\nimage.Rotation = 0;\n```\n\n----------------------------------------\n\nTITLE: Setting multiple Label properties using property elements in XAML\nDESCRIPTION: This code shows how to set multiple properties of a Label control in .NET MAUI using property elements. FontAttributes, FontSize, and TextColor are all set using the property element syntax. This allows for more complex property assignments within the XAML structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Hello, XAML!\"\n       VerticalOptions=\"Center\">\n    <Label.FontAttributes>\n        Bold\n    </Label.FontAttributes>\n    <Label.FontSize>\n        Large\n    </Label.FontSize>\n    <Label.TextColor>\n        Aqua\n    </Label.TextColor>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Flex Grow CSS in .NET MAUI\nDESCRIPTION: Sets the flex grow factor of a flex item in a .NET MAUI VisualElement, determining how much the item will grow relative to other flex items in the flex container. The value should be a float or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_24\n\nLANGUAGE: CSS\nCODE:\n```\nflex-grow: 1.5;\n```\n\n----------------------------------------\n\nTITLE: Row Gap CSS in .NET MAUI\nDESCRIPTION: Sets the gap between rows in a .NET MAUI Grid. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_50\n\nLANGUAGE: CSS\nCODE:\n```\nrow-gap: 12;\n```\n\n----------------------------------------\n\nTITLE: Consuming Predefined Easing Functions in .NET MAUI\nDESCRIPTION: This code demonstrates how to apply predefined easing functions to animations using the ViewExtensions class in .NET MAUI. It translates, scales, and rotates an image with different easing functions like BounceIn, CubicIn, SinInOut, and CubicOut. These animations require the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet10.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateToAsync(0, 200, 2000, Easing.BounceIn);\nawait image.ScaleToAsync(2, 2000, Easing.CubicIn);\nawait image.RotateToAsync(360, 2000, Easing.SinInOut);\nawait image.ScaleToAsync(1, 2000, Easing.CubicOut);\nawait image.TranslateToAsync(0, -200, 2000, Easing.BounceOut);\n```\n\n----------------------------------------\n\nTITLE: Rotate Path using RotateTransform in XAML\nDESCRIPTION: This example demonstrates how to rotate a Path object by 45 degrees around its upper-left corner using RotateTransform in .NET MAUI XAML. It uses the Angle, CenterX, and CenterY properties to define the rotation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/path-transforms.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Aspect=\"Uniform\"\n      HorizontalOptions=\"Center\"\n      HeightRequest=\"100\"\n      WidthRequest=\"100\"\n      Data=\"M13.908992,16.207977L32.000049,16.207977 32.000049,31.999985 13.908992,30.109983z\">\n    <Path.RenderTransform>\n        <RotateTransform CenterX=\"0\"\n                         CenterY=\"0\"\n                         Angle=\"45\" />\n    </Path.RenderTransform>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Retrieve SelectedItem from Picker in XAML\nDESCRIPTION: This XAML snippet demonstrates how to bind the Text property of a Label to the SelectedItem property of a Picker. The Label will display the selected item from the Picker.  The Source of the binding is set to the picker instance using x:Reference.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/picker.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding x:DataType='Picker', Source={x:Reference picker}, Path=SelectedItem}\" />\n```\n\n----------------------------------------\n\nTITLE: Building iOS with dotnet CLI\nDESCRIPTION: This command builds a .NET MAUI iOS application from the Windows command line using the .NET CLI. It specifies the target framework, server address, username, password, TCP port, and remote .NET root directory. This requires the .NET SDK to be installed and configured.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/pair-to-mac.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ndotnet build -f net8.0-ios -p:ServerAddress={macOS build host IP address} -p:ServerUser={macOS username} -p:ServerPassword={macOS password} -p:TcpPort=58181 -p:_DotNetRootRemoteDirectory=/Users/{macOS username}/Library/Caches/Xamarin/XMA/SDKs/dotnet/\n```\n\n----------------------------------------\n\nTITLE: Enabling Font Scaling in XAML for Entry on iOS\nDESCRIPTION: This XAML snippet demonstrates how to enable the `AdjustsFontSizeToFitWidth` property for an Entry control, ensuring the font size scales to fit within the Entry's width on iOS. It requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace to be declared in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/entry-font-size.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n    <StackLayout Margin=\"20\">\n        <Entry x:Name=\"entry\"\n               Placeholder=\"Enter text here to see the font size change\"\n               FontSize=\"22\"\n               ios:Entry.AdjustsFontSizeToFitWidth=\"true\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Geometry with GeometryGroup in XAML\nDESCRIPTION: This XAML code demonstrates how to create a composite geometry using a GeometryGroup. It combines four EllipseGeometry objects to create four overlapping circles, setting stroke, stroke thickness and fill properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Green\"\n      StrokeThickness=\"2\"\n      Fill=\"Orange\">\n    <Path.Data>\n        <GeometryGroup>\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"150,150\" />\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"250,150\" />\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"150,250\" />\n            <EllipseGeometry RadiusX=\"100\"\n                             RadiusY=\"100\"\n                             Center=\"250,250\" />\n        </GeometryGroup>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Initializing NotesViewModel Class C#\nDESCRIPTION: This snippet initializes the `NotesViewModel` class as part of the MVVM pattern implementation. It provides a basic structure where properties and commands are added to support the `AllNotes` view. It includes necessary using statements for CommunityToolkit.Mvvm.Input, System.Collections.ObjectModel, and System.Windows.Input.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing CommunityToolkit.Mvvm.Input;\nusing System.Collections.ObjectModel;\nusing System.Windows.Input;\n\nnamespace Notes.ViewModels;\n\ninternal class NotesViewModel: IQueryAttributable\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using Directive for Contacts in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to use a 'using' directive to avoid namespace conflicts when working with the Contacts API in .NET MAUI, specifically when targeting iOS or macOS. By creating an alias for the Microsoft.Maui.ApplicationModel.Communication namespace, you can use the Contacts class without fully qualifying it.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Communication = Microsoft.Maui.ApplicationModel.Communication;\n\n// Code that uses the namespace:\nvar contact = await Communication.Contacts.Default.PickContactAsync();\n```\n\n----------------------------------------\n\nTITLE: Paint Rectangle with Image\nDESCRIPTION: This snippet demonstrates how to load an embedded image resource, resize it, create an ImagePaint object, and use it to fill a rectangle on a canvas. It requires System.Reflection and Microsoft.Maui.Graphics.Platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\nusing Microsoft.Maui.Graphics.Platform;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    ImagePaint imagePaint = new ImagePaint\n    {\n        Image = image.Downsize(100)\n    };\n    canvas.SetFillPaint(imagePaint, RectF.Zero);\n    canvas.FillRectangle(0, 0, 240, 300);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Hyper-V and Hypervisor Platform (PowerShell)\nDESCRIPTION: These PowerShell commands enable the Hyper-V and Windows Hypervisor Platform features. They are used to resolve issues when these features are disabled, which can prevent the Android Emulator from using hardware acceleration, leading to poor performance. A reboot is required after running these commands.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\nEnable-WindowsOptionalFeature -Online -FeatureName HypervisorPlatform -All\n```\n\n----------------------------------------\n\nTITLE: Passing Single Use Object-Based Navigation Data in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to pass single-use object-based navigation data using ShellNavigationQueryParameters in .NET MAUI. It retrieves the selected item, adds it to a ShellNavigationQueryParameters object, and navigates to another page, passing the object as a navigation parameter. The data is cleared after the navigation occurs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nasync void OnCollectionViewSelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    Animal animal = e.CurrentSelection.FirstOrDefault() as Animal;\n    var navigationParameter = new ShellNavigationQueryParameters\n    {\n        { \"Bear\", animal }\n    };\n    await Shell.Current.GoToAsync($\"beardetails\", navigationParameter);\n}\n```\n\n----------------------------------------\n\nTITLE: RadioButton Visual States XAML\nDESCRIPTION: This XAML code defines visual states for the `Checked` and `Unchecked` states of RadioButtons. When checked, the text color is green with opacity 1; when unchecked, it's red with opacity 0.5.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...>\n    <ContentPage.Resources>\n        <Style TargetType=\"RadioButton\">\n            <Setter Property=\"VisualStateManager.VisualStateGroups\">\n                <VisualStateGroupList>\n                    <VisualStateGroup x:Name=\"CheckedStates\">\n                        <VisualState x:Name=\"Checked\">\n                            <VisualState.Setters>\n                                <Setter Property=\"TextColor\"\n                                        Value=\"Green\" />\n                                <Setter Property=\"Opacity\"\n                                        Value=\"1\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState x:Name=\"Unchecked\">\n                            <VisualState.Setters>\n                                <Setter Property=\"TextColor\"\n                                        Value=\"Red\" />\n                                <Setter Property=\"Opacity\"\n                                        Value=\"0.5\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateGroupList>\n            </Setter>\n        </Style>\n    </ContentPage.Resources>\n    <StackLayout>\n        <Label Text=\"What's your favorite mode of transport?\" />\n        <RadioButton Content=\"Car\" />\n        <RadioButton Content=\"Bike\" />\n        <RadioButton Content=\"Train\" />\n        <RadioButton Content=\"Walking\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Limit Input Length - MAUI XAML\nDESCRIPTION: Shows how to limit the maximum input length allowed in the Editor using the MaxLength property.  A value of 0 disables input, int.MaxValue is default (no limit).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor ... MaxLength=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Define Visual States in Style - .NET MAUI XAML\nDESCRIPTION: This example demonstrates how to define common visual states for an Entry control within a Style. This allows multiple Entry controls to share the same visual state behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Entry\">\n    <Setter Property=\"FontSize\" Value=\"18\" />\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Lime\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"FontSize\" Value=\"36\" />\n                        <Setter Property=\"BackgroundColor\" Value=\"Lime\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"Disabled\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"PointerOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Check ADB Devices Command\nDESCRIPTION: This command is used to verify that the Android SDK can connect to the emulator. It lists all attached Android devices, including emulators, that are accessible via the Android Debug Bridge (adb). If the emulator appears in the list, it indicates successful connectivity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap Style in C#\nDESCRIPTION: This snippet shows how to set the line cap style for a line drawn on a .NET MAUI canvas. It sets the `StrokeSize`, `StrokeColor`, and `StrokeLineCap` properties, and then calls the `DrawLine` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\ncanvas.StrokeSize = 10;\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeLineCap = LineCap.Round;\ncanvas.DrawLine(10, 10, 110, 110);\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in Windows MainWindow C#\nDESCRIPTION: Initializes .NET MAUI within the Windows MainWindow's constructor. It creates a Lazy<MauiApp> and a MauiContext for embedding .NET MAUI views. Uses MauiApp.CreateEmbeddedWindowContext to create a window context, if UseWindowContext is true.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.WinUI;\n\npublic sealed partial class MainWindow : Microsoft.UI.Xaml.Window\n{\n    public static readonly Lazy<MauiApp> MauiApp = new(() =>\n    {\n        var mauiApp = MauiProgram.CreateMauiApp(builder =>\n        {\n            builder.UseMauiEmbedding();\n        });\n        return mauiApp;\n    });\n\n    public static bool UseWindowContext = true;\n\n    public MainWindow()\n    {\n        this.InitializeComponent();\n\n        // Ensure .NET MAUI app is built before creating .NET MAUI views\n        var mauiApp = MainWindow.MauiApp.Value;\n\n        // Create .NET MAUI context\n        var context = UseWindowContext\n            ? mauiApp.CreateEmbeddedWindowContext(this) // Create window context\n            : new MauiContext(mauiApp.Services);        // Create app context\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Handlers Manually in C#\nDESCRIPTION: This C# code snippet shows how to manually disconnect handlers from a given `IView` using the `DisconnectHandlers` extension method. This is necessary when the `HandlerProperties.DisconnectPolicy` is set to `Manual`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvideo.DisconnectHandlers();\n```\n\n----------------------------------------\n\nTITLE: Margin Left CSS in .NET MAUI\nDESCRIPTION: Sets the left margin for a .NET MAUI View. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_35\n\nLANGUAGE: CSS\nCODE:\n```\nmargin-left: 3;\n```\n\n----------------------------------------\n\nTITLE: Processing ResourceVideoSource for Windows in MAUI\nDESCRIPTION: This code snippet demonstrates how to process a `ResourceVideoSource` on Windows within a MAUI application. It sets the `MediaPlayerElement.Source` property to a `MediaSource` object, creating a `Uri` with the path of the video resource prefixed with `ms-appx:///`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        ...\n\n        public async void UpdateSource()\n        {\n            bool hasSetSource = false;\n\n            ...\n            else if (_video.Source is ResourceVideoSource)\n            {\n                string path = \"ms-appx:///\" + (_video.Source as ResourceVideoSource).Path;\n                if (!string.IsNullOrWhiteSpace(path))\n                {\n                    _mediaPlayerElement.Source = MediaSource.CreateFromUri(new Uri(path));\n                    hasSetSource = true;\n                }\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Relatively Rotate VisualElement .NET MAUI\nDESCRIPTION: This C# code snippet shows how to relatively rotate a VisualElement (Image) by a specified number of degrees using the RelRotateTo extension method. The image will rotate by 360 degrees relative to its current rotation over 2 seconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.RelRotateTo(360, 2000);\n```\n\n----------------------------------------\n\nTITLE: Add .NET Framework to .NET MAUI Class Library\nDESCRIPTION: This XML snippet demonstrates how to add the .NET framework target to a .NET MAUI class library project.  This allows the xUnit test project to reference and test the .NET MAUI class library. The `net8.0` target framework is added to the `$(TargetFrameworks)` property. It's necessary to make sure the correct version of .NET is targeted.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>net8.0;net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Update Android Manifest for Phone Dialer (Android)\nDESCRIPTION: If targeting Android 11 (R API 30) or higher, the Android Manifest must be updated with queries that use Android's package visibility requirements.  This involves adding an intent filter for the DIAL action and tel scheme.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/phone-dialer.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.DIAL\" />\n    <data android:scheme=\"tel\"/>\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: xcsync sync command\nDESCRIPTION: This command synchronizes changes from an Xcode project back to a .NET project. It allows specifying the project file, target framework moniker, target Xcode directory, and verbosity level.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync sync [-p|--project <PROJECT>]\n[-tfm|--target-framework-moniker <FRAMEWORK>]\n[-t|--target <TARGET_XCODE_DIRECTORY>] [-v|--verbosity <LEVEL>]\n```\n\n----------------------------------------\n\nTITLE: Checking Network Access in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to use the IConnectivity interface to determine the scope of the current network using the NetworkAccess property. It shows how to retrieve the type of network access available, which can be Internet, ConstrainedInternet, Local, None, or Unknown.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/networking.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n:::code language=\"csharp\" source=\"../snippets/shared_1/NetworkingPage.cs\" id=\"network_test\":::\n```\n\n----------------------------------------\n\nTITLE: Create Host Page in XAML\nDESCRIPTION: This code snippet demonstrates how to create a host page in the test harness app that displays the UI from the .NET MAUI UI project. It defines a `ContentPage` and uses the `xmlns:myMauiUIProject` namespace to reference the .NET MAUI UI project's assembly. The `Content` of the page is set to an instance of `MyMauiContent` (presumably a custom control from the .NET MAUI UI project). This allows the test harness app to display the UI that is being developed and tested, enabling XAML hot reload.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_43\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                 xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                 xmlns:myMauiUIProject=\"clr-namespace:NativeEmbeddingDemo;assembly=NativeEmbeddingDemo\"\n                 x:Class=\"TestHarnessApp.HostPage\"\n                 Title=\"HostPage\">\n        <myMauiUIProject:MyMauiContent />\n    </ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Displaying Link Handling Policies with ADB\nDESCRIPTION: This command uses the Android Debug Bridge (adb) to display the existing link handling policies for the apps installed on a device. The output includes the package name, domains handled by the app, and the link handling status, which indicates if the app has set `AutoVerify` to `true` and passed system verification.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nadb shell dumpsys package domain-preferred-apps\n```\n\n----------------------------------------\n\nTITLE: XAML Structure: ContentPage Definition\nDESCRIPTION: Demonstrates the basic structure of a XAML file defining a ContentPage in .NET MAUI. It shows the XML namespace declarations and the use of x:Class to associate the XAML with a C# class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handle Incoming Notifications on iOS with UNUserNotificationCenterDelegate\nDESCRIPTION: This code snippet demonstrates how to handle incoming notifications on iOS by subclassing `UNUserNotificationCenterDelegate`. It includes methods for handling notifications when the app is in the foreground (`WillPresentNotification`) and background/killed state (`DidReceiveNotificationResponse`). A `ProcessNotification` method extracts notification data and passes it to an `INotificationManagerService` for further processing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/local-notifications.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing UserNotifications;\n\nnamespace LocalNotificationsDemo.Platforms.iOS;\n\npublic class NotificationReceiver : UNUserNotificationCenterDelegate\n{\n    // Called if app is in the foreground.\n    public override void WillPresentNotification(UNUserNotificationCenter center, UNNotification notification, Action<UNNotificationPresentationOptions> completionHandler)\n    {\n        ProcessNotification(notification);\n\n        var presentationOptions = (OperatingSystem.IsIOSVersionAtLeast(14))\n            ? UNNotificationPresentationOptions.Banner\n            : UNNotificationPresentationOptions.Alert;\n\n        completionHandler(presentationOptions);\n    }\n\n    // Called if app is in the background, or killed state.\n    public override void DidReceiveNotificationResponse(UNUserNotificationCenter center, UNNotificationResponse response, Action completionHandler)\n    {\n        if (response.IsDefaultAction)\n            ProcessNotification(response.Notification);\n\n        completionHandler();\n    }\n\n    void ProcessNotification(UNNotification notification)\n    {\n        string title = notification.Request.Content.Title;\n        string message = notification.Request.Content.Body;\n\n        var service = IPlatformApplication.Current?.Services.GetService<INotificationManagerService>();\n        service?.ReceiveNotification(title, message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Video Duration on Windows in C#\nDESCRIPTION: This code shows how to retrieve the duration of a video on Windows using the `MediaPlayerElement.MediaPlayer.NaturalDuration` property after the `MediaPlayerElement.MediaPlayer.MediaOpened` event has been raised. It then uses `MainThread.BeginInvokeOnMainThread` to update the .NET MAUI `Video` control's `Duration` property via the `IVideoController` on the UI thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.UI.Xaml.Controls;\nusing VideoDemos.Controls;\nusing Windows.Media.Core;\nusing Windows.Media.Playback;\nusing Windows.Storage;\nusing Grid = Microsoft.UI.Xaml.Controls.Grid;\n\nnamespace VideoDemos.Platforms.Windows\n{\n    public class MauiVideoPlayer : Grid, IDisposable\n    {\n        MediaPlayerElement _mediaPlayerElement;\n        Video _video;\n        bool _isMediaPlayerAttached;\n        ...\n\n        void OnMediaPlayerMediaOpened(MediaPlayer sender, object args)\n        {\n            MainThread.BeginInvokeOnMainThread(() =>\n            {\n                ((IVideoController)_video).Duration = _mediaPlayerElement.MediaPlayer.NaturalDuration;\n            });\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clipping an Image with EllipseGeometry in XAML\nDESCRIPTION: This XAML code demonstrates how to use an EllipseGeometry object as the clip region for an Image. Only the part of the image within the ellipse will be visible. The ellipse is positioned and sized using RadiusX, RadiusY, and Center properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_15\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"monkeyface.png\">\n    <Image.Clip>\n        <EllipseGeometry RadiusX=\"100\"\n                         RadiusY=\"100\"\n                         Center=\"180,180\" />\n    </Image.Clip>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Update Android MainActivity Class (C#)\nDESCRIPTION: Shows how to update the `MainActivity` class in a .NET MAUI Android project. The class must inherit from `MauiAppCompatActivity`. Required dependencies: Microsoft.Maui, Android.App, Android.Content.PM, Android.Runtime, Android.OS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.Maui;\nusing Android.App;\nusing Android.Content.PM;\nusing Android.Runtime;\nusing Android.OS;\n\nnamespace YOUR_NAMESPACE_HERE.Droid\n{\n    [Activity(Label = \"MyTitle\", Icon = \"@mipmap/icon\", Theme = \"@style/MainTheme\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize)]\n    public class MainActivity : MauiAppCompatActivity\n    {\n        protected override void OnCreate(Bundle savedInstanceState)\n        {\n            base.OnCreate(savedInstanceState);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ListView SelectionMode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the ListView.SelectionMode attached property to \"Inaccessible\" using the Windows platform-specific namespace. This configures the ListView to respond to tap gestures, disabling accessibility features.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/listview-selectionmode.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:windows=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout>\n        <ListView ... windows:ListView.SelectionMode=\"Inaccessible\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a ContentPage in XAML\nDESCRIPTION: This XAML code snippet demonstrates the structure of a basic ContentPage in .NET MAUI. It defines the XML namespaces, the class for the code-behind, the page title, background color, and a StackLayout as the content, containing a Label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/contentpage.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MyPage\"\n             Title=\"MyPage\"\n             BackgroundColor=\"White\">\n    <StackLayout>\n        <Label Text=\"Welcome to .NET MAUI!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\" />\n        <!-- Other views go here -->\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Define Config Class C#\nDESCRIPTION: Defines a static partial class named Config that stores the API key and backend service endpoint as static properties.  It's intended for managing secrets and allows for overriding values using a local partial class, keeping sensitive data out of source control. The BackendServiceEndpoint must end with a '/'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace PushNotificationsDemo;\n\npublic static partial class Config\n{\n    public static string ApiKey = \"API_KEY\";\n    public static string BackendServiceEndpoint = \"BACKEND_SERVICE_ENDPOINT\";\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing Mac Catalyst Window Workaround - C#\nDESCRIPTION: This C# code demonstrates a workaround to resize windows on Mac Catalyst by setting the `MinimumWidth`, `MaximumWidth`, `MinimumHeight`, and `MaximumHeight` properties. It uses `Dispatcher.Dispatch` to ensure the resize operation completes before reverting the properties to their original values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nWindow.MinimumWidth = 700;\nWindow.MaximumWidth = 700;\nWindow.MinimumHeight = 500;\nWindow.MaximumHeight = 500;\n\n// Give the Window time to resize\nDispatcher.Dispatch(() =>\n{\n    Window.MinimumWidth = 0;\n    Window.MinimumHeight = 0;\n    Window.MaximumWidth = double.PositiveInfinity;\n    Window.MaximumHeight = double.PositiveInfinity;\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Default XAML Items for WinUI (XML)\nDESCRIPTION: This code snippet demonstrates how to set the `EnableDefaultXamlItems` build property to `false` in the project file for WinUI apps. This prevents build errors related to the `InitializeComponent` method already being defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    ...\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n\n    <UseMaui>true</UseMaui>\n    <MauiEnablePlatformUsings>true</MauiEnablePlatformUsings>    \n    <EnableDefaultXamlItems>false</EnableDefaultXamlItems>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: xUnit Theory Test Example\nDESCRIPTION: This C# snippet shows an example of xUnit tests using the `[Theory]` and `[InlineData]` attributes. Theories are tests that are only true for a particular set of data.  Each `[InlineData]` attribute provides a set of inputs to be tested.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/unit-testing.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyUnitTests\n{\n    public class MyTests\n    {\n        [Theory]\n        [InlineData(3)]\n        [InlineData(4)]\n        [InlineData(5)]\n        public void MyTheoryTest(int value)\n        {\n            Assert.True(value % 2 == 1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Base Size of an App Icon in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to set the base size of an app icon in a .NET MAUI project. The `BaseSize` attribute is used to define the baseline density of the image, used for scaling to other sizes. The format is `W,H` where `W` is the width and `H` is the height.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.png\" BaseSize=\"128,128\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Scale VisualElement .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to scale a VisualElement (Image) to a specified size using the ScaleTo extension method. The image's size will be doubled over 2 seconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.ScaleTo(2, 2000);\n```\n\n----------------------------------------\n\nTITLE: Open Launcher with PresentationSourceBounds in .NET MAUI\nDESCRIPTION: This code snippet shows how to create an OpenFileRequest and set the PresentationSourceBounds property, similar to the ShareFileRequest example. This configures the location the launcher will open at, and is useful for popover presentation on iPadOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/ios-PresentationSourceBounds.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Launcher.OpenAsync(new OpenFileRequest\n    {\n        File = new ReadOnlyFile(file),\n        PresentationSourceBounds = DeviceInfo.Platform == DevicePlatform.iOS && DeviceInfo.Idiom == DeviceIdiom.Tablet\n                                ? new Rect(0, 20, 0, 0)\n                                : Rect.Zero\n    });\n```\n\n----------------------------------------\n\nTITLE: Force an Asset into the Main App Bundle\nDESCRIPTION: This XML snippet demonstrates how to force a specific asset, *myimportantfile.json*, into the main app bundle by specifying an `AssetPack` value of `base`. Other assets in the *Assets* folder will be placed into an asset pack named `myassets`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/asset-packs.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <AndroidAsset Update=\"Assets/*\" AssetPack=\"myassets\" />\n    <AndroidAsset Update=\"Assets/myimportantfile.json\" AssetPack=\"base\" />    \n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Invalid Compiled Binding Expressions in .NET MAUI (C#)\nDESCRIPTION: Illustrates examples of invalid compiled binding expressions that use method calls or complex expressions, which are not supported by compiled bindings in .NET MAUI. These bindings will cause errors or not function as intended.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Invalid: Method calls\nstatic (PersonViewModel vm) => vm.GetAddress();\nstatic (PersonViewModel vm) => vm.Address?.ToString();\n\n// Invalid: Complex expressions\nstatic (PersonViewModel vm) => vm.Address?.Street + \" \" + vm.Address?.City;\nstatic (PersonViewModel vm) => $\"Name: {vm.Name}\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Image App Icon in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to specify a single image file as the app icon within a .NET MAUI project.  The `Include` attribute points to the image file.  Only the first `<MauiIcon>` item in the project file is processed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Animations Concurrently Using Task.WhenAny in MAUI\nDESCRIPTION: This code snippet demonstrates running multiple animations concurrently using `Task.WhenAny` in MAUI. The `Task.WhenAny` method completes when the first of the provided tasks completes. In this case, the scaling animation will complete before the rotation, and the subsequent scaling animation will begin.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet9.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait Task.WhenAny<bool>\n(\n  image.RotateTo(360, 4000),\n  image.ScaleTo(2, 2000)\n);\nawait image.ScaleTo(1, 2000);\n```\n\n----------------------------------------\n\nTITLE: Disable Scroll - XAML\nDESCRIPTION: This XAML code disables scrolling on a .NET MAUI Map. The IsScrollEnabled property is set to false, preventing the user from scrolling the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_16\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map IsScrollEnabled=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Java: Generated Code for Marshal Methods\nDESCRIPTION: This Java code is generated from C# code, demonstrating marshal methods. It shows how native methods are declared and used within a Java class that extends `androidx.appcompat.app.AppCompatActivity`. The code omits some generated methods for clarity.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic class MainActivity extends androidx.appcompat.app.AppCompatActivity\n{\n  public android.view.View onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3)\n  {\n    return n_onCreateView (p0, p1, p2, p3);\n  }\n\n  private native android.view.View n_onCreateView (android.view.View p0, java.lang.String p1, android.content.Context p2, android.util.AttributeSet p3);\n\n  public void onCreate (android.os.Bundle p0)\n  {\n    n_onCreate (p0);\n  }\n\n  private native void n_onCreate (android.os.Bundle p0);\n}\n```\n\n----------------------------------------\n\nTITLE: MSBuild Property for Nested Interfaces\nDESCRIPTION: This XML snippet shows how to configure the `$(AndroidBoundInterfacesContainTypes)` property in your project file. Setting it to `false` reverts to the legacy behavior where nested types are moved to top-level classes. This allows maintaining compatibility with older codebases.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<attr path=\"/api/package[@name='my.package']/interface[@name='Foo']\" name=\"unnest\">true</attr>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<attr path=\"/api/package[@name='my.package']/interface[@name='Foo']\" name=\"unnest\">false</attr>\n```\n\n----------------------------------------\n\nTITLE: Declaring Native Methods in Java\nDESCRIPTION: This Java code demonstrates how to declare native methods using the `native` keyword, which allows Java code to invoke methods implemented in native code via the Java Native Interface (JNI). Each `native` method has a corresponding implementation outside the Java VM, typically in C# for .NET for Android.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass MainActivity extends androidx.appcompat.app.AppCompatActivity\n{\n  public void onCreate (android.os.Bundle p0)\n  {\n    n_onCreate (p0);\n  }\n\n  private native void n_onCreate (android.os.Bundle p0);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a blank splash screen in .NET MAUI\nDESCRIPTION: This XML snippet shows how to force generation of a blank splash screen in a .NET MAUI project. By setting the `EnableBlankMauiSplashScreen` property to `true` in the first `<PropertyGroup>` node, a default blank splash screen will be generated if a custom splash screen or `<MauiSplashScreen>` is not provided.  This is used for troubleshooting UI issues.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<EnableBlankMauiSplashScreen>true</EnableBlankMauiSplashScreen>\n```\n\n----------------------------------------\n\nTITLE: Enable Interpreter for Dynamic Code Generation while AOT Compiling\nDESCRIPTION: This code enables the interpreter to perform dynamic code generation while AOT compiling other parts of the app.  This is achieved by setting `<MtouchInterpreter>-all</MtouchInterpreter>`. This allows the application to still use dynamic code generation features, while benefitting from AOT compilation elsewhere.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-ios')) and '$(Configuration)' == 'Release'\">\n    <MtouchInterpreter>-all</MtouchInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Install .NET MAUI Workload (zsh)\nDESCRIPTION: This command installs the latest public build of .NET MAUI, including required platform SDKs. It uses the `dotnet workload install` command with the `maui` argument and specifies a NuGet source. It requires administrator privileges and internet access to download the workload packages.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/install-create-macos.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nsudo dotnet workload install maui --source https://api.nuget.org/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets using FileSystem API in .NET MAUI (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset file (AboutAssets.txt) within a .NET MAUI application using the FileSystem.OpenAppPackageFileAsync method. It opens the file as a stream, reads its contents using a StreamReader, and stores the content in a variable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_2/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Basis Property Usage in C# (Percentage)\nDESCRIPTION: This snippet demonstrates how to set the Basis property on a Label within a FlexLayout using C# code, specifying the initial size of the child as a percentage of the FlexLayout's size. The FlexBasis constructor is used with a float value between 0 and 1 and a boolean to indicate relative sizing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nFlexLayout.SetBasis(label, new FlexBasis(0.25f, true));\n```\n\n----------------------------------------\n\nTITLE: Create Custom Layout Manager - C#\nDESCRIPTION: This code shows how to create a custom layout manager by deriving from an existing layout manager (HorizontalStackLayoutManager). The layout manager handles the cross-platform layout and measurement logic. It overrides the Measure and ArrangeChildren methods to define the custom layout behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Layouts;\nusing HorizontalStackLayoutManager = Microsoft.Maui.Layouts.HorizontalStackLayoutManager;\n\npublic class HorizontalWrapLayoutManager : HorizontalStackLayoutManager\n{\n    HorizontalWrapLayout _layout;\n\n    public HorizontalWrapLayoutManager(HorizontalWrapLayout horizontalWrapLayout) : base(horizontalWrapLayout)\n    {\n        _layout = horizontalWrapLayout;\n    }\n\n    public override Size Measure(double widthConstraint, double heightConstraint)\n    {\n    }\n\n    public override Size ArrangeChildren(Rect bounds)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Raw Asset using FileSystem in .NET MAUI (C#)\nDESCRIPTION: This C# code snippet shows how to access a raw asset deployed with the application using the `FileSystem.OpenAppPackageFileAsync` method. It opens the asset as a stream, reads its contents using a `StreamReader`, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/note/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Define Note Model Properties C#\nDESCRIPTION: This code defines the basic properties of the `Note` model: `Filename`, `Text`, and `Date`. It represents a single note with its filename, content, and creation/modification date. These properties are used to store and retrieve note data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/model.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Models;\n\ninternal class Note\n{\n    public string Filename { get; set; }\n    public string Text { get; set; }\n    public DateTime Date { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Appearance with ViewCell (Again) - XAML\nDESCRIPTION: This snippet duplicates the first XAML example, demonstrating how to define item appearance using a ViewCell and a Grid layout for a ListView. It includes image and label elements bound to the Monkey class properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ListView ItemsSource=\"{Binding Monkeys}\">\n    <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <ViewCell>\n                <Grid Padding=\"10\">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height=\"Auto\" />\n                        <RowDefinition Height=\"Auto\" />\n                    </Grid.RowDefinitions>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"Auto\" />\n                        <ColumnDefinition Width=\"Auto\" />\n                    </Grid.ColumnDefinitions>\n                    <Image Grid.RowSpan=\"2\"\n                           Source=\"{Binding ImageUrl}\"\n                           Aspect=\"AspectFill\"\n                           HeightRequest=\"60\"\n                           WidthRequest=\"60\" />\n                    <Label Grid.Column=\"1\"\n                           Text=\"{Binding Name}\"\n                           FontAttributes=\"Bold\" />\n                    <Label Grid.Row=\"1\"\n                           Grid.Column=\"1\"\n                           Text=\"{Binding Location}\"\n                           FontAttributes=\"Italic\"\n                           VerticalOptions=\"End\" />\n                </Grid>\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Java Static and Default Interface Example\nDESCRIPTION: This Java code illustrates how to define static methods and default methods within an interface.  C# traditionally required static members to be moved to a separate class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic interface Foo {\n  public static void Bar () { ... }\n  public default void Baz () { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Ellipse in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a red filled ellipse with a width of 150 and a height of 50 device-independent units. The Fill property is set to Red, and the WidthRequest and HeightRequest properties define the dimensions of the ellipse. The HorizontalOptions property controls the horizontal alignment of the ellipse.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/ellipse.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Ellipse Fill=\"Red\"\n         WidthRequest=\"150\"\n         HeightRequest=\"50\"\n         HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying a remote web page in WebView using C#\nDESCRIPTION: This code snippet demonstrates how to display a remote web page in a .NET MAUI WebView using C#.  A new WebView object is created, and its `Source` property is set to the URL of the desired web page. The URI must be a fully formed URI with the protocol specified (e.g., https://).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nWebView webvView = new WebView\n{\n    Source = \"https://learn.microsoft.com/dotnet/maui\"\n};\n```\n\n----------------------------------------\n\nTITLE: Setting EmptyViewTemplate with a DataTemplate in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the EmptyViewTemplate property of a BindableLayout to a DataTemplate containing a Label view. The BindingContext of the DataTemplate is inherited from the BindableLayout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_9\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout BindableLayout.ItemsSource=\"{Binding UserWithoutAchievements.Achievements}\">\n    <BindableLayout.EmptyViewTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding x:DataType='Label', Source={x:Reference usernameLabel}, Path=Text, StringFormat='{0} has no achievements.'}\" />\n        </DataTemplate>\n    </BindableLayout.EmptyViewTemplate>\n    ...\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Define Static Constants in C#\nDESCRIPTION: This C# code defines a static class `AppConstants` containing a static double variable `NormalFontSize`. This static variable will be used in subsequent XAML examples to set the `FontSize` property of a `Label` control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic class AppConstants\n{\n    public static double NormalFontSize = 18;\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall .NET SDKs and .NET MAUI Workloads\nDESCRIPTION: This command retrieves a list of installed .NET 6+ SDKs by querying the registry. It helps identify .msi packages that need to be uninstalled to resolve .NET MAUI workload conflicts.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\currentversion\\uninstall\\ -s -f manifest\n```\n\n----------------------------------------\n\nTITLE: Defining Flyout Header (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to define a flyout header in a .NET MAUI Shell application by setting the Shell.FlyoutHeader bindable property. It references a custom FlyoutHeader control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <Shell.FlyoutHeader>\n        <controls:FlyoutHeader />\n    </Shell.FlyoutHeader>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Application Attribute XML Output\nDESCRIPTION: This XML fragment demonstrates the generated `<application>` element in the manifest file, reflecting the properties set in the `ApplicationAttribute`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<application android:label=\"MyMauiApp\" android:theme=\"@style/Maui.SplashTheme\" android:debuggable=\"true\" ...>\n```\n\n----------------------------------------\n\nTITLE: Referencing app icon in iOS/Mac Catalyst Info.plist\nDESCRIPTION: This XML snippet shows how to reference the app icon set in the Info.plist file for iOS and Mac Catalyst. The XSAppIconAssets key specifies the path to the app icon set within the Assets.xcassets catalog. This path is derived from the MauiIcon's Include attribute.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<key>XSAppIconAssets</key>\n<string>Assets.xcassets/healthapp.appiconset</string>\n```\n\n----------------------------------------\n\nTITLE: Setting Shell TabBar Disabled Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell TabBar disabled color for an Element to black using the `-maui-shell-tabbar-disabled` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_79\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-tabbar-disabled: black;\n```\n\n----------------------------------------\n\nTITLE: Set Label TextColor with TargetName - .NET MAUI XAML\nDESCRIPTION: This snippet demonstrates how to set the TextColor property of a Label using the TargetName property of the Setter. The Label's x:Name must match the TargetName in the Setter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/visual-states.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Setter TargetName=\"label\"\n        Property=\"Label.TextColor\"\n        Value=\"Red\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Page-Specific Resource Dictionary Style in XAML\nDESCRIPTION: This XAML snippet shows how to define a style within a `ContentPage`'s resource dictionary.  The `HeadingLabelStyle` is defined specifically for this page.  Placing resources in the page's resource dictionary is recommended for resources only used by that page, reducing initial app startup time. It includes setting properties like `HorizontalOptions`, `FontSize`, and `TextColor`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Resources>\n        <Style x:Key=\"HeadingLabelStyle\"\n                TargetType=\"Label\">\n            <Setter Property=\"HorizontalOptions\"\n                    Value=\"Center\" />\n            <Setter Property=\"FontSize\"\n                    Value=\"Large\" />\n            <Setter Property=\"TextColor\"\n                    Value=\"Red\" />\n        </Style>\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Apple (APNS) JSON Payload for Azure Notification Hub - JSON\nDESCRIPTION: This JSON payload is for sending test push notifications to Apple devices (APNS) via the Azure portal's test send functionality. It includes an `aps` dictionary containing the `alert` message and an `action` field.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_70\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"aps\": {\n        \"alert\": \"Message from Notification Hub!\"\n      },\n      \"action\": \"action_a\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading a Local Image in XAML\nDESCRIPTION: This XAML snippet demonstrates how to load and display an image from a local file within a .NET MAUI application. The image file (dotnet_bot.png) should be located in the Resources\\Images folder of the project with its build action set to MauiImage. The image is displayed using the Image control, with the Source property pointing to the local image filename.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\" />\n```\n\n----------------------------------------\n\nTITLE: Building a .NET MAUI app with Android dependencies installation\nDESCRIPTION: This command builds the .NET MAUI app, installs Android dependencies, specifies the target framework, sets the Android SDK directory, and accepts Android SDK licenses. It requires the .NET SDK and the Android SDK command-line tools.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ncd MyMauiApp\ndotnet build -t:InstallAndroidDependencies -f:net9.0-android -p:AndroidSdkDirectory=\"/path/to/sdk\" -p:AcceptAndroidSDKLicenses=True\n```\n\n----------------------------------------\n\nTITLE: Defining a MauiIcon in .NET MAUI project file\nDESCRIPTION: This XML snippet defines a MauiIcon item in the .NET MAUI project file. The Include attribute specifies the path to the icon resource, while ForegroundFile and TintColor customize the icon's appearance.  This is used as input to generate platform specific icons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\healthapp.png\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" TintColor=\"Yellow\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Publishing with Password from File\nDESCRIPTION: This snippet demonstrates how to read the keystore password from a file. This provides an alternative to using environment variables for securing the password and preventing it from appearing in build logs. The path to the file containing the password must be specified.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-android -c Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore=myapp.keystore -p:AndroidSigningKeyAlias=myapp -p:AndroidSigningKeyPass=file:C:\\Users\\user1\\AndroidSigningPassword.txt -p:AndroidSigningStorePass=file:C:\\Users\\user1\\AndroidSigningPassword.txt\n```\n\n----------------------------------------\n\nTITLE: C# Unloaded Event Handler for Disconnecting Handler\nDESCRIPTION: This C# code defines an event handler for the `Unloaded` event of a `ContentPage`. It retrieves the `Handler` instance of a `CustomEntry` and calls `DisconnectHandler()` to perform native view cleanup in older .NET MAUI versions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ContentPage_Unloaded(object sender, EventArgs e)\n{\n    customEntry.Handler?.DisconnectHandler();\n}\n```\n\n----------------------------------------\n\nTITLE: TapGestureRecognizer with Primary and Secondary Buttons in XAML\nDESCRIPTION: This XAML snippet configures a TapGestureRecognizer to respond to taps from either the primary or secondary mouse button.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<TapGestureRecognizer Tapped=\"OnTapGestureRecognizerTapped\"\n                      Buttons=\"Primary,Secondary\" />\n```\n\n----------------------------------------\n\nTITLE: Consume HSL Color Markup Extension XAML\nDESCRIPTION: Demonstrates how to consume the `HslColorExtension` in XAML to set the Color property of a BoxView. It shows different ways of specifying the extension's properties, both as XML attributes and within curly braces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MarkupExtensions\"\n             x:Class=\"MarkupExtensions.HslColorDemoPage\"\n             Title=\"HSL Color Demo\">\n    <ContentPage.Resources>\n        <Style TargetType=\"BoxView\">\n            <Setter Property=\"WidthRequest\" Value=\"80\" />\n            <Setter Property=\"HeightRequest\" Value=\"80\" />\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n            <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <StackLayout>\n        <BoxView>\n            <BoxView.Color>\n                <local:HslColorExtension H=\"0\" S=\"1\" L=\"0.5\" A=\"1\" />\n            </BoxView.Color>\n        </BoxView>\n        <BoxView>\n            <BoxView.Color>\n                <local:HslColor H=\"0.33\" S=\"1\" L=\"0.5\" />\n            </BoxView.Color>\n        </BoxView>\n        <BoxView Color=\"{local:HslColorExtension H=0.67, S=1, L=0.5}\" />\n        <BoxView Color=\"{local:HslColor H=0, S=0, L=0.5}\" />\n        <BoxView Color=\"{local:HslColor A=0.5}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Intent Filter XML Output\nDESCRIPTION: This XML fragment shows the generated intent filters in the manifest file. Each `IntentFilterAttribute` results in a separate `<intent-filter/>` element within the `<activity/>`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:label=\"My Maui App\"\n          android:name=\"crc64bdb9c38958c20c7c.MainActivity\">\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n  <intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.SAMPLE_CODE\" />\n    <category android:name=\"my.custom.category\" />\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Full Example of Shared Resources in XAML\nDESCRIPTION: This complete XAML snippet demonstrates the use of shared resources for `LayoutOptions`, numeric values, and platform-specific colors. It shows how to define these resources in a page-level resource dictionary and apply them to multiple buttons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.SharedResourcesPage\"\n             Title=\"Shared Resources Page\">\n    <ContentPage.Resources>\n        <LayoutOptions x:Key=\"horzOptions\"\n                       Alignment=\"Center\" />\n        <LayoutOptions x:Key=\"vertOptions\"\n                       Alignment=\"Center\" />\n        <x:Double x:Key=\"borderWidth\">3</x:Double>\n        <x:Double x:Key=\"rotationAngle\">-15</x:Double>\n        <x:Double x:Key=\"fontSize\">24</x:Double>    \n        <OnPlatform x:Key=\"textColor\"\n                    x:TypeArguments=\"Color\">\n            <On Platform=\"iOS\" Value=\"Red\" />\n            <On Platform=\"Android\" Value=\"Aqua\" />\n            <On Platform=\"WinUI\" Value=\"#80FF80\" />\n        </OnPlatform>\n    </ContentPage.Resources>\n\n    <StackLayout>\n        <Button Text=\"Do this!\"\n                HorizontalOptions=\"{StaticResource horzOptions}\"\n                VerticalOptions=\"{StaticResource vertOptions}\"\n                BorderWidth=\"{StaticResource borderWidth}\"\n                Rotation=\"{StaticResource rotationAngle}\"\n                TextColor=\"{StaticResource textColor}\"\n                FontSize=\"{StaticResource fontSize}\" />\n        <Button Text=\"Do that!\"\n                HorizontalOptions=\"{StaticResource horzOptions}\"\n                VerticalOptions=\"{StaticResource vertOptions}\"\n                BorderWidth=\"{StaticResource borderWidth}\"\n                Rotation=\"{StaticResource rotationAngle}\"\n                TextColor=\"{StaticResource textColor}\"\n                FontSize=\"{StaticResource fontSize}\" />\n        <Button Text=\"Do the other thing!\"\n                HorizontalOptions=\"{StaticResource horzOptions}\"\n                VerticalOptions=\"{StaticResource vertOptions}\"\n                BorderWidth=\"{StaticResource borderWidth}\"\n                Rotation=\"{StaticResource rotationAngle}\"\n                TextColor=\"{StaticResource textColor}\"\n                FontSize=\"{StaticResource fontSize}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Combining TargetNullValue and FallbackValue\nDESCRIPTION: This XAML snippet illustrates combining both TargetNullValue and FallbackValue in a single binding expression. If FirstName is null, \"No name available\" will be displayed. If the binding fails, \"Binding failed\" will be displayed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding FirstName, TargetNullValue='No name available', FallbackValue='Binding failed'}\" />\n```\n\n----------------------------------------\n\nTITLE: Deserializing App Properties on Android (C#)\nDESCRIPTION: This code snippet defines the `PropertiesDeserializer` class for Android, which deserializes the Xamarin.Forms `PropertyStore.forms` file from isolated storage. It reads the binary XML data containing the app properties. It handles exceptions during deserialization and returns null if the file doesn't exist or is empty.  Dependencies include `System.IO.IsolatedStorage`, `System.Runtime.Serialization`, and `System.Xml`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.IO.IsolatedStorage;\nusing System.Runtime.Serialization;\nusing System.Xml;\n\nnamespace MigrationHelpers;\n\npublic class PropertiesDeserializer\n{\n    const string PropertyStoreFile = \"PropertyStore.forms\";\n\n    public Task<IDictionary<string, object>> DeserializePropertiesAsync()\n    {\n        // Deserialize property dictionary to local storage\n        return Task.Run(() =>\n        {\n            using (IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication())\n            {\n                if (!store.FileExists(PropertyStoreFile))\n                    return null;\n\n                using (IsolatedStorageFileStream stream = store.OpenFile(PropertyStoreFile, FileMode.Open, FileAccess.Read))\n                using (XmlDictionaryReader reader = XmlDictionaryReader.CreateBinaryReader(stream, XmlDictionaryReaderQuotas.Max))\n                {\n                    if (stream.Length == 0)\n                        return null;\n\n                    try\n                    {\n                        var dcs = new DataContractSerializer(typeof(Dictionary<string, object>));\n                        return (IDictionary<string, object>)dcs.ReadObject(reader);\n                    }\n                    catch (Exception e)\n                    {\n                        Debug.WriteLine(\"Could not deserialize properties: \" + e.Message);\n                        Console.WriteLine($\"PropertyStore Exception while reading Application properties: {e}\");\n                    }\n                }\n            }\n            return null;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Groups Entitlement XML\nDESCRIPTION: Defines the app groups entitlement that enables access to shared group containers and inter-process communication. It uses the `com.apple.security.application-groups` key of type `Array` of `String`. Replace `group.MyAppGroups` with the desired group identifier. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.security.application-groups</key>\n<array>\n  <string>group.MyAppGroups</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting for iOS\nDESCRIPTION: This XML snippet configures the build system to exclude iOS-specific C# files (those ending with .iOS.cs) when not building for iOS. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- iOS -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true\">\n  <Compile Remove=\"**\\*.iOS.cs\" />\n  <None Include=\"**\\*.iOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Note Model Definition in C#\nDESCRIPTION: This C# code defines the `Note` model class.  It includes properties for `Filename`, `Text`, and `Date`, representing the data structure for a note.  This model separates the note data from the view logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nnamespace Notes.Models;\n\ninternal class Note\n{\n    public string Filename { get; set; }\n    public string Text { get; set; }\n    public DateTime Date { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Service References in MainActivity (C#)\nDESCRIPTION: These C# declarations add backing fields to the `MainActivity` class to store references to the `IPushDemoNotificationActionService` and `IDeviceInstallationService` implementations. These fields will be lazily initialized through dependency injection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nIPushDemoNotificationActionService _notificationActionService;\nIDeviceInstallationService _deviceInstallationService;\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Permission Class - C#\nDESCRIPTION: This code demonstrates how to define a custom permission class by inheriting from `BasePermission`. It outlines the abstract members that need to be implemented.  This snippet requires the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/permissions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyPermission : Permissions.BasePermission\n{\n    // Implementation required\n    public override Task<PermissionStatus> CheckStatusAsync()\n    {\n        throw new System.NotImplementedException();\n    }\n\n    public override Task<PermissionStatus> RequestAsync()\n    {\n        throw new System.NotImplementedException();\n    }\n\n    // Indicates if the prompt should be displayed to the user.\n    public override bool ShouldShowRationale()\n    {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DatePicker Initialization in C#\nDESCRIPTION: This C# snippet shows how to programmatically create and initialize a DatePicker with specific MinimumDate, MaximumDate, and Date properties using DateTime objects. This is an alternative to XAML initialization, allowing for dynamic date range and initial date configuration in code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/datepicker.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDatePicker datePicker = new DatePicker\n{\n    MinimumDate = new DateTime(2018, 1, 1),\n    MaximumDate = new DateTime(2018, 12, 31),\n    Date = new DateTime(2018, 6, 21)\n};\n```\n\n----------------------------------------\n\nTITLE: Default XAML Namespace Declaration\nDESCRIPTION: Declares the default XAML namespace, which specifies that elements without a prefix refer to .NET MAUI classes. This is essential for using .NET MAUI controls directly in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/index.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n```\n\n----------------------------------------\n\nTITLE: UpdateStatus Event and Command (C#)\nDESCRIPTION: This code defines an `UpdateStatus` event and uses a timer to trigger the event every tenth of a second.  The event and corresponding command are used to update the video status in the platform-specific handlers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel;\n\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        public event EventHandler UpdateStatus;\n\n        IDispatcherTimer _timer;\n\n        public Video()\n        {\n            _timer = Dispatcher.CreateTimer();\n            _timer.Interval = TimeSpan.FromMilliseconds(100);\n            _timer.Tick += OnTimerTick;\n            _timer.Start();\n        }\n\n        ~Video() => _timer.Tick -= OnTimerTick;\n\n        void OnTimerTick(object sender, EventArgs e)\n        {\n            UpdateStatus?.Invoke(this, EventArgs.Empty);\n            Handler?.Invoke(nameof(Video.UpdateStatus));\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Info.plist for Multi-Window Support - XML\nDESCRIPTION: This XML snippet configures the `Info.plist` file for both iOS and Mac Catalyst to enable multi-window support. It adds the `UIApplicationSceneManifest` key with settings to support multiple scenes and specify the `SceneDelegate` class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIApplicationSceneManifest</key>\n<dict>\n  <key>UIApplicationSupportsMultipleScenes</key>\n  <true/>\n  <key>UISceneConfigurations</key>\n  <dict>\n    <key>UIWindowSceneSessionRoleApplication</key>\n    <array>\n      <dict>\n        <key>UISceneConfigurationName</key>\n        <string>__MAUI_DEFAULT_SCENE_CONFIGURATION__</string>\n        <key>UISceneDelegateClassName</key>\n        <string>SceneDelegate</string>\n      </dict>\n    </array>\n  </dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Setting MD_APPLE_SDK_ROOT Environment Variable (zsh)\nDESCRIPTION: This code snippet shows how to set the MD_APPLE_SDK_ROOT environment variable in a zsh terminal session to specify the Xcode version to be used for building .NET MAUI apps.  The variable is set to the path of a specific Xcode application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/choose-xcode-version.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nexport MD_APPLE_SDK_ROOT=/Applications/Xcode_14.1.0.app\n```\n\n----------------------------------------\n\nTITLE: Popping a Modal Page - C#\nDESCRIPTION: This snippet demonstrates how to programmatically remove the current modal page from the stack and return to the previous page using the `PopModalAsync` method. The topmost page in the modal stack becomes the active page.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait Navigation.PopModalAsync();\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Context for HybridWebView\nDESCRIPTION: This C# code snippet defines a partial class `HybridSampleJsContext` that inherits from `JsonSerializerContext`. It uses attributes to specify JSON serialization information for the `double` type, ensuring proper type handling during JSON serialization within the HybridWebView context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[JsonSourceGenerationOptions(WriteIndented = true)]\n[JsonSerializable(typeof(double))]\ninternal partial class HybridSampleJsContext : JsonSerializerContext\n{\n    // This type's attributes specify JSON serialization info to preserve type structure\n    // for trimmed builds.\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Desktop path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet shows how to retrieve the Desktop path on Mac Catalyst using NSFileManager to align with macOS behavior. It avoids Environment.GetFolderPath and leverages Xamarin.Mac APIs to fetch the correct path.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.DesktopDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Uninstall AEHD (AEHD 2.1+) (cmd)\nDESCRIPTION: These commands are used to uninstall the Android Emulator Hypervisor Driver (AEHD) version 2.1 and higher. The first command stops the 'aehd' service, and the second command deletes the service entry from the service control manager. These commands should be run with administrator privileges.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/hardware-acceleration.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nsc stop aehd\nsc delete aehd\n```\n\n----------------------------------------\n\nTITLE: Define build properties in project file for Mac Catalyst - XML\nDESCRIPTION: This XML snippet demonstrates how to define build properties in a .NET MAUI project file for Mac Catalyst to configure code signing, specify the signing key, provisioning profile, and entitlements file. These settings are crucial for distributing the application through the Mac App Store or other channels. The build properties are contained within a PropertyGroup based on configuration, target framework and platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/capabilities.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-maccatalyst|AnyCPU'\">\n  <EnableCodeSigning>True</EnableCodeSigning>\n  <CodesignKey>Apple Distribution: John Smith (AY2GDE9QM7)</CodesignKey>\n  <CodesignProvision>MyMauiApp</CodesignProvision>\n  <CodesignEntitlements>Platforms\\MacCatalyst\\Entitlements.plist</CodesignEntitlements>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Get Mac IP Address via Command Line (zsh)\nDESCRIPTION: This command retrieves the IP address of the Mac.  It uses the `ipconfig` utility with the `getifaddr` option, specifying the network interface `en0`. Depending on the network setup, the interface name might be different, such as `en1` or `en2`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/pair-to-mac.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nipconfig getifaddr en0\n```\n\n----------------------------------------\n\nTITLE: Configure MauiAsset Build Action in .csproj\nDESCRIPTION: This snippet demonstrates how to configure the `MauiAsset` build action in the `.csproj` file to include raw assets for deployment with the .NET MAUI application. The `LogicalName` attribute specifies how the assets will be organized within the application package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/note/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: App Attest Entitlement XML\nDESCRIPTION: Defines the App Attest entitlement that enables generation of a cryptographic key for validating the integrity of the app.  It uses the `com.apple.developer.devicecheck.appattest-environment` key of type `String`.  The value can be either `development` or `production`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.devicecheck.appattest-environment</key>\n<string>development</string>\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI in Windows MainWindow with C#\nDESCRIPTION: This code snippet illustrates how to initialize .NET MAUI within the MainWindow class on Windows. It shows creating a MauiContext object and ensuring that the .NET MAUI app is built before creating the views.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Embedding;\nusing Microsoft.UI.Xaml;\n\nnamespace MyNativeEmbeddedApp.WinUI;\n\npublic sealed partial class MainWindow : Microsoft.UI.Xaml.Window\n{\n    public MainWindow()\n    {\n        this.InitializeComponent();\n    }\n\n    private async void OnRootLayoutLoaded(object? sender, RoutedEventArgs e)\n    {\n        await Task.Yield();\n\n        // Ensure .NET MAUI app is built before creating .NET MAUI views\n        var mauiApp = MyEmbeddedMauiApp.Shared;\n\n        // Create .NET MAUI context\n        var context = new MauiContext(mauiApp.Services);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ItemsSource in XAML\nDESCRIPTION: This code snippet demonstrates how to set the `ItemsSource` property of a BindableLayout in XAML to bind a Grid to a collection of items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/bindablelayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid BindableLayout.ItemsSource=\"{Binding Items}\" />\n```\n\n----------------------------------------\n\nTITLE: Prevent Text Entry XAML\nDESCRIPTION: This XAML snippet shows how to prevent users from modifying the text in an <xref:Microsoft.Maui.Controls.Editor> by setting the `IsReadOnly` property to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_14\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor Text=\"This is a read-only Editor\"\n        IsReadOnly=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Slider ValueChanged Event in XAML\nDESCRIPTION: This XAML snippet demonstrates attaching a ValueChanged event handler to a Slider. It highlights potential issues with the event firing during initialization and suggests checking for null values in the handler.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<Slider ValueChanged=\"OnSliderValueChanged\"\n        Maximum=\"20\"\n        Minimum=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Trimmer Warnings in .NET for iOS\nDESCRIPTION: This XML snippet shows how to disable trimmer warnings in a .NET for iOS project by setting the `$(SuppressTrimAnalysisWarnings)` MSBuild property to `true` in the project file. This can be useful when the base class library produces trimmer warnings that cannot be fixed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <SuppressTrimAnalysisWarnings>true</SuppressTrimAnalysisWarnings>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Fonts Entitlement XML\nDESCRIPTION: Defines the fonts entitlement that allows the app, with user permission, to install and use custom fonts. It uses the `com.apple.developer.user-fonts` key of type `Array` of `String`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.user-fonts</key>\n<array>\n  <string>system-installation</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Converting .NET MAUI Page to UIViewController (iOS/Mac Catalyst)\nDESCRIPTION: Converts a .NET MAUI ContentPage to a UIKit.UIViewController using the `ToUIViewController` extension method. This allows embedding .NET MAUI pages within native iOS or Mac Catalyst applications. Context needs to be provided to the method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nMyMauiPage myMauiPage = new MyMauiPage();\nUIViewController myPageController = myMauiPage.ToUIViewController(context);\n```\n\n----------------------------------------\n\nTITLE: Setting ListView Separator Style in C# (iOS)\nDESCRIPTION: This C# snippet shows how to set the separator style of a .NET MAUI ListView on iOS to `FullWidth` using the fluent API. It uses the `On<iOS>()` method to ensure the platform-specific code only runs on iOS and the `SetSeparatorStyle` method to apply the style.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-separator-style.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nlistView.On<iOS>().SetSeparatorStyle(SeparatorStyle.FullWidth);\n```\n\n----------------------------------------\n\nTITLE: Attaching DragGestureRecognizer to a Path (XAML)\nDESCRIPTION: This XAML snippet shows how to attach a `DragGestureRecognizer` to a `Path` object in .NET MAUI. The `DragStarting` event is associated with the `OnDragStarting` event handler to customize the data package.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Path Stroke=\"Black\"\n      StrokeThickness=\"4\">\n    <Path.GestureRecognizers>\n        <DragGestureRecognizer DragStarting=\"OnDragStarting\" />\n    </Path.GestureRecognizers>\n    <Path.Data>\n        <!-- PathGeometry goes here -->\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Placing children within a Grid using attached properties in XAML\nDESCRIPTION: This code demonstrates placing child elements within a Grid layout in .NET MAUI using attached properties. The Grid.Row, Grid.Column, Grid.RowSpan, and Grid.ColumnSpan attributes are used to specify the position and span of each child within the grid. These attributes are attached properties defined by the Grid class but applied to its children.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.GridDemoPage\"\n             Title=\"Grid Demo Page\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"100\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition Width=\"*\" />\n            <ColumnDefinition Width=\"100\" />\n        </Grid.ColumnDefinitions>\n\n        <Label Text=\"Autosized cell\"\n               TextColor=\"White\"\n               BackgroundColor=\"Blue\" />\n        <BoxView Color=\"Silver\"\n                 Grid.Column=\"1\" />\n        <BoxView Color=\"Teal\"\n                 Grid.Row=\"1\" />\n        <Label Text=\"Leftover space\"\n               Grid.Row=\"1\" Grid.Column=\"1\"\n               TextColor=\"Purple\"\n               BackgroundColor=\"Aqua\"\n               HorizontalTextAlignment=\"Center\"\n               VerticalTextAlignment=\"Center\" />\n        <Label Text=\"Span two rows (or more if you want)\"\n               Grid.Column=\"2\" Grid.RowSpan=\"2\"\n               TextColor=\"Yellow\"\n               BackgroundColor=\"Blue\"\n               HorizontalTextAlignment=\"Center\"\n               VerticalTextAlignment=\"Center\" />\n        <Label Text=\"Span two columns\"\n               Grid.Row=\"2\" Grid.ColumnSpan=\"2\"\n               TextColor=\"Blue\"\n               BackgroundColor=\"Yellow\"\n               HorizontalTextAlignment=\"Center\"\n               VerticalTextAlignment=\"Center\" />\n        <Label Text=\"Fixed 100x100\"\n               Grid.Row=\"2\" Grid.Column=\"2\"\n               TextColor=\"Aqua\"\n               BackgroundColor=\"Red\"\n               HorizontalTextAlignment=\"Center\"\n               VerticalTextAlignment=\"Center\" />\n\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Listing iOS Simulators on Mac\nDESCRIPTION: This command lists the available iOS simulators on the connected Mac build host. It uses `xcrun simctl list devices` to display the list of available simulators.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/remote-simulator.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxcrun simctl list devices\n```\n\n----------------------------------------\n\nTITLE: Check .NET SDK Version using dotnet CLI\nDESCRIPTION: This snippet demonstrates how to verify the installed .NET SDK version using the dotnet command-line interface. It opens a terminal, executes the command `dotnet --version`, and displays the version of the .NET SDK installed on the system.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet --version\n```\n\n----------------------------------------\n\nTITLE: Android VideoProvider for Accessing Asset Files\nDESCRIPTION: This code snippet defines a `ContentProvider` named `VideoProvider` on Android, which is used to access video files stored in the application's assets folder. The `OpenAssetFile` method creates an `AssetFileDescriptor` object that provides access to the video file based on the provided URI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Content.Res;\nusing Android.Database;\nusing Debug = System.Diagnostics.Debug;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    [ContentProvider(new string[] { \"com.companyname.videodemos\" })]\n    public class VideoProvider : ContentProvider\n    {\n        public override AssetFileDescriptor OpenAssetFile(Uri uri, string mode)\n        {\n            var assets = Context.Assets;\n            string fileName = uri.LastPathSegment;\n            if (fileName == null)\n                throw new FileNotFoundException();\n\n            AssetFileDescriptor afd = null;\n            try\n            {\n                afd = assets.OpenFd(fileName);\n            }\n            catch (IOException ex)\n            {\n                Debug.WriteLine(ex);\n            }\n            return afd;\n        }\n\n        public override bool OnCreate()\n        {\n            return false;\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LegacyPreferences Implementation for Windows in C#\nDESCRIPTION: This code snippet shows the LegacyPreferences implementation for the Windows platform in C#. It utilizes ApplicationDataContainer for storing and retrieving data. The class provides methods to check if a key exists, remove a key, and get a value by key. The implementation uses a locker to ensure thread safety.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Windows.Storage;\n\nnamespace MigrationHelpers;\n\npublic static partial class LegacyPreferences\n{\n    static readonly object locker = new object();\n\n    static bool PlatformContainsKey(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            var appDataContainer = GetApplicationDataContainer(sharedName);\n            return appDataContainer.Values.ContainsKey(key);\n        }\n    }\n\n    static void PlatformRemove(string key, string sharedName)\n    {\n        lock (locker)\n        {\n            var appDataContainer = GetApplicationDataContainer(sharedName);\n            if (appDataContainer.Values.ContainsKey(key))\n                appDataContainer.Values.Remove(key);\n        }\n    }\n\n    static T PlatformGet<T>(string key, T defaultValue, string sharedName)\n    {\n        lock (locker)\n        {\n            var appDataContainer = GetApplicationDataContainer(sharedName);\n            if (appDataContainer.Values.ContainsKey(key))\n            {\n                var tempValue = appDataContainer.Values[key];\n                if (tempValue != null)\n                    return (T)tempValue;\n            }\n        }\n\n        return defaultValue;\n    }\n\n    static ApplicationDataContainer GetApplicationDataContainer(string sharedName)\n    {\n        var localSettings = ApplicationData.Current.LocalSettings;\n        if (string.IsNullOrWhiteSpace(sharedName))\n            return localSettings;\n\n        if (!localSettings.Containers.ContainsKey(sharedName))\n            localSettings.CreateContainer(sharedName, ApplicationDataCreateDisposition.Always);\n\n        return localSettings.Containers[sharedName];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Background Image XAML\nDESCRIPTION: This XAML snippet demonstrates setting the flyout background image and its aspect ratio. The `FlyoutBackgroundImage` property sets the image source, and `FlyoutBackgroundImageAspect` configures how the image is scaled and positioned within the flyout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_22\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutBackgroundImage=\"photo.jpg\"\n       FlyoutBackgroundImageAspect=\"AspectFill\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Flex Basis CSS in .NET MAUI\nDESCRIPTION: Sets the initial main size of a flex item in a .NET MAUI VisualElement. The value should be a float, auto, initial, or a percentage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_23\n\nLANGUAGE: CSS\nCODE:\n```\nflex-basis: 25%;\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons on Menu Items using FontImageSource\nDESCRIPTION: This XAML snippet demonstrates how to display icons on menu items within a .NET MAUI menu bar. It utilizes FontImageSource to define icons for 'Play', 'Pause', and 'Stop' menu items.  The Glyph property sets the character code for the icon, and FontFamily specifies the font to use.  This example is specific to Windows, as Mac Catalyst does not support icons on menu items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/menu-bar.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.MenuBarItems>\n    <MenuBarItem Text=\"Media\">\n        <MenuFlyoutItem Text=\"Play\">\n            <MenuFlyoutItem.IconImageSource>\n                <FontImageSource Glyph=\"&#x25B6;\"\n                                 FontFamily=\"Arial\" />\n            </MenuFlyoutItem.IconImageSource>\n        </MenuFlyoutItem>\n        <MenuFlyoutItem Text=\"Pause\"\n                        Clicked=\"OnPauseClicked\">\n            <MenuFlyoutItem.IconImageSource>\n                <FontImageSource Glyph=\"&#x23F8;\"\n                                 FontFamily=\"Arial\" />\n            </MenuFlyoutItem.IconImageSource>\n        </MenuFlyoutItem>\n        <MenuFlyoutItem Text=\"Stop\"\n                        Clicked=\"OnStopClicked\">\n            <MenuFlyoutItem.IconImageSource>\n                <FontImageSource Glyph=\"&#x23F9;\"\n                                 FontFamily=\"Arial\" />\n            </MenuFlyoutItem.IconImageSource>\n        </MenuFlyoutItem>\n    </MenuBarItem>\n</ContentPage.MenuBarItems>\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Handler Class in .NET MAUI 10.0+ (C#)\nDESCRIPTION: Defines a partial handler class for the custom entry control, using conditional compilation to define the `PlatformView` type for different platforms.  This snippet reflects the changes introduced in .NET MAUI 10.0+ for the Android platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#if IOS || MACCATALYST\nusing PlatformView = Microsoft.Maui.Platform.MauiTextField;\n#elif ANDROID\nusing PlatformView = Microsoft.Maui.Platform.MauiAppCompatEditText;\n#elif WINDOWS\nusing PlatformView = Microsoft.UI.Xaml.Controls.TextBox;\n#elif (NETSTANDARD || !PLATFORM) || (NET6_0_OR_GREATER && !IOS && !ANDROID)\nusing PlatformView = System.Object;\n#endif\nusing MyMauiControl.Controls;\nusing Microsoft.Maui.Handlers;\n\nnamespace MyMauiControl.Handlers\n{\n    public partial class CustomEntryHandler\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Populate CollectionView with Person objects in XAML\nDESCRIPTION: This XAML code shows how to populate a `CollectionView` with an array of `Person` objects. The `ItemsSource` property is bound to an array of `Person` objects defined inline.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataTemplates\"\n             x:Class=\"DataTemplates.WithoutDataTemplatePage\">\n    <StackLayout>\n        <CollectionView>\n            <CollectionView.ItemsSource>\n                <x:Array Type=\"{x:Type local:Person}\">\n                    <local:Person Name=\"Steve\" Age=\"21\" Location=\"USA\" />\n                    <local:Person Name=\"John\" Age=\"37\" Location=\"USA\" />\n                    <local:Person Name=\"Tom\" Age=\"42\" Location=\"UK\" />\n                    <local:Person Name=\"Lucas\" Age=\"29\" Location=\"Germany\" />\n                    <local:Person Name=\"Tariq\" Age=\"39\" Location=\"UK\" />\n                    <local:Person Name=\"Jane\" Age=\"30\" Location=\"USA\" />\n                </x:Array>\n            </CollectionView.ItemsSource>\n        </CollectionView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Clipping Image with SubtractFromClip in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to clip an image using the SubtractFromClip method in .NET MAUI. It loads an image, subtracts a rectangular area from the clipping region, and then draws the image. Only the portions of the image outside the subtracted rectangle will be visible.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\nusing Microsoft.Maui.Graphics.Platform;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    canvas.SubtractFromClip(60, 60, 90, 90);\n    canvas.DrawImage(image, 10, 10, image.Width, image.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: RectangleGeometry Definition XAML\nDESCRIPTION: This XAML code demonstrates how to create and render a RectangleGeometry in a Path object. The RectangleGeometry is defined by a Rect structure that specifies its position, width, and height. The Path is styled with a blue fill and a red stroke.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Fill=\"Blue\"\n      Stroke=\"Red\">\n  <Path.Data>\n    <RectangleGeometry Rect=\"10,10,150,100\" />\n  </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Modifying the App Class in .NET MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to modify the `App` class in a .NET MAUI project. The `MainPage` property should not be set, and the `CreateWindow` method should not be overridden. This ensures that the default application lifecycle is used.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Animations with Task.WhenAny in MAUI (C#)\nDESCRIPTION: This code snippet demonstrates running two animations concurrently using Task.WhenAny. The ScaleToAsync animation runs for 2 seconds, and the RotateToAsync animation runs for 4 seconds. Task.WhenAny completes when either of the animations complete.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait Task.WhenAny<bool>\n(\n  image.RotateToAsync(360, 4000),\n  image.ScaleToAsync(2, 2000)\n);\nawait image.ScaleToAsync(1, 2000);\n```\n\n----------------------------------------\n\nTITLE: Getting Layout Direction in .NET MAUI (C#)\nDESCRIPTION: This code demonstrates how to get the current layout direction used by the system for the application using the `AppInfo.Current.RequestedLayoutDirection` property.  The returned value is an enum of type `LayoutDirection`, which can be `Unknown`, `LeftToRight`, or `RightToLeft`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/app-information.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nLayoutDirection layoutDirection = AppInfo.Current.RequestedLayoutDirection;\n```\n\n----------------------------------------\n\nTITLE: CollectionView Vertical List with LinearItemsLayout C#\nDESCRIPTION: This C# snippet shows how to create a CollectionView with a vertical list layout using LinearItemsLayout.Vertical. It programmatically creates a CollectionView instance and sets its ItemsLayout property to LinearItemsLayout.Vertical, which configures the CollectionView to display items in a vertical list.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = LinearItemsLayout.Vertical\n};\n```\n\n----------------------------------------\n\nTITLE: Using Property Element Syntax for FontImageSource in XAML\nDESCRIPTION: This XAML snippet demonstrates an alternative syntax for using FontImageSource. Instead of using the FontImageSource directly in the ImageSource attribute, this example uses property element syntax, placing the FontImageSource within the Button's ImageSource property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Press me\"\n        Background=\"Transparent\"\n        TextColor=\"{AppThemeBinding Light=Black, Dark=White}\" >\n        <Button.ImageSource>\n            <FontImageSource Glyph=\"MyGlyph\"\n                             Color=\"{AppThemeBinding Light=Black, Dark=White}\"\n                             FontFamily=\"FontAwesome\"\n                             Size=\"18\" />\n        </Button.ImageSource>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Specifying Asset Pack for Specific Items in .NET MAUI XML\nDESCRIPTION: This XML snippet shows how to use the `Update` attribute to specify the `AssetPack` metadata for specific items in a .NET MAUI app. This allows you to precisely control which assets are included in a particular asset pack. This is useful when you only want to include a subset of assets in the asset pack instead of all assets that match a certain pattern.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Update=\"Resources\\Raw\\MyLargeAsset.txt\" AssetPack=\"myassetpack\" />\n```\n\n----------------------------------------\n\nTITLE: ClassKit Entitlement XML\nDESCRIPTION: Defines the ClassKit entitlement for sharing student progress with teachers in school-managed environments. It uses the `com.apple.developer.ClassKit-environment` key of type `String`. The value can be either `development` or `production`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.ClassKit-environment</key>\n<string>development</string>\n```\n\n----------------------------------------\n\nTITLE: Consuming an Attached Property in XAML\nDESCRIPTION: This XAML snippet demonstrates how to consume the `HasShadow` attached property on a `Label` control. The attached property is set using the format `namespace:Type.Property`, where `namespace` is the declared namespace for the custom type, `Type` is the class name containing the attached property, and `Property` is the name of the attached property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/attached-properties.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Label with shadow\" local:MyControl.HasShadow=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Control Scroll Position - End (C#)\nDESCRIPTION: This C# code snippet demonstrates how to scroll an item to the end of the CarouselView using the `ScrollToPosition.End` enum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\ncarouselViewView.ScrollTo(monkey, position: ScrollToPosition.End);\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest.xml uses-sdk element\nDESCRIPTION: This code snippet shows the `<uses-sdk/>` element in `AndroidManifest.xml`, used in Xamarin.Android projects to specify the minimum and target Android SDK versions. The element contains attributes like `android:minSdkVersion` and `android:targetSdkVersion`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\"\n    package=\"com.companyname.myapp\">\n  <uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"33\" />\n  <application android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Polyline with EvenOdd FillRule in XAML\nDESCRIPTION: This XAML code snippet shows how to create a polyline with a blue fill and a red stroke, using the default EvenOdd fill rule. The FillRule determines how the intersecting areas of the polyline are combined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polyline.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Polyline Points=\"0 48, 0 144, 96 150, 100 0, 192 0, 192 96, 50 96, 48 192, 150 200 144 48\"\n          Fill=\"Blue\"\n          Stroke=\"Red\"\n          StrokeThickness=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing MauiApp and MauiContext in C#\nDESCRIPTION: This code snippet demonstrates how to initialize a .NET MAUI application and create a MauiContext object from the MauiApp object. This is a necessary step for native embedding using an app context. The Activity needs to be passed on Android platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar mauiApp = MauiProgram.CreateMauiApp();\nvar context = new MauiContext(mauiApp.Services); // Activity also needs passing on Android\n```\n\n----------------------------------------\n\nTITLE: Create Keyboard Accelerator in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a keyboard accelerator and associate it with a MenuFlyoutItem. It specifies the Ctrl modifier and the X key, so pressing Ctrl+X will trigger the associated action.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<MenuFlyoutItem Text=\"Cut\"\n                Clicked=\"OnCutMenuFlyoutItemClicked\">\n    <MenuFlyoutItem.KeyboardAccelerators>\n        <KeyboardAccelerator Modifiers=\"Ctrl\"\n                             Key=\"X\" />\n    </MenuFlyoutItem.KeyboardAccelerators>\n</MenuFlyoutItem>\n```\n\n----------------------------------------\n\nTITLE: Adding child to Grid layout in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to add a child (Label) to a Grid layout in .NET MAUI. It shows that in .NET MAUI, children are added directly to the layout using the Add method, as the Children collection is for internal use.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/includes/api-changes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nGrid grid = new Grid();\ngrid.Add(new Label { Text = \"Hello world\" });\n```\n\n----------------------------------------\n\nTITLE: Height CSS in .NET MAUI\nDESCRIPTION: Sets the height of a .NET MAUI VisualElement. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_30\n\nLANGUAGE: CSS\nCODE:\n```\nheight: 250;\n```\n\n----------------------------------------\n\nTITLE: Defining AboutPage UI with XAML\nDESCRIPTION: This XAML code defines the user interface for the AboutPage, including a VerticalStackLayout to organize the content, an Image to display a logo, Labels to display information, and a Button to navigate to a website. It uses data binding and event handling to create an interactive UI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/shell.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Notes.AboutPage\"\n             Title=\"About\">\n    <VerticalStackLayout Padding=\"10\"\n                           Spacing=\"10\">\n        <HorizontalStackLayout>\n            <Image Source=\"dotnet_bot.png\"\n                   SemanticProperties.Description=\"The dot net bot marching in place.\"\n                   HeightRequest=\"64\" />\n            <Label FontSize=\"22\"\n                   FontAttributes=\"Bold\"\n                   Text=\".NET MAUI\"\n                   VerticalOptions=\"Center\" />\n            <Label FontSize=\"22\"\n                   Text=\"Notes\"\n                   VerticalOptions=\"Center\" />\n        </HorizontalStackLayout>\n\n        <Label Text=\"This app is written in XAML and C# with .NET MAUI.\" />\n        <Button Text=\"Learn more...\"\n                Clicked=\"LearnMore_Clicked\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting\nDESCRIPTION: This XML snippet configures filename-based multi-targeting in a .NET MAUI project file. It excludes platform-specific files based on the target framework.  The conditions check for Android, iOS/Mac Catalyst, and Windows target frameworks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Android -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-android')) != true\">\n  <Compile Remove=\"**\\*.Android.cs\" />\n  <None Include=\"**\\*.Android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- iOS and Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true AND $(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MaciOS.cs\" />\n  <None Include=\"**\\*.MaciOS.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n\n<!-- Windows -->\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows')) != true \">\n  <Compile Remove=\"**\\*.Windows.cs\" />\n  <None Include=\"**\\*.Windows.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Apply ControlTemplate to ContentPage in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply a ControlTemplate to a ContentPage using the `ControlTemplate` property. The content defined within the StackLayout will be displayed in the ContentPresenter defined within the applied ControlTemplate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/controltemplate.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<controls:HeaderFooterPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n                           xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                           xmlns:controls=\"clr-namespace:ControlTemplateDemos.Controls\"                           \n                           ControlTemplate=\"{StaticResource TealTemplate}\"\n                           HeaderText=\"MyApp\"\n                           ...>\n    <StackLayout Margin=\"10\">\n        <Entry Placeholder=\"Enter username\" />\n        <Entry Placeholder=\"Enter password\"\n               IsPassword=\"True\" />\n        <Button Text=\"Login\" />\n    </StackLayout>\n</controls:HeaderFooterPage>\n```\n\n----------------------------------------\n\nTITLE: Setting ListView Group Header Style in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the ListView's GroupHeaderStyle property to 'Grouped' to prevent header cells from floating during scrolling on iOS. It requires the 'ios' namespace to be declared, which points to Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-group-header-style.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout Margin=\"20\">\n        <ListView ... ios:ListView.GroupHeaderStyle=\"Grouped\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Remove Attached Behavior in XAML\nDESCRIPTION: Removes the AttachedNumericValidationBehavior from a control by setting the AttachBehavior attached property to `false` in XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Placeholder=\"Enter a System.Double\" local:AttachedNumericValidationBehavior.AttachBehavior=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: MSBuild Property for Nullable Reference Types\nDESCRIPTION: This XML snippet shows how to enable Nullable Reference Types (NRT) in a Xamarin.Android project. NRT support was added in Xamarin.Android 11.0 and uses the standard .NET mechanism.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <Nullable>enable</Nullable>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Font Family CSS in .NET MAUI\nDESCRIPTION: Sets the font family for various .NET MAUI controls like Button, DatePicker, Editor, Entry, Label, Picker, SearchBar, TimePicker, and Span.  The value should be a string or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_27\n\nLANGUAGE: CSS\nCODE:\n```\nfont-family: Consolas;\n```\n\n----------------------------------------\n\nTITLE: Text Transform CSS in .NET MAUI\nDESCRIPTION: Sets the text transform for .NET MAUI Button, Editor, Entry, Label, SearchBar, SearchHandler. Valid values are none, default, uppercase, lowercase, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_53\n\nLANGUAGE: CSS\nCODE:\n```\ntext-transform: uppercase;\n```\n\n----------------------------------------\n\nTITLE: SetAppThemeColor Extension Method in C#\nDESCRIPTION: This C# snippet demonstrates how to use the SetAppThemeColor extension method to set the TextColor property of a Label based on the current system theme. It defines the colors to use for light and dark themes directly in the code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label();\nlabel.SetAppThemeColor(Label.TextColorProperty, Colors.Green, Colors.Red);\n```\n\n----------------------------------------\n\nTITLE: Generated InitializeComponent Method in .NET MAUI C#\nDESCRIPTION: This code snippet shows the generated InitializeComponent method. It calls the LoadFromXaml extension method to extract the compiled XAML and initialize objects. This is auto generated at compile time.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/runtime-load.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void InitializeComponent()\n{\n    global::Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml(this, typeof(MainPage));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell TabBar Background Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell TabBar background color for an Element to white using the `-maui-shell-tabbar-background` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_78\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-tabbar-background: white;\n```\n\n----------------------------------------\n\nTITLE: Configure AndroidManifest.xml for Network Security (XML)\nDESCRIPTION: Configures the `AndroidManifest.xml` file to reference the network security configuration. The `networkSecurityConfig` attribute points to the XML resource, enabling the defined network security policies for the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest>\n    <application android:networkSecurityConfig=\"@xml/network_security_config\" ...>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: ShareCommand Implementation with View Bounds in .NET MAUI\nDESCRIPTION: This code snippet shows how to use the ViewHelpers.GetAbsoluteBounds() extension method within a Share command to calculate the PresentationSourceBounds of the view that triggered the share action.  This ensures the share sheet appears near the triggering element on iPadOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/ios-PresentationSourceBounds.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic Command<Microsoft.Maui.Controls.View> ShareCommand { get; } = new Command<Microsoft.Maui.Controls.View>(Share);\n\nasync void Share(Microsoft.Maui.Controls.View element)\n{\n    try\n    {\n        await Share.Default.RequestAsync(new ShareTextRequest\n        {\n            PresentationSourceBounds = element.GetAbsoluteBounds(),\n            Title = \"Title\",\n            Text = \"Text\"\n        });\n    }\n    catch (Exception)\n    {\n        // Handle exception that share failed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Looping on Windows with MediaPlayerElement\nDESCRIPTION: This C# code snippet shows how to enable video looping on Windows by setting the `MediaPlayerElement.MediaPlayer.IsLoopingEnabled` property to the value of the `Video.IsLooping` property within the `UpdateIsLooping` method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\npublic void UpdateIsLooping()\n{\n    if (_isMediaPlayerAttached)\n        _mediaPlayerElement.MediaPlayer.IsLoopingEnabled = _video.IsLooping;\n}\n```\n\n----------------------------------------\n\nTITLE: Trusting HTTPS Development Certificate (dotnet)\nDESCRIPTION: This command trusts the ASP.NET Core HTTPS development certificate, allowing secure communication during local development. This is a one-time setup step.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/local-web-services.md#_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet dev-certs https --trust\n```\n\n----------------------------------------\n\nTITLE: Identify Emulator Ports ZSH\nDESCRIPTION: This command uses `lsof` to list open TCP ports and filters the output to show ports used by the Android emulator or QEMU. It's crucial for identifying the specific ports the emulator is listening on for ADB connections (odd-numbered port) and console connections (even-numbered port). The output provides the port numbers needed for subsequent packet forwarding or SSH port forwarding configurations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nlsof -iTCP -sTCP:LISTEN -P | grep 'emulator\\|qemu'\n```\n\n----------------------------------------\n\nTITLE: Set Mac UI Idiom in .NET MAUI Mac Catalyst\nDESCRIPTION: This XML snippet configures the .NET MAUI Mac Catalyst app to use the Mac user interface idiom. It updates the UIDeviceFamily key in the Info.plist file to 6, preventing the app's UI from being scaled and causing some controls to adopt a native `AppKit` appearance and behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/update-info-plist.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>UIDeviceFamily</key>\n<array>\n  <integer>6</integer>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Customizing FlyoutItem Appearance in .NET MAUI Shell XAML\nDESCRIPTION: This code snippet demonstrates how to customize the appearance of each FlyoutItem object using the Shell.ItemTemplate attached property.  A DataTemplate is used to define a Grid layout with an Image and a Label. The Image displays the FlyoutIcon, and the Label displays the Title of the FlyoutItem.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell ...\n       xmlns:local=\"clr-namespace:Xaminals\"\n       x:DataType=\"local:AppShell\">\n    ...\n    <Shell.ItemTemplate>\n        <DataTemplate>\n            <Grid ColumnDefinitions=\"0.2*,0.8*\">\n                <Image Source=\"{Binding FlyoutIcon}\"\n                       Margin=\"5\"\n                       HeightRequest=\"45\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Title}\"\n                       FontAttributes=\"Italic\"\n                       VerticalTextAlignment=\"Center\" />\n            </Grid>\n        </DataTemplate>\n    </Shell.ItemTemplate>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Read Legacy Version Tracking Data C#\nDESCRIPTION: This code snippet retrieves legacy version tracking data on Android, iOS, and Windows using the LegacyVersionTracking class. It reads various properties such as IsFirstLaunchEver, CurrentVersion, FirstInstalledVersion, and historical data, converting them to string representations for display or further processing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/version-tracking.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n#if ANDROID || IOS || WINDOWS\nusing MigrationHelpers;\n...\n\nstring isFirstLaunchEver = LegacyVersionTracking.IsFirstLaunchEver.ToString();\nstring currentVersionIsFirst = LegacyVersionTracking.IsFirstLaunchForCurrentVersion.ToString();\nstring currentBuildIsFirst = LegacyVersionTracking.IsFirstLaunchForCurrentBuild.ToString();\nstring currentVersion = LegacyVersionTracking.CurrentVersion.ToString();\nstring currentBuild = LegacyVersionTracking.CurrentBuild.ToString();\nstring firstInstalledVer = LegacyVersionTracking.FirstInstalledVersion.ToString();\nstring firstInstalledBuild = LegacyVersionTracking.FirstInstalledBuild.ToString();\nstring versionHistory = String.Join(',', LegacyVersionTracking.VersionHistory);\nstring buildHistory = String.Join(',', LegacyVersionTracking.BuildHistory);\nstring previousVersion = LegacyVersionTracking.PreviousVersion?.ToString() ?? \"none\";\nstring previousBuild = LegacyVersionTracking.PreviousBuild?.ToString() ?? \"none\";\n#endif\n```\n\n----------------------------------------\n\nTITLE: Reading Clipboard Text .NET MAUI C#\nDESCRIPTION: Demonstrates reading text from the system clipboard using the IClipboard.GetTextAsync method. It first checks if the clipboard contains any text, and if so, retrieves the text and optionally clears the clipboard by setting the text to null.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/data/clipboard.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async void ReadClipboardButton_Clicked(object sender, EventArgs e)\n{\n    if (Clipboard.Default.HasAccess)\n    {\n        string text = await Clipboard.Default.GetTextAsync();\n        if (!string.IsNullOrWhiteSpace(text))\n        {\n            ClipboardResult.Text = text;\n\n            // After reading the text, optionally clear the clipboard\n            //await Clipboard.Default.SetTextAsync(null);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build .NET MAUI app for macOS Catalyst\nDESCRIPTION: This command builds a .NET MAUI application for macOS Catalyst with the Release configuration. It specifies the target framework as net8.0-maccatalyst and the configuration as Release. This command must be run from the project directory.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/publishing-property-group.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet build -f net8.0-maccatalyst -c Release\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Entitlement in XML\nDESCRIPTION: This snippet configures the iCloud entitlement, enabling the app to store data in the cloud. The snippet shows keys for container identifiers and kvstore identifier using placeholders.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n  <string>iCloud.com.companyname.test</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(AppIdentifierPrefix)$(CFBundleIdentifier)</string>\n```\n\n----------------------------------------\n\nTITLE: Pinch Updated Event Handler C#\nDESCRIPTION: This C# snippet shows the basic structure of the OnPinchUpdated event handler.  This method is called when the pinch gesture is updated.  Placeholder code is provided to indicate where the pinch handling logic should be implemented.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pinch.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnPinchUpdated(object sender, PinchGestureUpdatedEventArgs e)\n{\n    // Handle the pinch\n}\n```\n\n----------------------------------------\n\nTITLE: Fading an Image in MAUI (C#)\nDESCRIPTION: This code snippet demonstrates how to fade a MAUI Image in by animating its Opacity property using the FadeToAsync method. The image starts with Opacity set to 0 and gradually fades in to Opacity 1 over 4 seconds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/basic-animation-dotnet10.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nimage.Opacity = 0;\nawait image.FadeToAsync(1, 4000);\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Text in XAML with CDATA\nDESCRIPTION: This snippet shows how to display HTML text in a Label using XAML and a CDATA section. Using a CDATA section can improve readability when the HTML contains numerous special characters.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<Label TextType=\"Html\">\n    <![CDATA[\n    <Label Text=\"This is &lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/span&gt; text.\"\n    ]]>\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Simple Text-to-Speech in .NET MAUI C#\nDESCRIPTION: This C# code snippet demonstrates how to use the ITextToSpeech interface to speak text. It calls the SpeakAsync method with the text to be spoken.  The method is part of the Microsoft.Maui.Media namespace and is available through TextToSpeech.Default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/text-to-speech.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait TextToSpeech.Default.SpeakAsync(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Aligning child views in a VerticalStackLayout - XAML\nDESCRIPTION: This XAML snippet shows how to align child views within a VerticalStackLayout using the HorizontalOptions property. Different alignment options such as Start, Center, End, and Fill are applied to Label objects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/verticalstacklayout.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.VerticalStackLayoutPage\">\n    <VerticalStackLayout Margin=\"20\"\n                         Spacing=\"6\">\n        <Label Text=\"Start\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Start\" />\n        <Label Text=\"Center\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Center\" />\n        <Label Text=\"End\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"End\" />\n        <Label Text=\"Fill\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Fill\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset using FileSystem in C#\nDESCRIPTION: This C# code snippet shows how to access a raw asset deployed with the MAUI application package using the `FileSystem.OpenAppPackageFileAsync` method. It opens the asset as a stream and reads its content into a string. The `AboutAssets.txt` file is loaded in this example.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/bugs/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Android emulator components on Windows\nDESCRIPTION: These commands install the Android emulator and a specific system image for Android 35 (Android 14) using the `sdkmanager` tool.  The emulator allows testing apps without a physical device. The system image provides the Android OS environment for the emulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsdkmanager --install emulator\nsdkmanager --install \"system-images;android-35;google_apis;x86_64\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Entitlement in XML\nDESCRIPTION: This snippet demonstrates how to configure the Wallet entitlement using XML. The `com.apple.developer.pass-type-identifiers` key is used to specify the allowed pass types. Setting the string value to `$(TeamIdentifierPrefix)*` allows all pass types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_33\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.pass-type-identifiers</key>\n<array>\n  <string>$(TeamIdentifierPrefix)*</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Enable strict XAML compilation warnings (<=net-maui-8.0)\nDESCRIPTION: This code snippet shows how to enable build warnings for XAML bindings that don't use compiled bindings by setting the `$(MauiStrictXamlCompilation)` build property to `true` in the app's project file (*.csproj).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiStrictXamlCompilation>true</MauiStrictXamlCompilation>\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Style in C#\nDESCRIPTION: This C# code demonstrates how to update a dynamic style at runtime by assigning a different style to the existing key in the ResourceDictionary. This will update the appearance of any elements using the DynamicResource to reference the updated style.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/xaml.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nResources[\"blueSearchBarStyle\"] = Resources[\"greenSearchBarStyle\"];\n```\n\n----------------------------------------\n\nTITLE: CollectionView Header and Footer as Strings in XAML\nDESCRIPTION: Defines a CollectionView in XAML with simple string headers and footers. The `Header` and `Footer` properties are directly set to string values. The CollectionView binds to a `Monkeys` data source.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_13\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\"\n                Header=\"Monkeys\"\n                Footer=\"2019\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Drag Preview on iOS/Mac Catalyst\nDESCRIPTION: This code snippet shows how to customize the preview of a dragged item on iOS and Mac Catalyst. It uses the SetPreviewProvider method of the PlatformDragStartingEventArgs to replace the default preview with a custom image. The code creates a UIImageView with a specified image and sets its content mode and frame to define the preview's appearance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/drag-and-drop.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDragStarting(object sender, DragStartingEventArgs e)\n{\n#if IOS || MACCATALYST\n    Func<UIKit.UIDragPreview> action = () =>\n    {\n        var image = UIKit.UIImage.FromFile(\"dotnet_bot.png\");\n        UIKit.UIImageView imageView = new UIKit.UIImageView(image);\n        imageView.ContentMode = UIKit.UIViewContentMode.Center;\n        imageView.Frame = new CoreGraphics.CGRect(0, 0, 250, 250);\n        return new UIKit.UIDragPreview(imageView);\n    };\n\n    e.PlatformArgs.SetPreviewProvider(action);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Access Keys in C# for .NET MAUI Windows\nDESCRIPTION: This C# code snippet demonstrates how to set access keys for VisualElement controls in a .NET MAUI application targeting Windows using the fluent API. It showcases setting the AccessKey, AccessKeyPlacement, AccessKeyHorizontalOffset, and AccessKeyVerticalOffset properties using the `On<Windows>()` extension method for platform-specific configurations.  It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/visualelement-access-keys.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\n\nvar page = new ContentPage { Title = \"Page 1\" };\npage.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetAccessKey(\"1\");\n\nvar switchView = new Switch();\nswitchView.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetAccessKey(\"A\");\nvar entry = new Entry { Placeholder = \"Enter text here\" };\nentry.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetAccessKey(\"B\");\n...\n\nvar button4 = new Button { Text = \"Access key F, placement top with offsets\" };\nbutton4.Clicked += OnButtonClicked;\nbutton4.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>()\n    .SetAccessKey(\"F\")\n    .SetAccessKeyPlacement(AccessKeyPlacement.Top)\n    .SetAccessKeyHorizontalOffset(20)\n    .SetAccessKeyVerticalOffset(20);\n...\n```\n\n----------------------------------------\n\nTITLE: Recoloring the Background of an App Icon in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to recolor the background of an app icon with transparency in a .NET MAUI project. The `Color` attribute is used to specify the background color using a hexadecimal value or a named .NET MAUI color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" Color=\"#FF0000\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Passing Data via Constructor - C#\nDESCRIPTION: This snippet demonstrates how to pass data to a new page by including it as an argument in the page's constructor. The `Contact` object is instantiated and passed to the `DetailsPage` constructor.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nContact contact = new Contact\n{\n    Name = \"Jane Doe\",\n    Age = 30,\n    Occupation = \"Developer\",\n    Country = \"USA\"\n};\n...\nawait Navigation.PushModalAsync(new DetailsPage(contact));\n```\n\n----------------------------------------\n\nTITLE: CollectionView Vertical List with LinearItemsLayout XAML\nDESCRIPTION: This XAML snippet demonstrates how to use LinearItemsLayout with Vertical orientation to create a vertical list in CollectionView. It explicitly defines the ItemsLayout as a LinearItemsLayout and sets its Orientation to Vertical. This approach provides more control over item spacing and layout customization.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Vertical\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: FilterData Custom Type\nDESCRIPTION: Defines a custom FilterData class with a Filter property, backing it with a BindableProperty.  This is used to demonstrate data binding in the EmptyView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class FilterData : BindableObject\n{\n    public static readonly BindableProperty FilterProperty = BindableProperty.Create(nameof(Filter), typeof(string), typeof(FilterData), null);\n\n    public string Filter\n    {\n        get { return (string)GetValue(FilterProperty); }\n        set { SetValue(FilterProperty, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Unpackaged App (Self-Contained)\nDESCRIPTION: This command publishes an unpackaged, self-contained .NET MAUI app for Windows. It includes the same parameters as the framework-dependent publish, but also specifies that the app should be self-contained using the WindowsAppSDKSelfContained property. This will bundle the .NET runtime with the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-unpackaged-cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64 -p:WindowsPackageType=None -p:WindowsAppSDKSelfContained=true\n```\n\n----------------------------------------\n\nTITLE: Setting Character Spacing in XAML\nDESCRIPTION: This snippet shows how to set the character spacing of a Label control using the CharacterSpacing property in XAML. The value is a double representing device-independent units.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Character spaced text\"\n       CharacterSpacing=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Status Property in Video Class (C#)\nDESCRIPTION: This code defines a read-only bindable property named `Status` of type `VideoStatus` within the `Video` class. It also defines the `IVideoController.Status` interface implementation allowing the handler to set the status.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class Video : View, IVideoController\n    {\n        ...\n        private static readonly BindablePropertyKey StatusPropertyKey =\n            BindableProperty.CreateReadOnly(nameof(Status), typeof(VideoStatus), typeof(Video), VideoStatus.NotReady);\n\n        public static readonly BindableProperty StatusProperty = StatusPropertyKey.BindableProperty;\n\n        public VideoStatus Status\n        {\n            get { return (VideoStatus)GetValue(StatusProperty); }\n        }\n\n        VideoStatus IVideoController.Status\n        {\n            get { return Status; }\n            set { SetValue(StatusPropertyKey, value); }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Mac Catalyst App using dotnet CLI\nDESCRIPTION: This command-line example demonstrates how to publish a .NET MAUI Mac Catalyst app using the `dotnet publish` command. It includes parameters for target framework, configuration, linking, code signing, and provisioning.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-app-store.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet publish -f net8.0-maccatalyst -c Release -p:MtouchLink=SdkOnly -p:CreatePackage=true -p:EnableCodeSigning=true -p:EnablePackageSigning=true -p:CodesignKey=\"Apple Distribution: John Smith (AY2GDE9QM7)\" -p:CodesignProvision=\"MyMauiApp\" -p:CodesignEntitlements=\"Platforms\\MacCatalyst\\Entitlements.plist\" -p:PackageSigningKey=\"3rd Party Mac Developer Installer: John Smith (AY2GDE9QM7)\"\n```\n\n----------------------------------------\n\nTITLE: Using SwipeContainer in XAML\nDESCRIPTION: This XAML code shows how to use the custom 'SwipeContainer' to wrap a BoxView. The 'Swipe' event of the SwipeContainer is handled by the 'OnSwiped' method in the page's code-behind. This simplifies swipe gesture handling.  Requires .NET MAUI framework and the SwipeContainer custom control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <local:SwipeContainer Swipe=\"OnSwiped\" ...>\n        <BoxView Color=\"Teal\" ... />\n    </local:SwipeContainer>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Configure Image Resources with Child Folders in .NET MAUI\nDESCRIPTION: This XML snippet shows how to include all files from the Resources\\Images folder, including any subfolders, as MauiImage resources. The double wildcard character ('**') specifies that the Images folder can contain child folders, allowing images to be organized in a hierarchical structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <!-- Images -->\n    <MauiImage Include=\"Resources\\Images\\**\\*\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Looping on Android with MediaPlayer\nDESCRIPTION: This C# code snippet demonstrates how to enable video looping on Android by implementing the `MediaPlayer.IOnPreparedListener` interface. The `UpdateIsLooping` method sets the `MauiVideoPlayer` as the object that provides the `OnPrepared` callback based on the `Video.IsLooping` property. The `OnPrepared` callback then sets the `MediaPlayer.IsLooping` property to the value of `Video.IsLooping`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nusing Android.Content;\nusing Android.Media;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout, MediaPlayer.IOnPreparedListener\n    {\n        VideoView _videoView;\n        Video _video;\n        ...\n\n        public void UpdateIsLooping()\n        {\n            if (_video.IsLooping)\n            {\n                _videoView.SetOnPreparedListener(this);\n            }\n            else\n            {\n                _videoView.SetOnPreparedListener(null);\n            }\n        }\n\n        public void OnPrepared(MediaPlayer mp)\n        {\n            mp.Looping = _video.IsLooping;\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Linear Item Spacing C#\nDESCRIPTION: This code demonstrates how to set the `ItemSpacing` property of a `LinearItemsLayout` within a `CollectionView` using C#. An instance of `LinearItemsLayout` is created with vertical orientation and an item spacing of 20.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemsLayout = new LinearItemsLayout(ItemsLayoutOrientation.Vertical)\n    {\n        ItemSpacing = 20\n    }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting ListView Separator Style in XAML (iOS)\nDESCRIPTION: This XAML snippet demonstrates how to set the separator style of a .NET MAUI ListView on iOS to `FullWidth`. It utilizes the `ListView.SeparatorStyle` attached property from the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/listview-separator-style.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout Margin=\"20\">\n        <ListView ... ios:ListView.SeparatorStyle=\"FullWidth\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Disable XAML Compilation - Assembly Level - C#\nDESCRIPTION: This C# code snippet demonstrates how to disable XAML compilation for an entire assembly using the `XamlCompilationAttribute`. When XAML compilation is skipped, XAML errors are reported at runtime instead of compile-time. This is generally not recommended.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/xamlc.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: XamlCompilation(XamlCompilationOptions.Skip)]\n```\n\n----------------------------------------\n\nTITLE: Initializing TimePicker Time in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a TimePicker instance and set its `Time` property to a specific TimeSpan. The TimeSpan represents the time of day.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/timepicker.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTimePicker timePicker = new TimePicker\n{\n  Time = new TimeSpan(4, 15, 26) // Time set to \"04:15:26\"\n};\n```\n\n----------------------------------------\n\nTITLE: Add Service Properties in AppDelegate Class - C#\nDESCRIPTION: These properties are added to the `AppDelegate` class to retrieve concrete implementations of push notification related services from the app's dependency injection container.  It uses the null-coalescing operator to retrieve them lazily.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nIPushDemoNotificationActionService NotificationActionService =>\n    _notificationActionService ?? (_notificationActionService = IPlatformApplication.Current.Services.GetService<IPushDemoNotificationActionService>());\n\nINotificationRegistrationService NotificationRegistrationService =>\n    _notificationRegistrationService ?? (_notificationRegistrationService = IPlatformApplication.Current.Services.GetService<INotificationRegistrationService>());\n\nIDeviceInstallationService DeviceInstallationService =>\n    _deviceInstallationService ?? (_deviceInstallationService = IPlatformApplication.Current.Services.GetService<IDeviceInstallationService>());\n```\n\n----------------------------------------\n\nTITLE: Add tint color to splash screen image in XML\nDESCRIPTION: This XML snippet demonstrates how to add a tint color to the splash screen image. The `TintColor` attribute allows you to render a simple image in a different color. Color is specified in hexadecimal format.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/splashscreen.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MauiSplashScreen Include=\"Resources\\Splash\\splashscreen.svg\" TintColor=\"#66B3FF\" />\n```\n\n----------------------------------------\n\nTITLE: Communicates with Drivers Entitlement XML\nDESCRIPTION: Defines the communicates with drivers entitlement for communication between an app and DriverKit drivers. It uses the `com.apple.developer.driverkit.communicates-with-drivers` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.driverkit.communicates-with-drivers</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Family Controls Entitlement XML\nDESCRIPTION: Defines the family controls entitlement for enabling parental controls in the app and access to the ScreenTime API. It uses the `com.apple.developer.family-controls` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.family-controls</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Basis Property Usage in XAML (Percentage)\nDESCRIPTION: This snippet demonstrates how to set the Basis property on a Label within a FlexLayout in XAML, specifying the initial size of the child as a percentage of the FlexLayout's size. This allows for relative sizing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Label FlexLayout.Basis=\"25%\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: Treat Warnings as Errors - XML\nDESCRIPTION: This XML snippet shows how to change specific XAML compiler warnings to build errors using the `$(WarningsAsErrors)` build property. This helps ensure that warnings related to compiled bindings are not ignored.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<WarningsAsErrors>$(WarningsAsErrors);XC0022;XC0023</WarningsAsErrors>\n```\n\n----------------------------------------\n\nTITLE: Create iOS Development Certificate in Visual Studio\nDESCRIPTION: This snippet describes how to create an iOS development certificate within Visual Studio by navigating to the Apple Accounts options, selecting a team, and creating a new iOS Development certificate. The certificate is then synced with Apple, and the private key and certificate are exported to Keychain Access on the Mac build host when paired.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/device-provisioning/manual-provisioning.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. In Visual Studio, go to **Tools > Options > Xamarin > Apple Accounts**.\n2. In the **Apple Developer Accounts** dialog, select a team and then select **View Details**.\n3. In the **Details** dialog, select **Create Certificate** > **iOS Development**. A new signing identity will be created and will sync with Apple if you have the correct permissions.\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode command line tools\nDESCRIPTION: This command installs the Xcode command line tools, which are required for building and running iOS and macOS applications. This command needs to be executed in the terminal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Setting ImeOptions in XAML for Android Entry\nDESCRIPTION: This code snippet demonstrates how to set the input method editor (IME) options for a .NET MAUI Entry control in XAML, specifically targeting the Android platform. The `Entry.ImeOptions` attached property is used to specify the desired action button on the soft keyboard.  The `xmlns:android` namespace declaration is required to use platform-specific properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/entry-ime-options.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout ...>\n        <Entry ... android:Entry.ImeOptions=\"Send\" />\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Using system fonts in .NET MAUI on Android with XAML\nDESCRIPTION: This XAML snippet shows how to use Android system fonts within a .NET MAUI application by setting the `FontFamily` property of a Label control. The example specifically utilizes the 'monospace' font, but other options like 'serif' and 'sans-serif' are also available. The application uses built-in system fonts for a consistent look and feel on Android devices.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"Hello .NET MAUI\"\n       FontFamily=\"monospace\" />\n```\n\n----------------------------------------\n\nTITLE: Set Flyout Background Color XAML\nDESCRIPTION: This XAML snippet shows how to set the background color of the flyout using the `Shell.FlyoutBackgroundColor` bindable property.  It sets the background color to AliceBlue. It can also be set using Cascading Style Sheets (CSS).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_19\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutBackgroundColor=\"AliceBlue\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Adding child to Grid layout in Xamarin.Forms\nDESCRIPTION: This snippet demonstrates how to add a child (Label) to a Grid layout in Xamarin.Forms. It shows that in Xamarin.Forms, children are added to the layout's Children collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/includes/api-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nGrid grid = new Grid();\ngrid.Children.Add(new Label { Text = \"Hello world\" });\n```\n\n----------------------------------------\n\nTITLE: Configure selective backup in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to configure selective backup in `AndroidManifest.xml` to exclude secure storage from automatic backups.  The `android:fullBackupContent` attribute points to a custom rules file (auto_backup_rules.xml).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/secure-storage.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<application ...\n        android:fullBackupContent=\"@xml/auto_backup_rules\">\n    </application>\n```\n\n----------------------------------------\n\nTITLE: Install App on Device\nDESCRIPTION: This command installs the application on the specified physical device using the provided *.ipa* file. It requires the device identifier and the path to the application's archive file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nxcrun devicectl device install app --device <device-identifier> <path-to-ipa>\n```\n\n----------------------------------------\n\nTITLE: Set TitleView in C#\nDESCRIPTION: This snippet demonstrates how to set a custom view (a `Slider`) as the `TitleView` of a `NavigationPage` using C# code. This allows for dynamic control of the navigation bar content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nSlider titleView = new Slider { HeightRequest = 44, WidthRequest = 300 };\nNavigationPage.SetTitleView(this, titleView);\n```\n\n----------------------------------------\n\nTITLE: Install .NET Upgrade Assistant CLI Ignoring Failed Sources\nDESCRIPTION: This command installs the .NET Upgrade Assistant globally, ignoring failed NuGet feed sources.  This is useful when some configured NuGet feeds are unavailable or invalid.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/upgrade-assistant.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install -g --ignore-failed-sources upgrade-assistant\n```\n\n----------------------------------------\n\nTITLE: Handle Reselection - C#\nDESCRIPTION: This C# code demonstrates how to subscribe to the SelectionChanged event of a CollectionView to enable reselection of items programmatically.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView();\ncollectionView.SelectionChanged += OnCollectionViewSelectionChanged;\n```\n\n----------------------------------------\n\nTITLE: Creating a LineSegment in PathGeometry with XAML\nDESCRIPTION: This code snippet demonstrates how to create a vertical line using PathGeometry, PathFigure, and LineSegment in XAML. It defines a PathFigure with a StartPoint at (10,50) and a LineSegment that draws a line to the point (10,150). The Path is stroked in black.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,50\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <LineSegment Point=\"10,150\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Disable Zoom - C#\nDESCRIPTION: This C# code disables zooming on a .NET MAUI Map. A new Map object is created, and its IsZoomEnabled property is set to false, which prevents the user from zooming in or out of the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMap map = new Map\n{\n    IsZoomEnabled = false\n};\n```\n\n----------------------------------------\n\nTITLE: About Model Definition in C#\nDESCRIPTION: This C# code defines the `About` model class. It includes properties for `Title`, `Version`, `Message`.  This model separates the about data from the view logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/navigation.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Models;\n\ninternal class About\n{\n  public string Title { get; set; } = AppInfo.Name;\n  public string Version { get; set; } = AppInfo.VersionString;\n  public string Message { get; set; } = \"This app is written in C# and .NET MAUI.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MauiVideoPlayer for iOS and Mac Catalyst\nDESCRIPTION: This code snippet defines the `MauiVideoPlayer` class, which encapsulates the native `AVPlayer` and `AVPlayerViewController` for video playback on iOS and Mac Catalyst.  It initializes the `AVPlayerViewController` with an `AVPlayer` and adds it as a subview. It also includes a conditional compilation block for iOS 16 and Mac Catalyst 16 to ensure the transport controls are displayed in Shell-based apps by adding the `AVPlayerViewController`'s view to the parent `ViewController`'s view.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        AVPlayerViewController _playerViewController;\n        Video _video;\n        ...\n\n        public MauiVideoPlayer(Video video)\n        {\n            _video = video;\n\n            _playerViewController = new AVPlayerViewController();\n            _player = new AVPlayer();\n            _playerViewController.Player = _player;\n            _playerViewController.View.Frame = this.Bounds;\n\n#if IOS16_0_OR_GREATER || MACCATALYST16_1_OR_GREATER\n            // On iOS 16 and Mac Catalyst 16, for Shell-based apps, the AVPlayerViewController has to be added to the parent ViewController, otherwise the transport controls won't be displayed.\n            var viewController = WindowStateManager.Default.GetCurrentUIViewController();\n\n            // If there's no view controller, assume it's not Shell and continue because the transport controls will still be displayed.\n            if (viewController?.View is not null)\n            {\n                // Zero out the safe area insets of the AVPlayerViewController\n                UIEdgeInsets insets = viewController.View.SafeAreaInsets;\n                _playerViewController.AdditionalSafeAreaInsets = new UIEdgeInsets(insets.Top * -1, insets.Left, insets.Bottom * -1, insets.Right);\n\n                // Add the View from the AVPlayerViewController to the parent ViewController\n                viewController.View.AddSubview(_playerViewController.View);\n            }\n#endif\n            // Use the View from the AVPlayerViewController as the native control\n            AddSubview(_playerViewController.View);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadow to an Image (short format, .NET MAUI 9.0+)\nDESCRIPTION: This XAML snippet demonstrates how to add a shadow to an Image control using a formatted string to define the shadow properties. This shorthand syntax is available in .NET MAUI 9.0 and later. The format used here is 'color, offset X, offset Y'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/shadow.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n           WidthRequest=\"250\"\n           HeightRequest=\"310\"\n           Shadow=\"#000000 4 4\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Media Picker Permissions (Android) C#\nDESCRIPTION: This code snippet demonstrates how to add assembly-based permissions for accessing the camera and media storage in an Android application using .NET MAUI. It adds attributes to the MainApplication.cs file to request CAMERA, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, READ_MEDIA_IMAGES, READ_MEDIA_VIDEO, and READ_MEDIA_AUDIO permissions.\nDependencies: Android project, .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device-media/picker.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.Camera)]\n[assembly: UsesPermission(Android.Manifest.Permission.ReadExternalStorage, MaxSdkVersion = 32)]\n[assembly: UsesPermission(Android.Manifest.Permission.WriteExternalStorage, MaxSdkVersion = 32)]\n[assembly: UsesPermission(Android.Manifest.Permission.ReadMediaImages)]\n[assembly: UsesPermission(Android.Manifest.Permission.ReadMediaVideo)]\n[assembly: UsesPermission(Android.Manifest.Permission.ReadMediaAudio)]\n```\n\n----------------------------------------\n\nTITLE: Button Command Binding with Parameter in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to bind a button's command to a command in your ViewModel and pass the button itself as the CommandParameter. This allows the command to access the button's properties, such as its bounds, and use that to calculate PresentationSourceBounds.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/ios-PresentationSourceBounds.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Button Text=\"Share\"\n        Command=\"{Binding ShareWithFriendsCommand}\"\n        CommandParameter=\"{Binding Source={RelativeSource Self}}\"/>\n```\n\n----------------------------------------\n\nTITLE: Toggle Spell Check on SearchBar in C# (.NET MAUI, Windows)\nDESCRIPTION: This C# snippet demonstrates how to toggle the spell check on and off for the SearchBar control on the Windows platform using the fluent API. It utilizes `GetIsSpellCheckEnabled` to check current state before toggling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/searchbar-spell-check.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nsearchBar.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetIsSpellCheckEnabled(!searchBar.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().GetIsSpellCheckEnabled());\n```\n\n----------------------------------------\n\nTITLE: Modify iOS AppDelegate for .NET MAUI C#\nDESCRIPTION: Modifies the iOS AppDelegate class to return true for the FinishedLaunching override. This is a preliminary step for integrating .NET MAUI within an iOS application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNativeEmbeddedApp.iOS;\n\n[Register(\"AppDelegate\")]\npublic class AppDelegate : UIApplicationDelegate\n{\n    public override UIWindow? Window { get; set; }\n\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core Authentication (C#)\nDESCRIPTION: This C# code snippet demonstrates how to configure authentication in an ASP.NET Core application for social providers using cookies. It shows how to add Facebook authentication and configure the necessary settings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/authentication.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(o =>\n    {\n        o.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n    })\n    .AddCookie()\n    .AddFacebook(fb =>\n    {\n        fb.AppId = Configuration[\"FacebookAppId\"];\n        fb.AppSecret = Configuration[\"FacebookAppSecret\"];\n        fb.SaveTokens = true;\n    });\n```\n\n----------------------------------------\n\nTITLE: Android Permissions - AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet shows how to declare location permissions and hardware feature requirements in the AndroidManifest.xml file. It includes permissions for coarse and fine location access, optional background location access (for Android 10+), and feature declarations for location hardware. This is an alternative to setting these values via assembly attributes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location\" android:required=\"false\" />\n<uses-feature android:name=\"android.hardware.location.gps\" android:required=\"false\" />\n<uses-feature android:name=\"android.hardware.location.network\" android:required=\"false\" />\n<uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView to String in XAML\nDESCRIPTION: Demonstrates setting the EmptyView property of a CarouselView to a string in XAML. This string is displayed when the ItemsSource is null or empty.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding EmptyMonkeys}\"\n              EmptyView=\"No items to display.\" />\n```\n\n----------------------------------------\n\nTITLE: Invoking Platform API with C#\nDESCRIPTION: This code snippet demonstrates how to invoke a cross-platform API after providing platform-specific implementations. An instance of the `DeviceOrientationService` is created, and its `GetOrientation` method is called to retrieve the device orientation. This relies on partial classes and multi-targeting to combine platform-specific implementations at build time. It assumes that `InvokePlatformCodeDemos.Services` and `InvokePlatformCodeDemos.Services.PartialMethods` namespaces are available.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing InvokePlatformCodeDemos.Services;\nusing InvokePlatformCodeDemos.Services.PartialMethods;\n...\n\nDeviceOrientationService deviceOrientationService = new DeviceOrientationService();\nDeviceOrientation orientation = deviceOrientationService.GetOrientation();\n```\n\n----------------------------------------\n\nTITLE: Define PropertyGroup for Mac Catalyst Build (XML)\nDESCRIPTION: This XML snippet defines a PropertyGroup within a .NET MAUI project file. It sets build properties specifically for Release configurations targeting the net8.0-maccatalyst framework and AnyCPU platform. These properties configure code signing, packaging, and runtime settings for ad-hoc distribution of a Mac Catalyst app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-ad-hoc.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-maccatalyst|AnyCPU'\">\n  <MtouchLink>SdkOnly</MtouchLink>\n  <EnableCodeSigning>True</EnableCodeSigning>\n  <CreatePackage>true</CreatePackage>\n  <CodesignKey>Apple Development: John Smith (AY2GDE9QM7)</CodesignKey>\n  <CodesignProvision>MyMauiApp (Ad-hoc)</CodesignProvision>\n  <CodesignEntitlements>Platforms\\MacCatalyst\\Entitlements.plist</CodesignEntitlements>\n  <UseHardenedRuntime>true</UseHardenedRuntime>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Horizontal LinearGradientBrush in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a horizontal LinearGradientBrush in .NET MAUI and set it as the Background of a Border. The gradient interpolates from yellow to green.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/lineargradient.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\">\n    <Border.Background>\n        <!-- StartPoint defaults to (0,0) -->\n        <LinearGradientBrush EndPoint=\"1,0\">\n            <GradientStop Color=\"Yellow\"\n                          Offset=\"0.1\" />\n            <GradientStop Color=\"Green\"\n                          Offset=\"1.0\" />\n        </LinearGradientBrush>\n    </Border.Background>\n</Border>  \n```\n\n----------------------------------------\n\nTITLE: Getting MyPictures path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet demonstrates retrieving the MyPictures path on Mac Catalyst using NSFileManager for macOS compatibility. It avoids Environment.GetFolderPath and utilizes Xamarin.Mac APIs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.PicturesDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Configuring Wireless Accessory Entitlement in XML\nDESCRIPTION: This snippet demonstrates how to configure the Wireless accessory configuration entitlement using XML. The `com.apple.external-accessory.wireless-configuration` key is used and set to `<true/>` to enable the entitlement.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_35\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.external-accessory.wireless-configuration</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Dashed Line in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a dashed diagonal line using the Line shape in .NET MAUI. It sets the X1, Y1, X2, and Y2 properties to define the start and end points, the Stroke property to set the line's color, and the StrokeDashArray and StrokeDashOffset properties to create the dashed effect. StrokeDashArray defines the pattern of dashes and gaps, while StrokeDashOffset specifies the distance into the dash pattern to start.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/line.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Line X1=\"40\"\n      Y1=\"0\"\n      X2=\"0\"\n      Y2=\"120\"\n      Stroke=\"DarkBlue\"\n      StrokeDashArray=\"1,1\"\n      StrokeDashOffset=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Property XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `Keyboard` property of an `Editor` to `Chat`, which is used for texting and places where emoji are useful.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/editor.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Editor Keyboard=\"Chat\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Font Scaling in C# for Entry on iOS\nDESCRIPTION: This C# snippet demonstrates how to enable the `AdjustsFontSizeToFitWidth` property programmatically for an Entry control on iOS. It uses the fluent API and requires the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/entry-font-size.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nentry.On<iOS>().EnableAdjustsFontSizeToFitWidth();\n```\n\n----------------------------------------\n\nTITLE: Implement the Scrolled Event Handler in C#\nDESCRIPTION: This C# snippet demonstrates the implementation of the `OnListViewScrolled` event handler which is triggered when the `Scrolled` event fires.  You would place your custom scrolling logic inside this method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnListViewScrolled(object sender, ScrolledEventArgs e)\n{\n    // Custom logic\n}\n```\n\n----------------------------------------\n\nTITLE: Reset ADB to USB mode\nDESCRIPTION: This command resets the Android Debug Bridge (adb) back to USB mode after debugging over WiFi. This is useful to revert to the default connection method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/device/setup.md#_snippet_2\n\nLANGUAGE: command\nCODE:\n```\nadb usb\n```\n\n----------------------------------------\n\nTITLE: Set TabbedPage Toolbar Placement in XAML (Android)\nDESCRIPTION: This XAML snippet sets the TabbedPage toolbar placement to the bottom of the screen on Android devices. It uses the android namespace and the TabbedPage.ToolbarPlacement attached property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/tabbedpage-toolbar-placement.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TabbedPage ...\n            xmlns:android=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific;assembly=Microsoft.Maui.Controls\"\n            android:TabbedPage.ToolbarPlacement=\"Bottom\">\n    ...\n</TabbedPage>\n```\n\n----------------------------------------\n\nTITLE: Setting SnapPointsAlignment to Start in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the `SnapPointsAlignment` property to `Start` in a `CarouselView`'s `LinearItemsLayout`. When scrolling stops, the leading edge of an item aligns with the leading edge of the view. Requires the `Monkeys` collection to be bound to the `ItemsSource` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_12\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\"\n              PeekAreaInsets=\"100\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Horizontal\"\n                           SnapPointsType=\"MandatorySingle\"\n                           SnapPointsAlignment=\"Start\" />\n    </CarouselView.ItemsLayout>\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Handling Secondary Button Tap Event in C#\nDESCRIPTION: This C# code shows how to handle the Tapped event and determine if the secondary mouse button triggered the event using the Buttons property of the TappedEventArgs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnTapGestureRecognizerTapped(object sender, TappedEventArgs args)\n{\n    // Handle the tap\n    if (args.Buttons == ButtonsMask.Secondary)\n    {\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal VPN Entitlement in XML\nDESCRIPTION: This snippet defines the personal VPN entitlement, enabling the app to use custom VPN connections. The `com.apple.developer.networking.vpn.api` key is an array of strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.networking.vpn.api</key>\n<array>\n  <string>allow-vpn</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: FlyoutFooter Control Definition (XAML)\nDESCRIPTION: This XAML snippet defines the structure and content of a custom FlyoutFooter control, which is used to display information at the bottom of the flyout. It includes labels displaying the application name and the current date, formatted as 'MMMM dd, yyyy'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_15\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentView xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:sys=\"clr-namespace:System;assembly=netstandard\"\n             x:Class=\"Xaminals.Controls.FlyoutFooter\">\n    <StackLayout>\n        <Label Text=\"Xaminals\"\n               TextColor=\"GhostWhite\"\n               FontAttributes=\"Bold\"\n               HorizontalOptions=\"Center\" />\n        <Label x:DataType=\"sys:DateTime\"\n               Text=\"{Binding Source={x:Static sys:DateTime.Now}, StringFormat='{0:MMMM dd, yyyy}'}\"\n               TextColor=\"GhostWhite\"\n               HorizontalOptions=\"Center\" />\n    </StackLayout>\n</ContentView>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyout Width and Height (XAML)\nDESCRIPTION: This XAML snippet shows how to customize the width and height of the flyout by setting the Shell.FlyoutWidth and Shell.FlyoutHeight attached properties to double values in a .NET MAUI Shell application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_17\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutWidth=\"400\"\n       FlyoutHeight=\"200\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Include Raw Assets with MauiAsset Build Action (XML)\nDESCRIPTION: This snippet demonstrates how to include raw assets from the Resources\\Raw directory (and its subdirectories) in a .NET MAUI project using the `MauiAsset` build action. The `LogicalName` attribute specifies how the files will be organized within the deployed application package, maintaining the directory structure.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/viewmodel-shared/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: SearchBar Style in C# - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to programmatically set the SearchBarStyle to 'Minimal' for a SearchBar on iOS. It uses the fluent API and the On<iOS>() method to ensure the style is applied only on iOS. The code requires the Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/searchbar-style.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nSearchBar searchBar = new SearchBar { Placeholder = \"Enter search term\" };\nsearchBar.On<iOS>().SetSearchBarStyle(UISearchBarStyle.Minimal);\n```\n\n----------------------------------------\n\nTITLE: RequireService Attribute Example C# (.NET MAUI 9.0+)\nDESCRIPTION: Demonstrates the use of the `RequireServiceAttribute` to specify the services required by a markup extension in .NET MAUI 9.0 and later. This annotation is needed when the ProvideValue method uses services from the service provider.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[RequireService([typeof(IReferenceProvider), typeof(IProvideValueTarget)])]\npublic class MyMarkupExtension : IMarkupExtension\n{\n    public object ProvideValue(IServiceProvider serviceProvider)\n    {\n        ...\n        var referenceProvider = serviceProvider.GetService<IReferenceProvider>();\n        var valueProvider = serviceProvider.GetService<IProvideValueTarget>() as IProvideParentValues\n                                ?? throw new ArgumentException(\"serviceProvider does not provide an IProvideValueTarget\");\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PanUpdated Event Handler in C#\nDESCRIPTION: This C# snippet shows the basic structure of the OnPanUpdated event handler.  The event handler is invoked when the PanUpdated event is raised by the PanGestureRecognizer.  In a real application, this handler would contain logic to update the UI based on the pan gesture.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pan.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnPanUpdated(object sender, PanUpdatedEventArgs e)\n{\n    // Handle the pan\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Unselected Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell unselected color for an Element to limegreen using the `-maui-shell-unselected` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_84\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-unselected: limegreen;\n```\n\n----------------------------------------\n\nTITLE: Excluding All Files Within a Folder\nDESCRIPTION: This XML snippet shows how to exclude all files within a specific folder from being treated as `AndroidLibrary` items during the build.  This approach prevents unintended binding of JAR files and related compilation errors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<AndroidLibrary Remove=\"AndroidStudio\\**\\*\" />\n```\n\n----------------------------------------\n\nTITLE: Clear Behaviors Collection in .NET MAUI\nDESCRIPTION: This code snippet shows how to clear all behaviors from a .NET MAUI control's Behaviors collection. This removes all attached behaviors from the specified control. Requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nentry.Behaviors.Clear();\n```\n\n----------------------------------------\n\nTITLE: Define EmptyViewTemplate with DataTemplateSelector XAML\nDESCRIPTION: This XAML code snippet defines a DataTemplateSelector and DataTemplates in resources, then binds the CarouselView's EmptyViewTemplate to the DataTemplateSelector. The EmptyView is bound to the SearchBar's Text property, allowing dynamic template selection based on the search term.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:controls=\"clr-namespace:CarouselViewDemos.Controls\"\n             xmlns:viewmodels=\"clr-namespace:CarouselViewDemos.ViewModels\"\n             x:DataType=\"viewmodels:MonkeysViewModel\">\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"AdvancedTemplate\">\n            ...\n        </DataTemplate>\n\n        <DataTemplate x:Key=\"BasicTemplate\">\n            ...\n        </DataTemplate>\n\n        <controls:SearchTermDataTemplateSelector x:Key=\"SearchSelector\"\n                                                 DefaultTemplate=\"{StaticResource AdvancedTemplate}\"\n                                                 OtherTemplate=\"{StaticResource BasicTemplate}\" />\n    </ContentPage.Resources>\n\n    <StackLayout Margin=\"20\">\n        <SearchBar x:Name=\"searchBar\"\n                   SearchCommand=\"{Binding FilterCommand}\"\n                   SearchCommandParameter=\"{Binding x:DataType='SearchBar', Source={RelativeSource Self}, Path=Text}\"\n                   Placeholder=\"Filter\" />\n        <CarouselView ItemsSource=\"{Binding Monkeys}\"\n                      EmptyView=\"{Binding x:DataType='SearchBar', Source={x:Reference searchBar}, Path=Text}\"\n                      EmptyViewTemplate=\"{StaticResource SearchSelector}\">\n            <CarouselView.ItemTemplate>\n                ...\n            </CarouselView.ItemTemplate>\n        </CarouselView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Navigate to modal page for popover - C#\nDESCRIPTION: This code snippet demonstrates how to navigate to a modal page, configured for popover display using `Navigation.PushModalAsync`. This should be used in conjunction with the PopoverPage code shown above.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPage modalPage = new PopoverPage(originButton, Rectangle.Empty);\nawait Navigation.PushModalAsync(modalPage);\n```\n\n----------------------------------------\n\nTITLE: Setting AutomationProperties.ExcludedWithChildren in C# - MAUI\nDESCRIPTION: This C# snippet demonstrates setting the `AutomationProperties.ExcludedWithChildren` property programmatically. This code dynamically excludes a `StackLayout` and its children from the accessibility tree.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nStackLayout stackLayout = new StackLayout();\n...\nAutomationProperties.SetExcludedWithChildren(stackLayout, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Authentication Handler in C#\nDESCRIPTION: This C# class implements the authentication handler for API key authentication. It inherits from `AuthenticationHandler<ApiKeyAuthOptions>` and overrides the `HandleAuthenticateAsync` method to validate the API key. The handler retrieves the API key from either the request headers or the query string and compares it to the configured API key.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.Extensions.Options;\nusing System.Security.Claims;\nusing System.Text.Encodings.Web;\n\nnamespace PushNotificationsAPI.Authentication;\n\npublic class ApiKeyAuthHandler : AuthenticationHandler<ApiKeyAuthOptions>\n{\n    const string ApiKeyIdentifier = \"apikey\";\n\n    public ApiKeyAuthHandler(\n        IOptionsMonitor<ApiKeyAuthOptions> options,\n        ILoggerFactory logger,\n        UrlEncoder encoder)\n        : base(options, logger, encoder)\n    {\n    }\n\n    protected override Task<AuthenticateResult> HandleAuthenticateAsync()\n    {\n        string key = string.Empty;\n\n        if (Request.Headers[ApiKeyIdentifier].Any())\n        {\n            key = Request.Headers[ApiKeyIdentifier].FirstOrDefault();\n        }\n        else if (Request.Query.ContainsKey(ApiKeyIdentifier))\n        {\n            if (Request.Query.TryGetValue(ApiKeyIdentifier, out var queryKey))\n                key = queryKey;\n        }\n\n        if (string.IsNullOrWhiteSpace(key))\n            return Task.FromResult(AuthenticateResult.Fail(\"No api key provided\"));\n\n        if (!string.Equals(key, Options.ApiKey, StringComparison.Ordinal))\n            return Task.FromResult(AuthenticateResult.Fail(\"Invalid api key.\"));\n\n        var identities = new List<ClaimsIdentity>\n        {\n            new ClaimsIdentity(\"ApiKeyIdentity\")\n        };\n\n        var ticket = new AuthenticationTicket(new ClaimsPrincipal(identities), Options.Scheme);\n\n        return Task.FromResult(AuthenticateResult.Success(ticket));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Unpackaged App (Framework-Dependent)\nDESCRIPTION: This command publishes an unpackaged .NET MAUI app for Windows using the dotnet publish command. It specifies the target framework, build configuration, runtime identifier override, and package type. The app will be framework-dependent, meaning it requires the .NET runtime to be installed on the target machine.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-unpackaged-cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64 -p:WindowsPackageType=None\n```\n\n----------------------------------------\n\nTITLE: CarouselView Item Spacing XAML\nDESCRIPTION: This XAML code demonstrates setting the ItemSpacing property on a LinearItemsLayout within a CarouselView.  The ItemSpacing is set to 20, which defines the space between vertically arranged items. A vertical orientation is set to showcase item spacing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<CarouselView ItemsSource=\"{Binding Monkeys}\">\n    <CarouselView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Vertical\"\n                           ItemSpacing=\"20\" />\n    </CarouselView.ItemsLayout>\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Enable NavigationBar Translucency in C# (.NET MAUI iOS)\nDESCRIPTION: This C# code snippet shows how to enable the translucent navigation bar on iOS for a NavigationPage in .NET MAUI using the fluent API. It utilizes the `On<iOS>()` extension method and `EnableTranslucentNavigationBar()` method from the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace. It assumes the app has a single window and casts the root page to NavigationPage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/navigation-bar-translucent.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\n// Assume the app has a single window\n(App.Current.Windows[0].Page as Microsoft.Maui.Controls.NavigationPage).BackgroundColor = Colors.Blue;\n(App.Current.Windows[0].Page as Microsoft.maui.Controls.NavigationPage).On<iOS>().EnableTranslucentNavigationBar();\n```\n\n----------------------------------------\n\nTITLE: Align Items CSS in .NET MAUI\nDESCRIPTION: Specifies the default alignment for items inside a .NET MAUI FlexLayout. Valid values are stretch, center, start, end, flex-start, flex-end, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_12\n\nLANGUAGE: CSS\nCODE:\n```\nalign-items: flex-start;\n```\n\n----------------------------------------\n\nTITLE: Configuring HealthKit Entitlement in XML\nDESCRIPTION: This snippet defines the HealthKit entitlement, enabling access to personal health information with user permission. The `com.apple.developer.healthkit` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.healthkit</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared with You Entitlement in XML\nDESCRIPTION: This snippet defines the shared with you entitlement, enabling an app to claim links shared in Messages. The `com.apple.developer.shared-with-you` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.shared-with-you</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Define Notification Hub Options Model C#\nDESCRIPTION: This code defines the `NotificationHubOptions` class, which encapsulates the configuration options for connecting to Azure Notification Hubs. It includes properties for the hub name and connection string, both of which are marked as required using data annotations. This model is intended to be bound from configuration (e.g., appsettings.json) using the `IOptions` pattern. This class is part of the `PushNotificationsAPI.Models` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace PushNotificationsAPI.Models;\n\npublic class NotificationHubOptions\n{\n    [Required]\n    public string Name { get; set; }\n\n    [Required]\n    public string ConnectionString { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeIdentifiers for .NET for Android\nDESCRIPTION: This code snippet demonstrates how to specify runtime identifiers in a .NET for Android project, replacing the `AndroidSupportedAbis` property used in Xamarin.Android.  It lists the supported architectures.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <!-- Used in .NET for Android projects -->\n  <RuntimeIdentifiers>android-arm;android-arm64;android-x86;android-x64</RuntimeIdentifiers>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Subclassing Entry Control - C#\nDESCRIPTION: This code snippet defines a subclass of the .NET MAUI Entry control named MyEntry. This subclass is used to target specific Entry instances for customization without affecting all Entry controls in the application. This is required when customizing a single entry on a page with multiple entries.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/customize.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CustomizeHandlersDemo.Controls\n{\n    internal class MyEntry : Entry\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reacting to theme changes in C#\nDESCRIPTION: This C# snippet demonstrates how to subscribe to the Application.RequestedThemeChanged event to react to system theme changes. The event handler is executed whenever the system theme changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/system-theme-changes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nApplication.Current.RequestedThemeChanged += (s, a) =>\n{\n    // Respond to the theme change\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Push to Talk Entitlement in XML\nDESCRIPTION: This snippet defines the push to talk entitlement, enabling the app to report Push to Talk channels. The `com.apple.developer.push-to-talk` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.push-to-talk</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Creating an IndicatorView in XAML\nDESCRIPTION: This code snippet demonstrates how to create an IndicatorView in XAML and bind it to a CarouselView.  The IndicatorView is placed below the CarouselView and its IndicatorColor and SelectedIndicatorColor properties are set. Setting the CarouselView's IndicatorView property connects it to the IndicatorView instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"*,Auto\">\n    <CarouselView ItemsSource=\"{Binding Monkeys}\"\n                  IndicatorView=\"indicatorView\">\n        <CarouselView.ItemTemplate>\n            <!-- DataTemplate that defines item appearance -->\n        </CarouselView.ItemTemplate>\n    </CarouselView>\n    <IndicatorView x:Name=\"indicatorView\"\n                   Grid.Row=\"1\"\n                   IndicatorColor=\"LightGray\"\n                   SelectedIndicatorColor=\"DarkGray\"\n                   HorizontalOptions=\"Center\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Update Android Manifest for Minimum SDK Version (XML)\nDESCRIPTION: Demonstrates how to update the Android manifest file to specify the minimum SDK version required by .NET MAUI (API level 21).  The `minSdkVersion` attribute within the `<uses-sdk>` element is set to \"21\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"32\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Margin with Thickness (XAML)\nDESCRIPTION: This XAML snippet demonstrates the use of the Margin property with the Thickness structure to position labels within a StackLayout. It illustrates three different ways to define a Thickness: with a single uniform value, with horizontal and vertical values, and with four distinct values for each side.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/align-position.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout Padding=\"0,20,0,0\">\n  <!-- Margin defined by a single uniform value. -->\n  <Label Text=\".NET MAUI\" Margin=\"20\" />\n  <!-- Margin defined by horizontal and vertical values. -->  \n  <Label Text=\".NET for iOS\" Margin=\"10,15\" />\n  <!-- Margin defined by four distinct values that are applied to the left, top, right, and bottom. -->  \n  <Label Text=\".NET for Android\" Margin=\"0,20,15,5\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Create a new .NET MAUI project\nDESCRIPTION: This command creates a new .NET MAUI project in the current directory using the default .NET MAUI app template. The resulting project is a basic .NET MAUI application that can be built and run on various platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new maui\n```\n\n----------------------------------------\n\nTITLE: Creating an Android emulator on macOS\nDESCRIPTION: This command creates a new Android Virtual Device (AVD) named 'MyAndroidVirtualDevice-API35' using the `avdmanager` tool, based on the specified system image. An AVD allows running an Android emulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n./avdmanager create avd -n MyAndroidVirtualDevice-API35 -k \"system-images;android-35;google_apis;arm64-v8a\"\n```\n\n----------------------------------------\n\nTITLE: Create HSL Color Markup Extension C# (.NET MAUI 9.0+)\nDESCRIPTION: Demonstrates creating a custom markup extension named `HslColorExtension` that implements `IMarkupExtension<Color>`. It allows creating Color values from Hue, Saturation, Luminosity, and Alpha components. Includes the `AcceptEmptyServiceProviderAttribute` for .NET MAUI 9.0 and later.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/create.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[AcceptEmptyServiceProvider]\npublic class HslColorExtension : IMarkupExtension<Color>\n{\n    public float H { get; set; }\n    public float S { get; set; }\n    public float L { get; set; }\n    public float A { get; set; } = 1.0f;\n\n    public Color ProvideValue(IServiceProvider serviceProvider)\n    {\n        return Color.FromHsla(H, S, L, A);\n    }\n\n    object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)\n    {\n        return (this as IMarkupExtension<Color>).ProvideValue(serviceProvider);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Polygon with Nonzero FillRule in XAML\nDESCRIPTION: This XAML example shows a polygon using the Nonzero fill rule. The fill behavior is determined by summing the winding numbers of each contour around a point. If the result is non-zero, the point is considered inside.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polygon.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Polygon Points=\"0 48, 0 144, 96 150, 100 0, 192 0, 192 96, 50 96, 48 192, 150 200 144 48\"\n         Fill=\"Black\"\n         FillRule=\"Nonzero\"\n         Stroke=\"Yellow\"\n         StrokeThickness=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Identifiers for Android Architectures in .NET XML\nDESCRIPTION: This XML snippet demonstrates how to add runtime identifiers (RIDs) to your .NET for Android project file. This allows you to build for specific Android architectures, such as `android-arm`, `android-arm64`, `android-x86`, and `android-x64`. This is useful if you need to support architectures that are no longer built by default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<RuntimeIdentifiers>android-arm;android-arm64;android-x86;android-x64</RuntimeIdentifiers>\n```\n\n----------------------------------------\n\nTITLE: Android ReadContacts Permission (C#)\nDESCRIPTION: This code snippet shows how to add the ReadContacts permission in the Android project using an assembly attribute.  This is required to access contacts on Android.  It's placed in the MainApplication.cs file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/contacts.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.ReadContacts)]\n```\n\n----------------------------------------\n\nTITLE: Popping the Current Page from the Navigation Stack\nDESCRIPTION: This code snippet demonstrates how to programmatically pop the current page from the navigation stack using the PopAsync method. This method removes the topmost page from the stack, revealing the previously visible page. This provides a way to navigate back in the app's navigation hierarchy.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Navigation.PopAsync();\n```\n\n----------------------------------------\n\nTITLE: Define UriVideoSource Class C#\nDESCRIPTION: This defines the `UriVideoSource` class, which derives from `VideoSource`. It includes a `Uri` property (of type string) backed by a `BindableProperty`, allowing it to be used for data binding in .NET MAUI XAML. This class specifies a video source using a URI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class UriVideoSource : VideoSource\n    {\n        public static readonly BindableProperty UriProperty =\n            BindableProperty.Create(nameof(Uri), typeof(string), typeof(UriVideoSource));\n\n        public string Uri\n        {\n            get { return (string)GetValue(UriProperty); }\n            set { SetValue(UriProperty, value); }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing constructor arguments to Color in XAML\nDESCRIPTION: Demonstrates how to use the x:Arguments attribute to pass arguments to different constructors of the Microsoft.Maui.Graphics.Color class, specifying grayscale, RGB, and RGBA values. It shows how the number and types of the elements within x:Arguments should match the constructor signature.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/pass-arguments.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n    <BoxView.Color>\n        <Color>\n            <x:Arguments>\n                <x:Single>0.9</x:Single>\n            </x:Arguments>\n        </Color>\n    </BoxView.Color>\n</BoxView>\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n    <BoxView.Color>\n        <Color>\n            <x:Arguments>\n                <x:Single>0.25</x:Single>\n                <x:Single>0.5</x:Single>\n                <x:Single>0.75</x:Single>\n            </x:Arguments>\n        </Color>\n    </BoxView.Color>\n</BoxView>\n<BoxView HeightRequest=\"150\"\n         WidthRequest=\"150\"\n         HorizontalOptions=\"Center\">\n    <BoxView.Color>\n        <Color>\n            <x:Arguments>\n                <x:Single>0.8</x:Single>\n                <x:Single>0.5</x:Single>\n                <x:Single>0.2</x:Single>\n                <x:Single>0.5</x:Single>\n            </x:Arguments>\n        </Color>\n    </BoxView.Color>\n</BoxView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Gradient Brush in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a diagonal LinearGradientBrush with four color stops.  It defines the StartPoint and EndPoint for the gradient and specifies the color and offset for each GradientStop.  The offsets determine the position of each color along the gradient axis, with values ranging from 0.0 to 1.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/gradient.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<LinearGradientBrush StartPoint=\"0,0\"\n                     EndPoint=\"1,1\">\n    <GradientStop Color=\"Yellow\"\n                  Offset=\"0.0\" />\n    <GradientStop Color=\"Red\"\n                  Offset=\"0.25\" />\n    <GradientStop Color=\"Blue\"\n                  Offset=\"0.75\" />             \n    <GradientStop Color=\"LimeGreen\"\n                  Offset=\"1.0\" />\n</LinearGradientBrush>\n```\n\n----------------------------------------\n\nTITLE: Customizing TitleBar with Content - .NET MAUI XAML\nDESCRIPTION: This code snippet shows how to customize a TitleBar's appearance further using XAML, including setting BackgroundColor, Height, and adding TrailingContent. It also demonstrates how to use a FontImageSource within an ImageButton for the TrailingContent.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<TitleBar Title=\"My App\"\n          BackgroundColor=\"#512BD4\"\n          HeightRequest=\"48\">\n    <TitleBar.Content>\n        <SearchBar Placeholder=\"Search\"\n                   MaximumWidthRequest=\"300\"\n                   HorizontalOptions=\"Fill\"\n                   VerticalOptions=\"Center\" />\n    </TitleBar.Content>\n    <TitleBar.TrailingContent>\n        <ImageButton HeightRequest=\"36\"\n                     WidthRequest=\"36\"\n                     BorderWidth=\"0\"\n                     Background=\"Transparent\">\n            <ImageButton.Source>\n                <FontImageSource Size=\"16\"\n                                 Glyph=\"&#xE713;\"\n                                 FontFamily=\"SegoeMDL2\"/>\n            </ImageButton.Source>\n        </ImageButton>\n    </TitleBar.TrailingContent>\n</TitleBar>\n```\n\n----------------------------------------\n\nTITLE: Drawing an Image in .NET MAUI Graphics\nDESCRIPTION: This code snippet demonstrates how to load an image from an assembly resource and draw it on the canvas. It retrieves the image as a stream, converts it to an IImage, and then uses the DrawImage method to draw the image at a specified position and size.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing IImage = Microsoft.Maui.Graphics.IImage;\nusing Microsoft.Maui.Graphics.Platform;\n\nIImage image;\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nusing (Stream stream = assembly.GetManifestResourceStream(\"GraphicsViewDemos.Resources.Images.dotnet_bot.png\"))\n{\n    image = PlatformImage.FromStream(stream);\n}\n\nif (image != null)\n{\n    canvas.DrawImage(image, 10, 10, image.Width, image.Height);\n}\n```\n\n----------------------------------------\n\nTITLE: Use Haptic Feedback with Click and LongPress (C#)\nDESCRIPTION: This C# code snippet shows how to use the `IHapticFeedback` interface to trigger a `Click` or `LongPress` haptic feedback response based on user interaction with a `Button`. It demonstrates how to access the default implementation and call the `Perform` method with appropriate haptic feedback types.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/haptic-feedback.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nHapticFeedback.Default.Perform(HapticFeedbackType.Click);\n\n// Or\n\nHapticFeedback.Default.Perform(HapticFeedbackType.LongPress);\n```\n\n----------------------------------------\n\nTITLE: Configuring Siri Entitlement in XML\nDESCRIPTION: This snippet defines the Siri entitlement, enabling the app to handle Siri requests. The `com.apple.developer.siri` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.siri</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Using IntToBoolConverter in XAML\nDESCRIPTION: This XAML example demonstrates how to use the `IntToBoolConverter` in a data binding to enable or disable buttons based on the length of text entered in an entry field. The converter is defined as a resource and then referenced in the `IsEnabled` property binding of the buttons.  The source is the length of the Text property of the entry field.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/converters.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             x:Class=\"DataBindingDemos.EnableButtonsPage\"\n             Title=\"Enable Buttons\">\n    <ContentPage.Resources>\n        <local:IntToBoolConverter x:Key=\"intToBool\" />\n    </ContentPage.Resources>\n\n    <StackLayout Padding=\"10, 0\">\n        <Entry x:Name=\"entry1\"\n               Text=\"\"\n               Placeholder=\"enter search term\"\n               VerticalOptions=\"Center\" />\n        <Button x:DataType=\"Entry\"\n                Text=\"Search\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                IsEnabled=\"{Binding Source={x:Reference entry1},\n                                    Path=Text.Length,\n                                    Converter={StaticResource intToBool}}\" />\n        <Entry x:Name=\"entry2\"\n               Text=\"\"\n               Placeholder=\"enter destination\"\n               VerticalOptions=\"Center\" />\n        <Button x:DataType=\"Entry\"\n                Text=\"Submit\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                IsEnabled=\"{Binding Source={x:Reference entry2},\n                                    Path=Text.Length,\n                                    Converter={StaticResource intToBool}}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Window Lifecycle Events in App Class (net-maui-8.0)\nDESCRIPTION: This code snippet demonstrates how to subscribe to the `Created` lifecycle event of a `Window` in the `App` class by overriding the `CreateWindow` method. It creates a new `Window` instance, subscribes to the `Created` event, and returns the window.  This enables custom logic to be executed when the window is created.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/app-lifecycle.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n\n            MainPage = new MainPage();\n        }\n\n        protected override Window CreateWindow(IActivationState? activationState)\n        {\n            Window window = new Window(new AppShell());\n\n            window.Created += (s, e) =>\n            {\n                // Custom logic\n            };\n\n            return window;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Binding with Binding.Create in .NET MAUI (C#)\nDESCRIPTION: Demonstrates using the Binding.Create method to set a binding directly on an object with a Func argument. This example creates a MultiBinding that binds the FontFamily, FontSize, and FontAttributes properties of an Entry, concatenating them using a custom converter.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/compiled-bindings.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nmyEntry.SetBinding(Entry.TextProperty, new MultiBinding\n{\n    Bindings = new Collection<BindingBase>\n    {\n        Binding.Create(static (Entry entry) => entry.FontFamily, source: RelativeBindingSource.Self),\n        Binding.Create(static (Entry entry) => entry.FontSize, source: RelativeBindingSource.Self),\n        Binding.Create(static (Entry entry) => entry.FontAttributes, source: RelativeBindingSource.Self),\n    },\n    Converter = new StringConcatenationConverter()\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Target Frameworks in .csproj - .NET 8\nDESCRIPTION: This XML snippet illustrates the TargetFrameworks section of a .csproj file for a .NET 8 project. It defines target frameworks for Android, iOS, MacCatalyst, Tizen, and Windows.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_25\n\nLANGUAGE: XML\nCODE:\n```\n<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst;net8.0-tizen</TargetFrameworks>\n<TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Setting IsInAccessibleTree Property in C#\nDESCRIPTION: This code snippet demonstrates how to set the `IsInAccessibleTree` attached property to `true` for an `Entry` control in C#. Setting this property to `true` makes the element visible to screen readers. The `AutomationProperties.SetIsInAccessibleTree` method is used to set the property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nEntry entry = new Entry();\nAutomationProperties.SetIsInAccessibleTree(entry, true);\n```\n\n----------------------------------------\n\nTITLE: Adding .NET MAUI NuGet Package References to .csproj\nDESCRIPTION: This XML snippet demonstrates how to add explicit package references for Microsoft.Maui.Controls and Microsoft.Maui.Controls.Compatibility NuGet packages to a .NET MAUI .csproj file.  The `$(MauiVersion)` variable is used to specify the version of the packages.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-8.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n    <PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"$(MauiVersion)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Specifying Artifact Filename for AndroidMavenLibrary\nDESCRIPTION: This XML snippet shows how to add the `ArtifactFilename` metadata to the `@(AndroidMavenLibrary)` MSBuild item in a .NET for Android project. This allows specifying an alternative filename for a Java library that is automatically downloaded from Maven.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-10.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <AndroidMavenLibrary Include=\"com.facebook.react:react-android\" Version=\"0.76.0\" ArtifactFilename=\"react-android-0.76.0-release.aar\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Check if Invocation is Required - .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to check if the current code is running on the main thread using the IsMainThread property before calling BeginInvokeOnMainThread.  It conditionally executes code directly or invokes it on the main thread depending on the current thread.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/appmodel/main-thread.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (MainThread.IsMainThread)\n    MyMainThreadCode();\nelse\n    MainThread.BeginInvokeOnMainThread(MyMainThreadCode);\n\nvoid MyMainThreadCode()\n{\n    myLabel.Text = \"Hello from the main thread!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Scroll Bar Visibility with CSS in .NET MAUI\nDESCRIPTION: This CSS snippet sets the horizontal scroll bar visibility of a ScrollView to never using the `-maui-horizontal-scroll-bar-visibility` property.  Possible values are `default`, `always`, `never`, or `initial`. It's a .NET MAUI-specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_61\n\nLANGUAGE: css\nCODE:\n```\n-maui-horizontal-scroll-bar-visibility: never;\n```\n\n----------------------------------------\n\nTITLE: Disable Code Signature Verification for .NET MAUI Mac Catalyst\nDESCRIPTION: This XML snippet disables code signature verification in a .NET MAUI Mac Catalyst project to resolve a `codesign` error during publishing for distribution outside the Mac App Store. It adds a target that skips the `_CodesignVerify` target by setting `_RequireCodeSigning` to false.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  ...\n  <Target Name=\"_SkipCodesignVerify\" BeforeTargets=\"_CodesignVerify\" AfterTargets=\"_CodesignAppBundle\">  \n    <PropertyGroup>    \n      <_RequireCodeSigning>false</_RequireCodeSigning>  \n    </PropertyGroup>\n  </Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Adding Privacy Manifest XML Content\nDESCRIPTION: This code snippet shows the basic XML content that should be added to the PrivacyInfo.xcprivacy file. It defines the structure of the privacy manifest, which will be populated with information about data usage and API reasons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/privacy-manifest.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict/>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Remove a Preference by Key in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to remove a preference by its key using the Preferences.Remove method in .NET MAUI. It takes a string key as input and removes the corresponding preference from the store. No external dependencies beyond the .NET MAUI framework. If the key doesn't exist, the method has no effect.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/storage/preferences.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPreferences.Remove(\"my_key\");\n```\n\n----------------------------------------\n\nTITLE: Explicitly setting ContentPage.Content using a property element in XAML\nDESCRIPTION: This example demonstrates explicitly setting the Content property of a ContentPage in .NET MAUI using property element syntax. While the Content property is often implicitly set, this shows the explicit way to define it, providing clarity and structure in the XAML.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/essential-syntax.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.XamlPlusCodePage\"\n             Title=\"XAML + Code Page\">\n    <ContentPage.Content>\n        <Grid>\n            ...\n        </Grid>\n    </ContentPage.Content>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: CollectionView Header and Footer as Strings in C#\nDESCRIPTION: Creates a CollectionView in C# with simple string headers and footers. The `Header` and `Footer` properties are set to string values. The CollectionView's `ItemsSourceProperty` is bound to a `Monkeys` property of a `MonkeysViewModel` instance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    Header = \"Monkeys\",\n    Footer = \"2019\"\n};\ncollectionView.SetBinding(ItemsView.ItemsSourceProperty,  static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: Handling Permission Requests in Android (C#)\nDESCRIPTION: This code snippet demonstrates how to handle runtime permission requests in an Android `Activity`.  It overrides the `OnRequestPermissionsResult` method and calls `Platform.OnRequestPermissionsResult` to pass the results for internal permission handling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/native-essentials.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, Permission[] grantResults)\n{\n    Platform.OnRequestPermissionsResult(requestCode, permissions, grantResults);\n    base.OnRequestPermissionsResult(requestCode, permissions, grantResults);\n}\n```\n\n----------------------------------------\n\nTITLE: Set Windows Package Type to None in .csproj\nDESCRIPTION: This XML snippet demonstrates how to set the `WindowsPackageType` build property to `None` in the .NET MAUI application's project file (*.csproj). This change indicates that the application should be built as an unpackaged application. No specific dependencies are required beyond having a .NET MAUI project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/includes/convert-packaged-to-unpackaged.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <WindowsPackageType>None</WindowsPackageType>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Avoid Wasteful Layouts XAML\nDESCRIPTION: This example shows a wasteful layout where a VerticalStackLayout contains only one child Image. The VerticalStackLayout element should be removed to improve performance.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <VerticalStackLayout>\n        <Image Source=\"waterfront.jpg\" />\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating a BezierSegment in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a BezierSegment to define a cubic Bezier curve within a Path object in .NET MAUI. The BezierSegment is defined by two control points (Point1 and Point2) and an end point (Point3). It requires .NET MAUI to be correctly configured in the project.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,10\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <BezierSegment Point1=\"100,0\"\n                                               Point2=\"200,200\"\n                                               Point3=\"300,10\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Visible Indicators\nDESCRIPTION: This snippet shows how to limit the number of visible indicators using the MaximumVisible property. The example sets the MaximumVisible to 6, so only six indicators will be displayed at a time.  If there are more than 6 items, the indicators will represent ranges.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/indicatorview.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<IndicatorView x:Name=\"indicatorView\"\n               MaximumVisible=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: NotePage Filename Variable Declaration (C#)\nDESCRIPTION: This C# code declares a private string variable `_fileName` within the `NotePage` class. This variable stores the full path to the file where the note is saved, constructed using the app's local data directory and a filename 'notes.txt'. The file name is _notes.txt_.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/note.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string _fileName = Path.Combine(FileSystem.AppDataDirectory, \"notes.txt\");\n```\n\n----------------------------------------\n\nTITLE: Margin Top CSS in .NET MAUI\nDESCRIPTION: Sets the top margin for a .NET MAUI View. The value should be a thickness or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_36\n\nLANGUAGE: CSS\nCODE:\n```\nmargin-top: 2;\n```\n\n----------------------------------------\n\nTITLE: Drawing a Dashed Rectangle Shape with XAML\nDESCRIPTION: This snippet shows how to draw a dashed rectangle using XAML. It sets the StrokeDashArray and StrokeDashOffset properties to define the pattern of dashes and gaps in the rectangle's outline. The StrokeDashArray defines the length of dashes and gaps, while StrokeDashOffset specifies where the dash pattern begins.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/index.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Rectangle Fill=\"DarkBlue\"\n           Stroke=\"Red\"\n           StrokeThickness=\"4\"\n           StrokeDashArray=\"1,1\"\n           StrokeDashOffset=\"6\"\n           WidthRequest=\"150\"\n           HeightRequest=\"50\"\n           HorizontalOptions=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Data Binding RadioButtonGroup.SelectedValue XAML\nDESCRIPTION: This XAML example showcases how to use data binding with the `RadioButtonGroup.SelectedValue` attached property. The `SelectedValue` of the RadioButtonGroup is bound to the `Selection` property of the ViewModel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:RadioButtonDemos\"\n             x:DataType=\"local:AnimalViewModel\">\n    <StackLayout Margin=\"10\"\n                 RadioButtonGroup.GroupName=\"{Binding GroupName}\"\n                 RadioButtonGroup.SelectedValue=\"{Binding Selection}\">\n        <Label Text=\"What's your favorite animal?\" />\n        <RadioButton Content=\"Cat\"\n                     Value=\"Cat\" />\n        <RadioButton Content=\"Dog\"\n                     Value=\"Dog\" />\n        <RadioButton Content=\"Elephant\"\n                     Value=\"Elephant\" />\n        <RadioButton Content=\"Monkey\"\n                     Value=\"Monkey\"/>\n        <Label x:Name=\"animalLabel\">\n            <Label.FormattedText>\n                <FormattedString>\n                    <Span Text=\"You have chosen:\" />\n                    <Span Text=\"{Binding Selection}\" />\n                </FormattedString>\n            </Label.FormattedText>\n        </Label>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting TimePicker Time in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the initial time of a TimePicker control to 4:15:26.  The `Time` property expects a value that can be converted to a `TimeSpan`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/timepicker.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<TimePicker Time=\"4:15:26\" />\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting for Android\nDESCRIPTION: This XML snippet configures the build system to exclude Android-specific C# files (those ending with .Android.cs) when not building for Android. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Android -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-android')) != true\">\n  <Compile Remove=\"**\\*.Android.cs\" />\n  <None Include=\"**\\*.Android.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Application Attribute C#\nDESCRIPTION: This example demonstrates how to use the `ApplicationAttribute` to declare properties for the entire application. These properties can be overridden on an activity basis.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\nusing Android.Runtime;\n\nnamespace MyMauiApp;\n\n[Application(Label = \"My Maui App\", Theme = \"@style/Maui.SplashTheme\")]\npublic class MainApplication : MauiApplication\n{\n      public MainApplication(IntPtr handle, JniHandleOwnership ownership)\n             : base(handle, ownership)\n      {\n      }\n\n      protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Extensions Entitlement in XML\nDESCRIPTION: This snippet defines the network extensions entitlement, enabling the creation of app extensions to customize network capabilities. The `com.apple.developer.networking.networkextension` key is an array of strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.networking.networkextension</key>\n<array>\n  <string>content-filter-provider</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Directory in C# for .NET MAUI Windows\nDESCRIPTION: This C# code snippet shows how to set the default image directory for a .NET MAUI application on Windows using the fluent API. It utilizes the `Application.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>()` method to specify that the configuration applies only to Windows. The `SetImageDirectory` method then sets the directory where image assets are located. The `Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific` namespace must be included.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/default-image-directory.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\nApplication.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetImageDirectory(\"Assets\");\n```\n\n----------------------------------------\n\nTITLE: Enable XAML Compiled Binding XML\nDESCRIPTION: This XML snippet adds a property to the project file that enables compiled bindings in XAML expressions that specify the `Source` property. This is necessary for the `SelectionChangedCommandParameter` to compile correctly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-notes.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <MauiEnableXamlCBindingWithSourceCompilation>true</MauiEnableXamlCBindingWithSourceCompilation>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Toggling Font Scaling in C# for Entry on iOS\nDESCRIPTION: This C# snippet shows how to toggle the `AdjustsFontSizeToFitWidth` property of an Entry control on iOS. It uses the fluent API to invert the current value of the property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/entry-font-size.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nentry.On<iOS>().SetAdjustsFontSizeToFitWidth(!entry.On<iOS>().AdjustsFontSizeToFitWidth());\n```\n\n----------------------------------------\n\nTITLE: Disabling splash screen packaging in .NET MAUI\nDESCRIPTION: This XML snippet shows how to disable splash screen resource generation in a .NET MAUI project. By setting the `EnableSplashScreenProcessing` property to `false` within the first `PropertyGroup` node of the project file, splash screen resources won't be processed during the build.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<EnableSplashScreenProcessing>false</EnableSplashScreenProcessing>\n```\n\n----------------------------------------\n\nTITLE: XML Descriptor Format Example (XML)\nDESCRIPTION: This XML snippet demonstrates the structure of a trimmer descriptor file. It specifies that the 'DynamicallyAccessedMethod' method within the 'MyClass' type in the 'MyAssembly' assembly should be preserved during trimming.  This prevents the trimmer from removing the specified method, ensuring it's available at runtime.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<linker>\n  <assembly fullname=\"MyAssembly\">\n    <type fullname=\"MyAssembly.MyClass\">\n      <method name=\"DynamicallyAccessedMethod\" />\n    </type>\n  </assembly>\n</linker>\n```\n\n----------------------------------------\n\nTITLE: Specify Neutral Language in Project File - XML\nDESCRIPTION: This code snippet demonstrates how to specify the neutral language of the application in the project file. The neutral language is used as a fallback when resources for a specific locale are not found.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<NeutralLanguage>en-US</NeutralLanguage>\n```\n\n----------------------------------------\n\nTITLE: Setting StrokeLineCap to Round in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the StrokeLineCap property of a Line shape to Round, resulting in rounded line ends. The line's start point is (0, 20), end point is (300, 20), color is Red, and thickness is 12.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/index.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Line X1=\"0\"\n      Y1=\"20\"\n      X2=\"300\"\n      Y2=\"20\"\n      StrokeLineCap=\"Round\"\n      Stroke=\"Red\"\n      StrokeThickness=\"12\" />\n```\n\n----------------------------------------\n\nTITLE: Scroll a Grouped Item into View in C#\nDESCRIPTION: This C# code snippet demonstrates how to scroll a specific item (named 'Proboscis Monkey') within a specific group ('Monkeys') into view within a ListView using the `ScrollTo` method's overload that accepts a group and an item. Requires a GroupedAnimalsViewModel, AnimalGroup, and Animal model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nGroupedAnimalsViewModel viewModel = BindingContext as GroupedAnimalsViewModel;\nAnimalGroup group = viewModel.Animals.FirstOrDefault(a => a.Name == \"Monkeys\");\nAnimal monkey = group.FirstOrDefault(m => m.Name == \"Proboscis Monkey\");\nlistView.ScrollTo(monkey, group, ScrollToPosition.MakeVisible, true);\n```\n\n----------------------------------------\n\nTITLE: Setting LineHeight in XAML\nDESCRIPTION: This snippet demonstrates setting the line height for a Label using the LineHeight property in XAML. It is often used with LineBreakMode to wrap the text properly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In facilisis nulla eu felis fringilla vulputate. Nullam porta eleifend lacinia. Donec at iaculis tellus.\"\n       LineBreakMode=\"WordWrap\"\n       LineHeight=\"1.8\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a HorizontalStackLayout in XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a HorizontalStackLayout containing a Rectangle and a Label. It showcases how to arrange views in a horizontal stack with specified margin.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/index.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<HorizontalStackLayout Margin=\"20\">\n   <Rectangle Fill=\"Red\"\n              HeightRequest=\"30\"\n              WidthRequest=\"30\" />\n   <Label Text=\"Red\"\n          FontSize=\"18\" />\n</HorizontalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Defining VideoStatus Enum in C#\nDESCRIPTION: This code snippet defines an enum called `VideoStatus` with three possible values: `NotReady`, `Playing`, and `Paused`. This enum is used to represent the current state of the video player.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic enum VideoStatus\n{\n    NotReady,\n    Playing,\n    Paused\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the FlyoutMenuPage\nDESCRIPTION: This XAML defines the content of the Flyout menu. It contains a CollectionView populated with FlyoutPageItem objects. Each item in the CollectionView is rendered using a DataTemplate with an Image and a Label. The ContentPage serves as the flyout menu.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/flyoutpage.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:FlyoutPageNavigation\"\n             x:Class=\"FlyoutPageNavigation.FlyoutMenuPage\"\n             Padding=\"0,40,0,0\"\n             IconImageSource=\"hamburger.png\"\n             Title=\"Personal Organiser\">\n    <CollectionView x:Name=\"collectionView\"\n                    x:FieldModifier=\"public\"\n                    SelectionMode=\"Single\">\n        <CollectionView.ItemsSource>\n            <x:Array Type=\"{x:Type local:FlyoutPageItem}\">\n                <local:FlyoutPageItem Title=\"Contacts\"\n                                      IconSource=\"contacts.png\"\n                                      TargetType=\"{x:Type local:ContactsPage}\" />\n                <local:FlyoutPageItem Title=\"TodoList\"\n                                      IconSource=\"todo.png\"\n                                      TargetType=\"{x:Type local:TodoListPage}\" />\n                <local:FlyoutPageItem Title=\"Reminders\"\n                                      IconSource=\"reminders.png\"\n                                      TargetType=\"{x:Type local:ReminderPage}\" />\n            </x:Array>\n        </CollectionView.ItemsSource>\n        <CollectionView.ItemTemplate>\n            <DataTemplate x:DataType=\"local:FlyoutPageItem\">\n                <Grid Padding=\"5,10\">\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"30\"/>\n                        <ColumnDefinition Width=\"*\" />\n                    </Grid.ColumnDefinitions>\n                    <Image Source=\"{Binding IconSource}\" />\n                    <Label Grid.Column=\"1\"\n                           Margin=\"20,0\"\n                           Text=\"{Binding Title}\"\n                           FontSize=\"20\"\n                           FontAttributes=\"Bold\"\n                           VerticalOptions=\"Center\" />\n                </Grid>\n            </DataTemplate>\n        </CollectionView.ItemTemplate>\n    </CollectionView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Page in .NET MAUI AppShell\nDESCRIPTION: This XAML snippet modifies the AppShell.xaml file to change the initial page loaded by the application. It updates the first ShellContent entry to point to the AllNotesPage instead of the NotePage, making the AllNotesPage the starting point of the application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/includes/allnotes.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ShellContent\n        Title=\"Notes\"\n        ContentTemplate=\"{DataTemplate views:AllNotesPage}\"\n        Route=\"AllNotesPage\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Views for Dependency Injection - C#\nDESCRIPTION: This extension method registers the `MainPage` type as a singleton with the dependency injection container.  This is necessary when the `MainPage` requires a dependency.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\npublic static MauiAppBuilder RegisterViews(this MauiAppBuilder builder)\n    {\n        builder.Services.AddSingleton<MainPage>();\n        return builder;\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling DetectReadingOrderFromContent in C#\nDESCRIPTION: This C# code snippet shows how to enable the `DetectReadingOrderFromContent` property for an Editor control using the fluent API. The `On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>()` method ensures that this configuration is applied only on Windows.  The `SetDetectReadingOrderFromContent(true)` method sets the property to enable dynamic reading order detection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/inputview-reading-order.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\n\neditor.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetDetectReadingOrderFromContent(true);\n```\n\n----------------------------------------\n\nTITLE: TapGestureRecognizer Tapped Event Handler in C#\nDESCRIPTION: This C# code defines an event handler for the Tapped event of the TapGestureRecognizer.  It's a placeholder for handling tap actions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnTapGestureRecognizerTapped(object sender, TappedEventArgs args)\n{\n    // Handle the tap\n}\n```\n\n----------------------------------------\n\nTITLE: xcsync generate command\nDESCRIPTION: This command generates an Xcode project from a .NET project. It allows specifying the project file, target framework moniker, target Xcode directory, and other options like force overwrite, opening the project in Xcode, and verbosity level.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync generate [-p|--project <PROJECT>]\n[-tfm|--target-framework-moniker <FRAMEWORK>]\n[-t|--target <TARGET_XCODE_DIRECTORY>] [-f|--force]\n[-o|--open] [-v|--verbosity <LEVEL>]\n[-d|--dotnet-path <PATH>]\n```\n\n----------------------------------------\n\nTITLE: Adding New Lines in XAML using Unicode\nDESCRIPTION: This snippet shows how to add a new line to a Label in XAML by using the unicode line feed character.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"First line &#10; Second line\" />\n```\n\n----------------------------------------\n\nTITLE: Attach lldb to Device Process\nDESCRIPTION: These commands open lldb, select the device, and attach to the running process. This setup is required before starting a debugging session on a Native AOT .NET MAUI iOS application. It requires the device identifier and application name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/nativeaot.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(lldb) device select <device-identifier>\n(lldb) device process attach -n <app-name>\n```\n\n----------------------------------------\n\nTITLE: Property Trigger Example XAML\nDESCRIPTION: This example demonstrates a Property Trigger that changes the background color of an Entry when it receives focus. The trigger monitors the IsFocused property of the Entry and sets the BackgroundColor to Yellow when IsFocused is True.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry Placeholder=\"Enter name\">\n    <Entry.Triggers>\n        <Trigger TargetType=\"Entry\"\n                 Property=\"IsFocused\"\n                 Value=\"True\">\n            <Setter Property=\"BackgroundColor\"\n                    Value=\"Yellow\" />\n            <!-- Multiple Setter elements are allowed -->\n        </Trigger>\n    </Entry.Triggers>\n</Entry>\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush from Predefined Color (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to create a SolidColorBrush by directly assigning a predefined Color value (DarkBlue) to the Background property of a Border. The Border's background will be painted with the specified color. This approach utilizes the implicit type conversion from Color to SolidColorBrush.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/solidcolor.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Border Background=\"DarkBlue\"\n        Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\" />\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush from Hexadecimal Notation (XAML)\nDESCRIPTION: This XAML snippet demonstrates creating a SolidColorBrush by specifying its color using hexadecimal notation (#FF9988). The Border's background is set to a salmon-colored SolidColorBrush.  Hexadecimal notation allows precise color specification using red, green, and blue components.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/solidcolor.md#_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Border Background=\"#FF9988\"\n        Stroke=\"LightGray\"\n        StrokeShape=\"RoundRectangle 12\"\n        HeightRequest=\"120\"\n        WidthRequest=\"120\" />       \n```\n\n----------------------------------------\n\nTITLE: Property Trigger in Style XAML\nDESCRIPTION: This example shows how to add a trigger to a Style declaration for an Entry control.  It defines an implicit style that will apply to all Entry controls on the page. When the Entry receives focus, its background color changes to yellow.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/triggers.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage.Resources>\n    <Style TargetType=\"Entry\">\n        <Style.Triggers>\n            <Trigger TargetType=\"Entry\"\n                     Property=\"IsFocused\"\n                     Value=\"True\">\n                <Setter Property=\"BackgroundColor\"\n                        Value=\"Yellow\" />\n                <!-- Multiple Setter elements are allowed -->\n            </Trigger>\n        </Style.Triggers>\n    </Style>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Setting ListView SelectionMode in C#\nDESCRIPTION: This C# snippet demonstrates how to set the ListView selection mode to \"Inaccessible\" using the fluent API and the Windows platform-specific extension methods. This configures the ListView to respond to tap gestures, disabling accessibility features. It requires the Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/listview-selectionmode.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;\n...\n\nlistView.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetSelectionMode(ListViewSelectionMode.Inaccessible);\n```\n\n----------------------------------------\n\nTITLE: Getting MyVideos path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet shows how to retrieve the MyVideos path on Mac Catalyst using NSFileManager for macOS compatibility. It avoids the default Environment.GetFolderPath behavior and uses Xamarin.Mac APIs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.MoviesDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Text Align CSS in .NET MAUI\nDESCRIPTION: Sets the text alignment for .NET MAUI Entry, EntryCell, Label, and SearchBar. Valid values are left, top, right, bottom, start, center, middle, end, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_51\n\nLANGUAGE: CSS\nCODE:\n```\ntext-align: right;\n```\n\n----------------------------------------\n\nTITLE: Setting Video Duration on Android in C#\nDESCRIPTION: This code snippet shows how to obtain the duration of a video on Android using the `VideoView.Duration` property after the `VideoView.Prepared` event has been raised. The `MauiVideoPlayer` class uses the `Prepared` event handler to set the duration on the .NET MAUI `Video` control via the `IVideoController` interface.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Content;\nusing Android.Views;\nusing Android.Widget;\nusing AndroidX.CoordinatorLayout.Widget;\nusing VideoDemos.Controls;\nusing Color = Android.Graphics.Color;\nusing Uri = Android.Net.Uri;\n\nnamespace VideoDemos.Platforms.Android\n{\n    public class MauiVideoPlayer : CoordinatorLayout\n    {\n        VideoView _videoView;\n        Video _video;\n        ...\n\n        void OnVideoViewPrepared(object sender, EventArgs args)\n        {\n            ...\n            ((IVideoController)_video).Duration = TimeSpan.FromMilliseconds(_videoView.Duration);\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in iOS MainViewController - C#\nDESCRIPTION: This code initializes .NET MAUI in the `ViewDidLoad` method of a `MainViewController` in iOS. It creates a MAUI embedded window context using `CreateEmbeddedWindowContext`. Requires the `Microsoft.Maui.Controls.Embedding` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.Embedding;\n\nnamespace MyNativeEmbeddedApp.iOS;\n\npublic class MainViewController : UIViewController\n{\n    UIKit.UIWindow? _window;\n    IMauiContext? _windowContext;\n\n    public IMauiContext WindowContext =>\n        _windowContext ??= MyEmbeddedMauiApp.Shared.CreateEmbeddedWindowContext(_window ?? throw new InvalidOperationException());\n\n    public override void ViewDidLoad()\n    {\n        base.ViewDidLoad();\n\n        _window ??= ParentViewController!.View!.Window;\n\n        // Create MAUI embedded window context\n        var context = WindowContext;\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Send and Receive Raw Messages with HybridWebView (MAUI)\nDESCRIPTION: This C# code snippet demonstrates how to send raw messages from C# to JavaScript using `SendRawMessage` and how to handle received raw messages using the `RawMessageReceived` event.  It shows using an alert to display the received message.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n    private void OnSendMessageButtonClicked(object sender, EventArgs e)\n    {\n        hybridWebView.SendRawMessage($\"Hello from C#!{(!string.IsNullOrEmpty(DateTime.Now.ToString()) ? \" \" + DateTime.Now.ToString() : string.Empty)}\");\n    }\n\n    private async void OnHybridWebViewRawMessageReceived(object sender, HybridWebViewRawMessageReceivedEventArgs e)\n    {\n        await DisplayAlert(\"Raw Message Received\", e.Message, \"OK\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Overriding OnRemovePage Method in MAUI Tab\nDESCRIPTION: This snippet demonstrates how to override the `OnRemovePage` method in a custom `Tab` class in MAUI. This allows executing custom logic when a page is removed from the tab's navigation stack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTab : Tab\n{\n    protected override void OnRemovePage(Page page)\n    {\n        base.OnRemovePage(page);\n\n        // Custom logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Entitlements.plist File in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to create a basic Entitlements.plist file for a .NET MAUI Mac Catalyst application. This file is used to declare the entitlements that the app requires to access system resources or user data. The file should be added to the Platforms/MacCatalyst folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/entitlements.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Subclass Layout for Custom Layout - C#\nDESCRIPTION: This code demonstrates how to subclass an existing layout type (HorizontalStackLayout) to create a custom layout. It overrides the CreateLayoutManager method to return a custom layout manager (HorizontalWrapLayoutManager) for the layout.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Layouts;\n\npublic class HorizontalWrapLayout : HorizontalStackLayout\n{\n    protected override ILayoutManager CreateLayoutManager()\n    {\n        return new HorizontalWrapLayoutManager(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C# Legacy Static Interface Member Implementation\nDESCRIPTION: This C# code showcases the traditional approach to implementing static members for interfaces before C# 8. Static members are moved to a sibling class to achieve similar functionality.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo { }\n\npublic class Foo\n{\n    public static void Bar () { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRectangleGeometry in XAML\nDESCRIPTION: This XAML code shows how to create and render a RoundRectangleGeometry within a Path object. The position, dimensions, and corner radius of the rounded rectangle are defined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Fill=\"Blue\"\n      Stroke=\"Red\">\n    <Path.Data>\n        <RoundRectangleGeometry CornerRadius=\"5\"\n                                Rect=\"10,10,150,100\" />\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Disable Zoom - XAML\nDESCRIPTION: This XAML code disables zooming on a .NET MAUI Map. The IsZoomEnabled property is set to false, preventing the user from zooming in or out of the map.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_18\n\nLANGUAGE: XAML\nCODE:\n```\n<maps:Map IsZoomEnabled=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Adding New Lines in C#\nDESCRIPTION: This snippet shows how to add a new line to a Label in C# by using the newline character \"\\n\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nLabel label = new Label { Text = \"First line\\nSecond line\" };\n```\n\n----------------------------------------\n\nTITLE: ViewModel Property for Preselected Item (C#)\nDESCRIPTION: This C# code defines a property in the view model that holds the preselected item. It implements `INotifyPropertyChanged` to notify the view when the selected item changes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/selection.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class MonkeysViewModel : INotifyPropertyChanged\n{\n    ...\n    public ObservableCollection<Monkey> Monkeys { get; private set; }\n\n    Monkey selectedMonkey;\n    public Monkey SelectedMonkey\n    {\n        get\n        {\n            return selectedMonkey;\n        }\n        set\n        {\n            if (selectedMonkey != value)\n            {\n                selectedMonkey = value;\n            }\n        }\n    }\n\n    public MonkeysViewModel()\n    {\n        ...\n        selectedMonkey = Monkeys.Skip(3).FirstOrDefault();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Label using x:Static Markup Extension\nDESCRIPTION: This XAML snippet demonstrates how to use the `x:Static` markup extension to set properties of a Label control to static values from .NET MAUI's built-in classes, specifically referencing `LayoutOptions`, `TextAlignment`, and `Colors`. This approach allows you to directly use static constants defined in the framework without needing to declare them as resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"Hello, XAML!\"\n       VerticalOptions=\"{x:Static LayoutOptions.Start}\"\n       HorizontalTextAlignment=\"{x:Static TextAlignment.Center}\"\n       TextColor=\"{x:Static Colors.Aqua}\" />\n```\n\n----------------------------------------\n\nTITLE: Define build properties in .csproj file\nDESCRIPTION: This XML snippet demonstrates how to define build properties in a .csproj file for a .NET MAUI iOS app.  It sets the code signing key, provisioning profile, and enables archive creation when the target framework contains '-ios' and the configuration is set to 'Release'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/deployment/publish-cli.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"$(TargetFramework.Contains('-ios')) and '$(Configuration)' == 'Release'\">\n  <CodesignKey>Apple Distribution: John Smith (AY2GDE9QM7)</CodesignKey>\n  <CodesignProvision>MyMauiApp</CodesignProvision>\n  <ArchiveOnBuild>true</ArchiveOnBuild>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: XAML Intrinsic Namespace Declaration\nDESCRIPTION: Declares the XAML intrinsic namespace, which uses the 'x' prefix. This namespace provides access to XAML-specific elements and attributes that are essential to the XAML language.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/index.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n```\n\n----------------------------------------\n\nTITLE: Use Raw Asset in WebView Control in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to use a raw asset, specifically an HTML file named 'index.html', as the source for a WebView control in a .NET MAUI application. The WebView control will load and display the content of the specified HTML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<WebView Source=\"index.html\" />\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationRegistrationService Field C#\nDESCRIPTION: Adds a `readonly` backing field `_notificationRegistrationService` to store a reference to the `INotificationRegistrationService` implementation. This field is used to interact with the notification registration service, handling the registration and deregistration logic.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nreadonly INotificationRegistrationService _notificationRegistrationService;\n```\n\n----------------------------------------\n\nTITLE: Set Handler Disconnect Policy in XAML\nDESCRIPTION: This XAML snippet demonstrates setting the `HandlerProperties.DisconnectPolicy` attached property to `Manual` on a `CustomEntry` control.  This prevents the handler from automatically disconnecting, requiring manual disconnection via code.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/renderer-to-handler.md#_snippet_11\n\nLANGUAGE: xaml\nCODE:\n```\n<controls:CustomEntry x:Name=\"customEntry\"\n                      Text=\"Hello world\"\n                      TextColor=\"Blue\"\n                      HandlerProperties.DisconnectPolicy=\"Manual\" />             \n```\n\n----------------------------------------\n\nTITLE: Deserializing App Properties on Windows (C#)\nDESCRIPTION: This code snippet defines the `PropertiesDeserializer` class for Windows, which deserializes the Xamarin.Forms `PropertyStore.forms` file. It accesses the file from the application's roaming folder and deserializes it using a `DataContractSerializer`. It handles the `FileNotFoundException` and returns a new dictionary if the file doesn't exist. It also requires the `DontSync` extension method.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.Runtime.Serialization;\nusing Windows.Storage;\n\nnamespace MigrationHelpers;\n\npublic class PropertiesDeserializer\n{\n    const string PropertyStoreFile = \"PropertyStore.forms\";\n\n    public async Task<IDictionary<string, object>> DeserializePropertiesAsync()\n    {\n        try\n        {\n            StorageFile file = await ApplicationData.Current.RoamingFolder.GetFileAsync(PropertyStoreFile).DontSync();\n            using (Stream stream = (await file.OpenReadAsync().DontSync()).AsStreamForRead())\n            {\n                if (stream.Length == 0)\n                    return new Dictionary<string, object>(4);\n\n                try\n                {\n                    var serializer = new DataContractSerializer(typeof(IDictionary<string, object>));\n                    return (IDictionary<string, object>)serializer.ReadObject(stream);\n                }\n                catch (Exception e)\n                {\n                    Debug.WriteLine(\"Could not deserialize properties: \" + e.Message);\n                    Console.WriteLine($\"PropertyStore Exception while reading Application properties: {e}\");\n                }\n                return null;\n            }\n        }\n        catch (FileNotFoundException)\n        {\n            return new Dictionary<string, object>(4);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Brush with Center at Top-Left XAML\nDESCRIPTION: This example demonstrates how to create a RadialGradientBrush with its center positioned at the top-left corner of the Border. The gradient interpolates from Red to DarkBlue.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/radialgradient.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Radius defaults to (0.5) -->\n<RadialGradientBrush Center=\"0.0,0.0\">\n    <GradientStop Color=\"Red\"\n                  Offset=\"0.1\" />\n    <GradientStop Color=\"DarkBlue\"\n                  Offset=\"1.0\" />\n</RadialGradientBrush>\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events - C#\nDESCRIPTION: This C# snippet shows the implementation of the event handlers for the PointerEntered, PointerExited, and PointerMoved events. These event handlers are called when the pointer enters, exits, or moves within the bounds of the associated view (in this case, the Image control). Each handler receives a `PointerEventArgs` object that provides information about the event.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pointer.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnPointerEntered(object sender, PointerEventArgs e)\n{\n    // Handle the pointer entered event\n}\n\nvoid OnPointerExited(object sender, PointerEventArgs e)\n{\n    // Handle the pointer exited event\n}\n\nvoid OnPointerMoved(object sender, PointerEventArgs e)\n{\n    // Handle the pointer moved event\n}\n```\n\n----------------------------------------\n\nTITLE: Measure Layout Size - C#\nDESCRIPTION: This code implements the Measure method of the custom layout manager to calculate the total size of the layout. It iterates through visible children, measures them, and calculates the total size based on constraints, padding, and spacing. It also resolves constraints to ensure the layout fits within its boundaries.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override Size Measure(double widthConstraint, double heightConstraint)\n{\n    var padding = _layout.Padding;\n\n    widthConstraint -= padding.HorizontalThickness;\n\n    double currentRowWidth = 0;\n    double currentRowHeight = 0;\n    double totalWidth = 0;\n    double totalHeight = 0;\n\n    for (int n = 0; n < _layout.Count; n++)\n    {\n        var child = _layout[n];\n        if (child.Visibility == Visibility.Collapsed)\n        {\n            continue;\n        }\n\n        var measure = child.Measure(double.PositiveInfinity, heightConstraint);\n\n        // Will adding this IView put us past the edge?\n        if (currentRowWidth + measure.Width > widthConstraint)\n        {\n            // Keep track of the width so far\n            totalWidth = Math.Max(totalWidth, currentRowWidth);\n            totalHeight += currentRowHeight;\n\n            // Account for spacing\n            totalHeight += _layout.Spacing;\n\n            // Start over at 0\n            currentRowWidth = 0;\n            currentRowHeight = measure.Height;\n        }\n        currentRowWidth += measure.Width;\n        currentRowHeight = Math.Max(currentRowHeight, measure.Height);\n\n        if (n < _layout.Count - 1)\n        {\n            currentRowWidth += _layout.Spacing;\n        }\n    }\n\n    // Account for the last row\n    totalWidth = Math.Max(totalWidth, currentRowWidth);\n    totalHeight += currentRowHeight;\n\n    // Account for padding\n    totalWidth += padding.HorizontalThickness;\n    totalHeight += padding.VerticalThickness;\n\n    // Ensure that the total size of the layout fits within its constraints\n    var finalWidth = ResolveConstraints(widthConstraint, Stack.Width, totalWidth, Stack.MinimumWidth, Stack.MaximumWidth);\n    var finalHeight = ResolveConstraints(heightConstraint, Stack.Height, totalHeight, Stack.MinimumHeight, Stack.MaximumHeight);\n\n    return new Size(finalWidth, finalHeight);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting IsInAccessibleTree Property in XAML\nDESCRIPTION: This code snippet demonstrates how to set the `IsInAccessibleTree` attached property to `true` for an `Entry` control in XAML. Setting this property to `true` makes the element visible to screen readers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_15\n\nLANGUAGE: xaml\nCODE:\n```\n<Entry AutomationProperties.IsInAccessibleTree=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Xamarin.Forms Defaults for Layout Properties in .NET MAUI (XML)\nDESCRIPTION: This XML snippet demonstrates how to set implicit styles in .NET MAUI to preserve the default layout property values from Xamarin.Forms, specifically for Grid, StackLayout, and Frame. This ensures that apps maintain their original appearance after migration by overriding the .NET MAUI defaults, which are generally set to zero.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/layouts.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Forms defaults -->\n<Style TargetType=\"Grid\">\n    <Setter Property=\"ColumnSpacing\" Value=\"6\"/>\n    <Setter Property=\"RowSpacing\" Value=\"6\"/>\n</Style>\n<Style TargetType=\"StackLayout\">\n    <Setter Property=\"Spacing\" Value=\"6\"/>\n</Style>\n<Style TargetType=\"Frame\">\n    <Setter Property=\"Padding\" Value=\"{OnPlatform 20,iOS=19}\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Cache Validity in XAML\nDESCRIPTION: This XAML snippet shows how to configure image caching for a remote image in a .NET MAUI application. It explicitly creates a UriImageSource, sets the Uri property to the image's URL, and sets the CacheValidity property to a TimeSpan value (10 days in this example), controlling how long the image is cached locally.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Image>\n    <Image.Source>\n        <UriImageSource Uri=\"https://aka.ms/campus.jpg\"\n                        CacheValidity=\"10:00:00:00\" />\n    </Image.Source>\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Pinch Gesture Recognizer C#\nDESCRIPTION: This C# snippet demonstrates how to create a PinchGestureRecognizer in code and attach it to an Image control. It includes an anonymous method to handle the PinchUpdated event, adding the gesture recognizer to the Image's GestureRecognizers collection. This allows the image to respond to pinch gestures.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/pinch.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPinchGestureRecognizer pinchGesture = new PinchGestureRecognizer();\npinchGesture.PinchUpdated += (s, e) =>\n{\n    // Handle the pinch\n};\nimage.GestureRecognizers.Add(pinchGesture);\n```\n\n----------------------------------------\n\nTITLE: Disable ListView Item Separators (XAML)\nDESCRIPTION: Shows how to disable the separators between ListView items by setting the `SeparatorVisibility` property to `None`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_20\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView ...\n          SeparatorVisibility=\"None\" />\n```\n\n----------------------------------------\n\nTITLE: Polyline with Nonzero FillRule in XAML\nDESCRIPTION: This XAML code snippet shows how to create a polyline with a black fill and a yellow stroke, using the Nonzero fill rule. The FillRule determines how the intersecting areas of the polyline are combined.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polyline.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Polyline Points=\"0 48, 0 144, 96 150, 100 0, 192 0, 192 96, 50 96, 48 192, 150 200 144 48\"\n          Fill=\"Black\"\n          FillRule=\"Nonzero\"\n          Stroke=\"Yellow\"\n          StrokeThickness=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Recoloring the Foreground of an App Icon in .NET MAUI\nDESCRIPTION: This XML snippet shows how to tint the foreground image of a composed app icon in a .NET MAUI project.  The `TintColor` attribute is used to specify the tint color, which can be a hexadecimal value or a named .NET MAUI color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.png\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" TintColor=\"Yellow\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Specifying Delivery Type for Asset Packs in .NET MAUI XML\nDESCRIPTION: This XML snippet demonstrates how to specify the delivery type for asset packs in a .NET MAUI app using the `DeliveryType` attribute on a `MauiAsset`. The delivery type controls when the assets will be installed on the device. Available options include `InstallTime`, `FastFollow`, and `OnDemand`, each with different size limitations and installation behaviors.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Update=\"Resources\\Raw\\myvideo.mp4\" AssetPack=\"myassetpack\" DeliveryType=\"FastFollow\" />\n```\n\n----------------------------------------\n\nTITLE: Nonzero Fill Rule with PathGeometry XAML Example\nDESCRIPTION: This XAML snippet further illustrates the Nonzero fill rule using PathGeometry and ArcSegment elements to create a composite shape with segments running in different directions.  The rings are filled or not filled based on whether the sum of the segments crossed by a ray is zero or non-zero, respectively. The FillRule property is set explicitly to \"Nonzero\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/fillrules.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\"\n      Fill=\"#CCCCFF\">\n     <Path.Data>\n         <GeometryGroup FillRule=\"Nonzero\">\n             <PathGeometry>\n                 <PathGeometry.Figures>\n                     <!-- Inner ring -->\n                     <PathFigure StartPoint=\"120,120\">\n                         <PathFigure.Segments>\n                             <PathSegmentCollection>\n                                 <ArcSegment Size=\"50,50\"\n                                             IsLargeArc=\"True\"\n                                             SweepDirection=\"CounterClockwise\"\n                                             Point=\"140,120\" />\n                             </PathSegmentCollection>\n                         </PathFigure.Segments>\n                     </PathFigure>\n\n                     <!-- Second ring -->\n                     <PathFigure StartPoint=\"120,100\">\n                         <PathFigure.Segments>\n                             <PathSegmentCollection>\n                                 <ArcSegment Size=\"70,70\"\n                                             IsLargeArc=\"True\"\n                                             SweepDirection=\"CounterClockwise\"\n                                             Point=\"140,100\" />\n                             </PathSegmentCollection>\n                         </PathFigure.Segments>\n                     </PathFigure>\n\n                     <!-- Third ring  -->\n                         <PathFigure StartPoint=\"120,70\">\n                         <PathFigure.Segments>\n                             <PathSegmentCollection>\n                                 <ArcSegment Size=\"100,100\"\n                                             IsLargeArc=\"True\"\n                                             SweepDirection=\"CounterClockwise\"\n                                             Point=\"140,70\" />\n                             </PathSegmentCollection>\n                         </PathFigure.Segments>\n                     </PathFigure>\n\n                     <!-- Outer ring -->\n                     <PathFigure StartPoint=\"120,300\">\n                         <PathFigure.Segments>\n                             <ArcSegment Size=\"130,130\"\n                                         IsLargeArc=\"True\"\n                                         SweepDirection=\"Clockwise\"\n                                         Point=\"140,300\" />\n                         </PathFigure.Segments>\n                     </PathFigure>\n                 </PathGeometry.Figures>\n             </PathGeometry>\n         </GeometryGroup>\n     </Path.Data>\n </Path>\n```\n\n----------------------------------------\n\nTITLE: Check .NET Runtime Version (zsh)\nDESCRIPTION: This command checks the installed .NET runtime version. It's used to verify that the latest .NET runtime is installed before proceeding with .NET MAUI installation. The command does not require any parameters and outputs the installed .NET version to the terminal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/install-create-macos.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\ndotnet --version\n```\n\n----------------------------------------\n\nTITLE: Toggling DatePicker UpdateMode in C#\nDESCRIPTION: This C# code snippet demonstrates how to toggle the `UpdateMode` of a `DatePicker` on iOS. It retrieves the current `UpdateMode` and then sets it to the opposite value. It leverages the `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/datepicker-selection.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nswitch (datePicker.On<iOS>().UpdateMode())\n{\n    case UpdateMode.Immediately:\n        datePicker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n        break;\n    case UpdateMode.WhenFinished:\n        datePicker.On<iOS>().SetUpdateMode(UpdateMode.Immediately);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Polyline with Stroke in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to create a basic polyline with a red stroke. The Points property defines the vertices of the polyline, and the Stroke property sets the color of the outline.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polyline.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Polyline Points=\"0,0 10,30 15,0 18,60 23,30 35,30 40,0 43,60 48,30 100,30\"\n          Stroke=\"Red\" />\n```\n\n----------------------------------------\n\nTITLE: Submit App for Notarization with notarytool (Zsh)\nDESCRIPTION: This zsh command submits a .pkg file to Apple's notary service for notarization. It requires the `xcrun notarytool submit` command, along with the filename of the package, Apple ID, app-specific password, and team ID for authentication with App Store Connect. The `--wait` flag ensures the command completes only after notarization finishes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nxcrun notarytool submit {my_package_filename} --wait --apple-id {my_apple_id} --password {my_app_specific_password} --team-id {my_team_id}\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutOptions Resources in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define `LayoutOptions` resources in a page-level resource dictionary. These resources are then used to set the `HorizontalOptions` and `VerticalOptions` properties of the buttons.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.SharedResourcesPage\"\n             Title=\"Shared Resources Page\">\n    <ContentPage.Resources>\n        <LayoutOptions x:Key=\"horzOptions\"\n                       Alignment=\"Center\" />\n        <LayoutOptions x:Key=\"vertOptions\"\n                       Alignment=\"Center\" />\n    </ContentPage.Resources>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Creating .NET for Android Projects with dotnet new\nDESCRIPTION: These examples illustrate how to use the `dotnet new` command to create different types of .NET for Android projects, specifying output directories and package names.  The command leverages project templates to scaffold .NET for Android applications, libraries, and Java binding projects.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new android            --output MyAndroidApp     --packageName com.mycompany.myandroidapp\ndotnet new androidlib         --output MyAndroidLibrary\ndotnet new android-bindinglib --output MyJavaBinding\n```\n\n----------------------------------------\n\nTITLE: Wrapping Items with FlexLayout in .NET MAUI XAML\nDESCRIPTION: This XAML code demonstrates how to wrap items within a FlexLayout in a .NET MAUI application. The Wrap property is set to Wrap, causing items to wrap to the next row if they don't fit on the current row. The JustifyContent property distributes space around the items.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"FlexLayoutDemos.Views.PhotoWrappingPage\"\n             Title=\"Photo Wrapping\">\n    <Grid>\n        <ScrollView>\n            <FlexLayout x:Name=\"flexLayout\"\n                        Wrap=\"Wrap\"\n                        JustifyContent=\"SpaceAround\" />\n        </ScrollView>\n        ...\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Ping iOS Device IP Address\nDESCRIPTION: This command helps verify network connectivity between your Mac and iOS device by sending ICMP echo requests to the device's IP address. It requires the device's IP address to be known and assumes the Terminal is open on the Mac. Successful pings indicate network connectivity; timeouts suggest connectivity issues or ICMP blocking.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/wireless-deployment.md#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nPING 192.168.1.107 (192.168.1.107): 56 data bytes\n64 bytes from 192.168.1.107: icmp_seq=0 ttl=64 time=121.015 ms\n64 bytes from 192.168.1.107: icmp_seq=1 ttl=64 time=28.387 ms\n64 bytes from 192.168.1.107: icmp_seq=2 ttl=64 time=49.890 ms\n64 bytes from 192.168.1.107: icmp_seq=3 ttl=64 time=72.283 ms\n```\n\n----------------------------------------\n\nTITLE: Update App.xaml for .NET MAUI WinUI 3\nDESCRIPTION: Updates the App.xaml file in a .NET MAUI WinUI 3 project. This configuration sets up the root MauiWinUIApplication with necessary XML namespaces and resources, including merged dictionaries for XamlControlsResources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project.md#_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<maui:MauiWinUIApplication\n    x:Class=\"YOUR_NAMESPACE_HERE.WinUI.App\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:maui=\"using:Microsoft.Maui\"\n    xmlns:local=\"using:YOUR_NAMESPACE_HERE.WinUI\">\n    <maui:MauiWinUIApplication.Resources>\n        <ResourceDictionary>\n            <ResourceDictionary.MergedDictionaries>\n                <XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" />\n                <!-- Other merged dictionaries here -->\n            </ResourceDictionary.MergedDictionaries>\n            <!-- Other app resources here -->\n        </ResourceDictionary>\n    </maui:MauiWinUIApplication.Resources>\n</maui:MauiWinUIApplication>\n```\n\n----------------------------------------\n\nTITLE: CollectionView Vertical List Layout XAML\nDESCRIPTION: This XAML snippet demonstrates how to create a basic vertical list layout for a CollectionView. It binds the CollectionView to a data source named Monkeys and defines an ItemTemplate to display each item in a Grid. The ItemTemplate includes an Image and two Labels to show the monkey's image, name, and location.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemTemplate>\n        <DataTemplate x:DataType=\"models:Monkey\">\n            <Grid Padding=\"10\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"Auto\" />\n                    <ColumnDefinition Width=\"Auto\" />\n                </Grid.ColumnDefinitions>\n                <Image Grid.RowSpan=\"2\"\n                       Source=\"{Binding ImageUrl}\"\n                       Aspect=\"AspectFill\"\n                       HeightRequest=\"60\"\n                       WidthRequest=\"60\" />\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\" />\n                <Label Grid.Row=\"1\"\n                       Grid.Column=\"1\"\n                       Text=\"{Binding Location}\"\n                       FontAttributes=\"Italic\"\n                       VerticalOptions=\"End\" />\n            </Grid>\n        </DataTemplate>\n    </CollectionView.ItemTemplate>\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Customize ActivityIndicator Color in XAML\nDESCRIPTION: This XAML snippet shows how to create an ActivityIndicator with a specific color and start its animation. The Color property is set to \"Orange\" to change the indicator's color.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/activityindicator.md#_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<ActivityIndicator IsRunning=\"true\"\n                   Color=\"Orange\" />\n```\n\n----------------------------------------\n\nTITLE: Async Extension Method for Windows (C#)\nDESCRIPTION: This code defines the `DontSync` extension method for `IAsyncOperation<T>` on Windows. This method is used to configure the task awaiter to not capture the synchronization context, preventing deadlocks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/app-properties.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Runtime.CompilerServices;\nusing Windows.Foundation;\n\nnamespace MigrationHelpers;\n\ninternal static class Extensions\n{\n    public static ConfiguredTaskAwaitable<T> DontSync<T>(this IAsyncOperation<T> self)\n    {\n        return self.AsTask().ConfigureAwait(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using x:Null Markup Extension in .NET MAUI XAML\nDESCRIPTION: This XAML code demonstrates the use of the `x:Null` markup extension to override a style and set the `FontFamily` property of a Label to null. This effectively prevents the label from inheriting the font defined in the implicit style. The x:Null extension is part of the XAML standard and doesn't require any special dependencies beyond the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/markup-extensions/consume.md#_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MarkupExtensions.NullDemoPage\"\n             Title=\"x:Null Demo\">\n    <ContentPage.Resources>\n        <Style TargetType=\"Label\">\n            <Setter Property=\"FontSize\" Value=\"48\" />\n            <Setter Property=\"FontFamily\" Value=\"OpenSansRegular\" />\n        </Style>\n    </ContentPage.Resources>\n\n    <StackLayout Padding=\"10, 0\">\n        <Label Text=\"Text 1\" />\n        <Label Text=\"Text 2\" />\n        <Label Text=\"Text 3\"\n               FontFamily=\"{x:Null}\" />\n        <Label Text=\"Text 4\" />\n        <Label Text=\"Text 5\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Align Content CSS in .NET MAUI\nDESCRIPTION: Sets how flex lines are aligned in a .NET MAUI FlexLayout when there is extra space in the cross axis. Valid values are stretch, center, start, end, spacebetween, spacearound, spaceevenly, flex-start, flex-end, space-between, space-around, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\nalign-content: space-between;\n```\n\n----------------------------------------\n\nTITLE: Enable Slider UpdateOnTap in C#\nDESCRIPTION: This C# snippet shows how to enable the `Slider.UpdateOnTap` property for iOS using the fluent API. It requires importing the `Microsoft.Maui.Controls.PlatformConfiguration` and `Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific` namespaces.  The `Slider.On<iOS>()` method specifies that this is an iOS-specific configuration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/slider-thumb.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nvar slider = new Microsoft.Maui.Controls.Slider();\nslider.On<iOS>().SetUpdateOnTap(true);\n```\n\n----------------------------------------\n\nTITLE: Updating Target Frameworks in .NET MAUI .csproj (Net8)\nDESCRIPTION: This XML snippet demonstrates the Target Framework Monikers (TFMs) configuration for a .NET 8 .csproj file. It specifies target platforms like Android, iOS, MacCatalyst, Tizen, and Windows. It uses MSBuild conditions to conditionally include the Windows target framework based on the operating system. This is part of the upgrade process to .NET 8.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-8.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst;net8.0-tizen</TargetFrameworks>\n<TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Set Item Sizing Strategy C#\nDESCRIPTION: This code snippet demonstrates how to set the `ItemSizingStrategy` property of a `CollectionView` to `MeasureFirstItem` using C#. This sizing strategy measures only the first item and applies that size to all subsequent items, improving performance when items have uniform size.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionView collectionView = new CollectionView\n{\n    ...\n    ItemSizingStrategy = ItemSizingStrategy.MeasureFirstItem\n};\n```\n\n----------------------------------------\n\nTITLE: Load Embedded Image with Markup Extension - C#\nDESCRIPTION: This C# code defines a custom XAML markup extension, `ImageResourceExtension`, that allows loading embedded images in XAML by specifying the `Source` property. It retrieves the image from the specified assembly resource using `ImageSource.FromResource`. It also includes error handling to raise an exception if the `Source` property is not set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing System.Xml;\n\nnamespace ImageDemos\n{\n    [ContentProperty(\"Source\")]\n    public class ImageResourceExtension : IMarkupExtension<ImageSource>\n    {\n        public string Source { set; get; }\n\n        public ImageSource ProvideValue(IServiceProvider serviceProvider)\n        {\n            if (String.IsNullOrEmpty(Source))\n            {\n                IXmlLineInfoProvider lineInfoProvider = serviceProvider.GetService(typeof(IXmlLineInfoProvider)) as IXmlLineInfoProvider;\n                IXmlLineInfo lineInfo = (lineInfoProvider != null) ? lineInfoProvider.XmlLineInfo : new XmlLineInfo();\n                throw new XamlParseException(\"ImageResourceExtension requires Source property to be set\", lineInfo);\n            }\n\n            string assemblyName = GetType().GetTypeInfo().Assembly.GetName().Name;\n            return ImageSource.FromResource(assemblyName + \".\" + Source, typeof(ImageResourceExtension).GetTypeInfo().Assembly);\n        }\n\n        object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)\n        {\n            return (this as IMarkupExtension<ImageSource>).ProvideValue(serviceProvider);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Staple Notarization Ticket to App (Zsh)\nDESCRIPTION: This zsh command attaches the notarization ticket to the .pkg file using the `stapler` tool.  This ensures that Gatekeeper can verify the app's notarization status even when a network connection is unavailable. It requires the `xcrun stapler staple` command and the package filename.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nxcrun stapler staple {filename}.pkg\n```\n\n----------------------------------------\n\nTITLE: Setting FallbackValue in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the FallbackValue property on a Label. The FallbackValue is used when the binding source cannot be resolved. If the Population property doesn't exist on the bound object, the Label will display 'Population size unknown'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/binding-fallbacks.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"{Binding Population, FallbackValue='Population size unknown'}\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: Modifying App Class to Use IWindowCreator - C#\nDESCRIPTION: This C# code snippet demonstrates how to modify the `App` class to prevent it from setting the `MainPage` property, ensuring that the registered `IWindowCreator` is used to create the main window.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView to Views in C#\nDESCRIPTION: Demonstrates setting the EmptyView property of a CarouselView to a ContentView containing a StackLayout with Labels in C#. The StackLayout and its labels are displayed when ItemsSource is null or empty.  Uses data binding to bind ItemsSource to a property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nStackLayout stackLayout = new StackLayout();\nstackLayout.Add(new Label { Text = \"No results matched your filter.\", ... } );\nstackLayout.Add(new Label { Text = \"Try a broader filter?\", ... } );\n\nSearchBar searchBar = new SearchBar { ... };\nCarouselView carouselView = new CarouselView\n{\n    EmptyView = new ContentView\n    {\n        Content = stackLayout\n    }\n};\ncarouselView.SetBinding(ItemsView.ItemsSourceProperty, static (MonkeysViewModel vm) => vm.Monkeys);\n```\n\n----------------------------------------\n\nTITLE: CarouselView Scrolled Event Handler in XAML\nDESCRIPTION: This XAML snippet shows how to define a CarouselView and attach an event handler to the `Scrolled` event. This event is triggered when scrolling occurs in the CarouselView.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/scrolling.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<CarouselView Scrolled=\"OnCollectionViewScrolled\">\n    ...\n</CarouselView>\n```\n\n----------------------------------------\n\nTITLE: Custom Grid Layout Manager in C#\nDESCRIPTION: This C# code defines a custom layout manager for the Grid layout that inherits from GridLayoutManager. It overrides the Measure method to ensure that the Grid.RowDefinitions property includes enough rows to accommodate the rows specified in the child views' attached properties. It depends on Microsoft.Maui.Layouts namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/custom.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Layouts;\n\npublic class CustomGridLayoutManager : GridLayoutManager\n{\n    public CustomGridLayoutManager(IGridLayout layout) : base(layout)\n    {\n    }\n\n    public override Size Measure(double widthConstraint, double heightConstraint)\n    {\n        EnsureRows();\n        return base.Measure(widthConstraint, heightConstraint);\n    }\n\n    void EnsureRows()\n    {\n        if (Grid is not Grid grid)\n        {\n            return;\n        }\n\n        // Find the maximum row value from the child views\n        int maxRow = 0;\n        foreach (var child in grid)\n        {\n            maxRow = Math.Max(grid.GetRow(child), maxRow);\n        }\n\n        // Add more rows if we need them\n        for (int n = grid.RowDefinitions.Count; n <= maxRow; n++)\n        {\n            grid.RowDefinitions.Add(new RowDefinition(GridLength.Star));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function with Method in .NET MAUI\nDESCRIPTION: This snippet shows how to create a custom easing function as a method that takes a `double` argument (representing time) and returns a `double` value (representing the normalized animation progress). The custom easing function is then used with `TranslateTo`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet9.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndouble CustomEase (double t)\n{\n  return t == 0 || t == 1 ? t : (int)(5 * t) / 5.0;\n}\n\nawait image.TranslateTo(0, 200, 2000, (Easing)CustomEase);\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Brush with Center at Bottom-Right XAML\nDESCRIPTION: This example shows how to create a RadialGradientBrush with its center positioned at the bottom-right corner of the Border. The gradient interpolates from Red to DarkBlue.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/brushes/radialgradient.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Radius defaults to (0.5) -->\n<RadialGradientBrush Center=\"1.0,1.0\">\n    <GradientStop Color=\"Red\"\n                  Offset=\"0.1\" />\n    <GradientStop Color=\"DarkBlue\"\n                  Offset=\"1.0\" />\n</RadialGradientBrush>            \n```\n\n----------------------------------------\n\nTITLE: Configuring NotificationsController in C#\nDESCRIPTION: This C# code snippet configures the NotificationsController with the Authorize attribute, indicating that authentication is required to access the controller's actions.  It uses the ApiController attribute to enable API-specific behaviors. It also defines the route for the controller as 'api/[controller]'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class NotificationsController : ControllerBase\n```\n\n----------------------------------------\n\nTITLE: Include Raw Asset in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include a raw asset file, such as an HTML file, in a .NET MAUI project. The MauiAsset build action specifies that the file should be copied to the app package during the build process. The file is located in the Resources\\Raw folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\index.html\" />\n```\n\n----------------------------------------\n\nTITLE: Adding PushNotificationsDemo.Services Namespace C#\nDESCRIPTION: Adds a `using` statement for the `PushNotificationsDemo.Services` namespace in `MainPage.xaml.cs`. This import is essential for accessing the `INotificationRegistrationService` and other related services used for handling push notifications.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nusing PushNotificationsDemo.Services;\n```\n\n----------------------------------------\n\nTITLE: Processing ResourceVideoSource for iOS/Mac Catalyst in MAUI\nDESCRIPTION: This code snippet demonstrates how to process a `ResourceVideoSource` on iOS and Mac Catalyst within a MAUI application. It retrieves the video file from the app bundle using `NSBundle.MainBundle.GetUrlForResource`, converting the path into filename, extension and directory components before creating an `AVAsset` from the URL.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        Video _video;\n        ...\n\n        public void UpdateSource()\n        {\n            AVAsset asset = null;\n            ...\n\n            else if (_video.Source is ResourceVideoSource)\n            {\n                string path = (_video.Source as ResourceVideoSource).Path;\n                if (!string.IsNullOrWhiteSpace(path))\n                {\n                    string directory = Path.GetDirectoryName(path);\n                    string filename = Path.GetFileNameWithoutExtension(path);\n                    string extension = Path.GetExtension(path).Substring(1);\n                    NSUrl url = NSBundle.MainBundle.GetUrlForResource(filename, extension, directory);\n                    asset = AVAsset.FromUrl(url);\n                }\n            }\n            ...\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Notarization (Zsh)\nDESCRIPTION: This zsh command validates that a package has been successfully notarized using the `stapler validate` command. This command confirms the notarization process and is executed via `xcrun`. It requires the package filename.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/deployment/publish-outside-app-store.md#_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nxcrun stapler validate mypackage.pkg\n```\n\n----------------------------------------\n\nTITLE: Background Color CSS in .NET MAUI\nDESCRIPTION: Sets the background color of a .NET MAUI VisualElement. The value should be a color or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\nbackground-color: springgreen;\n```\n\n----------------------------------------\n\nTITLE: List Specific Keystore Contents Example\nDESCRIPTION: This example demonstrates how to list the keys in a keystore file named 'myapp.keystore' using the keytool utility.  It uses the -list option to display the contents of the specified keystore.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/deployment/publish-cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkeytool -list -keystore myapp.keystore\n```\n\n----------------------------------------\n\nTITLE: Initialize .NET MAUI in Windows MainWindow - C#\nDESCRIPTION: This code initializes .NET MAUI in the `MainWindow` class on Windows. It sets up the window context and creates a MAUI embedded window context. This snippet shows the essential code for initializing a .NET MAUI context within a Windows application.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.Embedding;\nusing Microsoft.UI.Xaml;\n\nnamespace MyNativeEmbeddedApp.WinUI;\n\npublic sealed partial class MainWindow : Microsoft.UI.Xaml.Window\n{\n    Microsoft.UI.Xaml.Window? _window;\n    IMauiContext? _windowContext;\n\n    public IMauiContext WindowContext =>\n        _windowContext ??= MyEmbeddedMauiApp.Shared.CreateEmbeddedWindowContext(_window ?? throw new InvalidOperationException());\n\n    public MainWindow()\n    {\n        this.InitializeComponent();\n        _window ??= this;\n    }\n\n    private async void OnRootLayoutLoaded(object? sender, RoutedEventArgs e)\n    {\n        await Task.Yield();\n\n        // Create MAUI embedded window context\n        var context = WindowContext;\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispose Method in MauiVideoPlayer with C#\nDESCRIPTION: This code snippet demonstrates the `Dispose` method in the `MauiVideoPlayer` class. It is responsible for unsubscribing from the `MediaOpened` event and disposing of the `MediaPlayerElement` to perform native view cleanup. This method is called by the handler's `DisconnectHandler` override.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiVideoPlayer : Grid, IDisposable\n{\n    MediaPlayerElement _mediaPlayerElement;\n    Video _video;\n    bool _isMediaPlayerAttached;\n    ...\n\n    public void Dispose()\n    {\n        if (_isMediaPlayerAttached)\n        {\n            _mediaPlayerElement.MediaPlayer.MediaOpened -= OnMediaPlayerMediaOpened;\n            _mediaPlayerElement.MediaPlayer.Dispose();\n        }\n        _mediaPlayerElement = null;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sync changes from Xcode example\nDESCRIPTION: This example demonstrates synchronizing changes from a generated Xcode project in the default location back to a .NET MAUI project, specifying the path to the project file and the `net9.0-ios` target framework.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/xcsync.md#_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\nxcsync sync -p path/to/maui.csproj -tfm net9.0-ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Increased Memory Limit Entitlement in XML\nDESCRIPTION: This snippet defines the increased memory limit entitlement, enabling the app to exceed the default memory limit. The `com.apple.developer.kernel.increased-memory-limit` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.kernel.increased-memory-limit</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: CarouselView Item Spacing C#\nDESCRIPTION: This C# code programmatically creates a CarouselView with a LinearItemsLayout set to vertical orientation, and then sets the ItemSpacing property to 20. Dependencies: Microsoft.Maui.Controls\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/layout.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nCarouselView carouselView = new CarouselView\n{\n    ...\n    ItemsLayout = new LinearItemsLayout(ItemsLayoutOrientation.Vertical)\n    {\n        ItemSpacing = 20\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Animation in C#\nDESCRIPTION: This code snippet demonstrates how to create a simple animation using the `Animation` class in .NET MAUI. It animates the `Scale` property of an `Image` instance from a value of 1 to 2. The animated value is then passed to a callback that changes the `Scale` property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/animation/custom.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar animation = new Animation(v => image.Scale = v, 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Configure Filename-Based Multi-Targeting for MacCatalyst\nDESCRIPTION: This XML snippet configures the build system to exclude MacCatalyst-specific C# files (those ending with .MacCatalyst.cs) when not building for MacCatalyst. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Mac Catalyst -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-maccatalyst')) != true\">\n  <Compile Remove=\"**\\*.MacCatalyst.cs\" />\n  <None Include=\"**\\*.MacCatalyst.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Font Style CSS in .NET MAUI\nDESCRIPTION: Sets the font style for various .NET MAUI controls like Button, DatePicker, Editor, Entry, Label, Picker, SearchBar, TimePicker, and Span. Valid values are bold, italic, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_29\n\nLANGUAGE: CSS\nCODE:\n```\nfont-style: bold;\n```\n\n----------------------------------------\n\nTITLE: Toggling Picker UpdateMode in C# for iOS\nDESCRIPTION: This C# snippet demonstrates how to toggle the `UpdateMode` property of a `Picker` control between `Immediately` and `WhenFinished` using the fluent API. This allows dynamically changing when item selection occurs based on the current value.  The `On<iOS>()` method ensures that the platform-specific configuration only applies to iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/picker-selection.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nswitch (picker.On<iOS>().UpdateMode())\n{\n    case UpdateMode.Immediately:\n        picker.On<iOS>().SetUpdateMode(UpdateMode.WhenFinished);\n        break;\n    case UpdateMode.WhenFinished:\n        picker.On<iOS>().SetUpdateMode(UpdateMode.Immediately);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flyout Footer (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to define a flyout footer in a .NET MAUI Shell application by setting the Shell.FlyoutFooter bindable property to a custom FlyoutFooter control.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_14\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <Shell.FlyoutFooter>\n        <controls:FlyoutFooter />\n    </Shell.FlyoutFooter>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Confirm Project Properties - Platform Project (XML)\nDESCRIPTION: This XML snippet represents a platform-specific project file (e.g., Android) in a .NET MAUI multi-project setup.  It specifies the target framework, supported OS version, output type, and includes a project reference to the core MAUI class library. The `UseMaui` property enables MAUI-specific build tasks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/multi-project-to-multi-project-with-template.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFramework>net8.0-android</TargetFramework>\n        <SupportedOSPlatformVersion>21.0</SupportedOSPlatformVersion>\n        <OutputType>Exe</OutputType>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <UseMaui>true</UseMaui>\n    </PropertyGroup>\n\n    <!--\n        ...\n    -->\n\n    <ItemGroup>\n        <ProjectReference Include=\"..\\MauiApp.1\\MauiApp.1.csproj\" />\n    </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Adding a shadow to an Image (medium format, .NET MAUI 9.0+)\nDESCRIPTION: This XAML snippet demonstrates how to add a shadow to an Image control using a formatted string to define the shadow properties. This shorthand syntax is available in .NET MAUI 9.0 and later. The format used here is 'offset X, offset Y, radius, color'.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/shadow.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Image Source=\"dotnet_bot.png\"\n           WidthRequest=\"250\"\n           HeightRequest=\"310\"\n           Shadow=\"5 8 8 rgb(6, 201, 198)\" />\n```\n\n----------------------------------------\n\nTITLE: TapGestureRecognizer with Secondary Button Mask in C#\nDESCRIPTION: This C# code programmatically creates a TapGestureRecognizer and configures it to detect taps from the secondary mouse button. It also includes a Tapped event handler to check which button was pressed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/tap.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nTapGestureRecognizer tapGestureRecognizer = new TapGestureRecognizer\n{\n    Buttons = ButtonsMask.Secondary\n};\ntapGestureRecognizer.Tapped += (s, e) =>\n{\n    // Handle the tap\n    if (args.Buttons == ButtonsMask.Secondary)\n    {\n        // Do something\n    }\n};\nImage image = new Image();\nimage.GestureRecognizers.Add(tapGestureRecognizer);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Background Color in XAML for iOS\nDESCRIPTION: This XAML snippet demonstrates how to set the default background color of a ViewCell within a ListView's GroupHeaderTemplate using the iOS platform-specific Cell.DefaultBackgroundColor property. It requires the Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespace and binds the color to Teal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/cell-background-color.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             xmlns:local=\"clr-namespace:PlatformSpecifics\"\n             x:DataType=\"local:ListViewViewModel\">\n    <StackLayout Margin=\"20\">\n        <ListView ItemsSource=\"{Binding GroupedEmployees}\"\n                  IsGroupingEnabled=\"true\">\n            <ListView.GroupHeaderTemplate>\n                <DataTemplate x:DataType=\"local:Grouping(x:Char,local:Person)\">\n                    <ViewCell ios:Cell.DefaultBackgroundColor=\"Teal\">\n                        <Label Margin=\"10,10\"\n                               Text=\"{Binding Key}\"\n                               FontAttributes=\"Bold\" />\n                    </ViewCell>\n                </DataTemplate>\n            </ListView.GroupHeaderTemplate>\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event (<=net-maui-9.0)\nDESCRIPTION: This C# code shows how to handle the Button's Clicked event. When the button is clicked, the OnButtonClicked method is executed. This method rotates a label by 360 degrees over 1 second.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/button.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class BasicButtonClickPage : ContentPage\n{\n    public BasicButtonClickPage ()\n    {\n        InitializeComponent ();\n    }\n\n    async void OnButtonClicked(object sender, EventArgs args)\n    {\n        await label.RelRotateTo(360, 1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceVideoSource Class\nDESCRIPTION: This code snippet defines the `ResourceVideoSource` class, which is used to access video files embedded in the app. It defines a `Path` property that represents the path to the video file within the application's resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nnamespace VideoDemos.Controls\n{\n    public class ResourceVideoSource : VideoSource\n    {\n        public static readonly BindableProperty PathProperty =\n            BindableProperty.Create(nameof(Path), typeof(string), typeof(ResourceVideoSource));\n\n        public string Path\n        {\n            get { return (string)GetValue(PathProperty); }\n            set { SetValue(PathProperty, value); }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Disabled Color with CSS in .NET MAUI Shell\nDESCRIPTION: This CSS snippet sets the shell disabled color for an Element to blue using the `-maui-shell-disabled` property. It accepts a color value or `initial`. This is a .NET MAUI Shell specific CSS property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_76\n\nLANGUAGE: css\nCODE:\n```\n-maui-shell-disabled: blue;\n```\n\n----------------------------------------\n\nTITLE: C# Legacy Nested Interface Implementation\nDESCRIPTION: This C# code shows the traditional way of handling nested types in interfaces before C# 8. The nested class is moved to a top-level class with a generated name. This demonstrates the pre-C# 8 approach for achieving similar functionality.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo { }\n\npublic class IFooBar : Java.Lang.Object { }\n```\n\n----------------------------------------\n\nTITLE: Add Using Statements to AppDelegate.cs - C#\nDESCRIPTION: These `using` statements are added to the `AppDelegate.cs` file to import necessary namespaces.  These namespaces provide access to classes and functions required for handling push notifications, dependency injection, and interacting with the iOS platform.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_57\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing Foundation;\nusing PushNotificationsDemo.Platforms.iOS;\nusing PushNotificationsDemo.Services;\nusing UIKit;\nusing UserNotifications;\n```\n\n----------------------------------------\n\nTITLE: Vertical Align CSS in .NET MAUI\nDESCRIPTION: Sets the vertical alignment for .NET MAUI Label. Valid values are left, top, right, bottom, start, center, middle, end, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_56\n\nLANGUAGE: CSS\nCODE:\n```\nvertical-align: bottom;\n```\n\n----------------------------------------\n\nTITLE: XAML Button Styles without Resources\nDESCRIPTION: This XAML snippet shows three buttons with identical property settings, which can lead to redundancy and maintenance issues. It highlights the need for shared resources.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/markup-extensions.md#_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamlSamples.SharedResourcesPage\"\n             Title=\"Shared Resources Page\">\n    <StackLayout>\n        <Button Text=\"Do this!\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                BorderWidth=\"3\"\n                Rotation=\"-15\"\n                TextColor=\"Red\"\n                FontSize=\"24\" />\n        <Button Text=\"Do that!\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                BorderWidth=\"3\"\n                Rotation=\"-15\"\n                TextColor=\"Red\"\n                FontSize=\"24\" />\n        <Button Text=\"Do the other thing!\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"\n                BorderWidth=\"3\"\n                Rotation=\"-15\"\n                TextColor=\"Red\"\n                FontSize=\"24\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Getting DesktopDirectory path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet demonstrates how to retrieve the DesktopDirectory path on Mac Catalyst using NSFileManager, ensuring consistency with macOS behavior. It bypasses Environment.GetFolderPath and uses Xamarin.Mac APIs for path retrieval.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnew NSFileManager().GetUrls(NSSearchPathDirectory.DesktopDirectory, NSSearchPathDomain.User)[0].Path\n```\n\n----------------------------------------\n\nTITLE: Disposing AVPlayer in iOS to Stop Video Playback\nDESCRIPTION: This code snippet overrides the `Dispose` method to stop video playback on iOS when the video playback page is navigated away from. It sets the current item of the `AVPlayer` to `null` to prevent the video from continuing to play in the background.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void Dispose(bool disposing)\n{\n    if (disposing)\n    {\n        if (_player != null)\n        {\n            _player.ReplaceCurrentItemWithPlayerItem(null);\n            ...\n        }\n        ...\n    }\n    base.Dispose(disposing);\n}\n```\n\n----------------------------------------\n\nTITLE: Set Linear Item Spacing XAML\nDESCRIPTION: This code shows how to set the `ItemSpacing` property of a `LinearItemsLayout` within a `CollectionView` using XAML. The `ItemSpacing` defines the space between items in the linear layout, and the Orientation is set to Vertical.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_19\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ItemsSource=\"{Binding Monkeys}\">\n    <CollectionView.ItemsLayout>\n        <LinearItemsLayout Orientation=\"Vertical\"\n                           ItemSpacing=\"20\" />\n    </CollectionView.ItemsLayout>\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: Load CSS Stylesheet in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to load a CSS stylesheet into a .NET MAUI application using the StyleSheet class. The stylesheet is loaded from the '/Resources/styles.css' file and added to the Application.Resources, making the styles defined in the CSS file available to the application's UI elements.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Application ...>\n    <Application.Resources>\n        <StyleSheet Source=\"/Resources/styles.css\" />\n    </Application.Resources>\n</Application>\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Value Changed Event (<=net-maui-9.0)\nDESCRIPTION: This C# snippet defines an event handler for the ValueChanged event of a Slider control.  It updates the Text property of a Label control (named 'valueLabel' in XAML) with the new value of the slider, formatted to three decimal places. This handler requires the x:Name attribute to be set on the Label control in the XAML file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/fundamentals/get-started.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnSliderValueChanged(object sender, ValueChangedEventArgs args)\n{\n    valueLabel.Text = args.NewValue.ToString(\"F3\");\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Frame to Border Conversion\nDESCRIPTION: This example shows how to replace a Frame control with a Border control in XAML, including mapping properties like BorderColor to Stroke and CornerRadius to StrokeShape. It also highlights the need to duplicate Margin as Padding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_23\n\nLANGUAGE: XAML\nCODE:\n```\n<Frame BorderColor=\"DarkGray\"\n       CornerRadius=\"5\"\n       Margin=\"20\"\n       HeightRequest=\"360\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\" />\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<Border Stroke=\"DarkGray\"\n        StrokeShape=\"RoundRectangle 5\"\n        Margin=\"20\"\n        Padding=\"20\"\n        HeightRequest=\"360\"\n        HorizontalOptions=\"Center\"\n        VerticalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Launching System Browser - C#\nDESCRIPTION: This code snippet shows how to launch the system web browser with a specified URI using the Launcher class from Microsoft.Maui.Essentials. It calls the Launcher.OpenAsync method with a string or Uri argument representing the URL to open in the browser.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/webview.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nawait Launcher.OpenAsync(\"https://learn.microsoft.com/dotnet/maui\");\n```\n\n----------------------------------------\n\nTITLE: Set EmptyView with Template in C#\nDESCRIPTION: Demonstrates setting the EmptyView property to a custom type and using EmptyViewTemplate to define its appearance in C#. Creates and assigns an EmptyViewTemplate using a DataTemplate with a label.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/carouselview/emptyview.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSearchBar searchBar = new SearchBar { ... };\nCarouselView carouselView = new CarouselView\n{\n    EmptyView = new FilterData { Filter = searchBar.Text },\n    EmptyViewTemplate = new DataTemplate(() =>\n    {\n        return new Label { ... };\n    })\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Remote Notification Registration in iOS - C#\nDESCRIPTION: This method is called when the application fails to register for remote notifications. It logs the error description to the debug output. It is important to implement robust logging and error handling in production scenarios.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\n[Export(\"application:didFailToRegisterForRemoteNotificationsWithError:\")]\n    public void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error)\n    {\n        Debug.WriteLine(error.Description);\n    }\n```\n\n----------------------------------------\n\nTITLE: Resolving IPushDemoNotificationActionService C#\nDESCRIPTION: Resolves `IPushDemoNotificationActionService` in the `App` constructor and subscribes to the `ActionTriggered` event. This sets up the application to receive and handle push notification actions. The constructor also assigns the resolved service to the `_actionService` backing field.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\npublic App(IPushDemoNotificationActionService service)\n{\n    InitializeComponent();\n\n    _actionService = service;\n    _actionService.ActionTriggered += NotificationActionTriggered;\n\n    MainPage = new AppShell();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic App(IPushDemoNotificationActionService service)\n{\n    InitializeComponent();\n\n    _actionService = service;\n    _actionService.ActionTriggered += NotificationActionTriggered;\n}\n```\n\n----------------------------------------\n\nTITLE: NC Packet Forwarding ZSH\nDESCRIPTION: This command uses `nc` (netcat) to forward TCP packets. It creates a named pipe `backpipe` in the `/tmp` directory, then listens on port 5555 for incoming connections and forwards them to the Android emulator's ADB port (127.0.0.1:5555). This allows traffic from the Windows VM to reach the emulator running on the Mac. It requires `nc` to be installed and running on the Mac.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ncd /tmp\nmkfifo backpipe\nnc -kl 5555 0<backpipe | nc 127.0.0.1 5555 > backpipe\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications Entitlement in XML\nDESCRIPTION: This snippet defines the push notifications entitlement, enabling the app to receive push notifications. The `aps-environment` key is set to `development`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<key>aps-environment</key>\n<string>development</string>\n```\n\n----------------------------------------\n\nTITLE: Implement ProcessNotificationActions Method - C#\nDESCRIPTION: This C# code defines the `ProcessNotificationActions` method in the `AppDelegate` class. It processes the notification data contained in the `userInfo` dictionary. It retrieves the value associated with the \"action\" key and calls `NotificationActionService.TriggerAction` if a valid action value is present.  It also handles potential exceptions during the action processing.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ProcessNotificationActions(NSDictionary userInfo)\n{\n    if (userInfo == null)\n        return;\n\n    try\n    {\n        // If your app isn't in the foreground, the notification goes to Notification Center.\n        // If your app is in the foreground, the notification goes directly to your app and you\n        // need to process the notification payload yourself.\n        var actionValue = userInfo.ObjectForKey(new NSString(\"action\")) as NSString;\n\n        if (!string.IsNullOrWhiteSpace(actionValue?.Description))\n            NotificationActionService.TriggerAction(actionValue.Description);\n    }\n    catch (Exception ex)\n    {\n        Debug.WriteLine(ex.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Byte to Bool Argument Conversion (C#)\nDESCRIPTION: Demonstrates the conversion of `byte` to `bool` for arguments passed from native code to managed methods, handling differences in type sizes and value representations using `argument != 0`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[UnmanagedCallersOnly]\nstatic void n_OnFocusChange_Landroid_view_View_Z(IntPtr jnienv, IntPtr native__this, IntPtr native_v, byte hasFocus)\n{\n    n_OnFocusChange_Landroid_view_View_Z(jnienv, native__this, native_v, hasFocus != 0);\n}\n\nstatic void n_OnFocusChange_Landroid_view_View_Z(IntPtr jnienv, IntPtr native__this, IntPtr native_v, bool hasFocus)\n{\n    var __this = global::Java.Lang.Object.GetObject<Android.Views.View.IOnFocusChangeListener>(jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;\n    var v = global::Java.Lang.Object.GetObject<Android.Views.View>(native_v, JniHandleOwnership.DoNotTransfer);\n    __this.OnFocusChange(v, hasFocus);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj (XML)\nDESCRIPTION: This XML snippet shows how to configure the `MauiAsset` build action within the `.csproj` file to include raw assets for deployment with the application. The `LogicalName` attribute specifies how the asset's path will be constructed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/navigation/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Reduce Elements Bad XAML\nDESCRIPTION: This example demonstrates a verbose layout with multiple VerticalStackLayout elements each containing a single Label.  This increases the number of elements the layout engine must process and should be optimized.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/deployment/performance.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <VerticalStackLayout Padding=\"20,20,0,0\">\n        <Label Text=\"Hello\" />\n    </VerticalStackLayout>\n    <VerticalStackLayout Padding=\"20,20,0,0\">\n        <Label Text=\"Welcome to the App!\" />\n    </VerticalStackLayout>\n    <VerticalStackLayout Padding=\"20,20,0,0\">\n        <Label Text=\"Downloading Data...\" />\n    </VerticalStackLayout>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Adding Using Statements for NotificationsController in C#\nDESCRIPTION: This C# code snippet shows the required 'using' statements for the NotificationsController class. These namespaces provide access to attributes for data validation, HTTP status codes, authorization, and MVC functionalities, as well as models and services used in the controller. Required dependencies for using the code in NotificationsController.cs\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\nusing System.Net;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing PushNotificationsAPI.Models;\nusing PushNotificationsAPI.Services;\n```\n\n----------------------------------------\n\nTITLE: Width CSS in .NET MAUI\nDESCRIPTION: Sets the width of a .NET MAUI VisualElement. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_58\n\nLANGUAGE: CSS\nCODE:\n```\nwidth: 320;\n```\n\n----------------------------------------\n\nTITLE: Configure Project Build Settings (PropertyGroup)\nDESCRIPTION: This XML snippet configures the project build settings for Windows Release builds. It enables Appx package signing and specifies the certificate thumbprint. Replace `A10612AF095FD8F8255F4C6691D88F79EF2B135E` with the actual thumbprint of your certificate. The second PropertyGroup fixes a Windows SDK bug.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/deployment/publish-cli.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows' and '$(Configuration)' == 'Release'\">\n    <AppxPackageSigningEnabled>true</AppxPackageSigningEnabled>\n    <PackageCertificateThumbprint>A10612AF095FD8F8255F4C6691D88F79EF2B135E</PackageCertificateThumbprint>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows' and '$(RuntimeIdentifierOverride)' != ''\">\n    <RuntimeIdentifier>$(RuntimeIdentifierOverride)</RuntimeIdentifier>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Toggling DetectReadingOrderFromContent in C#\nDESCRIPTION: This C# snippet demonstrates how to toggle the `DetectReadingOrderFromContent` property of an Editor control on Windows. It retrieves the current value using `GetDetectReadingOrderFromContent()` and then sets the opposite value using `SetDetectReadingOrderFromContent()`. This allows for dynamically enabling or disabling reading order detection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/windows/platform-specifics/inputview-reading-order.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\neditor.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().SetDetectReadingOrderFromContent(!editor.On<Microsoft.Maui.Controls.PlatformConfiguration.Windows>().GetDetectReadingOrderFromContent());\n```\n\n----------------------------------------\n\nTITLE: Defining Embedded Platform Application\nDESCRIPTION: This code snippet defines the `EmbeddedPlatformApplication` class, which implements `IPlatformApplication` for .NET MAUI embedding. It initializes the root context and application context, and provides access to the application and services.  It uses preprocessor directives for platform-specific implementations.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#if ANDROID\nusing PlatformApplication = Android.App.Application;\n#elif IOS || MACCATALYST\nusing PlatformApplication = UIKit.IUIApplicationDelegate;\n#elif WINDOWS\nusing PlatformApplication = Microsoft.UI.Xaml.Application;\n#endif\n\nnamespace Microsoft.Maui.Controls;\n\ninternal class EmbeddedPlatformApplication : IPlatformApplication\n{\n    private readonly MauiContext rootContext;\n    private readonly IMauiContext applicationContext;\n\n    public IServiceProvider Services { get; }\n    public IApplication Application { get; }\n\n    public EmbeddedPlatformApplication(IServiceProvider services)\n    {\n        IPlatformApplication.Current = this;\n\n#if ANDROID\n        var platformApp = services.GetRequiredService<PlatformApplication>();\n        rootContext = new MauiContext(services, platformApp);\n#else\n        rootContext = new MauiContext(services);\n#endif\n\n        applicationContext = MakeApplicationScope(rootContext);\n        Services = applicationContext.Services;\n        Application = Services.GetRequiredService<IApplication>();\n    }\n\n    private static IMauiContext MakeApplicationScope(IMauiContext rootContext)\n    {\n        var scopedContext = new MauiContext(rootContext.Services);\n        InitializeScopedServices(scopedContext);\n        return scopedContext;\n    }\n\n    private static void InitializeScopedServices(IMauiContext scopedContext)\n    {\n        var scopedServices = scopedContext.Services.GetServices<IMauiInitializeScopedService>();\n\n        foreach (var service in scopedServices)\n            service.Initialize(scopedContext.Services);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaned Up AboutPage Code-Behind C#\nDESCRIPTION: This code snippet shows the updated AboutPage.xaml.cs file after removing the event handler associated with the button click. It now only includes the constructor, since the view is now bound to the viewmodel.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/includes/viewmodel-about.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Notes.Views;\n\npublic partial class AboutPage : ContentPage\n{\n\tpublic AboutPage()\n\t{\n\t\tInitializeComponent();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Draw an Ellipse on ICanvas in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to draw a red ellipse on an ICanvas object using the DrawEllipse method. It sets the stroke color to red and the stroke size to 4 before drawing the ellipse with dimensions 100x50 at coordinates (10, 10).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/draw.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncanvas.StrokeColor = Colors.Red;\ncanvas.StrokeSize = 4;\ncanvas.DrawEllipse(10, 10, 100, 50);\n```\n\n----------------------------------------\n\nTITLE: AlignSelf Property Usage in XAML\nDESCRIPTION: This snippet demonstrates how to set the AlignSelf property on a Label within a FlexLayout in XAML. This property controls the alignment of an individual child along the cross axis, overriding the FlexLayout's AlignItems property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/flexlayout.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label FlexLayout.AlignSelf=\"Center\"\n       ... />\n```\n\n----------------------------------------\n\nTITLE: Xamarin.Android supported ABIs\nDESCRIPTION: This snippet shows the property `AndroidSupportedAbis` which is used in Xamarin.Android projects to specify the supported architectures.  This should be replaced with the `.NET` RuntimeIdentifiers to support the same architectures.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-projects.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <!-- Used in Xamarin.Android projects -->\n  <AndroidSupportedAbis>armeabi-v7a;arm64-v8a;x86;x86_64</AndroidSupportedAbis>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Digital Asset Links API Usage HTML\nDESCRIPTION: This HTML snippet provides the URL for using Google's digital asset links API to confirm that the digital assets file is properly formatted and hosted. Replace `<WEB SITE ADDRESS>` with the actual address of your website. This API call checks for the association between the website and the app based on the `assetlinks.json` file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/app-links.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nhttps://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=\n  https://<WEB SITE ADDRESS>:&relation=delegate_permission/common.handle_all_urls\n```\n\n----------------------------------------\n\nTITLE: Set BindingContext using Self Binding in XAML\nDESCRIPTION: This example sets the BindingContext of a ContentPage to a property on itself using the Self relative binding. This allows the page to bind to a viewmodel instance defined in the code-behind.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/data-binding/relative-bindings.md#_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage ...\n             xmlns:local=\"clr-namespace:DataBindingDemos\"\n             BindingContext=\"{Binding Source={RelativeSource Self}, Path=DefaultViewModel}\"\n             x:DataType=\"local:PeopleViewModel\">\n    <StackLayout>\n        <ListView ItemsSource=\"{Binding Employees}\">\n            ...\n        </ListView>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add VIBRATE permission to AndroidManifest.xml - XML\nDESCRIPTION: This XML code snippet shows how to add the VIBRATE permission to the Android project by adding the `<uses-permission>` element to the _Platforms/Android/AndroidManifest.xml_ file. This permission is necessary for the application to access the device's vibration feature.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/vibrate.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n----------------------------------------\n\nTITLE: Flex Wrap CSS in .NET MAUI\nDESCRIPTION: Sets whether the flex items should wrap or not in a .NET MAUI VisualElement. Valid values are nowrap, wrap, reverse, wrap-reverse, or initial.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_26\n\nLANGUAGE: CSS\nCODE:\n```\nflex-wrap: wrap-reverse;\n```\n\n----------------------------------------\n\nTITLE: Handling Swipe Events C#\nDESCRIPTION: This C# code snippet shows how to implement the 'OnSwiped' event handler to respond to recognized swipe gestures.  It uses a switch statement to determine the direction of the swipe and execute corresponding logic. Requires the SwipedEventArgs and SwipeDirection enum from .NET MAUI.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/gestures/swipe.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnSwiped(object sender, SwipedEventArgs e)\n{\n    switch (e.Direction)\n    {\n        case SwipeDirection.Left:\n            // Handle the swipe\n            break;\n        case SwipeDirection.Right:\n            // Handle the swipe\n            break;\n        case SwipeDirection.Up:\n            // Handle the swipe\n            break;\n        case SwipeDirection.Down:\n            // Handle the swipe\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Slider Setting Max and Min in C#\nDESCRIPTION: This snippet shows setting the Maximum and Minimum properties of a Slider, demonstrating the initial state of Value after Minimum is set.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nSlider slider = new Slider\n{\n    Maximum = 20,\n    Minimum = 10\n};\n```\n\n----------------------------------------\n\nTITLE: Create New .NET MAUI App (zsh)\nDESCRIPTION: This command creates a new .NET MAUI application named 'MyMauiApp' using the .NET CLI. It uses the `dotnet new` command with the `maui` template and the `-n` parameter to specify the project name. The command requires the .NET MAUI workload to be installed and creates a new project directory with the specified name.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/install-create-macos.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ndotnet new maui -n \"MyMauiApp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Bind Metadata for Android Library\nDESCRIPTION: This XML snippet demonstrates how to set the `Bind` metadata to `false` for a `.jar` file.  This prevents the creation of C# bindings for the Java types within the specified `.jar` file, while still including the `.jar` in the output package. The `Update` attribute is used to modify the existing item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <AndroidLibrary Update=\"foo.jar\" Bind=\"false\">\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Open/Close Flyout with Binding XAML\nDESCRIPTION: This XAML snippet shows how to bind the `FlyoutIsPresented` property to a boolean value in the view model. This allows the flyout's open/closed state to be controlled programmatically through data binding.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_31\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutIsPresented=\"{Binding IsFlyoutOpen}\">\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Disabling asset file packaging in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to disable asset file resource packaging in a .NET MAUI project. By setting the `EnableMauiAssetProcessing` property to `false` in the first `PropertyGroup` node, asset file resources won't undergo processing during the build.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<EnableMauiAssetProcessing>false</EnableMauiAssetProcessing>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign in with Apple Entitlement in XML\nDESCRIPTION: This snippet defines the sign in with Apple entitlement, enabling users to authenticate with their Apple ID. The `com.apple.developer.applesignin` key is an array of strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Background Color in C# for iOS\nDESCRIPTION: This C# code snippet demonstrates how to set the default background color of a ViewCell programmatically using the fluent API and the iOS platform-specific configurations. It utilizes the Cell.On<iOS>() extension method and SetDefaultBackgroundColor to set the color to Teal.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/cell-background-color.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nViewCell viewCell = new ViewCell { View = ... };\nviewCell.On<iOS>().SetDefaultBackgroundColor(Colors.Teal);\n```\n\n----------------------------------------\n\nTITLE: MSBuild ItemGroup for Windows Image Localization\nDESCRIPTION: This MSBuild snippet ensures that localized images within the *Platforms\\Windows\\Assets\\Images* folder and its subfolders are copied to the root of the app package during the build process.  It is designed to be included in the .csproj file. It uses conditional logic to only apply when targeting Windows (`$(TargetFramework.Contains('-windows'))`).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/localization.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"$(TargetFramework.Contains('-windows'))\">\n  <Content Include=\"Platforms\\Windows\\Assets\\Images\\**\" TargetPath=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Set Current Flyout Item XAML\nDESCRIPTION: This XAML snippet sets the `CurrentItem` property to a specific `ShellContent` object (aboutItem), making it the selected and displayed item when the app is first run.  An implicit conversion wraps the `ShellContent` object in a `Tab` object, which is wrapped in a `FlyoutItem` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_27\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       CurrentItem=\"{x:Reference aboutItem}\">\n    <FlyoutItem FlyoutDisplayOptions=\"AsMultipleItems\">\n        ...\n    </FlyoutItem>\n    <ShellContent x:Name=\"aboutItem\"\n                  Title=\"About\"\n                  Icon=\"info.png\"\n                  ContentTemplate=\"{DataTemplate views:AboutPage}\" />\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Set JavaScript Invocation Target\nDESCRIPTION: This C# code demonstrates how to set the target object for JavaScript method calls using the `SetInvokeJavaScriptTarget` method of the `HybridWebView` control.  This allows the javascript to call the public methods of the specified .NET object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        hybridWebView.SetInvokeJavaScriptTarget(this);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Path in user.config (XML)\nDESCRIPTION: This XML snippet demonstrates how to manually set the `AndroidSdkPath` attribute within the `user.config` file to point to the correct location of the Android SDK on your system. This is necessary when the Android SDK is installed in a non-standard location and the Android Device Manager is unable to find it. The `SdkLibLastWriteTimeUtcTicks` attribute stores the last write time of the SDK libraries in UTC ticks.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/device-manager.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<UserSettings SdkLibLastWriteTimeUtcTicks=\"636409365200000000\" AndroidSdkPath=\"C:\\\\Programs\\\\Android\\\\SDK\" />\n```\n\n----------------------------------------\n\nTITLE: Creating an ArcSegment in PathGeometry with XAML\nDESCRIPTION: This code snippet demonstrates how to create an elliptical arc using PathGeometry, PathFigure, and ArcSegment in XAML. It defines a PathFigure with a StartPoint at (10,10) and an ArcSegment that draws an arc to the point (200,100) with specified Size, RotationAngle, IsLargeArc, and SweepDirection properties. The Path is stroked in black.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/geometries.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Path Stroke=\"Black\">\n    <Path.Data>\n        <PathGeometry>\n            <PathGeometry.Figures>\n                <PathFigureCollection>\n                    <PathFigure StartPoint=\"10,10\">\n                        <PathFigure.Segments>\n                            <PathSegmentCollection>\n                                <ArcSegment Size=\"100,50\"\n                                            RotationAngle=\"45\"\n                                            IsLargeArc=\"True\"\n                                            SweepDirection=\"CounterClockwise\"\n                                            Point=\"200,100\" />\n                            </PathSegmentCollection>\n                        </PathFigure.Segments>\n                    </PathFigure>\n                </PathFigureCollection>\n            </PathGeometry.Figures>\n        </PathGeometry>\n    </Path.Data>\n</Path>\n```\n\n----------------------------------------\n\nTITLE: Slider Initialization Causing Exception in C#\nDESCRIPTION: This code snippet demonstrates a scenario where initializing a Slider with Minimum greater than the default Maximum will throw an exception. It highlights the importance of setting Maximum before Minimum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Throws an exception!\nSlider slider = new Slider\n{\n    Minimum = 10,\n    Maximum = 20\n};\n```\n\n----------------------------------------\n\nTITLE: Set iPad UI Idiom in .NET MAUI Mac Catalyst\nDESCRIPTION: This XML snippet configures the .NET MAUI Mac Catalyst app to use the iPad user interface idiom. It sets the UIDeviceFamily key to 2 in the Info.plist file, ensuring the app's UI is scaled to match the Mac display environment while maintaining an iPad-like appearance. This is the default behavior for Mac Catalyst apps.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/update-info-plist.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<key>UIDeviceFamily</key>\n<array>\n  <integer>2</integer>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Updating Video Position on iOS and Mac Catalyst using AVPlayer\nDESCRIPTION: This C# code snippet shows how to update the video position on iOS and Mac Catalyst using AVPlayer. The UpdateStatus and UpdatePosition methods are used to synchronize and seek the video position. The ConvertTime method is responsible for converting the CMTime to TimeSpan.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_67\n\nLANGUAGE: csharp\nCODE:\n```\nusing AVFoundation;\nusing AVKit;\nusing CoreMedia;\nusing Foundation;\nusing System.Diagnostics;\nusing UIKit;\nusing VideoDemos.Controls;\n\nnamespace VideoDemos.Platforms.MaciOS\n{\n    public class MauiVideoPlayer : UIView\n    {\n        AVPlayer _player;\n        AVPlayerItem _playerItem;\n        Video _video;\n        ...\n\n        TimeSpan ConvertTime(CMTime cmTime)\n        {\n            return TimeSpan.FromSeconds(Double.IsNaN(cmTime.Seconds) ? 0 : cmTime.Seconds);\n        }\n\n        public void UpdateStatus()\n        {\n            ...\n            if (_playerItem != null)\n            {\n                ...\n                _video.Position = ConvertTime(_playerItem.CurrentTime);\n            }\n        }\n\n        public void UpdatePosition()\n        {\n            TimeSpan controlPosition = ConvertTime(_player.CurrentTime);\n            if (Math.Abs((controlPosition - _video.Position).TotalSeconds) > 1)\n            {\n                _player.Seek(CMTime.FromSeconds(_video.Position.TotalSeconds, 1));\n            }\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset - XML\nDESCRIPTION: This snippet shows how to include raw assets in a MAUI project using the `MauiAsset` build action in the .csproj file. The `LogicalName` attribute ensures that the file structure is preserved during deployment, allowing access via `FileSystem` API.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/model/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Padding Left CSS in .NET MAUI\nDESCRIPTION: Sets the left padding for .NET MAUI Button, ImageButton, Layout, and Page. The value should be a double or initial to reset to default.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/styles/css.md#_snippet_45\n\nLANGUAGE: CSS\nCODE:\n```\npadding-left: 3;\n```\n\n----------------------------------------\n\nTITLE: C# Interface with Constant (C# 8 and later)\nDESCRIPTION: This C# code snippet shows how Java interface constants are represented in C# 8 and later. The constant is directly placed in the interface using the `public static` modifier. This change may break compatibility with existing code that depended on the legacy alternative class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFoo\n{\n    public static int Bar = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Permission for Network Access\nDESCRIPTION: This code snippet demonstrates how to add the AccessNetworkState permission to the Android project by adding an assembly attribute in the MainApplication.cs file. This permission allows the app to determine the network connection state.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/communication/networking.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.AccessNetworkState)]\n```\n\n----------------------------------------\n\nTITLE: HybridWebView JavaScript Library\nDESCRIPTION: This JavaScript library provides functions to initialize the HybridWebView and facilitate communication between JavaScript and .NET MAUI. It detects the platform (Windows, iOS, Android) and uses the appropriate method for sending and receiving messages. The library also includes functions for invoking .NET methods from JavaScript.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/hybridwebview.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.HybridWebView = {\n    \"Init\": function Init() {\n        function DispatchHybridWebViewMessage(message) {\n            const event = new CustomEvent(\"HybridWebViewMessageReceived\", { detail: { message: message } });\n            window.dispatchEvent(event);\n        }\n\n        if (window.chrome && window.chrome.webview) {\n            // Windows WebView2\n            window.chrome.webview.addEventListener('message', arg => {\n                DispatchHybridWebViewMessage(arg.data);\n            });\n        }\n        else if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.webwindowinterop) {\n            // iOS and MacCatalyst WKWebView\n            window.external = {\n                \"receiveMessage\": message => {\n                    DispatchHybridWebViewMessage(message);\n                }\n            };\n        }\n        else {\n            // Android WebView\n            window.addEventListener('message', arg => {\n                DispatchHybridWebViewMessage(arg.data);\n            });\n        }\n    },\n\n    \"SendRawMessage\": function SendRawMessage(message) {\n        window.HybridWebView.__SendMessageInternal('__RawMessage', message);\n    },\n\n    \"InvokeDotNet\": async function InvokeDotNetAsync(methodName, paramValues) {\n        const body = {\n            MethodName: methodName\n        };\n\n        if (typeof paramValues !== 'undefined') {\n            if (!Array.isArray(paramValues)) {\n                paramValues = [paramValues];\n            }\n\n            for (var i = 0; i < paramValues.length; i++) {\n                paramValues[i] = JSON.stringify(paramValues[i]);\n            }\n\n            if (paramValues.length > 0) {\n                body.ParamValues = paramValues;\n            }\n        }\n\n        const message = JSON.stringify(body);\n\n        var requestUrl = `${window.location.origin}/__hwvInvokeDotNet?data=${encodeURIComponent(message)}`;\n\n        const rawResponse = await fetch(requestUrl, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n        const response = await rawResponse.json();\n\n        if (response) {\n            if (response.IsJson) {\n                return JSON.parse(response.Result);\n            }\n\n            return response.Result;\n        }\n\n        return null;\n    },\n\n    \"__SendMessageInternal\": function __SendMessageInternal(type, message) {\n\n        const messageToSend = type + '|' + message;\n\n        if (window.chrome && window.chrome.webview) {\n            // Windows WebView2\n            window.chrome.webview.postMessage(messageToSend);\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Enable Mono Interpreter for Mac Catalyst Release Builds (MSBuild)\nDESCRIPTION: This snippet shows how to enable the Mono interpreter for Mac Catalyst release builds targeting the ARM64 architecture.  The `$(UseInterpreter)` property is set to `true` within a `PropertyGroup` conditioned on the `RuntimeIdentifier` being `maccatalyst-arm64` and the `Configuration` being `Release`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/interpreter.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup Condition=\"'$(RuntimeIdentifier)' == 'maccatalyst-arm64' and '$(Configuration)' == 'Release'\">\n    <UseInterpreter>true</UseInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj - XML\nDESCRIPTION: This snippet shows how to include raw assets for deployment using the `MauiAsset` build action in your .csproj file. The `LogicalName` attribute allows you to specify the path and filename within the application package. The `Resources\\Raw\\**` glob pattern includes all files within the `Resources\\Raw` directory and its subdirectories.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-app/snippets/shell/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Disposing Video Player on iOS/Mac Catalyst in MAUI\nDESCRIPTION: This code snippet shows how to properly dispose of the video player on iOS and Mac Catalyst in a MAUI application, to prevent videos from continuing to play after the page is navigated away from. It overrides the `Dispose` method to set the `ReplaceCurrentItemWithPlayerItem` to `null`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void Dispose(bool disposing)\n{\n    if (disposing)\n    {\n        if (_player != null)\n        {\n            _player.ReplaceCurrentItemWithPlayerItem(null);\n            ...\n        }\n        ...\n    }\n    base.Dispose(disposing);\n}\n```\n\n----------------------------------------\n\nTITLE: Define IDeviceInstallationService Interface C#\nDESCRIPTION: Defines an interface for a service that provides device installation information. It includes properties for the device token and notification support, and methods for retrieving the device ID and creating a DeviceInstallation object. Platform-specific implementations are needed to get actual device data.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nusing PushNotificationsDemo.Models;\n\nnamespace PushNotificationsDemo.Services;\n\npublic interface IDeviceInstallationService\n{\n    string Token { get; set; }\n    bool NotificationsSupported { get; } \n    string GetDeviceId();\n    DeviceInstallation GetDeviceInstallation(params string[] tags);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Google Services JSON File to Android Project (XML)\nDESCRIPTION: This XML snippet configures the build action for the google-services.json file within the .NET MAUI Android project. It ensures that the file is included during the build process when the target framework is 'net8.0-android'. This configuration is essential for the Firebase integration to function correctly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup Condition=\"'$(TargetFramework)' == 'net8.0-android'\">\n  <GoogleServicesJson Include=\"Platforms\\Android\\google-services.json\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Create Distance Object Using FromMiles - C#\nDESCRIPTION: This C# code creates a Distance object using the FromMiles factory method, specifying the distance in miles.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nDistance distance3 = Distance.FromMiles(0.969);     // argument represents the number of miles\n```\n\n----------------------------------------\n\nTITLE: Slider with Negative Values in XAML\nDESCRIPTION: This XAML snippet shows how to set the Minimum and Maximum properties to negative values, maintaining the correct order where Minimum is always less than Maximum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/slider.md#_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<Slider Minimum=\"-20\"\n        Maximum=\"-10\" ... />\n```\n\n----------------------------------------\n\nTITLE: Build and Run on Specific iOS Simulator\nDESCRIPTION: This command builds and runs the .NET MAUI app on a specific iOS simulator, identified by its UDID. It uses the `_DeviceName` MSBuild property to specify the target simulator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/cli.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=MY_SPECIFIC_UDID\n```\n\nLANGUAGE: zsh\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=E25BBE37-69BA-4720-B6FD-D54C97791E79\n```\n\n----------------------------------------\n\nTITLE: Add Scene Manifest to Info.plist - XML\nDESCRIPTION: This XML snippet adds the `UIApplicationSceneManifest` to the `Info.plist` file in an iOS/Mac Catalyst project. This configuration supports multiple scenes and defines the scene delegate class. Proper setup is critical for modern iOS app architecture.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/native-embedding.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIApplicationSceneManifest</key>\n<dict>\n  <key>UIApplicationSupportsMultipleScenes</key>\n  <true/>\n  <key>UISceneConfigurations</key>\n  <dict>\n    <key>UIWindowSceneSessionRoleApplication</key>\n    <array>\n      <dict>\n        <key>UISceneConfigurationName</key>\n        <string>Default Configuration</string>\n        <key>UISceneDelegateClassName</key>\n        <string>SceneDelegate</string>\n      </dict>\n    </array>\n  </dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Deleting iOS Simulators on Mac\nDESCRIPTION: This command deletes all shutdown iOS simulators on the connected Mac build host. It uses `xcrun simctl list` to get a list of simulators, filters for the ones that are shut down, and then deletes them using `xcrun simctl delete`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/remote-simulator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nxcrun simctl list | grep -w \"Shutdown\"  | grep -o \"([-A-Z0-9]*)\" | sed 's/[\\(\\)]//g' | xargs -I uuid xcrun simctl delete  uuid\n```\n\n----------------------------------------\n\nTITLE: Setting Swipe Threshold in XAML\nDESCRIPTION: This XAML snippet shows how to set the Threshold property of a SwipeView. The Threshold property determines the minimum distance (in device-independent units) the SwipeView must be swiped before the SwipeItems are fully revealed. In this example, the SwipeView must be swiped for 200 units.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/swipeview.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<SwipeView Threshold=\"200\">\n    <SwipeView.LeftItems>\n        <SwipeItems>\n            <SwipeItem Text=\"Favorite\"\n                       IconImageSource=\"favorite.png\"\n                       BackgroundColor=\"LightGreen\" />\n        </SwipeItems>\n    </SwipeView.LeftItems>\n    <!-- Content -->\n</SwipeView>\n```\n\n----------------------------------------\n\nTITLE: Data Binding XAML Example\nDESCRIPTION: This snippet shows how to use data binding in XAML to display data passed via the `BindingContext`. The `Label` controls bind to the `Name` and `Occupation` properties of the `Contact` object.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/pages/navigationpage.md#_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:MyMauiApp\"\n             x:Class=\"MyMauiApp.DetailsPage\"\n             Title=\"Details\"\n             x:DataType=\"local:Contact\">\n    <StackLayout>\n        <Label Text=\"{Binding Name}\" />\n        <Label Text=\"{Binding Occupation}\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Install .NET MAUI workload on Linux using dotnet CLI\nDESCRIPTION: This snippet shows how to install the .NET MAUI workload for Android development on Linux using the dotnet command-line interface. It opens a terminal and executes the command `dotnet workload install maui-android`. This command installs the necessary components for .NET MAUI Android development on Linux.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/get-started/installation.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet workload install maui-android\n```\n\n----------------------------------------\n\nTITLE: iOS/Mac Catalyst Location Usage Description - XML\nDESCRIPTION: This XML snippet shows how to add the `NSLocationWhenInUseUsageDescription` key to the Info.plist file for iOS and Mac Catalyst. This key specifies a message that is displayed to the user when the app requests location access. The string value should explain why the app needs location access.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/geolocation.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Fill in a reason why your app needs access to location.</string>\n```\n\n----------------------------------------\n\nTITLE: Drawing a Dashed Polyline in XAML\nDESCRIPTION: This XAML code snippet shows how to create a dashed polyline with a red stroke. The StrokeDashArray and StrokeDashOffset properties control the appearance of the dashes.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/shapes/polyline.md#_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Polyline Points=\"0,0 10,30 15,0 18,60 23,30 35,30 40,0 43,60 48,30 100,30\"\n          Stroke=\"Red\"\n          StrokeThickness=\"2\"\n          StrokeDashArray=\"1,1\"\n          StrokeDashOffset=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Defining an Adaptive Launcher Icon in .NET MAUI project file\nDESCRIPTION: This XML snippet demonstrates defining an icon that is used as an adaptive launcher icon on Android.  The ForegroundFile and ForegroundScale attributes are used to configure the adaptive icon.  Color can also be applied to the background.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" ForegroundScale=\"0.65\" Color=\"#512BD4\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Updating SupportedOSPlatformVersion in .csproj\nDESCRIPTION: This XML snippet shows how to update the SupportedOSPlatformVersion build properties for iOS and Mac Catalyst in the .csproj file. It sets the minimum supported OS version to 15.0.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_27\n\nLANGUAGE: XML\nCODE:\n```\n<SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'\">15.0</SupportedOSPlatformVersion>\n<SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'\">15.0</SupportedOSPlatformVersion>\n```\n\n----------------------------------------\n\nTITLE: Create Keyboard Accelerator in C#\nDESCRIPTION: This C# snippet shows how to create a keyboard accelerator programmatically and add it to the KeyboardAccelerators collection of a MenuFlyoutItem. It creates a shortcut using the Ctrl modifier and the X key.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncutMenuFlyoutItem.KeyboardAccelerators.Add(new KeyboardAccelerator\n{\n    Modifiers = KeyboardAcceleratorModifiers.Ctrl,\n    Key = \"X\"\n});\n```\n\n----------------------------------------\n\nTITLE: Add Foldable Initialization in .NET MAUI C#\nDESCRIPTION: This C# code snippet shows how to add the `UseFoldable()` initialization method to the `MauiApp` class in the `CreateMauiApp` method. This initialization is required to detect changes in the app's state, such as being spanned across a fold. The `Microsoft.Maui.Foldable` namespace is also required.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/twopaneview.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Foldable; // ADD THIS NAMESPACE\n...\npublic static MauiApp CreateMauiApp()\n{\n    var builder = MauiApp.CreateBuilder();\n    ...\n    builder.UseFoldable(); // ADD THIS LINE TO THE TEMPLATE\n    return builder.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: InitializeComponent Method in .NET MAUI C#\nDESCRIPTION: This code snippet shows the default implementation of the InitializeComponent method. The method loads the XAML file associated with the current class (e.g. MainPage).  It's automatically generated during the build process by a source generator.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/runtime-load.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LabeledBy Property in C#\nDESCRIPTION: This code snippet demonstrates how to use the `LabeledBy` attached property in C# to associate a `Label` with an `Entry` for accessibility purposes. The `LabeledBy` property allows another element to define accessibility information for the current element. Note: This property has been deprecated in .NET 8 and is not supported on iOS.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/accessibility.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nLabel label = new Label { Text = \"Enter your name: \" };\nEntry entry = new Entry();\nAutomationProperties.SetIsInAccessibleTree(entry, true);\nAutomationProperties.SetLabeledBy(entry, label);\n```\n\n----------------------------------------\n\nTITLE: Java Nested Interface Example\nDESCRIPTION: This Java code demonstrates a nested class defined within an interface. C# traditionally did not allow this structure, requiring the nested type to be moved to a top-level type.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic interface Foo {\n     public class Bar { }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable XAML Compilation - Type Level - C#\nDESCRIPTION: This C# code snippet demonstrates how to disable XAML compilation for a specific class (`MyPage`) by applying the `XamlCompilationAttribute` to the class. This means that only the XAML associated with `MyPage` will not be compiled, while other XAML in the assembly may still be compiled.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/xamlc.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[XamlCompilation (XamlCompilationOptions.Skip)]\npublic partial class MyPage : ContentPage\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Alignment Preferences in StackLayout (XAML)\nDESCRIPTION: This XAML snippet demonstrates how to set alignment preferences (Start, Center, End, Fill) for Label objects within a vertical StackLayout. The HorizontalOptions property is used to control the horizontal alignment of each label within the stack.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/layouts/stacklayout.md#_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"StackLayoutDemos.Views.XAML.AlignmentPage\"\n             Title=\"Alignment demo\">\n    <StackLayout Margin=\"20\"\n                 Spacing=\"6\">\n        <Label Text=\"Start\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Start\" />\n        <Label Text=\"Center\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Center\" />\n        <Label Text=\"End\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"End\" />\n        <Label Text=\"Fill\"\n               BackgroundColor=\"Gray\"\n               HorizontalOptions=\"Fill\" />\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Set Item Sizing Strategy XAML\nDESCRIPTION: This code snippet demonstrates how to set the `ItemSizingStrategy` property of a `CollectionView` to `MeasureFirstItem` using XAML. This strategy improves performance when all items are intended to have the same size by only measuring the first item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/collectionview/layout.md#_snippet_23\n\nLANGUAGE: xaml\nCODE:\n```\n<CollectionView ...\n                ItemSizingStrategy=\"MeasureFirstItem\">\n    ...\n</CollectionView>\n```\n\n----------------------------------------\n\nTITLE: FileProvider Testing Mode Entitlement XML\nDESCRIPTION: Defines the FileProvider testing mode entitlement for enabling a test mode with more control over the system's behavior during testing. It uses the `com.apple.developer.fileprovider.testing-mode` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.fileprovider.testing-mode</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Opting into Legacy Host Content Behavior in C#\nDESCRIPTION: This code snippet opts into using the legacy `0.0.0.0` address to host BlazorWebView content by setting an `AppContext` switch in the `MauiProgram` class. This is necessary if the default `0.0.0.1` address is not working. This switch should be set before any BlazorWebView instances are created.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic MauiProgram()\n{\n    // Set this switch to use the LEGACY behavior of always using 0.0.0.0 to host BlazorWebView\n    AppContext.SetSwitch(\"BlazorWebView.AppHostAddressAlways0000\", true);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Visibility in C# (iOS)\nDESCRIPTION: This C# snippet shows how to programmatically control the status bar visibility and animation on an iOS Page using the fluent API.  It uses the `On<iOS>()` extension method to target the iOS platform specifically.  The `SetPrefersStatusBarHidden` and `SetPreferredStatusBarUpdateAnimation` methods configure the status bar behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-status-bar-visibility.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Maui.Controls.PlatformConfiguration;\nusing Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;\n...\n\nOn<iOS>().SetPrefersStatusBarHidden(StatusBarHiddenMode.True)\n         .SetPreferredStatusBarUpdateAnimation(UIStatusBarAnimation.Fade);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Horizontal Layout in XAML\nDESCRIPTION: This XAML snippet illustrates setting the HorizontalOptions property of a DatePicker to \"Center\". The documentation advises against using unconstrained horizontal layout options like Center, Start, or End due to potential display width issues.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/datepicker.md#_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<DatePicker ···\n            HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Enable FlyoutPage Shadow in XAML - iOS\nDESCRIPTION: This XAML snippet demonstrates how to enable the shadow effect on the detail page of a FlyoutPage when revealing the flyout page. It uses the ios namespace to set the FlyoutPage.ApplyShadow property to true. This requires the Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific namespace to be imported.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/flyoutpage-shadow.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<FlyoutPage ...\n            xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n            ios:FlyoutPage.ApplyShadow=\"true\">\n    ...\n</FlyoutPage>\n```\n\n----------------------------------------\n\nTITLE: Adding Platform Behavior in C#\nDESCRIPTION: This C# snippet demonstrates programmatically adding a `TintColorBehavior` to an `Image` control. An `Image` object is created with specified properties, and then a new instance of `TintColorBehavior` is added to its `Behaviors` collection.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/behaviors.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nImage image = new Image { Source = \"dotnet_bot.png\", HeightRequest = 200, HorizontalOptions = LayoutOptions.Center };\nimage.Behaviors.Add(new TintColorBehavior());\n```\n\n----------------------------------------\n\nTITLE: Specifying WRITE_EXTERNAL_STORAGE Permission in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add the WRITE_EXTERNAL_STORAGE permission to the AndroidManifest.xml file. This permission is required if your app targets API 22 or lower.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Check Windows Version At Least (C#)\nDESCRIPTION: This C# snippet shows how to add guards around calls to newer APIs, ensuring they are only called when running on a version of the OS that supports them. It uses the `OperatingSystem.IsWindowsVersionAtLeast` method to check the OS version.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/uwp-projects.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nif (OperatingSystem.IsWindowsVersionAtLeast(10))\n{\n    // Use the API here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WeatherKit Entitlement in XML\nDESCRIPTION: This snippet demonstrates how to configure the WeatherKit entitlement using XML. The `com.apple.developer.weatherkit` key is used and set to `<true/>` to enable the entitlement.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_34\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.weatherkit</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Disable Flyout Vertical Scroll XAML\nDESCRIPTION: This XAML snippet demonstrates how to disable vertical scrolling in the flyout by setting the `Shell.FlyoutVerticalScrollMode` bindable property to `Disabled`. This prevents the flyout from scrolling vertically, even if the items don't fit.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_26\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...\n       FlyoutVerticalScrollMode=\"Disabled\">\n    ...\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Preventing Vector Image Resizing in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to prevent a vector image (such as an SVG file) from being resized during the build process. By setting the `Resize` attribute to `false`, the image will maintain its original dimensions when added to the app package. This is useful when the image should not be scaled or when the dimensions specified in the image file should be used directly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/images.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<MauiImage Include=\"Resources\\Images\\logo.svg\" Resize=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Access WiFi Information Entitlement XML\nDESCRIPTION: Defines the entitlement that allows an app to obtain information about the currently connected WiFi network.  It uses the `com.apple.developer.networking.wifi-info` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.networking.wifi-info</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Setting font size in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet shows how to set the font size of a Label control using the `FontSize` property in a .NET MAUI application. The size is specified as a double value and represents the font size in device-independent units.  This allows for scaling across different screen densities.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/fonts.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"Font size 24\"\n       FontSize=\"24\" />\n```\n\n----------------------------------------\n\nTITLE: Set Current Flyout Item C#\nDESCRIPTION: This C# snippet sets the `CurrentItem` property of the `Shell` to a `ShellContent` object named `aboutItem`. This selects and displays the specified item.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/flyout.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nCurrentItem = aboutItem;\n```\n\n----------------------------------------\n\nTITLE: Toggle fast scrolling in ListView using C# - .NET MAUI Android\nDESCRIPTION: This C# snippet demonstrates how to toggle fast scrolling on a .NET MAUI ListView on Android. It utilizes the `IsFastScrollEnabled` method to determine the current state and then uses the `SetIsFastScrollEnabled` method to set the opposite state. Requires `Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/platform-specifics/listview-fast-scrolling.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nlistView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().SetIsFastScrollEnabled(!listView.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().IsFastScrollEnabled());\n```\n\n----------------------------------------\n\nTITLE: Configuring Keychain Entitlement in XML\nDESCRIPTION: This snippet defines the Keychain entitlement, enabling multiple apps by the same team to share passwords. The `keychain-access-groups` key is an array of strings.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<key>keychain-access-groups</key>\n<array>\n  <string>$(AppIdentifierPrefix)com.companyname.test</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function using Easing Constructor in .NET MAUI\nDESCRIPTION: This code defines a custom easing function directly within the Easing constructor using a lambda expression. This example creates a dampened slow drop effect using Math.Cos and Math.Exp. The image appears to drop to its final position. It requires the Microsoft.Maui.Controls and System namespaces.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet10.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait image.TranslateToAsync(0, 200, 2000, new Easing (t => 1 - Math.Cos (10 * Math.PI * t) * Math.Exp (-5 * t)));\n```\n\n----------------------------------------\n\nTITLE: Configuring BlazorWebView AppHostAddress - .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to configure the AppHostAddress of a BlazorWebView in .NET MAUI using C#. Specifically, it shows how to opt into using the legacy 0.0.0.0 address by setting an AppContext switch in the MauiProgram class.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/whats-new/dotnet-9.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic MauiProgram()\n{\n    // Set this switch to use the LEGACY behavior of always using 0.0.0.0 to host BlazorWebView\n    AppContext.SetSwitch(\"BlazorWebView.AppHostAddressAlways0000\", true);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Protection Entitlement XML\nDESCRIPTION: Defines the data protection entitlement for using built-in encryption on supported devices. It uses the `com.apple.developer.default-data-protection` key of type `String`. `NSFileProtectionComplete` is the most common protection level. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.default-data-protection</key>\n<string>NSFileProtectionComplete</string>\n```\n\n----------------------------------------\n\nTITLE: Implement ReceivedRemoteNotification Method - C#\nDESCRIPTION: This C# code defines the `ReceivedRemoteNotification` method in the `AppDelegate` class. This method is called when the app receives a remote notification. It passes the notification information (`userInfo`) to the `ProcessNotificationActions` method for handling.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_63\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(\"application:didReceiveRemoteNotification:\")]\npublic void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)\n{\n    ProcessNotificationActions(userInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipath Entitlement in XML\nDESCRIPTION: This snippet defines the Multipath entitlement, enabling the app to use multipath protocols. The `com.apple.developer.networking.multipath` key is set to `true`.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.networking.multipath</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure the `MauiAsset` build action in the `.csproj` file to automatically deploy raw assets to the application package. The `Include` attribute specifies the files to include, and the `LogicalName` attribute defines the deployment path and filename.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/snippets/shared_1/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ContentView (XAML)\nDESCRIPTION: This XAML code snippet defines a custom ContentView called PersonView. It uses a Grid layout to display the Name, Age, and Location properties of a Person object, which are bound to Labels within the Grid. The x:DataType attribute enables compile-time binding validation.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/datatemplate.md#_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentView xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:DataTemplates\"\n             x:Class=\"DataTemplates.PersonView\"\n             x:DataType=\"local:Person\">\n     <Grid>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"0.5*\" />\n            <ColumnDefinition Width=\"0.2*\" />\n            <ColumnDefinition Width=\"0.3*\" />\n        </Grid.ColumnDefinitions>\n        <Label Text=\"{Binding Name}\" FontAttributes=\"Bold\" />\n        <Label Grid.Column=\"1\" Text=\"{Binding Age}\" />\n        <Label Grid.Column=\"2\" Text=\"{Binding Location}\" HorizontalTextAlignment=\"End\" />\n    </Grid>\n</ContentView>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Backwards Navigation in OnNavigating Event\nDESCRIPTION: This snippet demonstrates how to cancel backwards navigation based on the navigation source in the `OnNavigating` event handler.  It checks if the `Source` is `ShellNavigationSource.Pop` and cancels the navigation if it is.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/shell/navigation.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnNavigating(ShellNavigatingEventArgs args)\n{\n    base.OnNavigating(args);\n\n    // Cancel any back navigation.\n    if (args.Source == ShellNavigationSource.Pop)\n    {\n        args.Cancel();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Show Detailed Trim Warnings (XML)\nDESCRIPTION: This XML snippet shows how to enable individual warnings for all assemblies by setting the TrimmerSingleWarn MSBuild property to false in the project file. Setting this property allows for displaying all detailed warnings, instead of collapsing them to a single warning per assembly.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <TrimmerSingleWarn>false</TrimmerSingleWarn>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Getting Templates path with NSFileManager on Mac Catalyst (C#)\nDESCRIPTION: This snippet shows how to retrieve the Templates path on Mac Catalyst, combining the HomeDirectory with \"Templates\" using Path.Combine, emulating macOS. It bypasses Environment.GetFolderPath and utilizes Xamarin.Mac APIs.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/system-special-folders.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nPath.Combine(NSFileManager.HomeDirectory, \"Templates\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Stepper - Negative Values - XAML\nDESCRIPTION: This XAML code snippet demonstrates setting negative values for the Minimum and Maximum properties, ensuring that Minimum is always less than Maximum.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/stepper.md#_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<Stepper Minimum=\"-360\"\n         Maximum=\"-180\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTemplateSelector in C#\nDESCRIPTION: This C# code defines a MonkeyDataTemplateSelector class that inherits from DataTemplateSelector. It selects a DataTemplate based on the item's Location property, returning AmericanMonkey template if location contains 'America', otherwise returning OtherMonkey template.  Requires a Monkey model with a Location property.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/listview.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class MonkeyDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate AmericanMonkey { get; set; }\n    public DataTemplate OtherMonkey { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Monkey)item).Location.Contains(\"America\") ? AmericanMonkey : OtherMonkey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Picker UpdateMode in XAML for iOS\nDESCRIPTION: This XAML snippet demonstrates how to set the `UpdateMode` attached property of a `Picker` control to `WhenFinished`, which specifies that item selection occurs only when the Done button is pressed on iOS.  The `xmlns:ios` namespace is declared to access the iOS-specific attached property.  The `ContentPage` and `StackLayout` provide the layout context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/picker-selection.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\">\n    <StackLayout Margin=\"20\">\n        <Picker ... Title=\"Select a monkey\" ios:Picker.UpdateMode=\"WhenFinished\">\n          ...\n        </Picker>\n        ...\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Define VideoSource Class C#\nDESCRIPTION: This snippet defines an abstract base class `VideoSource` with static methods to create instances of derived classes for different video sources (URI, file, resource). It utilizes a `TypeConverter` to handle string-based source specifications in XAML. It's part of the `VideoDemos.Controls` namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\n\nnamespace VideoDemos.Controls\n{\n    [TypeConverter(typeof(VideoSourceConverter))]\n    public abstract class VideoSource : Element\n    {\n        public static VideoSource FromUri(string uri)\n        {\n            return new UriVideoSource { Uri = uri };\n        }\n\n        public static VideoSource FromFile(string file)\n        {\n            return new FileVideoSource { File = file };\n        }\n\n        public static VideoSource FromResource(string path)\n        {\n            return new ResourceVideoSource { Path = path };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RadioButton usage with ControlTemplate XAML\nDESCRIPTION: This XAML code demonstrates how to use RadioButton objects with the previously defined ControlTemplate, which is applied via an implicit style. The RadioButtons are placed within a StackLayout and grouped using RadioButtonGroup.GroupName.  Each RadioButton contains an image and label as content.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/radiobutton.md#_snippet_10\n\nLANGUAGE: xaml\nCODE:\n```\n<StackLayout>\n    <Label Text=\"What's your favorite animal?\" />\n    <StackLayout RadioButtonGroup.GroupName=\"animals\"\n                 Orientation=\"Horizontal\">\n        <RadioButton Value=\"Cat\">\n            <RadioButton.Content>\n                <StackLayout>\n                    <Image Source=\"cat.png\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"Center\" />\n                    <Label Text=\"Cat\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"End\" />\n                </StackLayout>\n            </RadioButton.Content>\n        </RadioButton>\n        <RadioButton Value=\"Dog\">\n            <RadioButton.Content>\n                <StackLayout>\n                    <Image Source=\"dog.png\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"Center\" />\n                    <Label Text=\"Dog\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"End\" />\n                </StackLayout>\n            </RadioButton.Content>\n        </RadioButton>\n        <RadioButton Value=\"Elephant\">\n            <RadioButton.Content>\n                <StackLayout>\n                    <Image Source=\"elephant.png\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"Center\" />\n                    <Label Text=\"Elephant\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"End\" />\n                </StackLayout>\n            </RadioButton.Content>\n        </RadioButton>\n        <RadioButton Value=\"Monkey\">\n            <RadioButton.Content>\n                <StackLayout>\n                    <Image Source=\"monkey.png\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"Center\" />\n                    <Label Text=\"Monkey\"\n                           HorizontalOptions=\"Center\"\n                           VerticalOptions=\"End\" />\n                </StackLayout>\n            </RadioButton.Content>\n        </RadioButton>\n    </StackLayout>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Loading a Local Image in C# (Implicit Conversion)\nDESCRIPTION: This C# code snippet demonstrates a simplified way to load and display a local image in a .NET MAUI application. It leverages the implicit conversion operator that allows directly assigning the filename string to the Source property of the Image control. The image file (dotnet_bot.png) should be located in the Resources\\Images folder of the project with its build action set to MauiImage.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/image.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nImage image = new Image { Source = \"dotnet_bot.png\" };\n```\n\n----------------------------------------\n\nTITLE: Apply same value to multiple platforms in OnPlatform using XAML\nDESCRIPTION: This snippet demonstrates how to specify multiple platforms for the same Value in OnPlatform. The Padding property is set to the same Thickness value (10,20,20,10) for both iOS and Android platforms.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/customize-ui-appearance.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyMauiApp.MainPage\">\n    <ContentPage.Padding>\n        <OnPlatform x:TypeArguments=\"Thickness\" Default=\"20\">\n            <On Platform=\"iOS, Android\" Value=\"10,20,20,10\" />\n        </OnPlatform>\n    </ContentPage.Padding>\n    ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Export Compliance Key in Info.plist (XML)\nDESCRIPTION: This XML snippet shows how to add the `ITSAppUsesNonExemptEncryption` key to your app's *Info.plist* file. Setting its value to `false` indicates that the app does not use non-exempt encryption. This is required for complying with encryption export regulations. You should consult Apple's documentation for further context.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/mac-catalyst/includes/encryption.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<key>ITSAppUsesNonExemptEncryption</key>\n<false/>\n```\n\n----------------------------------------\n\nTITLE: Java Interface with Constant\nDESCRIPTION: This Java code snippet illustrates a common pattern where an interface declares a static constant. It is used to demonstrate how C# handles Java interface constants.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface Foo {\n     public static int BAR = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Call the Init Method from Consuming Assembly (C#)\nDESCRIPTION: Illustrates how to call the `Init` method from the assembly that consumes the custom controls defined in another assembly. This ensures that the XAML compiler can correctly locate and utilize the custom namespace schema.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/xaml/namespaces/custom-namespace-schemas.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MyCompany.Controls;\n\nnamespace CustomNamespaceSchemaDemo\n{\n    public partial class MainPage : ContentPage\n    {\n        public MainPage()\n        {\n            Controls.Init();\n            InitializeComponent();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function as a Method in .NET MAUI\nDESCRIPTION: This code defines a custom easing function as a method that takes a double argument and returns a double result. The CustomEase function truncates the input value to discrete steps. The resulting animation will move in discrete jumps. It requires the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/includes/easing-functions-dotnet10.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndouble CustomEase (double t)\n{\n  return t == 0 || t == 1 ? t : (int)(5 * t) / 5.0;\n}\n\nawait image.TranslateToAsync(0, 200, 2000, (Easing)CustomEase);\n```\n\n----------------------------------------\n\nTITLE: SSH Port Forwarding Windows CMD\nDESCRIPTION: This command uses `ssh` to set up two-way port forwarding between a local port on Windows (localhost:15555) and the emulator's ADB port on the Mac's loopback interface (127.0.0.1:5555). It requires Remote Login to be enabled on the Mac and a SSH client (like Git for Windows) installed in the Windows VM. Replace `mac-username` and `ip-address-of-the-mac` with the correct values.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/mac-with-windows-vm.md#_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nssh -L localhost:15555:127.0.0.1:5555 mac-username@ip-address-of-the-mac\n```\n\n----------------------------------------\n\nTITLE: Placeholder JSON request body\nDESCRIPTION: This JSON snippet is a placeholder request body used to test the /api/notifications/requests endpoint.  It is expected to return a '400 Bad Request' response.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/data-cloud/push-notifications.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Image with a Frame in XAML\nDESCRIPTION: This XAML snippet shows how to create a circular image using the Frame control and its CornerRadius property. It also uses IsClippedToBounds to clip the image within the frame.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/frame.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Frame Margin=\"10\"\n       BorderColor=\"Black\"\n       CornerRadius=\"50\"\n       HeightRequest=\"60\"\n       WidthRequest=\"60\"\n       IsClippedToBounds=\"True\"\n       HorizontalOptions=\"Center\"\n       VerticalOptions=\"Center\">\n  <Image Source=\"outdoors.jpg\"\n         Aspect=\"AspectFill\"\n         Margin=\"-20\"\n         HeightRequest=\"100\"\n         WidthRequest=\"100\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Overriding CreateWindow method in .NET MAUI App (net9.0+)\nDESCRIPTION: This code snippet demonstrates how to override the `CreateWindow` method in a .NET MAUI `App` class for .NET MAUI 9.0 and later. The method is used to create a `Window` object with an `AppShell` as the root page.  The `IActivationState` argument provides information about the activation state of the app.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/window.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyMauiApp\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n        }\n\n        protected override Window CreateWindow(IActivationState? activationState)\n        {\n            return new Window(new AppShell());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activity Definition without Attribute C#\nDESCRIPTION: This code shows an activity definition without the `ActivityAttribute`. This results in nothing being generated in the manifest file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/manifest.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.App;\n\nnamespace MyMauiApp;\n\npublic class MyActivity : Activity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling font packaging in .NET MAUI\nDESCRIPTION: This XML snippet shows how to disable font resource packaging in a .NET MAUI project. Setting the `EnableMauiFontProcessing` property to `false` within the first `PropertyGroup` node of the project file prevents font resources from being processed during the build.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/troubleshooting.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<EnableMauiFontProcessing>false</EnableMauiFontProcessing>\n```\n\n----------------------------------------\n\nTITLE: Extended Virtual Addressing Entitlement XML\nDESCRIPTION: Defines the extended virtual addressing entitlement for using more address space in your app. It uses the `com.apple.developer.kernel.extended-virtual-addressing` key of type `Boolean`. This snippet should be added to the Entitlements.plist file.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/macios/includes/entitlements-reference.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.developer.kernel.extended-virtual-addressing</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Updating AndroidManifest.xml with app icon reference\nDESCRIPTION: This XML snippet shows how to update the AndroidManifest.xml file to reference the app icon. The android:icon and android:roundIcon attributes in the application node are set to the appropriate mipmap resource names derived from the MauiIcon's Include attribute. The values need to be adjusted based on the name of the icon.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/images/app-icons.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application android:allowBackup=\"true\" android:icon=\"@mipmap/healthapp\" android:roundIcon=\"@mipmap/healthapp_round\" android:supportsRtl=\"true\"></application>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding Assembly-Based Permission for High Sampling Rate Sensors (C#)\nDESCRIPTION: This code snippet demonstrates how to add the `HIGH_SAMPLING_RATE_SENSORS` permission to a .NET MAUI Android application using an assembly attribute. This is required for apps targeting Android 12+ (API 31+) to bypass the 200 Hz refresh rate limit for sensor data when using the fastest sensor speed.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/includes/android-sensors.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: UsesPermission(Android.Manifest.Permission.HighSamplingRateSensors)]\n```\n\n----------------------------------------\n\nTITLE: Configure Folder-Based Multi-Targeting for iOS\nDESCRIPTION: This XML snippet configures the build system to exclude C# files located within the iOS folder (or its subfolders) when not building for iOS. It removes the files from compilation and excludes them from the build output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/configure-multi-targeting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- iOS -->\n<ItemGroup Condition=\"$(TargetFramework.StartsWith('net8.0-ios')) != true\">\n  <Compile Remove=\"**\\iOS\\**\\*.cs\" />\n  <None Include=\"**\\iOS\\**\\*.cs\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Create SolidPaint Object with Color\nDESCRIPTION: Demonstrates creating a SolidPaint object and using it to fill a rounded rectangle on a canvas with a solid color (silver). It also sets a shadow for the rectangle.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/graphics/paint.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSolidPaint solidPaint = new SolidPaint(Colors.Silver);\n\nRectF solidRectangle = new RectF(100, 100, 200, 100);\ncanvas.SetFillPaint(solidPaint, solidRectangle);\ncanvas.SetShadow(new SizeF(10, 10), 10, Colors.Grey);\ncanvas.FillRoundedRectangle(solidRectangle, 12);\n```\n\n----------------------------------------\n\nTITLE: Define Platform Architectures (XML)\nDESCRIPTION: This XML snippet defines the platform architectures used in .NET MAUI WinUI projects. It utilizes the `<Platforms>` property within a `<PropertyGroup>` to specify supported architectures. Required for compatibility with .NET runtime identifiers.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/uwp-projects.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n   <!-- Used in .NET MAUI WinUI projects -->\n   <Platforms>x86;x64;ARM64</Platforms>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Flashlight and Camera Permissions in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to set the Flashlight and Camera permissions by updating the AndroidManifest.xml file. These permissions are required for the application to access the device's flashlight and camera.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/device/flashlight.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.FLASHLIGHT\" />\n<uses-permission android:name=\"android.permission.CAMERA\" />\n```\n\n----------------------------------------\n\nTITLE: Platform Not Supported Exception C#\nDESCRIPTION: This C# snippet throws a `PlatformNotSupportedException` when the `GetOrientation` method is not supported on the current platform. It provides a clear indication to the user or developer that the functionality is limited to specific platforms (Android and iOS).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/platform-integration/invoke-platform-code.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthrow new PlatformNotSupportedException(\"GetOrientation is only supported on Android and iOS.\");\n```\n\n----------------------------------------\n\nTITLE: Include Font in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to include a TTF font file in a .NET MAUI project. The MauiFont build action specifies that the font should be included in the app package during the build process. The font file is located in the Resources\\Fonts folder.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/fundamentals/single-project.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<MauiFont Include=\"Resources\\Fonts\\OpenSans-Regular.ttf\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a MAUI Asset - C#\nDESCRIPTION: This C# snippet demonstrates how to load a raw asset deployed with a MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. It opens a stream to the asset file, reads its contents using a `StreamReader`, and stores the contents in a string variable.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/tutorials/notes-mvvm/snippets/model/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: MapItemTemplateSelector class in C# for MAUI\nDESCRIPTION: This C# code defines a DataTemplateSelector named MapItemTemplateSelector, which is used to select different DataTemplates for map items based on a condition. The OnSelectTemplate method checks if the item's address contains \"San Francisco\" and returns either the SanFranTemplate or the DefaultTemplate accordingly. This class requires the WorkingWithMaps.Models namespace for the Position model.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/map.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nusing WorkingWithMaps.Models;\n\nnamespace WorkingWithMaps.Templates;\n\npublic class MapItemTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate DefaultTemplate { get; set; }\n    public DataTemplate SanFranTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Position)item).Address.Contains(\"San Francisco\") ? SanFranTemplate : DefaultTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C++: LLVM IR Code Generation for Marshal Methods\nDESCRIPTION: This C++ code provides an example of how marshal methods are invoked at runtime using LLVM intermediate representation (IR) generator infrastructure.  The `xamarin_app_init` function is called during app startup. The `Java_helloandroid_MainActivity_n_1onCreate__Landroid_os_Bundle_2` function serves as a template for Java native functions.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/internals/java-interop.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nusing get_function_pointer_fn = void(*)(uint32_t mono_image_index, uint32_t class_index, uint32_t method_token, void*& target_ptr);\n\nstatic get_function_pointer_fn get_function_pointer;\n\nvoid xamarin_app_init (get_function_pointer_fn fn) noexcept\n{\n  get_function_pointer = fn;\n}\n\nusing android_app_activity_on_create_bundle_fn = void (*) (JNIEnv *env, jclass klass, jobject savedInstanceState);\nstatic android_app_activity_on_create_bundle_fn android_app_activity_on_create_bundle = nullptr;\n\nextern \"C\" JNIEXPORT void\nJNICALL Java_helloandroid_MainActivity_n_1onCreate__Landroid_os_Bundle_2 (JNIEnv *env, jclass klass, jobject savedInstanceState) noexcept\n{\n  if (android_app_activity_on_create_bundle == nullptr) {\n    get_function_pointer (\n      16, // mono image index\n      0,  // class index\n      0x0600055B, // method token\n      reinterpret_cast<void*&>(android_app_activity_on_create_bundle) // target pointer\n    );\n  }\n\n  android_app_activity_on_create_bundle (env, klass, savedInstanceState);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Label in XAML\nDESCRIPTION: This snippet demonstrates how to create a basic Label control in XAML with the text \"Hello world\".\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/label.md#_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"Hello world\" />\n```\n\n----------------------------------------\n\nTITLE: Check AEHD Driver Status (AEHD 2.1+) (cmd)\nDESCRIPTION: This command checks the status of the Android Emulator Hypervisor Driver (AEHD) version 2.1 and higher.  It queries the service control manager to determine if the 'aehd' service is running, stopped, or encountering errors.  The expected output when running shows the service is in the 'RUNNING' state (STATE : 4  RUNNING).\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/android/emulator/hardware-acceleration.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nsc query aehd\n```\n\n----------------------------------------\n\nTITLE: Error Example\nDESCRIPTION: This shows an example error that can occur during migration.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/migration/android-binding-projects.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Mark Assembly as Trim Safe (XML)\nDESCRIPTION: This XML snippet demonstrates how to mark an assembly as trim safe by setting the IsTrimmable MSBuild property to true in the project file.  This indicates that the assembly is compatible with trimming and should have no trim warnings when built. Setting this property enables the trimmer to remove unused members from the assembly in the final output.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/includes/linker-control.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <IsTrimmable>true</IsTrimmable>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Mapping IsLooping Property in MAUI VideoHandler\nDESCRIPTION: This code snippet shows how the `MapIsLooping` method is defined in a MAUI video handler. It calls the `UpdateIsLooping` method on the platform-specific `PlatformView` to update the looping behavior.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/handlers/create.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic static void MapIsLooping(VideoHandler handler, Video video)\n{\n    handler.PlatformView?.UpdateIsLooping();\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Multiple Modifiers in C#\nDESCRIPTION: This C# code snippet shows how to specify multiple modifiers for a keyboard accelerator using bitwise OR. It sets both Shift and Ctrl modifiers, requiring both keys to be pressed with R for the shortcut to activate.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/keyboard-accelerators.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nrefreshMenuFlyoutItem.KeyboardAccelerators.Add(new KeyboardAccelerator\n{\n    Modifiers = KeyboardAcceleratorModifiers.Shift | KeyboardAcceleratorModifiers.Ctrl,\n    Key = \"R\"\n});\n```\n\n----------------------------------------\n\nTITLE: Override Large Title Display in XAML - .NET MAUI iOS\nDESCRIPTION: This XAML snippet shows how to override the large title display behavior on a specific ContentPage using the `Page.LargeTitleDisplay` attached property.  The `LargeTitleDisplay` is set to `Never` in this example, forcing the use of the regular, small navigation bar. The `ios` namespace must be declared to reference platform-specific properties.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/ios/platform-specifics/page-large-title.md#_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage ...\n             xmlns:ios=\"clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;assembly=Microsoft.Maui.Controls\"\n             Title=\"Large Title\"\n             ios:Page.LargeTitleDisplay=\"Never\">\n  ...\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Enabling Maximum Logging in C#\nDESCRIPTION: This code enables maximum logging for every component that uses Microsoft.Extensions.Logging by setting the minimum log level to Trace. This configuration is performed as part of service registration in the dependency injection system. Requires Microsoft.Extensions.Logging.\nSOURCE: https://github.com/dotnet/docs-maui/blob/main/docs/user-interface/controls/blazorwebview.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddLogging(logging =>\n{\n    logging.SetMinimumLevel(LogLevel.Trace);\n});\n```"
  }
]