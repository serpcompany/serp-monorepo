[
  {
    "owner": "tucnak",
    "repo": "telebot",
    "content": "TITLE: Creating a Basic Telegram Bot with Telebot in Go\nDESCRIPTION: Demonstrates the minimal setup required to create a Telegram bot using Telebot. It includes setting up the bot with a token, defining a simple command handler, and starting the bot.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\ttele \"gopkg.in/telebot.v4\"\n)\n\nfunc main() {\n\tpref := tele.Settings{\n\t\tToken:  os.Getenv(\"TOKEN\"),\n\t\tPoller: &tele.LongPoller{Timeout: 10 * time.Second},\n\t}\n\n\tb, err := tele.NewBot(pref)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\tb.Handle(\"/hello\", func(c tele.Context) error {\n\t\treturn c.Send(\"Hello!\")\n\t})\n\n\tb.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Types of Updates in Telebot\nDESCRIPTION: Shows how to handle various types of updates (text messages, channel posts, photos, inline queries) using Telebot's context-based handling system.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb.Handle(tele.OnText, func(c tele.Context) error {\n\tvar (\n\t\tuser = c.Sender()\n\t\ttext = c.Text()\n\t)\n\n\tmsg, err := b.Send(user, text)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.Send(text)\n})\n\nb.Handle(tele.OnChannelPost, func(c tele.Context) error {\n\tmsg := c.Message()\n})\n\nb.Handle(tele.OnPhoto, func(c tele.Context) error {\n\tphoto := c.Message().Photo\n})\n\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\treturn c.Answer(...)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in Telebot\nDESCRIPTION: Demonstrates how to use middleware in Telebot, including global, group-scoped, and handler-scoped middleware. Also shows how to create a custom middleware function.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"gopkg.in/telebot.v4/middleware\"\n\n// Global-scoped middleware:\nb.Use(middleware.Logger())\nb.Use(middleware.AutoRespond())\n\n// Group-scoped middleware:\nadminOnly := b.Group()\nadminOnly.Use(middleware.Whitelist(adminIDs...))\nadminOnly.Handle(\"/ban\", onBan)\nadminOnly.Handle(\"/kick\", onKick)\n\n// Handler-scoped middleware:\nb.Handle(tele.OnText, onText, middleware.IgnoreVia())\n\n// Custom middleware example:\nfunc AutoResponder(next tele.HandlerFunc) tele.HandlerFunc {\n\treturn func(c tele.Context) error {\n\t\tif c.Callback() != nil {\n\t\t\tdefer c.Respond()\n\t\t}\n\t\treturn next(c) // continue execution chain\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Markup Constructor Usage\nDESCRIPTION: Shows various ways to create different types of keyboard buttons using the markup constructor.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nr := b.NewMarkup()\n\n// Reply buttons:\nr.Text(\"Hello!\")\nr.Contact(\"Send phone number\")\nr.Location(\"Send location\")\nr.Poll(tele.PollQuiz)\n\n// Inline buttons:\nr.Data(\"Show help\", \"help\") // data is optional\nr.Data(\"Delete item\", \"delete\", item.ID)\nr.URL(\"Visit\", \"https://google.com\")\nr.Query(\"Search\", query)\nr.QueryChat(\"Share\", query)\nr.Login(\"Login\", &tele.Login{...})\n```\n\n----------------------------------------\n\nTITLE: Keyboard Implementation with Button Handlers\nDESCRIPTION: Demonstrates creation and handling of both reply and inline keyboards with button callbacks.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tmenu     = &tele.ReplyMarkup{ResizeKeyboard: true}\n\tselector = &tele.ReplyMarkup{}\n\n\tbtnHelp     = menu.Text(\"ℹ Help\")\n\tbtnSettings = menu.Text(\"⚙ Settings\")\n\n\tbtnPrev = selector.Data(\"⬅\", \"prev\", ...)\n\tbtnNext = selector.Data(\"➡\", \"next\", ...)\n)\n\nmenu.Reply(\n\tmenu.Row(btnHelp),\n\tmenu.Row(btnSettings),\n)\nselector.Inline(\n\tselector.Row(btnPrev, btnNext),\n)\n\nb.Handle(\"/start\", func(c tele.Context) error {\n\treturn c.Send(\"Hello!\", menu)\n})\n\nb.Handle(&btnHelp, func(c tele.Context) error {\n\treturn c.Edit(\"Here is some help: ...\")\n})\n\nb.Handle(&btnPrev, func(c tele.Context) error {\n\treturn c.Respond()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling File Operations in Telebot\nDESCRIPTION: Illustrates how to handle file operations in Telebot, including uploading files from disk, sending media, and checking file status.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\na := &tele.Audio{File: tele.FromDisk(\"file.ogg\")}\n\nfmt.Println(a.OnDisk()) // true\nfmt.Println(a.InCloud()) // false\n\n// Will upload the file from disk and send it to the recipient\nb.Send(recipient, a)\n\n// Next time you'll be sending this very *Audio, Telebot won't\n// re-upload the same file but rather utilize its Telegram FileID\nb.Send(otherRecipient, a)\n\nfmt.Println(a.OnDisk()) // true\nfmt.Println(a.InCloud()) // true\nfmt.Println(a.FileID) // <Telegram file ID>\n```\n\n----------------------------------------\n\nTITLE: Using Send Options in Telebot\nDESCRIPTION: Demonstrates various ways to use send options when sending messages with Telebot, including full SendOptions, ReplyMarkup, and option flags.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// regular send options\nb.Send(user, \"text\", &tele.SendOptions{\n\t// ...\n})\n\n// ReplyMarkup is a part of SendOptions,\n// but often it's the only option you need\nb.Send(user, \"text\", &tele.ReplyMarkup{\n\t// ...\n})\n\n// flags: no notification && no web link preview\nb.Send(user, \"text\", tele.Silent, tele.NoPreview)\n```\n\n----------------------------------------\n\nTITLE: Inline Query Handler Implementation\nDESCRIPTION: Implements handling of inline queries and returning photo results in inline mode.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\turls := []string{\n\t\t\"http://photo.jpg\",\n\t\t\"http://photo2.jpg\",\n\t}\n\n\tresults := make(tele.Results, len(urls)) // []tele.Result\n\tfor i, url := range urls {\n\t\tresult := &tele.PhotoResult{\n\t\t\tURL:      url,\n\t\t\tThumbURL: url, // required for photos\n\t\t}\n\n\t\tresults[i] = result\n\t\t// needed to set a unique string ID for each result\n\t\tresults[i].SetResultID(strconv.Itoa(i))\n\t}\n\n\treturn c.Answer(&tele.QueryResponse{\n\t\tResults:   results,\n\t\tCacheTime: 60, // a minute\n\t})\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Albums with Telebot\nDESCRIPTION: Shows how to send an album (multiple media files) using Telebot, including creating photo and video objects from different sources.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := &tele.Photo{File: tele.FromDisk(\"chicken.jpg\")}\nv := &tele.Video{File: tele.FromURL(\"http://video.mp4\")}\n\nmsgs, err := b.SendAlbum(user, tele.Album{p, v})\n```\n\n----------------------------------------\n\nTITLE: EditCaption Example Usage\nDESCRIPTION: Shows how to edit captions of media messages using the EditCaption method.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar m *Message\n\n// change caption of a photo, audio, etc.\nbot.EditCaption(m, \"new caption\")\n```\n\n----------------------------------------\n\nTITLE: Database Operations with StoredMessage\nDESCRIPTION: Demonstrates how to use StoredMessage struct with database operations and bot message editing.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar msgs []tele.StoredMessage\ndb.Find(&msgs) // gorm syntax\n\nfor _, msg := range msgs {\n\tbot.Edit(&msg, \"Updated text\")\n\t// or\n\tbot.Delete(&msg)\n}\n```\n\n----------------------------------------\n\nTITLE: StoredMessage Implementation for Database Storage\nDESCRIPTION: Implements a StoredMessage struct that can be stored in databases and implements the Editable interface for message operations.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype StoredMessage struct {\n\tMessageID int   `sql:\"message_id\" json:\"message_id\"`\n\tChatID    int64 `sql:\"chat_id\" json:\"chat_id\"`\n}\n\nfunc (x StoredMessage) MessageSig() (int, int64) {\n\treturn x.MessageID, x.ChatID\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Interface in Go for Telegram Messages\nDESCRIPTION: Defines the Editable interface that provides message signature functionality required for edit operations. Used for implementing editable message functionality in Telegram bots.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Editable interface {\n\t// MessageSig is a \"message signature\".\n\t//\n\t// For inline messages, return chatID = 0.\n\tMessageSig() (messageID int, chatID int64)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Telebot Package with Go\nDESCRIPTION: Command to install the Telebot package using Go's package manager.\nSOURCE: https://github.com/tucnak/telebot/blob/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u gopkg.in/telebot.v4\n```"
  }
]