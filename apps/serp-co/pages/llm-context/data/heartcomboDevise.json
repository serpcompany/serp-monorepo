[
  {
    "owner": "heartcombo",
    "repo": "devise",
    "content": "TITLE: Generating Devise Model\nDESCRIPTION: Rails generator command that creates and configures a model with Devise authentication modules and updates routes.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise MODEL\n```\n\n----------------------------------------\n\nTITLE: Generating Devise Installation Files\nDESCRIPTION: Rails generator command that installs Devise's initializer file and other necessary configuration.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:install\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Before Action in Controllers\nDESCRIPTION: Ruby code for requiring user authentication in Rails controllers using Devise's before_action filter.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_action :authenticate_user!\n```\n\n----------------------------------------\n\nTITLE: Installing Devise with Bundler in Rails\nDESCRIPTION: Command to add the Devise gem to your Rails application using Bundler.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbundle add devise\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer URL Options for Devise\nDESCRIPTION: Ruby configuration for setting up default URL options in development environment for Devise mailer functionality.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status with Devise\nDESCRIPTION: Ruby helper method provided by Devise to verify if a user is currently signed in.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nuser_signed_in?\n```\n\n----------------------------------------\n\nTITLE: Configuring Devise Modules in Models\nDESCRIPTION: Ruby code example showing how to configure Devise modules and their options in a model, including custom hashing algorithm stretches.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndevise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Devise Models\nDESCRIPTION: Example of configuring multiple authentication models in Devise, showing database table creation, model configuration, routes setup, and controller helpers.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a migration with the required fields\ncreate_table :admins do |t|\n  t.string :email\n  t.string :encrypted_password\n  t.timestamps null: false\nend\n\n# Inside your Admin model\ndevise :database_authenticatable, :timeoutable\n\n# Inside your routes\ndevise_for :admins\n\n# Inside your protected controller\nbefore_action :authenticate_admin!\n\n# Inside your controllers and views\nadmin_signed_in?\ncurrent_admin\nadmin_session\n```\n\n----------------------------------------\n\nTITLE: Simple Strong Parameters Configuration for Devise\nDESCRIPTION: Ruby code example for ApplicationController that permits additional parameters for Devise registration using Strong Parameters.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Devise Views\nDESCRIPTION: Rails generator command to copy all Devise views to your application for customization.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:views\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Devise Sessions Controller\nDESCRIPTION: Sample code showing the structure of a custom Sessions controller generated by Devise. The controller inherits from Devise::SessionsController and includes commented methods that can be customized.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users::SessionsController < Devise::SessionsController\n  # GET /resource/sign_in\n  # def new\n  #   super\n  # end\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Devise for Hotwire/Turbo Integration\nDESCRIPTION: Configuration in the Devise initializer to set appropriate HTTP status codes for error responses and redirects when using Hotwire/Turbo.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nDevise.setup do |config|\n  # ...\n  # When using Devise with Hotwire/Turbo, the http status for error responses\n  # and some redirects must match the following. The default in Devise for existing\n  # apps is `200 OK` and `302 Found` respectively, but new apps are generated with\n  # these new defaults that match Hotwire/Turbo behavior.\n  # Note: These might become the new default in future versions of Devise.\n  config.responder.error_status = :unprocessable_entity\n  config.responder.redirect_status = :see_other\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Router to Use Custom Controllers\nDESCRIPTION: Configuration to tell Rails router to use custom controllers instead of the default Devise controllers, using the controllers option in devise_for.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\ndevise_for :users, controllers: { sessions: 'users/sessions' }\n```\n\n----------------------------------------\n\nTITLE: Extending Devise Controller Action with Additional Behavior\nDESCRIPTION: Example showing how to extend a Devise controller action by calling super with a block, allowing you to add behavior while maintaining original functionality.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users::SessionsController < Devise::SessionsController\n  def create\n    super do |resource|\n      BackgroundWorker.trigger(resource)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Root Path for Devise Redirects\nDESCRIPTION: Ruby route configuration for setting the application's root path, which Devise uses for post-authentication redirects.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nroot to: 'home#index'\n```\n\n----------------------------------------\n\nTITLE: Customizing Devise Routes with Path Options\nDESCRIPTION: Configuration for customizing Devise route paths and path names, allowing for localization and personalization of the authentication URLs.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\ndevise_for :users, path: 'auth', path_names: { sign_in: 'login', sign_out: 'logout', password: 'secret', confirmation: 'verification', unlock: 'unblock', registration: 'register', sign_up: 'cmon_let_me_in' }\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n for Devise Sessions\nDESCRIPTION: YAML configuration for customizing Devise flash messages using I18n, allowing for internationalization and localization of authentication feedback.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  devise:\n    sessions:\n      signed_in: 'Signed in successfully.'\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource-Specific I18n Messages for Devise\nDESCRIPTION: YAML configuration showing how to create different messages for different resource types in Devise, allowing for customized messages per user type.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  devise:\n    sessions:\n      user:\n        signed_in: 'Welcome user, you are signed in.'\n      admin:\n        signed_in: 'Hello admin!'\n```\n\n----------------------------------------\n\nTITLE: Configuring OmniAuth Provider in Devise\nDESCRIPTION: Configuration setup for integrating OmniAuth provider (GitHub) with Devise authentication system.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n for Devise Mailer Subjects\nDESCRIPTION: YAML configuration for customizing email subject lines in Devise mailers, including resource-specific variations for different user types.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  devise:\n    mailer:\n      confirmation_instructions:\n        subject: 'Hello everybody!'\n        user_subject: 'Hello User! Please confirm your email'\n      reset_password_instructions:\n        subject: 'Reset instructions'\n```\n\n----------------------------------------\n\nTITLE: Including Devise Integration Test Helpers\nDESCRIPTION: Ruby code showing how to include Devise integration test helpers in Rails integration tests, which provides sign_in and sign_out methods.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsTests < ActionDispatch::IntegrationTest\n  include Devise::Test::IntegrationHelpers\nend\n```\n\n----------------------------------------\n\nTITLE: Completely Overriding Devise Controller Action\nDESCRIPTION: Example of how to completely override a Devise controller action by redefining it in a custom controller, allowing for entirely custom sign-in code.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users::SessionsController < Devise::SessionsController\n  def create\n    # custom sign-in code\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Devise Sign In/Out Helpers in Integration Tests\nDESCRIPTION: Examples of how to use sign_in and sign_out helper methods in integration tests, including signing in with a specific scope.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nsign_in users(:bob)\nsign_in users(:bob), scope: :admin\n\nsign_out :user\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Job for Devise Notifications\nDESCRIPTION: Implementation of background job processing for Devise email notifications using Active Job.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_devise_notification(notification, *args)\n  devise_mailer.send(notification, self, *args).deliver_later\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Routes with devise_scope\nDESCRIPTION: Example of how to create additional custom routes for Devise using devise_scope, which allows deeper customization of authentication paths.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\ndevise_scope :user do\n  get 'sign_in', to: 'devise/sessions#new'\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Current User in Devise\nDESCRIPTION: Ruby helper method provided by Devise to access the currently signed-in user object.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ncurrent_user\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session in Devise\nDESCRIPTION: Ruby helper method provided by Devise to access the session for the current user scope.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nuser_session\n```\n\n----------------------------------------\n\nTITLE: Custom Block for Devise Parameter Sanitizer\nDESCRIPTION: Ruby code example using a block to customize permitted parameters for Devise sign-in using Strong Parameters.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_in) do |user_params|\n    user_params.permit(:username, :email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Parameters for Devise\nDESCRIPTION: Ruby code example for permitting array parameters (like roles) in Devise registration using Strong Parameters.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_up) do |user_params|\n    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding devise_for with Skip Option\nDESCRIPTION: Configuration to add the basic devise_for route while skipping all default routes, which is necessary to use helper methods like current_user.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\ndevise_for :users, skip: :all\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter Sanitizer for Devise\nDESCRIPTION: Ruby code example showing how to create a custom parameter sanitizer class by inheriting from Devise::ParameterSanitizer.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass User::ParameterSanitizer < Devise::ParameterSanitizer\n  def initialize(*)\n    super\n    permit(:sign_up, keys: [:username, :email])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Parameter Sanitizer in ApplicationController\nDESCRIPTION: Ruby code example for ApplicationController that selects the appropriate parameter sanitizer based on the resource class.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  protected\n\n  def devise_parameter_sanitizer\n    if resource_class == User\n      User::ParameterSanitizer.new(User, :user, params)\n    else\n      super # Use the default one\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Scoped Devise Views\nDESCRIPTION: Rails generator command to create model-specific views for Devise, enabling different views for different user types.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:views users\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Devise View Modules\nDESCRIPTION: Rails generator command with options to generate only specific sets of Devise views like registrations and confirmations.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:views -v registrations confirmations\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Devise Controllers with Rails Generator\nDESCRIPTION: Command to generate custom Devise controllers for a specific scope, which creates controller files in the appropriate directory structure.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:controllers [scope]\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Controllers with Flag Option\nDESCRIPTION: Command showing how to generate only specific controllers using the -c flag, which limits generation to only the specified controller types.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nrails generate devise:controllers users -c sessions\n```\n\n----------------------------------------\n\nTITLE: Including Devise Test Helpers for Controller Tests in Rails 5+\nDESCRIPTION: Ruby code showing how to include Devise test helpers in controller tests for Rails 5 and above, which enables sign_in and sign_out helpers.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsControllerTest < ActionController::TestCase\n  include Devise::Test::IntegrationHelpers # Rails >= 5\nend\n```\n\n----------------------------------------\n\nTITLE: Including Devise Test Helpers for Controller Tests in Rails < 5\nDESCRIPTION: Ruby code showing how to include Devise test helpers in controller tests for Rails versions prior to 5, using the appropriate module.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsControllerTest < ActionController::TestCase\n  include Devise::Test::ControllerHelpers # Rails < 5\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec to Include Devise Test Helpers\nDESCRIPTION: Ruby code showing how to configure RSpec to automatically include Devise test helpers for controller and view specs using the RSpec.configure block.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.include Devise::Test::ControllerHelpers, type: :controller\n  config.include Devise::Test::ControllerHelpers, type: :view\nend\n```\n\n----------------------------------------\n\nTITLE: Using Devise sign_in Helper in Controller Tests\nDESCRIPTION: Examples of how to use the sign_in helper method in controller tests, including signing in a specific user and using a specific scope.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nsign_in @user\nsign_in @user, scope: :admin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Devise Mapping for Controller Tests\nDESCRIPTION: Example showing how to set up Devise mapping in controller tests by explicitly setting the devise.mapping environment variable.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ntest 'GET new' do\n  # Mimic the router behavior of setting the Devise scope through the env.\n  @request.env['devise.mapping'] = Devise.mappings[:user]\n\n  # Use the sign_in helper to sign in a fixture `User` record.\n  sign_in users(:alice)\n\n  get :new\n\n  # assert something\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec to Include Devise Integration Helpers for Feature Specs\nDESCRIPTION: Ruby code showing how to configure RSpec to automatically include Devise integration test helpers for feature specs.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.include Devise::Test::IntegrationHelpers, type: :feature\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Production Log Level for Security\nDESCRIPTION: Configuration to prevent password reset tokens from being logged in production environment.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.log_level = :warn\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Authentication for API Mode\nDESCRIPTION: Configuration for enabling HTTP Basic Authentication in Rails API mode applications.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.http_authenticatable = [:database]\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for API Mode Testing\nDESCRIPTION: Middleware configuration required for testing Devise in Rails API mode applications.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies\nRails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Attributes in Devise Parameters\nDESCRIPTION: Ruby code example for ApplicationController that permits nested attributes for Devise registration forms using Strong Parameters.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Password Length Validation Change in Devise\nDESCRIPTION: Demonstrates the change in password length validation from a static approach to a dynamic one using procs. This allows overriding password_length at runtime.\nSOURCE: https://github.com/heartcombo/devise/blob/main/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_length_of :password, within: password_length, allow_blank: true\n```\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_length_of :password, minimum: proc { password_length.min }, maximum: proc { password_length.max }, allow_blank: true\n```\n\n----------------------------------------\n\nTITLE: Secret Key Order Change in Devise\nDESCRIPTION: Shows the previous order in which Devise would find a secret key, which has been replaced with always using application.secret_key_base. This change affects tokens for recoverable, lockable, and confirmable features.\nSOURCE: https://github.com/heartcombo/devise/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp.credentials.secret_key_base > app.secrets.secret_key_base > application.config.secret_key_base > application.secret_key_base\n```\n\n----------------------------------------\n\nTITLE: Running Devise Tests with Specific Rails Version\nDESCRIPTION: Commands to run Devise tests using Ruby 3.0.0 and Rails 6.0 environment configuration. Shows how to use BUNDLE_GEMFILE to specify different gemfile versions.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrbenv shell 3.0.0 # or rvm use 3.0.0\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bin/test\n```\n\n----------------------------------------\n\nTITLE: Running Devise Tests with Combined Configuration\nDESCRIPTION: Commands showing how to run Devise tests with both custom Gemfile and Mongoid ORM configuration.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 DEVISE_ORM=mongoid bin/test\n```\n\n----------------------------------------\n\nTITLE: Running Different Types of Devise Tests\nDESCRIPTION: Examples of running Devise tests: all tests, specific file tests, and individual tests using regex pattern matching.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/test\nbin/test test/models/trackable_test.rb\nbin/test test/models/trackable_test.rb:16\n```\n\n----------------------------------------\n\nTITLE: Markdown Issues Link\nDESCRIPTION: Link reference to the project's GitHub issues page\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[issues](https://github.com/heartcombo/devise/issues)\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Link\nDESCRIPTION: Link reference to the bug report template file\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[test case template](guides/bug_report_templates/integration_test.rb)\n```\n\n----------------------------------------\n\nTITLE: Markdown Issues Search Link\nDESCRIPTION: Link reference to search issues related to internationalization\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Issues/Pull Requests](https://github.com/heartcombo/devise/issues?q=i18n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Stack Overflow Link\nDESCRIPTION: Link reference to Devise questions on Stack Overflow\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Stack Overflow](http://stackoverflow.com/questions/tagged/devise)\n```\n\n----------------------------------------\n\nTITLE: Markdown Email Link\nDESCRIPTION: Email link for reporting security vulnerabilities\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[heartcombo@googlegroups.com](mailto:heartcombo@googlegroups.com)\n```\n\n----------------------------------------\n\nTITLE: Markdown Config Method Link\nDESCRIPTION: Link reference to the Devise configuration method documentation\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[`Devise::Models.config`](https://github.com/heartcombo/devise/blob/245b1f9de0b3386b7913e14b60ea24f43b77feb0/lib/devise/models.rb#L13-L50)\n```\n\n----------------------------------------\n\nTITLE: Running Devise Tests with Mongoid ORM\nDESCRIPTION: Command to run Devise test suite with Mongoid ORM instead of the default ActiveRecord ORM. Requires MongoDB server version 2.0 or newer.\nSOURCE: https://github.com/heartcombo/devise/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEVISE_ORM=mongoid bin/test\n\n==> Devise.orm = :mongoid\n```\n\n----------------------------------------\n\nTITLE: Markdown Wiki Link\nDESCRIPTION: Link reference to the project's wiki page\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[Wiki](https://github.com/heartcombo/devise/wiki)\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Link\nDESCRIPTION: Link reference to the project's Code of Conduct document\nSOURCE: https://github.com/heartcombo/devise/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Code of Conduct](CODE_OF_CONDUCT.md)\n```"
  }
]