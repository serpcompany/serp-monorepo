[
  {
    "owner": "microsoft",
    "repo": "vscode-docs",
    "content": "TITLE: Configuring HTML Validation Settings\nDESCRIPTION: JSON configuration for controlling validation of embedded JavaScript and CSS in HTML files. These settings allow you to enable or disable validation for scripts and styles embedded in HTML.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Configures if the built-in HTML language support validates embedded scripts.\n\"html.validate.scripts\": true,\n\n// Configures if the built-in HTML language support validates embedded styles.\n\"html.validate.styles\": true\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Express Application\nDESCRIPTION: Command to create a new Express application with the Pug template engine using the Express Generator tool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexpress myExpressApp --view pug\n```\n\n----------------------------------------\n\nTITLE: Complete VS Code Extension package.json Example\nDESCRIPTION: A comprehensive example showing all major configuration options for a VS Code extension manifest file, including metadata, dependencies, and marketplace presentation settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"wordcount\",\n  \"displayName\": \"Word Count\",\n  \"version\": \"0.1.0\",\n  \"publisher\": \"ms-vscode\",\n  \"description\": \"Markdown Word Count Example - reports out the number of words in a Markdown file.\",\n  \"author\": {\n    \"name\": \"sean\"\n  },\n  \"categories\": [\"Other\"],\n  \"icon\": \"images/icon.png\",\n  \"galleryBanner\": {\n    \"color\": \"#C80000\",\n    \"theme\": \"dark\"\n  },\n  \"pricing\": \"Free\",\n  \"activationEvents\": [\"onLanguage:markdown\"],\n  \"engines\": {\n    \"vscode\": \"^1.0.0\"\n  },\n  \"main\": \"./out/extension\",\n  \"scripts\": {\n    \"vscode:prepublish\": \"node ./node_modules/vscode/bin/compile\",\n    \"compile\": \"node ./node_modules/vscode/bin/compile -watch -p ./\"\n  },\n  \"devDependencies\": {\n    \"@types/vscode\": \"^0.10.x\",\n    \"typescript\": \"^1.6.2\"\n  },\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/microsoft/vscode-wordcount/issues\",\n    \"email\": \"sean@contoso.com\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/microsoft/vscode-wordcount.git\"\n  },\n  \"homepage\": \"https://github.com/microsoft/vscode-wordcount/blob/main/README.md\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Serializer in package.json\nDESCRIPTION: Declares a notebook serializer in the package.json file under the contributes.notebooks section. It specifies the notebook type, display name, and file selector pattern.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contributes\": {\n        \"notebooks\": [\n            {\n                \"type\": \"my-notebook\",\n                \"displayName\": \"My Notebook\",\n                \"selector\": [\n                    {\n                        \"filenamePattern\": \"*.notebook\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Python Hello World Example\nDESCRIPTION: Simple Python print statement demonstrating basic code execution in VS Code. This is typically used to verify that Python and VS Code are properly configured.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/python.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Language Server in TypeScript for VS Code\nDESCRIPTION: This comprehensive TypeScript code implements a Language Server for VS Code. It sets up a connection, manages text documents, handles initialization, configuration changes, diagnostics, and provides code completion. The server uses the vscode-languageserver library and implements various LSP features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConnection,\n  TextDocuments,\n  Diagnostic,\n  DiagnosticSeverity,\n  ProposedFeatures,\n  InitializeParams,\n  DidChangeConfigurationNotification,\n  CompletionItem,\n  CompletionItemKind,\n  TextDocumentPositionParams,\n  TextDocumentSyncKind,\n  InitializeResult\n} from 'vscode-languageserver/node';\n\nimport {\n  TextDocument\n} from 'vscode-languageserver-textdocument';\n\n// Create a connection for the server, using Node's IPC as a transport.\n// Also include all preview / proposed LSP features.\nlet connection = createConnection(ProposedFeatures.all);\n\n// Create a simple text document manager.\nlet documents: TextDocuments<TextDocument> = new TextDocuments(TextDocument);\n\nlet hasConfigurationCapability: boolean = false;\nlet hasWorkspaceFolderCapability: boolean = false;\nlet hasDiagnosticRelatedInformationCapability: boolean = false;\n\nconnection.onInitialize((params: InitializeParams) => {\n  let capabilities = params.capabilities;\n\n  // Does the client support the `workspace/configuration` request?\n  // If not, we fall back using global settings.\n  hasConfigurationCapability = !!(\n    capabilities.workspace && !!capabilities.workspace.configuration\n  );\n  hasWorkspaceFolderCapability = !!(\n    capabilities.workspace && !!capabilities.workspace.workspaceFolders\n  );\n  hasDiagnosticRelatedInformationCapability = !!(\n    capabilities.textDocument &&\n    capabilities.textDocument.publishDiagnostics &&\n    capabilities.textDocument.publishDiagnostics.relatedInformation\n  );\n\n  const result: InitializeResult = {\n    capabilities: {\n      textDocumentSync: TextDocumentSyncKind.Incremental,\n      // Tell the client that this server supports code completion.\n      completionProvider: {\n        resolveProvider: true\n      }\n    }\n  };\n  if (hasWorkspaceFolderCapability) {\n    result.capabilities.workspace = {\n      workspaceFolders: {\n        supported: true\n      }\n    };\n  }\n  return result;\n});\n\nconnection.onInitialized(() => {\n  if (hasConfigurationCapability) {\n    // Register for all configuration changes.\n    connection.client.register(DidChangeConfigurationNotification.type, undefined);\n  }\n  if (hasWorkspaceFolderCapability) {\n    connection.workspace.onDidChangeWorkspaceFolders(_event => {\n      connection.console.log('Workspace folder change event received.');\n    });\n  }\n});\n\n// The example settings\ninterface ExampleSettings {\n  maxNumberOfProblems: number;\n}\n\n// The global settings, used when the `workspace/configuration` request is not supported by the client.\n// Please note that this is not the case when using this server with the client provided in this example\n// but could happen with other clients.\nconst defaultSettings: ExampleSettings = { maxNumberOfProblems: 1000 };\nlet globalSettings: ExampleSettings = defaultSettings;\n\n// Cache the settings of all open documents\nlet documentSettings: Map<string, Thenable<ExampleSettings>> = new Map();\n\nconnection.onDidChangeConfiguration(change => {\n  if (hasConfigurationCapability) {\n    // Reset all cached document settings\n    documentSettings.clear();\n  } else {\n    globalSettings = <ExampleSettings>(\n      (change.settings.languageServerExample || defaultSettings)\n    );\n  }\n\n  // Revalidate all open text documents\n  documents.all().forEach(validateTextDocument);\n});\n\nfunction getDocumentSettings(resource: string): Thenable<ExampleSettings> {\n  if (!hasConfigurationCapability) {\n    return Promise.resolve(globalSettings);\n  }\n  let result = documentSettings.get(resource);\n  if (!result) {\n    result = connection.workspace.getConfiguration({\n      scopeUri: resource,\n      section: 'languageServerExample'\n    });\n    documentSettings.set(resource, result);\n  }\n  return result;\n}\n\n// Only keep settings for open documents\ndocuments.onDidClose(e => {\n  documentSettings.delete(e.document.uri);\n});\n\n// The content of a text document has changed. This event is emitted\n// when the text document first opened or when its content has changed.\ndocuments.onDidChangeContent(change => {\n  validateTextDocument(change.document);\n});\n\nasync function validateTextDocument(textDocument: TextDocument): Promise<void> {\n  // In this simple example we get the settings for every validate run.\n  let settings = await getDocumentSettings(textDocument.uri);\n\n  // The validator creates diagnostics for all uppercase words length 2 and more\n  let text = textDocument.getText();\n  let pattern = /\\b[A-Z]{2,}\\b/g;\n  let m: RegExpExecArray | null;\n\n  let problems = 0;\n  let diagnostics: Diagnostic[] = [];\n  while ((m = pattern.exec(text)) && problems < settings.maxNumberOfProblems) {\n    problems++;\n    let diagnostic: Diagnostic = {\n      severity: DiagnosticSeverity.Warning,\n      range: {\n        start: textDocument.positionAt(m.index),\n        end: textDocument.positionAt(m.index + m[0].length)\n      },\n      message: `${m[0]} is all uppercase.`,\n      source: 'ex'\n    };\n    if (hasDiagnosticRelatedInformationCapability) {\n      diagnostic.relatedInformation = [\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Spelling matters'\n        },\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Particularly for names'\n        }\n      ];\n    }\n    diagnostics.push(diagnostic);\n  }\n\n  // Send the computed diagnostics to VS Code.\n  connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });\n}\n\nconnection.onDidChangeWatchedFiles(_change => {\n  // Monitored files have change in VS Code\n  connection.console.log('We received a file change event');\n});\n\n// This handler provides the initial list of the completion items.\nconnection.onCompletion(\n  (_textDocumentPosition: TextDocumentPositionParams): CompletionItem[] => {\n    // The pass parameter contains the position of the text document in\n    // which code complete got requested. For the example we ignore this\n    // info and always provide the same completion items.\n    return [\n      {\n        label: 'TypeScript',\n        kind: CompletionItemKind.Text,\n        data: 1\n      },\n      {\n        label: 'JavaScript',\n        kind: CompletionItemKind.Text,\n        data: 2\n      }\n    ];\n  }\n);\n\n// This handler resolves additional information for the item selected in\n// the completion list.\nconnection.onCompletionResolve(\n  (item: CompletionItem): CompletionItem => {\n    if (item.data === 1) {\n      item.detail = 'TypeScript details';\n      item.documentation = 'TypeScript documentation';\n    } else if (item.data === 2) {\n      item.detail = 'JavaScript details';\n      item.documentation = 'JavaScript documentation';\n    }\n    return item;\n  }\n);\n\n// Make the text document manager listen on the connection\n// for open, change and close text document events\ndocuments.listen(connection);\n\n// Listen on the connection\nconnection.listen();\n```\n\n----------------------------------------\n\nTITLE: Creating New C# Console Application\nDESCRIPTION: Command to initialize a new C# console application project using the .NET CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/dotnet.md#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ndotnet new console\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliSense and Compiler Settings with c_cpp_properties.json (JSON)\nDESCRIPTION: This c_cpp_properties.json example configures VS Code's C/C++ extension for IntelliSense, build, and debugging tasks. It defines settings such as include paths, defines, compiler path, C and C++ language standards, and IntelliSense engine mode. The configuration targets a Linux environment using GCC. Required dependencies include the VS Code C/C++ extension and a valid compiler at the given 'compilerPath'. Users should adjust 'includePath' and 'compilerPath' according to their system and project layout. This configuration is essential for providing correct code completion and navigation within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"Linux\\\",\\n            \\\"includePath\\\": [\\n                \\\"${workspaceFolder}/**\\\"\\n            ],\\n            \\\"defines\\\": [],\\n            \\\"compilerPath\\\": \\\"/usr/bin/gcc\\\",\\n            \\\"cStandard\\\": \\\"c11\\\",\\n            \\\"cppStandard\\\": \\\"c++17\\\",\\n            \\\"intelliSenseMode\\\": \\\"clang-x64\\\"\\n        }\\n    ],\\n    \\\"version\\\": 4\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Component in React\nDESCRIPTION: JavaScript code that creates a simple React Hello World component and renders it in the DOM. It replaces the default App component with a custom HelloWorld component that displays a greeting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction HelloWorld() {\n  return <h1 className=\"greeting\">Hello, world!</h1>\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HelloWorld />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n```\n\n----------------------------------------\n\nTITLE: Implementing Full CRUD Routes for FastAPI Grocery List Service in Python\nDESCRIPTION: This complete code block provides a fully functional grocery list FastAPI application, implementing creation, retrieval, listing, deletion, and partial quantity removal endpoints. All state is stored in the process memory, keyed by item ID and modeled by the user-defined `ItemPayload`. Each REST route performs type-checked I/O, error handling for invalid or missing entries, and returns structured JSON responses. Dependencies include `FastAPI`, `HTTPException`, and the local `models` module with the `ItemPayload` definition. Endpoint parameters and expected responses are well documented, and the implementation assumes Python 3.9+ for advanced type hinting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\\n\\nfrom models import ItemPayload\\n\\napp = FastAPI()\\n\\ngrocery_list: dict[int, ItemPayload] = {}\\n\\n# Route to add an item\\n@app.post(\"/items/{item_name}/{quantity}\")\\ndef add_item(item_name: str, quantity: int) -> dict[str, ItemPayload]:\\n    if quantity <= 0:\\n        raise HTTPException(status_code=400, detail=\"Quantity must be greater than 0.\")\\n    # if item already exists, we'll just add the quantity.\\n    # get all item names\\n    items_ids: dict[str, int] = {\\n        item.item_name: item.item_id if item.item_id is not None else 0\\n        for item in grocery_list.values()\\n    }\\n    if item_name in items_ids.keys():\\n        # get index of item_name in item_ids, which is the item_id\\n        item_id: int = items_ids[item_name]\\n        grocery_list[item_id].quantity += quantity\\n    # otherwise, create a new item\\n    else:\\n        # generate an ID for the item based on the highest ID in the grocery_list\\n        item_id: int = max(grocery_list.keys()) + 1 if grocery_list else 0\\n        grocery_list[item_id] = ItemPayload(\\n            item_id=item_id, item_name=item_name, quantity=quantity\\n        )\\n\\n    return {\"item\": grocery_list[item_id]}\\n\\n\\n# Route to list a specific item by ID\\n@app.get(\"/items/{item_id}\")\\ndef list_item(item_id: int) -> dict[str, ItemPayload]:\\n    if item_id not in grocery_list:\\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\\n    return {\"item\": grocery_list[item_id]}\\n\\n\\n# Route to list all items\\n@app.get(\"/items\")\\ndef list_items() -> dict[str, dict[int, ItemPayload]]:\\n    return {\"items\": grocery_list}\\n\\n\\n# Route to delete a specific item by ID\\n@app.delete(\"/items/{item_id}\")\\ndef delete_item(item_id: int) -> dict[str, str]:\\n    if item_id not in grocery_list:\\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\\n    del grocery_list[item_id]\\n    return {\"result\": \"Item deleted.\"}\\n\\n\\n# Route to remove some quantity of a specific item by ID\\n@app.delete(\"/items/{item_id}/{quantity}\")\\ndef remove_quantity(item_id: int, quantity: int) -> dict[str, str]:\\n    if item_id not in grocery_list:\\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\\n    # if quantity to be removed is higher or equal to item's quantity, delete the item\\n    if grocery_list[item_id].quantity <= quantity:\\n        del grocery_list[item_id]\\n        return {\"result\": \"Item deleted.\"}\\n    else:\\n        grocery_list[item_id].quantity -= quantity\\n    return {\"result\": f\"{quantity} items removed.\"}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating VS Code Task Instance\nDESCRIPTION: TypeScript code demonstrating how to create a new VS Code task for Rake compilation\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/task-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet task = new vscode.Task(\n  { type: 'rake', task: 'compile' },\n  vscode.workspace.workspaceFolders[0],\n  'compile',\n  'rake',\n  new vscode.ShellExecution('rake compile')\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling pytest Testing in VS Code (settings.json)\nDESCRIPTION: Enables the pytest framework for Python testing within VS Code. This setting should be configured in the User or Workspace `settings.json` file. If pytest is not installed, the extension attempts to install it. If both unittest and pytest are enabled, pytest takes precedence. Requires pytest version 7.0.0 or higher.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"python.testing.pytestEnabled\": true\n```\n\n----------------------------------------\n\nTITLE: Setting up Debugging with launch.json for Node.js - JSON\nDESCRIPTION: This snippet defines a Visual Studio Code launch configuration for debugging a Node.js program written in TypeScript. It uses the node debugger, specifies the entry TypeScript file, sets a pre-launch TypeScript build task, and configures the outFiles path for the generated JavaScript. The file provides all default attributes and comments as they would appear with VS Code IntelliSense. Required dependencies include Node.js, VS Code, and the TypeScript compiler.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    // Use IntelliSense to learn about possible attributes.\\n    // Hover to view descriptions of existing attributes.\\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\\n    \"version\": \"0.2.0\",\\n    \"configurations\": [\\n        {\\n            \"type\": \"node\",\\n            \"request\": \"launch\",\\n            \"name\": \"Launch Program\",\\n            \"program\": \"${workspaceFolder}/helloworld.ts\",\\n            \"preLaunchTask\": \"tsc: build - tsconfig.json\",\\n            \"outFiles\": [\\n                \"${workspaceFolder}/out/**/*.js\"\\n            ]\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Commands and Messaging Webview via postMessage (TypeScript)\nDESCRIPTION: This snippet expands the previous webview example by supporting two commands: starting the Cat Coding panel and instructing the webview to perform a 'refactor' action via postMessage. The extension uses the vscode API for panel management, ensures only one webview panel exists, and serializes messages as JSON. The webview includes JavaScript that listens for window message events and, upon receiving a 'refactor' command, cuts its counter in half. The dependencies are the vscode API, and knowledge of the message contract. Inputs are extension commands and messages; outputs are UI updates inside the webview. Disposal and subscription management for cleanup are also shown.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n  // Only allow a single Cat Coder\n  let currentPanel: vscode.WebviewPanel | undefined = undefined;\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      if (currentPanel) {\n        currentPanel.reveal(vscode.ViewColumn.One);\n      } else {\n        currentPanel = vscode.window.createWebviewPanel(\n          'catCoding',\n          'Cat Coding',\n          vscode.ViewColumn.One,\n          {\n            enableScripts: true\n          }\n        );\n        currentPanel.webview.html = getWebviewContent();\n        currentPanel.onDidDispose(\n          () => {\n            currentPanel = undefined;\n          },\n          undefined,\n          context.subscriptions\n        );\n      }\n    })\n  );\n\n  // Our new command\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.doRefactor', () => {\n      if (!currentPanel) {\n        return;\n      }\n\n      // Send a message to our webview.\n      // You can send any JSON serializable data.\n      currentPanel.webview.postMessage({ command: 'refactor' });\n    })\n  );\n}\n\nfunction getWebviewContent() {\n  return `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\\\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\\\" width=\\\"300\\\" />\n    <h1 id=\\\"lines-of-code-counter\\\">0</h1>\n\n    <script>\n        const counter = document.getElementById('lines-of-code-counter');\n\n        let count = 0;\n        setInterval(() => {\n            counter.textContent = count++;\n        }, 100);\n\n        // Handle the message inside the webview\n        window.addEventListener('message', event => {\n\n            const message = event.data; // The JSON data our extension sent\n\n            switch (message.command) {\n                case 'refactor':\n                    count = Math.ceil(count * 0.5);\n                    counter.textContent = count;\n                    break;\n            }\n        });\n    <\\/script>\n</body>\n</html>`;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Language Configuration in JSON\nDESCRIPTION: Full language configuration example showing all supported features including comments, brackets, autoclose pairs, folding markers, word patterns and indentation rules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-configuration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"comments\": {\n    \"lineComment\": \"//\",\n    \"blockComment\": [\"/*\", \"*/\"]\n  },\n  \"brackets\": [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  \"autoClosingPairs\": [\n    { \"open\": \"{\", \"close\": \"}\" },\n    { \"open\": \"[\", \"close\": \"]\" },\n    { \"open\": \"(\", \"close\": \")\" },\n    { \"open\": \"'\", \"close\": \"'\", \"notIn\": [\"string\", \"comment\"] },\n    { \"open\": \"\\\"\", \"close\": \"\\\"\", \"notIn\": [\"string\"] },\n    { \"open\": \"`\", \"close\": \"`\", \"notIn\": [\"string\", \"comment\"] },\n    { \"open\": \"/**\", \"close\": \" */\", \"notIn\": [\"string\"] }\n  ],\n  \"autoCloseBefore\": \";:.,=}])>` \\n\\t\",\n  \"surroundingPairs\": [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"'\", \"'\"],\n    [\"\\\"\", \"\\\"\"],\n    [\"`\", \"`\"]\n  ],\n  \"folding\": {\n    \"markers\": {\n      \"start\": \"^\\\\s*//\\\\s*#?region\\\\b\",\n      \"end\": \"^\\\\s*//\\\\s*#?endregion\\\\b\"\n    }\n  },\n  \"wordPattern\": \"(-?\\\\d*\\\\.\\\\d\\\\w*)|([^\\\\`\\\\~\\\\!\\\\@\\\\#\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\=\\\\+\\\\[\\\\{\\\\]\\\\}\\\\\\\\\\\\|\\\\;\\\\:\\\\'\\\\\\\"\\\\,\\\\.\\\\<\\\\>\\\\/\\\\?\\\\s]+)\",\n  \"indentationRules\": {\n    \"increaseIndentPattern\": \"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\",\n    \"decreaseIndentPattern\": \"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\)\\\\}\\\\]].*$\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagnostics in VS Code Extension\nDESCRIPTION: This TypeScript code demonstrates how to create and manage diagnostics in a VS Code extension. It sets up a diagnostic collection, listens for document changes, and updates diagnostics based on errors found in the code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet diagnosticCollection: vscode.DiagnosticCollection;\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n  ...\n  ctx.subscriptions.push(getDisposable());\n  diagnosticCollection = vscode.languages.createDiagnosticCollection('go');\n  ctx.subscriptions.push(diagnosticCollection);\n  ...\n}\n\nfunction onChange() {\n  let uri = document.uri;\n  check(uri.fsPath, goConfig).then(errors => {\n    diagnosticCollection.clear();\n    let diagnosticMap: Map<string, vscode.Diagnostic[]> = new Map();\n    errors.forEach(error => {\n      let canonicalFile = vscode.Uri.file(error.file).toString();\n      let range = new vscode.Range(error.line-1, error.startColumn, error.line-1, error.endColumn);\n      let diagnostics = diagnosticMap.get(canonicalFile);\n      if (!diagnostics) { diagnostics = []; }\n      diagnostics.push(new vscode.Diagnostic(range, error.msg, error.severity));\n      diagnosticMap.set(canonicalFile, diagnostics);\n    });\n    diagnosticMap.forEach((diags, file) => {\n      diagnosticCollection.set(vscode.Uri.parse(file), diags);\n    });\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C/C++ IntelliSense on Windows using MinGW (JSON)\nDESCRIPTION: This JSON snippet shows a sample `c_cpp_properties.json` configuration for a C/C++ project on Windows using the MinGW GCC compiler. It specifies the configuration name ('Win32'), include paths using the `${workspaceFolder}` variable, preprocessor defines, the Windows SDK version, C/C++ language standards, the default IntelliSense mode, and the explicit path to the MinGW GCC compiler executable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"windowsSdkVersion\": \"10.0.22621.0\",\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"${default}\",\n            \"compilerPath\": \"C:/msys64/mingw64/bin/gcc.exe\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Hover Provider for JavaScript in VS Code\nDESCRIPTION: This snippet demonstrates how to register a hover provider for JavaScript files using the vscode.languages.registerHoverProvider API. The provider implements the provideHover method that returns hover content when a user hovers over JavaScript code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerHoverProvider('javascript', {\n  provideHover(document, position, token) {\n    return {\n      contents: ['Hover Content']\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Neural Network Model with Keras in Python\nDESCRIPTION: Initializes a Sequential neural network model using Keras, which will be used for deep learning classification of the Titanic dataset.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for Client-Side Project (tsconfig.json) - JSON\nDESCRIPTION: This tsconfig.json defines TypeScript compiler options suitable for browser/web projects, outputting to an 'out' directory with source maps enabled for debugging. Parameters such as 'target', 'module', 'outDir', and 'sourceMap' ensure the compiled JS is debuggable and correctly structured for browser-based workflows. It requires TypeScript and supports browser debugging with VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"compilerOptions\": {\\n        \"target\": \"ES5\",\\n        \"module\": \"CommonJS\",\\n        \"outDir\": \"out\",\\n        \"sourceMap\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Node Dev Container Configuration\nDESCRIPTION: Example devcontainer.json configuration that uses a pre-built TypeScript Node development container image, forwards port 3000, and installs a code spell checker extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/typescript-node\",\n    \"forwardPorts\": [ 3000 ],\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"streetsidesoftware.code-spell-checker\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Language Client in TypeScript\nDESCRIPTION: Implements a VS Code extension that creates and manages a Language Server Protocol client. It configures server options, client options, creates the language client, and handles extension activation and deactivation. The client is set up to work with plaintext files and communicate with the server via IPC.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from 'path';\nimport { workspace, ExtensionContext } from 'vscode';\n\nimport {\n  LanguageClient,\n  LanguageClientOptions,\n  ServerOptions,\n  TransportKind\n} from 'vscode-languageclient/node';\n\nlet client: LanguageClient;\n\nexport function activate(context: ExtensionContext) {\n  // The server is implemented in node\n  let serverModule = context.asAbsolutePath(path.join('server', 'out', 'server.js'));\n  // The debug options for the server\n  // --inspect=6009: runs the server in Node's Inspector mode so VS Code can attach to the server for debugging\n  let debugOptions = { execArgv: ['--nolazy', '--inspect=6009'] };\n\n  // If the extension is launched in debug mode then the debug server options are used\n  // Otherwise the run options are used\n  let serverOptions: ServerOptions = {\n    run: { module: serverModule, transport: TransportKind.ipc },\n    debug: {\n      module: serverModule,\n      transport: TransportKind.ipc,\n      options: debugOptions\n    }\n  };\n\n  // Options to control the language client\n  let clientOptions: LanguageClientOptions = {\n    // Register the server for plain text documents\n    documentSelector: [{ scheme: 'file', language: 'plaintext' }],\n    synchronize: {\n      // Notify the server about file changes to '.clientrc files contained in the workspace\n      fileEvents: workspace.createFileSystemWatcher('**/.clientrc')\n    }\n  };\n\n  // Create the language client and start the client.\n  client = new LanguageClient(\n    'languageServerExample',\n    'Language Server Example',\n    serverOptions,\n    clientOptions\n  );\n\n  // Start the client. This will also launch the server\n  client.start();\n}\n\nexport function deactivate(): Thenable<void> | undefined {\n  if (!client) {\n    return undefined;\n  }\n  return client.stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Compile Commands Database for IntelliSense - JSON\nDESCRIPTION: This snippet illustrates how to configure a C/C++ project to use a 'compile_commands.json' file for IntelliSense by assigning its path to the 'compileCommands' property in 'c_cpp_properties.json'. This file must be generated by a build system (such as CMake or Bazel) and placed in the project directory. The '${workspaceFolder}' variable dynamically resolves to the project's root folder. This configuration enhances IntelliSense accuracy by using actual compilation arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"compileCommands\": \"${workspaceFolder}/compile_commands.json\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Publish-only Test Controller in TypeScript\nDESCRIPTION: Example implementation of a publish-only test controller that loads test results from external files. The controller creates test runs without profiles and updates test states based on file contents. It demonstrates how to create non-persistent test runs and publish results.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = vscode.tests.createTestController('myCoverageFileTests', 'Coverage File Tests');\n\nvscode.commands.registerCommand('myExtension.loadTestResultFile', async file => {\n  const info = await readFile(file);\n\n  // set the controller items to those read from the file:\n  controller.items.replace(readTestsFromInfo(info));\n\n  // create your own custom test run, then you can immediately set the state of\n  // items in the run and end it to publish results:\n  const run = controller.createTestRun(new vscode.TestRunRequest(), path.basename(file), false);\n  for (const result of info) {\n    if (result.passed) {\n      run.passed(result.item);\n    } else {\n      run.failed(result.item, new vscode.TestMessage(result.message));\n    }\n  }\n  run.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Keyboard Shortcut to a Task in keybindings.json (JSON)\nDESCRIPTION: This JSON snippet defines a keyboard shortcut in VS Code's `keybindings.json` file. It binds the key combination 'Ctrl+H' to the command 'workbench.action.tasks.runTask'. The 'args' property specifies the label ('Run tests') of the task to be executed when the shortcut is pressed, allowing for quick execution of frequently used tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+h\",\n    \"command\": \"workbench.action.tasks.runTask\",\n    \"args\": \"Run tests\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Type Formatting Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create an OnTypeFormattingEditProvider class and register it in the extension's activate function. This provider allows formatting text as the user types, triggered by specific characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoOnTypingFormatter implements vscode.OnTypeFormattingEditProvider{\n    public provideOnTypeFormattingEdits(\n        document: vscode.TextDocument, position: vscode.Position,\n        ch: string, options: vscode.FormattingOptions, token: vscode.CancellationToken):\n        vscode.ProviderResult<vscode.TextEdit[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerOnTypeFormattingEditProvider(\n            GO_MODE, new GoOnTypingFormatter()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Extension Generator with npx\nDESCRIPTION: Command to run Yeoman and VS Code Extension Generator using npx without globally installing them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/your-first-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx --package yo --package generator-code -- yo code\n```\n\n----------------------------------------\n\nTITLE: Setting a Non-Root User in devcontainer.json\nDESCRIPTION: JSON configuration that specifies which user VS Code should run as inside the container. This is important for avoiding permission issues with mounted volumes, especially on Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"remoteUser\": \"your-user-name-here\"\n```\n\n----------------------------------------\n\nTITLE: Combined Effective VS Code Editor Color Customizations - JSON\nDESCRIPTION: Shows the effective merged state of VS Code editor color customizations when user and workspace settings are combined according to VS Code precedence rules. Each property comes from either user or workspace settings, demonstrating both the override and merge behavior of object values. This output is not pasted by the user, but results from the settings engine merging settings from all scopes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"editor.background\": \"#000088\",\n    \"editor.selectionBackground\": \"#00FF00\",\n    \"editor.foreground\": \"#880000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Python 3 Installation on Linux/macOS using Bash\nDESCRIPTION: Executes the `python3 --version` command in a Bash terminal (Linux/macOS) to confirm successful Python 3 installation and display its version. This is a prerequisite check mentioned in the tutorial.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest Arguments (settings.json)\nDESCRIPTION: Specifies command-line arguments passed to pytest during test discovery and execution. By default, pytest looks for Python files named `test_*.py` or `*_test.py` anywhere in the current folder and subfolders. To enable coverage, ensure the `--cov` argument is included; if omitted, the extension adds `--cov=.` by default. The `pytest-cov` package is required for coverage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Example: Pass custom arguments to pytest, including enabling coverage\n\"python.testing.pytestArgs\": [\n    \"--cov\", // Enable coverage via pytest-cov\n    \"--cov-report=html\",\n    \"tests/\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Serializer in TypeScript\nDESCRIPTION: Implements a NotebookSerializer for handling Jupyter Notebook formatted files with a .notebook extension. It includes methods for deserializing and serializing notebook data, converting between raw notebook format and VS Code's NotebookData.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TextDecoder, TextEncoder } from \"util\";\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(\n        vscode.workspace.registerNotebookSerializer(\n            \"my-notebook\", new SampleSerializer()\n        )\n    );\n}\n\ninterface RawNotebook {\n\tcells: RawNotebookCell[];\n}\n\ninterface RawNotebookCell {\n    source: string[];\n    cell_type: 'code' | 'markdown';\n}\n\nclass SampleSerializer implements vscode.NotebookSerializer {\n    async deserializeNotebook(content: Uint8Array, _token: vscode.CancellationToken): Promise<vscode.NotebookData> {\n        var contents = new TextDecoder().decode(content);\n\n        let raw: RawNotebookCell[];\n        try {\n            raw = (<RawNotebook>JSON.parse(contents)).cells;\n        } catch {\n            raw = [];\n        }\n\n        const cells = raw.map(item => new vscode.NotebookCellData(\n\t\t\titem.cell_type === 'code' ? vscode.NotebookCellKind.Code : vscode.NotebookCellKind.Markup,\n            item.source.join('\\n'),\n\t\t\titem.cell_type === 'code' ? 'python' : 'markdown'\n        ));\n\n        return new vscode.NotebookData(cells);\n    }\n\n    async serializeNotebook(data: vscode.NotebookData, _token: vscode.CancellationToken): Promise<Uint8Array> {\n        let contents: RawNotebookCell[] = [];\n\n        for (const cell of data.cells) {\n            contents.push({\n                cell_type: cell.kind === vscode.NotebookCellKind.Code ? 'code' : 'markdown',\n                source: cell.value.split(/\\r?\\n/g)\n            });\n        }\n\n        return new TextEncoder().encode(JSON.stringify(contents));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Completion Provider in TypeScript\nDESCRIPTION: Direct implementation of a completion item provider in TypeScript, including provider registration and completion item generation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoCompletionItemProvider implements vscode.CompletionItemProvider {\n    public provideCompletionItems(\n        document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken):\n        Thenable<vscode.CompletionItem[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(getDisposable());\n    ctx.subscriptions.push(\n        vscode.languages.registerCompletionItemProvider(\n            GO_MODE, new GoCompletionItemProvider(), '.', '\"'));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Language Extension Demonstrations\nDESCRIPTION: Example showing the console.log IntelliSense feature provided by TypeScript Language Features extension\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Custom Instructions using Markdown\nDESCRIPTION: This snippet demonstrates an example `.github/copilot-instructions.md` file. It uses Markdown to define project context (React/Node.js), indentation rules (tabs), coding style preferences (camelCase, arrow functions), and testing frameworks (Jest, Playwright) to guide GitHub Copilot's code generation and suggestions based on specific workspace conventions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-tips-and-tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Custom instructions for Copilot\n\n## Project context\nThis project is a web application built with React and Node.js.\n\n## Indentation\nWe use tabs, not spaces.\n\n## Coding style\nUse camelCase for variable names and prefer arrow functions over traditional function expressions.\n\n## Testing\nWe use Jest for unit testing and Playwright for end-to-end testing.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch for Language Server E2E Testing\nDESCRIPTION: JSON configuration for setting up end-to-end testing of language server extensions in VS Code. This launch configuration opens a test workspace and executes test files that validate language server functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Language Server E2E Test\",\n  \"type\": \"extensionHost\",\n  \"request\": \"launch\",\n  \"runtimeExecutable\": \"${execPath}\",\n  \"args\": [\n    \"--extensionDevelopmentPath=${workspaceRoot}\",\n    \"--extensionTestsPath=${workspaceRoot}/client/out/test/index\",\n    \"${workspaceRoot}/client/testFixture\"\n  ],\n  \"outFiles\": [\"${workspaceRoot}/client/out/test/**/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Types with TypeScript Declaration File (.d.ts)\nDESCRIPTION: This TypeScript snippet shows the content of a declaration file (`.d.ts`, e.g., `globals.d.ts`). It defines the types for previously undeclared global variables (`CAN_NOTIFY`) and extends existing interfaces (`Window`) to include non-standard properties (`webkitNotifications`), thereby resolving type errors when using `// @ts-check`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ninterface Window {\n    webkitNotifications: any;\n}\n\ndeclare var CAN_NOTIFY: number;\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for Script Execution (PowerShell)\nDESCRIPTION: Temporarily changes the PowerShell execution policy for the current process to 'RemoteSigned'. This is used to allow running local scripts like the Python environment activation script (`Activate.ps1`) if it's blocked due to digital signing policies on Windows. This command needs to be run in PowerShell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n`Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process`\n```\n\n----------------------------------------\n\nTITLE: Starting Debugging with Copilot-Debug for Node.js Applications\nDESCRIPTION: Use the copilot-debug command in the integrated terminal to automatically configure and start a debugging session for a Node.js application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/guides/debug-with-copilot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncopilot-debug node app.js\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Template for Logging Messages in Django\nDESCRIPTION: Defines an HTML template for a form to log messages, extending a base layout and including CSRF protection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"hello/layout.html\" %}\n{% block title %}\n    Log a message\n{% endblock %}\n{% block content %}\n    <form method=\"POST\" class=\"log-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"save btn btn-default\">Log</button>\n    </form>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Message View Function in Django\nDESCRIPTION: Defines the 'log_message' view function to handle both GET and POST requests for logging messages, including form validation and saving to the database.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import redirect\nfrom hello.forms import LogMessageForm\nfrom hello.models import LogMessage\n\ndef log_message(request):\n    form = LogMessageForm(request.POST or None)\n\n    if request.method == \"POST\":\n        if form.is_valid():\n            message = form.save(commit=False)\n            message.log_date = datetime.now()\n            message.save()\n            return redirect(\"home\")\n    else:\n        return render(request, \"hello/log_message.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Suggested Operation Prompts\nDESCRIPTION: Example prompts for managing and monitoring Azure resources and costs\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/11/15/introducing-github-copilot-for-azure.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n@azure how many web app plans using the free tier do I have deployed grouped by region sorted by highest to lowest?\n@azure How do I list all the pods in my AKS cluster?\n@azure Breakdown the cost of my [VeryImportantResourceGroup] resource group for October?\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Attach for Debugpy in VS Code - JSON\nDESCRIPTION: This block is a sample VS Code launch.json configuration for attaching to a remote Python process through debugpy. Required fields include the debug adapter type ('debugpy'), communication port and host (matching the SSH tunnel), and pathMappings for mapping local to remote directories. The primary input parameters are port (e.g., 5678), host (typically 'localhost' when tunneling), and mapping 'localRoot' and 'remoteRoot' to match source code locations. This configuration enables VS Code on the local machine to attach to the remote Python process via an SSH tunnel regardless of filesystem structure differences.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Attach\",\n    \"type\": \"debugpy\",\n    \"request\": \"attach\",\n    \"port\": 5678,\n    \"host\": \"localhost\",\n    \"pathMappings\": [\n        {\n            \"localRoot\": \"${workspaceFolder}\", // Maps C:\\\\Users\\\\user1\\\\project1\n            \"remoteRoot\": \".\"                  // To current working directory ~/project1\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Anaconda Environment for Data Science Modules - Shell\nDESCRIPTION: This shell command initializes a new Anaconda environment named \\\"myenv\\\" with Python 3.10 and pre-installs essential data science and machine learning libraries including pandas, jupyter, seaborn, scikit-learn, keras, and tensorflow. The command should be executed in an Anaconda Prompt. It assumes Anaconda or Miniconda is already installed. The main input is the desired environment name, and upon completion, a new isolated environment suitable for Python data science workflows becomes available for activation and use. It is important to ensure no name conflicts exist with existing environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n myenv python=3.10 pandas jupyter seaborn scikit-learn keras tensorflow\n```\n\n----------------------------------------\n\nTITLE: Creating a TestController in VS Code Testing API\nDESCRIPTION: Shows how to create a TestController instance with a unique ID and human-readable label. The TestController is the main entry point for providing tests in VS Code extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = vscode.tests.createTestController('helloWorldTests', 'Hello World Tests');\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation with NumPy - Python\nDESCRIPTION: This snippet illustrates importing the numpy package and using it to print a random integer between 1 and 8, in addition to displaying a message string. It requires numpy to be installed in the Python environment and is intended for use in a 'hello.py' file. The main input is none; the output is printed in the terminal. If numpy is missing, running this script results in a ModuleNotFoundError.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nmsg = \"Roll a dice!\"\nprint(msg)\n\nprint(np.random.randint(1,9))\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Server in Launch Configuration\nDESCRIPTION: This JSON snippet shows how to configure the mock debugger to connect to the Debug Adapter server on port 4711. It's added to the launch configuration in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/debugger-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"mock\",\n      \"request\": \"launch\",\n      \"name\": \"mock test\",\n      \"program\": \"${workspaceFolder}/readme.md\",\n      \"stopOnEntry\": true,\n      \"debugServer\": 4711\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller-Renderer Communication\nDESCRIPTION: JavaScript code implementing communication functions between controller and renderer using global message passing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"vscode-notebook-renderer/preload\";\n\nglobalThis.githubIssueCommentProvider = {\n  loadComments(issueId: string, callback: (comments: GithubComment[]) => void) {\n    postKernelMessage({ command: 'comments', issueId });\n\n    onDidReceiveKernelMessage(event => {\n        if (event.data.type === 'comments' && event.data.issueId === issueId) {\n            callback(event.data.comments);\n        }\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript For Loop Snippet in VS Code (JSON)\nDESCRIPTION: Demonstrates how to structure a user-defined code snippet for JavaScript within a Visual Studio Code snippet file using JSON format. This snippet defines a for-loop with customizable placeholders for easy insertion and modification, utilizing TextMate syntax for dynamic editing. No external dependencies are required; the file is placed in the appropriate VS Code snippets directory under 'javascript.json'. The key parameters include 'prefix' for triggers, 'body' for snippet content with placeholders (${1:array}, ${2:element}, $0), and 'description' for IntelliSense display. The snippet will show in JavaScript files, and can be triggered via IntelliSense or the Insert Snippet command. Multiline and placeholder navigation are supported, with the constraint that only TextMate features supported by VS Code may be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// in file 'Code/User/snippets/javascript.json'\\n{\\n    \\\"For Loop\\\": {\\n        \\\"prefix\\\": [\\n          \\\"for\\\",\\n          \\\"for-const\\\"\\n        ],\\n        \\\"body\\\": [\\n          \\\"for (const ${2:element} of ${1:array}) {\\\",\\n          \"\\t$0\",\\n          \"}\"\\n        ],\\n        \\\"description\\\": \\\"A for loop.\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Python Module with Debugpy via Command Line - Bash\nDESCRIPTION: This shell command launches a Python module (e.g., myproject) and injects debugpy for remote debugging. The --listen flag specifies the IP address and port for incoming debugger connections, while --wait-for-client ensures the application waits until a remote debugger attaches before running any user code. Dependencies include Python (preferably python3), the debugpy package installed on the remote system, and required module or script availability. Modify '1.2.3.4:5678' and '-m myproject' as appropriate for your environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m debugpy --listen 1.2.3.4:5678 --wait-for-client -m myproject\n\n```\n\n----------------------------------------\n\nTITLE: Test Script for Running VS Code Extension Tests\nDESCRIPTION: This TypeScript script uses the @vscode/test-electron API to set up and run VS Code extension tests. It handles downloading VS Code, launching it with the extension, and running the test runner script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from 'path';\n\nimport { runTests } from '@vscode/test-electron';\n\nasync function main() {\n  try {\n    // The folder containing the Extension Manifest package.json\n    // Passed to `--extensionDevelopmentPath`\n    const extensionDevelopmentPath = path.resolve(__dirname, '../../');\n\n    // The path to the extension test runner script\n    // Passed to --extensionTestsPath\n    const extensionTestsPath = path.resolve(__dirname, './suite/index');\n\n    // Download VS Code, unzip it and run the integration test\n    await runTests({ extensionDevelopmentPath, extensionTestsPath });\n  } catch (err) {\n    console.error(err);\n    console.error('Failed to run tests');\n    process.exit(1);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment (Linux/macOS)\nDESCRIPTION: This snippet shows the commands to create a Python virtual environment named '.venv' using the 'venv' module and then activate it on Linux and macOS systems. An optional command to install the 'python3-venv' package on Linux systems if needed is included.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\nsudo apt-get install python3-venv    # If needed\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# macOS\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Controlling Local Resource Access in VS Code Webview (TypeScript)\nDESCRIPTION: This snippet shows how to use the `localResourceRoots` option to restrict a webview to only load resources from a specific directory in the extension. This enhances security by limiting the scope of accessible local resources.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {\n          // Only allow the webview to access resources in our extension's media directory\n          localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'media')]\n        }\n      );\n\n      const onDiskPath = vscode.Uri.joinPath(context.extensionUri, 'media', 'cat.gif');\n      const catGifSrc = panel.webview.asWebviewUri(onDiskPath);\n\n      panel.webview.html = getWebviewContent(catGifSrc);\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages in FastAPI Python Application\nDESCRIPTION: This code snippet imports essential modules from FastAPI for creating the API (`FastAPI`, `HTTPException`) and a user-defined model (`ItemPayload`) for representing grocery list items. The code expects `models` to be a local module containing `ItemPayload`, which is assumed to be a class or data model defining the structure of an item. These imports form the foundation for building routes, handling HTTP requests, and input validation throughout the application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\\n\\nfrom models import ItemPayload\n```\n\n----------------------------------------\n\nTITLE: Implementing a Semantic Token Provider in TypeScript for VS Code Extensions\nDESCRIPTION: This snippet demonstrates how to create and register a DocumentSemanticTokensProvider that enhances code highlighting with semantic information. It shows the creation of a token legend, implementation of the provider interface, and registration with the VS Code API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokenTypes = ['class', 'interface', 'enum', 'function', 'variable'];\nconst tokenModifiers = ['declaration', 'documentation'];\nconst legend = new vscode.SemanticTokensLegend(tokenTypes, tokenModifiers);\n\nconst provider: vscode.DocumentSemanticTokensProvider = {\n  provideDocumentSemanticTokens(document: vscode.TextDocument): vscode.ProviderResult<vscode.SemanticTokens> {\n    // analyze the document and return semantic tokens\n\n    const tokensBuilder = new vscode.SemanticTokensBuilder(legend);\n    // on line 1, characters 1-5 are a class declaration\n    tokensBuilder.push(\n      new vscode.Range(new vscode.Position(1, 1), new vscode.Position(1, 5)),\n      'class',\n      ['declaration'],\n    );\n    return tokensBuilder.build();\n  }\n};\n\nconst selector = { language: 'java', scheme: 'file' }; // register for all Java documents from the local file system\n\nvscode.languages.registerDocumentSemanticTokensProvider(selector, provider, legend);\n```\n\n----------------------------------------\n\nTITLE: Type Acquisition Configuration in jsconfig.json\nDESCRIPTION: A jsconfig.json configuration example demonstrating how to explicitly include type declarations for libraries that should receive IntelliSense support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typeAcquisition\": {\n        \"include\": [\n            \"jquery\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Manifest (package.json) for VS Code Extension\nDESCRIPTION: Demonstrates the structure of the package.json file for a VS Code extension, including important fields like name, publisher, activationEvents, and contributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/extension-anatomy.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"helloworld-sample\",\n  \"displayName\": \"helloworld-sample\",\n  \"description\": \"HelloWorld example for VS Code\",\n  \"version\": \"0.0.1\",\n  \"publisher\": \"vscode-samples\",\n  \"repository\": \"https://github.com/microsoft/vscode-extension-samples/helloworld-sample\",\n  \"engines\": {\n    \"vscode\": \"^1.51.0\"\n  },\n  \"categories\": [\"Other\"],\n  \"activationEvents\": [],\n  \"main\": \"./out/extension.js\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"helloworld.helloWorld\",\n        \"title\": \"Hello World\"\n      }\n    ]\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"npm run compile\",\n    \"compile\": \"tsc -p ./\",\n    \"watch\": \"tsc -watch -p ./\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^8.10.25\",\n    \"@types/vscode\": \"^1.51.0\",\n    \"tslint\": \"^5.16.0\",\n    \"typescript\": \"^3.4.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a TypeScript Extension Project with Yeoman\nDESCRIPTION: Sample responses to the Yeoman generator prompts for creating a TypeScript-based VS Code extension project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/your-first-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ? What type of extension do you want to create? New Extension (TypeScript)\n# ? What's the name of your extension? HelloWorld\n### Press <Enter> to choose default for all options below ###\n\n# ? What's the identifier of your extension? helloworld\n# ? What's the description of your extension? LEAVE BLANK\n# ? Initialize a git repository? Y\n# ? Which bundler to use? unbundled\n# ? Which package manager to use? npm\n\n# ? Do you want to open the new folder with Visual Studio Code? Open with `code`\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Remote Debug Attach in launch.json\nDESCRIPTION: This JSON snippet defines a VS Code launch configuration named 'Python Debugger: Remote Attach'. It uses the 'debugpy' debugger type to attach to a Python process running remotely (e.g., in a Docker container) on localhost:5678. The `pathMappings` property maps the local workspace folder to the `/app` directory inside the container, allowing VS Code to correctly map breakpoints.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"configurations\": [\n {\n    \"name\": \"Python Debugger: Remote Attach\",\n    \"type\": \"debugpy\",\n    \"request\": \"attach\",\n    \"port\": 5678,\n    \"host\": \"localhost\",\n    \"pathMappings\": [\n        {\n            \"localRoot\": \"${workspaceFolder}\",\n            \"remoteRoot\": \"/app\"\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Debug Launch in launch.json (JSON)\nDESCRIPTION: This JSON snippet defines a VS Code launch configuration in `launch.json` for debugging a Python Flask application inside a Docker container. It uses the 'docker' debug type, specifies a `preLaunchTask` ('docker-run: debug') that must run before debugging starts, maps local workspace files to the '/app' directory in the container, identifies the project as 'flask', and configures an action to automatically open the application URL in a browser when the Flask server starts within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n      {\n        \"name\": \"Debug Flask App\",\n        \"type\": \"docker\",\n        \"request\": \"launch\",\n\n        \"preLaunchTask\": \"docker-run: debug\",\n        \"python\": {\n          \"pathMappings\": [\n            {\n              \"localRoot\": \"${workspaceFolder}\",\n              \"remoteRoot\": \"/app\"\n            }\n          ],\n          \"projectType\": \"flask\"\n        },\n        \"dockerServerReadyAction\": {\n          \"action\": \"openExternally\",\n          \"pattern\": \"Running on (http?://\\S+|[0-9]+)\",\n          \"uriFormat\": \"%s://localhost:%s/\"\n        }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ IntelliSense Properties in VS Code (c_cpp_properties.json)\nDESCRIPTION: This JSON snippet illustrates a `.vscode/c_cpp_properties.json` file for configuring the VS Code C/C++ extension on macOS. It defines settings under a 'Mac' configuration name, including `includePath` for header file locations (set to the workspace folder), `defines`, `macFrameworkPath` (pointing to system frameworks), `compilerPath` (set to `/usr/bin/clang`), C/C++ standards (`c11`, `c++17`), and the `intelliSenseMode` (`macos-clang-arm64`). These settings help the extension provide accurate code completion, navigation, and error highlighting by informing it about the project's structure and the compiler environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Mac\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [],\n            \"macFrameworkPath\": [\n                \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks\"\n            ],\n            \"compilerPath\": \"/usr/bin/clang\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"macos-clang-arm64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Completion Handler in TypeScript Language Server\nDESCRIPTION: Sets up completion providers in a language server that suggest 'TypeScript' and 'JavaScript' as completion items. This snippet demonstrates both the initial completion handler and a resolve handler for providing additional details about selected items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// This handler provides the initial list of the completion items.\nconnection.onCompletion(\n  (_textDocumentPosition: TextDocumentPositionParams): CompletionItem[] => {\n    // The pass parameter contains the position of the text document in\n    // which code complete got requested. For the example we ignore this\n    // info and always provide the same completion items.\n    return [\n      {\n        label: 'TypeScript',\n        kind: CompletionItemKind.Text,\n        data: 1\n      },\n      {\n        label: 'JavaScript',\n        kind: CompletionItemKind.Text,\n        data: 2\n      }\n    ];\n  }\n);\n\n// This handler resolves additional information for the item selected in\n// the completion list.\nconnection.onCompletionResolve(\n  (item: CompletionItem): CompletionItem => {\n    if (item.data === 1) {\n      item.detail = 'TypeScript details';\n      item.documentation = 'TypeScript documentation';\n    } else if (item.data === 2) {\n      item.detail = 'JavaScript details';\n      item.documentation = 'JavaScript documentation';\n    }\n    return item;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal .NET Core Docker-Run Task (VS Code, JSON)\nDESCRIPTION: This JSON task configuration is designed to launch a .NET Core application in a Docker container using VS Code. The 'netCore' object is specified, implicitly setting the 'platform' property to 'netcore'. The only required property is 'appProject', which points to a .NET project file. Dependencies include Docker and appropriate .NET SDKs in the image, and a dependent 'docker-build' task is recommended. The structure supports further customization for SSL and debugging as documented in the property section.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"version\\\": \\\"2.0.0\\\",\\n    \\\"tasks\\\": [\\n        {\\n            \\\"label\\\": \\\"Run .NET Core Image\\\",\\n            \\\"type\\\": \\\"docker-run\\\",\\n            \\\"netCore\\\": {\\n                \\\"appProject\\\": \\\"${workspaceFolder}/project.csproj\\\"\\n            }\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing History Component with Pass-through Priority\nDESCRIPTION: Creates a History component that wraps history messages and uses passPriority for direct priority inheritance from parent elements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/prompt-tsx.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PromptElement, BasePromptElementProps } from '@vscode/prompt-tsx';\n\ninterface IHistoryProps extends BasePromptElementProps {\n\thistory: ChatContext['history'];\n\tnewer: number;\n\tolder: number;\n\tpassPriority: true;\n}\n\nexport class History extends PromptElement<IHistoryProps> {\n\trender(): PromptPiece {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<HistoryMessages history={this.props.history.slice(0, -2)} priority={this.props.older} />\n\t\t\t\t<HistoryMessages history={this.props.history.slice(-2)} priority={this.props.newer} />\n\t\t\t</>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View Functions in Python\nDESCRIPTION: Python view functions for handling requests to the home, about, and contact pages. Each function renders a specific template using Django's render function, passing the request and template path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Replace the existing home function with the one below\ndef home(request):\n    return render(request, \"hello/home.html\")\n\ndef about(request):\n    return render(request, \"hello/about.html\")\n\ndef contact(request):\n    return render(request, \"hello/contact.html\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Validation in TypeScript Language Server\nDESCRIPTION: Implements a document validator that flags all occurrences of words in ALL CAPS. The validator listens for document changes and creates diagnostics with warning severity, including related information when supported.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndocuments.onDidChangeContent(async(change) => {\n  let textDocument = change.document;\n  // In this simple example we get the settings for every validate run.\n  let settings = await getDocumentSettings(textDocument.uri);\n\n  // The validator creates diagnostics for all uppercase words length 2 and more\n  let text = textDocument.getText();\n  let pattern = /\\b[A-Z]{2,}\\b/g;\n  let m: RegExpExecArray | null;\n\n  let problems = 0;\n  let diagnostics: Diagnostic[] = [];\n  while ((m = pattern.exec(text)) && problems < settings.maxNumberOfProblems) {\n    problems++;\n    let diagnostic: Diagnostic = {\n      severity: DiagnosticSeverity.Warning,\n      range: {\n        start: textDocument.positionAt(m.index),\n        end: textDocument.positionAt(m.index + m[0].length)\n      },\n      message: `${m[0]} is all uppercase.`,\n      source: 'ex'\n    };\n    if (hasDiagnosticRelatedInformationCapability) {\n      diagnostic.relatedInformation = [\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Spelling matters'\n        },\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Particularly for names'\n        }\n      ];\n    }\n    diagnostics.push(diagnostic);\n  }\n\n  // Send the computed diagnostics to VS Code.\n  connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });\n});\n```\n\n----------------------------------------\n\nTITLE: Complete FastAPI Redis Implementation\nDESCRIPTION: Full implementation of a FastAPI application with Redis integration, including routes for adding, retrieving single items, and listing all items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom fastapi import FastAPI, HTTPException\n\nfrom models import ItemPayload\n\napp = FastAPI()\n\nredis_client = redis.StrictRedis(host=\"0.0.0.0\", port=6379, db=0, decode_responses=True)\n\n# Route to add an item\n@app.post(\"/items/{item_name}/{quantity}\")\ndef add_item(item_name: str, quantity: int) -> dict[str, ItemPayload]:\n    if quantity <= 0:\n        raise HTTPException(status_code=400, detail=\"Quantity must be greater than 0.\")\n\n    # Check if item already exists\n    item_id_str: str | None = redis_client.hget(\"item_name_to_id\", item_name)\n\n    if item_id_str is not None:\n        item_id = int(item_id_str)\n        redis_client.hincrby(f\"item_id:{item_id}\", \"quantity\", quantity)\n    else:\n        # Generate an ID for the item\n        item_id: int = redis_client.incr(\"item_ids\")\n        redis_client.hset(\n            f\"item_id:{item_id}\",\n            mapping={\n                \"item_id\": item_id,\n                \"item_name\": item_name,\n                \"quantity\": quantity,\n            },\n        )\n        # Create a set so we can search by name too\n        redis_client.hset(\"item_name_to_id\", item_name, item_id)\n\n    return {\n        \"item\": ItemPayload(item_id=item_id, item_name=item_name, quantity=quantity)\n    }\n\n\n# Route to list a specific item by ID but using Redis\n@app.get(\"/items/{item_id}\")\ndef list_item(item_id: int) -> dict[str, dict[str, str]]:\n    if not redis_client.hexists(f\"item_id:{item_id}\", \"item_id\"):\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\n    else:\n        return {\"item\": redis_client.hgetall(f\"item_id:{item_id}\")}\n\n\n@app.get(\"/items\")\ndef list_items() -> dict[str, list[ItemPayload]]:\n    items: list[ItemPayload] = []\n    stored_items: dict[str, str] = redis_client.hgetall(\"item_name_to_id\")\n\n    for name, id_str in stored_items.items():\n        item_id: int = int(id_str)\n\n        item_name_str: str | None = redis_client.hget(f\"item_id:{item_id}\", \"item_name\")\n        if item_name_str is not None:\n            item_name: str = item_name_str\n        else:\n            continue  # skip this item if it has no name\n\n        item_quantity_str: str | None = redis_client.hget(\n            f\"item_id:{item_id}\", \"quantity\"\n        )\n        if item_quantity_str is not None:\n            item_quantity: int = int(item_quantity_str)\n        else:\n            item_quantity = 0\n\n        items.append(\n            ItemPayload(item_id=item_id, item_name=item_name, quantity=item_quantity)\n        )\n```\n\n----------------------------------------\n\nTITLE: Managing Coverage Data with WeakMap in TypeScript\nDESCRIPTION: Demonstrates how to associate detailed coverage data with FileCoverage objects using a WeakMap for efficient memory management.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst coverageData = new WeakMap<vscode.FileCoverage, MyCoverageDetails>();\n\nprofile.loadDetailedCoverage = (testRun, fileCoverage, token) => {\n  return coverageData.get(fileCoverage).load(token);\n}\n\nasync function runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  // ...\n\n  for await (const file of readCoverageOutput()) {\n    const coverage = new vscode.FileCoverage(file.uri, file.statementCoverage);\n    coverageData.set(coverage, file)\n    run.addCoverage(coverage);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing VS Code Command Palette for GitHub Copilot Sign In\nDESCRIPTION: Keyboard shortcut reference for accessing the Command Palette in VS Code to sign in to GitHub Copilot.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.showCommands)`\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Debug Terminal Skip Files in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `debug.javascript.terminalOptions` setting in VS Code's user or workspace settings. It specifically sets the `skipFiles` property to ignore internal Node.js files (`<node_internals>/**`) when debugging processes launched via the JavaScript Debug Terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"debug.javascript.terminalOptions\": {\n  \"skipFiles\": [\n    \"<node_internals>/**\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliSense Editor Settings in VS Code (JavaScript)\nDESCRIPTION: This code snippet shows a sample configuration object for Visual Studio Code's editor settings related to IntelliSense functionality, written in JSON format and placed within a JavaScript code block for documentation display. It details options like quick suggestions, acceptance behavior, pre-selection preferences, tab completion, and parameter hints. Users should add or adjust these settings in their VS Code \"settings.json\" file to customize code completion and suggestion behaviors. Expected input is an object of settings, with each key controlling an IntelliSense feature, and outputs depend on the editor's internal application of these settings. Some settings require boolean, string, or object values, and not all are available in every language mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/intellisense.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Controls if quick suggestions should show up while typing\n    \"editor.quickSuggestions\": {\n        \"other\": true,\n        \"comments\": false,\n        \"strings\": false\n    },\n\n     // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.\n    \"editor.acceptSuggestionOnCommitCharacter\": true,\n\n    // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change\n    \"editor.acceptSuggestionOnEnter\": \"on\",\n\n    // Controls the delay in ms after which quick suggestions will show up.\n    \"editor.quickSuggestionsDelay\": 10,\n\n    // Controls if suggestions should automatically show up when typing trigger characters\n    \"editor.suggestOnTriggerCharacters\": true,\n\n    // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions\n    \"editor.tabCompletion\": \"off\",\n\n    // Controls whether sorting favours words that appear close to the cursor\n    \"editor.suggest.localityBonus\": true,\n\n    // Controls how suggestions are pre-selected when showing the suggest list\n    \"editor.suggestSelection\": \"first\",\n\n    // Enable word based suggestions\n    \"editor.wordBasedSuggestions\": \"matchingDocuments\",\n\n    // Enable parameter hints\n    \"editor.parameterHints.enabled\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileContext Component in TypeScript/TSX for VSCode Prompt-TSX\nDESCRIPTION: This snippet defines a FileContext component that renders file contents based on PromptSizing. It includes imports from @vscode/prompt-tsx, defines the component structure, and provides a placeholder for the getExpandedFiles method implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/prompt-tsx.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PromptElement, BasePromptElementProps, PromptSizing, PromptPiece } from '@vscode/prompt-tsx';\n\nclass FileContext extends PromptElement<{ files: IFilesToInclude[] } & BasePromptElementProps> {\n\tasync render(_state: void, sizing: PromptSizing): Promise<PromptPiece> {\n\t\tconst files = await this.getExpandedFiles(sizing);\n\t\treturn <>{files.map(f => f.toString())}</>;\n\t}\n\n\tprivate async getExpandedFiles(sizing: PromptSizing) {\n\t\t// Implementation details are summarized here.\n\t\t// Refer to the repo for the complete implementation.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman and VS Code Extension Generator Globally\nDESCRIPTION: Commands to globally install Yeoman and VS Code Extension Generator for repeated use, then run the generator.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/your-first-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global yo generator-code\n\nyo code\n```\n\n----------------------------------------\n\nTITLE: Cleaning Titanic Data: Handling Missing Values and Types in Python\nDESCRIPTION: Replaces placeholder '?' characters with NumPy's NaN (Not a Number) value within the 'age' and 'fare' columns of the 'data' DataFrame using the `replace` method with `inplace=True`. Subsequently, converts the data types of the 'age' and 'fare' columns to float64 using `astype`. This step is crucial for handling missing data and ensuring columns have appropriate numeric types for analysis and modeling. Depends on the `data` DataFrame created in the previous step and the numpy library (imported as np).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata.replace('?', np.nan, inplace= True)\ndata = data.astype({\"age\": np.float64, \"fare\": np.float64})\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ IntelliSense with c_cpp_properties.json in VS Code (MinGW/g++)\nDESCRIPTION: This JSON snippet illustrates a `c_cpp_properties.json` file used to configure the VS Code C/C++ extension's IntelliSense features for a project using the MinGW g++ compiler on Windows. It defines a configuration named 'GCC', sets the compiler path (`compilerPath`), specifies include paths (`includePath`), sets C/C++ language standards (`cStandard`, `cppStandard`), defines preprocessor macros (`defines`), and configures the IntelliSense mode (`intelliSenseMode`) to match the compiler.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"GCC\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"windowsSdkVersion\": \"10.0.22000.0\",\n            \"compilerPath\": \"C:/msys64/mingw64/bin/g++.exe\",\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"windows-gcc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Flask Application with Multiple Routes in Python\nDESCRIPTION: This Python code defines a simple Flask web application. It imports necessary modules (re, datetime, Flask), creates a Flask app instance, and defines two routes: '/' which returns a simple greeting, and '/hello/<name>' which takes a name parameter from the URL, filters it using regex to allow only letters, gets the current timestamp, formats it, and returns a personalized greeting including the formatted time. This code is used as the example application to demonstrate debugging features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom datetime import datetime\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef home():\n    return \"Hello, Flask!\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello_there(name):\n    now = datetime.now()\n    formatted_now = now.strftime(\"%A, %d %B, %Y at %X\")\n\n    # Filter the name argument to letters only using regular expressions. URL arguments\n    # can contain arbitrary text, so we restrict to safe characters only.\n    match_object = re.match(\"[a-zA-Z]+\", name)\n\n    if match_object:\n        clean_name = match_object.group(0)\n    else:\n        clean_name = \"Friend\"\n\n    content = \"Hello there, \" + clean_name + \"! It's \" + formatted_now\n    return content\n```\n\n----------------------------------------\n\nTITLE: Implementing RenameProvider Directly in VS Code (TypeScript)\nDESCRIPTION: This TypeScript code shows how to implement symbol renaming directly using the VS Code API. It defines a class `GoRenameProvider` implementing the `vscode.RenameProvider` interface, specifically the `provideRenameEdits` method which calculates the necessary workspace edits across files. The provider is then registered for a specific language mode (`GO_MODE`) within the extension's `activate` function using `vscode.languages.registerRenameProvider`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoRenameProvider implements vscode.RenameProvider {\n    public provideRenameEdits(\n        document: vscode.TextDocument, position: vscode.Position,\n        newName: string, token: vscode.CancellationToken):\n        Thenable<vscode.WorkspaceEdit> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerRenameProvider(\n            GO_MODE, new GoRenameProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Engine Requirements and Dependencies in package.json\nDESCRIPTION: Defines the required VS Code engine version and dependencies needed for the language client. It specifies a minimum VS Code version of 1.52.0 and depends on version 7.0.0 or higher of the vscode-languageclient library.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"engines\": {\n    \"vscode\": \"^1.52.0\"\n},\n\"dependencies\": {\n    \"vscode-languageclient\": \"^7.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Completion Capability in Language Server Initialization\nDESCRIPTION: Configures the language server to advertise its code completion capabilities during initialization. This tells the client that the server supports completion requests and can resolve additional completion item details.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.onInitialize((params): InitializeResult => {\n    ...\n    return {\n        capabilities: {\n            ...\n            // Tell the client that the server supports code completion\n            completionProvider: {\n                resolveProvider: true\n            }\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Main Method with Java Snippets in VS Code\nDESCRIPTION: Shows how to quickly create the standard Java main method signature using VS Code snippets. Typing `main` or `psvm` and selecting the snippet generates the `public static void main(String[] args) {}` method structure, which is the entry point for Java applications. This relies on the Java Language Support extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-editing.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextDocumentContentProvider Interface in TypeScript\nDESCRIPTION: This code demonstrates how to implement the TextDocumentContentProvider interface by creating a class that implements the provideTextDocumentContent method. This example uses cowsay to generate content based on the URI path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myProvider = new class implements vscode.TextDocumentContentProvider {\n  provideTextDocumentContent(uri: vscode.Uri): string {\n    // invoke cowsay, use uri-path as text\n    return cowsay.say({ text: uri.path });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring C/C++ IntelliSense on Linux using GCC (JSON)\nDESCRIPTION: This JSON snippet illustrates a sample `c_cpp_properties.json` configuration for a C/C++ project on Linux using the GCC compiler (g++). It defines a configuration named 'Linux-GCC', sets include paths, provides the compiler path (`/usr/bin/g++`), specifies C/C++ standards, sets the IntelliSense mode to `gcc-x64`, and includes browse path settings to optimize symbol lookup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n        {\n          \"name\": \"Linux-GCC\",\n          \"includePath\": [\n            \"${workspaceFolder}/**\"\n          ],\n          \"defines\": [],\n          \"compilerPath\": \"/usr/bin/g++\",\n          \"cStandard\": \"c17\",\n          \"cppStandard\": \"c++17\",\n          \"intelliSenseMode\": \"gcc-x64\",\n          \"browse\": {\n            \"path\": [\n              \"${workspaceFolder}\"\n            ],\n            \"limitSymbolsToIncludedHeaders\": true,\n            \"databaseFilename\": \"\"\n          }\n        }\n  ],\n  \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Copilot Prompt for React Forms (Markdown)\nDESCRIPTION: This snippet showcases a reusable prompt stored in a `.prompt.md` file, written in Markdown. It defines the goal (generating a new React form component) and outlines specific requirements, including using design system components, `react-hook-form` with specific patterns (uncontrolled components, `defaultValues`), TypeScript types, and `yup` for validation, referencing external documentation/files for context. This allows for consistent component generation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-tips-and-tricks.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nYour goal is to generate a new React form component.\n\nAsk for the form name and fields if not provided.\n\nRequirements for the form:\n* Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)\n* Use `react-hook-form` for form state management:\n* Always define TypeScript types for your form data\n* Prefer *uncontrolled* components using register\n* Use `defaultValues` to prevent unnecessary rerenders\n* Use `yup` for validation:\n* Create reusable validation schemas in separate files\n* Use TypeScript types to ensure type safety\n* Customize UX-friendly validation rules\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Installation and Version - Bash\nDESCRIPTION: This bash snippet checks if Docker is installed and running by displaying its version. Requires Docker to be installed and available on the system PATH. Outputs the Docker version and build details as confirmation. Intended to verify prerequisite setup before proceeding with further Dev Container setup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\n# Docker version 18.09.2, build 6247962\n```\n\n----------------------------------------\n\nTITLE: Crafting Copilot Prompts: Providing Examples (Text)\nDESCRIPTION: This text snippet exemplifies prompt engineering by providing concrete input/output examples (`findVowels(\"hello\") returns 2`, `findVowels(\"sky\") returns 0`). This technique helps Copilot better understand the desired behavior of the function requested (\"Generate a function that takes a string and returns the number of vowels in it.\").\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-tips-and-tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```text\nGenerate a function that takes a string and returns the number of vowels in it.\nExample:\nfindVowels(\"hello\") returns 2\nfindVowels(\"sky\") returns 0\n```\n```\n\n----------------------------------------\n\nTITLE: Workspace-Level VS Code Color Customizations - JSON\nDESCRIPTION: Illustrates workspace-level customizations for Visual Studio Code's editor UI colors in the workspace settings.json. It defines the foreground and selection background color, where settings at this scope override user-level values for identical keys. Dependencies include a valid workspace setup and access to workspace settings.json. Keys reflect editor UI elements; the snippet is placed within the workspace's JSON configuration file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"editor.foreground\": \"#880000\",\n    \"editor.selectionBackground\": \"#00FF00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Code Generation Instructions in settings.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define custom instructions for GitHub Copilot's code generation feature within the VS Code `settings.json` file. It shows using both inline text instructions via the `text` property and referencing external Markdown files via the `file` property. These instructions guide Copilot on coding styles or requirements, such as adding specific comments or using underscore prefixes for private TypeScript fields.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"Always add a comment: 'Generated by Copilot'.\"\n    },\n    {\n      \"text\": \"In TypeScript always use underscore for private field names.\"\n    },\n    {\n      \"file\": \"code-style.md\" // import instructions from file `code-style.md`\n    }\n  ],\n```\n```\n\n----------------------------------------\n\nTITLE: Crafting Copilot Prompts: General to Specific Example (Text)\nDESCRIPTION: This text snippet demonstrates effective prompt engineering by starting with a broad request (\"Generate a Calculator class\") and progressively adding specific constraints (\"Add methods...\", \"Don't use any external libraries...\", \"Don't use recursion\"). This iterative approach helps guide Copilot towards the desired output by refining the requirements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-tips-and-tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```text\nGenerate a Calculator class.\nAdd methods for addition, subtraction, multiplication, division, and factorial.\nDon't use any external libraries and don't use recursion.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Django View for the Home Page - Python\nDESCRIPTION: Implements a basic view function in Python that returns 'Hello, Django!' as an HTTP response. The snippet imports HttpResponse from django.http and defines a 'home' function, expecting a request object as input. Place this code in hello/views.py; it forms the endpoint logic for the application's root URL. Django must be installed and the hello app added to the project for the view to be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\ndef home(request):\n    return HttpResponse(\"Hello, Django!\")\n```\n\n----------------------------------------\n\nTITLE: Executing Terminal Commands with Shell Integration API in TypeScript\nDESCRIPTION: Demonstrates using the proposed `Terminal.shellIntegration.executeCommand` API in VS Code to run a command ('echo \"Hello world\"') in a newly created terminal. It waits for shell integration to activate using `onDidActivateTerminalShellIntegration`, executes the command, awaits its exit code, and logs it. Includes a fallback mechanism using `setTimeout` and `sendText` if shell integration doesn't activate within 3 seconds.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Execute a command in a terminal immediately after being created\nconst myTerm = window.createTerminal();\nwindow.onDidActivateTerminalShellIntegration(async ({ terminal, shellIntegration }) => {\n  if (terminal === myTerm) {\n    const command = shellIntegration.executeCommand('echo \"Hello world\"');\n    const code = await command.exitCode;\n    console.log(`Command exited with code ${code}`);\n  }\n}));\n\n// Fallback to sendText if there is no shell integration within 3 seconds of launching\nsetTimeout(() => {\n  if (!myTerm.shellIntegration) {\n    myTerm.sendText('echo \"Hello world\"');\n    // Without shell integration, we can't know when the command has finished or what the\n    // exit code was.\n  }\n}, 3000);\n```\n\n----------------------------------------\n\nTITLE: Writing a Hello World Program - C++\nDESCRIPTION: This C++ code defines a simple Hello World application using the standard library. It initializes a vector of strings and prints the concatenated contents to standard output, demonstrating core C++ constructs. Required dependencies are the C++ standard library; standard build tools like g++ will compile it. The program takes no input and outputs a greeting message to the console, serving as a starting point for experimentation with build and debug workflows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    vector<string> msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\n\n    for (const string& word : msg)\n    {\n        cout << word << \" \";\n    }\n    cout << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doc Writer Profile Template Settings in VS Code (JSON)\nDESCRIPTION: This JSON snippet outlines VS Code settings for the Doc Writer Profile Template, optimizing the environment for documentation tasks. It sets a light theme, disables the minimap, breadcrumbs, glyph margin, and explorer decorations, enables font ligatures, configures auto-save, enables smart Git commits, shows the command center, hides rendered whitespace, hides the untitled file hint, enables Markdown validation, prompts for link updates on file move, and disables the startup editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n    \"workbench.colorTheme\": \"Default Light Modern\",\n    \"editor.minimap.enabled\": false,\n    \"breadcrumbs.enabled\": false,\n    \"editor.glyphMargin\": false,\n    \"explorer.decorations.badges\": false,\n    \"explorer.decorations.colors\": false,\n    \"editor.fontLigatures\": true,\n    \"files.autoSave\": \"afterDelay\",\n    \"git.enableSmartCommit\": true,\n    \"window.commandCenter\": true,\n    \"editor.renderWhitespace\": \"none\",\n    \"workbench.editor.untitled.hint\": \"hidden\",\n    \"markdown.validate.enabled\": true,\n    \"markdown.updateLinksOnFileMove.enabled\": \"prompt\",\n    \"workbench.startupEditor\": \"none\"\n```\n```\n\n----------------------------------------\n\nTITLE: Commenting Remote Debugpy Initialization for Source Code Synchronization - Python\nDESCRIPTION: This snippet provides a commented-out version of the remote debugpy initialization for inclusion in local source code, helping ensure line matching across remote and local code during remote debugging. This practice prevents code divergence and alignment issues in the debugger, even though no effect is produced by these commented lines. No dependencies or runtime effects; serves purely as a synchronization and documentation aid.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#import debugpy\n\n# Allow other computers to attach to debugpy at this IP address and port.\n#debugpy.listen(('1.2.3.4', 5678))\n\n# Pause the program until a remote debugger is attached\n#debugpy.wait_for_client()\n\n```\n\n----------------------------------------\n\nTITLE: Installing NumPy and Related Packages - Bash\nDESCRIPTION: This snippet provides several commands for installing the numpy package (and python3-tk for Linux Debian) on different operating systems using the system terminal. It assumes Python and pip are already available on the system. The inputs are the shell commands, and the output is package installation via pip or apt-get. On Anaconda distributions, pip install for numpy is not recommended as numpy may already be included.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Don't use with Anaconda distributions because they include matplotlib already.\n\n# macOS\npython3 -m pip install numpy\n\n# Windows (may require elevation)\npy -m pip install numpy\n\n# Linux (Debian)\napt-get install python3-tk\npython3 -m pip install numpy\n```\n\n----------------------------------------\n\nTITLE: Defining a User-Facing Command in package.json\nDESCRIPTION: This JSON snippet shows how to declare a command in the extension's package.json so it appears in the Command Palette and is discoverable by users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"myExtension.sayHello\",\n        \"title\": \"Say Hello\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom GitHub Pull Request Queries in VS Code (JSON)\nDESCRIPTION: This JSON snippet shows how to customize the queries used to display pull requests in the VS Code Pull Requests view. It modifies the `githubPullRequests.queries` setting, adding a custom query object that uses GitHub search syntax to filter and display open pull requests assigned to the currently logged-in user (${user}).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/github.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.queries\": [\n    {\n        \"label\": \"Assigned To Me\",\n        \"query\": \"is:open assignee:${user}\"\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Hello World Rust Program\nDESCRIPTION: Basic Rust program that prints 'Hello, world!' to the console.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Up Task (VS Code, JSON)\nDESCRIPTION: This JSON snippet defines a task for VS Code that runs 'docker-compose up' with specific settings, including building images, running in detached mode, and targeting a set of services. It includes multiple Docker Compose files to allow for layering (such as adding debug settings). Dependencies are Docker Compose installed on the host, referenced YAML files present in the workspace, and optionally other tasks for pre-built images. The configuration supports reproducible multi-service container orchestration from within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"version\\\": \\\"2.0.0\\\",\\n    \\\"tasks\\\": [\\n        {\\n            \\\"label\\\": \\\"Run docker-compose up\\\",\\n            \\\"type\\\": \\\"docker-compose\\\",\\n            \\\"dockerCompose\\\": {\\n                \\\"up\\\": {\\n                    \\\"detached\\\": true,\\n                    \\\"build\\\": true,\\n                    \\\"services\\\": [\\n                      \\\"myservice\\\"\\n                    ]\\n                },\\n                \\\"files\\\": [\\n                    \\\"${workspaceFolder}/docker-compose.yml\\\",\\n                    \\\"${workspaceFolder}/docker-compose.debug.yml\\\"\\n                ]\\n            }\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webview with asExternalUri in VS Code Extension\nDESCRIPTION: This snippet demonstrates how to use the asExternalUri API to create a webview that can forward requests to localhost web servers when running remotely. It includes setting up the webview with proper Content Security Policy and iframe.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Use asExternalUri to get the URI for the web server\nconst dynamicWebServerPort = await getWebServerPort();\nconst fullWebServerUri = await vscode.env.asExternalUri(\n        vscode.Uri.parse(`http://localhost:${dynamicWebServerPort}`)\n    );\n\n// Create the webview\nconst panel = vscode.window.createWebviewPanel(\n    'asExternalUriWebview',\n    'asExternalUri Example',\n    vscode.ViewColumn.One, {\n        enableScripts: true\n    });\n\nconst cspSource = panel.webview.cspSource;\npanel.webview.html = `<!DOCTYPE html>\n        <head>\n            <meta\n                http-equiv=\"Content-Security-Policy\"\n                content=\"default-src 'none'; frame-src ${fullWebServerUri} ${cspSource} https:; img-src ${cspSource} https:; script-src ${cspSource}; style-src ${cspSource};\"\n            />\n        </head>\n        <body>\n        <!-- All content from the web server must be in an iframe -->\n        <iframe src=\"${fullWebServerUri}\">\n    </body>\n    </html>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for a Web Extension in Visual Studio Code\nDESCRIPTION: This JSON snippet shows the structure of a package.json file for a simple hello world web extension. It includes essential properties such as name, version, entry point (browser), and contribution points.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"helloworld-web-sample\",\n  \"displayName\": \"helloworld-web-sample\",\n  \"description\": \"HelloWorld example for VS Code in the browser\",\n  \"version\": \"0.0.1\",\n  \"publisher\": \"vscode-samples\",\n  \"repository\": \"https://github.com/microsoft/vscode-extension-samples/helloworld-web-sample\",\n  \"engines\": {\n    \"vscode\": \"^1.74.0\"\n  },\n  \"categories\": [\"Other\"],\n  \"activationEvents\": [],\n  \"browser\": \"./dist/web/extension.js\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"helloworld-web-sample.helloWorld\",\n        \"title\": \"Hello World\"\n      }\n    ]\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"npm run package-web\",\n    \"compile-web\": \"webpack\",\n    \"watch-web\": \"webpack --watch\",\n    \"package-web\": \"webpack --mode production --devtool hidden-source-map\"\n  },\n  \"devDependencies\": {\n    \"@types/vscode\": \"^1.59.0\",\n    \"ts-loader\": \"^9.2.2\",\n    \"webpack\": \"^5.38.1\",\n    \"webpack-cli\": \"^4.7.0\",\n    \"@types/webpack-env\": \"^1.16.0\",\n    \"process\": \"^0.11.10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Notebook Renderer Implementation\nDESCRIPTION: Simple JavaScript implementation of a notebook renderer that displays JSON data\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { ActivationFunction } from 'vscode-notebook-renderer';\n\nexport const activate: ActivationFunction = (context) => ({\n    renderOutputItem(data, element) {\n        element.innerText = JSON.stringify(data.json())\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing the Calculator Resource in Rust\nDESCRIPTION: A Rust implementation of the calculator engine resource. It provides methods to handle operands, perform operations (add, subtract, multiply, divide), and execute calculations using the reverse Polish notation logic.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nimpl EngineImpl {\n\tfn new() -> Self {\n\t\tEngineImpl {\n\t\t\tleft: None,\n\t\t\tright: None,\n\t\t}\n\t}\n\n\tfn push_operand(&mut self, operand: u32) {\n\t\tif self.left == None {\n\t\t\tself.left = Some(operand);\n\t\t} else {\n\t\t\tself.right = Some(operand);\n\t\t}\n\t}\n\n\tfn push_operation(&mut self, operation: Operation) {\n        let left = self.left.unwrap();\n        let right = self.right.unwrap();\n        self.left = Some(match operation {\n\t\t\tOperation::Add => left + right,\n\t\t\tOperation::Sub => left - right,\n\t\t\tOperation::Mul => left * right,\n\t\t\tOperation::Div => left / right,\n\t\t});\n\t}\n\n\tfn execute(&mut self) -> u32 {\n\t\tself.left.unwrap()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for Django - JSON\nDESCRIPTION: This JSON snippet is a sample VS Code launch.json configuration that sets up debugging for a Django app. It defines a configuration named 'Python Debugger: Django', specifies the debugpy type, points to manage.py as the entry point, and runs the server via the 'runserver' argument. The settings enable Django-aware debugging features and restrict breakpoints to your own code. VS Code and the Python extension must be installed. Additional custom arguments (such as ports) can be added as necessary.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: Django\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}\\\\manage.py\",\n            \"args\": [\n                \"runserver\"\n            ],\n            \"django\": true,\n            \"justMyCode\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Request Handler\nDESCRIPTION: TypeScript implementation of the chat request handler that processes user input and returns responses using the Chat API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler: vscode.ChatRequestHandler = async (request: vscode.ChatRequest, context: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken) => {\n\n    let prompt = BASE_PROMPT;\n\n    const messages = [\n        vscode.LanguageModelChatMessage.User(prompt),\n    ];\n\n    messages.push(vscode.LanguageModelChatMessage.User(request.prompt));\n\n    const chatResponse = await request.model.sendRequest(messages, {}, token);\n\n    for await (const fragment of chatResponse.text) {\n        stream.markdown(fragment);\n    }\n\n    return;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash for VS Code Shell Integration (Manual)\nDESCRIPTION: This script manually enables VS Code shell integration for Bash. It should be added to the user's '~/.bashrc' file. The script checks if the current terminal is VS Code (`$TERM_PROGRAM` variable) and, if so, sources the appropriate shell integration script provided by VS Code, located using `code --locate-shell-integration-path bash`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```\n\n----------------------------------------\n\nTITLE: Running Initial Database Migration - Bash\nDESCRIPTION: Executes 'python manage.py migrate' to apply initial database migrations using Django's ORM. This command creates the default SQLite database (db.sqlite3) used for development and sets up required database tables. Python and Django must be installed and the virtual environment activated prior to running the command. There are no additional parameters by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring unittest Arguments in VS Code settings.json\nDESCRIPTION: Example of default unittest arguments in VS Code settings. These arguments control verbosity, starting directory, and test discovery pattern.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"['-v', '-s', '.', '-p', '*test*.py']\"\n```\n\n----------------------------------------\n\nTITLE: Installing vsce CLI tool for VS Code extension management\nDESCRIPTION: This command installs the vsce (Visual Studio Code Extensions) command-line tool globally using npm. vsce is used for packaging, publishing, and managing VS Code extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @vscode/vsce\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server Dependencies in package.json\nDESCRIPTION: This snippet shows the necessary dependencies for implementing a Language Server in VS Code. It includes the vscode-languageserver and vscode-languageserver-textdocument libraries.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"vscode-languageserver\": \"^7.0.0\",\n    \"vscode-languageserver-textdocument\": \"^1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Tags in TypeScript\nDESCRIPTION: Demonstrates how to use Test Tags to mark tests that can be run under specific profiles and enable filtering in the Test Explorer UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new tag with an ID of \"runnable\"\nconst runnableTag = new TestTag('runnable');\n\n// Assign it to a profile. Now this profile can only execute tests with that tag.\nrunProfile.tag = runnableTag;\n\n// Add the \"runnable\" tag to all applicable tests.\nfor (const test of getAllRunnableTests()) {\n  test.tags = [...test.tags, runnableTag];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Compiler via NPM\nDESCRIPTION: Command to globally install the TypeScript compiler using Node Package Manager (NPM).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Handler with Message History in TypeScript\nDESCRIPTION: Implements a chat request handler that maintains conversation history by tracking previous messages and streaming responses. Uses the VS Code Chat API to process messages and maintain context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// define a chat handler\nconst handler: vscode.ChatRequestHandler = async (request: vscode.ChatRequest, context: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken) => {\n\n    // initialize the prompt\n    let prompt = BASE_PROMPT;\n\n    // initialize the messages array with the prompt\n    const messages = [\n        vscode.LanguageModelChatMessage.User(prompt),\n    ];\n\n    // get all the previous participant messages\n    const previousMessages = context.history.filter(\n        (h) => h instanceof vscode.ChatResponseTurn\n    );\n\n    // add the previous messages to the messages array\n    previousMessages.forEach((m) => {\n        let fullMessage = '';\n        m.response.forEach((r) => {\n            const mdPart = r as vscode.ChatResponseMarkdownPart;\n            fullMessage += mdPart.value.value;\n        });\n        messages.push(vscode.LanguageModelChatMessage.Assistant(fullMessage));\n    });\n\n    // add in the user's message\n    messages.push(vscode.LanguageModelChatMessage.User(request.prompt));\n\n    // send the request\n    const chatResponse = await request.model.sendRequest(messages, {}, token);\n\n    // stream the response\n    for await (const fragment of chatResponse.text) {\n        stream.markdown(fragment);\n    }\n\n    return;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Definition Provider in TypeScript\nDESCRIPTION: Direct implementation of a definition provider in TypeScript for jumping to symbol definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoDefinitionProvider implements vscode.DefinitionProvider {\n    public provideDefinition(\n        document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken):\n        Thenable<vscode.Location> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerDefinitionProvider(\n            GO_MODE, new GoDefinitionProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available C/C++ Default Settings in VS Code (JSON)\nDESCRIPTION: Lists the VS Code settings under the `C_Cpp.default` namespace that correspond to `c_cpp_properties.json` configuration properties. These settings allow users to define default C/C++ configurations at various scopes (User, Workspace, Folder), potentially making `c_cpp_properties.json` optional.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/customize-default-settings-cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\nC_Cpp.default.includePath                          : string[]\nC_Cpp.default.defines                              : string[]\nC_Cpp.default.compileCommands                      : string\nC_Cpp.default.macFrameworkPath                     : string[]\nC_Cpp.default.forcedInclude                        : string[]\nC_Cpp.default.intelliSenseMode                     : string\nC_Cpp.default.compilerPath                         : string\nC_Cpp.default.compilerArgs                         : string[]\nC_Cpp.default.configurationProvider                : string\nC_Cpp.default.customConfigurationVariables         : object | null\nC_Cpp.default.cStandard                            : c89 | c99 | c11 | c17\nC_Cpp.default.cppStandard                          : c++98 | c++03 | c++11 | c++14 | c++17 | c++20 | c++23\nC_Cpp.default.enableConfigurationSquiggles         : boolean\nC_Cpp.default.mergeConfigurations                  : boolean\nC_Cpp.default.systemIncludePath                    : string[]\nC_Cpp.default.windowsSdkVersion                    : string\nC_Cpp.default.browse.path                          : string[]\nC_Cpp.default.browse.defines                       : string[]\nC_Cpp.default.browse.dotConfig                     : string\nC_Cpp.default.browse.databaseFilename              : string\nC_Cpp.default.browse.limitSymbolsToIncludedHeaders : boolean\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Extension Activation Events\nDESCRIPTION: JSON configuration for registering extension activation events in package.json. Shows how to set up activation triggers for debug functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/debugger-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onDebug\",\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Selecting Language Models and Sending Requests in TypeScript\nDESCRIPTION: This snippet demonstrates how to select language models using the selectChatModels method with vendor criteria and handle cases where no models are available. It's important to call this method as part of a user-initiated action due to consent requirements for Copilot models.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst models = await vscode.lm.selectChatModels({\n  vendor: 'copilot'\n});\n\n// No models available\nif (models.length === 0) {\n  // TODO: handle the case when no models are available\n}\n```\n\n----------------------------------------\n\nTITLE: Complete c_cpp_properties.json Example with Multiple Platform Configurations\nDESCRIPTION: A comprehensive example of a c_cpp_properties.json file showing configuration for Linux, Mac, and Windows platforms. It demonstrates custom environment variables, compiler settings, include paths, and other IntelliSense configuration options available in the schema.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env\": {\n        \"myIncludePath\": [\n            \"${workspaceFolder}/include\",\n            \"${workspaceFolder}/src\"\n        ],\n        \"myDefines\": [\n            \"DEBUG\",\n            \"MY_FEATURE=1\"\n        ]\n    },\n    \"configurations\": [\n        {\n            \"name\": \"Linux\",\n            \"compilerPath\": \"/usr/bin/gcc\",\n            \"compilerArgs\": [\n                \"-m32\"\n            ],\n            \"intelliSenseMode\": \"linux-gcc-x86\",\n            \"includePath\": [\n                \"${myIncludePath}\",\n                \"/usr/include\"\n            ],\n            \"defines\": [\n                \"${myDefines}\"\n            ],\n            \"cStandard\": \"gnu11\",\n            \"cppStandard\": \"gnu++14\",\n            \"configurationProvider\": \"ms-vscode.cmake-tools\",\n            \"forcedInclude\": [\n                \"${workspaceFolder}/common.h\"\n            ],\n            \"compileCommands\": \"${workspaceFolder}/build/compile_commands.json\",\n            \"dotConfig\": \"${workspaceFolder}/.config\",\n            \"mergeConfigurations\": true,\n            \"customConfigurationVariables\": {\n                \"myVar\": \"myvalue\"\n            },\n            \"browse\": {\n                \"path\": [\n                    \"${myIncludePath}\",\n                    \"/usr/include\",\n                    \"${workspaceFolder}\"\n                ],\n                \"limitSymbolsToIncludedHeaders\": true,\n                \"databaseFilename\": \"${workspaceFolder}/.vscode/browse.vc.db\"\n            }\n        },\n        {\n            \"name\": \"Mac\",\n            \"compilerPath\": \"/usr/bin/clang\",\n            \"intelliSenseMode\": \"macos-clang-x64\",\n            \"includePath\": [\n                \"${myIncludePath}\"\n            ],\n            \"defines\": [\n                \"${myDefines}\"\n            ],\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"macFrameworkPath\": [\n                \"/System/Library/Frameworks\",\n                \"/Library/Frameworks\"\n            ],\n            \"browse\": {\n                \"path\": [\n                    \"${myIncludePath}\",\n                    \"${workspaceFolder}\"\n                ]\n            }\n        },\n        {\n            \"name\": \"Win32\",\n            \"compilerPath\": \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/cl.exe\",\n            \"intelliSenseMode\": \"windows-msvc-x64\",\n            \"includePath\": [\n                \"${myIncludePath}\"\n            ],\n            \"defines\": [\n                \"${myDefines}\",\n                \"_WINDOWS\"\n            ],\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++20\",\n            \"windowsSdkVersion\": \"10.0.19041.0\",\n            \"browse\": {\n                \"path\": [\n                    \"${myIncludePath}\",\n                    \"${workspaceFolder}\"\n                ]\n            }\n        }\n    ],\n    \"version\": 4,\n    \"enableConfigurationSquiggles\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Formatter to Go Extension in VS Code for Go Files (JSON)\nDESCRIPTION: This snippet assigns the Go extension as the default formatter for Go files in VS Code by specifying 'editor.defaultFormatter' as 'golang.go' for the '[go]' language key. This is effective when multiple formatting extensions are installed and you wish to enforce the usage of the Go extension for formatting. Insert this block in your settings.json to ensure Go files are always formatted with the official extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/go.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[go]\": {\n    \"editor.defaultFormatter\": \"golang.go\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validate MinGW-w64 Installation - Bash Commands\nDESCRIPTION: This series of bash commands checks the installed versions of gcc, g++, and gdb in the current command prompt, verifying that the correct MinGW-w64 tools are available on the system PATH. Successful execution outputs the version number for each tool, confirming the installation and configuration required for developing C++ programs on Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcc --version\ng++ --version\ngdb --version\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI using npm\nDESCRIPTION: Command to globally install the Angular CLI tool using npm package manager\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Attaching Debugger by Process ID in launch.json (JSON)\nDESCRIPTION: This launch configuration allows attaching the VS Code debugger to a specific, running Node.js process by specifying its process ID (PID) using the `processId` attribute. The process does not need to have been started with `--inspect`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to Process\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"processId\": \"53426\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Method in Java\nDESCRIPTION: Illustrates extracting an expression to a new method using the 'Extract to method' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  int height = 1;\n  int width = 2;\n  int area = height * width;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  int height = 1;\n  int width = 2;\n  int area = getArea(height, width);\n}\n\nprivate int getArea(int height, int width) {\n  return height * width;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Instructions for GitHub Copilot in Markdown\nDESCRIPTION: Demonstrates how to create a Markdown file with custom instructions for GitHub Copilot, including project description and coding standards.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Copilot Instructions\n\nThis project is a web application that allows users to create and manage tasks. The application is built using React and Node.js, and it uses MongoDB as the database.\n\n## Coding Standards\n\n- Use camelCase for variable and function names.\n- Use PascalCase for component names.\n- Use single quotes for strings.\n- Use 2 spaces for indentation.\n- Use arrow functions for callbacks.\n- Use async/await for asynchronous code.\n- Use const for constants and let for variables that will be reassigned.\n- Use destructuring for objects and arrays.\n- Use template literals for strings that contain variables.\n- Use the latest JavaScript features (ES6+) where possible.\n```\n\n----------------------------------------\n\nTITLE: Extension Entry File (extension.ts) for VS Code Extension\nDESCRIPTION: Shows the structure of the main extension entry file, including the activate and deactivate functions, and how to register a command using the VS Code API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/extension-anatomy.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"helloworld-sample\" is now active!');\n\n  let disposable = vscode.commands.registerCommand('helloworld.helloWorld', () => {\n    vscode.window.showInformationMessage('Hello World!');\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom ESLint Rule for Extra Semicolons (JavaScript)\nDESCRIPTION: This snippet shows how to modify the `rules` section within the `.eslintrc.js` configuration file. It adds the `no-extra-semi` rule and sets its severity level to `\"error\"`. This configuration will cause ESLint to report an error if it detects unnecessary semicolons in the code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n \"rules\": {\n        \"no-extra-semi\":\"error\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Mounting a Remote Filesystem Using SSHFS on Bash\nDESCRIPTION: Demonstrates how to mount a remote user's home directory via SSHFS onto a local directory using multiple SSHFS options for symlink handling, volume naming, user mapping, and compression. The command assumes that sshfs is installed and requires environment variables (USER_AT_HOST) to be set. The mount is performed at port 22 and is typically run from the shell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsshfs \"$USER_AT_HOST:\" \"$HOME/sshfs/$USER_AT_HOST\" -ovolname=\"$USER_AT_HOST\" -p 22  \\\n    -o workaround=nonodelay -o transform_symlinks -o idmap=user  -C\n\n```\n\n----------------------------------------\n\nTITLE: Prompting GitHub Copilot via Code Comments\nDESCRIPTION: Demonstrates how to prompt GitHub Copilot for code generation directly within the editor by writing instructions as a code comment. Copilot interprets the comment (like the example provided) to generate relevant code suggestions that follow the instructions, such as creating a class with specific methods.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_4\n\nLANGUAGE: comment\nCODE:\n```\n# write a calculator class with methods for add, subtract, and multiply. Use static methods.\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Package using pip in Bash\nDESCRIPTION: Installs the Flask library into the activated Python virtual environment using the `pip` package manager. This command should be run in the VS Code Terminal after the virtual environment (e.g., `.venv`) is created and activated.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install flask\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Ports via appPort in devcontainer.json (JSON)\nDESCRIPTION: Uses the `appPort` property in `devcontainer.json` to publish container ports to the host when the container is created. Port 3000 is published to a random available host port, and container port 5000 is specifically mapped to host port 8921. Requires a container rebuild to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"appPort\": [ 3000, \"8921:5000\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Python Debugging (YAML)\nDESCRIPTION: This YAML snippet shows an example `docker-compose.debug.yml` file for a Python service (named 'pythonsamplevscodedjangotutorial'). It builds an image using a local Dockerfile, then overrides the command to install the `debugpy` package and start it, waiting for a client connection on port 5678 before running the Django development server. Ports 8000 (app) and 5678 (debug) are mapped from the container to the host.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.4'\n\nservices:\n  pythonsamplevscodedjangotutorial:\n    image: pythonsamplevscodedjangotutorial\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n    command: [\"sh\", \"-c\", \"pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading --noreload\"]\n    ports:\n      - 8000:8000\n      - 5678:5678\n```\n\n----------------------------------------\n\nTITLE: VS Code Merge Command Line Usage\nDESCRIPTION: Command line syntax for using VS Code as a three-way merge tool, specifying paths for modified versions, common origin, and output file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-m --merge <path1> <path2> <base> <result> Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions, and the output file to save merge results.\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript SDK Path in VS Code Settings - JSON\nDESCRIPTION: Specifies the path to the TypeScript SDK by setting the 'typescript.tsdk' property in the VS Code user or workspace settings (settings.json). This enables VS Code to use a custom or workspace-specific TypeScript version for IntelliSense and language services, instead of the built-in version. The value should point to the 'lib' directory containing 'tsserver.js' from a valid TypeScript installation; ensure proper permissions and complete TypeScript package presence.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"typescript.tsdk\": \"/usr/local/lib/node_modules/typescript/lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Type Checking via tsconfig.json\nDESCRIPTION: This JSON snippet presents a `tsconfig.json` configuration. Setting `allowJs` to `true` permits JavaScript files in the compilation context, and setting `checkJs` to `true` enables type checking for those JavaScript files, alongside TypeScript files. The `exclude` property prevents checking specified directories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"allowJs\": true,\n        \"checkJs\": true\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/node_modules/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Range Formatting Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a DocumentRangeFormattingEditProvider class and register it in the extension's activate function. This provider allows formatting selected ranges of lines with minimal text edits.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoDocumentRangeFormatter implements vscode.DocumentRangeFormattingEditProvider{\n    public provideDocumentRangeFormattingEdits(\n        document: vscode.TextDocument, range: vscode.Range,\n        options: vscode.FormattingOptions, token: vscode.CancellationToken):\n        vscode.ProviderResult<vscode.TextEdit[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerDocumentRangeFormattingEditProvider(\n            GO_MODE, new GoDocumentRangeFormatter()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Formatting Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce document formatting capabilities in the LSP initialize method response. This allows the language server to provide whole document formatting support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"documentFormattingProvider\" : \"true\"\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Express Generator Globally with npm\nDESCRIPTION: Command to install the Express Generator tool globally using npm, allowing scaffolding of Express applications from any directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g express-generator\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from File in launch.json (JSON)\nDESCRIPTION: This snippet illustrates how to load environment variables from an external file (e.g., `.env`) into the Node.js debugging session using the `envFile` attribute in the launch configuration. Variables defined directly in the `env` object will override those loaded from the file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n//...\n\"envFile\": \"${workspaceFolder}/.env\",\n\"env\": { \"USER\": \"john doe\" }\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Formatter Using VS Code API in TypeScript (Recommended)\nDESCRIPTION: This snippet shows the correct way to implement a formatter using the VS Code API. It uses vscode.languages.registerDocumentFormattingEditProvider to register a formatter for 'foo-lang' files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/11/15/formatters-best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 👍 formatter implemented using API\nvscode.languages.registerDocumentFormattingEditProvider('foo-lang', {\n    provideDocumentFormattingEdits(document: vscode.TextDocument): vscode.TextEdit[] {\n\n        const firstLine = document.lineAt(0);\n        if (firstLine.text !== '42') {\n            return [vscode.TextEdit.insert(firstLine.range.start, '42\\n')];\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Test Run Handler in TypeScript\nDESCRIPTION: Shows a full implementation of a test run handler that processes test requests, executes tests, and reports results. Includes handling for test exclusions, file parsing, and result reporting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  const run = controller.createTestRun(request);\n  const queue: vscode.TestItem[] = [];\n\n  // Loop through all included tests, or all known tests, and add them to our queue\n  if (request.include) {\n    request.include.forEach(test => queue.push(test));\n  } else {\n    controller.items.forEach(test => queue.push(test));\n  }\n\n  // For every test that was queued, try to run it. Call run.passed() or run.failed().\n  // The `TestMessage` can contain extra information, like a failing location or\n  // a diff output. But here we'll just give it a textual message.\n  while (queue.length > 0 && !token.isCancellationRequested) {\n    const test = queue.pop()!;\n\n    // Skip tests the user asked to exclude\n    if (request.exclude?.includes(test)) {\n      continue;\n    }\n\n    switch (getType(test)) {\n      case ItemType.File:\n        // If we're running a file and don't know what it contains yet, parse it now\n        if (test.children.size === 0) {\n          await parseTestsInFileContents(test);\n        }\n        break;\n      case ItemType.TestCase:\n        // Otherwise, just run the test case. Note that we don't need to manually\n        // set the state of parent tests; they'll be set automatically.\n        const start = Date.now();\n        try {\n          await assertTestPasses(test);\n          run.passed(test, Date.now() - start);\n        } catch (e) {\n          run.failed(test, new vscode.TestMessage(e.message), Date.now() - start);\n        }\n        break;\n    }\n\n    test.children.forEach(test => queue.push(test));\n  }\n\n  // Make sure to end the run after all tests have been executed:\n  run.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template with Jinja2\nDESCRIPTION: Base HTML template using Jinja2 templating engine with conditional rendering and date formatting. Demonstrates template syntax for dynamic content insertion and conditional logic.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Hello, Flask</title>\n    </head>\n    <body>\n        {%if name %}\n            <strong>Hello there, {{ name }}!</strong> It's {{ date.strftime(\"%A, %d %B, %Y at %X\") }}.\n        {% else %}\n            What's your name? Provide it after /hello/ in the URL.\n        {% endif %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Ports in docker-compose.yml (YAML)\nDESCRIPTION: Defines port mappings within a `docker-compose.yml` file using the `ports` directive. Port 3000 inside the container is published to a random available port on the host, while container port 5000 is mapped to host port 8921. This configuration requires a container rebuild to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n- \"3000\"\n- \"8921:5000\"\n```\n\n----------------------------------------\n\nTITLE: Creating Command Buttons in VS Code Chat\nDESCRIPTION: Shows how to create interactive buttons that trigger VS Code commands using ChatResponseStream.button method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Render a button to trigger a VS Code command\nstream.button({\n    command: 'my.command',\n    title: vscode.l10n.t('Run my command')\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Setup with @vscode/test-electron\nDESCRIPTION: This TypeScript code demonstrates a custom setup using @vscode/test-electron. It downloads a specific VS Code version, installs an extension, and then runs the tests. This approach allows for more granular control over the test environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cp from 'child_process';\nimport * as path from 'path';\nimport {\n  downloadAndUnzipVSCode,\n  resolveCliArgsFromVSCodeExecutablePath,\n  runTests\n} from '@vscode/test-electron';\n\nasync function main() {\n  try {\n    const extensionDevelopmentPath = path.resolve(__dirname, '../../../');\n    const extensionTestsPath = path.resolve(__dirname, './suite/index');\n    const vscodeExecutablePath = await downloadAndUnzipVSCode('1.40.1');\n    const [cliPath, ...args] = resolveCliArgsFromVSCodeExecutablePath(vscodeExecutablePath);\n\n    // Use cp.spawn / cp.exec for custom setup\n    cp.spawnSync(cliPath, [...args, '--install-extension', '<EXTENSION-ID-OR-PATH-TO-VSIX>'], {\n      encoding: 'utf-8',\n      stdio: 'inherit'\n    });\n\n    // Run the extension test\n    await runTests({\n      // Use the specified `code` executable\n      vscodeExecutablePath,\n      extensionDevelopmentPath,\n      extensionTestsPath\n    });\n  } catch (err) {\n    console.error('Failed to run tests');\n    process.exit(1);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Running debugpy for Remote Debugging\nDESCRIPTION: Command to start debugpy on a remote machine or container, listening on all network interfaces (0.0.0.0) on port 5678. This allows connections from other machines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m debugpy --listen 0.0.0.0:5678 ./myscript.py\n```\n\n----------------------------------------\n\nTITLE: Defining an Add Item Route in FastAPI Python Application\nDESCRIPTION: Defines a FastAPI POST route for adding grocery items by name and quantity, handling input validation, duplicate merging, and auto-incrementing new IDs. The route function expects path parameters (`item_name` as string, `quantity` as integer), checks for valid positive quantity, increments existing item quantities, or generates a new entry. Returns the added or updated item as JSON. Requires `FastAPI`, `HTTPException`, `grocery_list`, and the `ItemPayload` model as prerequisites.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Route to add a item\\n@app.post(\"/items/{item_name}/{quantity}\")\\ndef add_item(item_name: str, quantity: int):\\n    if quantity <= 0:\\n        raise HTTPException(status_code=400, detail=\"Quantity must be greater than 0.\")\\n    # if item already exists, we'll just add the quantity.\\n    # get all item names\\n    items_ids = {item.item_name: item.item_id if item.item_id is not None else 0 for item in grocery_list.values()}\\n    if item_name in items_ids.keys():\\n        # get index of item_name in item_ids, which is the item_id\\n        item_id = items_ids[item_name]\\n        grocery_list[item_id].quantity += quantity\\n# otherwise, create a new item\\n    else:\\n        # generate an ID for the item based on the highest ID in the grocery_list\\n        item_id = max(grocery_list.keys()) + 1 if grocery_list else 0\\n        grocery_list[item_id] = ItemPayload(\\n            item_id=item_id, item_name=item_name, quantity=quantity\\n        )\\n\\n    return {\"item\": grocery_list[item_id]}\n```\n\n----------------------------------------\n\nTITLE: Creating Flask Instance in Python\nDESCRIPTION: Example of creating a Flask application instance in a Python module or __init__.py file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-python.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__) # Flask instance named app\n```\n\n----------------------------------------\n\nTITLE: Registering Command and Selecting Chat Model in TypeScript\nDESCRIPTION: This snippet shows how to register a text editor command and select a specific chat model from GitHub Copilot. It demonstrates the use of the VS Code API to interact with language models.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {\n\n  // Get the code with line numbers from the current editor\n  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);\n\n  // select the 4o chat model\n  let [model] = await vscode.lm.selectChatModels({\n    vendor: 'copilot',\n    family: 'gpt-4o',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Making a Language Model Request with Error Handling in TypeScript\nDESCRIPTION: This code shows the complete process of selecting a specific language model (gpt-4o from Copilot), sending a request with a crafted prompt, and implementing comprehensive error handling. It uses LanguageModelError to distinguish between different error types like missing consent or quota limits.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    const [model] = await vscode.lm.selectChatModels({ vendor: 'copilot', family: 'gpt-4o' });\n    const request = model.sendRequest(craftedPrompt, {}, token);\n} catch (err) {\n    // Making the chat request might fail because\n    // - model does not exist\n    // - user consent not given\n    // - quota limits were exceeded\n    if (err instanceof vscode.LanguageModelError) {\n        console.log(err.message, err.code, err.cause);\n        if (err.cause instanceof Error && err.cause.message.includes('off_topic')) {\n            stream.markdown(vscode.l10n.t('I\\'m sorry, I can only explain computer science concepts.'));\n        }\n    } else {\n        // add other error handling logic\n        throw err;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Node.js Docker Build Task in JSON\nDESCRIPTION: Defines a minimal `docker-build` task in `tasks.json` for a Node.js project. Setting `\"platform\": \"node\"` allows the extension to infer default values for `dockerBuild.context`, `dockerBuild.dockerfile`, and `dockerBuild.tag` based on the location and content of `package.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n      {\n          \"label\": \"Build Node Image\",\n          \"type\": \"docker-build\",\n          \"platform\": \"node\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Handler with Message History in TypeScript\nDESCRIPTION: Enhanced chat request handler that checks for the /exercise command and uses appropriate prompt template. Maintains message history while supporting command-specific behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// define a chat handler\nconst handler: vscode.ChatRequestHandler = async (request: vscode.ChatRequest, context: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken) => {\n\n    // initialize the prompt\n    let prompt = BASE_PROMPT;\n\n    if (request.command === 'exercise') {\n        prompt = EXERCISES_PROMPT;\n    }\n\n    // initialize the messages array with the prompt\n    const messages = [\n        vscode.LanguageModelChatMessage.User(prompt),\n    ];\n\n    // get all the previous participant messages\n    const previousMessages = context.history.filter(\n        (h) => h instanceof vscode.ChatResponseTurn\n    );\n\n    // add the previous messages to the messages array\n    previousMessages.forEach((m) => {\n        let fullMessage = '';\n        m.response.forEach((r) => {\n            const mdPart = r as vscode.ChatResponseMarkdownPart;\n            fullMessage += mdPart.value.value;\n        });\n        messages.push(vscode.LanguageModelChatMessage.Assistant(fullMessage));\n    });\n\n    // add in the user's message\n    messages.push(vscode.LanguageModelChatMessage.User(request.prompt));\n\n    // send the request\n    const chatResponse = await request.model.sendRequest(messages, {}, token);\n\n    // stream the response\n    for await (const fragment of chatResponse.text) {\n        stream.markdown(fragment);\n    }\n\n    return;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Flask Views Module in Python\nDESCRIPTION: This snippet demonstrates how to structure route handlers in a separate views.py file. It includes route definitions for home, about, contact, dynamic greeting, and API data endpoints using Flask's decorators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask import render_template\nfrom datetime import datetime\nfrom . import app\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n\n@app.route(\"/about/\")\ndef about():\n    return render_template(\"about.html\")\n\n@app.route(\"/contact/\")\ndef contact():\n    return render_template(\"contact.html\")\n\n@app.route(\"/hello/\")\n@app.route(\"/hello/<name>\")\ndef hello_there(name = None):\n    return render_template(\n        \"hello_there.html\",\n        name=name,\n        date=datetime.now()\n    )\n\n@app.route(\"/api/data\")\ndef get_data():\n    return app.send_static_file(\"data.json\")\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to GitHub Copilot and Handling Response in TypeScript\nDESCRIPTION: This code sends messages to the GitHub Copilot model, checks if the model is available, and handles the chat response. It demonstrates error handling and response parsing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {\n\n  // Get the code with line numbers from the current editor\n  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);\n\n  // select the 4o chat model\n  let [model] = await vscode.lm.selectChatModels({\n    vendor: 'copilot',\n    family: 'gpt-4o',\n  });\n\n  // init the chat message\n  const messages = [\n    vscode.LanguageModelChatMessage.User(ANNOTATION_PROMPT),\n    vscode.LanguageModelChatMessage.User(codeWithLineNumbers),\n  ];\n\n  // make sure the model is available\n  if (model) {\n\n    // send the messages array to the model and get the response\n    let chatResponse = await model.sendRequest(messages, {}, new vscode.CancellationTokenSource().token);\n\n    // handle chat response\n    await parseChatResponse(chatResponse, textEditor);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Volume Mount for node_modules in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` snippet demonstrates how to use the `mounts` property to map the `node_modules` folder within the container workspace to a named Docker volume. This improves disk I/O performance on macOS and Windows compared to bind mounts, especially for operations like `npm install` or `yarn install`. The volume source uses the `${localWorkspaceFolderBasename}` variable for dynamic naming based on the workspace folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n    \"source=${localWorkspaceFolderBasename}-node_modules,target=${containerWorkspaceFolder}/node_modules,type=volume\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Events for Virtual Documents\nDESCRIPTION: This code demonstrates how to implement the onDidChange event for a TextDocumentContentProvider to support updating virtual documents. It uses the vscode.EventEmitter to notify VS Code when a document's content has changed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myProvider = new class implements vscode.TextDocumentContentProvider {\n  // emitter and its event\n  onDidChangeEmitter = new vscode.EventEmitter<vscode.Uri>();\n  onDidChange = this.onDidChangeEmitter.event;\n\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Text in VS Code Chat\nDESCRIPTION: Demonstrates how to render formatted Markdown text including titles, styled text, links and images using ChatResponseStream.markdown method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Render Markdown text\nstream.markdown('# This is a title \\n');\nstream.markdown('This is stylized text that uses _italics_ and **bold**. ');\nstream.markdown('This is a [link](https://code.visualstudio.com).\\n\\n');\nstream.markdown('![VS Code](https://code.visualstudio.com/assets/favicon.ico)');\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Imports for TypeScript Suggestions in JSON Settings\nDESCRIPTION: This JSON setting controls whether VS Code automatically adds import statements when selecting a suggested TypeScript symbol from a different file or module. Setting it to `false` disables this auto import behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.suggest.autoImports\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json with Dockerfile\nDESCRIPTION: This example shows how to configure devcontainer.json to use a custom Dockerfile instead of referencing an image directly, along with specifying VS Code extensions and port forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"build\": { \"dockerfile\": \"Dockerfile\" },\n\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"dbaeumer.vscode-eslint\"\n            ]\n        }\n    },\n\n    \"forwardPorts\": [ 3000 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Debugging Session (JSON)\nDESCRIPTION: This snippet illustrates how to set environment variables required to disable native code precompilation during debugging. By setting 'COMPlus_ZapDisable' and 'COMPlus_ReadyToRun' in the 'env' property, you ensure that loaded DLLs are not precompiled and can be influenced by JIT options like suppressJITOptimizations. The 'env' field takes a key-value JSON object where all property values are strings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env\": {\n        \"COMPlus_ZapDisable\": \"1\",\n        \"COMPlus_ReadyToRun\": \"0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Debugger using Process Picker in launch.json (JSON)\nDESCRIPTION: This 'attach' configuration uses the VS Code command variable `${command:PickProcess}` for the `processId`. When launched, it prompts the user with a list of running Node.js processes to choose from for attaching the debugger.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to Process\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"processId\": \"${command:PickProcess}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching TensorBoard via VS Code Command Palette\nDESCRIPTION: Describes the VS Code command used to initiate a TensorBoard session from the Command Palette (accessible via `kb(workbench.action.showCommands)`). Executing this command prompts the user to select a directory containing TensorBoard log files (defaulting to the current working directory) and manages the TensorBoard instance within a VS Code tab.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/pytorch-support.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPython: Launch TensorBoard\n```\n\n----------------------------------------\n\nTITLE: Applying Code Annotations as Decorations in VS Code using TypeScript\nDESCRIPTION: This function applies code annotations as decorations in the VS Code editor. It creates a decoration type, sets the range for the decoration, and applies it to the active text editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction applyDecoration(editor: vscode.TextEditor, line: number, suggestion: string) {\n\n const decorationType = vscode.window.createTextEditorDecorationType({\n  after: {\n   contentText: ` ${suggestion.substring(0, 25) + \"...\"}`,\n   color: \"grey\",\n  },\n });\n\n // get the end of the line with the specified line number\n const lineLength = editor.document.lineAt(line - 1).text.length;\n const range = new vscode.Range(\n  new vscode.Position(line - 1, lineLength),\n  new vscode.Position(line - 1, lineLength),\n );\n\n const decoration = { range: range, hoverMessage: suggestion };\n\n vscode.window.activeTextEditor?.setDecorations(decorationType, [\n  decoration,\n ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Flask Route Handlers Implementation\nDESCRIPTION: Python route handlers for the Flask application defining endpoints for home, about, and contact pages. Each handler renders its corresponding template.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n\n@app.route(\"/about/\")\ndef about():\n    return render_template(\"about.html\")\n\n@app.route(\"/contact/\")\ndef contact():\n    return render_template(\"contact.html\")\n```\n\n----------------------------------------\n\nTITLE: Text Document Validation Function in TypeScript Language Server\nDESCRIPTION: A reusable function that validates text documents based on configuration settings. Creates diagnostics for uppercase words and respects the maximum number of problems setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validateTextDocument(textDocument: TextDocument): Promise<void> {\n  // In this simple example we get the settings for every validate run.\n  let settings = await getDocumentSettings(textDocument.uri);\n\n  // The validator creates diagnostics for all uppercase words length 2 and more\n  let text = textDocument.getText();\n  let pattern = /\\b[A-Z]{2,}\\b/g;\n  let m: RegExpExecArray | null;\n\n  let problems = 0;\n  let diagnostics: Diagnostic[] = [];\n  while ((m = pattern.exec(text)) && problems < settings.maxNumberOfProblems) {\n    problems++;\n    let diagnostic: Diagnostic = {\n      severity: DiagnosticSeverity.Warning,\n      range: {\n        start: textDocument.positionAt(m.index),\n        end: textDocument.positionAt(m.index + m[0].length)\n      },\n      message: `${m[0]} is all uppercase.`,\n      source: 'ex'\n    };\n    if (hasDiagnosticRelatedInformationCapability) {\n      diagnostic.relatedInformation = [\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Spelling matters'\n        },\n        {\n          location: {\n            uri: textDocument.uri,\n            range: Object.assign({}, diagnostic.range)\n          },\n          message: 'Particularly for names'\n        }\n      ];\n    }\n    diagnostics.push(diagnostic);\n  }\n\n  // Send the computed diagnostics to VS Code.\n  connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instructions for Copilot in VS Code\nDESCRIPTION: Configuration settings for enabling custom instructions in GitHub Copilot using a .github/copilot-instructions.md file. This allows teams to tailor Copilot's responses and code suggestions to their specific requirements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.chat.codeGeneration.useInstructionFiles\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command for Variable Substitution in Debugger Extension\nDESCRIPTION: This TypeScript snippet demonstrates how to implement a command that is bound to a variable in the debugger extension's package.json. The command uses VS Code's showInputBox to prompt the user for input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/debugger-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.registerCommand('extension.mock-debug.getProgramName', config => {\n  return vscode.window.showInputBox({\n    placeHolder: 'Please enter the name of a markdown file in the workspace folder',\n    value: 'readme.md'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cat Name Variable Replacement using VS Code Language Model API\nDESCRIPTION: Example command implementation that uses the language model to replace all variable names in the active editor with cat-themed names. Demonstrates streaming response handling, error management, and text editor manipulation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.registerTextEditorCommand('cat.namesInEditor', async (textEditor: vscode.TextEditor) => {\n    // Replace all variables in active editor with cat names and words\n\n    const [model] = await vscode.lm.selectChatModels({ vendor: 'copilot', family: 'gpt-4o' });\n    let chatResponse: vscode.LanguageModelChatResponse | undefined;\n\n    const text = textEditor.document.getText();\n\n    const messages = [\n        vscode.LanguageModelChatMessage.User(`You are a cat! Think carefully and step by step like a cat would.\n        Your job is to replace all variable names in the following code with funny cat variable names. Be creative. IMPORTANT respond just with code. Do not use markdown!`),\n        vscode.LanguageModelChatMessage.User(text)\n    ];\n\n    try {\n        chatResponse = await model.sendRequest(messages, {}, new vscode.CancellationTokenSource().token);\n    } catch (err) {\n        if (err instanceof vscode.LanguageModelError) {\n            console.log(err.message, err.code, err.cause)\n        } else {\n            throw err;\n        }\n        return;\n    }\n\n    // Clear the editor content before inserting new content\n    await textEditor.edit(edit => {\n        const start = new vscode.Position(0, 0);\n        const end = new vscode.Position(textEditor.document.lineCount - 1, textEditor.document.lineAt(textEditor.document.lineCount - 1).text.length);\n        edit.delete(new vscode.Range(start, end));\n    });\n\n    try {\n        // Stream the code into the editor as it is coming in from the Language Model\n        for await (const fragment of chatResponse.text) {\n            await textEditor.edit(edit => {\n                const lastLine = textEditor.document.lineAt(textEditor.document.lineCount - 1);\n                const position = new vscode.Position(lastLine.lineNumber, lastLine.text.length);\n                edit.insert(position, fragment);\n            });\n        }\n    } catch (err) {\n        // async response stream may fail, e.g network interruption or server side error\n        await textEditor.edit(edit => {\n            const lastLine = textEditor.document.lineAt(textEditor.document.lineCount - 1);\n            const position = new vscode.Position(lastLine.lineNumber, lastLine.text.length);\n            edit.insert(position, (<Error>err).message);\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Base HTML Template in Flask\nDESCRIPTION: Base template layout.html that defines the common structure for all pages including navigation bar and content blocks. Uses Flask's url_for helper for routing and defines blocks for title and content that child templates will override.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>{% block title %}{% endblock %}</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='site.css')}}\" />\n    </head>\n\n    <body>\n        <div class=\"navbar\">\n            <a href=\"{{ url_for('home') }}\" class=\"navbar-brand\">Home</a>\n            <a href=\"{{ url_for('about') }}\" class=\"navbar-item\">About</a>\n            <a href=\"{{ url_for('contact') }}\" class=\"navbar-item\">Contact</a>\n        </div>\n\n        <div class=\"body-content\">\n            {% block content %}\n            {% endblock %}\n            <hr/>\n            <footer>\n                <p>&copy; 2018</p>\n            </footer>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Symbol Search Paths for GDB/LLDB in launch.json (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates setting the `additionalSOLibSearchPath` property in `launch.json`. This property allows specifying extra directories, separated by semicolons, where GDB or LLDB should search for shared object library symbol files during a debugging session. This is useful when symbol files are not located in standard system paths or alongside the executable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-debug.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"additionalSOLibSearchPath\": \"/path/to/symbols;/another/path/to/symbols\"\n```\n\n----------------------------------------\n\nTITLE: Installing esbuild Dependencies\nDESCRIPTION: Command to install esbuild as a development dependency for VS Code extension bundling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev esbuild\n```\n\n----------------------------------------\n\nTITLE: Initializing a FastAPI App with a Root Endpoint - Python\nDESCRIPTION: This snippet creates a minimal FastAPI application in Python with a single root path (\\\"/\\\") that returns a JSON message \\\"Hello World\\\". The app uses the FastAPI class and demonstrates route handling via a function, suitable as a starting point for RESTful API development. Dependencies include FastAPI, and it is typically run using uvicorn for serving the application. The endpoint accepts an HTTP GET request and returns a dictionary serialized as JSON; there are no route parameters or input constraints.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n@app.get(\\\"/\\\")\\ndef root():\\n    return {\\\"message\\\": \\\"Hello World\\\"}\n```\n\n----------------------------------------\n\nTITLE: Using @vscode/l10n for Localization in Subprocesses (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to use the `@vscode/l10n` module for localization within a subprocess where the standard `vscode` API is unavailable. It requires configuring the module using `l10n.config` with the URI of the localization bundle (obtained from the main extension process, possibly via environment variables). Afterward, `l10n.t` can be used to translate strings similarly to the extension host API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { l10n } from '@vscode/l10n';\n\n// Load the translations for the current locale\nl10n.config({\n    uri: process.env.BUNDLE_URI_FROM_EXTENSION\n});\n\n// returns the translated string or the original string if no translation is available\nl10n.t('Hello World');\n```\n```\n\n----------------------------------------\n\nTITLE: Installing AI Toolkit Extension in Visual Studio Code\nDESCRIPTION: This code snippet provides a link to install the AI Toolkit extension directly in Visual Studio Code. It uses a custom URI scheme to trigger the installation process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> <a class=\"install-extension-btn\" href=\"vscode:extension/ms-windows-ai-studio.windows-ai-studio\">Install the AI Toolkit for VS Code</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring skipFiles to Ignore node_modules and lib Folders in JSON\nDESCRIPTION: This JSON snippet shows how to configure the `skipFiles` property in a VS Code launch configuration (`launch.json`) to prevent the Node.js debugger from stepping into files within the `node_modules` and `lib` directories relative to the workspace folder. It uses glob patterns to specify the paths to skip.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"skipFiles\": [\n  \"${workspaceFolder}/node_modules/**/*.js\",\n  \"${workspaceFolder}/lib/**/*.js\"\n]\n```\n\n----------------------------------------\n\nTITLE: Invalidating Test Results in VS Code Test Extensions\nDESCRIPTION: Example showing how to use the TestController.invalidateTestResults method to indicate that test results may no longer be valid. The snippet demonstrates invalidating tests when files change or when configuration changes occur in a test extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_81.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nonFileChange(uri => {\n  // invalidate tests in a file when a file changes:\n  testController.invalidateTestResults(getTestsInFile(uri));\n})\nonConfigurationChange(() => {\n  // invalidate results for all tests:\n  testController.invalidateTestResults();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing HistoryMessages Component in TSX\nDESCRIPTION: Defines a HistoryMessages component that handles chat history rendering using PrioritizedList for automatic priority assignment to messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/prompt-tsx.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tUserMessage,\n\tAssistantMessage,\n\tPromptElement,\n\tBasePromptElementProps,\n\tPrioritizedList,\n} from '@vscode/prompt-tsx';\nimport { ChatContext, ChatRequestTurn, ChatResponseTurn, ChatResponseMarkdownPart } from 'vscode';\n\ninterface IHistoryMessagesProps extends BasePromptElementProps {\n\thistory: ChatContext['history'];\n}\n\nexport class HistoryMessages extends PromptElement<IHistoryMessagesProps> {\n\trender(): PromptPiece {\n\t\tconst history: (UserMessage | AssistantMessage)[] = [];\n\t\tfor (const turn of this.props.history) {\n\t\t\tif (turn instanceof ChatRequestTurn) {\n\t\t\t\thistory.push(<UserMessage>{turn.prompt}</UserMessage>);\n\t\t\t} else if (turn instanceof ChatResponseTurn) {\n\t\t\t\thistory.push(\n\t\t\t\t\t<AssistantMessage name={turn.participant}>\n\t\t\t\t\t\t{chatResponseToMarkdown(turn)}\n\t\t\t\t\t</AssistantMessage>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t<PrioritizedList priority={0} descending={false}>\n\t\t\t\t{history}\n\t\t\t</PrioritizedList>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing JSON Validation Schemas to VS Code (JSON)\nDESCRIPTION: This example demonstrates how to link JSON schema validation to a specific filename via the jsonValidation contribution. When a file matching the specified name or pattern is opened, VS Code will validate it against the schema found at the provided URL. The url property supports both local paths bundled in the extension or HTTP/HTTPS remote locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"jsonValidation\": [\n      {\n        \"fileMatch\": \".jshintrc\",\n        \"url\": \"https://json.schemastore.org/jshintrc\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Extensions via Command Line in VS Code\nDESCRIPTION: Commands for listing, installing, and uninstalling extensions from the command line in VS Code. Includes options for setting extensions directory, showing versions, and enabling proposed API features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/extensions/extension-marketplace.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode --extensions-dir <dir>\n    Set the root path for extensions.\ncode --list-extensions\n    List the installed extensions.\ncode --show-versions\n    Show versions of installed extensions, when using --list-extension.\ncode --install-extension (<extension-id> | <extension-vsix-path>)\n    Installs an extension.\ncode --uninstall-extension (<extension-id>)\n    Uninstalls an extension.\ncode --enable-proposed-api (<extension-id>)\n    Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Dev Container Image using Bash CLI\nDESCRIPTION: This Bash command uses the `devcontainer` CLI to build a development container image. The `--workspace-folder` parameter specifies the path to the source code repository containing the dev container configuration. The `--push true` flag instructs the CLI to push the built image to a container registry, and `--image-name` sets the name and optional tag (version) for the image in the registry.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer build --workspace-folder <my_repo> --push true --image-name <my_image_name>:<optional_image_version>\n```\n\n----------------------------------------\n\nTITLE: Setting the Python Language Server in VS Code\nDESCRIPTION: Configures the language server used for features like IntelliSense, code navigation, and diagnostics. The `Default` value typically resolves to Pylance. Other valid options include explicitly setting `Pylance`, `Jedi`, or `None` to disable the language server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nDefault\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version/Architecture with nvs in launch.json (JSON)\nDESCRIPTION: This launch configuration snippet shows how to use the `runtimeVersion` attribute with 'nvs' to select a specific Node.js version, flavor (e.g., chakracore), and architecture (e.g., x64) for the debugging session. The specified version must be pre-installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch test\",\n    \"runtimeVersion\": \"chackracore/8.9.4/x64\",\n    \"program\": \"${workspaceFolder}/test.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Installation\nDESCRIPTION: Command to update Rust to the latest version using rustup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Executing a Rust Command in the Running Dev Container - Bash\nDESCRIPTION: Runs the Rust sample project inside the started dev container by executing a cargo run command. This command must be run after the dev container is up, with the workspace folder path provided. Outputs compile and run information for the Rust application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer exec --workspace-folder <path-to-vscode-remote-try-rust> cargo run\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Scroll in VS Code Settings\nDESCRIPTION: This code snippet demonstrates how to enable or disable the Sticky Scroll feature in Visual Studio Code using the settings configuration. It uses a JSON-style setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.stickyScroll.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot Next Edit Suggestions in VS Code\nDESCRIPTION: This identifier refers to the Visual Studio Code setting `github.copilot.nextEditSuggestions.enabled`. Setting this to `true` enables the experimental Copilot Next Edit Suggestions feature, which attempts to predict and suggest the user's next code modification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(github.copilot.nextEditSuggestions.enabled)\n```\n\n----------------------------------------\n\nTITLE: Assigning Keyboard Shortcut to Insert Specific Snippet\nDESCRIPTION: This JSON configuration demonstrates how to assign a custom keyboard shortcut to insert a specific snippet in VS Code. It uses the 'editor.action.insertSnippet' command with a predefined snippet as an argument.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+k 1\",\n  \"command\": \"editor.action.insertSnippet\",\n  \"when\": \"editorTextFocus\",\n  \"args\": {\n    \"snippet\": \"console.log($1)$0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing End-to-End Tests for Language Server Completion Feature\nDESCRIPTION: TypeScript test that validates the language server's code completion functionality. It simulates triggering completion at a specific position and verifies that the expected completion items are returned.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport * as assert from 'assert';\nimport { getDocUri, activate } from './helper';\n\nsuite('Should do completion', () => {\n  const docUri = getDocUri('completion.txt');\n\n  test('Completes JS/TS in txt file', async () => {\n    await testCompletion(docUri, new vscode.Position(0, 0), {\n      items: [\n        { label: 'JavaScript', kind: vscode.CompletionItemKind.Text },\n        { label: 'TypeScript', kind: vscode.CompletionItemKind.Text }\n      ]\n    });\n  });\n});\n\nasync function testCompletion(\n  docUri: vscode.Uri,\n  position: vscode.Position,\n  expectedCompletionList: vscode.CompletionList\n) {\n  await activate(docUri);\n\n  // Executing the command `vscode.executeCompletionItemProvider` to simulate triggering completion\n  const actualCompletionList = (await vscode.commands.executeCommand(\n    'vscode.executeCompletionItemProvider',\n    docUri,\n    position\n  )) as vscode.CompletionList;\n\n  assert.ok(actualCompletionList.items.length >= 2);\n  expectedCompletionList.items.forEach((expectedItem, i) => {\n    const actualItem = actualCompletionList.items[i];\n    assert.equal(actualItem.label, expectedItem.label);\n    assert.equal(actualItem.kind, expectedItem.kind);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Emmet Snippets\nDESCRIPTION: Example JSON configuration for custom HTML and CSS Emmet snippets in snippets.json file\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"html\": {\n        \"snippets\": {\n            \"ull\": \"ul>li[id=${1} class=${2}]*2{ Will work with html, pug, haml and slim }\",\n            \"oll\": \"<ol><li id=${1} class=${2}> Will only work in html </ol>\",\n            \"ran\": \"{ Wrap plain text in curly braces }\"\n        }\n    },\n    \"css\": {\n        \"snippets\": {\n            \"cb\": \"color: black\",\n            \"bsd\": \"border: 1px solid ${1:red}\",\n            \"ls\": \"list-style: ${1}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Mounts in devcontainer.json\nDESCRIPTION: Configuration for mounting local directories into a dev container using devcontainer.json. Demonstrates basic mounting and usage of environment variables for path resolution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-local-file-mount.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n  \"source=/local/source/path/goes/here,target=/target/path/in/container/goes/here,type=bind,consistency=cached\"\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n    \"source=${localEnv:HOME}${localEnv:USERPROFILE},target=/host-home-folder,type=bind,consistency=cached\",\n    \"source=${localWorkspaceFolder}/app-data,target=/data,type=bind,consistency=cached\"\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Override Keyword Example\nDESCRIPTION: Demonstrates the usage of TypeScript 4.3's new override keyword with noImplicitOverride flag. The example shows how omitting the override keyword results in an error when a subclass method overrides a superclass method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n   foo() {...}\n}\n\nclass SubFoo extends Foo {\n    foo() { ... } // Error when noImplicitOverride is enabled: missing override specifier\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remote Debugpy Listener with Custom Address - Python\nDESCRIPTION: Configures debugpy to listen for debugger connections on a specific remote IP and port. Use this pattern for remote script debugging, ensuring the IP address is the server's private interface and matches SSH tunnel or firewall configuration. Includes a wait for debugger attach, which prevents code from running until a remote connection is made. Requires debugpy installed on the remote system and appropriate network permissions for the specified port.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport debugpy\n\n# Allow other computers to attach to debugpy at this IP address and port.\ndebugpy.listen(('1.2.3.4', 5678))\n\n# Pause the program until a remote debugger is attached\ndebugpy.wait_for_client()\n\n```\n\n----------------------------------------\n\nTITLE: Complete TypeScript Watch Task Configuration\nDESCRIPTION: Full tasks.json configuration for TypeScript watch mode, including problem matcher and background task settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"watch\",\n            \"command\": \"tsc\",\n            \"args\": [\"--watch\"],\n            \"isBackground\": true,\n            \"problemMatcher\": {\n                \"owner\": \"typescript\",\n                \"fileLocation\": \"relative\",\n                \"pattern\": {\n                    \"regexp\": \"^([^\\\\s].*)\\\\((\\\\d+|\\\\d+,\\\\d+|\\\\d+,\\\\d+,\\\\d+,\\\\d+)\\\\):\\\\s+(error|warning|info)\\\\s+(TS\\\\d+)\\\\s*:\\\\s*(.*)$\",\n                    \"file\": 1,\n                    \"location\": 2,\n                    \"severity\": 3,\n                    \"code\": 4,\n                    \"message\": 5\n                },\n                \"background\": {\n                    \"activeOnStart\": true,\n                    \"beginsPattern\": \"^\\\\s*\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}(?: AM| PM)? - File change detected\\\\. Starting incremental compilation\\\\.\\\\.\\\\.\",\n                    \"endsPattern\": \"^\\\\s*\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}(?: AM| PM)? - Compilation complete\\\\. Watching for file changes\\\\.\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default System Include Path Setting in VS Code (JSON)\nDESCRIPTION: Specifies the `C_Cpp.default.systemIncludePath` setting, which allows users to explicitly define the default system include path as an array of strings. When this setting has a value, the system include path automatically derived from the compiler specified in `compilerPath` will not be added by the extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/customize-default-settings-cpp.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\nC_Cpp.default.systemIncludePath : string[]\n```\n```\n\n----------------------------------------\n\nTITLE: Training Gaussian Naive Bayes Model with scikit-learn in Python\nDESCRIPTION: Creates and trains a Gaussian Naive Bayes model using scikit-learn, a common algorithm for classification problems like the Titanic survival prediction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Webview Panel in VS Code\nDESCRIPTION: TypeScript code demonstrating how to create and show a basic webview panel using the VS Code API. Creates an empty webview panel in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      // Create and show a new webview\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding', // Identifies the type of the webview. Used internally\n        'Cat Coding', // Title of the panel displayed to the user\n        vscode.ViewColumn.One, // Editor column to show the new webview panel in.\n        {} // Webview options. More on these later.\n      );\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Feature Correlation with Survival in Python\nDESCRIPTION: Calculates the pairwise correlation between all numeric columns in the `data` DataFrame using the `corr(numeric_only=True)` method. It then takes the absolute value of these correlations using `.abs()` and selects only the column corresponding to the 'survived' variable. This output shows the strength of the linear relationship between each feature and the survival outcome. Requires the `data` DataFrame with numeric features, including the previously encoded 'sex' column.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata.corr(numeric_only=True).abs()[[\"survived\"]]\n```\n\n----------------------------------------\n\nTITLE: VS Code Configuration for Remote Debugging Connection\nDESCRIPTION: JSON configuration for launch.json to connect to a remote machine running debugpy. This specifies the remote machine's hostname and port to establish the debugging connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach\",\n    \"type\": \"debugpy\",\n    \"request\": \"attach\",\n    \"connect\": {\n       \"host\": \"remote-machine-name\", // replace this with remote machine name\n       \"port\": 5678\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Incremental Document Sync Handlers in VS Code Language Server (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a language server to use incremental document synchronization by registering notification handlers for document open, change, and close events via a LSP connection. It shows how to return the appropriate server capabilities during initialization by setting 'textDocumentSync' to 'TextDocumentSyncKind.Incremental'. Dependencies include the VS Code Language Server API (such as 'vscode-languageserver') and TypeScript. Key parameters are 'params' for event handlers (which include document URI, text, and content changes). The code is intended for language server authors looking to optimize synchronization performance and handle individual changes efficiently. Commented lines highlight options for either event-based handling or manager-based aggregation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.onInitialize((params): InitializeResult => {\n    ...\n    return {\n        capabilities: {\n            // Enable incremental document sync\n            textDocumentSync: TextDocumentSyncKind.Incremental,\n            ...\n        }\n    };\n});\n\nconnection.onDidOpenTextDocument((params) => {\n    // A text document was opened in VS Code.\n    // params.uri uniquely identifies the document. For documents stored on disk, this is a file URI.\n    // params.text the initial full content of the document.\n});\n\nconnection.onDidChangeTextDocument((params) => {\n    // The content of a text document has change in VS Code.\n    // params.uri uniquely identifies the document.\n    // params.contentChanges describe the content changes to the document.\n});\n\nconnection.onDidCloseTextDocument((params) => {\n    // A text document was closed in VS Code.\n    // params.uri uniquely identifies the document.\n});\n\n/*\nMake the text document manager listen on the connection\nfor open, change and close text document events.\n\nComment out this line to allow `connection.onDidOpenTextDocument`,\n`connection.onDidChangeTextDocument`, and `connection.onDidCloseTextDocument` to handle the events\n*/\n// documents.listen(connection);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Extension Communication with Commands\nDESCRIPTION: Demonstrates how to implement cross-extension communication using commands, which works reliably between UI and Workspace Extensions in remote scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport async function activate(context: vscode.ExtensionContext) {\n    // Register the private echo command\n    const echoCommand = vscode.commands.registerCommand('_private.command.called.echo',\n        (value: string) => {\n            return value;\n        }\n    );\n    context.subscriptions.push(echoCommand);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Mode for macOS Debugger Integration with C# Dev Kit - Shell\nDESCRIPTION: These commands enable macOS Developer Mode so users are not prompted for a password each time the debugger attaches, which is required for VS Code debugging with C# Dev Kit. Dependencies include a macOS system with administrative privileges and user-level shell access. `DevToolsSecurity --enable` allows developer tools debugging, while the `dscl` command adds the current user to the _developer group. Both commands must be executed in the terminal; the second command uses sudo and requires your account password. No output is produced if successful, but errors may occur if the user lacks appropriate permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDevToolsSecurity --enable\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo dscl . append /Groups/_developer GroupMembership $USER\n```\n\n----------------------------------------\n\nTITLE: Navigating to and Installing Express App Dependencies\nDESCRIPTION: Commands to navigate into the newly created Express application directory and install all required dependencies using npm.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd myExpressApp\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Webview to Extension Messaging via acquireVsCodeApi (JavaScript)\nDESCRIPTION: This snippet demonstrates sending messages from a webview to its VS Code extension host. The extension panel listens for messages (onDidReceiveMessage), and the webview obtains the VS Code API object via acquireVsCodeApi and posts a message when certain conditions are met (e.g., simulated bug occurrence). The extension displays an error message based on incoming alert messages from the webview. Dependencies are the VS Code extension API and the webview JS environment. The key parameters involve message commands ('alert') and their payloads. Only one call to acquireVsCodeApi is allowed per webview session; the returned object must not leak into global scope.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {\n          enableScripts: true\n        }\n      );\n\n      panel.webview.html = getWebviewContent();\n\n      // Handle messages from the webview\n      panel.webview.onDidReceiveMessage(\n        message => {\n          switch (message.command) {\n            case 'alert':\n              vscode.window.showErrorMessage(message.text);\n              return;\n          }\n        },\n        undefined,\n        context.subscriptions\n      );\n    })\n  );\n}\n\nfunction getWebviewContent() {\n  return `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\\\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\\\" width=\\\"300\\\" />\n    <h1 id=\\\"lines-of-code-counter\\\">0</h1>\n\n    <script>\n        (function() {\n            const vscode = acquireVsCodeApi();\n            const counter = document.getElementById('lines-of-code-counter');\n\n            let count = 0;\n            setInterval(() => {\n                counter.textContent = count++;\n\n                // Alert the extension when our cat introduces a bug\n                if (Math.random() < 0.001 * count) {\n                    vscode.postMessage({\n                        command: 'alert',\n                        text: '🐛  on line ' + count\n                    })\n                }\n            }, 100);\n        }())\n    <\\/script>\n</body>\n</html>`;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-root Access in Dockerfile for Python App - Dockerfile - docker\nDESCRIPTION: This Dockerfile snippet demonstrates how to set up non-root user privileges in a Docker container, intended primarily for Python applications using Gunicorn. By exposing a high port (1024+), creating a dedicated application directory, and adding a non-root user with access rights, the container can run more securely. Key parameters include port exposure, working directory creation, user setup, and command invocation. Dependencies may include Python, Gunicorn, and any required application files. Ensure that all references to ports in accompanying configuration files match the value set here.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\n# 1024 or higher\nEXPOSE 1024\n\n# ... other directives such as installing requirements.txt file\n\n# Creates /app in container if it does not already exist\n# Ports code into /app\nWORKDIR /app\nADD . /app\n\n# Creates a non-root user and adds permission to access the /app folder\nRUN adduser -u 5678 --disabled-password --gecos \"\" appuser && chown -R appuser /app\nUSER appuser\n\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:1024\", \"pythonPath.to.wsgi\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Files with Contents using WorkspaceEdit\nDESCRIPTION: TypeScript code showing how to create new files with content using the WorkspaceEdit API. Demonstrates passing binary content through options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst edit = new vscode.WorkspaceEdit();\nedit.createFile(newFileUri, { contents: new Unit8Array([1, 2, 3]) });\n\nawait vscode.workspace.applyEdit(edit);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Notebook Serializer and Controller in TypeScript\nDESCRIPTION: Complete example of implementing a notebook serializer and controller using the VS Code Notebook API. The serializer handles JSON-based notebook data, while the controller processes cell content by converting text to uppercase and returning it as both plain text and HTML output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// serialize/deserialize notebook\nvscode.workspace.registerNotebookSerializer(\n  'echobook',\n  new class implements vscode.NotebookSerializer {\n    // serializer is relying on JSON.parse/stringify\n    deserializeNotebook(content: Uint8Array) {\n        return JSON.parse(new TextDecoder().decode(content) || '{\"cells\":[]');\n    }\n    serializeNotebook(data: vscode.NotebookData) {\n        return new TextEncoder().encode(JSON.stringify(data));\n    }\n})\n\n// notebook controller\nvscode.notebooks.createNotebookController(\n  'myId',\n  'echobook',\n  'Echo',\n  (cells, _notebook, controller) => {\n    for (let cell of cells) {\n        // execution means to echo in upper-case, once as plain text and once as html\n        const execution = controller.createNotebookCellExecution(cell);\n        execution.start();\n        const echo = cell.document.getText().toUpperCase();\n        const textItem = vscode.NotebookCellOutputItem.text(echo, 'text/plain');\n        const htmlItem = vscode.NotebookCellOutputItem.text(`<b>${echo}</b>`, 'text/html');\n        const output = new vscode.NotebookCellOutput([textItem, htmlItem]);\n        execution.replaceOutput(output)\n        execution.end(true);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Workspace Trust TypeScript API Definition\nDESCRIPTION: TypeScript namespace definition showing the programmatic API for checking and listening to workspace trust status.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace workspace {\n  /**\n    * When true, the user has explicitly trusted the contents of the workspace.\n    */\n  export const isTrusted: boolean;\n  /**\n    * Event that fires when the current workspace has been trusted.\n    */\n  export const onDidGrantWorkspaceTrust: Event<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Run Entry Point for Nest.js - VS Code Tasks - JSON\nDESCRIPTION: This configuration snippet for tasks.json sets up a custom Docker run task in Visual Studio Code for a Nest.js application by customizing the container's entry point with a Nest CLI debug command (\\\"nest start --debug 0.0.0.0:9229\\\"). It ensures Node.js debugging is enabled inside the container. Dependencies include the Docker VS Code extension and Docker itself; prerequisites are a working Nest.js application and prior Docker build step. The \\\"command\\\" parameter in \\\"dockerRun\\\" overrides inference from package.json, and the structure ties docker-run and node debugging together. The input is not expected to be run as is; rather, it's a configuration to be added to .vscode/tasks.json. Outputs are the running container in debug mode, accessible from VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"type\": \"docker-run\",\n            \"label\": \"docker-run: debug\",\n            \"dependsOn\": [\n                \"docker-build\"\n            ],\n            \"dockerRun\": {\n                \"command\": \"nest start --debug 0.0.0.0:9229\",\n            },\n            \"node\": {\n                \"enableDebugging\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Command with When Clause Context (VS Code keybindings.json, JSON)\nDESCRIPTION: Shows how to bind F5 to the 'workbench.action.debug.start' command with a 'when' clause to enable the shortcut only if debuggers are available and not in debug mode. This uses context keys for more granular control of shortcut activation, supporting advanced configuration without external dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"f5\",  \"command\": \"workbench.action.debug.start\",\n                       \"when\": \"debuggersAvailable && !inDebugMode\" },\n```\n\n----------------------------------------\n\nTITLE: Contributing Terminal Profiles in VS Code Extension\nDESCRIPTION: This set of snippets shows how to contribute terminal profiles from a VS Code extension. It includes the necessary package.json contributions, activation events, and the TypeScript code to register a terminal profile provider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"terminal\": {\n    \"profiles\": [\n      {\n        \"title\": \"Custom Profile\",\n        \"id\": \"custom_profile\"\n      }\n    ]\n  },\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n  \"onTerminalProfile:custom_profile\"\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.registerTerminalProfileProvider('custom_profile', {\n  provideTerminalProfile() {\n    return {\n      options: {\n        name: 'Profile from extension',\n        shellPath: 'cmd.exe'\n      }\n    };\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom View Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to contribute a custom view to a specific VS Code view container (e.g., `explorer`) using `contributes.views` in `package.json`. It defines the view's unique `id`, display `name`, visibility condition (`when` clause), an optional `icon`, and a `contextualTitle` used when moved.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"views\": {\n      \"explorer\": [\n        {\n          \"id\": \"nodeDependencies\",\n          \"name\": \"Node Dependencies\",\n          \"when\": \"workspaceHasPackageJSON\",\n          \"icon\": \"media/dep.svg\",\n          \"contextualTitle\": \"Package Explorer\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Extension Execution Location in VS Code JSON Settings\nDESCRIPTION: Advanced configuration in `settings.json` to override the default execution location (local UI or remote workspace) for specific extensions. This example forces the Docker extension to run locally (`\"ui\"`) and the Remote - SSH: Editing Configuration Files extension to run remotely (`\"workspace\"`). This setting can potentially break extensions and is typically used for testing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"remote.extensionKind\": {\n    \"ms-azuretools.vscode-docker\": [ \"ui\" ],\n    \"ms-vscode-remote.remote-ssh-edit\": [ \"workspace\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Command Palette Item Visibility in VSCode Extensions\nDESCRIPTION: JSON configuration for conditionally showing commands in the Command Palette. This example makes a 'Hello World' command visible only when text is selected in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    {\n      \"command\": \"extension.sayHello\",\n      \"title\": \"Hello World\"\n    }\n  ],\n  \"menus\": {\n    \"commandPalette\": [\n      {\n        \"command\": \"extension.sayHello\",\n        \"when\": \"editorHasSelection\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Command History Across Git Bash Sessions (Bash)\nDESCRIPTION: This Bash script snippet provides a workaround for retaining command history across sessions when using Git Bash within VS Code's integrated terminal. By setting the 'PROMPT_COMMAND' environment variable to 'history -a' in your '~/.bashrc' or '~/.bash_profile', the command history is explicitly saved before each prompt is displayed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport PROMPT_COMMAND='history -a'\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Project with jsconfig.json\nDESCRIPTION: Basic JavaScript project configuration using jsconfig.json file. Defines compiler options for CommonJS modules and ES6 target, while excluding node_modules directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\"\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Virtual Workspaces Programmatically in TypeScript\nDESCRIPTION: TypeScript code snippet to check if the current workspace is a virtual workspace by verifying that all workspace folders have non-file URI schemes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isVirtualWorkspace = workspace.workspaceFolders && workspace.workspaceFolders.every(f => f.uri.scheme !== 'file');\n```\n\n----------------------------------------\n\nTITLE: Single File Debug Configuration in VS Code\nDESCRIPTION: JSON configuration for debugging a single HTML file in Microsoft Edge browser\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/browser-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"msedge\",\n      \"request\": \"launch\",\n      \"name\": \"Launch hello.html\",\n      \"file\": \"${workspaceFolder}/hello.html\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Target Application Launch with Arguments and Environment (VS Code, JSON)\nDESCRIPTION: This snippet shows a launch.json configuration that sets up the target C/C++ executable with custom command-line arguments, environment variables, and working directory for debugging using the cpdbg (GDB/LLDB) engine. The configuration demonstrates how to pass an array of arguments via the \"args\" property and inject custom environment variables using the \"environment\" array. The \"cwd\" parameter sets the working directory for the launched process. This setup is language- and platform-agnostic but designed for local debugging. Ensure all paths, argument formats, and environment variables are correct for your debugging context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"C++ Launch\",\n   \"type\": \"cppdbg\",\n   \"request\": \"launch\",\n   \"program\": \"${workspaceFolder}/a.out\",\n   \"args\": [\"arg1\", \"arg2\"],\n   \"environment\": [{\"name\": \"config\", \"value\": \"Debug\"}],\n   \"cwd\": \"${workspaceFolder}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter Code Cells in Python Files\nDESCRIPTION: Demonstrates how to define Jupyter-like code cells in Python files using the '# %%' comment delimiter. This allows for cell-by-cell execution similar to Jupyter notebooks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/jupyter-support-py.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# %%\nmsg = \"Hello World\"\nprint(msg)\n\n# %%\nmsg = \"Hello again\"\nprint(msg)\n```\n\n----------------------------------------\n\nTITLE: Starting a Remote Tunnel with VS Code CLI in Bash\nDESCRIPTION: This Bash command invokes the 'tunnel' subcommand of the VS Code CLI to establish a secure tunnel from the current machine. It downloads and starts the VS Code Server, creating a tunnel endpoint that can be accessed from a vscode.dev URL. Requires the VS Code CLI to be installed and available in the system's PATH, or invoked as ./code if from a standalone install. The only parameter is 'tunnel', and the expected output is a new tunnel session and a URL printed to the terminal for remote access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/tunnels.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode tunnel\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Accounts via VS Code Authentication API\nDESCRIPTION: This VS Code API call allows extensions to retrieve a list of all GitHub accounts that the user is currently logged into within the editor. This is crucial for implementing features that support multiple GitHub accounts simultaneously, such as differentiating accounts for Settings Sync and Copilot.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.authentication.getAccounts('github')\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue Development Server\nDESCRIPTION: Command to start the Vue development server with hot module replacement, making the application available at http://localhost:5173.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/vuejs-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-File JavaScript Type Checking with @ts-check\nDESCRIPTION: This JavaScript snippet shows how to opt-in to TypeScript type checking for an individual file by adding the `// @ts-check` comment at the top. It illustrates that VS Code will then report type errors, such as assigning a number to a variable inferred as a string. No external dependencies are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\nlet itsAsEasyAs = 'abc'\nitsAsEasyAs = 123 // Error: Type '123' is not assignable to type 'string'\n```\n\n----------------------------------------\n\nTITLE: Network Configuration for Localhost Access in Docker Compose\nDESCRIPTION: YAML configuration that puts a service on the same network as a database container, enabling localhost access between containers and allowing port forwarding to work correctly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# Runs the service on the same network as the database container, allows \"forwardPorts\" in devcontainer.json function.\nnetwork_mode: service:db\n```\n\n----------------------------------------\n\nTITLE: Attaching Debugger by Port in launch.json (JSON)\nDESCRIPTION: A simple VS Code launch configuration of type 'attach' to connect the debugger to a Node.js process already running in debug mode and listening on a specific port (defaulting to 9229).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to Process\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"port\": 9229\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Folders and Files by Distro Name - Visual Studio Code - Shell\nDESCRIPTION: This series of command-line snippets illustrates several ways to open a WSL-based folder or file from the Windows command prompt using VS Code's '--remote' and URI options. 'code --remote wsl+<distro name> <path in WSL>' opens a folder or file in a specific Linux distribution; appending a trailing slash or using '--folder-uri' forces folder open; '--file-uri' or '--goto' forces file open, even for files without an extension. These commands assume VS Code CLI is installed and accessible via PATH. Inputs include the WSL distribution name and filesystem path. The expected result is VS Code opening to the correct remote resource. The commands will not function unless WSL, VS Code, and the WSL extension are properly installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncode --remote wsl+<distro name> <path in WSL>\n```\n\nLANGUAGE: shell\nCODE:\n```\ncode --remote wsl+Ubuntu /home/jim/projects/c\n```\n\nLANGUAGE: shell\nCODE:\n```\ncode --folder-uri vscode-remote://wsl+Ubuntu/home/ubuntu/folder.with.dot\n```\n\nLANGUAGE: shell\nCODE:\n```\ncode --file-uri vscode-remote://wsl+Ubuntu/home/ubuntu/fileWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Test Run Support in VS Code Test Extensions\nDESCRIPTION: Code changes needed to implement support for continuous test runs in VS Code test extensions. This feature allows users to indicate they want to 'watch' tests and continue to run them as changes are made.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nconst profile = ctrl.createRunProfile(/* ... */);\n+profile.supportsContinuousRun = true;\n\nfunction runHandler(request: vscode.TestRunRequest, cancellation: vscode.CancellationToken) {\n+  if (request.continuous) {\n+    startWatchingAndRunningTests(request);\n+  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for VS Code Extensions in JavaScript\nDESCRIPTION: This snippet shows a sample webpack configuration file for VS Code extensions. It sets up the build target, entry point, output, and module resolution for TypeScript and JavaScript files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//@ts-check\n\n'use strict';\n\nconst path = require('path');\nconst webpack = require('webpack');\n\n/**@type {import('webpack').Configuration}*/\nconst config = {\n    target: 'webworker', // vscode extensions run in webworker context for VS Code web 📖 -> https://webpack.js.org/configuration/target/#target\n\n    entry: './src/extension.ts', // the entry point of this extension, 📖 -> https://webpack.js.org/configuration/entry-context/\n    output: { // the bundle is stored in the 'dist' folder (check package.json), 📖 -> https://webpack.js.org/configuration/output/\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'extension.js',\n        libraryTarget: \"commonjs2\",\n        devtoolModuleFilenameTemplate: \"../[resource-path]\",\n    },\n    devtool: 'source-map',\n    externals: {\n        vscode: \"commonjs vscode\" // the vscode-module is created on-the-fly and must be excluded. Add other modules that cannot be webpack'ed, 📖 -> https://webpack.js.org/configuration/externals/\n    },\n    resolve: { // support reading TypeScript and JavaScript files, 📖 -> https://github.com/TypeStrong/ts-loader\n        mainFields: ['browser', 'module', 'main'], // look for `browser` entry point in imported node modules\n        extensions: ['.ts', '.js'],\n        alias: {\n            // provides alternate implementation for node module and source files\n        },\n        fallback: {\n            // Webpack 5 no longer polyfills Node.js core modules automatically.\n            // see https://webpack.js.org/configuration/resolve/#resolvefallback\n            // for the list of Node.js core module polyfills.\n        }\n    },\n    module: {\n        rules: [{\n            test: /\\.ts$/,\n            exclude: /node_modules/,\n            use: [{\n                loader: 'ts-loader',\n            }]\n        }]\n    },\n}\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining Color Theme Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to contribute a custom color theme using `contributes.themes` in `package.json`. It specifies the theme's `label` (`Monokai`), its UI base theme (`uiTheme`: `vs-dark` or `vs-light`), and the relative `path` to the theme definition JSON file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"themes\": [\n      {\n        \"label\": \"Monokai\",\n        \"uiTheme\": \"vs-dark\",\n        \"path\": \"./themes/monokai-color-theme.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Debugging with launch.json in VS Code (MinGW/g++)\nDESCRIPTION: This JSON snippet shows an example `launch.json` configuration for debugging a C++ file built with g++.exe using the gdb debugger within VS Code. It specifies the executable path using VS Code variables, defines debugger behavior like `stopAtEntry`, sets the working directory, configures the debugger mode and path, includes setup commands for gdb, and links a pre-launch build task. This configuration is tailored for a MinGW-w64 setup using gdb.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"C/C++: g++.exe build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}\\\\\\${fileBasenameNoExtension}.exe\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"C:\\\\msys64\\\\ucrt64\\\\bin\\\\gdb.exe\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                },\n                {\n                    \"description\": \"Set Disassembly Flavor to Intel\",\n                    \"text\": \"-gdb-set disassembly-flavor intel\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"C/C++: g++.exe build active file\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Test Run Profiles in TypeScript\nDESCRIPTION: Demonstrates how to create run and debug profiles for test execution, setting up basic handlers that can run tests in different modes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  // todo\n}\n\nconst runProfile = controller.createRunProfile('Run', vscode.TestRunProfileKind.Run, (request, token) => {\n  runHandler(false, request, token);\n});\n\nconst debugProfile = controller.createRunProfile('Debug', vscode.TestRunProfileKind.Debug, (request, token) => {\n  runHandler(true, request, token);\n});\n```\n\n----------------------------------------\n\nTITLE: Example c_cpp_properties.json for Cross-Compiling (Linux x64 to Linux Arm)\nDESCRIPTION: This JSON snippet shows a sample configuration within the `c_cpp_properties.json` file for setting up C++ IntelliSense in VS Code for cross-compiling. It specifies the `compilerPath` to the cross-compiler (arm-none-eabi-g++), sets the `intelliSenseMode` to 'gcc-arm' to emulate the target architecture, defines C/C++ standards, and includes the workspace folder in the include path. This configuration helps the C/C++ extension provide accurate code completion and analysis for the target platform (Linux Arm) when developing on a different host (Linux x64).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense-crosscompilation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"myConfigurationName\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"/usr/bin/arm-none-eabi-g++\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++14\",\n            \"IntelliSenseMode\": \"gcc-arm\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Django Project - Bash\nDESCRIPTION: Runs the 'django-admin startproject' command in bash to create a new Django project within the current directory. This command requires that Django is installed in the active Python environment. It initializes core project files, including manage.py and a project subdirectory, preparing the workspace for development. No arguments are needed other than the project name and target directory (here, '.').\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject web_project .\n```\n\n----------------------------------------\n\nTITLE: Converting Anonymous Class to Lambda Expression in Java\nDESCRIPTION: Shows how to convert an anonymous class creation to a lambda expression using the 'Convert to lambda expression' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  Runnable runnable = new Runnable(){\n    @Override\n    public void run() {\n      // do something\n    }\n  };\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n    Runnable runnable = () -> {\n      // do something\n    };\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for Flask in launch.json\nDESCRIPTION: This JSON object represents a debug configuration within VS Code's `launch.json` file specifically for debugging a Flask application using the `debugpy` debugger. It defines the configuration name, type (`debugpy`), request type (`launch`), specifies launching Flask as a module (`\"module\": \"flask\"`), sets environment variables like `FLASK_APP` (pointing to `app.py`) and `FLASK_DEBUG`, provides arguments for the flask command (`run`, `--no-debugger`, `--no-reload`), enables Jinja template debugging, and configures stepping behavior (`justMyCode`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Flask\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"flask\",\n    \"env\": {\n        \"FLASK_APP\": \"app.py\",\n        \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n        \"run\",\n        \"--no-debugger\",\n        \"--no-reload\"\n    ],\n    \"jinja\": true,\n    \"justMyCode\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Executing VS Code Commands from Command Line\nDESCRIPTION: This snippet demonstrates various ways to launch and use Visual Studio Code from the command line interface. It includes commands for opening directories, creating new windows, changing language settings, and more.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# open code with current directory\ncode .\n\n# open the current directory in the most recently used code window\ncode -r .\n\n# create a new window\ncode -n\n\n# change the language\ncode --locale=es\n\n# open diff editor\ncode --diff <file1> <file2>\n\n# open file at specific line and column <file:line[:character]>\ncode --goto package.json:10:5\n\n# see help options\ncode --help\n\n# disable all extensions\ncode --disable-extensions .\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Debugging with launch.json for Edge - JSON\nDESCRIPTION: This Visual Studio Code launch.json snippet enables debugging a local HTML file (client-side TypeScript output) in Microsoft Edge. It specifies the debugger type ('msedge'), local file URL, and sets the 'webRoot' to map workspace files. Prerequisites include VS Code, the Edge debugger extension (if not bundled), and the specified built HTML/JS files. Key parameters are 'type', 'url', and 'webRoot'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"version\": \"0.2.0\",\\n    \"configurations\": [\\n        {\\n            \"type\": \"msedge\",\\n            \"request\": \"launch\",\\n            \"name\": \"Launch Edge against localhost\",\\n            \"url\": \"file:///C:/Users/username/HelloWeb/helloweb.html\",\\n            \"webRoot\": \"${workspaceFolder}\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Completion Provider Configuration in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling code completion features, including completion item resolution and trigger characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"completionProvider\" : {\n            \"resolveProvider\": \"true\",\n            \"triggerCharacters\": [ '.' ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django or Flask Debugging with Auto-Launch Browser in VS Code - JSON\nDESCRIPTION: This snippet demonstrates how to configure VS Code's launch.json to debug a Flask app (or Django, with minor changes) while automatically opening the browser. It sets up environment variables for Flask, passes 'run' as argument, and enables autoStartBrowser. Dependencies include the Python Debugger extension (debugpy) and a properly set Flask app. Required keys include 'module', 'env', and 'args'; 'autoStartBrowser' determines if the browser should be launched. The configuration supports typical Flask debugging with live browser interaction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Flask\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"flask\",\n    \"env\": {\n        \"FLASK_APP\": \"hello_app.webapp\",\n        \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n        \"run\"\n    ],\n    \"jinja\": true,\n    \"autoStartBrowser\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Script for VS Code Extensions\nDESCRIPTION: This TypeScript code shows a sample test script for a VS Code extension. It demonstrates how to import the VS Code API, define a test suite, and write a simple test case using Mocha and assertions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as assert from 'assert';\n\n// You can import and use all API from the 'vscode' module\n// as well as import your extension to test it\nimport * as vscode from 'vscode';\n// import * as myExtension from '../extension';\n\nsuite('Extension Test Suite', () => {\n  suiteTeardown(() => {\n    vscode.window.showInformationMessage('All tests done!');\n  });\n\n  test('Sample test', () => {\n    assert.strictEqual(-1, [1, 2, 3].indexOf(5));\n    assert.strictEqual(-1, [1, 2, 3].indexOf(0));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using VS Code Commands for Test Operations\nDESCRIPTION: Lists various commands available in the VS Code Command Palette (Ctrl+Shift+P or Cmd+Shift+P) for managing Python tests. These commands allow users to configure tests, refresh the list of discovered tests, and run tests at different scopes (all, current file, specific test under cursor).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nPython: Configure Tests\nTest: Refresh Tests\nTest: Run All Tests\nTest: Run Tests in Current File\nTest: Run Test at Cursor\nTesting: Focus on Test Coverage View\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Docker Compose Files in devcontainer.json - JSON\nDESCRIPTION: This JSON configuration shows how to reference multiple Docker Compose files in a VS Code devcontainer setup. By using the 'dockerComposeFile' property, the base Compose file and the development override are both specified, allowing development-specific overrides to take effect. Key fields include project 'name', the order of Compose files (later files take precedence), the target 'service', the mount point for the workspace, and the action to stop all Compose services on shutdown. It is crucial to ensure file paths are correct relative to the devcontainer context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"[Optional] Your project name here\",\n\n    // The order of the files is important since later files override previous ones\n    \"dockerComposeFile\": [\n        \"../docker-compose.yml\",\n        \"docker-compose.extend.yml\"\n    ],\n\n    \"service\": \"your-service-name-here\",\n    \"workspaceFolder\": \"/workspace\",\n    \"shutdownAction\": \"stopCompose\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Hello World Program (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates basic syntax. It declares a variable `message` using `let`, explicitly types it as a `string`, assigns it the value \"Hello World\", and then logs this message to the console. This serves as the initial example for compilation and execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet message : string = \"Hello World\";\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unittest Arguments in VS Code Python\nDESCRIPTION: Specifies the default arguments passed to the `unittest` framework when running tests via the Python extension. The default value `[\"-v\", \"-s\", \".\", \"-p\", \"*test*.py\"]` enables verbose output (`-v`), specifies the start directory for discovery (`-s .`), and sets the pattern for test file discovery (`-p *test*.py`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\"-v\", \"-s\", \".\", \"-p\", \"*test*.py\"]\n```\n\n----------------------------------------\n\nTITLE: Example Reusable Copilot Instruction File (Markdown)\nDESCRIPTION: This Markdown snippet illustrates example content for a reusable external instruction file (e.g., `code-style.md`) that can be referenced from Copilot settings for various tasks like test generation. It provides general guidelines, such as adding comments and using React functional components, that Copilot should adhere to.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nAlways add code comments.\n\nAlways use React functional components.\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Resources with VS Code Window Activity API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `vscode.window.onDidChangeWindowState` event listener to manage a long-running process based on the VS Code window's active state. When the window becomes active (`state.active` is true) and the process isn't running, it starts the process. Conversely, when the window becomes inactive (`state.active` is false) and the process is running, it stops the process and clears the reference. This helps optimize resource usage by idling processes when the window is not in focus.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nvscode.window.onDidChangeWindowState(state => {\n  if (state.active && !longRunningProcess) {\n    longRunningProcess = startLongRunningProcess();\n  } else if (!state.active && longRunningProcess) {\n    longRunningProcess.end();\n    longRunningProcess = undefined;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Programming Language in VS Code Extension Manifest (JSON)\nDESCRIPTION: Details the structure for contributing a language definition, including mappings for file extensions, aliases, possible file content patterns, and the link to a language configuration file. Also allows specification of icons for dark and light themes. This enables accurate language support (like syntax highlight and configuration) and better editor integration for new or enriched languages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"languages\": [\n      {\n        \"id\": \"python\",\n        \"extensions\": [\".py\"],\n        \"aliases\": [\"Python\", \"py\"],\n        \"filenames\": [],\n        \"firstLine\": \"^#!/.*\\\\bpython[0-9.-]*\\\\b\",\n        \"configuration\": \"./language-configuration.json\",\n        \"icon\": {\n          \"light\": \"./icons/python-light.png\",\n          \"dark\": \"./icons/python-dark.png\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom When Clause Contexts in VS Code Extension\nDESCRIPTION: Examples of setting custom context values using the setContext command. Shows how to set both boolean and numeric values that can be used in when clauses to control UI element visibility and enablement.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.commands.executeCommand('setContext', 'myExtension.showMyCommand', true);\n\nvscode.commands.executeCommand('setContext', 'myExtension.numberOfCoolOpenThings', 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash History Persistence for Non-Root User in Dockerfile - Docker - bash\nDESCRIPTION: This Dockerfile snippet sets up persistent bash history for a non-root user. It accepts a USERNAME argument, creates the persistent directory and history file, adjusts ownership, and appends export statements to the user's .bashrc. This setup depends on a properly named non-root user and assumes /commandhistory will be mounted from a volume for persistence. Key values are PROMPT_COMMAND and HISTFILE environment variables, and replacing 'user-name-goes-here' with the actual username.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/persist-bash-history.md#2025-04-23_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nARG USERNAME=user-name-goes-here\n\nRUN SNIPPET=\"export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history\" \\\n    && mkdir /commandhistory \\\n    && touch /commandhistory/.bash_history \\\n    && chown -R $USERNAME /commandhistory \\\n    && echo \"$SNIPPET\" >> \"/home/$USERNAME/.bashrc\"\n```\n\n----------------------------------------\n\nTITLE: Replacing debugAdapterExecutable with provideDebugAdapter in VS Code API (TypeScript)\nDESCRIPTION: Introduces the proposed `provideDebugAdapter` method in the VS Code API, replacing `debugAdapterExecutable`. This method provides extensions with more context (session, folder, config) to dynamically create and configure debug adapters. It supports returning `DebugAdapterExecutable`, `DebugAdapterServer`, or `DebugAdapterImplementation` descriptors for different communication and execution models. This is proposed API and subject to change.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Definition available at: https://github.com/microsoft/vscode/blob/513025ed9e97c2fc04721d435bd88e5b4a2269ad/src/vs/vscode.proposed.d.ts#L536-L558\n// Represents the concept described in the text.\ninterface DebugConfigurationProvider {\n    /**\n     * Provides a debug adapter descriptor for the given debug session.\n     * Replaces the deprecated 'debugAdapterExecutable'.\n     * @param session The [DebugSession](#DebugSession) for which the debug adapter is required.\n     * @param folder The [WorkspaceFolder](#WorkspaceFolder) pertaining to the debug session.\n     * @param executable The executable information from the package.json.\n     * @param config The resolved debug configuration.\n     * @return A [ProviderResult](#ProviderResult) with a [DebugAdapterDescriptor](#DebugAdapterDescriptor) or undefined.\n     */\n    provideDebugAdapter(session: DebugSession, folder: WorkspaceFolder | undefined, executable: DebugAdapterExecutable | undefined, config: DebugConfiguration): ProviderResult<DebugAdapterDescriptor>;\n}\n\n// Related descriptor types mentioned:\n// DebugAdapterExecutable\n// DebugAdapterServer\n// DebugAdapterImplementation\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Python Debugging in VS Code\nDESCRIPTION: This snippet shows the standard configurations for running the active Python file in either the integrated or external terminal. It includes basic settings like 'name', 'type', 'request', 'program', and 'console'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: Current File (Integrated Terminal)\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        },\n        {\n            \"name\": \"Python Debugger: Current File (External Terminal)\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"externalTerminal\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening an Express Project in VS Code\nDESCRIPTION: Command to open the current directory (Express application) in Visual Studio Code from the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Document Settings Management in TypeScript Language Server\nDESCRIPTION: Retrieves document-specific settings from the language server connection. Handles both global and resource-specific configuration capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDocumentSettings(resource: string): Thenable<ExampleSettings> {\n  if (!hasConfigurationCapability) {\n    return Promise.resolve(globalSettings);\n  }\n  let result = documentSettings.get(resource);\n  if (!result) {\n    result = connection.workspace.getConfiguration({\n      scopeUri: resource,\n      section: 'languageServerExample'\n    });\n    documentSettings.set(resource, result);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Suggestions Provider in TypeScript\nDESCRIPTION: Demonstrates how to register an inline completion item provider that offers suggestions decoupled from the suggestion widget. The suggestions are rendered in gray and can be cycled through and accepted with the Tab key.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerInlineCompletionItemProvider({ pattern: '**' },\n    {\n        provideInlineCompletionItems: async (document, position) => {\n            return [{ text: \"< 2) {\\n\\treturn 1;\\n\\t}\" }];\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dev Container using devcontainer.json - JSON\nDESCRIPTION: This JSON configuration defines how the development container is built and the environment is set up for Visual Studio Code. It specifies the base image, VS Code-specific customizations (like extensions), forwarded ports, a post-create command (yarn install), and ports behavior. Requires Docker and the Dev Containers extension for VS Code. Inputs include the name, image, and settings; outputs are a ready-to-use development environment tailored for Node.js. Limitations: the configuration is specific to this sample and may require modification for other stacks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n//devcontainer.json\n{\n    \"name\": \"Node.js\",\n\n    // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n    \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:0-18\",\n\n    // Features to add to the dev container. More info: https://containers.dev/features.\n    // \"features\": {},\n\n    \"customizations\": {\n        \"vscode\": {\n            \"settings\": {},\n            \"extensions\": [\n                \"streetsidesoftware.code-spell-checker\"\n            ]\n        }\n    },\n\n    // \"forwardPorts\": [3000],\n\n    \"portsAttributes\": {\n        \"3000\": {\n            \"label\": \"Hello Remote World\",\n            \"onAutoForward\": \"notify\"\n        }\n    },\n\n    \"postCreateCommand\": \"yarn install\",\n\n    // \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Semantic Token Scope Definition\nDESCRIPTION: Example showing how to define custom TextMate scope mappings for semantic tokens in an extension's package.json. Demonstrates adding fallback scopes for custom token types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenScopes\": [\n      {\n        \"scopes\": {\n          \"templateType\": [ \"entity.name.type.template\" ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Extension from VSIX File\nDESCRIPTION: Commands to install a packaged VS Code extension using the command line for both regular VS Code and Insiders builds.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# if you use VS Code\ncode --install-extension my-extension-0.0.1.vsix\n\n# if you use VS Code Insiders\ncode-insiders --install-extension my-extension-0.0.1.vsix\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Java Source File\nDESCRIPTION: Example shows the basic structure of creating a Hello.java source file in VS Code. File should be created within a project folder with VS Code opened at the root level.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHello.java\n```\n\n----------------------------------------\n\nTITLE: Debugger Configuration Example\nDESCRIPTION: Complete example of a debugger contribution showing configuration attributes, initial configurations, snippets and supported languages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"debuggers\": [\n      {\n        \"type\": \"node\",\n        \"label\": \"Node Debug\",\n        \"program\": \"./out/node/nodeDebug.js\",\n        \"runtime\": \"node\",\n        \"languages\": [\"javascript\", \"typescript\", \"javascriptreact\", \"typescriptreact\"],\n        \"configurationAttributes\": {\n          \"launch\": {\n            \"required\": [\"program\"],\n            \"properties\": {\n              \"program\": {\n                \"type\": \"string\",\n                \"description\": \"The program to debug.\"\n              }\n            }\n          }\n        },\n        \"initialConfigurations\": [\n          {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}/app.js\"\n          }\n        ],\n        \"configurationSnippets\": [\n          {\n            \"label\": \"Node.js: Attach Configuration\",\n            \"description\": \"A new configuration for attaching to a running node program.\",\n            \"body\": {\n              \"type\": \"node\",\n              \"request\": \"attach\",\n              \"name\": \"${2:Attach to Port}\",\n              \"port\": 9229\n            }\n          }\n        ],\n        \"variables\": {\n          \"PickProcess\": \"extension.node-debug.pickNodeProcess\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GCC, Build Essentials, and GDB on Ubuntu via Bash\nDESCRIPTION: Illustrates how to install the GNU Compiler Collection (including g++), the build-essential package (development tools), and the GDB debugger using apt-get on Ubuntu. This command must be executed in a Linux bash shell within WSL and requires sudo privileges. After running this, the system will have all necessary tools to compile and debug C++ projects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential gdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommended VS Code Extensions in extensions.json (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an `extensions.json` file used to recommend extensions for a specific workspace, typically located in the `.vscode` folder. It contains a `recommendations` array listing extension identifiers in the format `publisherName.extensionName`. When a workspace with this file is opened, VS Code prompts the user to install these recommended extensions, facilitating consistent development environments across teams. This example recommends the ESLint and Prettier extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/extensions/extension-marketplace.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"recommendations\": [\n        \"dbaeumer.vscode-eslint\",\n        \"esbenp.prettier-vscode\"\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Python WASM Runtime in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet shows an example configuration within VS Code settings (`settings.json`) to specify a custom Python WebAssembly (WASM) runtime. The `python.wasm.runtime` setting is used to point the 'Experimental - Python for the Web' extension to a GitHub repository containing a custom CPython WASM build and potentially site-packages, allowing users to use their own tailored Python environment instead of the default one.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-web.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.wasm.runtime\": \"https://github.com/dbaeumer/python-3.11.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a WebviewPanelSerializer in TypeScript Extension Activation\nDESCRIPTION: This TypeScript code demonstrates registering a `WebviewPanelSerializer` within the extension's `activate` function using `vscode.window.registerWebviewPanelSerializer`. The `CatCodingSerializer` class implements the `deserializeWebviewPanel` method, which is responsible for restoring the webview's content (e.g., by setting `webviewPanel.webview.html`) when VS Code restarts, using the state previously persisted via `setState` within the webview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport function activate(context: vscode.ExtensionContext) {\n  // Normal setup...\n\n  // And make sure we register a serializer for our webview type\n  vscode.window.registerWebviewPanelSerializer('catCoding', new CatCodingSerializer());\n}\n\nclass CatCodingSerializer implements vscode.WebviewPanelSerializer {\n  async deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: any) {\n    // `state` is the state persisted using `setState` inside the webview\n    console.log(`Got state: ${state}`);\n\n    // Restore the content of our webview.\n    //\n    // Make sure we hold on to the `webviewPanel` passed in here and\n    // also restore any event listeners we need on it.\n    webviewPanel.webview.html = getWebviewContent();\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring onTaskType Activation Event for VS Code Extension\nDESCRIPTION: This snippet illustrates how to specify the onTaskType activation event in a VS Code extension's manifest. It's emitted when tasks of a certain type (in this case, 'npm') need to be listed or resolved.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onTaskType\":\"npm\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Dockerfile for Node.js development\nDESCRIPTION: This Dockerfile example shows how to create a custom container based on the Microsoft Node.js dev container image, updating packages and installing git.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_10\n\nLANGUAGE: docker\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/javascript-node:0-18\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get -y install git\n```\n\n----------------------------------------\n\nTITLE: Configuring Webview Activation Event in package.json for Serialization\nDESCRIPTION: This JSON snippet illustrates adding an `onWebviewPanel:catCoding` entry to the `activationEvents` array in an extension's `package.json`. This specific activation event ensures the extension is activated whenever VS Code needs to restore a webview panel with the viewType `catCoding`, enabling the registered serializer to function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"activationEvents\": [\n    ...,\n    \"onWebviewPanel:catCoding\"\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Activating an Anaconda Environment in Terminal - Shell\nDESCRIPTION: This shell command activates the previously created Anaconda environment called \\\"myenv\\\" in the terminal session, allowing subsequent commands to utilize the dependencies and settings of that isolated Python environment. The command is platform-agnostic for Anaconda users and is required before running any Python or notebook-related workflows that depend on libraries installed in \\\"myenv\\\". The main parameter is the environment name and, once activated, all further terminal operations use the selected environment context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda activate myenv\n```\n\n----------------------------------------\n\nTITLE: Algorithm for TypeScript-Based Private Property Mangling\nDESCRIPTION: This pseudo-code outlines the steps for a custom build process designed to safely mangle private and protected properties in a TypeScript codebase. It leverages TypeScript's compiler API (AST and rename functionality) to identify properties, compute unique new names respecting inheritance, apply renaming edits across the source code, and then compile the modified code, ensuring correctness.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/07/20/mangling-vscode.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nfor each private or protected property in codebase (found using TypeScript's AST):\n    if the property should be mangled:\n        Compute a new name by looking for an unused symbol name\n        Use TypeScript to generate a rename edit for all references to the property\n\nApply all rename edits to our typescript source\n\nCompile the new edited TypeScript sources with the mangled names\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Annotation Command with TextEditor\nDESCRIPTION: Updates the annotation command implementation to use TextEditor and retrieve visible code with line numbers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {\n\n  // Get the code with line numbers from the current editor\n  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Extension Recommendations in VS Code\nDESCRIPTION: This snippet demonstrates how to set up workspace-level extension recommendations in a .code-workspace file. It shows the structure with workspace folders and the extension recommendations array containing extension identifiers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"folders\": [\n        {\n            \"path\": \"vscode\"\n        },\n        {\n            \"path\": \"vscode-docs\"\n        }\n    ],\n    \"extensions\": {\n        \"recommendations\": [\n            \"eg2.tslint\",\n            \"dbaeumer.vscode-eslint\",\n            \"esbenp.prettier-vscode\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Project-level URL Configuration to Integrate App Routing - Python\nDESCRIPTION: Edits the main project URL configuration (web_project/urls.py) to include the hello app's URLs and the default admin route. The code imports include and path utilities, and specifies URL patterns to forward root requests to hello/urls.py with include, and to map '/admin/' to the Django admin site. Dependencies are Django's URL routing and admin modules. Comments may be kept for clarity.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"\", include(\"hello.urls\")),\n    path('admin/', admin.site.urls)\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a DefinitionProvider with DefinitionLink Metadata - VS Code API - TypeScript\nDESCRIPTION: This snippet provides a full implementation example for a VS Code extension that registers a DefinitionProvider for the markdown language, returning DefinitionLink objects. It detects word patterns matching '<digits>' and creates navigation targets to corresponding lines within the document. Dependencies include the 'vscode' module and a valid extension activation context. The key parameters are the document, position, and cancellation token. Inputs are the current position in a markdown file; outputs are DefinitionLink objects that VS Code uses to navigate to corresponding lines. Must be used as part of a VS Code extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    vscode.languages.registerDefinitionProvider('markdown', new LineLinkDefinitionProvider());\n}\n\nexport class LineLinkDefinitionProvider implements vscode.DefinitionProvider {\n    async provideDefinition(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken\n    ): Promise<vscode.DefinitionLink[]> {\n        const wordRange = document.getWordRangeAtPosition(position, /<\\d+>/);\n        if (wordRange.isEmpty) {\n            return [];\n        }\n\n        const targetLine = +document.getText(wordRange).slice(1, -1);\n        return [{\n            // Definition location\n            targetRange: new vscode.Range(targetLine - 1, 0, targetLine, 0),\n            targetUri: document.uri,\n\n            // Range of the defining symbol\n            originSelectionRange: new vscode.Range(\n                wordRange.start.translate({ characterDelta: 1 }),\n                wordRange.end.translate({ characterDelta: -1 })),\n        }];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Icons in VS Code Extension Manifest (JSON)\nDESCRIPTION: This snippet details how to define custom icon IDs and their default icons in a VS Code extension's package.json. Each icon has an ID, a description, and a mapping to a font glyph via a provided font file and character. These icons can then be referenced in code via ThemeIcon objects or Markdown strings and are reusable by other extensions. The fontPath must point to a valid WOFF file included in the extension, and fontCharacter must map to a glyph in the font.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"icons\": {\n      \"distro-ubuntu\": {\n        \"description\": \"Ubuntu icon\",\n        \"default\": {\n          \"fontPath\": \"./distroicons.woff\",\n          \"fontCharacter\": \"\\\\E001\"\n        }\n      },\n      \"distro-fedora\": {\n        \"description\": \"Ubuntu icon\",\n        \"default\": {\n          \"fontPath\": \"./distroicons.woff\",\n          \"fontCharacter\": \"\\\\E002\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model in Python\nDESCRIPTION: Defines a Django model named `LogMessage` in the `models.py` file. This model represents a log entry with a `message` (CharField) and a `log_date` (DateTimeField). It imports `models` from `django.db` and `timezone` from `django.utils`. The `__str__` method provides a human-readable string representation of the model instance, formatting the date.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.utils import timezone\n\nclass LogMessage(models.Model):\n    message = models.CharField(max_length=300)\n    log_date = models.DateTimeField(\"date logged\")\n\n    def __str__(self):\n        \"\"\"Returns a string representation of a message.\"\"\"\n        date = timezone.localtime(self.log_date)\n        return f\"'{self.message}' logged on {date.strftime('%A, %d %B, %Y at %X')}\"\n```\n\n----------------------------------------\n\nTITLE: Adding References in VS Code Chat\nDESCRIPTION: Demonstrates how to add references to files, file ranges, and external URLs in chat responses.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileUri: vscode.Uri = vscode.Uri.file('/path/to/workspace/app.js');  // On Windows, the path should be in the format of 'c:\\\\path\\\\to\\\\workspace\\\\app.js'\nconst fileRange: vscode.Range = new vscode.Range(0, 0, 3, 0);\nconst externalUri: vscode.Uri = vscode.Uri.parse('https://code.visualstudio.com');\n\n// Add a reference to an entire file\nstream.reference(fileUri);\n\n// Add a reference to a specific selection within a file\nstream.reference(new vscode.Location(fileUri, fileRange));\n\n// Add a reference to an external URL\nstream.reference(externalUri);\n```\n\n----------------------------------------\n\nTITLE: Persisting Webview State using getState and setState in JavaScript\nDESCRIPTION: This JavaScript code runs inside a VS Code webview. It uses the `acquireVsCodeApi()` function to get access to the VS Code API. It retrieves previously saved state using `vscode.getState()`, updates a counter element, and periodically saves the updated count using `vscode.setState({ count })`, allowing the state (a JSON serializable object) to persist across webview visibility changes but not across panel destruction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Inside a webview script\nconst vscode = acquireVsCodeApi();\n\nconst counter = document.getElementById('lines-of-code-counter');\n\n// Check if we have an old state to restore from\nconst previousState = vscode.getState();\nlet count = previousState ? previousState.count : 0;\ncounter.textContent = count;\n\nsetInterval(() => {\n  counter.textContent = count++;\n  // Update the saved state\n  vscode.setState({ count });\n}, 100);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Participant in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create a chat participant in the extension's activate function. It uses the vscode.chat.createChatParticipant API and sets an icon for the participant.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n\n    // Register the chat participant and its request handler\n    const cat = vscode.chat.createChatParticipant('chat-sample.cat', handler);\n\n    // Optionally, set some properties for @cat\n    cat.iconPath = vscode.Uri.joinPath(context.extensionUri, 'cat.jpeg');\n\n    // Add the chat request handler here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comment Editing and Deletion Methods to DocumentCommentProvider (TypeScript)\nDESCRIPTION: Introduces new proposed methods to the `DocumentCommentProvider` API in VS Code, enabling extensions to support editing and deleting comments within the editor. Corresponding actions appear in the UI if the comment flags support these operations and the provider implements the methods.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Definitions available at: https://github.com/microsoft/vscode/blob/513025ed9e97c2fc04721d435bd88e5b4a2269ad/src/vs/vscode.proposed.d.ts#L779-L787\n// Represents the concept described in the text.\ninterface DocumentCommentProvider {\n    // ... existing methods ...\n\n    /**\n     * Edit a comment. The edited comment replaces the original comment.\n     * @param document The document the comment is in.\n     * @param comment The comment to edit.\n     * @param text The new content of the comment.\n     */\n    editComment?(document: TextDocument, comment: Comment, text: string): ProviderResult<void>;\n\n    /**\n     * Delete a comment.\n     * @param document The document the comment is in.\n     * @param comment The comment to delete.\n     */\n    deleteComment?(document: TextDocument, comment: Comment): ProviderResult<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Get Session Presentation Options Interface\nDESCRIPTION: Type definition for AuthenticationGetSessionPresentationOptions which provides optional detail text to display when requesting authentication from users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Optional options to be used when calling {@link authentication.getSession} with interactive options `forceNewSession` & `createIfNone`.\n */\nexport interface AuthenticationGetSessionPresentationOptions {\n\t/**\n\t * An optional message that will be displayed to the user when we ask to re-authenticate. Providing additional context\n\t * as to why you are asking a user to re-authenticate can help increase the odds that they will accept.\n\t */\n\tdetail?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VS Code tasks.json Schema Interfaces in TypeScript\nDESCRIPTION: This code snippet provides the TypeScript interface definitions for VS Code's `tasks.json` file (version 2.0.0). It includes interfaces like `TaskConfiguration` for the top-level structure, `BaseTaskConfiguration` for common properties, `TaskDescription` for individual tasks, `CommandOptions` for execution settings, `PresentationOptions` for UI control, and `ProblemMatcher` for parsing output. These interfaces guide IntelliSense and validation within VS Code when editing `tasks.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/tasks-appendix.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaskConfiguration extends BaseTaskConfiguration {\n\n    /**\n     * The configuration's version number\n     */\n    version: \"2.0.0\";\n\n    /**\n     * Windows specific task configuration\n     */\n    windows?: BaseTaskConfiguration;\n\n    /**\n     * macOS specific task configuration\n     */\n    osx?: BaseTaskConfiguration;\n\n    /**\n     * Linux specific task configuration\n     */\n    linux?: BaseTaskConfiguration;\n}\n\ninterface BaseTaskConfiguration {\n\n    /**\n     * The type of a custom task. Tasks of type \"shell\" are executed\n     * inside a shell (e.g. bash, cmd, powershell, ...)\n     */\n    type: \"shell\" | \"process\";\n\n    /**\n     * The command to be executed. Can be an external program or a shell\n     * command.\n     */\n    command: string;\n\n    /**\n     * Specifies whether a global command is a background task.\n     */\n    isBackground?: boolean;\n\n    /**\n     * The command options used when the command is executed. Can be omitted.\n     */\n    options?: CommandOptions;\n\n    /**\n     * The arguments passed to the command. Can be omitted.\n     */\n    args?: string[];\n\n    /**\n     * The presentation options.\n     */\n    presentation?: PresentationOptions;\n\n    /**\n     * The problem matcher to be used if a global command is executed (e.g. no tasks\n     * are defined). A tasks.json file can either contain a global problemMatcher\n     * property or a tasks property but not both.\n     */\n    problemMatcher?: string | ProblemMatcher | (string | ProblemMatcher)[];\n\n    /**\n     * The configuration of the available tasks. A tasks.json file can either\n     * contain a global problemMatcher property or a tasks property but not both.\n     */\n    tasks?: TaskDescription[];\n}\n\n\n/**\n * Options to be passed to the external program or shell\n */\nexport interface CommandOptions {\n\n    /**\n     * The current working directory of the executed program or shell.\n     * If omitted the current workspace's root is used.\n     */\n    cwd?: string;\n\n    /**\n     * The environment of the executed program or shell. If omitted\n     * the parent process' environment is used.\n     */\n    env?: { [key:string]:string; };\n\n    /**\n      * Configuration of the shell when task type is `shell`\n      */\n     shell: {\n\n        /**\n        * The shell to use.\n        */\n        executable: string;\n\n        /**\n        * The arguments to be passed to the shell executable to run in command mode\n        * (e.g ['-c'] for bash or ['/S', '/C'] for cmd.exe).\n        */\n        args?: string[];\n    }\n}\n\n/**\n * The description of a task.\n */\ninterface TaskDescription {\n\n    /**\n     * The task's name\n     */\n    label: string;\n\n    /**\n     * The type of a custom task. Tasks of type \"shell\" are executed\n     * inside a shell (e.g. bash, cmd, powershell, ...)\n     */\n    type: \"shell\" | \"process\";\n\n    /**\n     * The command to execute. If the type is \"shell\" it should be the full\n     * command line including any additional arguments passed to the command.\n     */\n    command: string;\n\n    /**\n     * Whether the executed command is kept alive and runs in the background.\n     */\n    isBackground?: boolean;\n\n    /**\n     * Additional arguments passed to the command. Should be used if type\n     * is \"process\".\n     */\n    args?: string[];\n\n    /**\n     * Defines the group to which this task belongs. Also supports to mark\n     * a task as the default task in a group.\n     */\n    group?: \"build\" | \"test\" | { kind: \"build\" | \"test\"; isDefault: boolean };\n\n    /**\n     * The presentation options.\n     */\n    presentation?: PresentationOptions;\n\n    /**\n     * The problem matcher(s) to use to capture problems in the tasks\n     * output.\n     */\n    problemMatcher?: string | ProblemMatcher | (string | ProblemMatcher)[];\n\n    /**\n     * Defines when and how a task is run.\n     */\n    runOptions?: RunOptions;\n}\n\ninterface PresentationOptions {\n\n    /**\n     * Controls whether the task output is reveal in the user interface.\n     * Defaults to `always`.\n     */\n    reveal?: \"never\" | \"silent\" | \"always\";\n\n    /**\n     * Controls whether the command associated with the task is echoed\n     * in the user interface. Defaults to `true`.\n     */\n    echo?: boolean;\n\n    /**\n     * Controls whether the panel showing the task output is taking focus.\n     * Defaults to `false`.\n     */\n    focus?: boolean;\n\n    /**\n     * Controls if the task panel is used for this task only (dedicated),\n     * shared between tasks (shared) or if a new panel is created on\n     * every task execution (new). Defaults to `shared`.\n     */\n    panel?: \"shared\" | \"dedicated\" | \"new\";\n\n    /**\n     * Controls whether to show the `Terminal will be reused by tasks,\n     * press any key to close it` message.\n     */\n    showReuseMessage?: boolean;\n\n    /**\n     * Controls whether the terminal is cleared before this task is run.\n     * Defaults to `false`.\n     */\n    clear?: boolean;\n\n    /**\n     * Controls whether the task is executed in a specific terminal\n     * group using split panes. Tasks in the same group (specified by a string value)\n     * will use split terminals to present instead of a new terminal panel.\n     */\n    group?: string;\n}\n\n/**\n * A description of a problem matcher that detects problems\n * in build output.\n */\ninterface ProblemMatcher {\n\n    /**\n     * The name of a base problem matcher to use. If specified the\n     * base problem matcher will be used as a template and properties\n     * specified here will replace properties of the base problem\n     * matcher\n     */\n    base?: string;\n\n    /**\n     * The owner of the produced VS Code problem. This is typically\n     * the identifier of a VS Code language service if the problems are\n     * to be merged with the one produced by the language service\n     * or 'external'. Defaults to 'external' if omitted.\n     */\n    owner?: string;\n\n    /**\n     * A human-readable string describing the source of this problem.\n     * E.g. 'typescript' or 'super lint'.\n     */\n    source?: string;\n\n    /**\n     * The severity of the VS Code problem produced by this problem matcher.\n     *\n     * Valid values are:\n     *   \"error\": to produce errors.\n     *   \"warning\": to produce warnings.\n     *   \"info\": to produce infos.\n     *\n     * The value is used if a pattern doesn't specify a severity match group.\n     * Defaults to \"error\" if omitted.\n     */\n    severity?: string;\n\n    /**\n     * Defines how filename reported in a problem pattern\n     * should be read. Valid values are:\n     *  - \"absolute\": the filename is always treated absolute.\n     *  - \"relative\": the filename is always treated relative to\n     *    the current working directory. This is the default.\n     *  - [\"relative\", \"path value\"]: the filename is always\n     *    treated relative to the given path value.\n     *  - \"autodetect\": the filename is treated relative to\n     *    the current workspace directory, and if the file\n     *    does not exist, it is treated as absolute.\n     *  - [\"autodetect\", \"path value\"]: the filename is treated\n     *    relative to the given path value, and if it does not\n     *    exist, it is treated as absolute.\n     *  - \"search\": performs a deep (and, possibly, heavy) file system\n     *    search within the directories.\n     *  - [\"search\", {include: [\"${workspaceFolder}\"]}]: performs\n     *    a deep search among the directories given in the \"include\" array.\n     *  - [\"search\", {include: [\"${workspaceFolder}\"], exclude: []}]:\n     *    performs a deep search among the directories given in the \"include\"\n     *    array, excluding those named in the \"exclude\" array.\n     */\n    fileLocation?: string | string[] | [\"search\", {include?: string[]; exclude?: string[]}];\n\n    /**\n     * The name of a predefined problem pattern, the inline definition\n     * of a problem pattern or an array of problem patterns to match\n     * problems spread over multiple lines.\n     */\n    pattern?: string | ProblemPattern | ProblemPattern[];\n\n    /**\n     * Additional information used to detect when a background task (like a watching task in Gulp)\n     * is active.\n     */\n    background?: BackgroundMatcher;\n}\n\n/**\n * A description to track the start and end of a background task.\n */\ninterface BackgroundMatcher {\n\n    /**\n     * If set to true the watcher is in active mode when the task\n     * starts. This is equals of issuing a line that matches the\n     * beginPattern.\n     */\n    activeOnStart?: boolean;\n\n    /**\n     * If matched in the output the start of a background task is signaled.\n     */\n    beginsPattern?: string;\n\n    /**\n     * If matched in the output the end of a background task is signaled.\n     */\n    endsPattern?: string;\n}\n\ninterface ProblemPattern {\n\n    /**\n     * The regular expression to find a problem in the console output of an\n     * executed task.\n     */\n    regexp: string;\n\n    /**\n     * Whether the pattern matches a problem for the whole file or for a location\n     * inside a file.\n     *\n     * Defaults to \"location\".\n     */\n    kind?: \"file\" | \"location\";\n\n    /**\n     * The match group index of the filename.\n     */\n    file: number;\n\n    /**\n     * The match group index of the problem's location. Valid location\n     * patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn).\n     * If omitted the line and column properties are used.\n     */\n    location?: number;\n\n    /**\n     * The match group index of the problem's line in the source file.\n     * Can only be omitted if location is specified.\n     */\n    line?: number;\n\n    /**\n     * The match group index of the problem's column in the source file.\n     */\n    column?: number;\n\n\n```\n\n----------------------------------------\n\nTITLE: Generating Default ESLint Configuration for React (JavaScript)\nDESCRIPTION: This is an example `.eslintrc.js` file generated by the ESLint extension's setup command in VS Code. It configures ESLint for a browser environment supporting ES2020 and React (JSX). It extends recommended ESLint and React rules, sets parser options for ECMAScript modules and JSX features, and specifies the 'react' plugin. The initial 'rules' section is empty, ready for custom rule definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    \"env\": {\n        \"browser\": true,\n        \"es2020\": true\n    },\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\"\n    ],\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        },\n        \"ecmaVersion\": 11,\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Compiler Query in c_cpp_properties.json (JSON)\nDESCRIPTION: Demonstrates setting the `compilerPath` property to an empty string within `c_cpp_properties.json`. This prevents the C/C++ extension from querying a specific compiler for system includes and defines, useful if the query causes issues or if no compiler query is desired.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"compilerPath\": \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring C/C++ Extension Settings with c_cpp_properties.json in VS Code\nDESCRIPTION: This JSON snippet defines C/C++ configuration settings for VS Code. It specifies include paths, compiler path, C and C++ standards, and IntelliSense mode for Linux environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [],\n            \"compilerPath\": \"/usr/bin/gcc\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"clang-x64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Source Control Model with Resource Groups and States\nDESCRIPTION: This TypeScript code demonstrates how to create a Source Control model for Git with two resource groups (Index and Working Tree) and their respective resource states. It shows the core structure for implementing an SCM provider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createResourceUri(relativePath: string): vscode.Uri {\n  const absolutePath = path.join(vscode.workspace.rootPath, relativePath);\n  return vscode.Uri.file(absolutePath);\n}\n\nconst gitSCM = vscode.scm.createSourceControl('git', 'Git');\n\nconst index = gitSCM.createResourceGroup('index', 'Index');\nindex.resourceStates = [\n  { resourceUri: createResourceUri('README.md') },\n  { resourceUri: createResourceUri('src/test/api.ts') }\n];\n\nconst workingTree = gitSCM.createResourceGroup('workingTree', 'Changes');\nworkingTree.resourceStates = [\n  { resourceUri: createResourceUri('.travis.yml') },\n  { resourceUri: createResourceUri('README.md') }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Project Directory in Bash\nDESCRIPTION: Commands to create a new directory for a Node.js project, navigate into it, and open it in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello\ncd hello\ncode .\n```\n\n----------------------------------------\n\nTITLE: Detecting Window Activity State Changes using VS Code API (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates the usage of the finalized VS Code Window Activity API. It registers a listener using `vscode.window.onDidChangeWindowState` that triggers whenever the active state of the VS Code window changes (e.g., user interacts with it or switches away). The callback function receives an event object `e` containing an `active` boolean property, indicating whether the window is currently considered active.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.window.onDidChangeWindowState(e => console.log('Is the user active?', e.active))\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Bash for VS Code Shell Integration (Manual)\nDESCRIPTION: This script manually enables VS Code shell integration specifically for Git Bash on Windows. It should be added to the user's '~/.bashrc' file within the Git Bash environment. It functions identically to the standard Bash setup, checking the `$TERM_PROGRAM` variable and sourcing the Bash integration script located via `code --locate-shell-integration-path bash`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Semantic Token Colors Per-Theme in VS Code Settings (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to override semantic token colors on a per-theme basis within VS Code's `settings.json`. It targets the `[Visual Studio Dark]` theme specifically, applying a rule within `editor.semanticTokenColorCustomizations` to change the `templateType` semantic token's foreground color to red (`#ff0000`) and its font style to italic, bold, and underlined only when that theme is active. This allows for fine-grained control over syntax highlighting depending on the selected theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/colorization-cpp.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.semanticTokenColorCustomizations\": {\n        \"[Visual Studio Dark]\": {\n            \"rules\": {\n                \"templateType\": {\n                    \"foreground\": \"#ff0000\",\n                    \"fontStyle\": \"italic bold underline\"\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Python Formatter in VS Code Settings (JSON)\nDESCRIPTION: Demonstrates how to set Black Formatter as the default formatter for Python files in Visual Studio Code by updating the User settings.json. The \"[python]\" scope applies the specified formatter only to Python files by setting the editor.defaultFormatter property to the extension's identifier. No additional dependencies are required except the installation of the corresponding VS Code extension. This configuration ensures that all formatting actions use Black Formatter for Python files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/formatting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"[python]\": {\\n    \"editor.defaultFormatter\": \"ms-python.black-formatter\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Syntax Highlighting with Gopls in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet configures the Go language server (gopls) to enable semantic syntax highlighting in VS Code by setting 'ui.semanticTokens' to true. Requires the gopls server and the Go extension to be installed. This setting enhances syntax highlighting beyond the default by leveraging semantic information from the language server. Place this snippet in your VS Code settings.json file to activate enhanced highlighting features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/go.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gopls\": { \"ui.semanticTokens\": true }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Provider Registration\nDESCRIPTION: TypeScript code showing how to register a task provider for Rake tasks with provideTasks and resolveTask implementations\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/task-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nlet rakePromise: Thenable<vscode.Task[]> | undefined = undefined;\nconst taskProvider = vscode.tasks.registerTaskProvider('rake', {\n  provideTasks: () => {\n    if (!rakePromise) {\n      rakePromise = getRakeTasks();\n    }\n    return rakePromise;\n  },\n  resolveTask(_task: vscode.Task): vscode.Task | undefined {\n\t\tconst task = _task.definition.task;\n\t\tif (task) {\n\t\t\tconst definition: RakeTaskDefinition = <any>_task.definition;\n\t\t\treturn new vscode.Task(definition, _task.scope ?? vscode.TaskScope.Workspace, definition.task, 'rake', new vscode.ShellExecution(`rake ${definition.task}`));\n\t\t}\n\t\treturn undefined;  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Task Dependencies in VS Code\nDESCRIPTION: This snippet demonstrates how to set up sequential task dependencies in VS Code. It shows how to use the 'dependsOrder' property to specify the order of task execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"One\",\n    \"type\": \"shell\",\n    \"command\": \"echo Hello \",\n    \"dependsOrder\": \"sequence\",\n    \"dependsOn\":[\n        \"Two\",\n        \"Three\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Variables in Python Debug Console - Python\nDESCRIPTION: This snippet demonstrates how to evaluate variables and expressions in Python's debug console within VS Code while using the Python debugger. It requires the Python extension and debugpy, and is dependent on breakpoints being set during a debug session. The variable 'msg' is inspected, along with its capitalize() and split() methods. Output is shown in the debug console. No input parameters are required and output is printed interactively in the console.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmsg\nmsg.capitalize()\nmsg.split()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Flask Route and View Function in Python\nDESCRIPTION: Uses the `@app.route(\"/\")` decorator to associate the URL root path (\"/\") with the `home()` function that follows. When a user accesses the root URL of the web server, Flask executes the `home()` function, which returns the simple string \"Hello, Flask!\".\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef home():\n    return \"Hello, Flask!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Signature Help Provider in TypeScript\nDESCRIPTION: Direct implementation of a signature help provider in TypeScript for displaying function and method signatures.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoSignatureHelpProvider implements SignatureHelpProvider {\n    public provideSignatureHelp(\n        document: TextDocument, position: Position, token: CancellationToken):\n        Promise<SignatureHelp> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerSignatureHelpProvider(\n            GO_MODE, new GoSignatureHelpProvider(), '(', ','));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Paths for IntelliSense in Windows\nDESCRIPTION: JSON configuration for adding custom package locations to enable IntelliSense for non-standard installations like Google App Engine on Windows. These paths are added to the python.analysis.extraPaths setting in settings.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/editing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"python.analysis.extraPaths\": [\n    \"C:/Program Files (x86)/Google/google_appengine\",\n    \"C:/Program Files (x86)/Google/google_appengine/lib/flask-0.12\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Just My Code in Debugger Configuration (JSON)\nDESCRIPTION: This snippet sets the 'justMyCode' property to false in a debug configuration. Disabling Just My Code allows you to debug external or third-party libraries that may lack program symbols or are optimized. This option is useful when you need a full view of the caller stack or are debugging into framework or package code. Boolean field; default is usually true for user-code focused debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"justMyCode\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Location Preferences in VS Code Settings\nDESCRIPTION: JSON configuration to force specific VS Code extensions to run as either UI or workspace extensions using the remote.extensionKind setting. This allows testing extension behavior without modifying package.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote.extensionKind\": {\n      \"ms-azuretools.vscode-cosmosdb\": [\"ui\"],\n      \"ms-vscode-remote.remote-ssh-edit\": [\"workspace\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Issue Reporter Data Providers in TypeScript\nDESCRIPTION: This proposed VS Code API allows extension authors to customize the Issue Reporter. The `IssueUriRequestHandler` interface enables directing users to an external URI (like GitHub) for issue reporting, while `IssueDataProvider` allows providing custom data strings and issue description templates. Extensions can register these handlers using `env.registerIssueUriRequestHandler` and `env.registerIssueDataProvider`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n        export interface IssueUriRequestHandler {\n    // Handle the request by the issue reporter for the Uri you want to direct the user to.\n    handleIssueUrlRequest(): ProviderResult<Uri>;\n  }\n\n        export interface IssueDataProvider {\n    // Provide the data to be used in the issue reporter.\n    provideIssueData(token: CancellationToken): ProviderResult<string>;\n\n    // Provide the template to be used in the description of issue reporter.\n    provideIssueTemplate(token: CancellationToken): ProviderResult<string>;\n  }\n\n        export namespace env {\n    export function registerIssueUriRequestHandler(handler: IssueUriRequestHandler): Disposable;\n    export function registerIssueDataProvider(provider: IssueDataProvider): Disposable;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Command for Virtual Document Manipulation\nDESCRIPTION: This snippet registers a command that manipulates the content of a virtual document by transforming its URI path. It includes checks to ensure it only operates on documents with the correct scheme and creates a new URI with the modified path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// register a command that updates the current cowsay\nsubscriptions.push(\n  vscode.commands.registerCommand('cowsay.backwards', async () => {\n    if (!vscode.window.activeTextEditor) {\n      return; // no editor\n    }\n    let { document } = vscode.window.activeTextEditor;\n    if (document.uri.scheme !== myScheme) {\n      return; // not my scheme\n    }\n    // get path-components, reverse it, and create a new uri\n    let say = document.uri.path;\n    let newSay = say\n      .split('')\n      .reverse()\n      .join('');\n    let newUri = document.uri.with({ path: newSay });\n    await vscode.window.showTextDocument(newUri, { preview: false });\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring an NPM Lint Task with ESLint Problem Matcher in tasks.json - JSON\nDESCRIPTION: This tasks.json example shows how to set up an npm script task for linting code, specifying that problem output should be interpreted using the ESLint 'stylish' formatter. It requires a package.json with a 'lint' script and ESLint installed. When executed, the task runs 'npm run lint', and problems are displayed in VS Code's Problems panel.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\\n    // for the documentation about the tasks.json format\\n    \"version\": \"2.0.0\",\\n    \"tasks\": [\\n        {\\n            \"type\": \"npm\",\\n            \"script\": \"lint\",\\n            \"problemMatcher\": [\\n                \"$eslint-stylish\"\\n            ]\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Task in tasks.json for VS Code\nDESCRIPTION: This snippet demonstrates how to create a custom task for running tests in VS Code. It includes platform-specific commands and defines task properties such as label, type, command, group, and presentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run tests\",\n            \"type\": \"shell\",\n            \"command\": \"./scripts/test.sh\",\n            \"windows\": {\n                \"command\": \".\\\\scripts\\\\test.cmd\"\n            },\n            \"group\": \"test\",\n            \"presentation\": {\n                \"reveal\": \"always\",\n                \"panel\": \"new\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Symbol Search Paths for VS Debugger in launch.json (JSON)\nDESCRIPTION: This JSON snippet illustrates how to configure the `symbolSearchPath` property in `launch.json` for the Visual Studio Windows Debugger. It accepts a semicolon-separated list of directories where the debugger should look for symbol files (typically .pdb files). This helps the debugger locate necessary symbols when they are not in default locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-debug.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"symbolSearchPath\": \"C:\\\\path\\\\to\\\\symbols;C:\\\\another\\\\path\\\\to\\\\symbols\"\n```\n\n----------------------------------------\n\nTITLE: Customizing VS Code Extensions and Ports in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` configuration uses the `mcr.microsoft.com/devcontainers/typescript-node` image and adds customizations. It automatically installs the 'Code Spell Checker' VS Code extension within the container using the `customizations.vscode.extensions` property and forwards port 3000 from the container to the local machine using the `forwardPorts` property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/typescript-node\",\n\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"streetsidesoftware.code-spell-checker\"\n            ]\n        }\n    },\n    \"forwardPorts\": [ 3000 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Format on Save for Python in VS Code Settings (JSON)\nDESCRIPTION: Demonstrates how to automatically format Python files upon saving by setting editor.formatOnSave to true within the [python] scope of settings.json. With this setting, every save action will trigger the default Python formatter as previously configured. This requires only that a valid formatter extension be installed and no additional dependencies are needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/formatting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"[python]\": {\\n    \"editor.formatOnSave\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Perplexity MCP Server in VS Code Workspace Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a specific MCP server (Perplexity Ask) within a VS Code workspace using the `.vscode/mcp.json` file. It defines an input variable (`perplexity-key`) to securely prompt the user for an API key, which is then passed as an environment variable (`PERPLEXITY_API_KEY`) to the server process started via `npx`. The server connection type is `stdio`. This configuration is specific to the workspace and can be shared with team members. Requires VS Code and potentially `npx` and the specified server package.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/mcp-servers.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // 💡 Inputs are prompted on first server start, then stored securely by VS Code.\n    \"inputs\": [\n        {\n            \"type\": \"promptString\",\n            \"id\": \"perplexity-key\",\n            \"description\": \"Perplexity API Key\",\n            \"password\": true\n        }\n    ],\n    \"servers\": {\n        // https://github.com/ppl-ai/modelcontextprotocol/\n        \"Perplexity\": {\n            \"type\": \"stdio\",\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@modelcontextprotocol/server-perplexity-ask\"\n            ],\n            \"env\": {\n                \"PERPLEXITY_API_KEY\": \"${input:perplexity-key}\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'esm' Loader for ES Modules in Node.js Debugger (launch.json)\nDESCRIPTION: JSON configuration snippet for `launch.json` demonstrating how to use the third-party 'esm' ES module loader by passing `-r esm` via the `runtimeArgs` attribute. The arguments must be provided as separate strings within the array, i.e., `[\"-r\", \"esm\"]`, for correct parsing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"runtimeArgs\": [\"-r\", \"esm\"]\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration for Auto-Detected Gulp Task (JSON)\nDESCRIPTION: This `tasks.json` snippet shows the basic configuration generated by VS Code when customizing an auto-detected Gulp task ('default'). It specifies the task 'type' as 'gulp', identifies the specific 'task' named 'default', and includes an empty 'problemMatcher' array, which can be populated to process task output for errors or warnings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"gulp\",\n            \"task\": \"default\",\n            \"problemMatcher\": []\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Open in Dev Containers Badge to a Repository - Markdown\nDESCRIPTION: This Markdown snippet provides the syntax for adding an 'Open in Dev Containers' badge to a repository README. The badge leverages shields.io for the image and links to a special VS Code URL that, when clicked, opens the project in a dev container environment. This enables easy, one-click onboarding for collaborators and contributors with automatic extension installation and container setup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Directory in tsconfig.json (JSON)\nDESCRIPTION: Demonstrates how to configure the `outDir` compiler option within the `compilerOptions` section of a `tsconfig.json` file. This setting instructs the TypeScript compiler (`tsc`) to place the generated JavaScript output files into the specified directory (in this case, 'out') relative to the project root, helping to keep source and compiled files separate.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"CommonJS\",\n        \"outDir\": \"out\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Action Keyboard Shortcuts in VS Code\nDESCRIPTION: JSON configuration for adding custom keyboard shortcuts to navigate Code Actions menu. Defines shortcuts for focusing previous and next Code Actions when the menu is visible.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"ctrl+k\",\n    \"when\": \"codeActionMenuVisible\",\n    \"command\": \"focusPreviousCodeAction\"\n  },\n  {\n    \"key\": \"ctrl+j\",\n    \"when\": \"codeActionMenuVisible\",\n    \"command\": \"focusNextCodeAction\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring devcontainer.json for Docker Compose Integration\nDESCRIPTION: A basic devcontainer.json configuration that references an existing docker-compose.yml file and specifies which service to connect to. It includes settings for the workspace folder path and shutdown behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"[Optional] Your project name here\",\n    \"dockerComposeFile\": \"../docker-compose.yml\",\n    \"service\": \"the-name-of-the-service-you-want-to-work-with-in-vscode\",\n    \"workspaceFolder\": \"/default/workspace/path/in/container/to/open\",\n    \"shutdownAction\": \"stopCompose\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Keyboard Shortcut for Extract Function Refactoring in VS Code JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to define a custom keyboard shortcut (`ctrl+shift+r ctrl+e`) in Visual Studio Code's keybindings settings. It maps the shortcut to the `editor.action.codeAction` command, specifically targeting Code Actions of the kind `refactor.extract.function`. This allows users to quickly trigger the 'Extract Function' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/refactoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.function\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Call Chain Formatting in C#\nDESCRIPTION: Demonstrates how to format long method call chains by wrapping and aligning them for better readability. This refactoring helps in organizing complex method chains in a more structured and readable format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/refactoring.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Before wrapping\nvar result = myObject.Method1().Method2().Method3().Method4();\n\n// After wrapping and aligning\nvar result = myObject\n    .Method1()\n    .Method2()\n    .Method3()\n    .Method4();\n```\n\n----------------------------------------\n\nTITLE: Installing and Using the Enhanced VS Code CLI for Remote Development\nDESCRIPTION: This snippet demonstrates how to install the new 'code' CLI, check its installation, and create a secure tunnel for remote development. It includes commands for help, tunneling, and creating a remote connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/12/07/remote-even-better.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode -h\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode tunnel -h\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode tunnel\n```\n\n----------------------------------------\n\nTITLE: Posting a Message from Webview Content to Extension (JavaScript)\nDESCRIPTION: Demonstrates how webview HTML/JS content can send messages back to the extension host by using 'window.parent.postMessage'. The message includes a type and payload, and the wildcard origin ('*') is specified. The extension must implement an 'onDidReceiveMessage' listener to handle these events accordingly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.parent.postMessage({\n  type: 'did-update-count',\n  count: 9\n}, '*');\n```\n\n----------------------------------------\n\nTITLE: Default Smart Auto Attach Patterns in VS Code Settings (JSON)\nDESCRIPTION: Displays the default array of glob patterns for the `debug.javascript.autoAttachSmartPattern` setting in VS Code. This pattern list determines which scripts the `smart` Auto Attach mode will attempt to debug, excluding `node_modules` generally but including common tools defined by `$KNOWN_TOOLS$`. Requires VS Code's Node.js debugging features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"!**/node_modules/**\", // exclude scripts in node_modules folders\n  \"**/$KNOWN_TOOLS$/**\"  // but include some common tools\n]\n```\n\n----------------------------------------\n\nTITLE: Defining an npm Debug Script in package.json (JSON)\nDESCRIPTION: This JSON snippet shows how to define a 'debug' script within the 'scripts' section of a package.json file. This script runs 'node myProgram.js' when executed using 'npm run debug' or similar commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"debug\": \"node myProgram.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Verifying Python 3 Installation on Windows using Batch\nDESCRIPTION: Runs the `py -3 --version` command in a Windows command prompt to verify the Python 3 installation and display its version, utilizing the Python Launcher for Windows. This confirms a prerequisite for the tutorial on Windows systems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\npy -3 --version\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript React App with create-react-app (Bash)\nDESCRIPTION: This command uses `npx` (Node Package Execute) to run the `create-react-app` tool without needing a global installation. It creates a new React project named 'my-app' using a specific template designed for TypeScript development. This sets up the project with TypeScript configuration and dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Listening to TreeView Selection Changes in TypeScript\nDESCRIPTION: This TypeScript code defines the `onDidChangeSelection` event and the corresponding `TreeViewSelectionChangeEvent` interface for the `TreeView` API in VS Code extensions. This allows extensions to subscribe to selection changes within their custom tree view and receive an array (`selection`) of the currently selected elements whenever the selection is modified by the user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Event that is fired when the [selection](#TreeView.selection) has changed\n */\nreadonly onDidChangeSelection: Event<TreeViewSelectionChangeEvent<T>>;\n\n/**\n * The event that is fired when there is a change in [tree view's selection](#TreeView.selection)\n */\nexport interface TreeViewSelectionChangeEvent<T> {\n\n  /**\n   * Selected elements.\n  */\n  readonly selection: T[];\n\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: GitHub Actions workflow configuration for testing VS Code extensions across multiple operating systems with xvfb support for Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/continuous-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n    - name: Install Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 18.x\n    - run: npm install\n    - run: xvfb-run -a npm test\n      if: runner.os == 'Linux'\n    - run: npm test\n      if: runner.os != 'Linux'\n```\n\n----------------------------------------\n\nTITLE: Receiving Configuration in a TypeScript Server Plugin (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the structure of a TypeScript server plugin's entry point. It defines the `init` function which returns an object containing methods like `create` (for language service creation) and `onConfigurationChanged`, which receives configuration data sent from the VS Code extension via the `configurePlugin` API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// In your TypeScript plugin\n\nimport * as ts_module from 'typescript/lib/tsserverlibrary';\n\nexport = function init({ typescript }: { typescript: typeof ts_module }) {\n  return {\n    create(info: ts.server.PluginCreateInfo) {\n      // Create new language service\n    },\n    onConfigurationChanged(config: any) {\n      // Receive configuration changes sent from VS Code\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Webpack Alias Configuration in jsconfig.json\nDESCRIPTION: Example showing how to configure webpack aliases in jsconfig.json for proper IntelliSense support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/jsconfig.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"ClientApp/*\": [\"./ClientApp/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugging in VS Code (JSON)\nDESCRIPTION: This JSON snippet defines a VS Code debug configuration for launching an Express/Node.js application. It is intended to be placed in the .vscode/launch.json file of the project. The core dependency is Visual Studio Code with the default Node.js debugging capabilities enabled. The 'type' parameter specifies the Node.js debugger, 'request' set to 'launch' initiates a new debugging instance, 'name' identifies this configuration in the UI, and 'program' points to the entry JS file (here, bin/www in the workspace folder). When used, VS Code will start the Express server and attach the debugger. Ensure that the specified path to the server entry point is accurate and that Node.js is installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}\\\\bin\\\\www\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Chat Request and Processing Responses with Language Model API - TypeScript\nDESCRIPTION: This snippet shows how to send a chat request using the first model from a list of chat models using VS Code\\'s LanguageModelChat object. It constructs a user message and calls \\'chat.sendRequest\\', then processes the response as an asynchronous iterable, logging each part of the response as it is streamed. This approach requires prior successful selection of chat models and may only function with user consent-granted models such as those from the Copilot extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// take the first model and say \"Hello\"\nconst [chat] = models;\nconst messages = [vscode.LanguageModelChatMessage.User('Hello')];\nconst response = await chat.sendRequest(messages);\n\n// the response is always an async iterable that can be consumed with for-await\nfor await (const part of response.text) {\n\tconsole.log(part)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Docker Compose Task in VS Code (JSON)\nDESCRIPTION: This JSON snippet defines a custom shell task for VS Code that executes the Docker Compose command to spin up multiple compose files in detached mode and build images if needed. The task is labeled 'compose-up-dev', uses the 'shell' task type, and ensures that output is always revealed in a new panel. To use this snippet, place it inside the tasks array in your .vscode/tasks.json file. Prerequisites include having Docker and docker-compose installed, and valid paths to the specified compose files. The required parameters include 'type', 'label', 'command', and 'presentation', with expected inputs being the task invocation and the output being a running set of services as defined by your Compose files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"shell\",\n    \"label\": \"compose-up-dev\",\n    \"command\": \"docker-compose -f docker-compose.yml -f docker-compose.Common.yml -f docker-compose.dev.yml up -d --build\",\n    \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Case for VS Code Extensions\nDESCRIPTION: This TypeScript code demonstrates a sample test case for a VS Code extension. It shows how to import the VS Code API, set up a test suite, and write a simple test using Mocha's TDD interface and assertions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as assert from 'assert';\nimport { after } from 'mocha';\n\n// You can import and use all API from the 'vscode' module\n// as well as import your extension to test it\nimport * as vscode from 'vscode';\n// import * as myExtension from '../extension';\n\nsuite('Extension Test Suite', () => {\n  after(() => {\n    vscode.window.showInformationMessage('All tests done!');\n  });\n\n  test('Sample test', () => {\n    assert.strictEqual(-1, [1, 2, 3].indexOf(5));\n    assert.strictEqual(-1, [1, 2, 3].indexOf(0));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mounts in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a volume mount within a `docker-compose*.yml` file. It maps a folder path on the host machine (`/host-folder-path`) to a folder path inside the container (`/container-folder-path`), allowing files to be shared or persisted.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n    - /host-folder-path:/container-folder-path\n```\n\n----------------------------------------\n\nTITLE: Configuring file associations for a VS Code file icon theme\nDESCRIPTION: This JSON configuration demonstrates how to associate icons with different file types, folders, extensions, and language IDs. It also shows how to provide different icons for light and high contrast themes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/file-icon-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"_file_dark\",\n  \"folder\": \"_folder_dark\",\n  \"folderExpanded\": \"_folder_open_dark\",\n  \"folderNames\": {\n    \".vscode\": \"_vscode_folder\"\n  },\n  \"fileExtensions\": {\n    \"ini\": \"_ini_file\"\n  },\n  \"fileNames\": {\n    \"win.ini\": \"_win_ini_file\"\n  },\n  \"languageIds\": {\n    \"ini\": \"_ini_file\"\n  },\n  \"light\": {\n    \"folderExpanded\": \"_folder_open_light\",\n    \"folder\": \"_folder_light\",\n    \"file\": \"_file_light\",\n    \"fileExtensions\": {\n      \"ini\": \"_ini_file_light\"\n    }\n  },\n  \"highContrast\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Data Sync Configuration Example\nDESCRIPTION: Code example showing how to configure data synchronization for VS Code extension state using the ExtensionContext.globalState.setKeysForSync API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.ExtensionContext.globalState.setKeysForSync\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TypeScript Project Settings (tsconfig.json)\nDESCRIPTION: Provides a minimal `tsconfig.json` configuration file example. It sets the compilation target to ES5, specifies the module system as CommonJS, and enables source map generation (`sourceMap: true`). This file is placed at the root of a TypeScript project to define compiler options and included files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"CommonJS\",\n        \"sourceMap\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Terminal Output\nDESCRIPTION: Example output when starting the Node.js application using npm start command\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-node.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> express-app@0.0.0 start /Users/user/code/scratch/express-app\n> node ./bin/www\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Operations with vscode.workspace.fs API\nDESCRIPTION: TypeScript example showing how to write content to a file using the vscode.workspace.fs API, which works with both local and remote file systems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeStr = '1€ is 1.12$ is 0.9£';\nconst writeBytes = Buffer.from(writeStr, 'utf8');\n\nawait vscode.workspace.fs.writeFile(someUri, writeBytes);\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Server Debug Launch Settings\nDESCRIPTION: Launch configuration for VS Code that enables automatic browser opening when a server starts. Uses serverReadyAction to match console output and trigger external browser opening.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Launch Program\",\n  \"program\": \"${workspaceFolder}/app.js\",\n\n  \"serverReadyAction\": {\n    \"pattern\": \"listening on port ([0-9]+)\",\n    \"uriFormat\": \"http://localhost:%s\",\n    \"action\": \"openExternally\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Arguments and Handling Results in TypeScript\nDESCRIPTION: This example shows how to execute the 'vscode.executeDefinitionProvider' command with document URI and position arguments, which returns a promise with a list of definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nasync function printDefinitionsForActiveEditor() {\n  const activeEditor = vscode.window.activeTextEditor;\n  if (!activeEditor) {\n    return;\n  }\n\n  const definitions = await vscode.commands.executeCommand<vscode.Location[]>(\n    'vscode.executeDefinitionProvider',\n    activeEditor.document.uri,\n    activeEditor.selection.active\n  );\n\n  for (const definition of definitions) {\n    console.log(definition);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nerd Font for VS Code Terminal (JSON)\nDESCRIPTION: Sets the integrated terminal's font family specifically to a Nerd Font variant ('Hack NF'). Nerd Fonts include a large number of patched glyphs and icons useful for terminal prompts and tools. This configuration is applied via the `terminal.integrated.fontFamily` setting in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.fontFamily\": \"'Hack NF'\"\n```\n\n----------------------------------------\n\nTITLE: Handling PowerShell Command and Argument Escaping in VS Code Task (JSON)\nDESCRIPTION: Provides three example shell tasks in tasks.json demonstrating different methods for running PowerShell cmdlets involving spaces and proper escaping: (1) direct command with quotes, (2) command with separated args (recommended for cross-platform compatibility), and (3) manual escaping of quotes for PowerShell. Useful for users running tasks in PowerShell, highlighting escaping requirements. Input: execution of any task; Output: PowerShell lists folder contents, but method of escaping affects success.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\": [\n    {\n        \"label\": \"PowerShell example 1 (unexpected escaping)\",\n        \"type\": \"shell\",\n        \"command\": \"Get-ChildItem \\\"Folder With Spaces\\\"\"\n    },\n    {\n        \"label\": \"PowerShell example 2 (expected escaping)\",\n        \"type\": \"shell\",\n        \"command\": \"Get-ChildItem\",\n        \"args\": [\"Folder With Spaces\"]\n    },\n    {\n        \"label\": \"PowerShell example 3 (manual escaping)\",\n        \"type\": \"shell\",\n        \"command\": \"& Get-ChildItem \\\\\\\"Folder With Spaces\\\\\\\"\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Debugging Variable Values with Echo Task in tasks.json (JSON)\nDESCRIPTION: Provides a simple diagnostic task in `tasks.json` that uses the `echo` shell command to print the resolved value of the `${workspaceFolder}` predefined variable. Running this task via 'Terminal > Run Task' helps developers verify the actual runtime value of VS Code variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"echo\",\n            \"type\": \"shell\",\n            \"command\": \"echo ${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Server Ready Logging in Node.js App - JavaScript\nDESCRIPTION: This JavaScript function logs a custom server 'ready' message to the debug logger when the HTTP server begins listening, using either a pipe or TCP port as identified by Node's server.address(). This enables DockerServerReadyAction to detect readiness when paired with a custom pattern in launch.json. Intended for insertion into server bootstrap files (e.g., bin/www) and requires the debug module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Application has started on ' + bind);\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting User Profile in Dev Container JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to configure volume mounts in a dev container to persist the user profile and allow for VS Code server reinstallation. It uses named and anonymous volumes to achieve this.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n    \"source=profile,target=/root,type=volume\",\n    \"target=/root/.vscode-server,type=volume\"\n],\n```\n\n----------------------------------------\n\nTITLE: Using JSX in TypeScript Files\nDESCRIPTION: To utilize JSX syntax within TypeScript code in VS Code, files should use the `.tsx` extension instead of the standard `.ts` extension. This signals to the TypeScript compiler and VS Code's language services to parse and provide features for JSX.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n*.tsx\n```\n\n----------------------------------------\n\nTITLE: Returning LLM Result\nDESCRIPTION: Shows how to return the result from the language model, which may contain error details or tool-calling metadata.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nreturn await libResult.result;\n```\n\n----------------------------------------\n\nTITLE: Forcing Express Log Output to VS Code Debug Console - JavaScript\nDESCRIPTION: This script snippet for an Express.js (or Node.js) application explicitly binds the debug logging module’s log function to use console.debug, ensuring VS Code receives log messages in its debug console. Prerequisites are an app using the debug module and running under VS Code's debugger. Key parameters: \\\"debug.log\\\" is overridden to enable full logging; no output is produced if DEBUG env var is not set. This is meant to be inserted early in the application’s bootstrap file (typically bin/www or app.js).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar app = require('../app');\nvar debug = require('debug')('my-express-app:server');\nvar http = require('http');\n\n// Force logging to the debug console.\ndebug.log = console.debug.bind(console);\n```\n\n----------------------------------------\n\nTITLE: Using WeakMap to Associate Custom Data with TestItems in VS Code Testing API\nDESCRIPTION: Demonstrates how to use a WeakMap to store additional data associated with TestItem instances. Since TestItem doesn't have room for custom data, this pattern allows storing additional information without modifying the TestItem interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst testData = new WeakMap<vscode.TestItem, MyCustomData>();\n\n// to associate data:\nconst item = controller.createTestItem(id, label);\ntestData.set(item, new MyCustomData());\n\n// to get it back later:\nconst myData = testData.get(item);\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Action Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a CodeActionProvider class and register it in the extension's activate function. This provider allows returning code actions for error/warning corrections and source code manipulations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoCodeActionProvider implements vscode.CodeActionProvider<vscode.CodeAction> {\n    public provideCodeActions(\n        document: vscode.TextDocument, range: vscode.Range | vscode.Selection,\n        context: vscode.CodeActionContext, token: vscode.CancellationToken):\n        Thenable<vscode.CodeAction[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerCodeActionsProvider(\n            GO_MODE, new GoCodeActionProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing References Provider in TypeScript\nDESCRIPTION: Direct implementation of a references provider in TypeScript for finding all symbol references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoReferenceProvider implements vscode.ReferenceProvider {\n    public provideReferences(\n        document: vscode.TextDocument, position: vscode.Position,\n        options: { includeDeclaration: boolean }, token: vscode.CancellationToken):\n        Thenable<vscode.Location[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerReferenceProvider(\n            GO_MODE, new GoReferenceProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing an Extensible Notebook Renderer in package.json (JSON)\nDESCRIPTION: This JSON snippet shows the `package.json` configuration required to contribute a notebook renderer that extends the built-in HTML renderer (`vscode.builtin-renderer`). It specifies the renderer's ID, display name, and the entry point script (`path`) that contains the extension logic, indicating it `extends` the built-in renderer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"notebookRenderer\": [\n    {\n      \"id\": \"vscode-samples.my-custom-html-extension\",\n      \"displayName\": \"My custom html renderer extension\",\n      \"entrypoint\": {\n        \"extends\": \"vscode.builtin-renderer\",\n        \"path\": \"./out/main.js\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet for JavaScript\nDESCRIPTION: JSON configuration to enable HTML Emmet abbreviations in JavaScript files. This setting associates the JavaScript language identifier with HTML Emmet mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"emmet.includeLanguages\": {\n        \"javascript\": \"html\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic launch.json Configuration for Node.js Debugging\nDESCRIPTION: This snippet shows a basic launch configuration for debugging a Node.js application. It demonstrates the use of variable substitution for file paths and environment variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch Program\",\n    \"program\": \"${workspaceFolder}/app.js\",\n    \"cwd\": \"${workspaceFolder}\",\n    \"args\": [ \"${env:USERNAME}\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TypeScript Compiler Options (tsconfig.json)\nDESCRIPTION: This JSON snippet represents a basic `tsconfig.json` file. It configures the TypeScript compiler to target ECMAScript 5 (`\"target\": \"ES5\"`) and use the CommonJS module system (`\"module\": \"CommonJS\"`). This file allows consistent project-wide compiler settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"CommonJS\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Grouping in tasks.json for Build Tasks (JSON)\nDESCRIPTION: This pair of configuration snippets illustrates how to specify task grouping in tasks.json for build tasks in VS Code. The first form marks the group as a build group and sets it as the default task, while the second form simply associates the task with the build group but does not make it the default. This distinction controls whether the task is invoked automatically by UI operations such as the play button.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n    },\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": \"build\",\n```\n\n----------------------------------------\n\nTITLE: Configuring an MSYS2 Terminal Profile on Windows (JSON)\nDESCRIPTION: This JSON snippet configures MSYS2's bash shell as a terminal profile in VS Code on Windows. It specifies the path to 'bash.exe', provides '--login' and '-i' arguments for an interactive login shell, and sets the 'CHERE_INVOKING' environment variable to '1' to preserve the current working directory upon launch.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"bash (MSYS2)\": {\n      \"path\": \"C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe\",\n      \"args\": [\n        \"--login\",\n        \"-i\"\n      ],\n      \"env\": { \"CHERE_INVOKING\": \"1\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Terminal Environment Variables Using EnvironmentVariableCollection in VS Code - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates using the stable EnvironmentVariableCollection API to manipulate terminal environment variables within a VS Code extension. It shows how to prepend to the PATH variable with OS-specific separators and replace JAVA_HOME. Requires access to ExtensionContext and process module. The manipulations are extension/workspace-specific and persisted across reloads.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst collection = context.environmentVariableCollection;\\nconst separator = process.platform === 'win32' ? ';' : ':';\\ncollection.prepend('PATH', `/foo${separator}`);\\ncollection.replace('JAVA_HOME', '/bar');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Comprehensive Null Checking\nDESCRIPTION: Final version of getStatus function with comprehensive null checking and detailed warning documentation, showing defensive programming approach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get the status of a user\n *\n * !!!\n * WARNING: Don't call this with undefined or null, or with a user without an id\n * !!!\n */\nexport async function getStatus(user: User): Promise<string> {\n    if (!user) {\n        return '';\n    }\n    const id = user.id;\n    if (typeof id !== 'string') {\n        return '';\n    }\n    const result = await fetch(`/api/v0/${id}/status`);\n    const json = await result.json();\n    return json.status;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dockerfile for Node.js App Build - Dockerfile\nDESCRIPTION: This Dockerfile fragment demonstrates how to set up the application working directory, environment, and copy package management files for a Node.js containerized build. It addresses Node.js framework compatibility by ensuring node_modules stays in the expected app root, which some frameworks require. Must be inserted at the appropriate position in the Dockerfile. Assumes Node.js LTS Alpine base image and correct permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:lts-alpine\nENV NODE_ENV=production\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"package-lock.json*\", \"npm-shrinkwrap.json*\", \"./\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Task Execution Callback in TypeScript\nDESCRIPTION: This TypeScript snippet presents the constructor signature for the `CustomExecution` class, part of the VS Code Task API that has been finalized. It illustrates how extension authors provide a callback function that gets invoked when the task starts. This callback receives the resolved task definition (with variables substituted) and must return a `Thenable<Pseudoterminal>` which handles the task's execution and output display.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CustomExecution {\n    /**\n     * Constructs a CustomExecution task object. The callback will be executed the task is run, at which point the\n     * extension should return the Pseudoterminal it will \"run in\". The task should wait to do further execution until\n     * [Pseudoterminal.open](#Pseudoterminal.open) is called. Task cancellation should be handled using\n     * [Pseudoterminal.close](#Pseudoterminal.close). When the task is complete fire\n     * [Pseudoterminal.onDidClose](#Pseudoterminal.onDidClose).\n     * @param process The [Pseudoterminal](#Pseudoterminal) to be used by the task to display output.\n     * @param callback The callback that will be called when the task is started by a user.\n     */\n    constructor(callback: (resolvedDefinition: TaskDefinition) => Thenable<Pseudoterminal>);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default TypeScript Build Task in VS Code (tasks.json)\nDESCRIPTION: Shows the structure of a `tasks.json` file within the `.vscode` folder for configuring VS Code tasks. This configuration defines a default build task of type 'typescript' that uses the project's `tsconfig.json`, applies the `$tsc` problem matcher for error reporting, and sets it as the default build task using the `group` property. This allows running the TypeScript compilation directly via the 'Run Build Task' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"typescript\",\n            \"tsconfig\": \"tsconfig.json\",\n            \"problemMatcher\": [\n                \"$tsc\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webview Panel Lifecycle with Disposal Handling\nDESCRIPTION: Creates a webview panel that alternates between cat images and properly handles disposal to prevent memory leaks. Uses setInterval for content updates and includes cleanup on panel disposal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nconst cats = {\n  'Coding Cat': 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',\n  'Compiling Cat': 'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif'\n};\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {}\n      );\n\n      let iteration = 0;\n      const updateWebview = () => {\n        const cat = iteration++ % 2 ? 'Compiling Cat' : 'Coding Cat';\n        panel.title = cat;\n        panel.webview.html = getWebviewContent(cat);\n      };\n\n      updateWebview();\n      const interval = setInterval(updateWebview, 1000);\n\n      panel.onDidDispose(\n        () => {\n          // When the panel is closed, cancel any future updates to the webview content\n          clearInterval(interval);\n        },\n        null,\n        context.subscriptions\n      );\n    })\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Presentation in tasks.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring a specific NPM task ('lint') within VS Code's `tasks.json`. It utilizes the 'presentation' property to modify the Integrated Terminal's behavior, specifically setting 'reveal' to 'never' to prevent the terminal panel from automatically coming to the front when the task runs. This allows customization of auto-detected tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"npm\",\n            \"script\": \"lint\",\n            \"problemMatcher\": [\n                \"$eslint-stylish\"\n            ],\n            \"presentation\": {\n                \"reveal\": \"never\"\n            }\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild Build Script for VSCode Web Extensions\nDESCRIPTION: Main build script that configures ESBuild for bundling VSCode web extensions. Includes test bundling, problem matcher plugin, and watch mode functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst esbuild = require('esbuild');\nconst glob = require('glob');\nconst path = require('path');\nconst polyfill = require('@esbuild-plugins/node-globals-polyfill');\n\nconst production = process.argv.includes('--production');\nconst watch = process.argv.includes('--watch');\n\nasync function main() {\n\tconst ctx = await esbuild.context({\n\t\tentryPoints: [\n\t\t\t'src/web/extension.ts',\n\t\t\t'src/web/test/suite/extensionTests.ts'\n\t\t],\n\t\tbundle: true,\n\t\tformat: 'cjs',\n\t\tminify: production,\n\t\tsourcemap: !production,\n\t\tsourcesContent: false,\n\t\tplatform: 'browser',\n\t\toutdir: 'dist/web',\n\t\texternal: ['vscode'],\n\t\tlogLevel: 'warning',\n\t\tdefine: {\n\t\t\tglobal: 'globalThis',\n\t\t},\n\n\t\tplugins: [\n\t\t\tpolyfill.NodeGlobalsPolyfillPlugin({\n\t\t\t\tprocess: true,\n\t\t\t\tbuffer: true,\n\t\t\t}),\n\t\t\ttestBundlePlugin,\n\t\t\tesbuildProblemMatcherPlugin,\n\t\t],\n\t});\n\tif (watch) {\n\t\tawait ctx.watch();\n\t} else {\n\t\tawait ctx.rebuild();\n\t\tawait ctx.dispose();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Compose Up Command with Override File (JSON)\nDESCRIPTION: This JSON snippet shows a VS Code setting (`docker.commands.composeUp`) that customizes the 'Compose Up' command. It defines a template labeled 'override' that executes `docker-compose` using a base `docker-compose.yml` file and the currently selected Compose file (`${configurationFile}`) as an override, starting services in detached mode (`-d`) and ensuring images are built (`--build`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"docker.commands.composeUp\": [\n    {\n        \"label\": \"override\",\n        \"template\": \"docker-compose -f docker-compose.yml ${configurationFile}  up -d --build\",\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Mapping Docker Container Source for Debugging - VS Code Launch Configuration - JSON\nDESCRIPTION: This snippet configures remoteRoot for the VS Code Node.js debugger in a Docker launch configuration, letting the debugger map container paths in /usr/my-custom-location to the local workspace. Prerequisites are a custom source layout inside the Docker image; use this in .vscode/launch.json under the relevant configuration. localRoot can also be set if workspace and container paths differ.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Docker Node.js Launch\",\n            \"type\": \"docker\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"docker-run: debug\",\n            \"platform\": \"node\",\n            \"node\": {\n                \"remoteRoot\": \"/usr/my-custom-location\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete tasks.json with GCC Problem Matcher (JSON)\nDESCRIPTION: Full tasks.json configuration file including the GCC problem matcher within a build task that compiles a C program.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"build\",\n            \"command\": \"gcc\",\n            \"args\": [\"-Wall\", \"helloWorld.c\", \"-o\", \"helloWorld\"],\n            \"problemMatcher\": {\n                \"owner\": \"cpp\",\n                \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n                \"source\": \"gcc\",\n                \"pattern\": {\n                    \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n                    \"file\": 1,\n                    \"line\": 2,\n                    \"column\": 3,\n                    \"severity\": 4,\n                    \"message\": 5\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CodeLens Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a CodeLensProvider class and register it in the extension's activate function. This provider allows defining CodeLens results for a document and optionally binding them to commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoCodeLensProvider implements vscode.CodeLensProvider {\n    public provideCodeLenses(document: TextDocument, token: CancellationToken):\n        CodeLens[] | Thenable<CodeLens[]> {\n    ...\n    }\n\n    public resolveCodeLens?(codeLens: CodeLens, token: CancellationToken):\n         CodeLens | Thenable<CodeLens> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerCodeLensProvider(\n            GO_MODE, new GoCodeLensProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven for Java 22 Preview Features\nDESCRIPTION: XML configuration for Maven's pom.xml file to enable Java 22 preview features. This snippet sets the compiler plugin to use Java 22 and enables preview features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<build>\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <release>22</release>\n          <compilerArgs>--enable-preview</compilerArgs>\n        </configuration>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Installing GCC Build Tools and GDB Debugger using apt-get in Bash\nDESCRIPTION: Installs the essential GNU compiler tools (`build-essential` package, including g++) and the GDB debugger on an Ubuntu system using the `apt-get` package manager. Requires administrator privileges (sudo).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential gdb\n```\n\n----------------------------------------\n\nTITLE: Using Workspace Variable for Default Python Interpreter Path\nDESCRIPTION: Example showing the use of the `${workspaceFolder}` variable within `python.defaultInterpreterPath` to specify an interpreter location relative to the workspace, commonly within a `.venv` folder. This allows for repository-independent configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"${workspaceFolder}/.venv\"\n```\n\n----------------------------------------\n\nTITLE: Running Django Database Migrations using Bash\nDESCRIPTION: Shows the standard Django management commands executed in bash to handle database schema migrations after model changes. `python manage.py makemigrations` analyzes model changes and generates migration files in the `migrations` directory. `python manage.py migrate` applies these generated (or pending) migrations to the database, updating its schema. These commands require a Python environment with Django installed and must be run in the project's root directory containing `manage.py`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-specific Settings in JSON for TypeScript and Markdown\nDESCRIPTION: This snippet demonstrates how to customize editor settings specifically for TypeScript and Markdown files using language-specific settings in the settings.json file. It configures different formatting options for each language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[typescript]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.formatOnPaste\": true\n  },\n  \"[markdown]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.wordWrap\": \"on\",\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.acceptSuggestionOnEnter\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker CLI in Ubuntu Development Container\nDESCRIPTION: Dockerfile commands to install Docker CLI and related dependencies in an Ubuntu-based development container. Includes installation of software properties, Docker repository setup, and Docker Compose via pip.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/choosing-dev-environment.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n    ...\\n    && apt-get -y install software-properties-common \\\\\\n    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - 2>/dev/null \\\\\\n    && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" \\\\\\n    && apt-get update -y \\\\\\n    && apt-get install -y docker-ce-cli \\\\\\n    && apt-get install -y python python-pip \\\\\\n    && pip install docker-compose \\\\\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Context for Remote SSH Access - Docker CLI (Shell)\nDESCRIPTION: This shell command creates a new Docker context that points to a remote machine via SSH, allowing the Docker CLI and VS Code to operate on containers running remotely. It requires Docker to be installed locally, a properly configured SSH key-based authentication (password authentication is not supported), and appropriate user/host details. The context name and SSH endpoint must be adjusted as needed. Inputs include the context name and the ssh://username@host:port endpoint; output is a new Docker context that can be activated.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker context create my-remote-docker-machine --docker \"host=ssh://username@host:port\"\n```\n\n----------------------------------------\n\nTITLE: Creating InputBox with Links Example in TypeScript\nDESCRIPTION: Complete example demonstrating how to use the showInputBox API with clickable links in both the prompt and validation message. The links can direct users to additional information resources.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await vscode.window.showInputBox({\n   prompt: 'Please enter a valid email address [more info](https://aka.ms/vscode-email-validation)',\n   validateInput: text => {\n      if (text.indexOf('@') === -1) {\n         return 'Please enter a valid email address, [more info](https://aka.ms/vscode-email-validation)';\n      }\n      return undefined;\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Participant Request with Tools\nDESCRIPTION: Demonstrates how to send a chat request with tool definitions using sendChatParticipantRequest, including stream options and custom prompt.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst libResult = chatUtils.sendChatParticipantRequest(\n    request,\n    chatContext,\n    {\n        prompt: 'You are a cat! Answer as a cat.',\n        responseStreamOptions: {\n            stream,\n            references: true,\n            responseText: true\n        },\n        tools\n    },\n    token);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Copilot Review Instructions in JSON Settings\nDESCRIPTION: This JSON snippet demonstrates how to configure custom review instructions for Copilot's code review feature. The configuration allows defining specific review requirements directly in the settings or referencing them from external files to guide how Copilot reviews code selections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"github.copilot.chat.reviewSelection.instructions\": [\n    {\n      \"text\": \"Logging should be done with the Log4j .\"\n    },\n    {\n      \"text\": \"Always use the Polly library for fault-handling.\"\n    },\n    {\n      \"file\": \"code-style.md\" // import instructions from file `code-style.md`\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Writing a C++ Hello World Program with STL in Visual Studio Code\nDESCRIPTION: Provides an example C++ source file that introduces usage of the STL vector and string classes to produce a hello world-style output. The program creates a vector of strings and prints each word to the standard output using a for-each loop. Requires a C++ compiler (such as g++) and standard library support. Expected input is none; output is a single line greeting. The code is designed for educational demonstration in VS Code with C++ extensions installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\\n#include <vector>\\n#include <string>\\n\\nusing namespace std;\\n\\nint main()\\n{\\n   vector<string> msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\\n\\n   for (const string& word : msg)\\n   {\\n      cout << word << \" \";\\n   }\\n   cout << endl;\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Browser Entry URI in Docker Debug Launch - VS Code Launch Configuration - JSON\nDESCRIPTION: This launch.json configuration sets \\\"uriFormat\\\" to open the browser automatically to a specific page (about.html) instead of the default root when debugging a Node.js app in Docker. The \\\"%s\\\" token is replaced by the resolved port, as parsed by the server ready pattern. Prerequisites: docker-run debug setup and a running debug server; limitations: only one token supported for port substitution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Docker Node.js Launch\",\n            \"type\": \"docker\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"docker-run: debug\",\n            \"platform\": \"node\",\n            \"dockerServerReadyAction\": {\n                \"uriFormat\": \"http://localhost:%s/about.html\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - Copilot Custom Instructions\nDESCRIPTION: Setting to specify custom instructions for Copilot commit message generation, either directly or via a file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ngithub.copilot.chat.commitMessageGeneration.instructions\n```\n\n----------------------------------------\n\nTITLE: Optimizing Shell Integration Startup Performance\nDESCRIPTION: This snippet demonstrates how to optimize shell startup time when using manual shell integration installation. Instead of dynamically finding the script path on every shell launch using `code --locate-shell-integration-path <shell>`, first run that command to get the static path, and then hardcode that path directly into the sourcing command within the shell's initialization file (e.g., `.bashrc`, `.zshrc`). This avoids the overhead of running Node.js to find the path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Output the executable's path first:\ncode --locate-shell-integration-path bash\n\n# Add the result of the above to the source statement:\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"/path/to/shell/integration/script.sh\"\n```\n\n----------------------------------------\n\nTITLE: Handling Messages from Extension in a Webview (JavaScript)\nDESCRIPTION: Listens for messages posted to the webview from the extension using 'window.addEventListener(\\'message\\')' and processes the message according to its type. The handler example switches on 'event.data.type' and can perform UI changes or logic as required. Assumes integration with extension's 'postMessage' calls.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('message', event => {\n  switch (event.data.type) {\n    case 'change-cats':\n      doChangeCats(event.data.requestedBreed);\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting an Express Application\nDESCRIPTION: Command to start the Express application using the npm start script defined in package.json, which runs the Node.js web server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Angular development server\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\nng serve\n```\n\n----------------------------------------\n\nTITLE: Visualizing Titanic Data Relationships with Seaborn and Matplotlib in Python\nDESCRIPTION: Imports the seaborn and matplotlib.pyplot libraries. Creates a figure containing five subplots using `plt.subplots`. Uses seaborn's `violinplot` and `pointplot` functions to visualize the relationships between passenger survival ('survived') and various features ('age', 'sex', 'sibsp', 'parch', 'pclass', 'fare') from the 'data' DataFrame, plotting them onto the created subplots (axs). This helps in understanding how different factors might relate to survival probability. Requires the cleaned `data` DataFrame and the imported visualization libraries.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(ncols=5, figsize=(30,5))\nsns.violinplot(x=\"survived\", y=\"age\", hue=\"sex\", data=data, ax=axs[0])\nsns.pointplot(x=\"sibsp\", y=\"survived\", hue=\"sex\", data=data, ax=axs[1])\nsns.pointplot(x=\"parch\", y=\"survived\", hue=\"sex\", data=data, ax=axs[2])\nsns.pointplot(x=\"pclass\", y=\"survived\", hue=\"sex\", data=data, ax=axs[3])\nsns.violinplot(x=\"survived\", y=\"fare\", hue=\"sex\", data=data, ax=axs[4])\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Relevance Sorting in Copilot Search (Experimental)\nDESCRIPTION: This experimental VS Code setting enhances Copilot's semantic search functionality. When enabled, search results obtained via Copilot are sorted based on their semantic relevance to the query, prioritizing keyword matches found within more contextually relevant code snippets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_6\n\nLANGUAGE: settings\nCODE:\n```\nsetting(github.copilot.chat.search.semanticTextResults)\n```\n\n----------------------------------------\n\nTITLE: Automating Docker Installation on Ubuntu VMs using Cloud-Init YAML\nDESCRIPTION: This Cloud-Init configuration file automatically sets up Docker on an Ubuntu system during VM provisioning. It adds the official Docker repository, installs the Docker engine and CLI packages (`docker-ce`, `docker-ce-cli`), creates the `docker` group, and adds the default user to this group to allow running Docker commands without sudo. This is useful for preparing remote hosts for VS Code Dev Containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/docker-options.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#cloud-config\n\napt:\n  sources:\n    docker.list:\n      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable\n      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88\n\npackages:\n  - docker-ce\n  - docker-ce-cli\n\ngroups:\n  - docker\n\nsystem_info:\n  default_user:\n    groups: [docker]\n```\n\n----------------------------------------\n\nTITLE: Parsing Chat Response from GitHub Copilot in TypeScript\nDESCRIPTION: This function parses the chat response from GitHub Copilot, accumulating fragments until a complete annotation is received. It then applies the annotation as a decoration in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function parseChatResponse(chatResponse: vscode.LanguageModelChatResponse, textEditor: vscode.TextEditor) {\n let accumulatedResponse = \"\";\n\n for await (const fragment of chatResponse.text) {\n  accumulatedResponse += fragment;\n\n  // if the fragment is a }, we can try to parse the whole line\n  if (fragment.includes(\"}\")) {\n   try {\n    const annotation = JSON.parse(accumulatedResponse);\n    applyDecoration(textEditor, annotation.line, annotation.suggestion);\n    // reset the accumulator for the next line\n    accumulatedResponse = \"\";\n   }\n   catch (e) {\n    // do nothing\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables and Volume Mapping for Flask Hot Reloading\nDESCRIPTION: Configuration for tasks.json to enable hot reloading in a Flask application by setting the FLASK_ENV to development and mapping the local workspace folder to the /app directory in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"docker-run\",\n  \"label\": \"docker-run: debug\",\n  \"dependsOn\": [\n    \"docker-build\"\n  ],\n  \"dockerRun\": {\n    \"env\": {\n      \"FLASK_APP\": \"path_to/flask_entry_point.py\",\n      \"FLASK_ENV\": \"development\"\n    },\n    \"volumes\": [\n      {\n        \"containerPath\": \"/app\", \"localPath\": \"${workspaceFolder}\"\n      }\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Workspace Search Provider in VS Code - TypeScript\nDESCRIPTION: This TypeScript snippet defines the API for registering a SearchProvider with the VS Code workspace namespace, allowing extensions to hook into file and text search tasks. It declares the SearchProvider interface with optional methods for providing file and text search results, each receiving search options, a progress callback, and a cancellation token for asynchronous operation. Extension authors must implement these interface methods to offer custom search capabilities; the registration returns a Disposable to unregister the provider. Required: an understanding of the VS Code extension API, including knowledge of Progress, CancellationToken, and Thenable types. Input parameters include search options, query, and token; outputs are delivered via the progress mechanism. Limitations: this API is proposed and requires 'enableProposedApi' in package.json before use.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport namespace workspace {\n  export function registerSearchProvider(scheme: string, provider: SearchProvider): Disposable;\n}\n\nexport interface SearchProvider {\n  provideFileSearchResults?(options: FileSearchOptions, progress: Progress<string>, token: CancellationToken): Thenable<void>;\n  provideTextSearchResults?(query: TextSearchQuery, options: TextSearchOptions, progress: Progress<TextSearchResult>, token: CancellationToken): Thenable<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Text Data to File Using VS Code Workspace FS API in TypeScript\nDESCRIPTION: This snippet demonstrates how to write text data to a file using the VS Code workspace file system API. It converts a string to a UInt8Array using Buffer and then writes it to the specified file URI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/custom-editors.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeData = Buffer.from(\"my text data\", 'utf8');\nvscode.workspace.fs.writeFile(fileUri, writeData);\n```\n\n----------------------------------------\n\nTITLE: Setting Container and VS Code Environment Variables via devcontainer.json (JSON)\nDESCRIPTION: This JSON snippet sets container-wide (containerEnv) and VS Code-specific (remoteEnv) environment variables within a dev container using devcontainer.json. It demonstrates referencing both local machine and existing container variables, allowing flexible configuration for development workflows. Prerequisites are a valid devcontainer.json file and a compatible Docker container setup; the variables can affect terminal, tasks, and debugging contexts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"containerEnv\": {\n        \"MY_CONTAINER_VAR\": \"some-value-here\",\n        \"MY_CONTAINER_VAR2\": \"${localEnv:SOME_LOCAL_VAR}\"\n    },\n    \"remoteEnv\": {\n        \"PATH\": \"${containerEnv:PATH}:/some/other/path\",\n        \"MY_REMOTE_VARIABLE\": \"some-other-value-here\",\n        \"MY_REMOTE_VARIABLE2\": \"${localEnv:SOME_LOCAL_VAR}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Jupyter Extension Types via npm Package\nDESCRIPTION: Specifies the npm package `@vscode/jupyter-extension` which provides TypeScript type definitions for the finalized Jupyter Kernel Execution API. Extension authors should use this package to interact with Jupyter kernels within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@vscode/jupyter-extension\n```\n\n----------------------------------------\n\nTITLE: Loading Titanic Data with Pandas in Python\nDESCRIPTION: Imports the pandas and numpy libraries, aliasing them as pd and np respectively. Reads data from a CSV file named 'titanic3.csv' into a pandas DataFrame called 'data'. Requires the pandas and numpy libraries to be installed and the 'titanic3.csv' file to be present in the expected location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\ndata = pd.read_csv('titanic3.csv')\n```\n\n----------------------------------------\n\nTITLE: Feature Engineering: Creating 'relatives' Column and Recalculating Correlation in Python\nDESCRIPTION: Performs feature engineering by creating a new binary column named 'relatives' in the `data` DataFrame. This column is assigned a value of 1 if the sum of 'sibsp' (siblings/spouses) and 'parch' (parents/children) is greater than 0 for a passenger, and 0 otherwise, indicating whether the passenger had any relatives onboard. After creating this new feature, it recalculates and displays the absolute correlation of all numeric features (including 'relatives') with the 'survived' column. Depends on the `data` DataFrame containing 'sibsp' and 'parch' columns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata['relatives'] = data.apply (lambda row: int((row['sibsp'] + row['parch']) > 0), axis=1)\ndata.corr(numeric_only=True).abs()[[\"survived\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Default TypeScript Build Task in tasks.json - JSON\nDESCRIPTION: This tasks.json snippet marks the contributed TypeScript build task as the default to be run when triggering the build command in VS Code. It references the tsconfig.json file and uses the built-in $tsc problem matcher. Dependencies include the VS Code TypeScript extension and a valid tsconfig.json. Inputs are processed automatically; output is a compiled JavaScript file. No new tasks are defined, but the default is set using the 'group' key.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\\n    // for the documentation about the tasks.json format\\n    \"version\": \"2.0.0\",\\n    \"tasks\": [\\n        {\\n            \"type\": \"typescript\",\\n            \"tsconfig\": \"tsconfig.json\",\\n            \"problemMatcher\": [\\n                \"$tsc\"\\n            ],\\n            \"group\": {\\n                \"kind\": \"build\",\\n                \"isDefault\": true\\n            }\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cmder Terminal Profile on Windows (JSON)\nDESCRIPTION: This JSON snippet shows how to configure Cmder as a terminal profile in VS Code on Windows. It sets the 'path' to 'cmd.exe' and uses '/K' argument to execute Cmder's initialization script ('vscode_init.cmd'). This profile is also set as the default for Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"cmder\": {\n      \"path\": \"C:\\\\WINDOWS\\\\System32\\\\cmd.exe\",\n      \"args\": [\"/K\", \"C:\\\\cmder\\\\vendor\\\\bin\\\\vscode_init.cmd\"]\n    }\n  },\n  \"terminal.integrated.defaultProfile.windows\": \"cmder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Completion Provider for a Language Identifier using VS Code API (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates using the Visual Studio Code extension API to register a completion item provider. It calls `languages.registerCompletionItemProvider` to associate an instance of `PHPCompletionItemProvider` with the `php` language identifier. The provider will be triggered when the user types `.` or `$` in a PHP file, offering context-aware code completions. Requires the `vscode` API module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/identifiers.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlanguages.registerCompletionItemProvider('php', new PHPCompletionItemProvider(), '.', '$')\n```\n\n----------------------------------------\n\nTITLE: File Structure of a VS Code Extension\nDESCRIPTION: Shows the typical file structure of a Visual Studio Code extension, including configuration files, source code, and manifest.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/extension-anatomy.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .vscode\n│   ├── launch.json     // Config for launching and debugging the extension\n│   └── tasks.json      // Config for build task that compiles TypeScript\n├── .gitignore          // Ignore build output and node_modules\n├── README.md           // Readable description of your extension's functionality\n├── src\n│   └── extension.ts    // Extension source code\n├── package.json        // Extension manifest\n├── tsconfig.json       // TypeScript configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Docker Host Connection via SSH in VS Code Settings (JSON)\nDESCRIPTION: Sets the `docker.environment` property within VS Code's `settings.json` file to configure the Docker extension to connect to a remote Docker host using the SSH protocol. This method requires a supported SSH client, configured key-based authentication for the remote host, and the SSH key to be imported into the local SSH agent. The `DOCKER_HOST` variable specifies the SSH connection string including the remote username and host address (FQDN or IP).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"docker.environment\": {\n    \"DOCKER_HOST\": \"ssh://your-remote-user@your-remote-machine-fqdn-or-ip-here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling an Imported Host Function from Rust (Wasm)\nDESCRIPTION: This Rust code snippet demonstrates how to call the `log` function, previously defined as an import in the WIT file, from within WebAssembly code. It uses the `format!` macro to create the log message and passes it to the host-provided `log` function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nfn calc(op: Operation) -> u32 {\n\tlog(&format!(\"Starting calculation: {:?}\", op));\n\tlet result = match op {\n\t\t// ...\n\t};\n\tlog(&format!(\"Finished calculation: {:?}\", op));\n\tresult\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing a VS Code extension with version auto-increment\nDESCRIPTION: This command publishes a VS Code extension while automatically incrementing its version number. It updates the version in package.json and creates a git commit and tag if run in a git repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvsce publish minor\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Launch with dockerServerReadyAction in launch.json\nDESCRIPTION: Configuration for launch.json to automatically open a browser when a Django server starts in a Docker container. It uses a regex pattern to detect when the server is ready and configures the browser to open a specific page.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"name\": \"Docker: Python - Django\",\n      \"type\": \"docker\",\n      \"request\": \"launch\",\n      \"preLaunchTask\": \"docker-run: debug\",\n      \"python\": {\n        \"pathMappings\": [\n          {\n            \"localRoot\": \"${workspaceFolder}\",\n            \"remoteRoot\": \"/app\"\n          }\n        ],\n        \"projectType\": \"django\"\n      },\n      \"dockerServerReadyAction\": {\n        \"action\": \"openExternally\",\n        \"pattern\": \"Starting development server at (https?://\\\\S+|[0-9]+)\",\n        \"uriFormat\": \"%s://localhost:%s/about.html\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed Webview Context Menu API in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to enable the proposed 'contribWebviewContext' API in an extension's `package.json` file. Adding this entry to the `enabledApiProposals` array allows the extension to use the experimental webview context menu features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"enabledApiProposals\": [\n  \"contribWebviewContext\"\n]\n```\n\n----------------------------------------\n\nTITLE: Packaging and publishing VS Code extensions using vsce\nDESCRIPTION: These commands demonstrate how to use vsce to package an extension into a .vsix file and then publish it to the VS Code Marketplace. The commands should be run from the extension's root directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myExtension\n$ vsce package\n# myExtension.vsix generated\n$ vsce publish\n# <publisher id>.myExtension published to VS Code Marketplace\n```\n\n----------------------------------------\n\nTITLE: Defining a Chat Request Handler in TypeScript\nDESCRIPTION: This TypeScript snippet shows the structure of a chat request handler. It defines an async function that processes chat requests and returns a response using the provided stream.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler: vscode.ChatRequestHandler = async (request: vscode.ChatRequest, context: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken): Promise<ICatChatResult> => {\n\n    // Chat request handler implementation goes here\n\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Workbench Navigation Keybindings in VS Code\nDESCRIPTION: JSON configuration for setting up keyboard shortcuts to navigate between editors, side bar views, and panels in VS Code. Demonstrates usage of context keys 'sideBarFocus' and 'panelFocus' for conditional keybindings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"key\": \"cmd+]\", \"command\": \"workbench.action.nextEditor\" },\n  { \"key\": \"cmd+[\", \"command\": \"workbench.action.previousEditor\" },\n  {\n    \"key\": \"cmd+]\",\n    \"command\": \"workbench.action.nextSideBarView\",\n    \"when\": \"sideBarFocus\"\n  },\n  {\n    \"key\": \"cmd+[\",\n    \"command\": \"workbench.action.previousSideBarView\",\n    \"when\": \"sideBarFocus\"\n  },\n  {\n    \"key\": \"cmd+]\",\n    \"command\": \"workbench.action.nextPanelView\",\n    \"when\": \"panelFocus\"\n  },\n  {\n    \"key\": \"cmd+[\",\n    \"command\": \"workbench.action.previousPanelView\",\n    \"when\": \"panelFocus\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTML Tags/Attributes for VS Code IntelliSense (JSON)\nDESCRIPTION: JSON structure defining custom HTML elements (`<my-button>`) and their attributes (`type`) with descriptions and allowed values. This data enhances VS Code's HTML language service, providing completion and hover information when used with the `html.experimental.customData` setting or `contributes.html.experimental.customData` extension contribution point.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"tags\": [{\n      \"name\": \"my-button\",\n      \"description\": \"My button\",\n      \"attributes\": [{\n        \"name\": \"type\",\n        \"description\": \"My button type\",\n        \"values\": [\n          { \"name\": \"alert\" }\n        ]\n      }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Import Settings for VS Code\nDESCRIPTION: JSON configuration for automatically updating imports when saving JavaScript files using VS Code's codeActionsOnSave setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": \"explicit\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terminal Commands Reliably with Shell Integration - VS Code Extension (TypeScript)\nDESCRIPTION: This snippet shows how an extension can execute a terminal command using the shell integration API, which ensures the command is reliably executed and tracked. It first checks for shell integration support, uses the executeCommand method to run a command, and listens for the command's completion by comparing execution objects, printing the exit code when complete. If shell integration is missing, it falls back to sending text directly, with a comment indicating that command tracking is then unavailable. The code requires the shellIntegration capability and access to the terminal instance (term), with key parameters being the commandLine string and event.execution references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst commandLine = 'echo \"Hello world\"';\nif (term.shellIntegration) {\n    const execution = shellIntegration.executeCommand({ commandLine });\n    window.onDidEndTerminalShellExecution(event => {\n        if (event.execution === execution) {\n            console.log(`Command exited with code ${event.exitCode}`);\n        }\n    });\n} else {\n    term.sendText(commandLine);\n    // Without shell integration, we can't know when the command has finished or what the\n    // exit code was.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Folding Provider in VS Code Extensions (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the proposed function signature for `registerFoldingProvider` within the VS Code extension API. It allows extensions to contribute language-aware code folding capabilities. The function takes a `DocumentSelector` to specify applicable documents and a `FoldingProvider` implementation. It returns a `Disposable` to unregister the provider. Note that this is a proposed API requiring explicit opt-in via `package.json` and the inclusion of `vscode.proposed.d.ts`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport namespace languages {\n\n  /**\n    * Register a folding provider.\n    *\n    * Multiple folding can be registered for a language. In that case providers are sorted\n    * by their [score](#languages.match) and the best-matching provider is used. Failure\n    * of the selected provider will cause a failure of the whole operation.\n    *\n    * @param selector A selector that defines the documents this provider is applicable to.\n    * @param provider A folding provider.\n    * @return A [disposable](#Disposable) that unregisters this provider when being disposed.\n    */\n  export function registerFoldingProvider(selector: DocumentSelector, provider: FoldingProvider): Disposable;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Tasks with tasks.json in Visual Studio Code (JSON)\nDESCRIPTION: This snippet demonstrates how to define a build task for C++ using cl.exe in VS Code's tasks.json. It specifies the build command, passes necessary arguments for building the active file into an executable, and configures error parsing with the $msCompile problem matcher. Key parameters include the compiler command, output file definition, and designation of this task as the default build. The snippet requires that cl.exe (Visual Studio C++ compiler) and the VS Code C++ extension are installed, and is intended for Windows development environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n    {\n        \"type\": \"shell\",\n        \"label\": \"C/C++: cl.exe build active file\",\n        \"command\": \"cl.exe\",\n        \"args\": [\n            \"/Zi\",\n            \"/EHsc\",\n            \"/Fe:\",\n            \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n            \"${file}\"\n        ],\n        \"problemMatcher\": [\n            \"$msCompile\"\n        ],\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true\n        },\n        \"detail\": \"Task generated by Debugger.\"\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Compiler and Debugger Installation in Bash\nDESCRIPTION: Utilizes the 'whereis' command to locate the g++ compiler and gdb executable files on the system. These checks ensure that the installation of C++ development tools has succeeded. No extra dependencies or configuration is necessary.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhereis g++\\nwhereis gdb\n```\n\n----------------------------------------\n\nTITLE: Converting Anonymous Class to Nested Class in Java\nDESCRIPTION: Shows how to convert an anonymous inner class to a member class using the 'Convert anonymous to nested class' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Clazz {\n  public Interface method() {\n    final boolean isValid = true;\n    return new Interface() {\n      public boolean isValid() {\n        return isValid;\n      }\n    };\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Clazz {\n  private final class MyInterface extends Interface {\n    private final boolean isValid;\n\n    private MyInterface(boolean isValid) {\n      this.isValid = isValid;\n    }\n\n    public boolean isValid() {\n      return isValid;\n    }\n  }\n\n  public Interface method() {\n    final boolean isValid = true;\n    return new MyInterface(isValid);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Problem Matcher for ESLint Stylish Output (JSON)\nDESCRIPTION: JSON configuration for a multiline problem matcher that captures ESLint stylish output, including file name, line, column, severity, message, and error code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"owner\": \"javascript\",\n    \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n    \"pattern\": [\n        {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n        },\n        {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(error|warning|info)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GCC/G++ Debug Symbols via Compiler Flag (Shell/CLI)\nDESCRIPTION: Instructs the GCC or G++ compiler to include debugging information (using the DWARF standard by default) in the output executable. This flag should be added to the compiler invocation command line.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n-g\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-threaded Debugging\nDESCRIPTION: Python code snippet for enabling debugging in applications using native thread APIs. Required for debugging multi-threaded applications that use Win32 CreateThread.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport debugpy\ndebugpy.debug_this_thread()\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Highlight Provider in TypeScript\nDESCRIPTION: Direct implementation of a document highlight provider in TypeScript for highlighting symbol occurrences.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoDocumentHighlightProvider implements vscode.DocumentHighlightProvider {\n    public provideDocumentHighlights(\n        document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken):\n        vscode.DocumentHighlight[] | Thenable<vscode.DocumentHighlight[]>;\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerDocumentHighlightProvider(\n            GO_MODE, new GoDocumentHighlightProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring skipFiles to Ignore Node.js Internal Modules in JSON\nDESCRIPTION: This JSON snippet demonstrates using the special `<node_internals>` identifier within the `skipFiles` array in `launch.json`. This configuration instructs the VS Code Node.js debugger to skip all built-in core modules of Node.js during debugging sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"skipFiles\": [\n   \"<node_internals>/**/*.js\"\n ]\n```\n\n----------------------------------------\n\nTITLE: Localhost Forwarding in VS Code Extensions\nDESCRIPTION: Demonstrates how to use the asExternalUri API for forwarding localhost ports in VS Code extensions, particularly useful in remote development scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport { getExpressServerPort } from './server';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n    const dynamicServerPort = await getWebServerPort();\n\n    context.subscriptions.push(vscode.commands.registerCommand('myAmazingExtension.forwardLocalhost', async () =>\n\n        // Make the port available locally and get the full URI\n        const fullUri = await vscode.env.asExternalUri(\n            vscode.Uri.parse(`http://localhost:${dynamicServerPort}`));\n\n        // ... do something with the fullUri ...\n\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Flask Application Entry Point in webapp.py\nDESCRIPTION: This code creates an entry point for the Flask application by importing the app instance and views. The imports ensure routes are properly registered with Flask's routing system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Entry point for the application.\nfrom . import app    # For application discovery by the 'flask' command.\nfrom . import views  # For import side-effects of setting up routes.\n```\n\n----------------------------------------\n\nTITLE: Handling File Transfers in Tree View Drag and Drop\nDESCRIPTION: Demonstrates how to read files from DataTransfer objects in tree view drag and drop operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestViewDragAndDrop implements vscode.TreeDataProvider<Node>, vscode.TreeDragAndDropController<Node> {\n\n  ...\n\n   public async handleDrop(target: Node | undefined, sources: vscode.DataTransfer, token: vscode.CancellationToken): Promise<void> {\n\n     // Get a list of all files\n     const files: vscode.DataTransferFile[] = [];\n     sources.forEach((item) => {\n       const file = item.asFile();\n       if (file) {\n         files.push(file);\n       }\n     });\n\n    const decoder = new TextDecoder();\n\n    // Print out the names and first 100 characters of the file\n     for (const file of files) {\n       const data = await file.data();\n       const text = decoder.decode(data);\n       const fileContentsPreview = text.slice(0, 100);\n       console.log(file.name + ' — ' + fileContentsPreview + '\\n');\n     }\n\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TestNG Gradle Dependencies\nDESCRIPTION: Gradle configuration for adding TestNG dependencies to a Java project's build.gradle file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    java\n}\n\ndependencies {\n    testImplementation('org.testng:testng:(YOUR_TESTNG_VERSION)')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Tasks in VS Code\nDESCRIPTION: This snippet shows how to create compound tasks in VS Code that depend on multiple simpler tasks. It demonstrates setting up client and server build tasks and combining them into a single build task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Client Build\",\n            \"command\": \"gulp\",\n            \"args\": [\"build\"],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}/client\"\n            }\n        },\n        {\n            \"label\": \"Server Build\",\n            \"command\": \"gulp\",\n            \"args\": [\"build\"],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}/server\"\n            }\n        },\n        {\n            \"label\": \"Build\",\n            \"dependsOn\": [\"Client Build\", \"Server Build\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Marking API as Deprecated using JSDoc in TypeScript\nDESCRIPTION: Demonstrates using the `@deprecated` JSDoc tag in TypeScript to mark a function as deprecated. VS Code utilizes this tag to visually indicate deprecated APIs in IntelliSense suggestions (with a strikethrough) and code references, guiding developers towards updated alternatives like `getMode()` in this example. This feature requires no special configuration beyond standard TypeScript tooling within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n/**\n * @deprecated Use `getMode()` instead.\n */\nexport function mode() { ... }\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Exercise Prompt Constants in TypeScript\nDESCRIPTION: Defines a constant string containing the prompt template for generating programming exercises. Used to instruct the AI tutor on how to create and present practice problems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst EXERCISES_PROMPT = 'You are a helpful tutor. Your job is to teach the user with fun, simple exercises that they can complete in the editor. Your exercises should start simple and get more complex as the user progresses. Move one concept at a time, and do not move on to the next concept until the user provides the correct answer. Give hints in your exercises to help the user learn. If the user is stuck, you can provide the answer and explain why it is the answer. If the user asks a non-programming question, politely decline to respond.';\n```\n\n----------------------------------------\n\nTITLE: Theming VS Code Webview Content (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to style webview content based on VS Code's current theme. It uses special classes and CSS variables provided by VS Code to adjust the appearance for light, dark, and high-contrast themes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbody.vscode-light {\n  color: black;\n}\n\nbody.vscode-dark {\n  color: white;\n}\n\nbody.vscode-high-contrast {\n  color: red;\n}\n\ncode {\n  color: var(--vscode-editor-foreground);\n}\n\nbody[data-vscode-theme-id=\"One Dark Pro\"] {\n    background: hotpink;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Test Modules for VS Code Extensions\nDESCRIPTION: This snippet shows how to install the necessary npm modules for testing VS Code extensions. It installs @vscode/test-cli for the command-line interface and @vscode/test-electron for running tests in VS Code Desktop.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vscode/test-cli @vscode/test-electron\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Test Generation Instructions in settings.json (JSON)\nDESCRIPTION: This JSON snippet shows how to configure custom instructions specifically for GitHub Copilot's test generation feature in the VS Code `settings.json` file. It utilizes the `github.copilot.chat.testGeneration.instructions` setting, allowing users to specify preferred testing frameworks (like vitest or Jest) and reference external style guides (like `code-style.md`) through `text` and `file` properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n  \"github.copilot.chat.testGeneration.instructions\": [\n    {\n      \"text\": \"Always use vitest for testing React components.\"\n    },\n    {\n      \"text\": \"Use Jest for testing JavaScript code.\"\n    },\n    {\n      \"file\": \"code-style.md\" // import instructions from file `code-style.md`\n    }\n  ],\n```\n```\n\n----------------------------------------\n\nTITLE: npm IntelliSense Demonstration\nDESCRIPTION: Showcase of npm IntelliSense extension providing autocompletion for npm modules in import/require statements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: gif\nCODE:\n```\nnpm_intellisense.gif\n```\n\n----------------------------------------\n\nTITLE: Listening for Terminal Shell Execution End Events - VS Code Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the VS Code terminal shell integration API to react to terminal command completions, specifically for \\\"git\\\" commands. The event listener receives an event object with command line information and exit code, allowing the extension to handle success or failure cases differently. The only requirement is using the new shell integration API, which provides detailed event data for terminal command executions. The main parameters are the event object with commandLine and exitCode properties; no external dependencies beyond the VS Code API are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nwindow.onDidEndTerminalShellExecution(event => {\n    if (event.execution.commandLine.value.startsWith('git')) {\n        if (event.exitCode === 0) {\n            // React to a successful git command\n        } else {\n            // React to a failing git command\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Python Dev Container Configuration\nDESCRIPTION: An elaborate devcontainer.json configuration for Python development that references a Dockerfile, installs Python extension, and establishes container-specific settings including linting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/27/containers-edu.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Python 3\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"context\": \"..\"\n  },\n  \"extensions\": [\"ms-python.python\"],\n  \"settings\": {\n    \"python.linting.enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Extension Test Runner (TypeScript)\nDESCRIPTION: TypeScript code for a test runner script used in web extension testing. It sets up Mocha for web testing and imports all test files in the current directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequire('mocha/mocha'); // import the mocha web build\n\nexport function run(): Promise<void> {\n\n  return new Promise((c, e) => {\n    mocha.setup({\n      ui: 'tdd',\n      reporter: undefined\n    });\n\n    // bundles all files in the current directory matching `*.test`\n    const importAll = (r: __WebpackModuleApi.RequireContext) => r.keys().forEach(r);\n    importAll(require.context('.', true, /\\.test$/));\n\n    try {\n      // Run the mocha test\n      mocha.run(failures => {\n        if (failures > 0) {\n          e(new Error(`${failures} tests failed.`));\n        } else {\n          c();\n        }\n      });\n    } catch (err) {\n      console.error(err);\n      e(err);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Copilot Next Edit Suggestions (NES) (VS Code Setting)\nDESCRIPTION: Enables or disables the Copilot Next Edit Suggestions (Copilot NES) feature within Visual Studio Code. Copilot NES provides suggestions for subsequent code edits based on the current context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_6\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(github.copilot.nextEditSuggestions.enabled)\n```\n\n----------------------------------------\n\nTITLE: Running debugpy Command Line Example for Local Debugging\nDESCRIPTION: Example command to start the debugpy debugger on port 5678 for a Python script. This configuration starts the debugger immediately without waiting for a client to attach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m debugpy --listen 5678 ./myscript.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Attach Skip Files in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `debug.javascript.terminalOptions` setting in VS Code's user or workspace settings. It makes the Auto Attach feature skip internal Node.js files (`<node_internals>/**`) during debugging sessions initiated from the integrated terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"debug.javascript.terminalOptions\": {\n    \"skipFiles\": [\n      \"<node_internals>/**\"\n    ]\n  },\n```\n\n----------------------------------------\n\nTITLE: Creating main method in Java with VS Code Snippets\nDESCRIPTION: A code snippet showing the output of typing 'main' or 'psvm' in VS Code, which generates a public static void main method with String args parameter. This is the entry point for Java applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/java.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Terminal Completion Providers (Proposed API)\nDESCRIPTION: References the proposed VS Code API definition (`vscode.proposed.terminalCompletionProvider.d.ts`) that allows extensions to register custom providers for terminal auto-completions. This enables extensions to contribute suggestions to the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nregister a terminal completion provider\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent on Linux\nDESCRIPTION: Bash commands to start the SSH agent in the background on Linux and configure it to start automatically on login.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(ssh-agent -s)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nif [ -z \"$SSH_AUTH_SOCK\" ]; then\n   # Check for a currently running instance of the agent\n   RUNNING_AGENT=\"`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`\"\n   if [ \"$RUNNING_AGENT\" = \"0\" ]; then\n        # Launch a new instance of the agent\n        ssh-agent -s &> .ssh/ssh-agent\n   fi\n   eval `cat .ssh/ssh-agent`\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch via npm Script (JSON)\nDESCRIPTION: This launch.json configuration demonstrates how to launch and debug a Node.js application using an npm script defined in package.json. It sets the 'runtimeExecutable' to 'npm', specifies 'run-script' and the script name ('debug') in 'runtimeArgs', and sets the current working directory to the workspace folder. This allows debugging the program executed by the 'debug' npm script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Launch via npm\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"cwd\": \"${workspaceFolder}\",\n    \"runtimeExecutable\": \"npm\",\n    \"runtimeArgs\": [\n        \"run-script\", \"debug\"\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @workspace Chat Participant in Copilot\nDESCRIPTION: The '@workspace' chat participant in GitHub Copilot allows users to ask questions specifically about the code within their current project workspace. Its functionality relies either on GitHub's code search capabilities or a locally constructed index within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_3\n\nLANGUAGE: copilot-chat\nCODE:\n```\n@workspace\n```\n\n----------------------------------------\n\nTITLE: Checking for Writable File System in VSCode Extensions\nDESCRIPTION: Implementation of the new fs.isWritableFileSystem API in VSCode that allows extensions to check if a given file system supports writing operations. This is particularly useful for custom editors to determine if they should show a readonly UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nswitch (vscode.fs.isWritableFileSystem('example')) {\n  case true:\n    // The `example` filesystem supports writing.\n    // Keep in mind the permissions or other issues may still prevent\n    // a file from being written.\n    break;\n\n  case false:\n    // The `example` filesystem does not support writing (it is readonly).\n    break;\n\n  case undefined:\n    // VS Code does not know about the `example` filesystem\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal devcontainer.json with Pre-built Image Reference\nDESCRIPTION: A simplified devcontainer.json that references a pre-built image. This approach inherits all the metadata and configuration from the image itself, making the configuration much simpler.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/go:1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruff as Default Python Formatter in VS Code\nDESCRIPTION: Configuration snippet showing how to set Ruff as the default formatter for Python files in VS Code settings.json\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"[python]\": { \"editor.defaultFormatter\": \"charliermarsh.ruff\" }\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Quick Fix\nDESCRIPTION: Represents the keyboard shortcut command `editor.action.quickFix` used in VS Code to trigger available Quick Fixes or Code Actions for the current cursor position or line, often suggested by linters like rustc or clippy via rust-analyzer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.quickFix)\n```\n\n----------------------------------------\n\nTITLE: Python Development Container Dockerfile\nDESCRIPTION: A Dockerfile configuration for Python development showing the base image specification and additional setup instructions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/27/containers-edu.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3\n\n# [Optional] If your requirements rarely change, uncomment this section to add them to the image.\n# COPY requirements.txt /tmp/pip-tmp/\n# RUN pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.txt \\\n#    && rm -rf /tmp/pip-tmp\n```\n\n----------------------------------------\n\nTITLE: Structuring tasks.json with Input Variables in JSON\nDESCRIPTION: Demonstrates the fundamental syntax for incorporating input variables within a VS Code `tasks.json` file. It shows how a task command can use `${input:variableID}` and how the corresponding variable is defined in the `inputs` array with its `id` and `type`. This structure allows tasks to receive dynamic input at runtime.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"task name\",\n            \"command\": \"${input:variableID}\",\n            // ...\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"variableID\",\n            \"type\": \"type of input variable\",\n            // type specific configuration attributes\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Debugging Configuration for Node.js\nDESCRIPTION: Launch configuration for attaching to a remote Node.js process running on a different machine or container. Specifies remote host address and port.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"name\": \"Attach to remote\",\n    \"address\": \"192.168.148.2\",\n    \"port\": 9229\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing a Basic Grammar Extension Configuration in JSON\nDESCRIPTION: Shows how to configure a VS Code extension to contribute a grammar for a fictional 'abc' language. This JSON demonstrates the required contribution points for registering both a language and its associated grammar.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"languages\": [\n      {\n        \"id\": \"abc\",\n        \"extensions\": [\".abc\"]\n      }\n    ],\n    \"grammars\": [\n      {\n        \"language\": \"abc\",\n        \"scopeName\": \"source.abc\",\n        \"path\": \"./syntaxes/abc.tmGrammar.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment - PowerShell\nDESCRIPTION: This code demonstrates activation of a Python virtual environment on Windows using PowerShell. Run this command in the root of your project. Before executing, ensure the 'venv' virtual environment has already been created. After execution, the environment becomes active, restricting package installs to the local environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n.\\venv\\Scripts\\activate   # On Windows\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Actions on Save\nDESCRIPTION: JSON configuration for enabling code actions on file save, including organize imports and auto-fixing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll\": \"explicit\",\n    \"source.organizeImports\": \"always\",\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Final Features and Dropping NaN Rows in Python\nDESCRIPTION: Filters the `data` DataFrame to retain only a specific subset of columns: 'sex', 'pclass', 'age', 'relatives', 'fare', and 'survived'. Subsequently, it removes any rows from this filtered DataFrame that contain missing values (NaN) in any of the selected columns using the `dropna()` method. This step prepares the final dataset for use in training a machine learning model by selecting relevant features and ensuring data completeness. Depends on the `data` DataFrame having undergone previous cleaning and feature engineering steps.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndata = data[['sex', 'pclass','age','relatives','fare','survived']].dropna()\n```\n\n----------------------------------------\n\nTITLE: Variable Type Management in C#\nDESCRIPTION: Examples showing refactoring between implicit (var) and explicit type declarations in C#. Demonstrates how to convert between var and specific type declarations to improve code readability and maintainability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/refactoring.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerAge = 42;    // Using implicit type\nint customerAge = 42;    // Using explicit type\n```\n\n----------------------------------------\n\nTITLE: Accessing Terminal Objects and Events - VS Code API - TypeScript\nDESCRIPTION: This code exports members of the VS Code 'window' namespace related to terminals, including an array of all Terminal objects and an event for terminal creation. Extension developers can use these APIs to monitor and interact with terminals regardless of whether they were created by the extension. No external dependencies are required besides the VS Code API. Outputs include terminal references and event registration hooks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace window {\n    export const terminals: ReadonlyArray<Terminal>;\n    export const onDidOpenTerminal: Event<Terminal>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Globally using npm (Bash)\nDESCRIPTION: Shows the npm command to install the TypeScript compiler (`tsc`) globally on the system using the Node Package Manager (npm). Requires Node.js and npm to be installed. The `-g` flag signifies a global installation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Editor Drop Behavior\nDESCRIPTION: Settings to control how VS Code handles dropping or pasting images and files into Markdown documents. These settings can enable or disable automatic insertion of Markdown syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nmarkdown.editor.drop.enabled\n```\n\nLANGUAGE: json\nCODE:\n```\nmarkdown.editor.filePaste.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring ServerReadyAction to Launch Browser on ASP.NET Start - Visual Studio Code - JSON\nDESCRIPTION: Configures the 'serverReadyAction' property in launch.json to automatically open an external browser when an ASP.NET Core application outputs a ready message to the console. This uses a regex pattern to match the URL provided at startup, capturing the relevant address. No external dependencies are required beyond VS Code with the C# extension; intended for .NET web app projects that print a listening URL. Main parameters are 'action' (always 'openExternally') and 'pattern' (regex to match URL). The snippet expects console output in a specific form and may require adjustment if output differs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"serverReadyAction\": {\n        \"action\": \"openExternally\",\n        \"pattern\": \"\\\\bNow listening on:\\\\s+(https?://\\\\S+)\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Packages using apt-get as Root (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to install software packages within a Debian/Ubuntu-based dev container using the `apt-get` package manager when running as the root user. It first updates the package list (`apt-get update`) and then installs a specified package (`apt-get install <package>`), replacing `<package>` with the actual package name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If running as root\napt-get update\napt-get install <package>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Input Box Validation in VS Code Extensions using TypeScript\nDESCRIPTION: Demonstrates how to use the `vscode.window.showInputBox` function with asynchronous validation in a VS Code extension. The `validateInput` option now accepts an async function, allowing potentially long-running operations to validate user input before accepting it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nvscode.window.showInputBox({\n  async validateInput(value) {\n    return await someLongRunningOperation(value);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring pipeTransport for SSH Remote Debugging in launch.json\nDESCRIPTION: This JSON snippet shows the structure of the 'pipeTransport' object within a launch.json file. It configures remote debugging by piping communication through an SSH connection. Key parameters include 'pipeCwd' (working directory for the pipe program), 'pipeProgram' (path to the SSH client), 'pipeArgs' (arguments for SSH, including authentication details like password or key file specification and the remote host), and 'debuggerPath' (path to the gdb debugger on the remote machine).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/pipe-transport.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"pipeTransport\": {\n    \"pipeCwd\": \"/usr/bin\",\n    \"pipeProgram\": \"/usr/bin/ssh\",\n    \"pipeArgs\": [\n        \"-pw\",\n        \"<password>\",\n        \"user@10.10.10.10\"\n    ],\n    \"debuggerPath\": \"/usr/bin/gdb\"\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing GotoDefinition Handler in Rust LSP Server\nDESCRIPTION: Rust code demonstrating how to handle GotoDefinition requests in a WebAssembly language server. The server returns a predefined location response for any goto definition request.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmatch cast::<GotoDefinition>(req) {\n    Ok((id, params)) => {\n        let uri = params.text_document_position_params.text_document.uri;\n        eprintln!(\"Received gotoDefinition request #{} {}\", id, uri.to_string());\n        let loc = Location::new(\n            uri,\n            lsp_types::Range::new(lsp_types::Position::new(0, 0), lsp_types::Position::new(0, 0))\n        );\n        let mut vec = Vec::new();\n        vec.push(loc);\n        let result = Some(GotoDefinitionResponse::Array(vec));\n        let result = serde_json::to_value(&result).unwrap();\n        let resp = Response { id, result: Some(result), error: None };\n        connection.sender.send(Message::Response(resp))?;\n        continue;\n    }\n    Err(err @ ExtractError::JsonError { .. }) => panic!(\"{err:?}\"),\n    Err(ExtractError::MethodMismatch(req)) => req,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands with Arguments (VS Code keybindings.json, JSON)\nDESCRIPTION: Demonstrates binding 'ctrl+n' to sequentially create a new untitled TypeScript file and insert a class snippet using 'runCommands'. Each command in 'commands' can include its own 'args' object for parameterization (e.g., languageId or snippet content). Enables multi-step automation from a single keybinding, requiring only VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+n\",\n  \"command\": \"runCommands\",\n  \"args\": {\n    \"commands\": [\n      {\n        \"command\": \"workbench.action.files.newUntitledFile\",\n        \"args\": {\n          \"languageId\": \"typescript\"\n        }\n      },\n      {\n        \"command\": \"editor.action.insertSnippet\",\n        \"args\": {\n          \"langId\": \"typescript\",\n          \"snippet\": \"class ${1:ClassName} {\\n\\tconstructor() {\\n\\t\\t$0\\n\\t}\\n}\"\n        }\n      }\n    ]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Adding URL Pattern in Django\nDESCRIPTION: Adds a URL route that accepts a name parameter and maps it to the hello_there view function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npath(\"hello/<name>\", views.hello_there, name=\"hello_there\"),\n```\n\n----------------------------------------\n\nTITLE: Configuring WebviewOptions with enabled commands in VS Code Extensions\nDESCRIPTION: Shows how to use the WebviewOptions.enableCommandUris property with a list of allowed commands. This restricts which commands can be executed from a webview, improving security compared to the boolean approach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: vscode.WebviewOptions = { enableCommandUris: ['workbench.action.openSettings'] };\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debug Protocol in VS Code Launch Configuration (JSON)\nDESCRIPTION: Specifies the debug protocol for Node.js launch configurations in VS Code's `launch.json`. The default changed from `legacy` to `auto` (which attempts auto-detection, using 'inspector' for Node.js 8.x+). Setting it explicitly to `legacy` reverts to the older protocol if issues arise with `auto`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"protocol\": \"auto\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"protocol\": \"legacy\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Timeline View in VS Code - JSON\nDESCRIPTION: This snippet shows how to enable the preview Timeline view in VS Code by setting the 'timeline.showView' configuration to true in your settings file. The Timeline visualizes time-series events (e.g., Git commits, saves) for resources. It requires the VS Code Insiders edition for access. The expected input is a boolean value, with 'true' turning on the Timeline view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"timeline.showView\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New VS Code Theme Colors (Configuration)\nDESCRIPTION: Provides a list of new theme color identifiers introduced in VS Code. These identifiers can be used in theme definitions or settings (`workbench.colorCustomizations`) to customize the appearance of specific UI elements, particularly for pinned tabs, Git decorations, and data visualizations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_50.md#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\ntab.lastPinnedBorder\ngitDecoration.stageDeletedResourceForeground\ngitDecoration.stageModifiedResourceForeground\ncharts.red\ncharts.blue\ncharts.yellow\ncharts.orange\ncharts.green\ncharts.purple\ncharts.foreground\ncharts.lines\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Django App Docker-Run Task (VS Code, JSON)\nDESCRIPTION: This JSON snippet defines a VS Code task for running a Django application inside a Docker container. The task omits the explicit 'platform' property, using the 'python' object to implicitly set Python mode. It specifies arguments to start Django's development server on all interfaces at port 8000, and references the Django entry point ('manage.py'). Required dependencies include a prior 'docker-build' task, and the configuration is minimal, supporting debugging scenarios. Input parameters include the Python arguments and file paths. Output is a running Django server in a Docker container available for debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"docker-run\\\",\\n    \\\"label\\\": \\\"docker-run: debug\\\",\\n    \\\"dependsOn\\\": [\\n      \\\"docker-build\\\"\\n    ],\\n    \\\"python\\\": {\\n      \\\"args\\\": [\\n        \\\"runserver\\\",\\n        \\\"0.0.0.0:8000\\\",\\n        \\\"--nothreading\\\",\\n        \\\"--noreload\\\"\\n      ],\\n      \\\"file\\\": \\\"path_to/manage.py\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Python Interpreter for Debugging in VS Code (launch.json)\nDESCRIPTION: References the `python` property within a debug configuration in `launch.json`. When defined with a specific interpreter path, this property dictates the Python interpreter used for that particular debugging session, taking precedence over the workspace's selected interpreter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n`python` property\n```\n\n----------------------------------------\n\nTITLE: Contributing Configuration Settings in VS Code Extension\nDESCRIPTION: JSON configuration for exposing customizable settings to users through the Settings editor or settings.json file. Includes examples of boolean and string settings with default values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"configuration\": {\n      \"title\": \"Settings Editor Test Extension\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"settingsEditorTestExtension.booleanExample\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Boolean Example\"\n        },\n        \"settingsEditorTestExtension.stringExample\": {\n          \"type\": \"string\",\n          \"default\": \"Hello World\",\n          \"description\": \"String Example\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Exception Breakpoint to Ignore TaskCanceledException\nDESCRIPTION: This example condition value configures the C# debugger in VS Code to break on *all* exceptions *except* for `System.Threading.Tasks.TaskCanceledException`. The '!' prefix indicates an exclusion list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n!System.Threading.Tasks.TaskCanceledException\n```\n\n----------------------------------------\n\nTITLE: Setting Icon for Terminals Created via VS Code Extension API\nDESCRIPTION: This snippet shows how to set an icon for a terminal created using the VS Code extension API. It uses the createTerminal method with an iconPath option to associate an icon with the terminal tab.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst term = vscode.window.createTerminal({\n  name: `Serve`,\n  iconPath: new vscode.ThemeIcon('server-process')\n});\nterm.show();\n```\n\n----------------------------------------\n\nTITLE: Declaring the Extension Global Storage Path Property (TypeScript)\nDESCRIPTION: TypeScript type declaration for the `ExtensionContext.globalStoragePath` property. This provides an absolute file path where an extension can store global state (large files, etc.) accessible across all workspaces. VS Code manages the cleanup of this path on extension removal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * An absolute file path in which the extension can store global state.\n * The directory might not exist on disk and creation is\n * up to the extension. However, the parent directory is guaranteed to be existent.\n *\n * Use [`globalState`](#ExtensionContext.globalState) to store key value data.\n */\nglobalStoragePath: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring `onEnterRules` in Language Configuration File (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define `onEnterRules` directly within a language configuration file, a feature newly enabled in this version. It specifies a rule where if the line before the cursor matches the `beforeText` regular expression (targeting lines starting with common Python keywords followed by a colon), pressing Enter triggers the `indent` action, automatically indenting the new line. This allows declarative definition of language-specific indentation behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"onEnterRules\": [\n    {\n      \"beforeText\": \"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\",\n      \"action\": { \"indent\": \"indent\" }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using ESLint Extension\nDESCRIPTION: Demonstration of ESLint extension functionality in VS Code for real-time JavaScript linting and error detection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: gif\nCODE:\n```\neslint.gif\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Pick Items with Buttons\nDESCRIPTION: Proposed API for adding interactive buttons to QuickPickItems, enabling richer user interactions in the Quick Pick interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nQuickPickItem\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch for LLDB Debugging (JSON)\nDESCRIPTION: Provides a sample `launch.json` configuration entry for the VS Code C/C++ extension to debug C/C++ applications on macOS using the `lldb` debugger via `lldb-mi`. It specifies the program to launch (`a.out` in the workspace folder), arguments, working directory, and other basic debugging options like `stopAtEntry` and `externalConsole`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/lldb-mi.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"configurations\": [\n    {\n        \"name\": \"Launch (lldb)\",\n        \"type\": \"cppdbg\",\n        \"request\": \"launch\",\n        \"program\": \"${workspaceFolder}/a.out\",\n        \"args\": [],\n        \"stopAtEntry\": false,\n        \"cwd\": \"${workspaceFolder}\",\n        \"environment\": [],\n        \"externalConsole\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating an OpenSSH Key Pair in Bash\nDESCRIPTION: This snippet generates a new SSH key pair using the Ed25519 algorithm in a bash shell, which is recommended for secure and convenient authentication with remote Linux VMs. No additional dependencies are required beyond the OpenSSH client, commonly present on most Unix-like systems. By default, the generated keys are placed in the \\\"~/.ssh\\\" directory, and the command optionally allows specifying an alternative algorithm such as RSA for legacy compatibility. Input: No arguments required unless customizing key type or output path; Output: New public and private key files (id_ed25519 and id_ed25519.pub).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519\n```\n\n----------------------------------------\n\nTITLE: Configuring Always Forwarded Ports in devcontainer.json (JSON)\nDESCRIPTION: Defines an array of ports (`[3000, 3001]`) within the `forwardPorts` property in `devcontainer.json`. This ensures these specific ports inside the container are automatically forwarded to the local host upon connecting to the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"forwardPorts\": [3000, 3001]\n```\n\n----------------------------------------\n\nTITLE: Cloning a Sample Repository and Starting a Dev Container - Bash\nDESCRIPTION: Clones a Rust sample repository and brings up a dev container project using the CLI. Prerequisites include having git installed and the devcontainer CLI available. The path parameter specifies the local folder path for the project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-remote-try-rust\ndevcontainer up --workspace-folder <path-to-vscode-remote-try-rust>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Box Validation with Severity - TypeScript\nDESCRIPTION: Example showing how to add severity levels to input box validation messages using the proposed InputBoxValidationSeverity API. This allows displaying validation messages with different severity indicators like Info.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ content: 'this is an info message'; severity: InputBoxValidationSeverity.Info }\n```\n\n----------------------------------------\n\nTITLE: Workspace Schema Mapping Configuration\nDESCRIPTION: Settings example demonstrating how to map local workspace schema files to specific JSON file patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"json.schemas\": [\n    {\n        \"fileMatch\": [\n            \"**/*.foo.json\"\n        ],\n        \"url\": \"./myschema.json\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Contributing View Containers and Views in VS Code Extensions\nDESCRIPTION: JSON configuration for contributing custom view containers to VS Code's Activity Bar and organizing views within them. The example shows how to create a 'Package Explorer' container with 'Dependencies' and 'Outline' views.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"viewsContainers\": {\n      \"activitybar\": [\n        {\n          \"id\": \"package-explorer\",\n          \"title\": \"Package Explorer\",\n          \"icon\": \"resources/package-explorer.svg\"\n        }\n      ]\n    },\n    \"views\": {\n      \"package-explorer\": [\n        {\n          \"id\": \"package-dependencies\",\n          \"name\": \"Dependencies\"\n        },\n        {\n          \"id\": \"package-outline\",\n          \"name\": \"Outline\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Dependencies in requirements.txt - Text\nDESCRIPTION: This snippet lists the essential dependencies for a Python FastAPI project in a requirements.txt file. It specifies FastAPI for creating the web app, uvicorn as the ASGI server, redis and types-redis for Redis database interaction and type hints. Required for recreating a consistent development environment and ensuring that all contributors install the necessary libraries before running or developing the application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nfastapi\\nredis\\ntypes-redis\\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Querying Codebase Context using #codebase Variable (Text)\nDESCRIPTION: This text snippet shows how to use the `#codebase` variable within a Copilot chat prompt. It allows users to ask questions about the entire indexed workspace, such as locating where a specific configuration like the database connection string is used across all files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-tips-and-tricks.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n```text\nWhere is the database connection string used in #codebase?\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Proposed Password Storage API in TypeScript\nDESCRIPTION: This proposed TypeScript API provides functions for securely storing (`setPassword`), retrieving (`getPassword`), and deleting (`deletePassword`) sensitive information like passwords. It leverages the underlying OS credential store via the Keytar library. An `onDidChangePassword` event is available to notify extensions about changes. Use requires enabling proposed APIs in the extension's `package.json` and using VS Code Insiders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_51.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\t/**\n\t * Retrieve a password that was stored with key. Returns undefined if there\n\t * is no password matching that key.\n\t * @param key The key the password was stored under.\n\t */\n\texport function getPassword(key: string): Thenable<string | undefined>;\n\n\t/**\n\t * Store a password under a given key.\n\t * @param key The key to store the password under\n\t * @param value The password\n\t */\n\texport function setPassword(key: string, value: string): Thenable<void>;\n\n\t/**\n\t * Remove a password from storage.\n\t * @param key The key the password was stored under.\n\t */\n\texport function deletePassword(key: string): Thenable<void>;\n\n\t/**\n\t * Fires when a password is set or deleted.\n\t */\n\texport const onDidChangePassword: Event<void>\n```\n\n----------------------------------------\n\nTITLE: Compound Launch Configuration in launch.json\nDESCRIPTION: This snippet demonstrates a compound launch configuration that starts multiple debug sessions in parallel. It includes configurations for both a server and a client, along with a pre-launch task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Server\",\n            \"program\": \"${workspaceFolder}/server.js\"\n        },\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Client\",\n            \"program\": \"${workspaceFolder}/client.js\"\n        }\n    ],\n    \"compounds\": [\n        {\n            \"name\": \"Server/Client\",\n            \"configurations\": [\"Server\", \"Client\"],\n            \"preLaunchTask\": \"${defaultBuildTask}\",\n            \"stopAll\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Debug for .NET in launch.json\nDESCRIPTION: Launch configuration for debugging a .NET application in a Docker container using a Dockerfile approach. Specifies the application project file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-common.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch .NET Core in Docker\",\n            \"type\": \"docker\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"Run Docker Container\",\n            \"netCore\": {\n                \"appProject\": \"${workspaceFolder}/project.csproj\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Node.js Docker Debugging\nDESCRIPTION: JSON configuration for VS Code launch.json to enable debugging Node.js applications in Docker containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"configurations\": [\n    {\n        \"type\": \"node\",\n        \"request\": \"attach\",\n        \"name\": \"Docker: Attach to Node\",\n        \"remoteRoot\": \"/usr/src/app\",\n        \"port\": 9229 // Optional; otherwise inferred from the docker-compose.debug.yml.\n    },\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Copilot Chat Context Variables\nDESCRIPTION: Variables prefixed with `#` used in Copilot Chat prompts to dynamically include specific context, enhancing the relevance of Copilot's responses. Examples include referencing source control changes (`#changes`), workspace content (`#codebase`), web page content (`#fetch`), specific files (`#file`, `#<filename>`), folders (`#folder`), workspace problems (`#problems`), search results (`#searchResults`), editor selections (`#selection`), symbols (`#sym`, `#<symbol>`), terminal selections (`#terminalSelection`), the last terminal command (`#terminalLastCommand`), test failures (`#testFailure`), symbol usages (`#usages`), and the VS Code API (`#VSCodeAPI`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_2\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#changes\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#codebase\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#fetch\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#file\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#<filename>\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#folder\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#problems\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#searchResults\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#selection\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#sym\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#<symbol>\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#terminalSelection\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#terminalLastCommand\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#testFailure\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#usages\n```\n\nLANGUAGE: copilot-chat\nCODE:\n```\n#VSCodeAPI\n```\n\n----------------------------------------\n\nTITLE: Using the Workspace Trust API in VS Code Extensions\nDESCRIPTION: This code snippet shows the Workspace Trust API available to extension developers. It provides a boolean property to check if a workspace is trusted and an event that fires when trust is granted to the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/workspace-trust.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace workspace {\n  /**\n    * When true, the user has explicitly trusted the contents of the workspace.\n    */\n  export const isTrusted: boolean;\n\n  /**\n    * Event that fires when the current workspace has been trusted.\n    */\n  export const onDidGrantWorkspaceTrust: Event<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Items using Redis in FastAPI\nDESCRIPTION: A FastAPI route that deletes an item from a Redis database by its ID. It checks if the item exists, retrieves the item name, removes references in Redis hashes, and returns a success message.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: int) -> dict[str, str]:\n    if not redis_client.hexists(f\"item_id:{item_id}\", \"item_id\"):\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\n    else:\n        item_name: str | None = redis_client.hget(f\"item_id:{item_id}\", \"item_name\")\n        redis_client.hdel(\"item_name_to_id\", f\"{item_name}\")\n        redis_client.delete(f\"item_id:{item_id}\")\n        return {\"result\": \"Item deleted.\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling unittest Testing in VS Code (settings.json)\nDESCRIPTION: Enables the unittest framework for Python testing within VS Code. This setting should be configured in the User or Workspace `settings.json` file. When enabled, VS Code will attempt to discover unittest tests based on configured patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"python.testing.unittestEnabled\": true\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Implementation with WebAssembly Integration\nDESCRIPTION: TypeScript code showing how to integrate and use the WebAssembly calculator component within a VS Code extension, including module loading and command registration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport { WasmContext, Memory } from '@vscode/wasm-component-model';\n\n// Import the code generated by wit2ts\nimport { calculator, Types } from './calculator';\n\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n\t// The channel for printing the result.\n\tconst channel = vscode.window.createOutputChannel('Calculator');\n\tcontext.subscriptions.push(channel);\n\n\t// Load the Wasm module\n\tconst filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'calculator.wasm');\n\tconst bits = await vscode.workspace.fs.readFile(filename);\n\tconst module = await WebAssembly.compile(bits);\n\n\t// The context for the WASM module\n\tconst wasmContext: WasmContext.Default = new WasmContext.Default();\n\n\t// Instantiate the module\n\tconst instance = await WebAssembly.instantiate(module, {});\n\t// Bind the WASM memory to the context\n\twasmContext.initialize(new Memory.Default(instance.exports));\n\n\t// Bind the TypeScript Api\n\tconst api = calculator._.exports.bind(instance.exports as calculator._.Exports, wasmContext);\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('vscode-samples.wasm-component-model.run', () => {\n\t\tchannel.show();\n\t\tchannel.appendLine('Running calculator example');\n\t\tconst add = Types.Operation.Add({ left: 1, right: 2});\n\t\tchannel.appendLine(`Add ${api.calc(add)}`);\n\t\tconst sub = Types.Operation.Sub({ left: 10, right: 8 });\n\t\tchannel.appendLine(`Sub ${api.calc(sub)}`);\n\t\tconst mul = Types.Operation.Mul({ left: 3, right: 7 });\n\t\tchannel.appendLine(`Mul ${api.calc(mul)}`);\n\t\tconst div = Types.Operation.Div({ left: 10, right: 2 });\n\t\tchannel.appendLine(`Div ${api.calc(div)}`);\n\t}));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Discovery with outFiles in launch.json (JSON)\nDESCRIPTION: This launch configuration snippet shows how to use the `outFiles` attribute to specify the location(s) of compiled JavaScript files. This helps VS Code efficiently discover corresponding source maps, improving performance in large workspaces by limiting the search scope.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch TypeScript\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"app.ts\",\n            \"outFiles\": [ \"${workspaceFolder}/bin/**/*.js\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Restart Debug Configuration for Nodemon\nDESCRIPTION: Launch configuration for attaching VS Code debugger to a Node.js process with automatic restart capability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to node\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"restart\": true,\n    \"port\": 9229\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Commands in VS Code Extension\nDESCRIPTION: JSON configuration for contributing commands with titles, categories, and icons. Commands appear in the Command Palette and can be shown in other menus with proper configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"extension.sayHello\",\n        \"title\": \"Hello World\",\n        \"category\": \"Hello\",\n        \"icon\": {\n          \"light\": \"path/to/light/icon.svg\",\n          \"dark\": \"path/to/dark/icon.svg\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PipeTransport for Remote Debugging (JSON)\nDESCRIPTION: This snippet describes how to set up a 'pipeTransport' section for remote debugging scenarios, such as connecting to another computer via SSH. The configuration specifies the relay program ('pipeProgram'), arguments, remote debugger path, working directory, and whether to quote arguments. Useful for remote Linux, macOS, or WSL debugging. All properties must be set to valid executable paths and credentials as needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pipeTransport\": {\n        \"pipeProgram\": \"ssh\",\n        \"pipeArgs\": [ \"-T\", \"ExampleAccount@ExampleTargetComputer\" ],\n        \"debuggerPath\": \"~/vsdbg/vsdbg\",\n        \"pipeCwd\": \"${workspaceFolder}\",\n        \"quoteArgs\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git using apt-get with sudo (Bash)\nDESCRIPTION: This Bash code snippet demonstrates the specific commands to install Git within a Debian/Ubuntu-based dev container using `sudo`. It first updates the package list with `sudo apt-get update` and then installs the `git` package using `sudo apt-get install git`. This assumes the user has `sudo` privileges configured in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# If sudo is installed and configured\nsudo apt-get update\n# Install Git\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Development Server in Bash\nDESCRIPTION: Executes the Flask development server using the Python module execution (`-m flask`). By default, Flask looks for an application instance named `app` in a file named `app.py` within the current directory. This command should be run from the terminal within the project directory where `app.py` resides and the virtual environment is active.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m flask run\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Terminal with Extension Terminal API in VS Code\nDESCRIPTION: TypeScript code demonstrating how to create a custom terminal using the new extension terminal API. This example creates a Pseudoterminal that displays \"Hello world\" in red text when opened, showing the full control extensions now have over terminal input and output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeEmitter = new vscode.EventEmitter<string>();\nconst pty: vscode.Pseudoterminal = {\n  onDidWrite: writeEmitter.event,\n  open: () => writeEmitter.fire('\\x1b[31mHello world\\x1b[0m'),\n  close: () => {}\n};\nvscode.window.createTerminal({ name: 'My terminal', pty });\n```\n\n----------------------------------------\n\nTITLE: Manually Adding VS Code APT Repository on Debian/Ubuntu\nDESCRIPTION: Provides the necessary commands to manually download the Microsoft GPG key using `wget` and `gpg`, add it to the system's trusted keyrings (`/etc/apt/keyrings/`), create the APT source list file (`/etc/apt/sources.list.d/vscode.list`), and clean up the downloaded key file. Requires `wget` and `gpg` to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install wget gpg\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\nsudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\necho \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" |sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null\nrm -f packages.microsoft.gpg\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Science Profile Template Settings in VS Code (JSON)\nDESCRIPTION: This JSON snippet configures VS Code settings tailored for the Data Science Profile Template. It sets Ruff as the default formatter for Python files, enables format on type and save, activates inline suggestions, adjusts line height, disables breadcrumbs, enables auto-save after delay, enables notebook output scrolling, themes matplotlib plots, specifies widget script sources, and excludes common data file extensions (.csv, .parquet, .pkl, .xls) from the file explorer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n        \"editor.formatOnType\": true,\n        \"editor.formatOnSave\": true\n    },\n    \"editor.inlineSuggest.enabled\": true,\n    \"editor.lineHeight\": 17,\n    \"breadcrumbs.enabled\": false,\n    \"files.autoSave\": \"afterDelay\",\n    \"notebook.output.scrolling\": true,\n    \"jupyter.themeMatplotlibPlots\": true,\n    \"jupyter.widgetScriptSources\": [\n        \"unpkg.com\",\n        \"jsdelivr.com\"\n    ],\n    \"files.exclude\": {\n        \"**/.csv\": true,\n        \"**/.parquet\": true,\n        \"**/.pkl\": true,\n        \"**/.xls\": true\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Basic jsconfig.json with Exclude Pattern\nDESCRIPTION: Basic configuration example showing how to exclude node_modules from the JavaScript project using the exclude property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/jsconfig.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\"\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Test Task in tasks.json (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to define a default test task within VS Code's `tasks.json` file. It sets up an `npm` task that executes the `test` script, explicitly marking it as the default task for the 'test' group (`\"isDefault\": true`). The `detail` field clarifies the underlying command (`node --test`). This configuration enables users to run their test suite using the 'Tasks: Run Test Task' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n\t\t\t\"type\": \"npm\",\n\t\t\t\"script\": \"test\",\n\t\t\t\"group\": {\n\t\t\t\t\"kind\": \"test\",\n\t\t\t\t\"isDefault\": true\n\t\t\t},\n\t\t\t\"problemMatcher\": [],\n\t\t\t\"label\": \"npm: test\",\n\t\t\t\"detail\": \"node --test src/tests/**.js\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Document Change Events in VS Code Custom Editors\nDESCRIPTION: This code demonstrates the sequence of firing custom document change events to VS Code, which enables tracking document modifications. These events allow VS Code to mark documents as dirty and manage undo/redo operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/custom-editors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonDidChangeCustomDocument(a);\nonDidChangeCustomDocument(b);\nonDidChangeCustomDocument(c);\n```\n\n----------------------------------------\n\nTITLE: Implementing Terminal Command Execution Listener in TypeScript\nDESCRIPTION: Example showing how to listen for successful git push commands in the terminal and trigger a refresh. Uses the new terminal command execution API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposables = [];\ndisposables.push(window.onDidExecuteTerminalCommand(command => {\n  if (command.commandLine.startsWith('git push') && command.exitCode === 0) {\n    refreshState();\n  }\n}));\nfunction refreshState() { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Plugin Dependency in package.json (JSON)\nDESCRIPTION: This JSON snippet shows how the TypeScript server plugin (e.g., `typescript-styled-plugin`) contributed by the extension must be declared as an NPM dependency within the extension's `package.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"typescript-styled-plugin\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Definitions Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet illustrates how to define a custom task structure using `contributes.taskDefinitions` in `package.json`. It defines an `npm` task type, specifies required properties (`script`) using JSON Schema syntax, and defines optional properties (`path`) along with their descriptions and types. This allows extensions to contribute uniquely identifiable tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskDefinitions\": [\n    {\n      \"type\": \"npm\",\n      \"required\": [\"script\"],\n      \"properties\": {\n        \"script\": {\n          \"type\": \"string\",\n          \"description\": \"The script to execute\"\n        },\n        \"path\": {\n          \"type\": \"string\",\n          \"description\": \"The path to the package.json file. If omitted the package.json in the root of the workspace folder is used.\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Python Environment Locator Configuration\nDESCRIPTION: Configuration setting to enable the new Python environment discovery using python-environment-tools by setting the locator to 'native' in user settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"python.locator\": \"native\"\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Console Colors in VS Code Themes\nDESCRIPTION: Provides the configuration keys for customizing the foreground colors of different message types (info, warning, error, source filenames) and the input marker icon within the VS Code Debug REPL Console. These identifiers are used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n- `debugConsole.infoForeground`: Foreground color for info messages in debug REPL console.\n- `debugConsole.warningForeground`: Foreground color for warning messages in debug REPL console.\n- `debugConsole.errorForeground`: Foreground color for error messages in debug REPL console.\n- `debugConsole.sourceForeground`: Foreground color for source filenames in debug REPL console.\n- `debugConsoleInputIcon.foreground`: Foreground color for debug console input marker icon.\n```\n\n----------------------------------------\n\nTITLE: Importing Express Module in TypeScript (Causing Error)\nDESCRIPTION: This TypeScript code snippet attempts to import the 'express' module. In the context of the document, this line contains a compiler error (indicated by a red squiggle) because the 'express' dependency might be missing or improperly configured. The user is guided to use the 'Fix using Copilot' AI feature to resolve this issue, which might suggest installing the necessary npm package.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\n```\n\n----------------------------------------\n\nTITLE: Creating Terminal with Custom Message in TypeScript\nDESCRIPTION: TypeScript code that demonstrates how to create a terminal with a custom styled message. The example uses ANSI escape sequences to apply italic and bold styling to the message displayed at the top of the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.createTerminal({\n  name: `My terminal`,\n  message: '\\x1b[3;1mSome custom message\\x1b[0m'\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Directory in tsconfig.json (JSON)\nDESCRIPTION: This `tsconfig.json` configuration builds upon the previous example by adding the `outDir` compiler option. Setting `\"outDir\": \"out\"` instructs the TypeScript compiler to place all generated JavaScript files into a subdirectory named `out`, helping to keep the project structure clean.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"CommonJS\",\n        \"outDir\": \"out\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Code Shifting for Copilot NES (VS Code Setting)\nDESCRIPTION: Configures whether Copilot Next Edit Suggestions (NES) is permitted to shift existing code lines vertically to accommodate and display its multi-line suggestions within the Visual Studio Code editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_7\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(editor.inlineSuggest.edits.allowCodeShifting)\n```\n\n----------------------------------------\n\nTITLE: Bundling a Single-File Web Worker with webpack (JavaScript, webpack config)\nDESCRIPTION: This webpack configuration ensures that a web worker intended to run in a webview is bundled into a single file using LimitChunkCountPlugin. The config targets 'webworker', specifies the entry point and output, and enforces maxChunks: 1 to prevent splitting. The configuration requires webpack, webpack.optimize, and path modules. Inputs are the entry JS file and output directory; output is a bundled worker.js suitable for use with 'blob:' URLs inside a webview. This approach avoids unsupported dynamic imports or importScripts in the worker environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  target: 'webworker',\n  entry: './worker/src/index.js',\n  output: {\n    filename: 'worker.js',\n    path: path.resolve(__dirname, 'media'),\n  },\n  plugins: [\n    new webpack.optimize.LimitChunkCountPlugin({\n      maxChunks: 1,\n    }),\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a TypeScript Plugin from Extension Code (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how a VS Code extension can send configuration data to its contributed TypeScript server plugin. It involves getting the built-in TypeScript extension's API (`vscode.extensions.getExtension`, `tsExtension.exports.getAPI`) and then using `api.configurePlugin` with the plugin ID and the configuration object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// In your VS Code extension\n\nexport async function activate(context: vscode.ExtensionContext) {\n  // Get the TS extension\n  const tsExtension = vscode.extensions.getExtension('vscode.typescript-language-features');\n  if (!tsExtension) {\n    return;\n  }\n\n  await tsExtension.activate();\n\n  // Get the API from the TS extension\n  if (!tsExtension.exports || !tsExtension.exports.getAPI) {\n    return;\n  }\n\n  const api = tsExtension.exports.getAPI(0);\n  if (!api) {\n    return;\n  }\n\n  // Configure the 'my-typescript-plugin-id' plugin\n  api.configurePlugin('my-typescript-plugin-id', {\n    someValue: process.env['SOME_VALUE']\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple AWT GUI Window - Java\nDESCRIPTION: This Java code snippet demonstrates how to create a basic AWT Frame with a single button in Visual Studio Code. To run this, ensure that AWT development is enabled as described above by using the Java: Help Center in VS Code and updating the filter setting if prompted. The application creates a window containing a button, uses a FlowLayout, and implements proper window closing using a WindowAdapter. The main method instantiates the \"AwtExample\" frame, displaying the GUI. No external dependencies are required, but at least a JDK with AWT support is necessary.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-gui.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class AwtExample extends Frame {\n  public AwtExample() {\n    Button btn = new Button(\"Button\");\n    btn.setBounds(50, 50, 50, 50);\n    add(btn);\n    setSize(150, 150);\n    setTitle(\"This is my First AWT example\");\n    setLayout(new FlowLayout());\n    setVisible(true);\n    addWindowListener(new WindowAdapter() {\n        public void windowClosing(WindowEvent we) {\n            dispose();\n        }\n    });\n  }\n\n  public static void main(String args[]){\n    new AwtExample();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Nodemon Launch Configuration\nDESCRIPTION: Launch configuration to start a Node.js application directly with nodemon from VS Code and attach the debugger.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Launch server.js via nodemon\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"runtimeExecutable\": \"nodemon\",\n    \"program\": \"${workspaceFolder}/server.js\",\n    \"console\": \"integratedTerminal\",\n    \"internalConsoleOptions\": \"neverOpen\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using __init__.py for Package Discovery (Python)\nDESCRIPTION: Explains the role of `__init__.py` files in Python test discovery. Placing an empty `__init__.py` file within a subfolder containing tests makes that folder recognizable as a Python package, allowing tests within it to be imported and discovered by testing frameworks like unittest and pytest.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an empty file named __init__.py in a test subfolder\n# to ensure tests within that folder are discoverable.\n# Example folder structure:\n# project/\n# ├── tests/\n# │   ├── __init__.py  <-- Makes 'tests' a package\n# │   ├── test_feature.py\n# │   └── subfolder/\n# │       ├── __init__.py  <-- Makes 'subfolder' a package\n# │       └── test_sub_feature.py\n# ...\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page Template to Display Logged Messages in Django\nDESCRIPTION: Defines an HTML template for the home page that displays a table of logged messages if any exist, otherwise shows a message to log new entries.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"hello/layout.html\" %}\n{% block title %}\n    Home\n{% endblock %}\n{% block content %}\n    <h2>Logged messages</h2>\n\n    {% if message_list %}\n        <table class=\"message_list\">\n            <thead>\n            <tr>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Message</th>\n            </tr>\n            </thead>\n            <tbody>\n            {% for message in message_list %}\n                <tr>\n                    <td>{{ message.log_date | date:'d M Y' }}</td>\n                    <td>{{ message.log_date | time:'H:i:s' }}</td>\n                    <td>\n                        {{ message.message }}\n                    </td>\n                </tr>\n            {% endfor %}\n            </tbody>\n        </table>\n    {% else %}\n        <p>No messages have been logged. Use the <a href=\"{% url 'log' %}\">Log Message form</a>.</p>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code .deb Package on Debian/Ubuntu using apt/dpkg\nDESCRIPTION: Shows how to install a downloaded `.deb` package using `apt install` on modern Debian/Ubuntu systems. It also provides alternative commands using `dpkg -i` and `apt-get install -f` for older distributions or when direct `apt install` fails to handle dependencies. Requires the `.deb` file to be present in the current directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ./<file>.deb\n\n# If you're on an older Linux distribution, you will need to run this instead:\n# sudo dpkg -i <file>.deb\n# sudo apt-get install -f # Install dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh for VS Code Shell Integration (Manual)\nDESCRIPTION: This script manually enables VS Code shell integration for the Zsh shell. It should be added to the user's '~/.zshrc' file. Similar to the Bash configuration, it checks if the `$TERM_PROGRAM` variable is 'vscode' and sources the Zsh integration script located using `code --locate-shell-integration-path zsh`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Activation Events for Webview Panels (JSON)\nDESCRIPTION: Presents a JSON snippet for setting up activation events in an extension's package.json, specifically enabling the extension to be activated for a particular webview panel (here 'catCoding'). The 'onWebviewPanel:catCoding' event ensures the extension loads when the corresponding webview type gets created.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"activationEvents\": [\n      ...,\n      \"onWebviewPanel:catCoding\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hello World Program (TypeScript)\nDESCRIPTION: A basic TypeScript code snippet demonstrating variable declaration with type annotation (`string`) and logging a message to the console using `console.log`. This example is used to test the TypeScript compilation setup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet message : string = \"Hello World\";\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for VS Code Extension Tests\nDESCRIPTION: This JavaScript snippet demonstrates a more advanced configuration for VS Code extension tests. It defines multiple test configurations with different settings for VS Code version, workspace folder, and Mocha options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .vscode-test.js\nconst { defineConfig } = require('@vscode/test-cli');\n\nmodule.exports = defineConfig([\n  {\n    label: 'unitTests',\n    files: 'out/test/**/*.test.js',\n    version: 'insiders',\n    workspaceFolder: './sampleWorkspace',\n    mocha: {\n      ui: 'tdd',\n      timeout: 20000,\n    },\n  },\n  // you can specify additional test configurations, too\n]);\n```\n\n----------------------------------------\n\nTITLE: Mapping SSHFS as a Network Drive Using Windows Command Prompt\nDESCRIPTION: Maps a remote SSHFS location to a network drive letter in Windows using the 'net use' command. This script requires SSHFS-Win to be installed, and replaces 'user@hostname' with actual credentials. The '/PERSISTENT:NO' option creates a non-persistent mapping for the session.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_27\n\nLANGUAGE: bat\nCODE:\n```\nnet use /PERSISTENT:NO X: \\\\sshfs\\user@hostname\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Participant Detection in package.json for VS Code Chat Extension\nDESCRIPTION: This JSON snippet demonstrates how to implement participant detection at the participant level in a VS Code extension's package.json file. It defines a chat participant named 'Cat' with a disambiguation category for teaching computer science topics informally.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"chatParticipants\": [\n        {\n            \"id\": \"chat-sample.cat\",\n            \"fullName\": \"Cat\",\n            \"name\": \"cat\",\n            \"description\": \"Meow! What can I teach you?\",\n\n            \"disambiguation\": [\n                {\n                    \"category\": \"cat\",\n                    \"description\": \"The user wants to learn a specific computer science topic in an informal way.\",\n                    \"examples\": [\n                        \"Teach me C++ pointers using metaphors\",\n                        \"Explain to me what is a linked list in a simple way\",\n                        \"Can you explain to me what is a function in programming?\"\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Clang Installation - Shell Commands - bash\nDESCRIPTION: These commands demonstrate how to verify if Clang is installed on macOS and how to install it if it's missing. The first command checks the Clang version, while the second triggers installation of Apple developer tools including Clang. The expected input is to run each command in a terminal. No additional dependencies are required beyond native macOS terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclang --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Defining ChatReferenceBinaryData Class for Image Attachments in TypeScript\nDESCRIPTION: This code snippet defines a ChatReferenceBinaryData class for handling binary data in chat references, specifically for image attachments. It includes properties for MIME type and methods to retrieve the binary data.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ChatReferenceBinaryData {\n\t/**\n\t * The MIME type of the binary data.\n\t */\n\treadonly mimeType: string;\n\n\t/**\n\t * Retrieves the binary data of the reference.\n\t * @returns A promise that resolves to the binary data as a Uint8Array.\n\t */\n\tdata(): Thenable<Uint8Array>;\n\n\t/**\n\t * @param mimeType The MIME type of the binary data.\n\t * @param data The binary data of the reference.\n\t */\n\tconstructor(mimeType: string, data: () => Thenable<Uint8Array>);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Page for TypeScript Output (helloweb.html) - HTML\nDESCRIPTION: This HTML file serves as a test harness for the generated JavaScript from the TypeScript file. It loads the script 'out/helloweb.js' and sets up a minimal web page for displaying dynamic content populated by the script. Dependencies include the presence of a compiled 'helloweb.js' file in the 'out' directory. The input is the JavaScript file, output is the rendered HTML page displaying the message from the TypeScript code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head><title>TypeScript Hello Web</title></head>\\n    <body>\\n        <script src=\"out/helloweb.js\"></script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Controlling Proxy Settings with Chromium Command-Line Flags - Bash\nDESCRIPTION: This snippet demonstrates how to disable proxy, set a manual proxy address, set a PAC URL for proxy autoconfiguration, and configure proxy bypass rules by using Chromium-style command-line arguments. These options can be supplied to the VS Code executable when launching from a terminal or shortcut, and allow detailed manual proxy configuration if the default OS settings do not suffice. These flags control all network traffic in VS Code and require the user to have permission to launch the executable with arguments; improper usage can cause network connectivity loss or expose you to security risks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Disable proxy\\n--no-proxy-server\\n\\n# Manual proxy address\\n--proxy-server=<scheme>=<uri>[:<port>][;...] | <uri>[:<port>] | \\\"direct://\\\"\\n\\n# Manual PAC address\\n--proxy-pac-url=<pac-file-url>\\n\\n# Disable proxy per host\\n--proxy-bypass-list=(<trailing_domain>|<ip-address>)[:<port>][;...]\n```\n\n----------------------------------------\n\nTITLE: Mounting Entire Workspace to a Named Volume in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` snippet configures the entire development workspace to reside within a named Docker volume (`your-volume-name-here`) instead of using a bind mount from the local filesystem. The `workspaceMount` property defines the volume mount, and `workspaceFolder` specifies the path within the container. This significantly improves I/O performance but requires cloning the source code *inside* the volume after the container starts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=your-volume-name-here,target=/workspace,type=volume\"\n\"workspaceFolder\": \"/workspace\",\n```\n\n----------------------------------------\n\nTITLE: Building Rust WebAssembly with DWARF Debug Info (Manual)\nDESCRIPTION: Provides the manual shell commands required to build a Rust WebAssembly project (`wasm32-unknown-unknown` target) while preserving DWARF debug information using `wasm-bindgen`. This is necessary when `wasm-pack` does not automatically retain debug symbols. Requires `wasm-bindgen-cli` to be installed. `<library-name>` should be replaced with the actual library name from Cargo.toml, and `<extra-arguments>` configured as needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncargo install wasm-bindgen-cli\ncargo build --target wasm32-unknown-unknown\nwasm-bindgen --keep-debug --out-dir pkg ./target/wasm32-unknown-unknown/debug/<library-name>.wasm <extra-arguments>\n```\n\n----------------------------------------\n\nTITLE: Specifying a Base Image in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` configuration instructs VS Code to use a specific pre-built container image (`mcr.microsoft.com/devcontainers/typescript-node:0-18`) as the foundation for the development environment. It leverages a Microsoft-provided image containing TypeScript and Node.js version 18 tooling. No further customizations are specified in this basic example.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/typescript-node:0-18\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Available Tools in VS Code Chat\nDESCRIPTION: Shows how to filter available tools based on specific tags in the chat context using vscode.lm.tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst tools = request.command === 'all' ?\n    vscode.lm.tools :\n    vscode.lm.tools.filter(tool => tool.tags.includes('chat-tools-sample'));\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code from WSL Terminal\nDESCRIPTION: This command launches Visual Studio Code from the current directory within a Windows Subsystem for Linux (WSL) terminal. It requires VS Code, WSL, a Linux distribution, and the VS Code WSL extension to be installed. Executing this command opens VS Code connected to the WSL environment, allowing development directly within the Linux context of the specified folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/learn/develop-cloud/wsl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Defining a C/C++ Build Task for g++ in VS Code - JSON\nDESCRIPTION: This snippet demonstrates a full tasks.json configuration file for building C/C++ files using g++ in Visual Studio Code on Windows. The task defines the command, arguments, working directory, problem matcher for parsing compiler output, and groupings for default build actions. This setup is needed to enable VS Code's build and debug capabilities via the play button, using g++.exe found in an MSYS2 installation. Inputs include variable substitutions for the active file and output paths; output is an executable in the file directory. This configuration requires the C++ extension and that g++ is correctly installed at the given path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"type\": \"cppbuild\",\n            \"label\": \"C/C++: g++.exe build active file\",\n            \"command\": \"C:\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\",\n            \"args\": [\n                \"-fdiagnostics-color=always\",\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n            ],\n            \"options\": {\n                \"cwd\": \"${fileDirname}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"detail\": \"Task generated by Debugger.\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Maps for Debugging (tsconfig.json)\nDESCRIPTION: This `tsconfig.json` configuration adds the `sourceMap` option set to `true`. This tells the TypeScript compiler to generate `.js.map` source map files alongside the compiled JavaScript. Source maps are crucial for debugging as they allow debuggers to map the executed JavaScript code back to the original TypeScript source.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"CommonJS\",\n        \"outDir\": \"out\",\n        \"sourceMap\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Clang-Format Binary Path in VS Code Settings - JSON\nDESCRIPTION: This snippet configures the VS Code C/C++ extension to use a specific clang-format binary, overriding the default formatter bundled with the extension. By setting the C_Cpp.clang_format_path parameter to the absolute path of the clang-format executable, users can ensure the extension invokes a custom or updated version of clang-format. This is particularly useful for teams with standardized toolchains or those requiring features from newer clang-format releases. This configuration should be placed in the relevant settings.json file, and the target executable must be installed at the specified path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-ide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"C_Cpp.clang_format_path\\\": \\\"C:\\\\Program Files (x86)\\\\LLVM\\\\bin\\\\clang-format.exe\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Node.js Express Server\nDESCRIPTION: A simple Express.js server implementation that sets up a route handler for the root path and listens on port 3000. The server responds with 'Hello World!' to incoming requests.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!')\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!')\n});\n```\n\n----------------------------------------\n\nTITLE: Activity Bar Theme Colors\nDESCRIPTION: Color tokens for customizing the VS Code activity bar, including background, borders, badges, and active/inactive states.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nactivityBar.background\nactivityBar.dropBorder\nactivityBar.foreground\nactivityBar.inactiveForeground\nactivityBar.border\nactivityBarBadge.background\nactivityBarBadge.foreground\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables to Debugged Program - Visual Studio Code - JSON\nDESCRIPTION: Demonstrates how the 'env' property in launch.json can be used to inject environment variables into the debugged process in VS Code. The keys represent variable names, and values represent their set values. This configuration works for general C# applications and requires no external dependencies; main limitation is that values must be string literals compatible with JSON encoding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env\": {\n        \"myVariableName\": \"theValueGoesHere\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Entry Point for Python Module in tasks.json\nDESCRIPTION: Configuration for tasks.json that defines how to run a Python module in a Docker container. It specifies a docker-run task with a dependency on docker-build, pointing to a Python module named 'myapp'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n    {\n      \"type\": \"docker-run\",\n      \"label\": \"docker-run: debug\",\n      \"dependsOn\": [\n        \"docker-build\"\n      ],\n      \"python\": {\n        \"module\": \"myapp\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Function in VS Code\nDESCRIPTION: Shows how to write a basic Python function after installing the Python extension. Demonstrates IntelliSense functionality for Python in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef say_hello(name):\n    print(\"Hello, \" + name)\n\nsay_hello(\"VS Code\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Class in Java with Reference Updates\nDESCRIPTION: Example of the rename refactoring that changes a class name from 'Foo' to 'Bar' and updates all references to use the new name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class Foo {\n  // ...\n}\n\npublic void myMethod() {\n  Foo myClass = new Foo();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Bar {\n  // ...\n}\n\npublic void myMethod() {\n  Bar myClass = new Bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Workspace Trust Capabilities in package.json\nDESCRIPTION: This code snippet shows the structure for declaring workspace trust capabilities in an extension's package.json file. It demonstrates the three possible support values (true, false, or 'limited') along with required description fields and optional restricted configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/workspace-trust.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncapabilities:\n  untrustedWorkspaces:\n    { supported: true } |\n    { supported: false, description: string } |\n    { supported: 'limited', description: string, restrictedConfigurations?: string[] }\n```\n\n----------------------------------------\n\nTITLE: Extracting Local Variable in Java\nDESCRIPTION: Demonstrates extracting an expression to a new local variable using the 'Extract to local variable' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  if (platform.equalsIgnoreCase(\"MAC\")) {\n    // do something\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  boolean isMac = platform.equalsIgnoreCase(\"MAC\");\n  if (isMac) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom File System Watchers in TypeScript\nDESCRIPTION: This proposed VS Code API introduces the ability to create file system watchers with custom exclusion rules. The `FileSystemWatcherOptions` interface allows specifying an array of glob patterns (`excludes`) that should be ignored by the watcher. The `createFileSystemWatcher` function accepts these options, giving extensions full control over watched files, irrespective of user or default exclusion settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileSystemWatcherOptions {\n  /**\n   * An optional set of glob patterns to exclude from watching.\n   * Glob patterns are always matched relative to the watched folder.\n   */\n  readonly excludes?: string[];\n}\n\nexport function createFileSystemWatcher(pattern: RelativePattern, options?: FileSystemWatcherOptions): FileSystemWatcher;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Client Connection in Python\nDESCRIPTION: Creates a Redis client connection to a local Redis server on port 6379 with string response decoding enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nredis_client = redis.StrictRedis(host='0.0.0.0', port=6379, db=0, decode_responses=True)\n```\n\n----------------------------------------\n\nTITLE: Forcing Extension Execution Location in VS Code Settings (JSON)\nDESCRIPTION: Configures the `remote.extensionKind` setting in `settings.json` to force the 'ms-azuretools.vscode-docker' extension to run on the local UI (`ui`) and the 'ms-vscode-remote.remote-ssh-edit' extension to run in the remote workspace (`workspace`), overriding their default behaviors. This should typically only be used for testing as it can break extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"remote.extensionKind\": {\n    \"ms-azuretools.vscode-docker\": [ \"ui\" ],\n    \"ms-vscode-remote.remote-ssh-edit\": [ \"workspace\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom When Clause Context in VS Code Extension\nDESCRIPTION: JavaScript examples showing how to set custom context keys using the setContext command. Demonstrates setting both boolean and numeric values that can be used in when clauses.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/when-clause-contexts.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.commands.executeCommand('setContext', 'myExtension.showMyCommand', true);\n\nvscode.commands.executeCommand('setContext', 'myExtension.numberOfCoolOpenThings', 4);\n```\n\n----------------------------------------\n\nTITLE: Accessing TreeView Visibility State in TypeScript\nDESCRIPTION: This TypeScript code defines the `visible` property and `onDidChangeVisibility` event, along with the `TreeViewVisibilityChangeEvent` interface, for the `TreeView` API in VS Code extensions. Extension authors can use the `visible` property to check if their custom tree view is currently visible and subscribe to the `onDidChangeVisibility` event to react when its visibility status changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `true` if the [tree view](#TreeView) is visible otherwise `false`.\n */\nreadonly visible: boolean;\n\n/**\n * Event that is fired when [visibility](TreeView.visible) has changed\n */\nreadonly onDidChangeVisibility: Event<TreeViewVisibilityChangeEvent>;\n\n/**\n * The event that is fired when there is a change in [tree view's visibility](#TreeView.visible)\n */\nexport interface TreeViewVisibilityChangeEvent {\n\n  /**\n   * `true` if the [tree view](#TreeView) is visible otherwise `false`.\n   */\n  readonly visible: boolean;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Flask Template Rendering Function\nDESCRIPTION: Python function demonstrating template rendering with Flask's render_template(). Handles dynamic route parameters and passes data to the template.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import render_template\n\n@app.route(\"/hello/\")\n@app.route(\"/hello/<name>\")\ndef hello_there(name = None):\n    return render_template(\n        \"hello_there.html\",\n        name=name,\n        date=datetime.now()\n    )\n```\n\n----------------------------------------\n\nTITLE: Running tslint-to-eslint-config utility\nDESCRIPTION: This command downloads and executes the tslint-to-eslint-config utility to convert TSLint configuration to the closest ESLint configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/tslint-eslint-migration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tslint-to-eslint-config\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Agent Forwarding\nDESCRIPTION: SSH configuration to enable agent forwarding, allowing the local SSH agent to be available in the remote environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_21\n\nLANGUAGE: ssh-config\nCODE:\n```\nHost *\n    ForwardAgent yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Debugging with Auto-Reload in VS Code\nDESCRIPTION: This snippet shows how to enable automatic reloading of the debugger when code changes are made after hitting a breakpoint. It includes the 'autoReload' setting with 'enable' set to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"Python Debugger: Current File\",\n   \"type\": \"debugpy\",\n   \"request\": \"launch\",\n   \"program\": \"${file}\",\n   \"console\": \"integratedTerminal\",\n   \"autoReload\": {\n      \"enable\": true\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Evaluatable Expression Provider in VS Code Debugger Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register an EvaluatableExpressionProvider for the 'markdown' language using VS Code's language API. The provider uses the getWordRangeAtPosition method to determine which text under the mouse should be evaluated during debugging, returning either an EvaluatableExpression or undefined. This is essential for customizing debug hover behavior and requires access to the vscode API in a VS Code extension context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerEvaluatableExpressionProvider('markdown', {\n  provideEvaluatableExpression(document: vscode.TextDocument, position: vscode.Position):\n                              vscode.ProviderResult<vscode.EvaluatableExpression> {\n    const wordRange = document.getWordRangeAtPosition(position);\n    if (wordRange) {\n      return new vscode.EvaluatableExpression(wordRange);\n    }\n    return undefined; // nothing evaluatable found under mouse\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Debugpy Listener and Blocking Until Attach - Python\nDESCRIPTION: This snippet demonstrates how to initialize debugpy for local debugging by setting up a listening socket, pausing execution until the debugger attaches, and inserting a programmatic breakpoint. Dependencies include the debugpy library, which must be installed in the Python environment. The main parameters are the port number for listen (defaults to 5678) and the use of debugpy.wait_for_client to halt progress until attached. This approach is suitable for debugging scripts started by another process, and outputs signals such as 'Waiting for debugger attach' for user feedback.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport debugpy\n\n# 5678 is the default attach port in the VS Code debug configurations. Unless a host and port are specified, host defaults to 127.0.0.1\ndebugpy.listen(5678)\nprint(\"Waiting for debugger attach\")\ndebugpy.wait_for_client()\ndebugpy.breakpoint()\nprint('break on this line')\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Python Debugging for Specific Startup File\nDESCRIPTION: This snippet demonstrates how to create a custom debug configuration for a specific startup file with command-line arguments. It includes settings for 'name', 'type', 'request', 'program', and 'args'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n {\n     \"name\": \"Python Debugger: startup.py\",\n     \"type\": \"debugpy\",\n     \"request\": \"launch\",\n     \"program\": \"${workspaceFolder}/startup.py\",\n     \"args\" : [\"--port\", \"1593\"]\n },\n```\n\n----------------------------------------\n\nTITLE: Docker Socket Mapping in Development Container\nDESCRIPTION: JSON configuration in devcontainer.json to map the Docker socket from host to container, enabling Docker CLI functionality within the development container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/choosing-dev-environment.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    ...\\n    \"runArgs\": [ \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"]\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Extension Settings for autopep8 Formatting (JSON)\nDESCRIPTION: Configures a process task in tasks.json to launch autopep8 for the currently opened file, sourcing the executable path from the Python extension's configuration variable ${config:python.formatting.autopep8Path}. Requires the Python extension for VS Code and autopep8 installed. Key parameters include command substitution, in-place formatting, and variable-driven file targeting. Input: the user runs the task on a Python file; Output: the file is formatted in place according to user settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"autopep8 current file\",\n    \"type\": \"process\",\n    \"command\": \"${config:python.formatting.autopep8Path}\",\n    \"args\": [\n        \"--in-place\",\n        \"${file}\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized File Creation in WorkspaceEdit\nDESCRIPTION: Demonstrates the optimized way to create files using WorkspaceEdit by directly passing DataTransferFile, which avoids extra copy operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nadditionalEdit.createFile(path, { contents: pngFile });\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Chat Participant\nDESCRIPTION: TypeScript code for creating the chat participant and setting its icon using the Chat extension API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tutor = vscode.chat.createChatParticipant(\"chat-tutorial.code-tutor\", handler);\n\ntutor.iconPath = vscode.Uri.joinPath(context.extensionUri, 'tutor.jpeg');\n```\n\n----------------------------------------\n\nTITLE: Example .env File Format (Plaintext)\nDESCRIPTION: Provides an example of the `.env` file format supported by the VS Code Node debugger. It shows key-value pairs, comments (lines starting with '#'), empty values, and how multi-line strings are handled (newlines expanded in quoted strings).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nUSER=doe\nPASSWORD=abc123\n\n# a comment\n\n# an empty value:\nempty=\n\n# new lines expanded in quoted strings:\nlines=\"foo\\nbar\"\n```\n\n----------------------------------------\n\nTITLE: Adding Layers to Neural Network with Keras in Python\nDESCRIPTION: Adds three Dense layers to the Sequential model, specifying input dimensions, activation functions, and output shape for Titanic survival prediction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmodel.add(Dense(5, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))\nmodel.add(Dense(5, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vue Project with npm\nDESCRIPTION: Command to scaffold a new Vue.js project using the create-vue package. This creates an interactive prompt to help you set up a new Vue project with your preferred options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/vuejs-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Using Proposed Webview Resource and CSP APIs (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates using the proposed `Webview.toWebviewResource` and `Webview.cspSource` APIs for securely loading local resources within a VS Code webview panel. It creates a webview panel, restricts its ability to load local content to the 'media' subdirectory of the extension using `localResourceRoots`. It then constructs an HTML string, using `panel.webview.toWebviewResource()` to convert a local file path (imagePath) into a special `vscode-resource:` URI suitable for the webview, and incorporates `panel.webview.cspSource` into the `Content-Security-Policy` meta tag to permit loading images from this source. Requires `vscode` API and `path` module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n    // Restrict the webview to only loading local content from our extension's `media` directory.\n    localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst imagePath = vscode.Uri.file(path.join(extensionPath, 'media'));\n\npanel.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${panel.webview.cspSource} https:;\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\"${panel.webview.toWebviewResource(imagePath)}/cat.gif\" width=\"300\" />\n</body>\n</html>`\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Test Discovery in VS Code Testing API\nDESCRIPTION: Shows how to set up a resolveHandler to discover tests on demand and watch document changes. This approach optimizes performance by only parsing tests when needed, rather than parsing the entire workspace at once.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// First, create the `resolveHandler`. This may initially be called with\n// \"undefined\" to ask for all tests in the workspace to be discovered, usually\n// when the user opens the Test Explorer for the first time.\ncontroller.resolveHandler = async test => {\n  if (!test) {\n    await discoverAllFilesInWorkspace();\n  } else {\n    await parseTestsInFileContents(test);\n  }\n};\n\n// When text documents are open, parse tests in them.\nvscode.workspace.onDidOpenTextDocument(parseTestsInDocument);\n// We could also listen to document changes to re-parse unsaved changes:\nvscode.workspace.onDidChangeTextDocument(e => parseTestsInDocument(e.document));\n\n// In this function, we'll get the file TestItem if we've already found it,\n// otherwise we'll create it with `canResolveChildren = true` to indicate it\n// can be passed to the `controller.resolveHandler` to gets its children.\nfunction getOrCreateFile(uri: vscode.Uri) {\n  const existing = controller.items.get(uri.toString());\n  if (existing) {\n    return existing;\n  }\n\n  const file = controller.createTestItem(uri.toString(), uri.path.split('/').pop()!, uri);\n  file.canResolveChildren = true;\n  return file;\n}\n\nfunction parseTestsInDocument(e: vscode.TextDocument) {\n  if (e.uri.scheme === 'file' && e.uri.path.endsWith('.md')) {\n    parseTestsInFileContents(getOrCreateFile(e.uri), e.getText());\n  }\n}\n\nasync function parseTestsInFileContents(file: vscode.TestItem, contents?: string) {\n  // If a document is open, VS Code already knows its contents. If this is being\n  // called from the resolveHandler when a document isn't open, we'll need to\n  // read them from disk ourselves.\n  if (contents === undefined) {\n    const rawContent = await vscode.workspace.fs.readFile(file.uri);\n    contents = new TextDecoder().decode(rawContent);\n  }\n\n  // some custom logic to fill in test.children from the contents...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a WebviewPanelSerializer for Webview Persistence (TypeScript)\nDESCRIPTION: Illustrates how to register a 'WebviewPanelSerializer' to allow VS Code webviews of a specific type to persist across editor restarts. In the extension activation function, this uses 'vscode.window.registerWebviewPanelSerializer', and implements an async 'deserializeWebviewPanel' method that receives the persisted state and restores the webview. This requires dependency on the vscode API and a defined 'MyWebview' class.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n    ...\n\n    vscode.window.registerWebviewPanelSerializer('myWebviewType', {\n        async deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: any) {\n            // `state` is the state persisted using `setState` inside the webview\n            console.log(`Got state: ${state}`);\n\n            new MyWebview(webviewPanel);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompletionItem Insert and Replace Ranges - VS Code API - TypeScript\nDESCRIPTION: Illustrates the structure of the CompletionItem class's 'range' property, enabling precise control over insertion and replacement ranges for completion items. This TypeScript snippet is intended for extension developers contributing to IntelliSense features via the VS Code API. It supports either a single Range or an object specifying distinct inserting and replacing ranges. No external dependencies beyond VS Code types. Expected to be incorporated as part of a larger extension codebase that provides completion items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CompletionItem {\n\n    range?: Range | { inserting: Range; replacing: Range; };\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Options in Visual Studio Code Debug Settings\nDESCRIPTION: This snippet demonstrates how to configure symbol options in the debug settings. It includes settings for search paths, Microsoft and NuGet symbol servers, cache path, and module filtering.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n    \"symbolOptions\": {\n        \"searchPaths\": [\n            \"~/src/MyOtherProject/bin/debug\",\n            \"https://my-companies-symbols-server\"\n        ],\n        \"searchMicrosoftSymbolServer\": true,\n        \"searchNuGetOrgSymbolServer\": true,\n        \"cachePath\": \"/symcache\",\n        \"moduleFilter\": {\n            \"mode\": \"loadAllButExcluded\",\n            \"excludedModules\": [ \"DoNotLookForThisOne*.dll\" ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Expose Ports for SSL\nDESCRIPTION: Dockerfile configuration to expose separate ports for HTTP and HTTPS traffic in a .NET application container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-netcore.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\nWORKDIR /app\nEXPOSE 5000\nEXPOSE 5001\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Echo Terminal using Proposed Extension Terminals API (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates the implementation of a basic Pseudoterminal using the proposed VS Code Extension Terminals API. It sets up a `vscode.EventEmitter` for writing output (`writeEmitter`), defines the `pty` object implementing the `Pseudoterminal` interface (handling `open`, `close`, and `handleInput` methods to echo user input line by line upon Enter key press), creates the terminal via `vscode.window.createTerminal` providing a name and the `pty` object, and finally displays it using `terminal.show()`. This requires the `vscode` API and uses a proposed feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeEmitter = new vscode.EventEmitter<string>();\nlet line = '';\nconst pty = {\n  onDidWrite: writeEmitter.event,\n  open: () => writeEmitter.fire('Type and press enter to echo the text\\r\\n\\r\\n'),\n  close: () => {},\n  handleInput: (data: string) => {\n    if (data === '\\r') {\n      writeEmitter.fire(`\\r\\necho: \"${line}\"\\r\\n\\n`);\n      line = '';\n    } else {\n      line += data;\n      writeEmitter.fire(data);\n    }\n  }\n};\nconst terminal = vscode.window.createTerminal({ name: `My Extension REPL`, pty });\nterminal.show();\n```\n\n----------------------------------------\n\nTITLE: Configuring $EDITOR for VS Code on Remote Hosts (Bash)\nDESCRIPTION: Sets the EDITOR environment variable to launch VS Code (or VS Code Insiders) when editing from terminal-based commands on macOS or Linux SSH hosts. Requires VS Code to be installed on the remote host and properly configured in the PATH. Only applies when running inside a VS Code-injected environment as detected by the VSCODE_INJECTION variable; typically used for integrating `git commit` or other EDITOR-dependent tools with the VS Code editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [ \"$VSCODE_INJECTION\" = \"1\" ]; then\n    export EDITOR=\"code --wait\" # or 'code-insiders' if you're using VS Code Insiders\nfi\n\n```\n\n----------------------------------------\n\nTITLE: Appending to NODE_OPTIONS in Bash for Debugging\nDESCRIPTION: A Bash command example, suitable for shell configuration files like `.bashrc` or `.zshrc`, demonstrating the correct way to add custom options to the `NODE_OPTIONS` environment variable. It appends new options (like `--some-other-option=here`) to any existing value, ensuring that essential options set by the VS Code debugger are preserved and debugging remains functional.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_OPTIONS=\"$NODE_OPTIONS --some-other-option=here\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Express Application Generator Globally via npm in Bash\nDESCRIPTION: This snippet uses npm to globally install the Express application generator, a tool for scaffolding new Express.js web projects, across the entire system. Dependencies: Node.js, npm (already installed), and administrative access ('sudo' for global installation). The '-g' flag makes the 'express' command accessible from any location for the current user. Inputs: None; Output: The 'express' binary available via the command line. Limitation: May require elevated privileges, and global installs are best for development tooling rather than app dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g express-generator\n```\n\n----------------------------------------\n\nTITLE: Using a Command Variable for Process Selection - VS Code JSON\nDESCRIPTION: This JSON snippet illustrates referencing a VS Code command variable (${command:extension.pickNodeProcess}) inside a launch.json configuration to attach a debugger to a selected Node.js process by its process ID. It requires the Node.js debugger extension (or built-in support) and access to the interactive command identified by extension.pickNodeProcess. The configurations array contains an object with type (debugger type), request (the debug operation), name (label), and processId—here dynamically populated by command evaluation. On activation, the command presents a list of processes to pick from, returning their PID as a string, which is substituted in processId for the attach request. The command variable must return a string for successful substitution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"configurations\": [\\n        {\\n            \"type\": \"node\",\\n            \"request\": \"attach\",\\n            \"name\": \"Attach by Process ID\",\\n            \"processId\": \"${command:extension.pickNodeProcess}\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for ES6 in JSON\nDESCRIPTION: This JSON snippet provides an example configuration for ESLint tailored for ES6 development. It specifies environments (browser, node, es6), sets parser options for ECMAScript version 6 and module source type, enables specific ECMAScript features like JSX and classes, and defines custom rule settings. Requires the ESLint extension to be installed in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"env\": {\n        \"browser\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"node\": true\n    },\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true,\n            \"classes\": true,\n            \"defaultParams\": true\n        }\n    },\n    \"rules\": {\n        \"no-const-assign\": 1,\n        \"no-extra-semi\": 0,\n        \"semi\": 0,\n        \"no-fallthrough\": 0,\n        \"no-empty\": 0,\n        \"no-mixed-spaces-and-tabs\": 0,\n        \"no-redeclare\": 0,\n        \"no-this-before-super\": 1,\n        \"no-undef\": 1,\n        \"no-unreachable\": 1,\n        \"no-use-before-define\": 0,\n        \"constructor-super\": 1,\n        \"curly\": 0,\n        \"eqeqeq\": 0,\n        \"func-names\": 0,\n        \"valid-typeof\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Problem Matchers in VSCode Extensions\nDESCRIPTION: JSON configuration for contributing a GCC compiler problem matcher pattern. This defines how to extract file locations, line numbers, and error messages from compiler output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"problemMatchers\": [\n      {\n        \"name\": \"gcc\",\n        \"owner\": \"cpp\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": {\n          \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n          \"file\": 1,\n          \"line\": 2,\n          \"column\": 3,\n          \"severity\": 4,\n          \"message\": 5\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Environment Folder Paths in VS Code\nDESCRIPTION: Specifies paths to folders where virtual environments are commonly created. The default is an empty list `[]`. This helps the extension discover virtual environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: VS Code Editor Theme Color Properties - Bracket Highlighting\nDESCRIPTION: Color configuration for bracket pair colorization and bracket pair guides, including active and inactive states.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\neditorBracketHighlight.foreground1\neditorBracketHighlight.foreground2\neditorBracketHighlight.foreground3\neditorBracketHighlight.foreground4\neditorBracketHighlight.foreground5\neditorBracketHighlight.foreground6\neditorBracketHighlight.unexpectedBracket.foreground\n```\n\n----------------------------------------\n\nTITLE: Listening to Terminal Exit Status in VS Code Extension (TypeScript)\nDESCRIPTION: This snippet shows how to use the window.onDidCloseTerminal event to listen for closed terminals in a VS Code extension. It checks if the exitStatus and exitStatus.code properties are defined, and if so, displays an information message with the exit code. It requires the vscode.window API and is typically included in the extension activation function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.onDidCloseTerminal(t => {\n  if (t.exitStatus && t.exitStatus.code) {\n    vscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Region Folding Markers\nDESCRIPTION: HTML comment-based markers to define custom folding regions in HTML documents. These markers allow creating collapsible sections beyond the automatic tag-based folding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- #region --> <!-- #endregion -->\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for the Django App - Python\nDESCRIPTION: Defines URL routes for the 'hello' app in hello/urls.py. The snippet sets up a list ('urlpatterns') mapping the root path ('') to the 'home' view defined earlier. It imports necessary symbols and links the root URL to the hello.views.home function. Django uses this configuration to route incoming requests within the app. Dependencies include Django's URL routing utilities and the app's views module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom hello import views\n\nurlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Language Models in VS Code\nDESCRIPTION: Code snippet demonstrating how to get a list of all available language models using the VS Code Language Model API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst allModels = await vscode.lm.selectChatModels(MODEL_SELECTOR);\n```\n\n----------------------------------------\n\nTITLE: Implementing invoke Method for Language Model Tool in TypeScript\nDESCRIPTION: This code demonstrates the implementation of the invoke method for a tab count tool. It handles different cases based on the input parameters and returns a LanguageModelToolResult with the count of open tabs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync invoke(\n    options: vscode.LanguageModelToolInvocationOptions<ITabCountParameters>,\n    _token: vscode.CancellationToken\n) {\n    const params = options.input;\n    if (typeof params.tabGroup === 'number') {\n        const group = vscode.window.tabGroups.all[Math.max(params.tabGroup - 1, 0)];\n        const nth =\n            params.tabGroup === 1\n                ? '1st'\n                : params.tabGroup === 2\n                    ? '2nd'\n                    : params.tabGroup === 3\n                        ? '3rd'\n                        : `${params.tabGroup}th`;\n        return new vscode.LanguageModelToolResult([new vscode.LanguageModelTextPart(`There are ${group.tabs.length} tabs open in the ${nth} tab group.`)]);\n    } else {\n        const group = vscode.window.tabGroups.activeTabGroup;\n        return new vscode.LanguageModelToolResult([new vscode.LanguageModelTextPart(`There are ${group.tabs.length} tabs open.`)]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Output in VS Code Notebooks\nDESCRIPTION: Shows how to create basic text output in notebook cells using the NotebookCellOutputItem API\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.NotebookCellOutputItem.text('This is the output...')\n```\n\n----------------------------------------\n\nTITLE: Installing the Devcontainer CLI using npm - Bash\nDESCRIPTION: Installs the devcontainer CLI globally using npm. Requires Python, Node.js (v14 or greater), and C/C++ build tools as prerequisites. Intended use is to enable command-line operations for dev containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Tasks for Ruby Debugging in VS Code\nDESCRIPTION: A launch.json configuration file for debugging Ruby applications with multiple launch configurations. It includes options for debugging the current file, debugging test files, and attaching to an existing server process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        // Launch the debugger for any given program. In this case, it will run the current file using Ruby\n        {\n            \"type\": \"ruby_lsp\",\n            \"name\": \"Debug\",\n            \"request\": \"launch\",\n            \"program\": \"ruby ${file}\",\n        },\n        // Launch the debugger for the current test file\n        {\n            \"type\": \"ruby_lsp\",\n            \"request\": \"launch\",\n            \"name\": \"Debug test file\",\n            \"program\": \"ruby -Itest ${relativeFile}\"\n        },\n        // Attach the debugger client to an existing Ruby process that has already been launched with the debugger\n        // server\n        {\n            \"type\": \"ruby_lsp\",\n            \"request\": \"attach\",\n            \"name\": \"Attach to existing server\",\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Submenu Items in VSCode Extensions\nDESCRIPTION: JSON configuration for contributing a submenu to the Source Control Management (SCM) title. This example shows how to add a Git commit submenu that appears only when using the Git SCM provider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"scm/title\": [\n        {\n          \"submenu\": \"git.commit\",\n          \"group\": \"2_main@1\",\n          \"when\": \"scmProvider == git\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Task in tasks.json for MSVC (JSON)\nDESCRIPTION: This JSON snippet defines a VS Code build task labeled \"cl.exe build active file\" designed to compile the currently active C++ file using MSVC (`cl.exe`). It's specifically configured for Windows environments where VS Code might not be launched from a Developer Command Prompt. It achieves this by setting the shell option to use `cmd.exe` to first execute `VsDevCmd.bat` (initializing the necessary environment variables like `INCLUDE`) and then invoking the `cl.exe` compiler with flags for debugging symbols (`/Zi`), C++ exception handling (`/EHsc`), specifying the output executable name (`/Fe:`), and the input source file (`${file}`). It also includes a problem matcher (`$msCompile`) to parse build errors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"windows\": {\n        \"options\": {\n            \"shell\": {\n                \"executable\": \"cmd.exe\",\n                \"args\": [\n                    \"/C\",\n                    // The path to VsDevCmd.bat depends on the version of Visual Studio you have installed.\n                    \"\\\"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/VsDevCmd.bat\\\"\",\n                    \"&&\"\n                ]\n            }\n        }\n    },\n    \"tasks\": [\n        {\n            \"type\": \"shell\",\n            \"label\": \"cl.exe build active file\",\n            \"command\": \"cl.exe\",\n            \"args\": [\n                \"/Zi\",\n                \"/EHsc\",\n                \"/Fe:\",\n                \"${fileDirname}\\\\\\${fileBasenameNoExtension}.exe\",\n                \"${file}\"\n            ],\n            \"problemMatcher\": [\n                \"$msCompile\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Notebook Renderer with Cleanup Logic\nDESCRIPTION: Implementation showing how to handle cleanup of resources when output is disposed\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst intervals = new Map();\n\nexport const activate: ActivationFunction = (context) => ({\n    renderOutputItem(data, element) {\n        render(<GithubIssues issues={data.json()} />, element);\n\n        intervals.set(data.mime, setInterval(() => {\n            if(element.querySelector('h2')) {\n                element.querySelector('h2')!.style.color = `hsl(${Math.random() * 360}, 100%, 50%)`;\n            }\n        }, 1000));\n    },\n    disposeOutputItem(id) {\n        clearInterval(intervals.get(id));\n        intervals.delete(id);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Highlighting for a Specific Theme\nDESCRIPTION: This snippet demonstrates how to enable semantic highlighting for a specific theme in VS Code by using the editor.tokenColorCustomizations setting. The example enables semantic highlighting for the Material Theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/color-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.tokenColorCustomizations\": {\n    \"[Material Theme]\": {\n        \"semanticHighlighting\": true\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Automating Terminal Launch with VS Code Tasks in JSONC\nDESCRIPTION: Configures VS Code tasks in `.vscode/tasks.json` to automatically launch multiple terminals upon opening a folder. It defines a main task ('Create terminals') that depends on two other tasks ('First', 'Second'). These dependent tasks are background shell tasks, each launching a specific shell (cmd.exe and pwsh.exe) in a dedicated terminal panel group ('my-group'). The main task is set as the default build task and configured to run on folder open.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"presentation\": {\n    \"echo\": false,\n    \"reveal\": \"always\",\n    \"focus\": false,\n    \"panel\": \"dedicated\",\n    \"showReuseMessage\": true\n  },\n  \"tasks\": [\n    {\n      \"label\": \"Create terminals\",\n      \"dependsOn\": [\n        \"First\",\n        \"Second\"\n      ],\n      // Mark as the default build task so cmd/ctrl+shift+b will create them\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      // Try start the task on folder open\n      \"runOptions\": {\n        \"runOn\": \"folderOpen\"\n      }\n    },\n    {\n      // The name that shows up in terminal tab\n      \"label\": \"First\",\n      // The task will launch a shell\n      \"type\": \"shell\",\n      \"command\": \"\",\n      // Set the shell type\n      \"options\": {\n        \"shell\": {\n          \"executable\": \"cmd.exe\",\n          \"args\": []\n        }\n      },\n      // Mark as a background task to avoid the spinner animation on the terminal tab\n      \"isBackground\": true,\n      \"problemMatcher\": [],\n      // Create the tasks in a terminal group\n      \"presentation\": {\n        \"group\": \"my-group\"\n      }\n    },\n    {\n      \"label\": \"Second\",\n      \"type\": \"shell\",\n      \"command\": \"\",\n      \"options\": {\n        \"shell\": {\n          \"executable\": \"pwsh.exe\",\n          \"args\": []\n        }\n      },\n      \"isBackground\": true,\n      \"problemMatcher\": [],\n      \"presentation\": {\n        \"group\": \"my-group\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Reference for MSTest Project using .NET CLI\nDESCRIPTION: Uses the .NET CLI command `dotnet add reference` to link an MSTest project (specified by its `.csproj` file path) to the main project it intends to test (also specified by its `.csproj` file path). Establishing this reference is necessary for the MSTest project to interact with and test the code of the target project. Requires the .NET SDK and paths to both `.csproj` files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]\n```\n\n----------------------------------------\n\nTITLE: Using the Simplified localize2 API for Localized Strings in VS Code (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates the usage of the new 'localize2' function in VS Code core for generating an ILocalizedString, simplifying the process by avoiding manual construction. Extension authors can now directly call localize2 with an identifier and the English string, and the localization infrastructure automatically processes these strings. Necessary dependencies include VS Code core APIs supporting localize2. The function accepts an id and the source string, and returns a localized string object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst str = localize2('id', \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Correct HoverProvider Implementation for TypeScript Files on Disk in VS Code Extension\nDESCRIPTION: This snippet shows the correct way to implement a HoverProvider that works only with TypeScript files stored on disk, using the 'file' scheme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/document-selector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 👍 only works with files on disk\nvscode.languages.registerHoverProvider(\n  { scheme: 'file', language: 'typescript' },\n  {\n    provideHover(doc: vscode.TextDocument) {\n      const { size } = fs.statSync(doc.uri.fsPath);\n      return new vscode.Hover(`Size in bytes is ${size}`);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Flask Static File Server Function\nDESCRIPTION: Python function that serves a static JSON file using Flask's send_static_file method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/api/data\")\ndef get_data():\n    return app.send_static_file(\"data.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Globally using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the TypeScript compiler (`typescript`) globally (`-g`) on the system. This makes the `tsc` command available from any directory in the terminal. Requires npm (usually installed with Node.js) to be present on the system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Using runArgs to Load Environment File in devcontainer.json (JSON)\nDESCRIPTION: This snippet references a .env file via the runArgs setting in devcontainer.json for Docker or image-based setups. It passes the --env-file flag to Docker, ensuring all variables in the specified file are loaded into the container environment. The argument must align with the path of the .env file in your repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"runArgs\": [\"--env-file\",\".devcontainer/devcontainer.env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot Advanced Slash Commands\nDESCRIPTION: JSON configuration for enabling preview slash commands in GitHub Copilot, including createWorkspace, createNotebook, and search functionalities. These settings allow users to access experimental features for project creation and search assistance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"github.copilot.advanced\": {\n      \"slashCommands\": {\n         \"createWorkspace\": true,\n         \"createNotebook\": true,\n         \"search\": true\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pytest Executable Path in VS Code Python\nDESCRIPTION: Specifies the path to the `pytest` executable. The default value `\"pytest\"` assumes the executable is available in the current environment's PATH. Use a full path if `pytest` is located elsewhere.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"pytest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings for Source Control Input\nDESCRIPTION: JSON configuration for customizing the source control commit input field with editor rulers and word wrap options. This example sets rulers at positions 50 and 72 and disables word wrapping specifically for source control input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"[scminput]\": {\n    \"editor.rulers\": [\n      50,\n      72\n    ],\n    \"editor.wordWrap\": \"off\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Profile Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to contribute a custom terminal profile using `contributes.terminal` in `package.json`. It includes the necessary `activationEvents` entry (`onTerminalProfile:my-ext.terminal-profile`) and defines the profile with a `title` and a unique `id` under `terminal.profiles`. This makes the profile appear in the VS Code terminal profile selector.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\n    \"onTerminalProfile:my-ext.terminal-profile\"\n  ],\n  \"contributes\": {\n    \"terminal\": {\n      \"profiles\": [\n        {\n          \"title\": \"Profile from extension\",\n          \"id\": \"my-ext.terminal-profile\"\n        }\n      ]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Compiled JavaScript Output (JavaScript)\nDESCRIPTION: This JavaScript code is the result of compiling the `helloworld.ts` example using the TypeScript compiler (`tsc`). It shows the transpiled output where the type annotation (`: string`) has been removed and the `let` keyword has been converted to `var` (typical for older JavaScript targets like ES5).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = \"Hello World\";\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dev Container using devcontainer.json (JSON)\nDESCRIPTION: Defines the configuration within `./devcontainer/python-container/devcontainer.json` for the Python development container. It references the common `docker-compose.yml` located two levels up, specifies the target service (`python-api`), sets the `workspaceFolder` inside the container to the Python source directory (`/workspace/python-src`), and optionally uses `shutdownAction: none` to prevent the container from stopping when the VS Code window closes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Container\",\n    \"dockerComposeFile\": [\"../../docker-compose.yml\"],\n    \"service\": \"python-api\",\n    \"shutdownAction\": \"none\",\n    \"workspaceFolder\": \"/workspace/python-src\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with Port Substitution for Swagger UI - Visual Studio Code - JSON\nDESCRIPTION: Configures 'serverReadyAction' in launch.json to capture the port from ASP.NET Core's startup output and substitute it into a fixed URI for opening Swagger UI. The regex pattern matches the standard startup output and captures the port number, with 'uriFormat' assembling the Swagger UI endpoint using that port. Ideal for projects configured with Swagger UI. Dependencies are a web project with Swagger endpoints available and correct application output. The 'pattern' and 'uriFormat' fields must be tailored if endpoint conventions differ.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"serverReadyAction\": {\n        \"action\": \"openExternally\",\n        \"pattern\": \"\\\\bNow listening on:\\\\s+http://\\\\S+:([0-9]+)\",\n        \"uriFormat\": \"http://localhost:%s/swagger/index.html\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Local Git Repository using Git Command\nDESCRIPTION: This command initializes a new Git repository in the current working directory. It creates a `.git` subdirectory containing all the necessary repository files. This is the command-line equivalent to selecting the 'Initialize Repository' button in the VS Code Source Control view. Git must be installed on the system for this command to work.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/intro-to-git.md#2025-04-23_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Implementing SignatureHelpProvider with Context in TypeScript for VS Code Extension\nDESCRIPTION: This code demonstrates how to implement a SignatureHelpProvider in a VS Code extension that uses the new SignatureHelpContext parameter. It shows handling different trigger kinds, trigger characters, and re-trigger states to customize signature help display for markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    vscode.languages.registerSignatureHelpProvider('markdown', new class implements vscode.SignatureHelpProvider {\n        provideSignatureHelp(\n            document: vscode.TextDocument,\n            position: vscode.Position,\n            token: vscode.CancellationToken,\n            context: vscode.SignatureHelpContext\n        ): vscode.ProviderResult<vscode.SignatureHelp> {\n            // Return fake signature help result\n            const sigHelp = new vscode.SignatureHelp();\n            sigHelp.activeParameter = 0;\n            sigHelp.activeSignature = 0;\n            sigHelp.signatures = [new vscode.SignatureInformation(getLabel(context))];\n            return sigHelp;\n        }\n    }, {\n        triggerCharacters: ['('],\n        retriggerCharacters: [',']\n    });\n}\n\nfunction getLabel(context: vscode.SignatureHelpContext): string {\n    const parts = [];\n    // How was signature help triggered\n    switch (context.triggerKind) {\n        case vscode.SignatureHelpTriggerKind.Invoke:            parts.push('invoke'); break;\n        case vscode.SignatureHelpTriggerKind.ContentChange:     parts.push('change'); break;\n        case vscode.SignatureHelpTriggerKind.TriggerCharacter:  parts.push('character'); break;\n    }\n\n    // The character (if any) that caused signature help to be triggered\n    if (context.triggerCharacter) { parts.push(context.triggerCharacter) }\n\n    // Was signature help already showing when it was triggered again?\n    if (context.isRetrigger) { parts.push('retrigger') }\n\n    return parts.join(' ');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Server Plugin Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet shows the basic contribution of a TypeScript server plugin using `contributes.typescriptServerPlugins` in `package.json`. It specifies the `name` of the plugin (`typescript-styled-plugin`) which must correspond to a package listed in the extension's dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"typescriptServerPlugins\": [\n      {\n        \"name\": \"typescript-styled-plugin\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomListItemsType for Custom Collection Iteration\nDESCRIPTION: XML schema complex type that specifies custom logic for iterating through collections that cannot be visualized using other means. It includes elements for variable declaration, size specification, skip functionality, and collection traversal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"CustomListItemsType\">\n    <xs:annotation>\n      <xs:documentation>Specifies custom logic for iterating through a collection which cannot be visualized by other means.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element name=\"Variable\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"VariableType\"></xs:element>\n      </xs:choice>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element name=\"Size\" minOccurs=\"1\" maxOccurs=\"1\" type=\"CustomListSizeType\">\n        </xs:element>\n      </xs:choice>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"1\">\n        <xs:element name=\"Skip\" minOccurs=\"1\" maxOccurs=\"1\" type=\"SkipType\"></xs:element>\n      </xs:choice>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:group ref =\"CustomListCode\" />\n      </xs:choice>\n    </xs:sequence>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n    <xs:attribute name=\"MaxItemsPerView\" type=\"MaxItemsPerViewType\" use=\"optional\">\n    </xs:attribute>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Defining the Proposed onDidExecuteCommand Event API (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the proposed `vscode.commands.onDidExecuteCommand` event and its associated `CommandExecutionEvent` interface within the `vscode` API namespace. This event fires *after* any VS Code command is successfully executed. Listeners subscribing to this event will receive a `CommandExecutionEvent` object containing the executed command's identifier string (`command`) and an array of the arguments (`arguments`) it was invoked with. This is a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommandExecutionEvent {\n  command: string;\n  arguments: any[];\n}\nexport namespace commands {\n  /**\n   * An event that is emitted when a [command](#Command) is executed.\n   */\n  export const onDidExecuteCommand: Event<CommandExecutionEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Hyperlink Format - Batch\nDESCRIPTION: General format for creating hyperlinks in the terminal using VT escape sequences, showing the structure for URL and label placement.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\n\\x1b]8;; <URL> \\x1b\\ <Label> \\x1b]8;;\\x1b\\'\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for React\nDESCRIPTION: JSON configuration for VS Code's launch.json file to enable debugging a React application in Microsoft Edge. This setup connects the debugger to the React development server running on port 3000.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"msedge\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Edge against localhost\",\n            \"url\": \"http://localhost:3000\",\n            \"webRoot\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Breakpoints in launch.json (JSON)\nDESCRIPTION: Provides an example JSON snippet for the `hardwareBreakpoints` property within a `launch.json` file. It demonstrates how to require hardware breakpoints (`require: true`) and set a limit on their usage (`limit: 6`). This configuration is used by the C++ debugger in VS Code for remote targets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"hardwareBreakpoints\": { require: true, limit: 6 }\n```\n\n----------------------------------------\n\nTITLE: Saving Python Dependencies with pip freeze - PowerShell\nDESCRIPTION: This snippet captures all installed packages and their versions in the current virtual environment using pip freeze and writes them to a requirements.txt file. Dependencies: Python and pip installed, with a virtual environment active. Input is the command; output is requirements.txt containing dependency metadata.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Cursors in VS Code\nDESCRIPTION: Keyboard shortcut for adding cursors at the end of each selected line, enabling simultaneous editing across multiple lines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/productivity.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Multiple cursors\n\n  * Press `kb(editor.action.insertCursorAtEndOfEachLineSelected)` to add a cursor to the end of each selected line\n```\n\n----------------------------------------\n\nTITLE: Implementing Extensible Notebook Renderer\nDESCRIPTION: TypeScript implementation of a notebook renderer that extends VS Code's built-in Markdown renderer to add emoji support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as MarkdownIt from 'markdown-it';\nimport type { RendererContext } from 'vscode-notebook-renderer';\n\ninterface MarkdownItRenderer {\n    extendMarkdownIt(fn: (md: MarkdownIt) => void): void;\n}\n\nexport async function activate(ctx: RendererContext<void>) {\n    const markdownItRenderer = await ctx.getRenderer('vscode.markdown-it-renderer') as MarkdownItRenderer | undefined;\n    if (!markdownItRenderer) {\n        throw new Error(`Could not load 'vscode.markdown-it-renderer'`);\n    }\n\n    const emoji = require('markdown-it-emoji');\n\n    markdownItRenderer.extendMarkdownIt((md: MarkdownIt) => {\n        return md.use(emoji, {});\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for VS Code Webview Extension\nDESCRIPTION: Package.json configuration for a VS Code extension that implements a webview showing an animated cat coding. Defines basic extension metadata, commands, and dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cat-coding\",\n  \"description\": \"Cat Coding\",\n  \"version\": \"0.0.1\",\n  \"publisher\": \"bierner\",\n  \"engines\": {\n    \"vscode\": \"^1.74.0\"\n  },\n  \"activationEvents\": [],\n  \"main\": \"./out/extension.js\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"catCoding.start\",\n        \"title\": \"Start new cat coding session\",\n        \"category\": \"Cat Coding\"\n      }\n    ]\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"tsc -p ./\",\n    \"compile\": \"tsc -watch -p ./\",\n    \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n  },\n  \"dependencies\": {\n    \"vscode\": \"*\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^9.4.6\",\n    \"typescript\": \"^2.8.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Copilot Inline Completions (VS Code Setting)\nDESCRIPTION: Controls whether GitHub Copilot's inline code suggestions are enabled or disabled. This setting can be configured globally or for specific programming languages within Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_2\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(github.copilot.enable)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic jsconfig.json for Project Context\nDESCRIPTION: This JSON snippet illustrates a minimal `jsconfig.json` file. Creating this file at the project root establishes a formal JavaScript project context for VS Code and TypeScript, which is a prerequisite for defining custom global types using declaration files (`.d.ts`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": { },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/node_modules/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI using Dev Container Features in devcontainer.json (JSON)\nDESCRIPTION: This JSON snippet shows how to use the `features` property within a `devcontainer.json` file to declaratively install software. It specifically adds the 'Azure CLI' feature (`ghcr.io/devcontainers/features/azure-cli:1`), configuring it to install the `latest` available version. This provides a standardized way to add common tools to the development container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/azure-cli:1\": {\n        \"version\": \"latest\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring pipeTransport for Docker Container Debugging in launch.json\nDESCRIPTION: This JSON snippet configures 'pipeTransport' within launch.json to attach the debugger to a process running inside a Docker container. It uses the 'docker exec' command as the 'pipeProgram' to establish an interactive shell ('-i') within the specified container ('hello_gdb') and execute commands ('sh -c'). 'pipeCwd' specifies the working directory for the docker command, and 'debuggerPath' points to the gdb executable inside the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/pipe-transport.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"pipeTransport\": {\n    \"pipeCwd\": \"${workspaceFolder}\",\n    \"pipeProgram\": \"docker\",\n    \"pipeArgs\": [\n        \"exec\",\n        \"-i\",\n        \"hello_gdb\",\n        \"sh\",\n        \"-c\"\n    ],\n    \"debuggerPath\": \"/usr/bin/gdb\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Build Task with g++ in tasks.json (JSON)\nDESCRIPTION: This JSON snippet shows the default content of a 'tasks.json' file created by the VS Code C++ extension when running a C++ file for the first time. It defines a build task labeled 'C/C++: g++ build active file' that uses the g++ compiler ('/usr/bin/g++') to compile the currently active file ('${file}'). The '-g' argument includes debugging information, and '-o' specifies the output executable name based on the source file name in the same directory. This task is marked as the default build task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n    {\n        \"type\": \"shell\",\n        \"label\": \"C/C++: g++ build active file\",\n        \"command\": \"/usr/bin/g++\",\n        \"args\": [\n            \"-g\",\n            \"${file}\",\n            \"-o\",\n            \"${fileDirname}/${fileBasenameNoExtension}\"\n        ],\n        \"options\": {\n            \"cwd\": \"/usr/bin\"\n        },\n        \"problemMatcher\": [\n            \"$gcc\"\n        ],\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true\n        },\n        \"detail\": \"Task generated by Debugger.\"\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Shell Change Events in TypeScript\nDESCRIPTION: Demonstrates how to listen for changes in the detected default shell used by the VS Code extension host. It uses the `env.onDidChangeShell` event listener, providing a callback function that receives the new shell path (same value as `env.shell`) as an argument whenever a change occurs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nenv.onDidChangeShell(newShell => {\n    console.log(newShell); // Same value as env.shell\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Code Actions on Save in VS Code\nDESCRIPTION: This snippet shows how to configure the rule set applied during code action on save and format in the ESLint extension for VS Code. It uses the 'eslint.codeActionsOnSave.rules' setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"eslint.codeActionsOnSave.rules\": []\n```\n\n----------------------------------------\n\nTITLE: Installing Application Dependencies with npm in Bash\nDESCRIPTION: This sequence of commands changes the working directory to the new Express application ('myExpressApp') and installs all listed npm dependencies as specified in the package.json. Dependencies: Node.js, npm, and a package.json populated by express-generator. Inputs: Directory path; Output: 'node_modules' directory and a fully set up application ready for development and launch. Constraints: Must be run in the root project directory, and successful execution depends on an intact npm registry connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd myExpressApp\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Auto Test Discovery on Save (settings.json)\nDESCRIPTION: Controls whether test discovery runs automatically whenever a Python file is saved, added, or deleted in the workspace. Set to `true` (default) to enable automatic discovery, or `false` to disable it, requiring manual triggering via the 'Test: Refresh Tests' command. Requires a window reload for changes to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Enable (default)\n\"python.testing.autoTestDiscoverOnSaveEnabled\": true\n\n// Disable\n\"python.testing.autoTestDiscoverOnSaveEnabled\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for VS Code Web Extensions in JavaScript\nDESCRIPTION: This webpack configuration file is used to bundle the source code of a VS Code web extension. It sets up the environment for webworker context, defines entry points, output paths, and resolves dependencies for web compatibility.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst webpack = require('webpack');\n\n/** @typedef {import('webpack').Configuration} WebpackConfig **/\n/** @type WebpackConfig */\nconst webExtensionConfig = {\n  mode: 'none', // this leaves the source code as close as possible to the original (when packaging we set this to 'production')\n  target: 'webworker', // extensions run in a webworker context\n  entry: {\n    'extension': './src/web/extension.ts', // source of the web extension main file\n    'test/suite/index': './src/web/test/suite/index.ts' // source of the web extension test runner\n  },\n  output: {\n    filename: '[name].js',\n    path: path.join(__dirname, './dist/web'),\n    libraryTarget: 'commonjs',\n    devtoolModuleFilenameTemplate: '../../[resource-path]'\n  },\n  resolve: {\n    mainFields: ['browser', 'module', 'main'], // look for `browser` entry point in imported node modules\n    extensions: ['.ts', '.js'], // support ts-files and js-files\n    alias: {\n      // provides alternate implementation for node module and source files\n    },\n    fallback: {\n      // Webpack 5 no longer polyfills Node.js core modules automatically.\n      // see https://webpack.js.org/configuration/resolve/#resolvefallback\n      // for the list of Node.js core module polyfills.\n      'assert': require.resolve('assert')\n    }\n  },\n  module: {\n    rules: [{\n      test: /\\.ts$/,\n      exclude: /node_modules/,\n      use: [{\n          loader: 'ts-loader'\n      }]\n    }]\n  },\n  plugins: [\n    new webpack.ProvidePlugin({\n      process: 'process/browser', // provide a shim for the global `process` variable\n    }),\n  ],\n  externals: {\n    'vscode': 'commonjs vscode', // ignored because it doesn't exist\n  },\n  performance: {\n    hints: false\n  },\n  devtool: 'nosources-source-map' // create a source map that points to the original source file\n};\nmodule.exports = [webExtensionConfig];\n```\n\n----------------------------------------\n\nTITLE: Activating a Script-Enabled VS Code Webview Panel (TypeScript)\nDESCRIPTION: This snippet shows how to activate a VS Code extension command that creates a webview panel with scripts enabled. The webview displays a counter that increments periodically using JavaScript. It demonstrates dependency on the vscode API for panel creation, requires the 'path' and 'vscode' modules, and exposes a template HTML page with an animated cat image and a script tag. The script increments the displayed counter, but does not use any VS Code-specific APIs within the webview. Inputs are the extension context and activation event; output is a new webview panel inserted into the editor. Inline scripts are enabled only for demonstration and are unsafe without a Content Security Policy.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {\n          // Enable scripts in the webview\n          enableScripts: true\n        }\n      );\n\n      panel.webview.html = getWebviewContent();\n    })\n  );\n}\n\nfunction getWebviewContent() {\n  return `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\\\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\\\" width=\\\"300\\\" />\n    <h1 id=\\\"lines-of-code-counter\\\">0</h1>\n\n    <script>\n        const counter = document.getElementById('lines-of-code-counter');\n\n        let count = 0;\n        setInterval(() => {\n            counter.textContent = count++;\n        }, 100);\n    <\\/script>\n</body>\n</html>`;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Dev Container Template Selection in VS Code\nDESCRIPTION: This snippet demonstrates how to include an image in Markdown showing the Dev Container Template selection interface in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Select a node Dev Container Template](images/containers/select-dev-container-def.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Paths for IntelliSense in macOS/Linux\nDESCRIPTION: JSON configuration for adding custom package locations to enable IntelliSense for non-standard installations like Google App Engine on macOS or Linux. These paths are added to the python.analysis.extraPaths setting in settings.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/editing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"python.analysis.extraPaths\": [\n    \"~/.local/lib/Google/google_appengine\",\n    \"~/.local/lib/Google/google_appengine/lib/flask-0.12\" ]\n```\n\n----------------------------------------\n\nTITLE: Checking TypeScript Version\nDESCRIPTION: Command to verify the TypeScript installation by checking its version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsc --version\n```\n\n----------------------------------------\n\nTITLE: Defining Node.js Application Build Steps in Dockerfile\nDESCRIPTION: This Dockerfile snippet outlines the build process for a Node.js application image. It installs production dependencies using `npm install --production --silent`, copies the application source code into the image (`COPY . .`), exposes port 3000, changes ownership of the application directory to the 'node' user (`chown -R node /usr/src/app`), switches the user to 'node', and sets the default command to start the application using `npm start`. The initial comments indicate a change from a previous version which involved moving the `node_modules` directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Remove the `&& mv node_modules ../` from the RUN command:\n# RUN npm install --production --silent && mv node_modules ../\nRUN npm install --production --silent\nCOPY . .\nEXPOSE 3000\nRUN chown -R node /usr/src/app\nUSER node\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Features in VS Code User Settings\nDESCRIPTION: Example of configuring Features to be always installed in all dev containers using the dev.containers.defaultFeatures user setting. This ensures the GitHub CLI is available in every container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"dev.containers.defaultFeatures\": {\n    \"ghcr.io/devcontainers/features/github-cli:1\": {}\n},\n```\n\n----------------------------------------\n\nTITLE: Revealing and Selecting Items in Custom Tree Views in VS Code (TypeScript)\nDESCRIPTION: Illustrates registering a TreeDataProvider and using the returned TreeView's 'reveal' method to programmatically reveal and optionally select an item. The 'reveal' method can take a second options argument, such as '{select: false}' to prevent selection. Requires implementing a 'getParent' method on the TreeDataProvider and registering the provider with 'registerTreeDataProvider'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst customView = vscode.window.registerTreeDataProvider<string>('customView', new CustomViewDataProvider<string>());\ncustomView.reveal('element');\n```\n\n----------------------------------------\n\nTITLE: Verifying TypeScript Installation (Bash)\nDESCRIPTION: This command executes the installed TypeScript compiler (`tsc`) with the `--version` flag. It prints the installed version number to the console, confirming that the TypeScript compiler was installed successfully and is accessible in the system's PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsc --version\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliSense Cache Path in VS Code Settings (JSON)\nDESCRIPTION: This setting allows overriding the default location of the IntelliSense precompiled header (ipch) cache. It can be set globally (User settings) or per workspace (Workspace settings) to control where cache files are stored. Replace `<string>` with the desired directory path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"C_Cpp.intelliSenseCachePath\": <string>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entrypoint and Default Command in Dockerfile (Dockerfile)\nDESCRIPTION: This Dockerfile sets up a custom entrypoint script (`docker-entrypoint.sh`) to handle container startup tasks. It copies the script, makes it executable, sets it as the `ENTRYPOINT`, and defines a default `CMD` (`sleep infinity`) to keep the container running indefinitely if no other command is provided. This pattern allows custom initialization logic while ensuring container longevity.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/base:1-ubuntu\n\nCOPY docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\nCMD [ \"sleep\", \"infinity\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Debug Configurations in VS Code\nDESCRIPTION: This JSON configuration demonstrates how to set up compound launch configurations that start multiple debug sessions in parallel. The example defines a Server and Client configuration that can be launched together using the 'Server/Client' compound configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Server\",\n            \"program\": \"${workspaceRoot}/server.js\",\n            \"cwd\": \"${workspaceRoot}\"\n        },\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Client\",\n            \"program\": \"${workspaceRoot}/client.js\",\n            \"cwd\": \"${workspaceRoot}\"\n        }\n    ],\n    \"compounds\": [\n        {\n            \"name\": \"Server/Client\",\n            \"configurations\": [\"Server\", \"Client\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Snippet in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a custom user snippet in VS Code. It defines a snippet named \"create component\" with the prefix \"component\". When triggered, it inserts a basic React component class structure, using placeholders `$1` and `$2` for the component name and returned JSX, respectively. This snippet should be added via File > Preferences > Configure Snippets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"create component\": {\n    \"prefix\": \"component\",\n    \"body\": [\n        \"class $1 extends React.Component {\",\n        \"\",\n        \"\\trender() {\",\n        \"\\t\\treturn ($2);\",\n        \"\\t}\",\n        \"\",\n        \"}\"\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flask Hello World Application\nDESCRIPTION: This Python script defines a simple Flask web application that returns 'Hello Remote World! :)' when accessed at the root URL. It also includes the main entry point to run the app.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/07/25/remote-ssh.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello Remote World! :)\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Overriding VS Code Color Customizations - JSON\nDESCRIPTION: Demonstrates how to specify multiple editor UI color customizations in user-level VS Code settings via a JSON object. It sets both the editor background and the selection background color. Dependencies include Visual Studio Code and editing the settings.json file. The object keys control specific editor color properties, and the input is placed in the user settings file with new values overriding previous ones at lower-precedence scopes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"editor.background\": \"#000088\",\n    \"editor.selectionBackground\": \"#008800\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Piece Table Structure in TypeScript\nDESCRIPTION: Initial implementation of a piece table data structure for text editing, using original and added content buffers with nodes to track text segments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PieceTable {\n    original: string; // original contents\n    added: string; // user added contents\n    nodes: Node[];\n}\n\nclass Node {\n    type: NodeType;\n    start: number;\n    length: number;\n}\n\nenum NodeType {\n    Original,\n    Added\n}\n```\n\n----------------------------------------\n\nTITLE: Suggested Learning Prompts\nDESCRIPTION: Example prompts for learning about Azure services using GitHub Copilot for Azure\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/11/15/introducing-github-copilot-for-azure.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@azure Give me a detailed description of Azure AI Search\n@azure Which azure services can run my container?\n```\n\n----------------------------------------\n\nTITLE: Registering a Command to Create and Display Virtual Documents\nDESCRIPTION: This snippet shows how to register a command that prompts for user input, creates a virtual document URI, and displays it in an editor. The command uses the previously registered content provider to generate the document content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.registerCommand('cowsay.say', async () => {\n  let what = await vscode.window.showInputBox({ placeHolder: 'cow say?' });\n  if (what) {\n    let uri = vscode.Uri.parse('cowsay:' + what);\n    let doc = await vscode.workspace.openTextDocument(uri); // calls back into the provider\n    await vscode.window.showTextDocument(doc, { preview: false });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content Updates in VS Code Webview\nDESCRIPTION: TypeScript implementation showing how to create and update webview content dynamically. Includes functionality to rotate between different cat images and update the panel title.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nconst cats = {\n  'Coding Cat': 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',\n  'Compiling Cat': 'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif'\n};\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {}\n      );\n\n      let iteration = 0;\n      const updateWebview = () => {\n        const cat = iteration++ % 2 ? 'Compiling Cat' : 'Coding Cat';\n        panel.title = cat;\n        panel.webview.html = getWebviewContent(cat);\n      };\n\n      // Set initial content\n      updateWebview();\n\n      // And schedule updates to the content every second\n      setInterval(updateWebview, 1000);\n    })\n  );\n}\n\nfunction getWebviewContent(cat: keyof typeof cats) {\n  return `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\\\"${cats[cat]}\\\" width=\\\"300\\\" />\n</body>\n</html>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code Environment Variables with Docker Compose via devcontainer.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure only remoteEnv variables for VS Code and its subprocesses (e.g., terminal, tasks, debugging) when using Docker Compose. The container-wide variables should be managed directly in docker-compose.yml. Required: devcontainer.json, Docker Compose setup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remoteEnv\": {\n        \"PATH\": \"${containerEnv:PATH}:/some/other/path\",\n        \"MY_REMOTE_VARIABLE\": \"some-other-value-here\",\n        \"MY_REMOTE_VARIABLE2\": \"${localEnv:SOME_LOCAL_VAR}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbalanced Bracket Scopes for ShellScript in VS Code\nDESCRIPTION: JSON configuration for TextMate grammar contribution to mark certain brackets as unbalanced in shell scripts. This improves bracket pair matching and colorization for case statements in shell scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"grammars\": [{\n    \"language\": \"shellscript\",\n    \"scopeName\": \"source.shell\",\n    \"path\": \"./syntaxes/shell-unix-bash.tmLanguage.json\",\n    \"balancedBracketScopes\": [ \"*\" ],\n    \"unbalancedBracketScopes\": [ \"meta.scope.case-pattern.shell\" ]\n}],\n```\n\n----------------------------------------\n\nTITLE: Installing C++ Development Tools on Ubuntu with Bash\nDESCRIPTION: Command to install essential build tools, GCC compiler, and GDB debugger on Ubuntu. These tools are required for building and debugging C++ applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cmake-linux.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential gdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Range Formatting Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce document range formatting capabilities in the LSP initialize method response. This allows the language server to provide formatting support for selected ranges of lines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"documentRangeFormattingProvider\" : \"true\"\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GPU Requirement in Dev Container Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to specify a GPU requirement in the devcontainer.json file. It sets the 'hostRequirements' property to indicate that a GPU is needed, which will ensure the container is started with GPU enabled if one is detected.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_74.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:bullseye\",\n    \"hostRequirements\": {\n        \"gpu\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Emmet Suggestions\nDESCRIPTION: JSON setting to completely disable Emmet abbreviations in suggestions while still allowing manual expansion\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.showExpandedAbbreviation\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code as Git Diff Tool in Bash\nDESCRIPTION: These Bash commands configure Git globally to use Visual Studio Code as the default diff tool. The first command sets the 'diff.tool' property to 'vscode'. The second command specifies the command Git should use ('code --wait --diff $LOCAL $REMOTE') to open VS Code in diff mode, comparing the local and remote files, and making Git wait until VS Code is closed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Markdown-it Plugins in TypeScript\nDESCRIPTION: Shows how to contribute multiple markdown-it plugins by chaining .use() statements in the extendMarkdownIt function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/markdown-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn md.use(require('markdown-it-emoji')).use(require('markdown-it-hashtag'));\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container with Compose\nDESCRIPTION: Command to build and run the Docker container using docker-compose. This step downloads the Node base image, copies dependencies, and starts the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/31/inspecting-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Editor Contribution Point in package.json\nDESCRIPTION: Example JSON configuration for the customEditors contribution point in package.json. This registers a custom editor named 'Cat Scratch' that handles files with the .cscratch extension with default priority.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/custom-editors.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"customEditors\": [\n    {\n      \"viewType\": \"catEdit.catScratch\",\n      \"displayName\": \"Cat Scratch\",\n      \"selector\": [\n        {\n          \"filenamePattern\": \"*.cscratch\"\n        }\n      ],\n      \"priority\": \"default\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Node.js Application from Terminal\nDESCRIPTION: Command to execute a Node.js application file directly from the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Linked Editing for HTML Tags\nDESCRIPTION: JSON configuration to enable linked editing for HTML tags. When enabled, modifying an opening tag will automatically update the matching closing tag.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.linkedEditing\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Mounts in Docker Compose\nDESCRIPTION: Docker Compose configuration for mounting local directories into a service container. Shows how to mount absolute paths, home directory, and relative paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-local-file-mount.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n      - /local/source/path/goes/here:/target/path/in/container/goes/here:cached\n      - ~:/host-home-folder:cached\n      - ./data-subfolder:/data:cached\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Updating NuGet Package via Command Palette in VS Code\nDESCRIPTION: VS Code command used via the Command Palette (`kb(workbench.action.showCommands)`) to start the process of updating an existing NuGet package dependency in a selected C# project. It prompts for project selection (if applicable) and then lists installed packages with available updates, allowing selection of the target version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/package-management.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNuGet: Update NuGet Package\n```\n\n----------------------------------------\n\nTITLE: Loading Local Resources in VS Code Webview (TypeScript)\nDESCRIPTION: This snippet demonstrates how to load local resources, such as images, in a VS Code webview. It uses the `asWebviewUri` function to convert local file URIs into special URIs that VS Code can use to load resources securely.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {}\n      );\n\n      // Get path to resource on disk\n      const onDiskPath = vscode.Uri.joinPath(context.extensionUri, 'media', 'cat.gif');\n\n      // And get the special URI to use with the webview\n      const catGifSrc = panel.webview.asWebviewUri(onDiskPath);\n\n      panel.webview.html = getWebviewContent(catGifSrc);\n    })\n  );\n}\n\nfunction getWebviewContent(catGifSrc: vscode.Uri) {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\"${catGifSrc}\" width=\"300\" />\n</body>\n</html>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Terminal Profile Provider\nDESCRIPTION: TypeScript code to register a terminal profile provider that specifies shell path and profile name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.registerTerminalProfileProvider('my-ext.terminal-profile', {\n  provideProfileOptions(token) {\n    return {\n      name: 'Profile from extension',\n      shellPath: 'cmd.exe'\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing C++ Debugging with launch.json in VS Code (JSON)\nDESCRIPTION: This launch.json example provides a configuration for debugging C++ applications with the g++ compiler using the cpptools extension in VS Code. It specifies settings such as the executable to debug (program), runtime arguments (args), working directory (cwd), debugger mode (gdb), and pre-launch task. Modify fields like 'program', 'args', or 'miDebuggerPath' for your environment. Inputs are determined by VS Code's variable substitution, and the configuration expects gdb installed at the specified path. This template is suitable for Linux/GNU toolchains and requires the C/C++ extension to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"C/C++: g++ build and debug active file\\\",\\n            \\\"type\\\": \\\"cppdbg\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"program\\\": \\\"${fileDirname}/${fileBasenameNoExtension}\\\",\\n            \\\"args\\\": [],\\n            \\\"stopAtEntry\\\": false,\\n            \\\"cwd\\\": \\\"${workspaceFolder}\\\",\\n            \\\"environment\\\": [],\\n            \\\"externalConsole\\\": false,\\n            \\\"MIMode\\\": \\\"gdb\\\",\\n            \\\"miDebuggerPath\\\": \\\"/usr/bin/gdb\\\",\\n            \\\"setupCommands\\\": [\\n                {\\n                    \\\"description\\\": \\\"Enable pretty-printing for gdb\\\",\\n                    \\\"text\\\": \\\"-enable-pretty-printing\\\",\\n                    \\\"ignoreFailures\\\": true\\n                }\\n            ],\\n            \\\"preLaunchTask\\\": \\\"C/C++: g++ build active file\\\",\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code as Git difftool and mergetool\nDESCRIPTION: This snippet shows how to configure Git to use VS Code as the default diff and merge tool. It sets up commands for handling diffs and merge conflicts using VS Code's built-in capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[diff]\n    tool = default-difftool\n[difftool \"default-difftool\"]\n    cmd = code --wait --diff $LOCAL $REMOTE\n[merge]\n    tool = code\n[mergetool \"code\"]\n    cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Opening VS Code using Bash\nDESCRIPTION: Creates a new directory named 'hello', navigates into it, and then launches Visual Studio Code, opening the newly created 'hello' folder as the current workspace. This sequence is used to set up the project environment from the command line. Assumes VS Code's `code` command is in the system PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello\ncd hello\ncode .\n```\n\n----------------------------------------\n\nTITLE: Requesting WebUSB Device Access in VS Code Web Extension (TypeScript)\nDESCRIPTION: Demonstrates how a VS Code web extension can request user permission to access a USB device using the experimental `workbench.experimental.requestUsbDevice` command. It calls the command via `vscode.commands.executeCommand`, providing an optional filter object (e.g., `{ vendorId: 0x404 }`) to narrow down the devices presented to the user. This API is experimental and currently works only in Chrome/Edge web environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as vscode from 'vscode';\n\nawait vscode.commands.executeCommand('workbench.experimental.requestUsbDevice', {\n    filters: [\n        { vendorId: 0x404 } // Your custom filter or empty if you want users to select any device\n    ]\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Python Interpreter Path in VS Code Settings (JSON)\nDESCRIPTION: References the configuration setting `python.defaultInterpreterPath` within VS Code's `settings.json` (user or workspace) used to manually specify a default Python interpreter path. This path is used as the initial interpreter for a workspace if none has been previously selected. Subsequent changes to this setting are ignored once an interpreter is chosen for the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n`python.defaultInterpreterPath`\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Token Colors in a VS Code Theme\nDESCRIPTION: This JSON snippet demonstrates how to define semantic token colors in a VS Code theme. The example shows how to set a color for the 'type' token type, which will also apply to any subtypes like 'templateType'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Red Theme\",\n  \"semanticTokenColors\": {\n    \"type\": \"#ff0011\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Python Docker Build Task in JSON\nDESCRIPTION: Defines a minimal `docker-build` task in `tasks.json` for a Python project. Setting `\"platform\": \"python\"` allows the extension to infer default values for `dockerBuild.context`, `dockerBuild.dockerfile`, `dockerBuild.tag`, and sets `dockerBuild.pull` to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n      {\n      \"type\": \"docker-build\",\n      \"label\": \"docker-build\",\n      \"platform\": \"python\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair on Local Machine (Bash)\nDESCRIPTION: Creates a new SSH key pair using the Ed25519 algorithm with a 4096-bit key size on macOS or Linux. Requires the `ssh-keygen` utility, typically part of OpenSSH. This key pair is foundational for secure, key-based SSH authentication to remote hosts, and generates files in the local ~/.ssh directory (or specified path).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519 -b 4096\n\n```\n\n----------------------------------------\n\nTITLE: Basic jsconfig.json Template for JavaScript Projects\nDESCRIPTION: A starter template for jsconfig.json that sets ES6 as the JavaScript target and excludes node_modules directories from project files to optimize IntelliSense performance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\"\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/node_modules/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Browser Launch URL for ASP.NET Debug Sessions - Visual Studio Code - JSON\nDESCRIPTION: Modifies the 'serverReadyAction' configuration to ignore the ASP.NET console output URL and instead launch a fixed URI specified by 'uriFormat'. This is useful when redirecting to a specific endpoint regardless of the application's listening address. Requires VS Code with C# extension and is intended for web projects. Main fields are 'pattern' (regex, no capture group) and 'uriFormat' (the desired fixed URL). Input is matched by the pattern for triggering but the output is always the statically set 'uriFormat'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"serverReadyAction\": {\n        \"action\": \"openExternally\",\n        \"pattern\": \"\\\\bNow listening on:\\\\s+https?://\\\\S\",\n        \"uriFormat\": \"http://localhost:1234\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment (Windows)\nDESCRIPTION: This snippet provides the commands to create a Python virtual environment named '.venv' using the 'py -3' command and the 'venv' module, followed by the command to activate the environment in the Windows command prompt or PowerShell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\npy -3 -m venv .venv\n.venv\\scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Local Port for Forwarding in VS Code Remote\nDESCRIPTION: This JSON configuration sets the requireLocalPort property for a specific port in the remote.portsAttributes setting. This will cause a modal dialog to appear if the matching local port cannot be used for port forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_57.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remote.portsAttributes\": {\n  \"3000\": {\n    \"requireLocalPort\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment - Bash\nDESCRIPTION: This short snippet activates a Python virtual environment in bash (macOS/Linux). It must be run in the directory containing the 'venv' virtual environment folder. Activation enables package management and isolated Python execution for the project. Input is the command itself; output is an activated environment with the shell prompt usually indicating the environment name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate  # On macOS/Linux\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandType for Debugger Variable Expansion\nDESCRIPTION: XML schema complex type definition that specifies how to display child elements when a variable is expanded in debugger windows. It includes various child element options and attributes to control the visualization behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"ExpandType\">\n    <xs:annotation>\n      <xs:documentation>Specifies the list of child elements to be shown when a variable of the visualized type is expanded in the debugger windows.</xs:documentation>\n    </xs:annotation>\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"Item\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"ItemType\" />\n      <xs:element name=\"ArrayItems\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"ArrayItemsType\" />\n      <xs:element name=\"IndexListItems\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"IndexListItemsType\" />\n      <xs:element name=\"LinkedListItems\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"LinkedListItemsType\" />\n      <xs:element name=\"TreeItems\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"TreeItemsType\" />\n      <xs:element name=\"ExpandedItem\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"ExpandedItemType\" />\n      <xs:element name=\"Synthetic\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"SyntheticItemType\" />\n      <xs:element name=\"CustomListItems\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"CustomListItemsType\" />\n    </xs:choice>\n    <xs:attribute name=\"HideRawView\" type=\"xs:boolean\">\n      <xs:annotation>\n        <xs:documentation>Specifies whether or not the \"[Raw View]\" node for this object should be hidden. By default, this attribute is set to 'false',\n        which will result in the raw view node of the current object visible to the user.\n        </xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Docker Host Connection via TCP in VS Code Settings (JSON)\nDESCRIPTION: Sets the `docker.environment` property in VS Code's `settings.json` to configure the Docker extension for connecting to a remote Docker host using the TCP protocol, typically requiring TLS configuration for security. It specifies the `DOCKER_HOST` with the remote machine's address and port, the optional `DOCKER_CERT_PATH` pointing to the folder containing TLS certificate files (`ca.pem`, `cert.pem`, `key.pem`), and `DOCKER_TLS_VERIFY` set to `\"1\"` to enable TLS verification or `\"0\"` to disable it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"docker.environment\": {\n    \"DOCKER_HOST\": \"tcp://your-remote-machine-fqdn-or-ip-here:port\",\n    \"DOCKER_CERT_PATH\": \"/optional/path/to/folder/with/certificate/files\",\n    \"DOCKER_TLS_VERIFY\": \"1\" // or \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TestItems in VS Code Testing API\nDESCRIPTION: Demonstrates how to parse Markdown content to create test items with appropriate parent-child relationships. This snippet shows how to add test items to either the controller's items collection or a parent's children collection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparseMarkdown(content, {\n  onTest: (range, numberA, mathOperator, numberB, expectedValue) => {\n    // If this is a top-level test, add it to its parent's children. If not,\n    // add it to the controller's top level items.\n    const collection = parent ? parent.children : controller.items;\n    // Create a new ID that's unique among the parent's children:\n    const id = [numberA, mathOperator, numberB, expectedValue].join('  ');\n\n    // Finally, create the test item:\n    const test = controller.createTestItem(id, data.getLabel(), item.uri);\n    test.range = range;\n    collection.add(test);\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using the vscode.debug.breakpoints API in TypeScript/JavaScript\nDESCRIPTION: Example of accessing all workspace breakpoints and registering for breakpoint change notifications using the Debug API. This is a preview feature that requires enabling proposed API in the extension's package.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Access all breakpoints\nconst breakpoints = vscode.debug.breakpoints;\n\n// Register for breakpoint changes\nvscode.debug.onDidChangeBreakpoints((event) => {\n    // Handle breakpoint changes\n    // Note: initially breakpoints may be empty, this event will update them\n});\n\n// Check breakpoint types\nfor (const bp of breakpoints) {\n    if (bp instanceof vscode.SourceBreakpoint) {\n        // Handle source breakpoint\n    } else if (bp instanceof vscode.FunctionBreakpoint) {\n        // Handle function breakpoint\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Configuration - Debug Toolbar Location\nDESCRIPTION: JSON configuration to set the debug toolbar location to appear in the command center.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_83.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"debug.toolBarLocation\": \"commandCenter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Inline Suggestion Visibility in VS Code Settings\nDESCRIPTION: This setting (`terminal.integrated.suggest.inlineSuggestion`) controls how inline suggestions detected from shell features (like fish/zsh auto-suggestions) are presented within the VS Code terminal's IntelliSense. By default, it displays the detected inline suggestion as the top option with a star icon. This setting allows customization of this behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nsetting(terminal.integrated.suggest.inlineSuggestion)\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Source Actions on Save - JSON\nDESCRIPTION: This snippet provides an example of executing multiple source actions when saving a file in Visual Studio Code. It sets 'source.fixAll' to 'explicit', triggering all fix actions only during explicit saves, and 'source.organizeImports' to 'always', organizing imports on every save event including auto-saves. To use, insert this configuration in the 'settings.json' file. This approach helps automate code formatting and error correction without external dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-refactoring.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n// On explicit save, run fixAll source action. On auto save (window or focus change), run organizeImports source action.\\n\\\"editor.codeActionsOnSave\\\": {\\n    \\\"source.fixAll\\\": \\\"explicit\\\",\\n    \\\"source.organizeImports\\\": \\\"always\\\",\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Node.js Version with nvm in launch.json (JSON)\nDESCRIPTION: This launch configuration snippet demonstrates how to specify a particular major version of Node.js (e.g., version 14) for debugging when using 'nvm' or 'nvm-windows'. The `runtimeVersion` attribute selects the most recent installed version matching the major version specified.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch test\",\n    \"runtimeVersion\": \"14\",\n    \"program\": \"${workspaceFolder}/test.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting a Persistent Volume in devcontainer.json - VS Code Dev Containers - JSON\nDESCRIPTION: This devcontainer.json snippet demonstrates how to define a persistent Docker volume specifically for bash history by setting the 'mounts' property. 'source' names the Docker volume, 'target' specifies the container path (/commandhistory), and 'type' declares the mount as a Docker volume. This enables bash history files to persist across container rebuilds and restarts. VS Code version 1.41 or greater is required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/persist-bash-history.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"mounts\": [\n      \"source=projectname-bashhistory,target=/commandhistory,type=volume\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Opening Current Directory in VS Code via Command Line (Windows)\nDESCRIPTION: This command, typically run in Command Prompt or PowerShell, opens Visual Studio Code targeting the current directory. It requires VS Code to be added to the system's PATH environment variable during installation. A restart of the console might be needed after installation for the PATH change to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/windows.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Defining custom fonts for file icons in VS Code themes\nDESCRIPTION: This JSON snippet demonstrates how to define custom fonts for use in file icon themes. It includes font definitions with source files, styling properties, and an icon definition that uses the custom font.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/file-icon-theme.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fonts\": [\n    {\n      \"id\": \"turtles-font\",\n      \"src\": [\n        {\n          \"path\": \"./turtles.woff\",\n          \"format\": \"woff\"\n        }\n      ],\n      \"weight\": \"normal\",\n      \"style\": \"normal\",\n      \"size\": \"150%\"\n    }\n  ],\n  \"iconDefinitions\": {\n    \"_file\": {\n      \"fontCharacter\": \"\\\\E002\",\n      \"fontColor\": \"#5f8b3b\",\n      \"fontId\": \"turtles-font\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment with Python and Libraries\nDESCRIPTION: Command to create a conda environment named 'env-01' with Python 3.9 interpreter and specific libraries (scipy version 0.15.0 and numpy). This demonstrates how to set up an isolated conda environment with required dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n env-01 python=3.9 scipy=0.15.0 numpy\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Config Entry in VS Code\nDESCRIPTION: Example SSH configuration generated automatically by VS Code when adding a new SSH host via the command input. This entry specifies the user, hostname (or IP address), and the identity file (private key) to use for the connection, simplifying future connections to 'remotehost.yourcompany.com'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_1\n\nLANGUAGE: ssh-config\nCODE:\n```\nHost remotehost.yourcompany.com\n    User yourname\n    HostName another-host-fqdn-or-ip-goes-here\n    IdentityFile ~/.ssh/id_rsa-remote-ssh\n```\n\n----------------------------------------\n\nTITLE: Defining VariableType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for declaring variables in custom list items. It includes attributes for the variable name and initial value, with documentation for each attribute.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"VariableType\">\n    <xs:annotation>\n      <xs:documentation>\n        Declares a variable for use in future expressions with the &lt;CustomListItems&gt; block.\n      </xs:documentation>\n    </xs:annotation>\n    <xs:attribute name=\"Name\" type=\"CppIdType\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>Name of the variable.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attribute name=\"InitialValue\" type=\"StringType\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>\n          Expression evaluating to the initial value of the variable.\n          This expression also specifies the type of the variable. Initial value expressions may make use of other variables already defined.\n        </xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Fix on Save for All Providers in VS Code - JSON\nDESCRIPTION: This JSON configuration snippet enables the Auto Fix on Save feature for all code action providers in Visual Studio Code, including ESLint. Place this setting within your VS Code settings.json file. The key \"editor.codeActionsOnSave\" should be set at the user or workspace level. Setting the \"source.fixAll\" property to true ensures that all possible fix actions provided by your extensions are applied automatically on file save.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"editor.codeActionsOnSave\\\": {\\n        \\\"source.fixAll\\\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Nesting Patterns in VS Code (JSON)\nDESCRIPTION: Example JSON configuration for the explorer.fileNesting.patterns setting, which controls how files are nested in the VS Code Explorer. This snippet shows patterns for nesting TypeScript, JavaScript, and configuration files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"explorer.fileNesting.patterns\": {\n  \"*.ts\": \"${capture}.js,${capture}.js.map,${capture}.min.js,${capture}.d.ts\",\n  \"*.js\": \"${capture}.js.map,${capture}.min.js,${capture}.d.ts\",\n  \"*.jsx\": \"${capture}.js\",\n  \"*.tsx\": \"${capture}.ts\",\n  \"tsconfig.json\": \"tsconfig.*.json\",\n  \"package.json\": \"package-lock.json,yarn.lock\"\n}\n```\n\n----------------------------------------\n\nTITLE: LSP Communication Example - JSON-RPC Messages\nDESCRIPTION: Example of typical message exchanges between a development tool and language server using JSON-RPC protocol. Shows notifications and requests for document operations like open, change, definition lookup, and close.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/06/27/common-language-protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"didOpen\": \"Document opened notification\",\n  \"didChange\": \"Document changed notification\",\n  \"diagnostics\": \"Server sends errors/warnings\",\n  \"definition\": \"Go to definition request\",\n  \"response\": {\n    \"uri\": \"Document URI\",\n    \"range\": \"Position in document\"\n  },\n  \"didClose\": \"Document closed notification\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring preLaunchTask with Default Build Task in VS Code Debug Configuration\nDESCRIPTION: JSON configuration showing how to use the new ${defaultBuildTask} variable in a launch configuration to automatically use the default build task as a pre-launch task. This simplifies debug configurations by eliminating the need to hardcode specific task names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Hello World\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"preLaunchTask\": \"${defaultBuildTask}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding View-Specific Menu Items in VSCode Extensions\nDESCRIPTION: JSON configuration for contributing command menu items to specific views like the terminal. This example shows how to add an action to the terminal view's title area.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"view/title\": [\n        {\n          \"command\": \"terminalApi.sendText\",\n          \"when\": \"view == terminal\",\n          \"group\": \"navigation\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Configuration Example\nDESCRIPTION: Example configuration for a custom editor contribution showing viewType, displayName, selector patterns and priority settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"customEditors\": [\n      {\n        \"viewType\": \"catEdit.catScratch\",\n        \"displayName\": \"Cat Scratch\",\n        \"selector\": [\n          {\n            \"filenamePattern\": \"*.cscratch\"\n          }\n        ],\n        \"priority\": \"default\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Sorting with Ruff Formatter in VS Code Settings (JSON)\nDESCRIPTION: Shows how to enable the Ruff formatter as the preferred import sorter for Python files by updating the User or Workspace settings.json in VS Code. By placing the source.organizeImports.ruff key inside editor.codeActionsOnSave under the [python] scope, VS Code will organize imports using Ruff explicitly on save for Python code. The Ruff extension must be installed for this functionality to work as expected.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/formatting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"[python]\": {\\n    \"editor.codeActionsOnSave\": {\\n      \"source.organizeImports.ruff\": \"explicit\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Feature Lockfile in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the new experimental lockfile for Dev Container Features. It includes version information, resolved URL, and integrity hash for a GitHub CLI feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_78.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"ghcr.io/devcontainers/features/github-cli:1\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"ghcr.io/devcontainers/features/github-cli@sha256:8a1705f62d358565394a868685047e57a8729cd88462a665967bea79a550b7c7\",\n      \"integrity\": \"sha256:8a1705f62d358565394a868685047e57a8729cd88462a665967bea79a550b7c7\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom PowerShell Terminal Profile on Windows (JSONC)\nDESCRIPTION: This JSONC snippet demonstrates configuring a custom terminal profile named 'Custom Init' for Windows within VS Code settings. It specifies 'pwsh.exe' as the path and provides arguments to execute a custom initialization script located using the APPDATA environment variable. It also sets this custom profile as the default for Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"Custom Init\": {\n      \"path\": \"pwsh.exe\",\n      \"args\": [\n         \"-noexit\",\n         \"-file\",\n         \"${env:APPDATA}\\\\PowerShell\\\\custom-init.ps1\"\n      ]\n    }\n  },\n  \"terminal.integrated.defaultProfile.windows\": \"Custom Init\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit4 Gradle Dependencies\nDESCRIPTION: Gradle configuration for adding JUnit4 test dependencies to a Java project's build.gradle file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    java\n}\n\ndependencies {\n    testImplementation('junit:junit:(YOUR_JUNIT_VERSION)')\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Run Recent Command' Keybindings in VS Code\nDESCRIPTION: This JSONC snippet shows how to customize VS Code keyboard shortcuts in `keybindings.json` to flip the behavior of `Ctrl+R` and `Ctrl+Alt+R` in the terminal when accessibility mode is off. By default, `Ctrl+Alt+R` runs the 'Terminal: Run Recent Command' action; this configuration makes `Ctrl+R` trigger it instead, while mapping `Ctrl+Alt+R` to send the standard Ctrl+R sequence (`\\u0012`) to the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"key\": \"ctrl+r\",\n    \"command\": \"workbench.action.terminal.runRecentCommand\",\n    \"when\": \"terminalFocus\"\n},\n{\n  \"key\": \"ctrl+alt+r\",\n  \"command\": \"workbench.action.terminal.sendSequence\",\n  \"args\": { \"text\": \"\\u0012\"/*^R*/ },\n  \"when\": \"terminalFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Tasks Configuration\nDESCRIPTION: Task configuration for VS Code that sets up parallel watch tasks for esbuild and TypeScript compilation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n            \"label\": \"watch\",\n            \"dependsOn\": [\n                \"npm: watch:tsc\",\n                \"npm: watch:esbuild\"\n            ],\n            \"presentation\": {\n                \"reveal\": \"never\"\n            },\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        },\n        {\n            \"type\": \"npm\",\n            \"script\": \"watch:esbuild\",\n            \"group\": \"build\",\n            \"problemMatcher\": \"$esbuild-watch\",\n            \"isBackground\": true,\n            \"label\": \"npm: watch:esbuild\",\n            \"presentation\": {\n                \"group\": \"watch\",\n                \"reveal\": \"never\"\n            }\n        },\n\t\t{\n            \"type\": \"npm\",\n            \"script\": \"watch:tsc\",\n            \"group\": \"build\",\n            \"problemMatcher\": \"$tsc-watch\",\n            \"isBackground\": true,\n            \"label\": \"npm: watch:tsc\",\n            \"presentation\": {\n                \"group\": \"watch\",\n                \"reveal\": \"never\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Dev Container with Remote Bind Mount in devcontainer.json (JSON)\nDESCRIPTION: Defines a `devcontainer.json` configuration for remote Docker hosts that bind mounts a specific directory from the *remote* machine's filesystem into the container. It updates the `workspaceMount` property to use `type=bind`, specifying the absolute source path on the remote server (`source=/absolute/path/on/remote/machine`) and the target path within the container (`target=/workspace`). This method requires access to the specified path on the remote host and allows working with existing source code on that machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=/absolute/path/on/remote/machine,target=/workspace,type=bind,consistency=cached\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Server Launch Mode in VS Code\nDESCRIPTION: Configuration options for java.server.launchMode setting that controls how VS Code opens Java workspaces. Options include Hybrid (default), Standard, and LightWeight modes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-project.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"java.server.launchMode\": \"Hybrid\"\n```\n\n----------------------------------------\n\nTITLE: Configuring C/C++ Properties in c_cpp_properties.json (JSON)\nDESCRIPTION: This JSON snippet configures the VS Code C/C++ extension settings for a Windows (Win32) environment using MSVC. It specifies include paths (`includePath`), preprocessor defines (`defines`), the Windows SDK version (`windowsSdkVersion`), the crucial path to the MSVC compiler (`compilerPath`) used for IntelliSense features like completions and Go to Definition, C/C++ language standards (`cStandard`, `cppStandard`), and the IntelliSense mode (`intelliSenseMode`). This file is typically located in the `.vscode` folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"configurations\": [\n    {\n        \"name\": \"Win32\",\n        \"includePath\": [\n            \"${workspaceFolder}/**\"\n        ],\n        \"defines\": [\n            \"_DEBUG\",\n            \"UNICODE\",\n            \"_UNICODE\"\n        ],\n        \"windowsSdkVersion\": \"10.0.18362.0\",\n        \"compilerPath\": \"C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe\",\n        \"cStandard\": \"c11\",\n        \"cppStandard\": \"c++17\",\n        \"intelliSenseMode\": \"msvc-x64\"\n    }\n],\n\"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Installation on Container Start using postStartCommand (JSON)\nDESCRIPTION: This snippet shows how to use the `postStartCommand` property within a `devcontainer.json` file to execute a command, like `yarn install`, each time the development container starts. This ensures project dependencies are kept up-to-date automatically upon connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"yarn install\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clang C++ Debug Flags via Environment Variable (Shell)\nDESCRIPTION: Sets the `CXXFLAGS` environment variable to include the `--debug` flag, ensuring that subsequent Clang++ compilations within that shell session will generate debug symbols. This is commonly used in build scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport CXXFLAGS=\"${CXXFLAGS} --debug\"\n```\n\n----------------------------------------\n\nTITLE: Remapping and Adding Keyboard Shortcuts for VS Code Actions (JSON)\nDESCRIPTION: This JSON snippet shows how to both reference the original keyboard shortcut binding for deleting lines and add a new shortcut (Ctrl+D) for the same action. The code should be placed in the 'keybindings.json' file, with the commented original version copied from the default keybindings for reference. The 'key' property sets the keyboard combination, 'command' specifies the VS Code operation, and 'when' sets the context (here, 'editorTextFocus'). Inputs are keypresses in the editor, triggering line deletion for each mapping. Syntax errors in the file will prevent correct behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// Original, in Default Keyboard Shortcuts\n{ \"key\": \"ctrl+shift+k\",          \"command\": \"editor.action.deleteLines\",\n                                         \"when\": \"editorTextFocus\" },\n// Modified, in User/keybindings.json, Ctrl+D now will also trigger this action\n{ \"key\": \"ctrl+d\",                \"command\": \"editor.action.deleteLines\",\n                                         \"when\": \"editorTextFocus\" },\n```\n\n----------------------------------------\n\nTITLE: Advanced Debugging Customization for GDB/LLDB (VS Code, JSON)\nDESCRIPTION: This sample launch.json configuration is for advanced C/C++ debugging with customization for GDB and LLDB on multiple operating systems. It specifies advanced options such as \"stopAtEntry\", custom launch setup commands, and platform-specific debugger settings (MIMode, miDebuggerPath). The configuration includes OS-specific blocks for Linux (using gdb), macOS (lldb), and Windows (gdb with path), and sets launch behavior through \"launchCompleteCommand\". Dependencies include GDB or LLDB installed for each target OS, and accurate paths for compilers/debuggers. The expected input is the JSON config, with outputs determined by debugger operation within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"C++ Launch\",\n   \"type\": \"cppdbg\",\n   \"request\": \"launch\",\n   \"program\": \"${workspaceFolder}/a.out\",\n   \"stopAtEntry\": false,\n   \"customLaunchSetupCommands\": [\n      { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }\n   ],\n   \"launchCompleteCommand\": \"exec-run\",\n   \"linux\": {\n      \"MIMode\": \"gdb\",\n      \"miDebuggerPath\": \"/usr/bin/gdb\"\n   },\n   \"osx\": {\n      \"MIMode\": \"lldb\"\n   },\n   \"windows\": {\n      \"MIMode\": \"gdb\",\n      \"miDebuggerPath\": \"C:\\\\MinGw\\\\bin\\\\gdb.exe\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Authentication Provider in VS Code Extension\nDESCRIPTION: JSON configuration for contributing an authentication provider to VS Code. This sets up an activation event and displays the provider in the extension's features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"authentication\": [\n      {\n        \"label\": \"Azure Dev Ops\",\n        \"id\": \"azuredevops\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension WebAssembly Integration\nDESCRIPTION: Main extension code that loads WebAssembly module, creates workers, and implements calculator functionality. Demonstrates async communication between extension and WebAssembly worker including logging and calculation operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The channel for printing the result.\nconst channel = vscode.window.createOutputChannel('Calculator');\ncontext.subscriptions.push(channel);\n\n// The channel for printing the log.\nconst log = vscode.window.createOutputChannel('Calculator - Log', { log: true });\ncontext.subscriptions.push(log);\n\n// The implementation of the log function that is called from WASM\nconst service: calculator.Imports.Promisified = {\n\tlog: async (msg: string): Promise<void> => {\n\t\t// Wait 100ms to slow things down :-)\n\t\tawait new Promise(resolve => setTimeout(resolve, 100));\n\t\tlog.info(msg);\n\t}\n};\n\n// Load the WASM model\nconst filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'calculator.wasm');\nconst bits = await vscode.workspace.fs.readFile(filename);\nconst module = await WebAssembly.compile(bits);\n\n// Create the worker\nconst worker = new Worker(vscode.Uri.joinPath(context.extensionUri, './out/worker.js').fsPath);\n// Bind the world to the worker\nconst api = await calculator._.bind(service, module, worker);\n\nvscode.commands.registerCommand('vscode-samples.wasm-component-model-async.run', async () => {\n\tchannel.show();\n\tchannel.appendLine('Running calculator example');\n\tconst add = Types.Operation.Add({ left: 1, right: 2});\n\tchannel.appendLine(`Add ${await api.calc(add)}`);\n\tconst sub = Types.Operation.Sub({ left: 10, right: 8 });\n\tchannel.appendLine(`Sub ${await api.calc(sub)}`);\n\tconst mul = Types.Operation.Mul({ left: 3, right: 7 });\n\tchannel.appendLine(`Mul ${await api.calc(mul)}`);\n\tconst div = Types.Operation.Div({ left: 10, right: 2 });\n\tchannel.appendLine(`Div ${await api.calc(div)}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Mock Debug Project\nDESCRIPTION: These commands clone the vscode-mock-debug repository, navigate to the project directory, and install dependencies using yarn.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/debugger-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-mock-debug.git\ncd vscode-mock-debug\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Node.js Express Server in JavaScript\nDESCRIPTION: A basic Node.js Express application that sets up a server listening on port 3000 and responds with 'Hello World!' for requests to the root path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!')\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!')\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Debug for Python in launch.json\nDESCRIPTION: Launch configuration for debugging a Python Django application in a Docker container. Includes path mappings and project type specification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-common.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"name\": \"Docker: Python - Django\",\n      \"type\": \"docker\",\n      \"request\": \"launch\",\n      \"preLaunchTask\": \"docker-run: debug\",\n      \"python\": {\n        \"pathMappings\": [\n          {\n            \"localRoot\": \"${workspaceFolder}\",\n            \"remoteRoot\": \"/app\"\n          }\n        ],\n        \"projectType\": \"django\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Written Directly in Rust Using VS Code APIs\nDESCRIPTION: A complete VS Code extension implementation in Rust that demonstrates direct use of VS Code APIs from WebAssembly. It creates an output channel, registers a command handler, and lists open document URIs when the command is executed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse std::rc::Rc;\n\n#[export_name = \"activate\"]\npub fn activate() -> vscode::Disposables {\n\tlet mut disposables: vscode::Disposables = vscode::Disposables::new();\n\n\t// Create an output channel.\n\tlet channel: Rc<vscode::OutputChannel> = Rc::new(vscode::window::create_output_channel(\"Rust Extension\", Some(\"plaintext\")));\n\n\t// Register a command handler\n\tlet channel_clone = channel.clone();\n\tdisposables.push(vscode::commands::register_command(\"testbed-component-model-vscode.run\", move || {\n\t\tchannel_clone.append_line(\"Open documents\");\n\n\t\t// Print the URI of all open documents\n\t\tfor document in vscode::workspace::text_documents() {\n\t\t\tchannel.append_line(&format!(\"Document: {}\", document.uri()));\n\t\t}\n\t}));\n\treturn disposables;\n}\n\n#[export_name = \"deactivate\"]\npub fn deactivate() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grocery Item Model with Pydantic in Python\nDESCRIPTION: This snippet establishes a Pydantic data model for grocery list items in a FastAPI project. It imports the required BaseModel from pydantic and uses Python's type hints to specify each model field. The model class, ItemPayload, includes 'item_id' (optional int), 'item_name' (string), and 'quantity' (int), serving as the schema for incoming item data to be validated and parsed by FastAPI endpoints. Dependencies: 'pydantic' and Python 3.7+. No external inputs are needed beyond the provided fields. Outputs will be validated ItemPayload instances or API errors if validation fails.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\\nfrom pydantic import BaseModel\\n\\nclass ItemPayload(BaseModel):\\n    item_id: Optional[int]\\n    item_name: str\\n    quantity: int\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Smart Auto Attach Patterns in VS Code Settings (JSON)\nDESCRIPTION: Provides an example of customizing the `debug.javascript.autoAttachSmartPattern` setting in VS Code. This JSON array modifies the default behavior to explicitly exclude scripts within `node_modules/mocha` while including scripts within a custom runner directory `node_modules/my-cool-test-runner` for the `smart` Auto Attach mode. This configuration is applied via VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"!**/node_modules/**\",\n  \"**/$KNOWN_TOOLS$/**\",\n  \"!**/node_modules/mocha/**\", // use \"!\" to exclude all scripts in \"mocha\" node modules\n  \"**/node_modules/my-cool-test-runner/**\" // include scripts in the custom test runner\n]\n```\n\n----------------------------------------\n\nTITLE: Mapping Semantic Tokens to TextMate Scopes in VSCode Extensions\nDESCRIPTION: JSON configuration for mapping semantic token types and modifiers to TextMate scopes for a specific language. This example maps readonly properties in TypeScript to specific scopes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenScopes\": [\n      {\n        \"language\": \"typescript\",\n        \"scopes\": {\n          \"property.readonly\": [\"variable.other.constant.property.ts\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Terminal Profiles (JSON)\nDESCRIPTION: This JSON snippet illustrates how to define platform-specific terminal profiles in VS Code settings. It shows a Windows profile 'PowerShell -NoProfile' using the 'source' property and '-NoProfile' argument, and a Linux profile 'zsh (login)' using the 'path' property and '-l' (login) argument.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"PowerShell -NoProfile\": {\n      \"source\": \"PowerShell\",\n      \"args\": [\"-NoProfile\"]\n    }\n  },\n  \"terminal.integrated.profiles.linux\": {\n    \"zsh (login)\": {\n      \"path\": \"zsh\",\n      \"args\": [\"-l\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current File Directory as Terminal Working Directory\nDESCRIPTION: JSON setting to configure the integrated terminal to open in the directory of the currently active file using the fileDirname variable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.cwd\": \"${fileDirname}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Terminal Suggestions\nDESCRIPTION: JSON configuration to enable VSCode-native PowerShell IntelliSense suggestions in the integrated terminal. This setting enables improved command completion and suggestion features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.suggest.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Extensions Programmatically in VS Code\nDESCRIPTION: Demonstrates how to use the workbench.extensions.uninstallExtension command to programmatically uninstall an extension in VS Code. This example shows uninstalling the Python extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('workbench.extensions.uninstallExtension', 'ms-python.python');\n```\n\n----------------------------------------\n\nTITLE: Enabling Stepping into Properties and Operators (JSON)\nDESCRIPTION: This snippet sets 'enableStepFiltering' to false, allowing the debugger to step into properties and operators of managed code. By default, these are stepped over to streamline the debugging experience, but disabling this filter can help diagnose property accessors or operator overloads. Boolean input; set to false to step into, true (default) to skip.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"enableStepFiltering\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code with Verbose Logging for Keychain Troubleshooting\nDESCRIPTION: This command starts Visual Studio Code with verbose logging enabled, focusing specifically on the OS crypt components (`*/components/os_crypt/*=1`). This is useful for diagnosing issues related to keychain/keyring access, particularly for Settings Sync authentication persistence. The logs generated can help identify the specific desktop environment detected and the backend being used for password storage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncode --verbose --vmodule=\"*/components/os_crypt/*=1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in Terminal for macOS/Linux and Windows\nDESCRIPTION: Commands to create a Python virtual environment using the venv module. For macOS/Linux, it creates a .venv folder, noting that Debian-based OSs may need to install python3-venv first. For Windows, it shows how to create a virtual environment with either python or py commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# macOS/Linux\n# You may need to run `sudo apt-get install python3-venv` first on Debian-based OSs\npython3 -m venv .venv\n\n# Windows\n# You can also use `py -3 -m venv .venv`\npython -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Defining an MCP Server in VS Code User Settings (JSON)\nDESCRIPTION: This JSON snippet illustrates how to add an MCP server configuration to the global VS Code user settings (`settings.json`). It defines a server named `my-mcp-server` using the `stdio` connection type, specifying the command and arguments needed to start it. This configuration makes the server available across all workspaces for the current user. Requires VS Code and the specified command (`my-command`) to be executable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/mcp-servers.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// settings.json\n{\n    \"mcp\": {\n        \"servers\": {\n            \"my-mcp-server\": {\n                \"type\": \"stdio\",\n                \"command\": \"my-command\",\n                \"args\": []\n            }\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Schema Declaration\nDESCRIPTION: Example showing how to specify a schema reference in a JSON file using the $schema property to link to CoffeeLint schema.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"$schema\": \"https://json.schemastore.org/coffeelint\",\n   \"line_endings\": \"unix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Ready Action in VS Code Launch Configuration\nDESCRIPTION: Configuration for the serverReadyAction feature that automatically opens a browser when a server starts. It captures the port from console output and formats it into a URL to be opened externally.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Launch Program\",\n  \"program\": \"${workspaceFolder}/app.js\",\n\n  \"serverReadyAction\": {\n    \"pattern\": \"listening on port ([0-9]+)\",\n    \"uriFormat\": \"http://localhost:%s\",\n    \"action\": \"openExternally\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Profile Activation Events\nDESCRIPTION: JSON configuration for terminal profile activation events in extension's package.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n  \"onTerminalProfile:my-ext.terminal-profile\"\n]\n```\n\n----------------------------------------\n\nTITLE: Mapping Source File Locations in launch.json (JSON)\nDESCRIPTION: This JSON example shows the usage of the `sourceFileMap` property within a `launch.json` configuration. It defines key-value pairs to map source file paths recorded during compilation (keys) to their actual locations on the filesystem where the debugger is running (values). This is essential when the build environment differs from the debugging environment, allowing the debugger to correctly locate and display source code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-debug.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sourceFileMap\": {\n    \"/build/gcc-4.8-fNUjSI/gcc-4.8-4.8.4/build/i686-linux-gnu/libstdc++-v3/include/i686-linux-gnu\": \"/usr/include/i686-linux-gnu/c++/4.8\",\n    \"/build/gcc-4.8-fNUjSI/gcc-4.8-4.8.4/build/i686-linux-gnu/libstdc++-v3/include\": \"/usr/include/c++/4.8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Restoration Behavior\nDESCRIPTION: A specific configuration value for the `window.restoreWindows` setting in VS Code. Setting it to `preserve` ensures that all previously opened windows are restored on restart, even when VS Code is launched to open a specific file or folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\nwindow.restoreWindows: preserve\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Prompt Command in Bash for VS Code Terminal Integration\nDESCRIPTION: This Bash snippet demonstrates how to set a custom prompt command that is compatible with VS Code's shell integration. It defines a function that sets the terminal title and assigns it to PROMPT_COMMAND.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nprompt() {\n  printf \"\\033]0;%s@%s:%s\\007\" \"${USER}\" \"${HOSTNAME%%.*}\" \"${PWD/#$HOME/\\~}\"\n}\nPROMPT_COMMAND=prompt\n```\n\n----------------------------------------\n\nTITLE: Updating devcontainer.json to Use Extension Compose File (JSON)\nDESCRIPTION: Demonstrates how to update the `dockerComposeFile` property within both `devcontainer.json` files (e.g., for Python and Node.js containers) to include both the base `docker-compose.yml` and the development-specific override file (`docker-compose.devcontainer.yml`). This array ensures both configuration files are layered and applied when launching the containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"dockerComposeFile\": [\n  \"../../docker-compose.yml\",\n  \"../../docker-compose.devcontainer.yml\",\n]\n```\n\n----------------------------------------\n\nTITLE: Opening External Resources in VS Code Extensions\nDESCRIPTION: Shows how to open external resources using VS Code's openExternal API, with support for automatic localhost port forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport async function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.commands.registerCommand('myAmazingExtension.openExternal', () => {\n\n        // Example 1 - Open the VS Code homepage in the default browser.\n        vscode.env.openExternal(vscode.Uri.parse('https://code.visualstudio.com'));\n\n        // Example 2 - Open an auto-forwarded localhost HTTP server.\n        vscode.env.openExternal(vscode.Uri.parse('http://localhost:3000'));\n\n        // Example 3 - Open the default email application.\n        vscode.env.openExternal(vscode.Uri.parse('mailto:<fill in your email here>'));\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Preferred Extract Constant Refactoring to Keyboard Shortcut in VS Code JSON\nDESCRIPTION: This JSON configuration defines a keyboard shortcut (`shift+ctrl+e`) in VS Code to trigger the `editor.action.codeAction` command for `refactor.extract.constant`. The `\"preferred\": true` argument ensures that only the preferred 'Extract Constant' refactoring (typically extracting to a local variable) is considered. The `\"apply\": \"ifSingle\"` argument causes the action to be applied automatically only if it's the single available preferred option, otherwise showing the context menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/refactoring.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"shift+ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.constant\",\n    \"preferred\": true,\n    \"apply\": \"ifSingle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Line Debugging Syntax with debugpy\nDESCRIPTION: The general command line syntax pattern for running the Python debugger using debugpy. It shows all possible flags and options including connection methods, port configuration, logging options, and execution targets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m debugpy\n    --listen | --connect\n    [<host>:]<port>\n    [--wait-for-client]\n    [--configure-<name> <value>]...\n    [--log-to <path>] [--log-to-stderr]\n    <filename> | -m <module> | -c <code> | --pid <pid>\n    [<arg>]...\n```\n\n----------------------------------------\n\nTITLE: Custom File Count Handler in Rust LSP Server\nDESCRIPTION: Implementation of a custom LSP request handler in Rust for counting files in a workspace directory. Demonstrates custom message handling in WebAssembly LSP server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n#[serde(rename_all = \"camelCase\")]\npub struct CountFilesParams {\n    pub folder: Url,\n}\n\npub enum CountFilesRequest {}\nimpl Request for CountFilesRequest {\n    type Params = CountFilesParams;\n    type Result = u32;\n    const METHOD: &'static str = \"wasm-language-server/countFilesInDirectory\";\n}\n\n//...\n\nfor msg in &connection.receiver {\n    match msg {\n\t\t//....\n\t\tmatch cast::<CountFilesRequest>(req) {\n    \t\tOk((id, params)) => {\n\t\t\t\teprintln!(\"Received countFiles request #{} {}\", id, params.folder);\n        \t\tlet result = count_files_in_directory(&params.folder.path());\n        \t\tlet json = serde_json::to_value(&result).unwrap();\n        \t\tlet resp = Response { id, result: Some(json), error: None };\n        \t\tconnection.sender.send(Message::Response(resp))?;\n        \t\tcontinue;\n    \t\t}\n    \t\tErr(err @ ExtractError::JsonError { .. }) => panic!(\"{err:?}\"),\n    \t\tErr(ExtractError::MethodMismatch(req)) => req,\n\t\t}\n\t}\n\t//...\n}\n\nfn count_files_in_directory(path: &str) -> usize {\n    WalkDir::new(path)\n        .into_iter()\n        .filter_map(Result::ok)\n        .filter(|entry| entry.file_type().is_file())\n        .count()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Build Task in tasks.json (JSON)\nDESCRIPTION: This JSON snippet shows a task definition within VS Code's `tasks.json` file. It defines a task labeled 'docker-build' of type 'docker-build'. The `dockerBuild` object specifies the build context (project root), the path to the Dockerfile, and the tag to apply to the built image. This task can be referenced as a dependency by other tasks, such as a 'docker-run' task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\":\n[\n  {\n    ...\n  },\n  {\n    \"label\": \"docker-build\",\n    \"type\": \"docker-build\",\n    \"dockerBuild\": {\n        \"context\": \"${workspaceFolder}\",\n        \"dockerfile\": \"${workspaceFolder}/Dockerfile\",\n        \"tag\": \"YOUR_IMAGE_NAME:YOUR_IMAGE_TAG\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter as an Executable - VS Code Extension API - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to register a debug adapter factory within a VS Code extension so that the debug adapter runs as an external process. It uses the VS Code API vscode.debug.registerDebugAdapterDescriptorFactory, returning a DebugAdapterExecutable for the 'mockDebug.exe' file. Dependencies: 'vscode' module. Inputs: a debug session instance (unused here). Outputs: a DebugAdapterExecutable. Requires that 'mockDebug.exe' is available on the extension host system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\n  createDebugAdapterDescriptor: (_session) => {\n    return new vscode.DebugAdapterExecutable('mockDebug.exe');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Piece Table with Line Break Caching\nDESCRIPTION: Improved piece table implementation that adds line break position caching to enable faster line content lookup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass PieceTable {\n    original: string;\n    added: string;\n    nodes: Node[];\n}\n\nclass Node {\n    type: NodeType;\n    start: number;\n    length: number;\n    lineStarts: number[];\n}\n\nenum NodeType {\n    Original,\n    Added\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Python Interpreter Path in VS Code\nDESCRIPTION: Defines the default Python interpreter path used by the extension when it first loads for a workspace. The default value `\"python\"` relies on the interpreter being found in the system's PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"python\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Neural Network Model Summary with Keras in Python\nDESCRIPTION: Prints a summary of the Sequential neural network model, showing layer information and total parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmodel.summary()\n```\n\n----------------------------------------\n\nTITLE: Configuring launchSettings.json for C# Development in Visual Studio Code\nDESCRIPTION: This snippet provides an example of a launchSettings.json file, which can be used to configure launch profiles for C# development in Visual Studio Code. It includes settings for different environments and IIS Express.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:59481\",\n      \"sslPort\": 44308\n    }\n  },\n  \"profiles\": {\n    \"EnvironmentsSample\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"https://localhost:7152;http://localhost:5105\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"EnvironmentsSample-Staging\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"https://localhost:7152;http://localhost:5105\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Staging\",\n        \"ASPNETCORE_DETAILEDERRORS\": \"1\",\n        \"ASPNETCORE_SHUTDOWNTIMEOUTSECONDS\": \"3\"\n      }\n    },\n    \"EnvironmentsSample-Production\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"https://localhost:7152;http://localhost:5105\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Production\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Task as PreLaunchTask Configuration\nDESCRIPTION: Configuration examples for using a background task as a prelaunchTask in launch.json, including both task and launch configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"npm\",\n    \"script\": \"watch\",\n    \"problemMatcher\": \"$tsc-watch\",\n    \"isBackground\": true,\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Launch Extension\",\n    \"type\": \"extensionHost\",\n    \"request\": \"launch\",\n    \"runtimeExecutable\": \"${execPath}\",\n    \"args\": [\n        \"--extensionDevelopmentPath=${workspaceRoot}\"\n    ],\n    \"stopOnEntry\": false,\n    \"sourceMaps\": true,\n    \"outFiles\": [\n        \"${workspaceRoot}/out/src/**/*.js\"\n    ],\n    \"preLaunchTask\": \"npm: watch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Terminal GPU Acceleration\nDESCRIPTION: Setting to disable GPU acceleration for terminal rendering when experiencing display issues\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"terminal.integrated.gpuAcceleration\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Debugging with launch.json in VS Code\nDESCRIPTION: This JSON snippet defines a debug configuration for C++ in VS Code. It specifies the program to debug, arguments, debugger settings, and a pre-launch task for building the active file using g++.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"C/C++: g++ build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}/${fileBasenameNoExtension}\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"C/C++: g++ build active file\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MyPrompt Component with Priority Management\nDESCRIPTION: Implements a MyPrompt component that organizes base instructions, user queries, and history messages with different priority levels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/prompt-tsx.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tUserMessage,\n\tPromptElement,\n\tBasePromptElementProps,\n} from '@vscode/prompt-tsx';\n\ninterface IMyPromptProps extends BasePromptElementProps {\n\thistory: ChatContext['history'];\n\tuserQuery: string;\n}\n\nexport class MyPrompt extends PromptElement<IMyPromptProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<UserMessage priority={100}>\n\t\t\t\t\tHere are your base instructions. They have the highest priority because you want to make\n\t\t\t\t\tsure they're always included!\n\t\t\t\t</UserMessage>\n\t\t\t\t<HistoryMessages history={this.props.history.slice(0, -2)} priority={0} />\n\t\t\t\t<HistoryMessages history={this.props.history.slice(-2)} priority={80} />\n\t\t\t\t<UserMessage priority={90}>{this.props.userQuery}</UserMessage>\n\t\t\t\t<UserMessage priority={70}>\n\t\t\t\t\tWith a slightly lower priority, you can include some contextual data about the workspace\n\t\t\t\t\tor files here...\n\t\t\t\t</UserMessage>\n\t\t\t</>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Highlighting in VS Code Theme\nDESCRIPTION: Example of a color theme configuration that enables semantic highlighting and defines custom token colors. Shows how to set token colors for both traditional scopes and semantic tokens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"Red Theme\",\n  \"tokenColors\": [\n    {\n      \"scope\": \"comment\",\n      \"settings\": {\n        \"foreground\": \"#dd0000\",\n        \"fontStyle\": \"italic\"\n      }\n    }\n  ],\n  \"semanticHighlighting\": true,\n  \"semanticTokenColors\": {\n    \"variable.readonly:java\": \"#ff0011\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Container Settings in devcontainer.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to specify default VS Code settings within the `devcontainer.json` file using the `customizations.vscode.settings` property. These settings are automatically applied to the container-specific settings file upon creation. This example sets the default `java.home` path within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// Configure tool-specific properties.\n\"customizations\": {\n    // Configure properties specific to VS Code.\n    \"vscode\": {\n        \"settings\": {\n            \"java.home\": \"/docker-java-home\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example code demonstrating function call timing in JavaScript profiles\nDESCRIPTION: This code example illustrates how Self Time and Total Time are calculated in performance profiles. Function 'a' calls 'b', resulting in different Self Time and Total Time measurements that would be displayed in the profile viewer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/profiling.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a() {\n  doSomethingFor5Seconds();\n  b();\n}\n\nfunction b() {\n  doSomethingFor3Seconds();\n}\n\na();\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Debugging in VS Code\nDESCRIPTION: JSON configuration for debugging Flask applications in VS Code using the Python Debugger extension. Sets up Flask app debugging with Jinja template support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Flask\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"flask\",\n    \"env\": {\n        \"FLASK_APP\": \"app.py\"\n    },\n    \"args\": [\n        \"run\",\n        \"--no-debugger\"\n    ],\n    \"jinja\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Function in VS Code\nDESCRIPTION: Demonstrates writing a simple JavaScript function and using IntelliSense features in VS Code. Shows how to convert string concatenation to a template string using Code Actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sayHello(name) {\n    console.log('Hello, ' + name);\n}\n\nsayHello('VS Code');\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema Associations with Exclusion Patterns\nDESCRIPTION: JSON configuration that associates schemas with specific file patterns while excluding others. This example associates a schema with all JSON files in the receipts folder except those ending with .excluded.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \"/receipts/*.json\",\n        \"!/receipts/*.excluded.json\"\n      ],\n      \"url\": \"./receipts.schema.json\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Run Entry Point for Meteor.js - VS Code Tasks - JSON\nDESCRIPTION: This snippet sets the entry command for a Meteor.js app running in a Docker container using VS Code task configuration. It uses the Node inspector (\\\"node --inspect=0.0.0.0:9229 main.js\\\") for debugging access, ensuring compatibility with VS Code's debugger. Prerequisites are a Meteor.js app with main.js as the entry point and required Docker/VS Code tooling. The \\\"dockerRun\\\" command replaces default inference, and debugging is enabled in the \\\"node\\\" property. Intended for insertion into .vscode/tasks.json; this does not run standalone.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"type\": \"docker-run\",\n            \"label\": \"docker-run: debug\",\n            \"dependsOn\": [\n                \"docker-build\"\n            ],\n            \"dockerRun\": {\n                \"command\": \"node --inspect=0.0.0.0:9229 main.js\",\n            },\n            \"node\": {\n                \"enableDebugging\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Dataset for Training and Testing with scikit-learn in Python\nDESCRIPTION: Uses scikit-learn's train_test_split function to divide the Titanic dataset into training and test sets. This allows for model training and subsequent accuracy evaluation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(data[['sex','pclass','age','relatives','fare']], data.survived, test_size=0.2, random_state=0)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Automatic Code Action Application\nDESCRIPTION: Shows how to configure automatic application of Code Actions using the apply argument, with options for controlling when actions are automatically applied.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.function\",\n    \"apply\": \"first\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onLanguageModelTool Activation Event for VS Code Extension\nDESCRIPTION: This snippet demonstrates how to declare the onLanguageModelTool activation event in a VS Code extension's manifest. It's emitted when the specified language model tool is invoked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onChatParticipant:my-language-model-tool\"\n]\n```\n\n----------------------------------------\n\nTITLE: Contributing Custom Theme Colors in VS Code Extension\nDESCRIPTION: JSON configuration for adding new themable colors that can be used in editor decorators and the status bar. Users can customize these colors in workspace settings and themes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"colors\": [\n      {\n        \"id\": \"superstatus.error\",\n        \"description\": \"Color for error message in the status bar.\",\n        \"defaults\": {\n          \"dark\": \"errorForeground\",\n          \"light\": \"errorForeground\",\n          \"highContrast\": \"#010203\",\n          \"highContrastLight\": \"#feedc3\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Resolution Locations in launch.json (JSON)\nDESCRIPTION: Illustrates the `resolveSourceMapLocations` option in a launch configuration. This allows specifying patterns for locations where source maps should be resolved, potentially including dependencies in `node_modules`, overriding the default behavior which only resolves maps specified in `outFiles`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"resolveSourceMapLocations\": [\n    \"out/**/*.js\",\n    \"node_modules/some-dependency/**/*.js\",\n]\n```\n\n----------------------------------------\n\nTITLE: TextMate Grammar Definition for a Simple Language in JSON\nDESCRIPTION: Demonstrates a complete TextMate grammar definition for a simple 'abc' language. The grammar marks letters a, b, c as keywords and handles nested parenthesized expressions with appropriate scoping rules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scopeName\": \"source.abc\",\n  \"patterns\": [{ \"include\": \"#expression\" }],\n  \"repository\": {\n    \"expression\": {\n      \"patterns\": [{ \"include\": \"#letter\" }, { \"include\": \"#paren-expression\" }]\n    },\n    \"letter\": {\n      \"match\": \"a|b|c\",\n      \"name\": \"keyword.letter\"\n    },\n    \"paren-expression\": {\n      \"begin\": \"\\\\(\",\n      \"end\": \"\\\\)\",\n      \"beginCaptures\": {\n        \"0\": { \"name\": \"punctuation.paren.open\" }\n      },\n      \"endCaptures\": {\n        \"0\": { \"name\": \"punctuation.paren.close\" }\n      },\n      \"name\": \"expression.group\",\n      \"patterns\": [{ \"include\": \"#expression\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Emmet Syntax Profiles in VS Code\nDESCRIPTION: Customizes the output profile of HTML abbreviations. This example configures HTML to use single quotes for attributes and enables self-closing tags in JSX.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.syntaxProfiles\": {\n  \"html\": {\n    \"attr_quotes\": \"single\"\n  },\n  \"jsx\": {\n    \"self_closing_tag\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring NuGet Package Reference in .NET Project File\nDESCRIPTION: XML element (`<PackageReference>`) used within .NET SDK-style project files (e.g., .csproj) to declare a dependency on a NuGet package. These references are managed by NuGet and are visible under the project's Dependencies node in the VS Code Solution Explorer when using C# Dev Kit.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/package-management.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Controller in TypeScript\nDESCRIPTION: Creates a NotebookController for executing code cells in a notebook. It sets up the controller with supported languages and an execution handler, and implements a basic execution flow for cells.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(new Controller());\n}\n\nclass Controller {\n    readonly controllerId = 'my-notebook-controller-id'\n    readonly notebookType = 'my-notebook';\n    readonly label = 'My Notebook';\n    readonly supportedLanguages = ['python'];\n\n    private readonly _controller: vscode.NotebookController;\n    private _executionOrder = 0;\n\n    constructor() {\n        this._controller = vscode.notebooks.createNotebookController(this.controllerId, this.notebookType, this.label);\n\n        this._controller.supportedLanguages = this.supportedLanguages;\n        this._controller.supportsExecutionOrder = true;\n        this._controller.executeHandler = this._execute.bind(this);\n    }\n\n    private _execute(cells: vscode.NotebookCell[], _notebook: vscode.NotebookDocument, _controller: vscode.NotebookController): void {\n        for (let cell of cells) {\n            this._doExecution(cell);\n        }\n    }\n\n    private async _doExecution(cell: vscode.NotebookCell): Promise<void> {\n        const execution = this._controller.createNotebookCellExecution(cell);\n        execution.executionOrder = ++this._executionOrder;\n        execution.start(Date.now()); // Keep track of elapsed time to execute cell.\n\n        /* Do some execution here; not implemented */\n\n        execution.replaceOutput([new vscode.NotebookCellOutput([vscode.NotebookCellOutputItem.text('Dummy output text!')])])\n        execution.end(true, Date.now());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Property Type Inlay Hints in TypeScript JSON Settings\nDESCRIPTION: This JSON setting enables or disables the display of inlay hints for class property types in TypeScript files within VS Code, particularly for properties lacking explicit type annotations. Set to `true` to enable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ntypescript.inlayHints.propertyDeclarationTypes.enabled\n```\n\n----------------------------------------\n\nTITLE: Adding Checkboxes to Tree Items in TypeScript\nDESCRIPTION: Illustrates how to use the proposed `checkboxState` property on a `vscode.TreeItem` object in TypeScript. Assigning an object with `state` (e.g., `vscode.TreeItemCheckboxState.Unchecked`) and an optional `tooltip` to this property adds a checkbox to the corresponding item in a TreeView. This is part of a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nthis.checkboxState = { state: vscode.TreeItemCheckboxState.Unchecked, tooltip: 'mark file as viewed' };\n```\n\n----------------------------------------\n\nTITLE: Manual Inference Configuration Example\nDESCRIPTION: JSON configuration for manual setup of Azure resources for inference. Includes subscription details, resource names, and endpoint configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/finetune.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SUBSCRIPTION_ID\": \"<your-subscription-id>\",\n  \"RESOURCE_GROUP_NAME\": \"<your-resource-group-name>\",\n  \"STORAGE_ACCOUNT_NAME\": \"<your-storage-account-name>\",\n  \"FILE_SHARE_NAME\": \"<your-file-share-name>\",\n  \"ACA_APP_NAME\": \"<your-aca-name>\",\n  \"ACA_APP_ENDPOINT\": \"<your-aca-endpoint>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing VS Code Actions for GitHub Copilot\nDESCRIPTION: These identifiers represent specific Visual Studio Code actions related to GitHub Copilot, often bound to keyboard shortcuts. They allow users to trigger functionalities like opening the main Chat view (`workbench.action.chat.open`), toggling Quick Chat (`workbench.action.quickchat.toggle`), starting Inline Chat in the editor (`inlinechat.start`), toggling chat modes (`workbench.action.chat.toggleAgentMode`), or using AI for renaming (`editor.action.rename`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.chat.open)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.quickchat.toggle)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(inlinechat.start)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.chat.toggleAgentMode)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.rename)\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in TypeScript Formatter in JSON Settings\nDESCRIPTION: This JSON setting allows disabling the default TypeScript formatter provided by VS Code. Setting `typescript.format.enable` to `false` turns off the built-in formatter, which is useful if you prefer using a formatter extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.format.enable\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Scoped Environment Variables in TypeScript\nDESCRIPTION: Creates a workspace-folder scoped environment variable collection that applies in addition to the global collection. Used for setting up different virtual environments in multi-root workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a scoped collection for the first workspace folder\nconst scoped = context.environmentVariableCollection.getScoped({\n  workspaceFolder: workspace.workspaceFolders[0]\n})\nscoped.replace('SCOPED', '1');\n// Only terminals created in the first workspace folder will have SCOPED=1 set\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Profile Settings in JSON\nDESCRIPTION: VS Code settings JSON for the Node.js profile template. It enables formatting on paste, Git autofetch, Markdown word wrap, and sets Prettier as the default formatter for JSON, HTML, JavaScript, and TypeScript files, while using built-in features for JSONC.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.formatOnPaste\": true,\n    \"git.autofetch\": true,\n    \"[markdown]\":  {\n        \"editor.wordWrap\": \"on\"\n    },\n    \"[json]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[jsonc]\": {\n        \"editor.defaultFormatter\": \"vscode.json-language-features\"\n    },\n    \"[html]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[javascript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[typescript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring ALLOWED_HOSTS for Django Deployment in Python\nDESCRIPTION: Sets the Django ALLOWED_HOSTS parameter in settings.py to include the deployment service hostname. Ensures that the application accepts HTTP requests from the specified domain, which is required for deployments to services like Azure App Service. This configuration must be customized for your host, or wildcarded if testing across multiple hosts; forgetting this will lead to DisallowedHost errors upon deployment. No external dependencies required beyond Django itself. Input: a list of domain names. Output: the application only responds to valid hosts as per Django's security policies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/tutorial-django-push-to-registry.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = [\n    # Example host name only; customize to your specific host\n    \"vsdocs-django-sample-container.azurewebsites.net\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options with tsconfig.json - JSON\nDESCRIPTION: This snippet configures the TypeScript compiler with ES5 target, CommonJS modules, output directory, and enables source maps for mapping TypeScript to generated JavaScript for debugging. It is a standard tsconfig.json used to facilitate debugging in Visual Studio Code. Required dependencies are TypeScript and a Node.js development environment, with key parameters such as 'target', 'module', 'outDir', and 'sourceMap'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"compilerOptions\": {\\n        \"target\": \"ES5\",\\n        \"module\": \"CommonJS\",\\n        \"outDir\": \"out\",\\n        \"sourceMap\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Visual C++ Debugger - Visual Studio Code - JSON\nDESCRIPTION: This snippet illustrates the logging configuration for the Visual C++ debugger in the launch.json file of Visual Studio Code. The \"engineLogging\" property controls whether detailed communication between VS Code and the Visual C++ debugger is logged. By default, logging is disabled (false); setting it to true enables verbose protocol tracing. Place this JSON object in your launch.json to control logging exposure in your development workflow. Only external VS Code-to-debugger communication is logged, not internal process events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/enable-logging-cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"logging\\\": {\\n        \\\"engineLogging\\\": false\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Django App - Bash\nDESCRIPTION: Invokes 'python manage.py startapp hello' to generate a new Django application named 'hello' within the existing project directory. The command requires that the Django project has been initiated and the virtual environment is active. It creates the app folder with default files for models, views, admin, tests, migrations, and configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py startapp hello\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Output in VS Code Notebooks\nDESCRIPTION: Shows how to create rich output with multiple mime types including HTML, JSON, and custom formats\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexecution.replaceOutput([new vscode.NotebookCellOutput([\n                            vscode.NotebookCellOutputItem.text('<b>Hello</b> World', 'text/html'),\n                            vscode.NotebookCellOutputItem.json({ hello: 'world' }),\n                            vscode.NotebookCellOutputItem.json({ 'custom-data-for-custom-renderer': 'data' }, 'application/custom'),\n                        ])]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Terminal Profile Provider (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to register a `TerminalProfileProvider` for a contributed terminal profile ID (`my-ext.terminal-profile`). The `provideTerminalProfile` function is implemented to return the `TerminalOptions` (or `ExtensionTerminalOptions`) needed to create the custom terminal instance when the user selects the profile.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.registerTerminalProfileProvider('my-ext.terminal-profile', {\n  provideTerminalProfile(token: vscode.CancellationToken): vscode.ProviderResult<vscode.TerminalOptions | vscode.ExtensionTerminalOptions> {\n    return { name: 'Profile from extension', shellPath: 'bash' };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter as an Inline Implementation - VS Code Extension API - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates registering a debug adapter implementation that runs within the extension host, avoiding inter-process communication. It returns a DebugAdapterInlineImplementation wrapping a custom InlineDebugAdapter instance. Dependencies: 'vscode' module. Inputs: debug session (unused). Outputs: an instance of the inline debug adapter. The custom class must implement the minimal vscode.DebugAdapter interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\n  createDebugAdapterDescriptor: (_session) => {\n    return new vscode.DebugAdapterInlineImplementation(new InlineDebugAdapter());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete MyPrompt with File Context and History\nDESCRIPTION: Combines all components into a complete MyPrompt implementation with file context management and flexible token budgeting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/prompt-tsx.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tUserMessage,\n\tPromptElement,\n\tBasePromptElementProps,\n} from '@vscode/prompt-tsx';\nimport { History } from './history';\n\ninterface IFilesToInclude {\n\tdocument: TextDocument;\n\tline: number;\n}\n\ninterface IMyPromptProps extends BasePromptElementProps {\n\thistory: ChatContext['history'];\n\tuserQuery: string;\n\tfiles: IFilesToInclude[];\n}\n\nexport class MyPrompt extends PromptElement<IMyPromptProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<UserMessage priority={100}>Here are your base instructions.</UserMessage>\n\t\t\t\t<History\n\t\t\t\t\thistory={this.props.history}\n\t\t\t\t\tpassPriority\n\t\t\t\t\tolder={0}\n\t\t\t\t\tnewer={80}\n\t\t\t\t\tflexGrow={2}\n\t\t\t\t\tflexReserve=\"/5\"\n\t\t\t\t/>\n\t\t\t\t<UserMessage priority={90}>{this.props.userQuery}</UserMessage>\n\t\t\t\t<FileContext priority={70} flexGrow={1} files={this.props.files} />\n\t\t\t</>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Port Forwarding in SSH Config\nDESCRIPTION: Example SSH configuration using the `LocalForward` directive to persistently forward local ports to remote ports whenever connecting to the specified host ('remote-linux-machine'). This configuration automatically sets up SSH tunnels for ports 3000 and 27017, mapping them from 127.0.0.1 on the local machine to 127.0.0.1 on the remote machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_4\n\nLANGUAGE: ssh-config\nCODE:\n```\nHost remote-linux-machine\n    User myuser\n    HostName remote-linux-machine.mydomain\n    LocalForward 127.0.0.1:3000 127.0.0.1:3000\n    LocalForward 127.0.0.1:27017 127.0.0.1:27017\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Comment Filter Format in VS Code\nDESCRIPTION: Customizes the format of comments generated by Emmet's comment filter. This example demonstrates the simplified format used in Emmet 2.0.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.preferences\": {\n  \"filter.commentAfter\": \"\\n<!-- /[#ID][.CLASS] -->\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Profile in launchSettings.json (JSON)\nDESCRIPTION: This snippet is an example of a launchSettings.json file that specifies a profile under the 'profiles' property. Each profile defines command-line behavior, including the project type ('commandName'), environment variables, and other startup parameters. This configuration is consumed by both VS Code and Visual Studio for consistent debugging. Ensure the profile name and property structure match expected conventions for .NET Core projects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profiles\": {\n    \"ProfileNameGoesHere\": {\n      \"commandName\": \"Project\",\n      \"environmentVariables\": {\n        \"myVariableName\":\"theValueGoesHere\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Root Workspace Configuration File (JSON)\nDESCRIPTION: This JSON structure exemplifies the content of a `<name>.code-workspace` file used for defining multi-root workspaces in VS Code. The `folders` array lists objects, each specifying a `path` (relative or absolute) to a folder that should be included in the workspace. Opening this file in VS Code loads all specified folders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/workspaces.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"folders\": [\n        {\n            \"path\": \"my-folder-a\"\n        },\n        {\n            \"path\": \"my-folder-b\"\n        }\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Code Action: Generate Symbol with Pylance and Copilot in JSON Settings\nDESCRIPTION: This JSON snippet demonstrates how to enable the experimental 'generateSymbol' AI code action for Python in VS Code by adding a configuration to your settings file. The 'python.analysis.aiCodeActions' object contains a 'generateSymbol' property, set to true, which activates the feature. This allows integration between Pylance and Copilot for assisted code generation. The input is a boolean value (true) to toggle the feature, and the output is behavioral: AI-powered symbol generation becomes available. Requires the VS Code Pylance extension and Copilot setup; limitations include the experimental status and dependency on the extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.analysis.aiCodeActions\": {\"generateSymbol\": true}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Language Default Icons in VS Code Extension Manifest\nDESCRIPTION: This snippet demonstrates how to configure language-specific icons in a VS Code extension's package.json file. It shows the structure for specifying separate icons for light and dark themes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/file-icon-theme.md#2025-04-23_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"contributes\": {\n    \"languages\": [\n      {\n        \"id\": \"latex\",\n        // ...\n        \"icon\": {\n          \"light\": \"./icons/latex-light.png\",\n          \"dark\": \"./icons/latex-dark.png\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Folders in VS Code `*.code-workspace` File (JSON)\nDESCRIPTION: This JSON structure defines the folders included in a VS Code multi-root workspace using the new `*.code-workspace` file format. The `folders` array contains objects, each specifying a `path` (relative or absolute) to a workspace folder. This format replaces the previous version, removes the top-level `id`, and uses the file's location to derive a workspace identifier for storing UI state, dirty files, and extension data. Relative paths are resolved against the workspace file's location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"folders\": [\n    {\n      \"path\": \"monaco\"\n    },\n    {\n      \"path\": \"Projects/vscode-distro\"\n    },\n    {\n      \"path\": \"vscode-docs\"\n    },\n    {\n      \"path\": \"/Users/username/Development/Microsoft/vscode-extension-sdk\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js and Waiting for Debugger (Bash)\nDESCRIPTION: Command to launch a Node.js program (`program.js`) with the inspector agent enabled, listening on the default port (9229), and breaking execution before user code begins. The program waits until a debugger attaches.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect-brk program.js\n```\n\n----------------------------------------\n\nTITLE: Extension Kind Configuration in package.json\nDESCRIPTION: Examples of extensionKind configurations in VS Code extension manifest to specify preferred running locations for extensions. This determines whether extensions run on workspace, UI, or both locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/extension-host.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensionKind\": [\"workspace\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"extensionKind\": [\"ui\", \"workspace\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"extensionKind\": [\"workspace\", \"ui\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"extensionKind\": [\"ui\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Variable File Path in VS Code Python\nDESCRIPTION: Sets the absolute path to a file containing environment variable definitions. The default `${workspaceFolder}/.env` points to a `.env` file in the root of the workspace folder. See documentation for details on the file format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"${workspaceFolder}/.env\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental WebGL Renderer for VS Code's Integrated Terminal\nDESCRIPTION: Configures VS Code to use the experimental WebGL-based renderer for the integrated terminal, which provides performance gains of up to 900% compared to the canvas-based approach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"terminal.integrated.rendererType\": \"experimentalWebgl\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Setting for Nearby Quick Fixes\nDESCRIPTION: Represents the VS Code setting `editor.codeActionWidget.includeNearbyQuickFixes`. When enabled (which is the default), this setting allows the Quick Fix command (`editor.action.quickFix`) to activate the nearest available Quick Fix on a line, regardless of the precise cursor location within that line.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(editor.codeActionWidget.includeNearbyQuickFixes)\n```\n\n----------------------------------------\n\nTITLE: Implementing Workspace Symbol Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a WorkspaceSymbolProvider class and register it in the extension's activate function. This provider allows returning all symbols defined within the open folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoWorkspaceSymbolProvider implements vscode.WorkspaceSymbolProvider {\n    public provideWorkspaceSymbols(\n        query: string, token: vscode.CancellationToken):\n        Thenable<vscode.SymbolInformation[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerWorkspaceSymbolProvider(\n            new GoWorkspaceSymbolProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring No Support for Virtual Workspaces in package.json\nDESCRIPTION: Example of how to declare that an extension does not support virtual workspaces in the package.json file. This configuration will disable the extension in virtual workspace setups.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"virtualWorkspaces\": {\n      \"supported\": false,\n      \"description\": \"Debugging is not possible in virtual workspaces.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paste Preferences in VS Code Settings (JSON)\nDESCRIPTION: This snippet shows how to configure VS Code to always try pasting with imports if an edit is available using the editor.pasteAs.preferences setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"editor.pasteAs.preferences\": [\n    \"text.updateImports\"\n]\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Terminal Clear Shortcut on macOS in keybindings.json\nDESCRIPTION: Provides a JSON configuration snippet for the user's `keybindings.json` file to explicitly re-define the `Cmd+K` shortcut to trigger the `workbench.action.terminal.clear` command. This ensures the clear command works even if an extension contributes a conflicting `Cmd+K` shortcut, as user keybindings have higher priority. The `when` clause restricts the shortcut to activate only when the terminal has focus.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"cmd+k\",\n    \"command\": \"workbench.action.terminal.clear\",\n    \"when\": \"terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Inline Debug Adapter - VS Code Extension API - TypeScript\nDESCRIPTION: This TypeScript class snippet defines an InlineDebugAdapter that implements the minimal vscode.DebugAdapter interface required by the VS Code extension API. It features an EventEmitter for outgoing messages, a sequence counter, an onDidSendMessage event, and a handleMessage method for processing DAP messages (handling 'initialize' specifically). Dependencies: 'vscode', 'DebugProtocol' typings. Key parameters: incoming ProtocolMessage. Outputs: fires ProtocolMessages via onDidSendMessage. Limitations: Only 'initialize' requests handled; other commands/events/responses require further implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass InlineDebugAdapter implements vscode.DebugAdapter {\n\n  private sendMessage = new vscode.EventEmitter<DebugProtocol.ProtocolMessage>();\n  private sequence: 1;\n\n  readonly onDidSendMessage: vscode.Event<DebugProtocol.ProtocolMessage> = this.sendMessage.event;\n\n  handleMessage(message: DebugProtocol.ProtocolMessage): void {\n    switch (message.type) {\n      case 'request':\n        const request = <DebugProtocol.Request> message;\n        switch (request.command) {\n          case 'initialize':\n            const response: DebugProtocol.Response = {\n              type: 'response',\n              seq: this.sequence++,\n              success: true,\n              request_seq: request.seq,\n              command: request.command,\n            };\n            this.sendMessage.fire(response);\n            break;\n          // many more requests needs to be handled here...\n          default:\n            break;\n        }\n        break;\n      case 'response':\n        break;\n      case 'event':\n        break;\n    }\n  }\n\n  dispose() {\n    // clean up resources\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Symbol Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling document symbol navigation functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"documentSymbolProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cygwin Terminal Profile on Windows (JSON)\nDESCRIPTION: This JSON snippet demonstrates configuring Cygwin's bash shell as a terminal profile in VS Code on Windows. It specifies the path to 'bash.exe' within the Cygwin installation directory and includes the '--login' argument. This profile is also set as the default for Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"Cygwin\": {\n      \"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\",\n      \"args\": [\"--login\"]\n    }\n  },\n  \"terminal.integrated.defaultProfile.windows\": \"Cygwin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Extension Data in VS Code\nDESCRIPTION: Demonstrates how to persist workspace and global data using VS Code's storage APIs. Shows creation of storage directories and writing JSON data to files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(\n        vscode.commands.registerCommand('myAmazingExtension.persistWorkspaceData', async () => {\n            if (!context.storageUri) {\n                return;\n            }\n\n            // Create the extension's workspace storage folder if it doesn't already exist\n            try {\n                // When folder doesn't exist, and error gets thrown\n                await vscode.workspace.fs.stat(context.storageUri);\n            } catch {\n                // Create the extension's workspace storage folder\n                await vscode.workspace.fs.createDirectory(context.storageUri)\n            }\n\n            const workspaceData = vscode.Uri.joinPath(context.storageUri, 'workspace-data.json');\n            const writeData = new TextEncoder().encode(JSON.stringify({ now: Date.now() }));\n            vscode.workspace.fs.writeFile(workspaceData, writeData);\n        }\n    ));\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('myAmazingExtension.persistGlobalData', async () => {\n\n        if (!context.globalStorageUri) {\n            return;\n        }\n\n        // Create the extension's global (cross-workspace) folder if it doesn't already exist\n        try {\n            // When folder doesn't exist, and error gets thrown\n            await vscode.workspace.fs.stat(context.globalStorageUri);\n        } catch {\n            await vscode.workspace.fs.createDirectory(context.globalStorageUri)\n        }\n\n        const workspaceData = vscode.Uri.joinPath(context.globalStorageUri, 'global-data.json');\n        const writeData = new TextEncoder().encode(JSON.stringify({ now: Date.now() }));\n        vscode.workspace.fs.writeFile(workspaceData, writeData);\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands Sequentially Without Arguments (VS Code keybindings.json, JSON)\nDESCRIPTION: Shows how to configure a single keyboard shortcut ('ctrl+alt+c') to execute several commands in a defined sequence using the 'runCommands' command with a simple list of commands as arguments. No external dependencies besides VS Code support. The 'commands' array specifies which commands to run in order, useful for automating repetitive editing tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+alt+c\",\n  \"command\": \"runCommands\",\n  \"args\": {\n    \"commands\": [\n      \"editor.action.copyLinesDownAction\",\n      \"cursorUp\",\n      \"editor.action.addCommentLine\",\n      \"cursorDown\"\n    ]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Converting Models to ONNX Format using ONNX Runtime\nDESCRIPTION: Converts a machine learning model to ONNX format using the ONNX Runtime GenAI model builder, specifying model path, precision, execution provider, output path, and cache path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\npython -m onnxruntime_genai.models.builder -m $modelPath -p $precision -e $executionProvider -o $outputModelPath -c $cachePath --extra_options include_prompt_templates=1\n```\n\n----------------------------------------\n\nTITLE: Suppressing apt-key Terminal Warning in Dockerfile\nDESCRIPTION: Adds a GPG key using `apt-key` while conditionally suppressing the 'stdout is not a terminal' warning. This shell command construct captures both stdout and stderr (`OUT=$(... 2>&1)`) and only prints the captured output (`echo $OUT`) if the `apt-key add` command fails (returns a non-zero exit code). Requires `curl` and `apt-key` to be available in the build environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\n# (OUT=$(apt-key add - 2>&1) || echo $OUT) will only print the output with non-zero exit code is hit\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT)\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter Tracker Factory for Node Debugger (TypeScript)\nDESCRIPTION: Shows how to register a DebugAdapterTrackerFactory for the Node.js debug type using the finalized VS Code API. The snippet logs all Debug Adapter Protocol messages sent to and received from the debug adapter, which assists in debugging and protocol exploration. The method registerDebugAdapterTrackerFactory takes the debug type ('node'), and returns a factory that can create tracker objects implementing logging handlers. Inputs include the debug session; outputs are log statements. This is essential for extension authors wanting insight into communication between VS Code and debug adapters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.debug.registerDebugAdapterTrackerFactory('node', {\n    createDebugAdapterTracker(session: DebugSession) {\n        return {\n            onWillReceiveMessage: m => console.log(`> ${JSON.stringify(m, undefined, 2)}`),\n            onDidSendMessage: m => console.log(`< ${JSON.stringify(m, undefined, 2)}`),\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Collapse All Action to Custom Views in VS Code (TypeScript)\nDESCRIPTION: Defines the `TreeViewOptions` interface with the `showCollapseAll` boolean property. Setting this to `true` when calling `window.createTreeView` enables the standard 'Collapse All' action button in the custom view header. This leverages built-in VS Code functionality for a consistent user experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Options for creating a [TreeView](#TreeView]\n */\nexport interface TreeViewOptions<T> {\n\n    /**\n     * A data provider that provides tree data.\n     */\n    treeDataProvider: TreeDataProvider<T>;\n\n    /**\n     * Whether to show collapse all action or not.\n     */\n    showCollapseAll?: boolean;\n}\n\nnamespace window {\n\n    export function createTreeView<T>(viewId: string, options: TreeViewOptions<T>): TreeView<T>;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Debug Launch Settings in VS Code (launch.json)\nDESCRIPTION: This JSON snippet shows a sample `launch.json` configuration for VS Code created by selecting 'C/C++: clang++ build and debug active file'. It sets up a C++ debugging session using `cppdbg` (configured for lldb on macOS via `MIMode`) specifically for building and debugging the active file with clang++. Key settings include `program` (pointing to the compiled executable derived from the active file), `args` (runtime arguments, initially empty), `stopAtEntry` (set to `false` by default), `cwd` (working directory set to the file's directory), and `preLaunchTask` (linking to the corresponding build task defined in `tasks.json`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"C/C++: clang++ build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}/${fileBasenameNoExtension}\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"lldb\",\n            \"preLaunchTask\": \"C/C++: clang++ build active file\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Configuration for Unity Debugging in VS Code\nDESCRIPTION: JSON configuration for setting up a custom Unity debugger attachment. This snippet shows how to modify the launch.json file to create a new debugging configuration that allows connecting to a Unity standalone player at a specific IP endpoint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/other/unity.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"name\": \"Attach to Xbox\",\n        \"type\": \"vstuc\",\n        \"request\": \"attach\",\n        \"endPoint\": \"127.0.0.1:56321\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal SendSequence Command in VS Code\nDESCRIPTION: JSON configuration for creating a custom keyboard shortcut that sends specific Unicode sequences to the active terminal. This example shows how to bind Ctrl+U to send escape sequences.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+u\",\n  \"command\": \"workbench.action.terminal.sendSequence\",\n  \"args\": { \"text\": \"\\u001b[1;5D\\u007f\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for Local Testing (Bash)\nDESCRIPTION: Commands to create SSL certificates for local testing of web extensions using mkcert. This allows secure hosting of the extension for testing in vscode.dev.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p $HOME/certs\n$ cd $HOME/certs\n$ mkcert -install\n$ mkcert localhost\n```\n\n----------------------------------------\n\nTITLE: Extending Docker Compose Services for Development (YAML)\nDESCRIPTION: Shows an example of an override Docker Compose file (`docker-compose.devcontainer.yml`) used to add development-specific configurations to the base services. This example adds extra volume mounts for both the `python-api` and `node-app` services, intended to be merged with the base `docker-compose.yml` configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  python-api:\n    volumes:\n      - ~:~/local-home-folder # Additional bind mount\n    # ...\n\n  node-app:\n    volumes:\n      - ~/some-folder:~/some-folder # Additional bind mount\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Terminal Replies in VS Code (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure automatic replies in the VS Code integrated terminal. It shows examples for automatically responding to batch job termination prompts and Oh My Zsh update checks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.autoReplies\": {\n  \"Terminate batch job (Y/N)?\": \"Y\\r\",\n  \"[Oh My Zsh] Would you like to check for updates? [Y/n]\": \"Y\\r\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Editor Keyboard Shortcut in VS Code\nDESCRIPTION: This JSON snippet demonstrates how to set up a custom keyboard shortcut for opening a new Search Editor in VS Code. It configures the shortcut to run the search automatically but keep focus on the search query input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+o\",\n    \"command\": \"search.action.openNewEditor\",\n    \"args\": { \"query\": \"VS Code\", \"triggerSearch\":true, \"focusResults\": false }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Django Development Server - Bash\nDESCRIPTION: Starts the Django built-in development server with 'python manage.py runserver'. By default, the server listens on port 8000, but a different port can be specified. The virtual environment must be activated, and Django should be installed for the command to work. The output displays status messages about the server startup and accessible URLs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nJune 13, 2023 - 18:38:07\nDjango version 4.2.2, using settings 'web_project.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CTRL-BREAK.\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with Environment Variable in Node.js\nDESCRIPTION: This snippet shows how to use an environment variable for MongoDB connection in a Node.js application, demonstrating VS Code's auto-completion feature for the Node.js 'process' object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect(process.env.MONGO_URL || database.localUrl);\n```\n\n----------------------------------------\n\nTITLE: Accessing All Output MIME Types in VS Code Notebook Renderers (TypeScript)\nDESCRIPTION: Example TypeScript function demonstrating how a custom VS Code notebook renderer can use the proposed `OutputItem._allOutputItems` property to access all available MIME types for an output item. This allows fallback rendering, such as attempting to render 'text/html' using `getItem()` if the primary type cannot be handled, potentially delegating to another renderer fetched via `ctx.getRenderer`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function renderOutputItem(outputInfo, element, signal){\n    const didRender = tryRenderMainItem(outputInfo, element);\n\n    if (!didRender) {\n        // Fallback to render `text/html`\n        const htmlItem = await outputInfo._allOutputItems.find(item => item.mime === 'text/html')?.getItem();\n        if (htmlItem) {\n            // Here we can either render the 'text/html' item ourselves\n            // or delegate to another renderer.\n            const renderer = await ctx.getRenderer('vscode.builtin-renderer');\n            if (renderer) {\n                return renderer.renderOutputItem(htmlItem, element, signal);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webview Panel with retainContextWhenHidden in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a VS Code webview panel using `vscode.window.createWebviewPanel`. It enables the `retainContextWhenHidden: true` option in the `WebviewOptions`, which keeps the webview's content and state (including running scripts) alive in memory even when the panel is hidden. The associated `getWebviewContent` function provides simple HTML with an image and a script that increments a counter, demonstrating state persistence without `getState`/`setState` due to this option, though it has higher memory overhead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {\n          enableScripts: true,\n          retainContextWhenHidden: true\n        }\n      );\n      panel.webview.html = getWebviewContent();\n    })\n  );\n}\n\nfunction getWebviewContent() {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\" width=\"300\" />\n    <h1 id=\"lines-of-code-counter\">0</h1>\n\n    <script>\n        const counter = document.getElementById('lines-of-code-counter');\n\n        let count = 0;\n        setInterval(() => {\n            counter.textContent = count++;\n        }, 100);\n    </script>\n</body>\n</html>`;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Suggestion Syntax Highlighting in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable or disable syntax highlighting for inline suggestions in Visual Studio Code. By default, this feature is now enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"editor.inlineSuggest.syntaxHighlightingEnabled\": true\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Commands to navigate to the React project directory and start the development server. This launches the application in the browser and enables auto-reloading when files are changed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Selection in QuickPick - TypeScript\nDESCRIPTION: Demonstrates how to use the proposed value selection API in QuickPick to programmatically select part of the input text. The example shows setting up a QuickPick with predefined value, selection range, and items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst qp = vscode.window.createQuickPick();\nqp.value = '12345678';\nqp.valueSelection = [4, 6];\nqp.items = [\n\t{ label: '12345678', description: 'desc 1' },\n\t{ label: '12345678', description: 'desc 2' },\n\t{ label: '12345678', description: 'desc 3' },\n];\nqp.show();\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Dev Container using devcontainer.json (JSON)\nDESCRIPTION: Defines the configuration within `./devcontainer/node-container/devcontainer.json` for the Node.js development container. Similar to the Python configuration, it references the common `docker-compose.yml`, specifies the target service (`node-app`), sets the `workspaceFolder` inside the container to the Node.js source directory (`/workspace/node-src`), and includes the optional `shutdownAction: none` to keep the container running after closing VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Node Container\",\n    \"dockerComposeFile\": [\"../../docker-compose.yml\"],\n    \"service\": \"node-app\",\n    \"shutdownAction\": \"none\",\n    \"workspaceFolder\": \"/workspace/node-src\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing apt-utils Non-Interactively in Dockerfile\nDESCRIPTION: Updates package lists and installs `apt-utils` and `dialog` without user interaction to reduce `debconf` warnings during Docker image builds. It sets `DEBIAN_FRONTEND=noninteractive`, uses `--no-install-recommends` to minimize image size, and redirects stderr to stdout (`2>&1`) to potentially hide harmless warnings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get update \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get -y install --no-install-recommends apt-utils dialog 2>&1\n```\n\n----------------------------------------\n\nTITLE: Global launch.json Configuration\nDESCRIPTION: This snippet demonstrates how to set up a global launch configuration in the user settings. It defines a Node.js launch configuration that will be available across all workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"launch\": {\n    \"version\": \"0.2.0\",\n    \"configurations\": [{\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"name\": \"Launch Program\",\n        \"program\": \"${file}\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onEditSession Activation Event in VS Code Extension\nDESCRIPTION: This code example shows how to declare the onEditSession activation event in a VS Code extension's manifest. It's emitted when an edit session is accessed with the specified scheme (in this case, 'file').\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onEditSession:file\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Docker in WSL for VS Code Dev Containers\nDESCRIPTION: This command allows users to install Docker packages in Windows Subsystem for Linux (WSL) directly from VS Code, simplifying the setup process for Dev Containers on Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_82.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDev Containers: Install Docker in WSL\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts Configuration for esbuild\nDESCRIPTION: Package.json scripts configuration for building and watching VS Code extensions with esbuild and TypeScript type checking.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"compile\": \"npm run check-types && node esbuild.js\",\n    \"check-types\": \"tsc --noEmit\",\n    \"watch\": \"npm-run-all -p watch:*\",\n    \"watch:esbuild\": \"node esbuild.js --watch\",\n    \"watch:tsc\": \"tsc --noEmit --watch --project tsconfig.json\",\n    \"vscode:prepublish\": \"npm run package\",\n    \"package\": \"npm run check-types && node esbuild.js --production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Field in Java\nDESCRIPTION: Shows how to extract a variable to a field of the class using the 'Extract to field' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nclass Square {\n  public void calculateArea() {\n    int height = 1;\n    int width = 2;\n    int area = height * width;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nclass Square {\n  private int area;\n\n  public void calculateArea() {\n    int height = 1;\n    int width = 2;\n    area = height * width;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unittest Arguments (settings.json)\nDESCRIPTION: Specifies command-line arguments passed to unittest during test discovery and execution. By default, unittest looks for files matching `*test*.py` in the top-level folder. Use the `-p` argument to customize the file pattern and `-t` to specify the top-level directory for discovery.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Example: Discover tests matching 'check_*.py' in the './tests' directory\n\"python.testing.unittestArgs\": [\n    \"-v\",\n    \"-s\",\n    \"./tests\", // Corresponds to -t\n    \"-p\",\n    \"check_*.py\" // Corresponds to -p\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing Volume Permissions in devcontainer.json Post-Creation - JSON\nDESCRIPTION: This devcontainer.json configuration defines a postCreateCommand object to fix permissions of the /commandhistory volume after the container is created, ensuring the container user owns the persistent bash history directory. It employs 'sudo chown' with $(whoami) to match UID/GID between host and container. This addresses permission issues when UIDs differ across environments, especially on Linux hosts or under WSL.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/persist-bash-history.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"postCreateCommand\": {\n    \"Fix Volume Permissions\": \"sudo chown -R $(whoami): /commandhistory\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Built-in Extension in VS Code Server\nDESCRIPTION: This command line argument allows for the installation of an extension as a built-in extension on the VS Code server. Built-in extensions are shown in a specific view, cannot be uninstalled, and can only be enabled or disabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_51.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--install-builtin-extension\n```\n\n----------------------------------------\n\nTITLE: Setting npm Path in VS Code settings.json\nDESCRIPTION: Configuration snippet showing how to explicitly set the path to the npm executable in VS Code settings to resolve Automatic Type Acquisition warnings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.npm\": \"C:\\\\Program Files\\\\nodejs\\\\npm.cmd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Installation via Command Line in Bash\nDESCRIPTION: Checks if the GCC compiler is installed on the Linux system and displays its version. This command is executed in the terminal as a prerequisite check.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcc -v\n```\n\n----------------------------------------\n\nTITLE: Using when clauses with keyboard shortcuts in JSON\nDESCRIPTION: Example showing how the F5 key is conditionally bound to the debug start command only when debuggers are available and the editor is not in debug mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/when-clause-contexts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"f5\",  \"command\": \"workbench.action.debug.start\",\n                   \"when\": \"debuggersAvailable && !inDebugMode\" }\n```\n\n----------------------------------------\n\nTITLE: Debug Launch Configuration with Pre/Post Tasks\nDESCRIPTION: Example launch.json configuration demonstrating the use of preLaunchTask and postDebugTask for Node.js debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Attach to node server\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"port\": 8008,\n    \"preLaunchTask\": \"Start Server\",\n    \"postDebugTask\": \"Stop Server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting trusted commands for MarkdownString in VS Code Extensions\nDESCRIPTION: Example of using the new isTrusted property with an allowlist of commands for MarkdownString. This improves security by limiting which commands can be executed from markdown links rather than enabling all commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst md = new vscode.MarkdownString(`A command link: [Open setting](command:workbench.action.openSettings)`);\n\n// Set trusted commands instead of enabling all commands\nmd.isTrusted = { enabledCommands: ['workbench.action.openSettings'] };\n```\n\n----------------------------------------\n\nTITLE: Configuring an Automation Profile for Tasks/Debug on macOS (JSONC)\nDESCRIPTION: This JSONC snippet configures a separate terminal profile specifically for tasks and debugging on macOS using the 'terminal.integrated.automationProfile.osx' setting. While the default profile is set to 'fish', the automation profile uses '/bin/sh' to ensure a POSIX-compatible shell and avoid complex startup scripts during automated tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"terminal.integrated.defaultProfile.osx\": \"fish\",\n  // Use a fully POSIX-compatible shell and avoid running a complex ~/.config/fish/config.fish\n  // for tasks and debug\n  \"terminal.integrated.automationProfile.osx\": {\n    \"path\": \"/bin/sh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Filters in VS Code Keybindings\nDESCRIPTION: Example showing how to configure a keyboard shortcut to run a specific task with filtering by name and type. This allows for more direct access to tasks without going through the task selection interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+h\",\n  \"command\": \"workbench.action.tasks.runTask\",\n  \"args\": {\n    \"task\": \"VS Code - Build\",\n    \"type\": \"npm\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Webview Context Menus in package.json (JSON)\nDESCRIPTION: This JSON snippet shows how to define custom context menu items for a webview within the `contributes` section of `package.json`. It uses the `menus -> webview/context` contribution point, specifying commands and `when` clauses to control visibility based on the webview type and specific sections within it (e.g., `webview == 'catCoding'` and `webviewSection == 'editor'`). Corresponding commands must also be defined.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"menus\": {\n    \"webview/context\": [\n      {\n        \"command\": \"catCoding.yarn\",\n        \"when\": \"webview == 'catCoding'\"\n      },\n      {\n        \"command\": \"catCoding.insertLion\",\n        \"when\": \"webview == 'catCoding' && webviewSection == 'editor'\"\n      }\n    ]\n  },\n  \"commands\": [\n    {\n      \"command\": \"catCoding.yarn\",\n      \"title\": \"Yarn \\ud83e\\uddf6\",\n      \"category\": \"Cat Coding\"\n    },\n    {\n      \"command\": \"catCoding.insertLion\",\n      \"title\": \"Insert \\ud83e\\udd81\",\n      \"category\": \"Cat Coding\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Parameters Interface for Language Model Tool in TypeScript\nDESCRIPTION: This snippet defines an interface for the input parameters of a tab count tool. It includes an optional tabGroup parameter of type number.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ITabCountParameters {\n    tabGroup?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ${default} Variable in c_cpp_properties.json (JSON)\nDESCRIPTION: Illustrates the usage of the `${default}` variable within a `c_cpp_properties.json` configuration block. This variable instructs the C/C++ extension to substitute the value from the corresponding `C_Cpp.default.*` setting defined in VS Code's settings. This allows for inheritance and augmentation of default configurations, particularly useful for array properties like `includePath`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/customize-default-settings-cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"configurations\": [\n    {\n        \"name\": \"Win32\",\n        \"includePath\": [\n            \"additional/paths\",\n            \"${default}\"\n        ],\n        \"defines\": [\n            \"${default}\"\n        ],\n        \"macFrameworkPath\": [\n            \"${default}\",\n            \"additional/paths\"\n        ],\n        \"forcedInclude\": [\n            \"${default}\",\n            \"additional/paths\"\n        ],\n        \"compileCommands\": \"${default}\",\n        \"browse\": {\n            \"limitSymbolsToIncludedHeaders\": true,\n            \"databaseFilename\": \"${default}\",\n            \"path\": [\n                \"${default}\",\n                \"additional/paths\"\n            ]\n        },\n        \"intelliSenseMode\": \"${default}\",\n        \"cStandard\": \"${default}\",\n        \"cppStandard\": \"${default}\",\n        \"compilerPath\": \"${default}\"\n    }\n],\n```\n```\n\n----------------------------------------\n\nTITLE: Preserving Trailing Whitespace in Markdown\nDESCRIPTION: JSON configuration to preserve trailing whitespace specifically for Markdown files to enable hard line breaks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/markdown.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[markdown]\": {\n    \"files.trimTrailingWhitespace\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Copilot Next Edit Suggestions in VS Code Settings\nDESCRIPTION: This setting key, `github.copilot.nextEditSuggestions.enabled`, is used within VS Code's settings (`settings.json`) to toggle the Copilot Next Edit Suggestions (NES) feature. Set its value to `true` to enable prediction of subsequent code edits based on the current context. Requires the GitHub Copilot extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nsetting(github.copilot.nextEditSuggestions.enabled)\n```\n\n----------------------------------------\n\nTITLE: Managing Secrets in VS Code Extensions\nDESCRIPTION: Shows how to securely store and retrieve secrets using VS Code's SecretStorage API, which provides encryption for sensitive data.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    // ...\n    const myApiKey = context.secrets.get('apiKey');\n    // ...\n    context.secrets.delete('apiKey');\n    // ...\n    context.secrets.store('apiKey', myApiKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Operator in package.json 'when' Clauses (JSON)\nDESCRIPTION: This JSON snippet demonstrates a menu contribution within a `package.json` file. It uses the `when` clause with the new `in` operator to conditionally display a command ('ext.doSpecial') in the explorer context menu. The menu item appears only if the selected resource is a folder (`explorerResourceIsFolder`) and its name (`resourceFilename`) exists within the context key `ext:supportedFolders` (set previously via the `setContext` command).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// Note, this assumes you have already defined a command called ext.doSpecial\n\"menus\": {\n  \"explorer/context\": [\n    {\n      \"command\": \"ext.doSpecial\",\n      \"when\": \"explorerResourceIsFolder && resourceFilename in ext:supportedFolders\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugging Behavior with launch.json (VS Code, JSON)\nDESCRIPTION: This snippet demonstrates a sample launch.json configuration for C/C++ debugging using the Visual Studio Windows Debugger (type: cppvsdbg). It sets essential fields such as the executable path, symbol search path, options for external console, debugging logs, Natvis visualizer file, and enables the display string for custom object views. Key parameters include \"program\", \"symbolSearchPath\", \"externalConsole\", and \"logging\". Ensure the paths and file references are accurate for your environment; this configuration is Windows-specific. Inputs include the configuration object, and outputs are determined by the debug session launched by VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"C++ Launch (Windows)\",\n   \"type\": \"cppvsdbg\",\n   \"request\": \"launch\",\n   \"program\": \"C:\\\\app1\\\\Debug\\\\app1.exe\",\n   \"symbolSearchPath\": \"C:\\\\Symbols;C:\\\\SymbolDir2\",\n   \"externalConsole\": true,\n   \"logging\": {\n       \"moduleLoad\": false,\n       \"trace\": true\n    },\n   \"visualizerFile\": \"${workspaceFolder}/my.natvis\",\n   \"showDisplayString\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Profiles in VS Code Using JSON Settings\nDESCRIPTION: This snippet demonstrates how to customize integrated terminal profiles on Windows in Visual Studio Code by modifying the 'terminal.integrated.profiles.windows' setting in the settings JSON file. It explains how to add new profiles (like PowerShell without a user profile or Cygwin), remove built-in profiles (such as Git Bash), and customize initialization arguments and paths. Dependencies include Visual Studio Code v1.55 or later with editor access to settings, and the configuration accepts profile names as keys with objects defining properties like 'source', 'args', 'path', and 'overrideName'. Key limitations include platform specificity (this example targets Windows) and the requirement for correct executable paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    // Add a PowerShell profile that doesn't run the profile\n    \"PowerShell (No Profile)\": {\n        // Some sources are available which auto detect complex cases\n        \"source\": \"PowerShell\",\n        \"args\": [\"-NoProfile\"],\n        // Name the terminal \"PowerShell (No Profile)\" to differentiate it\n        \"overrideName\": true\n    },\n    // Remove the builtin Git Bash profile\n    \"Git Bash\": null,\n    // Add a Cygwin profile\n    \"Cygwin\": {\n      \"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\",\n      \"args\": [\"--login\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Closing Tags in HTML\nDESCRIPTION: JSON configuration to disable the automatic closing of HTML tags in VS Code. By default, VS Code automatically closes HTML tags, but this can be turned off with this setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"html.autoClosingTags\": false\n```\n\n----------------------------------------\n\nTITLE: Moving Static Method in Java Class Structure\nDESCRIPTION: Demonstration of the move refactoring that relocates a static method from one class to another, updating all references to use the new location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class Office {\n  public static void main(String[] args) {\n    print();\n  }\n\n  public static void print() {\n    System.out.println(\"This is printer\");\n  }\n\n  static class Printer { }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Office {\n  public static void main(String[] args) {\n    Printer.print();\n  }\n\n  static class Printer {\n    public static void print() {\n      System.out.println(\"This is printer\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp Sass Task\nDESCRIPTION: Gulp configuration for watching and compiling Sass files to CSS. Sets up file watching and automatic compilation on changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Sass configuration\nvar gulp = require('gulp');\nvar sass = require('gulp-sass')(require('sass'));\n\ngulp.task('sass', function(cb) {\n    gulp.src('*.scss')\n        .pipe(sass())\n        .pipe(gulp.dest(function(f) {\n            return f.base;\n        }));\n    cb();\n});\n\ngulp.task('default', gulp.series('sass', function(cb) {\n    gulp.watch('*.scss', gulp.series('sass'));\n    cb();\n}));\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration for Edge Browser\nDESCRIPTION: VS Code launch.json configuration for debugging Angular application in Microsoft Edge\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"msedge\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Edge against localhost\",\n            \"url\": \"http://localhost:4200\",\n            \"webRoot\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Custom and Configured Tasks in tasks.json (JSON)\nDESCRIPTION: This `tasks.json` example shows how to combine a configured auto-detected task (npm lint) with a custom task ('Run tests'). The npm task's presentation is set to never reveal the terminal, while the custom shell task specifies platform-dependent commands, assigns a group ('test'), always reveals the terminal ('reveal': 'always'), and uses a new terminal panel for each run ('panel': 'new').\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"npm\",\n            \"script\": \"lint\",\n            \"problemMatcher\": [\n                \"$eslint-stylish\"\n            ],\n            \"presentation\": {\n                \"reveal\": \"never\"\n            }\n        },\n        {\n            \"label\": \"Run tests\",\n            \"type\": \"shell\",\n            \"command\": \"./scripts/test.sh\",\n            \"windows\": {\n                \"command\": \".\\\\scripts\\\\test.cmd\"\n            },\n            \"group\": \"test\",\n            \"presentation\": {\n                \"reveal\": \"always\",\n                \"panel\": \"new\"\n            }\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Token Highlighting Rules - VS Code Theme Configuration - JSON\nDESCRIPTION: This snippet shows how to enable semantic highlighting and specify a custom color/font style for Java readonly variable declarations in Visual Studio Code's theme configuration (settings or theme file). It requires setting the \\\"semanticHighlighting\\\" property to true and providing a \\\"semanticTokenColors\\\" mapping keyed by the semantic scope string. The rule outlined targets Java and sets affected variables to green and bold. Inputs are JSON configuration; outputs are visual changes and enhanced highlighting. An invalid or missing key could prevent the rule from applying correctly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semanticHighlighting\": true,\n  \"semanticTokenColors\": {\n      \"variable.declaration.readonly:java\": { \"foreground\": \"#00ff00\" \"fontStyle\": \"bold\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Maven Web App Project with CMD\nDESCRIPTION: Command to generate a new Maven web app project using the maven-archetype-webapp archetype. This sets up the basic structure for a Java web application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-webapp.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4\n```\n\n----------------------------------------\n\nTITLE: Hello World TypeScript Example\nDESCRIPTION: Basic TypeScript code example showing type declaration and console output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/typescript.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet message : string = \"Hello World\";\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for Python Education\nDESCRIPTION: JSON configuration to customize Visual Studio Code for teaching Python, including disabling certain IntelliSense features and enabling autosave.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/learn/educators/python.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"editor.quickSuggestions\": false,\n\"editor.acceptSuggestionOnCommitCharacter\": false,\n\"editor.suggest.filterGraceful\": true,\n\"editor.suggestOnTriggerCharacters\": false,\n\"editor.acceptSuggestionOnEnter\": \"on\",\n\"editor.suggest.showIcons\": false,\n\"editor.suggest.maxVisibleSuggestions\": 7,\n\"editor.hover.enabled\": false,\n\"editor.hover.sticky\": false,\n\"editor.suggest.snippetsPreventQuickSuggestions\": false,\n\"editor.parameterHints.enabled\": false,\n\"editor.wordBasedSuggestions\": \"matchingDocuments\",\n\"editor.tabCompletion\": \"on\",\n\"extensions.ignoreRecommendations\": true,\n\"files.autoSave\": \"afterDelay\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Script Launch in VS Code\nDESCRIPTION: Launch configuration that runs a Node.js application via an NPM script. This demonstrates how to set up debugging through NPM using the runtimeExecutable and runtimeArgs properties, with special handling for Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Launch via NPM\",\n\t\"type\": \"node\",\n\t\"request\": \"launch\",\n\t\"cwd\": \"${workspaceRoot}\",\n\t\"runtimeExecutable\": \"npm\",\n\t\"windows\": {\n\t\t\"runtimeExecutable\": \"npm.cmd\"\n\t},\n\t\"runtimeArgs\": [\n\t\t\"run-script\", \"debug\"\n\t],\n\t\"port\": 5858\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Formatting Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a DocumentFormattingEditProvider class and register it in the extension's activate function. This provider allows formatting whole documents with minimal text edits.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoDocumentFormatter implements vscode.DocumentFormattingEditProvider {\n    provideDocumentFormattingEdits(\n        document: vscode.TextDocument, options: vscode.FormattingOptions, token: vscode.CancellationToken)\n        : vscode.ProviderResult<vscode.TextEdit[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerDocumentFormattingEditProvider(\n            GO_MODE, new GoDocumentFormatter()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for VS Code Extension Test Debugging\nDESCRIPTION: This JSON configuration sets up a debugger for running extension tests in VS Code. It specifies the runtime executable, development path, test path, and output files location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Extension Tests\",\n      \"type\": \"extensionHost\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${execPath}\",\n      \"args\": [\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionTestsPath=${workspaceFolder}/out/test/suite/index\"\n      ],\n      \"outFiles\": [\"${workspaceFolder}/out/test/**/*.js\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading External Files from DataTransfer in VS Code Extension (TypeScript)\nDESCRIPTION: Shows how to implement the `handleDrop` method in a `vscode.TreeDragAndDropController` to read data from external files dropped onto a tree view. It uses `vscode.DataTransfer` to access `vscode.DataTransferFile` objects, reads their binary data using `file.data()`, decodes it with `TextDecoder`, and logs a preview. Requires the `vscode` API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class TestViewDragAndDrop implements vscode.TreeDataProvider<Node>, vscode.TreeDragAndDropController<Node> {\n\n    public async handleDrop(target: Node | undefined, sources: vscode.DataTransfer, token: vscode.CancellationToken): Promise<void> {\n        // Get a list of all files\n        const files: vscode.DataTransferFile[] = [];\n        sources.forEach((item) => {\n            const file = item.asFile();\n            if (file) {\n                files.push(file);\n            }\n        });\n\n        const decoder = new TextDecoder();\n\n        // Print out the names and first 100 characters of the file\n        for (const file of files) {\n            const data = await file.data();\n            const text = decoder.decode(data);\n            const fileContentsPreview = text.slice(0, 100);\n            console.log(file.name + ' — ' + fileContentsPreview + '\\n');\n        }\n\n        ...\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Copilot Chat Commands\nDESCRIPTION: Special commands prefixed with `/` used within the Copilot Chat interface (including Inline Chat) to direct Copilot's behavior. The `/explain` command specifically asks Copilot to provide an explanation for a block of code or a programming concept. Other `/` commands can be used for various tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_1\n\nLANGUAGE: copilot-chat\nCODE:\n```\n/explain\n```\n\n----------------------------------------\n\nTITLE: Implementing a DocumentLinkProvider with a Custom DocumentLink Type - TypeScript\nDESCRIPTION: This TypeScript class example demonstrates implementing a generic DocumentLinkProvider using a custom type, MyDocumentLink. It defines both provideDocumentLinks and resolveDocumentLink methods tailored to the specific link type. Requires implementing MyDocumentLink and integrating with the VS Code extension API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyDocLinkProvider implements DocumentLinkProvider<MyDocumentLink> {\\n\\n  provideDocumentLinks(document: TextDocument, token: CancellationToken): MyDocumentLink[] { ... }\\n\\n  resolveDocumentLink(link: MyDocumentLink, token: CancellationToken): MyDocumentLink { ... }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Debug Configurations - VS Code Workspace - JSON\nDESCRIPTION: Defines a compound debug configuration in a multi-root VS Code workspace. This allows launching multiple debug targets in sequence or parallel. The 'compounds' array specifies a configuration with a custom name and a list of configuration names to invoke. Dependencies: A workspace with constituent launch configurations ('Launch Server', 'Launch Client'). Inputs are the names of existing configurations; the output is a composite launch operation. Names must be unique within the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"compounds\": [{\n      \"name\": \"Launch Server & Client\",\n      \"configurations\": [\n        \"Launch Server\",\n        \"Launch Client\"\n      ]\n  }]\n```\n\n----------------------------------------\n\nTITLE: Normalizing Input Features using StandardScaler in Python\nDESCRIPTION: Applies scikit-learn's StandardScaler to normalize input features, ensuring all variables are treated equally regardless of their original scale.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.transform(x_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Remote Extensions in VS Code JSON Settings\nDESCRIPTION: Specifies a list of extensions that should be automatically installed on any remote SSH host connected to using VS Code. This example ensures GitLens and Resource Monitor are always installed remotely by adding their IDs to the `remote.SSH.defaultExtensions` array in the user's `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.defaultExtensions\": [\n    \"eamodio.gitlens\",\n    \"mutantdino.resourcemonitor\"\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Granted WebUSB Devices in VS Code Web Extension (TypeScript)\nDESCRIPTION: Shows how to access WebUSB devices after the user has granted permission via the `workbench.experimental.requestUsbDevice` command in a VS Code web extension. It uses the standard `navigator.usb.getDevices()` web API call to retrieve the list of authorized devices, which can then be used with other WebUSB API methods.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst devices = await navigator.usb.getDevices();\n// Do something with devices\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating and Installing Dependencies for Vue Project\nDESCRIPTION: Commands to navigate into the newly created Vue project directory and install all the necessary dependencies using npm.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/vuejs-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <your-project-name>\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Details via ExtensionContext in TypeScript\nDESCRIPTION: Demonstrates retrieving the current extension's details using the new `extension` property on the `ExtensionContext` object, which is passed to the extension's `activate` function. This provides access to properties like ID, version, and the parsed `package.json` content via the `packageJSON` property, similar to calling `vscode.extensions.getExtension(<extension-id>)`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Within the activate function (context: ExtensionContext)\nconst currentExtension = context.extension;\nconst extensionId = currentExtension.id;\nconst extensionVersion = currentExtension.version;\nconst packageJsonData = currentExtension.packageJSON;\n\n// Equivalent to:\nvscode.extensions.getExtension(<extension-id>)\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task with Python Default Problem Matcher (JSON)\nDESCRIPTION: This JSON configuration defines a VS Code task named \"Run Python\" within a `tasks.json` file. It executes the currently open Python file (`${file}`) using the configured interpreter path (`${command:python.interpreterPath}`) in the shell. It specifically utilizes the built-in `$python` problem matcher, newly introduced in the Python extension, to scan the task's output for errors and warnings and display them in the VS Code Problems panel, improving issue tracking.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run Python\",\n            \"type\": \"shell\",\n            \"command\": \"${command:python.interpreterPath}\",\n            \"args\": [\n                \"${file}\"\n            ],\n            \"problemMatcher\": \"$python\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Command Override in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` setting, `\"overrideCommand\": false`, prevents the VS Code Dev Containers extension from overriding the `ENTRYPOINT` or `CMD` defined in the associated Dockerfile. This is necessary when you want the container to use the startup logic defined within the image itself, rather than the default behavior which often keeps the container alive with a long-running sleep command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"overrideCommand\": false\n```\n\n----------------------------------------\n\nTITLE: Excluding Derived JS from TS/TSX Files in VS Code (settings.json)\nDESCRIPTION: An enhanced JSON configuration object for the `files.exclude` setting in VS Code's workspace `settings.json`. It includes two distinct patterns to hide JavaScript files generated from both TypeScript (`.ts`) and TSX (`.tsx`) source files by checking for sibling files with the same base name using the `when` clause. This helps declutter the File Explorer in projects using both file types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"files.exclude\": {\n    \"**/*.js\": { \"when\": \"$(basename).ts\" },\n    \"**/**.js\": { \"when\": \"$(basename).tsx\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific JavaScript Type Errors with @ts-ignore\nDESCRIPTION: This JavaScript snippet shows the use of the `// @ts-ignore` comment to suppress a TypeScript type error on the immediately following line. This allows developers to bypass specific errors without disabling type checking for the entire file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nlet easy = 'abc'\n// @ts-ignore\neasy = 123 // no error\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Terminals in VS Code Extensions using TypeScript\nDESCRIPTION: Illustrates how to configure the environment for a new terminal instance created via the VS Code extension API using `window.createTerminal`. The `env` property in the options object allows setting specific environment variables (like `JAVA_HOME`) for the terminal session.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nwindow.createTerminal({\n  name: 'My session',\n  shell: 'zsh',\n  env: {\n    JAVA_HOME: '<path>'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugging in launch.json\nDESCRIPTION: Provides a sample launch.json configuration for debugging a Node.js application. It defines a 'launch' type request named 'Launch Program', specifies the entry point using the 'program' attribute with a workspace variable (${workspaceFolder}), and configures 'skipFiles' to ignore Node.js internal modules during debugging. This configuration structure is placed within the '.vscode' folder of a project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n            \"program\": \"${workspaceFolder}\\\\app.js\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Python Interpreter Installation Check in VS Code Settings (JSON)\nDESCRIPTION: Disables warnings issued by the Python extension if it doesn't find an interpreter or if the macOS system Python is used (on older macOS versions). Set this to `true` in user settings (`settings.json`) to suppress these checks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n`python.disableInstallationCheck` to `true`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unicode Directional Formatting Characters in JavaScript\nDESCRIPTION: This code snippet illustrates how Unicode directional formatting characters can be used to craft source code that renders differently than what compilers would execute. It includes RIGHT-TO-LEFT OVERRIDE and POP DIRECTIONAL FORMATTING characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//              from, to, amount\ntransferBalance(5678,‮6776,4321‬,\"USD\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Package Reference using .NET CLI (Shell)\nDESCRIPTION: Mentions the `dotnet add package` command-line tool for adding a package reference (like a NuGet package) to a C# project. This is used when direct modification of dependencies is not available through the Solution Explorer UI. Requires the .NET SDK/CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/project-management.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package\n```\n\n----------------------------------------\n\nTITLE: Setting Volume Permissions for Non-Root User with Docker Compose in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` configuration is used alongside a Docker Compose setup where `node_modules` is mounted as a named volume. It specifies the `remoteUser`, the `workspaceFolder`, and a `postCreateCommand` to change ownership of the `node_modules` directory to the non-root user after container creation, ensuring correct write permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"remoteUser\": \"node\",\n\"workspaceFolder\": \"/workspace\",\n\"postCreateCommand\": \"sudo chown user-name-goes-here node_modules\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Handler Interface and Registration Function (VS Code API, TypeScript)\nDESCRIPTION: This TypeScript interface and namespace declaration provide the structure for implementing and registering a Protocol Handler extension API in VS Code. The `ProtocolHandler` interface requires a `handleUri` method, and the `registerProtocolHandler` function registers a handler able to process URIs system-wide. This code requires inclusion of the proposed APIs and is only available for extensions marked as such. Handlers must be registered for the specific URI authority matching the extension's ID.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ProtocolHandler {\\n  handleUri(uri: Uri): void;\\n}\\n\\nexport namespace window {\\n\\n  /**\\n  * Registers a protocol handler capable of handling system-wide URIs.\\n  */\\n  export function registerProtocolHandler(handler: ProtocolHandler): Disposable;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Remote Path Mapping Configuration for Node.js Debugging\nDESCRIPTION: Debug configuration that maps paths between local and remote environments using localRoot and remoteRoot attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"name\": \"Attach to remote\",\n    \"address\": \"TCP/IP address of process to be debugged\",\n    \"port\": 9229,\n    \"localRoot\": \"${workspaceFolder}\",\n    \"remoteRoot\": \"C:\\\\Users\\\\username\\\\project\\\\server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Test Configuration in launch.json - JSON (Diff Format)\nDESCRIPTION: This snippet presents a diff example of updating a VS Code extension's launch.json to reference an external test configuration file via the 'testConfiguration' property, replacing manual CLI argument specification. Dependencies include @vscode/test-cli and a valid test configuration file (e.g., .vscode-test.js). The added property streamlines test execution setup and reduces boilerplate in launch configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"extensionHost\",\n    \"request\": \"launch\",\n    \"name\": \"My extension tests\",\n+   \"testConfiguration\": \"${workspaceFolder}/.vscode-test.js\",\n-   \"args\": [\"--extensionDevelopmentPath=${workspaceFolder}\"]\n},\n```\n\n----------------------------------------\n\nTITLE: Generating a TypeScript Interface from a Prompt Reference - Markdown\nDESCRIPTION: This snippet defines a Markdown prompt file that instructs Copilot to generate a TypeScript interface for a user-specified database table. It references another prompt file containing the schema details, thus demonstrating prompt file interlinking for modular reuse. The prompt expects a referenced schema file and operates within any repository supporting Markdown-based Copilot prompts; no additional dependencies are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nGenerate a TypeScript interface for the table specified by the user. Refer to the [user schema](database_users.prompt.md).\\n\n```\n\n----------------------------------------\n\nTITLE: Example Copilot Instruction File Content (Markdown)\nDESCRIPTION: This Markdown snippet provides example content for an external instruction file (like `code-style.md`) referenced in Copilot settings. It contains natural language instructions, such as preferring React functional components and requiring comments, which Copilot will consider during code generation or other specified tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nAlways use React functional components.\n\nAlways add comments.\n```\n```\n\n----------------------------------------\n\nTITLE: Programmatic Webview Panel Disposal\nDESCRIPTION: Demonstrates how to programmatically close a webview panel after a timeout and handle cleanup when the panel is closed by the user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {}\n      );\n\n      panel.webview.html = getWebviewContent('Coding Cat');\n\n      // After 5sec, programmatically close the webview panel\n      const timeout = setTimeout(() => panel.dispose(), 5000);\n\n      panel.onDidDispose(\n        () => {\n          // Handle user closing panel before the 5sec have passed\n          clearTimeout(timeout);\n        },\n        null,\n        context.subscriptions\n      );\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal IntelliSense Suggestions (Preview)\nDESCRIPTION: Sets the `terminal.integrated.suggest.enabled` setting to `true` to enable preview IntelliSense features in the integrated terminal, providing shell command completions for bash, zsh, fish, and PowerShell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.enabled:true)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Pull Requests Branch Behavior\nDESCRIPTION: Setting to control whether VS Code automatically pulls a previously checked out PR branch when checking out that same branch again. Setting this to false will prevent automatic pulling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.pullPullRequestBranchBeforeCheckout\": true\n```\n\n----------------------------------------\n\nTITLE: Chat Interface Color Settings\nDESCRIPTION: Color customization for VS Code's chat interface including request backgrounds, avatars, and slash commands\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chat.requestBorder\": \"#color\",\n  \"chat.requestBackground\": \"#color\",\n  \"chat.slashCommandBackground\": \"#color\",\n  \"chat.slashCommandForeground\": \"#color\",\n  \"chat.avatarBackground\": \"#color\",\n  \"chat.avatarForeground\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Compose Up with Template Matching (JSON)\nDESCRIPTION: This JSON snippet configures the VS Code `docker.commands.composeUp` setting with multiple templates. Each template corresponds to an environment (dev, test, prod) and uses a regular expression (`match`) to automatically select the correct template based on the filename of the selected Compose file. This allows running `docker-compose up` with different combinations of Compose files depending on the context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"docker.commands.composeUp\": [\n    {\n        \"label\": \"dev-match\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.debug.yml -f docker-compose.dev.yml up -d --build\",\n        \"match\": \"dev\"\n    },\n    {\n        \"label\": \"test-match\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.debug.yml -f docker-compose.test.yml up -d --build\",\n        \"match\": \"test\"\n    },\n    {\n        \"label\": \"prod-match\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.release.yml -f docker-compose.prod.yml up -d --build\",\n        \"match\": \"prod\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using vscode.l10n.t for Extension Localization in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a basic usage of the new `vscode.l10n.t` function within an extension's `activate` method. It localizes the string 'Hello in {0}!' by passing it to `l10n.t` along with the current language obtained from `vscode.env.language` as an argument for the placeholder {0}. The potentially localized message is then displayed using `vscode.window.showInformationMessage`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { l10n } from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  const message = l10n.t('Hello in {0}!', vscode.env.language);\n  vscode.window.showInformationMessage(message);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Style Formatter for Java in VS Code\nDESCRIPTION: This snippet shows how to set the Java formatter to use Google Style in VS Code settings.json file. It specifies the URL for the Google Style XML file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-linting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"java.format.settings.url\": \"https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml\",\n```\n\n----------------------------------------\n\nTITLE: Persisting Bash History Volume with Docker Compose - YAML\nDESCRIPTION: This docker-compose.yml example illustrates adding a persistent volume for bash history to a containerized service. Under 'volumes', it maps 'projectname-bashhistory' to '/commandhistory' for the specified service. The volume is also declared at the bottom level for Docker to manage. This approach is used when orchestrating services with Docker Compose. Replace 'your-service-name-here' with the actual service name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/persist-bash-history.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n      - projectname-bashhistory:/commandhistory\n     # ...\nvolumes:\n  projectname-bashhistory:\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Docker Compose File in devcontainer.json\nDESCRIPTION: Configuration for using a development-specific Docker Compose file instead of the default one. This allows maintaining a separate configuration for development environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"dockerComposeFile\": \"docker-compose.devcontainer.yml\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Proposed vscode.CustomExecution2 API Class (TypeScript)\nDESCRIPTION: This TypeScript snippet presents the proposed `vscode.CustomExecution2` class definition, an evolution of `vscode.CustomExecution`. This API enables task providers to create tasks where the execution logic and terminal interaction are fully controlled by the extension via a `Pseudoterminal` implementation. The constructor accepts a callback function that should return a `Thenable` (Promise) resolving to a `Pseudoterminal` instance when the task starts. This is a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CustomExecution2 {\n  /**\n    * @param process The [Pseudoterminal](#Pseudoterminal) to be used by the task to display output.\n    * @param callback The callback that will be called when the task is started by a user.\n    */\n  constructor(callback: (thisArg?: any) => Thenable<Pseudoterminal>);\n\n  /**\n    * The callback used to execute the task. Cancellation should be handled using\n    * [Pseudoterminal.close](#Pseudoterminal.close). When the task is complete fire\n    * [Pseudoterminal.onDidClose](#Pseudoterminal.onDidClose).\n    */\n  callback: (thisArg?: any) => Thenable<Pseudoterminal>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Context Menus in VS Code Webview (JSON)\nDESCRIPTION: This JSON snippet shows how to define custom context menu items for a webview in VS Code. It uses the `contributes` section in the extension's manifest to specify commands and menu items that appear in the webview's context menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"menus\": {\n    \"webview/context\": [\n      {\n        \"command\": \"catCoding.yarn\",\n        \"when\": \"webviewId == 'catCoding'\"\n      },\n      {\n        \"command\": \"catCoding.insertLion\",\n        \"when\": \"webviewId == 'catCoding' && webviewSection == 'editor'\"\n      }\n    ]\n  },\n  \"commands\": [\n    {\n      \"command\": \"catCoding.yarn\",\n      \"title\": \"Yarn 🧶\",\n      \"category\": \"Cat Coding\"\n    },\n    {\n      \"command\": \"catCoding.insertLion\",\n      \"title\": \"Insert 🦁\",\n      \"category\": \"Cat Coding\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Import Exclusion Configuration in JSON\nDESCRIPTION: Configuration example showing how to exclude specific packages from auto-imports using regular expressions through TypeScript preferences\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\n        \"^lodash/.*$\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Machine-Overridable Setting in Extension Manifest - VS Code - JSON\nDESCRIPTION: This configuration snippet sets up an overridable setting, 'myextension.libPath', in a VS Code extension's JSON manifest. The property allows the user to specify a library path that can be customized per machine, workspace, or folder. The schema defines string or null types, uses a markdown description, and assigns the 'machine-overridable' scope. Used in the 'package.json' of VS Code extensions; no runtime code dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"configuration\": {\n  \"title\": \"My Extension Settings\",\n  \"properties\": {\n   \"myextension.libPath\": {\n      \"type\": [\n        \"string\",\n        \"null\"\n      ],\n      \"markdownDescription\": \"Specify the path to the library.\",\n      \"default\": null,\n      \"scope\": \"machine-overridable\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Ready Action in Launch JSON\nDESCRIPTION: Launch configuration example demonstrating the serverReadyAction feature with the new killOnServerStop property that automatically stops browser debugging when the server stops.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Launch Program\",\n  \"program\": \"${workspaceFolder}/app.js\",\n\n  \"serverReadyAction\": {\n    \"pattern\": \"listening on port ([0-9]+)\",\n    \"uriFormat\": \"http://localhost:%s\",\n    \"action\": \"debugWithEdge\",\n    \"killOnServerStop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python File Indexing Limit with Pylance\nDESCRIPTION: Setting that allows configuring the file count limit for indexing in Pylance for Python projects. Useful when working with large projects where you need enhanced IntelliSense at the cost of performance. The default limit is 2000 files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"python.analysis.userFileIndexingLimit\": 2000\n```\n\n----------------------------------------\n\nTITLE: Running NPM Script with Debugging in VS Code\nDESCRIPTION: Shows how to run an NPM script that includes the --inspect flag for debugging. VS Code's auto-attach feature will automatically connect the debugger when such scripts are run.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/07/12/introducing-logpoints-and-auto-attach.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run debug\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Attach for Node.js Subprocess Debugging - VS Code Launch Config - JSON\nDESCRIPTION: Defines a Node.js launch configuration in VS Code that enables automatic attachment of the debugger to all child processes spawned by the main debuggee. The 'autoAttachChildProcesses' property is set to true, allowing debug tracking of complex Node.js applications (such as those using 'cluster'). Requires VS Code's Node.js debug extension; 'program' should point to the main script. Inputs: launch request attributes; outputs: recursive debug attachment to child Node processes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Cluster\",\n  \"program\": \"${workspaceFolder}/cluster.js\",\n  \"autoAttachChildProcesses\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server Settings in package.json\nDESCRIPTION: Defines the configuration settings that can be passed to the language server. It sets up a maximum number of problems that can be reported by the server, with a default of 100.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"configuration\": {\n    \"type\": \"object\",\n    \"title\": \"Example configuration\",\n    \"properties\": {\n        \"languageServerExample.maxNumberOfProblems\": {\n            \"scope\": \"resource\",\n            \"type\": \"number\",\n            \"default\": 100,\n            \"description\": \"Controls the maximum number of problems produced by the server.\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Debug Terminal Args in VS Code\nDESCRIPTION: Example configuration for handling arguments in JavaScript debug terminals. Shows how to pass arguments as a single string (unescaped) or as an array (escaped) when using the integrated terminal for debugging JavaScript/TypeScript programs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"console\": \"integratedTerminal\",\n    ...\n\n    // If you pass args as a single string, the characters will not be escaped for the terminal,\n    // so the command in backticks will be evaluated, and output will be redirected to \"outfile\".\n    // The user is responsible for knowing the type of shell that this will be run in,\n    // and doing any escaping necessary.\n    \"args\": \"`echo hello` > outfile\",\n\n    // If you pass args as an array, the characters will be escaped for the terminal,\n    // so that the program receives them verbatim.\n    \"args\": [\"`echo hello` > outfile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Launch Configurations with Folder Qualifiers in VS Code\nDESCRIPTION: This snippet demonstrates how to create compound launch configurations when configuration names are not unique across workspace folders. It uses the verbose folder syntax to specify which configuration from which folder should be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"compounds\": [{\n      \"name\": \"Launch Server & Client\",\n      \"configurations\": [\n        \"Launch Server\",\n        {\n          \"folder\": \"Web Client\",\n          \"name\": \"Launch Client\"\n        },\n        {\n          \"folder\": \"Desktop Client\",\n          \"name\": \"Launch Client\"\n        }\n      ]\n  }]\n```\n\n----------------------------------------\n\nTITLE: Configuring Problem Matcher Search in Tasks\nDESCRIPTION: Configuration example for the new 'search' file location method in problem matchers, allowing recursive file system search for captured paths with include and exclude patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"problemMatcher\": {\n    \"fileLocation\": [\n        \"search\",\n        {\n            \"include\": [\n                \"${workspaceFolder}/src\",\n                \"${workspaceFolder}/extensions\"\n            ],\n            \"exclude\": [\n                \"${workspaceFolder}/extensions/node_modules\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAssembly Worker in TypeScript\nDESCRIPTION: Creates a worker connection to handle WebAssembly code execution separate from the main thread. Uses the VS Code component model to generate necessary glue code between worker and extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, RAL } from '@vscode/wasm-component-model';\nimport { calculator } from './calculator';\n\nasync function main(): Promise<void> {\n\tconst connection = await Connection.createWorker(calculator._);\n\tconnection.listen();\n}\n\nmain().catch(RAL().console.error);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Paste Behavior for Imports in JSON Settings\nDESCRIPTION: This JSON setting allows customization of the default behavior when pasting code. By including `text.updateImports.jsts` or `text.updateImports`, you can configure VS Code to always add necessary imports automatically when pasting TypeScript or JavaScript code, bypassing the confirmation control.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\neditor.pasteAs.preferences\n```\n\n----------------------------------------\n\nTITLE: Controlling Inline Completion Toolbar Visibility (VS Code Setting)\nDESCRIPTION: Determines whether the toolbar associated with inline code suggestions (like those from Copilot) should be displayed in the Visual Studio Code editor. Disabling it can provide a cleaner interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_4\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(editor.inlineSuggest.showToolbar)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Server Plugins from VS Code Extensions\nDESCRIPTION: This code shows how to send configuration data to contributed TypeScript server plugins from a VS Code extension. It demonstrates accessing the TypeScript language features API and using the configurePlugin method to pass settings to a TypeScript plugin.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// In your VS Code extension\n\nexport async function activate(context: vscode.ExtensionContext) {\n    // Get the TS extension\n    const tsExtension = vscode.extensions.gettsExtension('vscode.typescript-language-features');\n    if (!tsExtension) {\n        return;\n    }\n\n    await tsExtension.activate();\n\n    // Get the API from the TS extension\n    if (!tsExtension.exports || !tsExtension.exports.getAPI) {\n        return;\n    }\n\n    const api = tsExtension.exports.getAPI(0);\n    if (!api) {\n        return;\n    }\n\n    // Configure the 'my-typescript-plugin-id' plugin\n    api.configurePlugin('my-typescript-plugin-id', {\n        someValue: process.env['SOME_VALUE']\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring skipFiles with Negative Patterns (Legacy Protocol) in JSON\nDESCRIPTION: This JSON snippet illustrates how to use negative glob patterns with the `skipFiles` setting in `launch.json` when using the `legacy` debug protocol. It skips all files in `node_modules` *except* for those within the `node_modules/math` directory. Note that negative patterns must follow positive patterns and are specific to the legacy protocol.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"skipFiles\": [\n    \"${workspaceFolder}/node_modules/**/*.js\",\n    \"!${workspaceFolder}/node_modules/math/**/*.js\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Definition Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling go-to-definition functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"definitionProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Keys for 'when' Clauses in TypeScript\nDESCRIPTION: These TypeScript examples demonstrate using the `vscode.commands.executeCommand` with 'setContext' to create or update context keys. These keys ('ext:supportedFolders' in the example) can store data like arrays or objects, which can then be dynamically checked by 'when' clauses (using the 'in' operator) to control UI element visibility based on context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nvscode.commands.executeCommand('setContext', 'ext:supportedFolders', [ 'test', 'foo', 'bar' ]);\n\n// or\n\n// Note in this case (using an object), the value doesn't matter, it is based on the existence of the key in the object\nvscode.commands.executeCommand('setContext', 'ext:supportedFolders', { 'test': true, 'foo': 'anything', 'bar': false });\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch for Web Extension Development in JSON\nDESCRIPTION: This launch configuration is used to run and debug a web extension in VS Code. It specifies the necessary arguments and tasks for launching the extension in a web extension host within VS Code desktop.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Run Web Extension in VS Code\",\n      \"type\": \"pwa-extensionHost\",\n      \"debugWebWorkerHost\": true,\n      \"request\": \"launch\",\n      \"args\": [\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionDevelopmentKind=web\"\n      ],\n      \"outFiles\": [\n        \"${workspaceFolder}/dist/web/**/*.js\"\n      ],\n      \"preLaunchTask\": \"npm: watch-web\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkstyle Modules in VS Code Settings\nDESCRIPTION: This JSON configuration shows how to add third-party modules for Checkstyle in VS Code settings.json file. It specifies the path to a JAR file containing additional checks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-linting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"java.checkstyle.modules\": [ \"${workspaceFolder}/src/main/resources/sevntu-checks-1.35.0.jar\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Auto Save Settings in VS Code\nDESCRIPTION: JSON configuration for enabling auto-save functionality specifically for Markdown files in VS Code. This demonstrates the new per-language auto-save configuration capability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[markdown]\": {\n    \"files.autoSave\": \"afterDelay\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rust Project\nDESCRIPTION: Command to run a Rust project using Cargo.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Configuring Existing .NET Path for VS Code Extension (JSON)\nDESCRIPTION: Provides a JSON configuration snippet for the `dotnetAcquisitionExtension.existingDotnetPath` setting in VS Code. This setting directs specific extensions (like `msazuretools.azurerm-vscode-tools`) to use a pre-existing .NET installation, useful when the automatic acquisition fails. Requires the path to the `dotnet.exe` of the desired installation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotnetAcquisitionExtension.existingDotnetPath\": [\n        {\n            \"extensionId\": \"msazuretools.azurerm-vscode-tools\",\n            \"path\": \"C\\\\Program Files\\\\dotnet\\\\dotnet.exe\"\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Function for GitHub Copilot Demo\nDESCRIPTION: Example JavaScript function header used to demonstrate GitHub Copilot's code completion capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateDaysBetweenDates(begin, end) {\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in Docker Compose for Multiple Containers (YAML)\nDESCRIPTION: Defines two services (`python-api` and `node-app`) in a `docker-compose.yml` file using specific Docker images. It mounts the project root (`.`) to `/workspace` in both containers to ensure shared access, particularly for the `.git` directory, and uses `command: sleep infinity` to keep the containers running indefinitely.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  python-api:\n    image: mcr.microsoft.com/devcontainers/python:1-3.12-bookworm\n    volumes:\n      # Mount the root folder that contains .git\n      - .:/workspace\n    command: sleep infinity\n    # ...\n\n  node-app:\n    image: mcr.microsoft.com/devcontainers/typescript-node:1-20-bookworm\n    volumes:\n      # Mount the root folder that contains .git\n      - .:/workspace\n    command: sleep infinity\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Browser Attach Configuration in VS Code\nDESCRIPTION: JSON configuration for attaching VS Code debugger to a running browser instance\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/browser-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"msedge\",\n      \"request\": \"attach\",\n      \"name\": \"Attach to browser\",\n      \"port\": 9222\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotebookEditor API in VS Code\nDESCRIPTION: Shows how to interact with notebook editors including accessing the notebook document and changing selections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = vscode.window.activeNotebookEditor;\nif (editor) {\n  // Access the underlying notebook document associated with the editor\n  console.log(editor.notebook.uri);\n\n  // Change the selection in the current notebook\n  editor.selection = new vscode.NotebookRange(1, 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New ASP.NET Core WebAPI Project\nDESCRIPTION: Command to create a new ASP.NET Core WebAPI project without HTTPS support using the .NET CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-aspnet-core.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new webapi --no-https\n```\n\n----------------------------------------\n\nTITLE: Disabling Commands in Virtual Workspaces using When Clauses\nDESCRIPTION: Example of how to use the 'virtualWorkspace' context key in a when clause to disable a command in virtual workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"menus\": {\n      \"commandPalette\": [\n        {\n          \"command\": \"npm.publish\",\n          \"when\": \"!virtualWorkspace\"\n        }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using console.log with Logpoints in JavaScript\nDESCRIPTION: This snippet demonstrates that Logpoints can be combined with existing console.log statements in JavaScript code. Both types of logging will appear in the Debug Console.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/07/12/introducing-logpoints-and-auto-attach.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Existing log statement\");\n// Logpoint can be inserted here without modifying the code\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for VS Code Debugger Extension\nDESCRIPTION: This snippet shows the structure of a package.json file for a VS Code debugger extension. It includes basic extension properties, debug-specific contributions, and configuration options for the debugger.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/debugger-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mock-debug\",\n  \"displayName\": \"Mock Debug\",\n  \"version\": \"0.24.0\",\n  \"publisher\": \"...\",\n  \"description\": \"Starter extension for developing debug adapters for VS Code.\",\n  \"author\": {\n    \"name\": \"...\",\n    \"email\": \"...\"\n  },\n  \"engines\": {\n    \"vscode\": \"^1.17.0\",\n    \"node\": \"^7.9.0\"\n  },\n  \"icon\": \"images/mock-debug-icon.png\",\n  \"categories\": [\"Debuggers\"],\n\n  \"contributes\": {\n    \"breakpoints\": [{ \"language\": \"markdown\" }],\n    \"debuggers\": [\n      {\n        \"type\": \"mock\",\n        \"label\": \"Mock Debug\",\n\n        \"program\": \"./out/mockDebug.js\",\n        \"runtime\": \"node\",\n\n        \"configurationAttributes\": {\n          \"launch\": {\n            \"required\": [\"program\"],\n            \"properties\": {\n              \"program\": {\n                \"type\": \"string\",\n                \"description\": \"Absolute path to a text file.\",\n                \"default\": \"${workspaceFolder}/${command:AskForProgramName}\"\n              },\n              \"stopOnEntry\": {\n                \"type\": \"boolean\",\n                \"description\": \"Automatically stop after launch.\",\n                \"default\": true\n              }\n            }\n          }\n        },\n\n        \"initialConfigurations\": [\n          {\n            \"type\": \"mock\",\n            \"request\": \"launch\",\n            \"name\": \"Ask for file name\",\n            \"program\": \"${workspaceFolder}/${command:AskForProgramName}\",\n            \"stopOnEntry\": true\n          }\n        ],\n\n        \"configurationSnippets\": [\n          {\n            \"label\": \"Mock Debug: Launch\",\n            \"description\": \"A new configuration for launching a mock debug program\",\n            \"body\": {\n              \"type\": \"mock\",\n              \"request\": \"launch\",\n              \"name\": \"${2:Launch Program}\",\n              \"program\": \"^\\\"\\\\${workspaceFolder}/${1:Program}\\\"\"\n            }\n          }\n        ],\n\n        \"variables\": {\n          \"AskForProgramName\": \"extension.mock-debug.getProgramName\"\n        }\n      }\n    ]\n  },\n\n  \"activationEvents\": [\"onDebug\", \"onCommand:extension.mock-debug.getProgramName\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Problem Visibility in settings.json\nDESCRIPTION: This JSON setting controls the visibility of Problem decorations throughout the VS Code workbench (excluding the Problems view itself). It is enabled by default (`true`), but can be set to `false` in `settings.json` to hide these decorations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nproblems.visibility\n```\n\n----------------------------------------\n\nTITLE: Converting Lambda Expression to Anonymous Class in Java\nDESCRIPTION: Illustrates converting a lambda expression to an anonymous class creation using the 'Convert to anonymous class creation' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  Runnable runnable = () -> {\n    // do something\n  };\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  Runnable runnable = new Runnable() {\n    @Override\n    public void run() {\n      // do something\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Single Panel Management with Column Reveal\nDESCRIPTION: Implements a singleton pattern for webview panels, maintaining only one instance and revealing it in the appropriate column when requested.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(context: vscode.ExtensionContext) {\n  // Track the current panel with a webview\n  let currentPanel: vscode.WebviewPanel | undefined = undefined;\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const columnToShowIn = vscode.window.activeTextEditor\n        ? vscode.window.activeTextEditor.viewColumn\n        : undefined;\n\n      if (currentPanel) {\n        // If we already have a panel, show it in the target column\n        currentPanel.reveal(columnToShowIn);\n      } else {\n        // Otherwise, create a new panel\n        currentPanel = vscode.window.createWebviewPanel(\n          'catCoding',\n          'Cat Coding',\n          columnToShowIn || vscode.ViewColumn.One,\n          {}\n        );\n        currentPanel.webview.html = getWebviewContent('Coding Cat');\n\n        // Reset when the current panel is closed\n        currentPanel.onDidDispose(\n          () => {\n            currentPanel = undefined;\n          },\n          null,\n          context.subscriptions\n        );\n      }\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Auto Test Discovery Pattern in VS Code Settings\nDESCRIPTION: The `python.testing.autoTestDiscoverOnSavePattern` setting allows users to specify a glob pattern that determines which files trigger automatic test discovery when saved. This helps refine the test discovery process, especially in large workspaces. The default pattern targets all Python files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nsetting(python.testing.autoTestDiscoverOnSavePattern)\n```\n\n----------------------------------------\n\nTITLE: Checking Linux Kernel and Node.js Version in WSL 2 Container\nDESCRIPTION: These commands verify that the development environment is running in a Linux context (WSL 2) and confirm the installed version of Node.js in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/01/containers-wsl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuname\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Editor Settings in JSON\nDESCRIPTION: Shows how to configure editor settings for multiple programming languages (JavaScript and TypeScript) together in the VS Code settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[javascript][typescript]\": {\n  \"editor.maxTokenizationLineLength\": 2500\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Remote Execution Context in Extensions\nDESCRIPTION: Extensions can check the execution context to determine if they are running remotely, allowing for proper setup of binaries or other environment-specific configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nif (context.executionContext === vscode.ExtensionExecutionContext.Remote) {\n  // Set up for remote execution\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ES6 imports with allowSyntheticDefaultImports\nDESCRIPTION: This JSON configuration for jsconfig.json enables ES6 style imports when type declarations don't use ES6 style exports. It sets the TypeScript compiler option 'allowSyntheticDefaultImports' to true, allowing synthetic default members.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\",\n        // This is the line you want to add\n        \"allowSyntheticDefaultImports\": true\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/node_modules/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Focus After Run\nDESCRIPTION: Setting to specify focus behavior after running selected text in terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.focusAfterRun\": \"accessible-buffer\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Configuration Provider in c_cpp_properties.json - JSON\nDESCRIPTION: This snippet demonstrates how to specify a custom IntelliSense configuration provider, such as CMake Tools, by setting the 'configurationProvider' field in a 'c_cpp_properties.json' file within a VS Code workspace for C/C++ projects. The extension identifier ('ms-vscode.cmake-tools') must match the required provider. This facilitates better and more accurate IntelliSense configuration. Dependencies include the referenced provider extension installed in VS Code. The 'configurations' array defines environment-specific settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"configurationProvider\": \"ms-vscode.cmake-tools\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Spaces in Shell Commands for VS Code Tasks\nDESCRIPTION: These snippets show different ways to handle spaces in shell commands for VS Code tasks. They demonstrate quoting and escaping techniques for commands and arguments containing spaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"dir\",\n  \"type\": \"shell\",\n  \"command\": \"dir 'folder with spaces'\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"dir\",\n  \"type\": \"shell\",\n  \"command\": \"dir\",\n  \"args\": [\n    \"folder with spaces\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"dir\",\n  \"type\": \"shell\",\n  \"command\": \"dir\",\n  \"args\": [\n    {\n      \"value\": \"folder with spaces\",\n      \"quoting\": \"escape\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Java Formatter Profile in VS Code Settings\nDESCRIPTION: This JSON snippet demonstrates how to specify a particular profile name for the Java formatter in VS Code settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-linting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"java.format.settings.profile\": \"GoogleStyle\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet Placeholder Transformation in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a snippet with placeholder transformations that replace 'Hello' with 'Hallo' and 'World' with 'Welt' when switching between placeholders in a code snippet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"HelloWorld\": {\n  \"prefix\": \"say_hello\",\n  \"body\": \"${1} ${2} -> ${1/Hello/Hallo/} ${2/World/Welt/}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Unused Code Fading in TypeScript - JSON\nDESCRIPTION: This snippet demonstrates how to disable the faded display of unused code specifically for TypeScript and TypeScript React files in Visual Studio Code. It utilizes editor language-specific settings, where the key 'editor.showUnused' is set to false to prevent highlighting of unused code in those file types. These settings should be placed within the VS Code 'settings.json' file, and each block applies only to files of the specified language. No additional dependencies are necessary beyond Visual Studio Code itself.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-refactoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"[typescript]\\\": {\\n    \\\"editor.showUnused\\\":  false\\n},\\n\\\"[typescriptreact]\\\": {\\n    \\\"editor.showUnused\\\":  false\\n},\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django in Virtual Environment (Python)\nDESCRIPTION: This command installs the Django framework into the activated Python virtual environment using pip. This makes the Django library available for the current project without affecting the global Python installation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install django\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub CLI Feature to devcontainer.json\nDESCRIPTION: Shows how to reference a Dev Container Feature in the devcontainer.json file. This example adds the GitHub CLI Feature with the latest version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/github-cli:1\": {\n        \"version\": \"latest\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Snippets Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet shows how to contribute language-specific code snippets using the `contributes.snippets` property in `package.json`. It specifies the target language identifier (`go`) and the relative path to the JSON file containing the snippet definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"snippets\": [\n      {\n        \"language\": \"go\",\n        \"path\": \"./snippets/go.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dev Container Images with Multiple Tags\nDESCRIPTION: This command demonstrates how to use the dev container CLI to build a container image and tag it with multiple names. It's useful for tagging images with different registry names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_70.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevcontainer build --workspace-folder ./ --image-name alpine3 --image-name alpine3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Actions on Save for JavaScript Files\nDESCRIPTION: JSON configuration to enable automatic organization of imports when saving JavaScript and TypeScript files through the editor.codeActionsOnSave setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeActionsOnSave\": {\n     \"source.organizeImports\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Docker Compose with Multiple Files - Bash\nDESCRIPTION: This bash command launches Docker Compose using both the original and override Compose files, enabling the extensions and modifications defined in the override for a development environment. The '-f' flag is used to specify each Compose file, and 'up' brings all defined services up. Ensure your working directory and file paths match your filesystem and Compose file locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml -f .devcontainer/docker-compose.extend.yml up\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Title Menu Items in VSCode Extensions\nDESCRIPTION: JSON configuration for adding a command menu item to the editor title area. This example shows how to contribute a Markdown preview command that appears only when editing Markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"editor/title\": [\n        {\n          \"when\": \"resourceLangId == markdown\",\n          \"command\": \"markdown.showPreview\",\n          \"alt\": \"markdown.showPreviewToSide\",\n          \"group\": \"navigation\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Browse Database Location (c_cpp_properties.json Value)\nDESCRIPTION: Example path string value for the `browse.databaseFilename` property in `c_cpp_properties.json`. Uses the `${workspaceFolder}` variable to specify a path relative to the workspace root (`.vscode/browse.vc.db`) for storing the Tag Parser's symbol database.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n${workspaceFolder}/.vscode/browse.vc.db\n```\n\n----------------------------------------\n\nTITLE: Contributing Array of Strings Configuration in VS Code Extensions\nDESCRIPTION: JSON configuration to enable string array support in the Settings editor for VS Code extensions. This allows users to add and edit string arrays directly through the Settings UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Stop on Entry in launch.json\nDESCRIPTION: This configuration shows how to set the 'stopOnEntry' property differently for macOS. It uses the 'osx' property to override the global 'stopOnEntry' setting for macOS environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}/node_modules/gulp/bin/gulpfile.js\",\n            \"stopOnEntry\": true,\n            \"osx\": {\n                \"stopOnEntry\": false\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure VM with Automated Docker Setup using Azure CLI and Cloud-Init (Bash)\nDESCRIPTION: These Azure CLI commands first log the user in, then create an Azure resource group named `dev-server`, and finally provision an Ubuntu VM named `dev-server` within that group. The `--custom-data cloud-init.txt` flag applies the previously defined Cloud-Init configuration to install Docker automatically upon VM creation, and `--generate-ssh-keys` sets up SSH access. The user must replace `<location-here>` with a valid Azure region (e.g., `eastus`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/docker-options.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login\n\naz group create --name dev-server --location <location-here>\n\naz vm create \\\n  --resource-group dev-server \\\n  --name dev-server \\\n  --image Canonical:0001-com-ubuntu-server-impish:21_10-gen2:latest \\\n  --custom-data cloud-init.txt \\\n  --generate-ssh-keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Folder Structure for Workspace Trust in VS Code\nDESCRIPTION: Example folder structures for organizing repositories based on trust levels. One structure separates trusted and evaluation repos, while another groups repos by organization and purpose.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/workspace-trust.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── TrustedRepos - Clone trusted repositories under this parent folder\n└── ForEvaluation - Clone experimental or unfamiliar repositories under this parent folder\n```\n\nLANGUAGE: text\nCODE:\n```\n├── github/microsoft - Clone a specific organization's repositories under this parent folder\n├── github/{myforks} - Place your forked repositories under this parent folder\n└── local - Local un-published repositories\n```\n\n----------------------------------------\n\nTITLE: Configuring Referenced Libraries in VS Code\nDESCRIPTION: JSON configuration for managing library references in unmanaged Java projects, including include/exclude patterns and source attachments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-project.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"java.project.referencedLibraries\": [\n    \"library/**/*.jar\",\n    \"/home/username/lib/foo.jar\"\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"java.project.referencedLibraries\": {\n    \"include\": [\n        \"library/**/*.jar\",\n        \"/home/username/lib/foo.jar\"\n    ],\n    \"exclude\": [\n        \"library/sources/**\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"java.project.referencedLibraries\": {\n    \"include\": [\n        \"library/**/*.jar\",\n        \"/home/username/lib/foo.jar\"\n    ],\n    \"exclude\": [\n        \"library/sources/**\"\n    ],\n    \"sources\": {\n        \"library/bar.jar\": \"library/sources/bar-src.jar\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Compilation Task in VS Code (JSON)\nDESCRIPTION: Demonstrates how to configure a shell task in tasks.json that runs the TypeScript compiler on the active file by leveraging VS Code's variable substitution feature using the ${file} variable. Depends on TypeScript (tsc) being installed and available in PATH, and uses the $tsc problem matcher for error parsing. Input: triggering the task on a TypeScript file; Output: compilation via tsc with diagnostic messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"TypeScript compile\",\n    \"type\": \"shell\",\n    \"command\": \"tsc ${file}\",\n    \"problemMatcher\": [\n        \"$tsc\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Git Blame Editor Decoration Format in VS Code (JSON)\nDESCRIPTION: Configures the display format for the experimental Git blame information shown as an editor decoration in VS Code. This JSON setting for `settings.json` uses `git.blame.editorDecoration.template` with a template string containing variables like `${subject}`, `${authorName}`, and `${authorDateAgo}` to customize the text shown next to each line, displaying the commit subject, author's name, and relative author date.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git.blame.editorDecoration.template\": \"${subject}, ${authorName} (${authorDateAgo})\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context for Webview Elements (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to set context for specific areas of a webview using the `data-vscode-context` attribute. This allows for fine-grained control over which context menu items appear for different elements within the webview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"main\" data-vscode-context='{\"webviewSection\": \"main\", \"mouseCount\": 4}'>\n  <h1>Cat Coding</h1>\n\n  <textarea data-vscode-context='{\"webviewSection\": \"editor\", \"preventDefaultContextMenuItems\": true}'></textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Project Reference for xUnit Test Project using .NET CLI\nDESCRIPTION: Uses the .NET CLI command `dotnet add reference` to link an xUnit test project (specified by its `.csproj` file path) to the main project it intends to test (also specified by its `.csproj` file path). This allows the test project to access the code of the project under test. Requires the .NET SDK and paths to both `.csproj` files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Dev Container with Named Volume in devcontainer.json (JSON)\nDESCRIPTION: Defines a `devcontainer.json` configuration suitable for remote Docker hosts where local filesystem mounting is not feasible. It specifies the base image (`node`) or a Dockerfile, sets the container's workspace folder (`/workspace`), and uses the `workspaceMount` property with `type=volume` to mount a named Docker volume (`source=remote-workspace`) into the container at the target path (`/workspace`). This approach stores source code within a Docker volume managed by the remote Docker daemon.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"node\", // Or \"dockerFile\"\n    \"workspaceFolder\": \"/workspace\",\n    \"workspaceMount\": \"source=remote-workspace,target=/workspace,type=volume\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Preview Styles in package.json\nDESCRIPTION: Demonstrates how to use the markdown.previewStyles contribution point in an extension's package.json to register custom CSS stylesheets for the Markdown preview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/markdown-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"markdown.previewStyles\": [\n        \"./style.css\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Flask App Docker-Run Task (VS Code, JSON)\nDESCRIPTION: This JSON snippet sets up a VS Code task to run a Flask application within a Docker container. It includes a 'dockerRun' property that sets the 'FLASK_APP' environment variable, and a 'python' object specifying module arguments to launch Flask with specific debugging and reload options, binding to host 0.0.0.0 on port 5000. The snippet requires a prior 'docker-build' task, Flask installed in the container image, and references to the Flask entry point. The task enables debugging and hot reload features as controlled by the passed arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"docker-run\\\",\\n    \\\"label\\\": \\\"docker-run: debug\\\",\\n    \\\"dependsOn\\\": [\\n      \\\"docker-build\\\"\\n    ],\\n    \\\"dockerRun\\\": {\\n      \\\"env\\\": {\\n        \\\"FLASK_APP\\\": \\\"path_to/flask_entry_point.py\\\"\\n      }\\n    },\\n    \\\"python\\\": {\\n      \\\"args\\\": [\\n        \\\"run\\\",\\n        \\\"--no-debugger\\\",\\n        \\\"--no-reload\\\",\\n        \\\"--host\\\", \\\"0.0.0.0\\\",\\n        \\\"--port\\\", \\\"5000\\\"\\n      ],\\n      \\\"module\\\": \\\"flask\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Workbench Colors in VS Code Settings\nDESCRIPTION: This snippet demonstrates how to customize workbench colors in VS Code by modifying the workbench.colorCustomizations setting. The example changes the background color of the title bar to red.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/color-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"titleBar.activeBackground\": \"#ff0000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Model Prompt with LanguageModelChatMessage in TypeScript\nDESCRIPTION: This code demonstrates how to create a language model prompt using the LanguageModelChatMessage class. It defines a crafted prompt with two user messages: the first establishing context (a cat persona that explains CS concepts) and the second containing the user's specific request.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst craftedPrompt = [\n    vscode.LanguageModelChatMessage.User('You are a cat! Think carefully and step by step like a cat would. Your job is to explain computer science concepts in the funny manner of a cat, using cat metaphors. Always start your response by stating what concept you are explaining. Always include code samples.'),\n    vscode.LanguageModelChatMessage.User('I want to understand recursion')\n];\n```\n\n----------------------------------------\n\nTITLE: Selecting Next Code Action in VS Code Keybindings (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to customize keyboard shortcuts for navigating through the new Code Action list in Visual Studio Code. It shows the command for selecting the next Code Action in the list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselectNextCodeAction\n```\n\n----------------------------------------\n\nTITLE: Opening External URLs using VS Code API (TypeScript)\nDESCRIPTION: Example usage of the `vscode.env.openExternal` API to open a GitHub issue URL in the default browser. This API is intended to replace external modules like `opn` or `open` and accepts a `vscode.Uri` object, handling various URI schemes (http, https, mailto, file).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n// open default browser\nawait vscode.env.openExternal(vscode.Uri.parse(\"https://github.com/microsoft/vscode/issues/66741\"));\n```\n\n----------------------------------------\n\nTITLE: Mounting Local Source Code in Docker Compose\nDESCRIPTION: YAML configuration for binding the local project directory to a path inside the container using Docker Compose volumes. This enables editing code locally while running it in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  # Mounts the project folder to '/workspace'. The target path inside the container\n  # should match what your application expects. In this case, the compose file is\n  # in a sub-folder, so you will mount '..'. You would then reference this path as the\n  # 'workspaceFolder' in '.devcontainer/devcontainer.json' so VS Code starts here.\n  - ..:/workspace:cached\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme-Specific Color Customizations in VS Code\nDESCRIPTION: JSON configuration for customizing colors for a specific theme (Monokai) in VS Code. Shows how to customize both token colors and workbench colors for a particular theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"editor.tokenColorCustomizations\": {\n        \"[Monokai]\": {\n            \"comments\": \"#229977\"\n        }\n    },\n    \"workbench.colorCustomizations\": {\n        \"[Monokai]\": {\n            \"sideBar.background\": \"#347890\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Brace Formatting in JavaScript/TypeScript - JSON/JavaScript\nDESCRIPTION: Demonstrates the result of changing the empty brace formatting setting in JavaScript/TypeScript formatting configuration. The included snippet shows a simple class definition and its method before and after applying the relevant formatting setting. No third-party dependencies are required. The key configuration parameter is 'javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces', which toggles spacing between empty braces; output changes based on its value.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_51.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Foo {\n    doFoo() { }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nclass Foo {\n    doFoo() {} // Notice that the space has been removed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Paths in package.json\nDESCRIPTION: Example configuration in package.json that specifies paths to HTML and CSS custom data files. This setup enables VS Code to provide enhanced language support for custom HTML and CSS entities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/custom-data-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"html\": {\n      \"customData\": [\"./html.html-data.json\"]\n    },\n    \"css\": {\n      \"customData\": [\"./css.css-data.json\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inlining Method in Java Area Calculation\nDESCRIPTION: Demonstration of the inline method refactoring, where calls to a getArea method are replaced with the direct calculation expression, eliminating the need for the separate method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  int height = 1;\n  int width = 2;\n  int area = getArea(height, width);\n}\n\nprivate int getArea(int height, int width) {\n  return height * width;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  int height = 1;\n  int width = 2;\n  int area = height * width;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Glob Pattern Syntax in Visual Studio Code\nDESCRIPTION: This code snippet illustrates various glob pattern syntax elements supported by VS Code, including path separators, wildcards, character ranges, and grouping.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/glob-patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/ to separate path segments\n* to match zero or more characters in a path segment\n? to match on one character in a path segment\n** to match any number of path segments, including none\n{} to group conditions (for example {**/*.html,**/*.txt} matches all HTML and text files)\n[] to **declare** a range of characters to match (example.[0-9] to match on example.0, example.1, …)\n[!...] to negate a range of characters to match (example.[!0-9] to match on example.a, example.b, but not example.0)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Null Check Bypass with Array Access in TypeScript\nDESCRIPTION: This TypeScript snippet shows how accessing out-of-bounds array elements can bypass strict null checking, potentially causing runtime errors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// strictNullCheck: true\n\nfunction double(x: number): number { return x * 2; }\n\nconst arr = [1, 2, 3]\n\ndouble(arr[5]); // not an error\n```\n\n----------------------------------------\n\nTITLE: Creating Localized Strings using the VS Code Localization API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the previous approach for creating a localized string in VS Code extensions using the 'localize' function, where the result is wrapped in an object pairing 'value' and 'original'. It requires the 'vscode-nls' or equivalent localization library as a dependency. The key parameter is the identifier ('id') and the original string in English. The output is an object with localized and original message, primarily used for showing both in the VS Code UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst str = { value: localize('id', \"Hello World\"), original: \"Hello World\" };\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Rename Symbol\nDESCRIPTION: Represents the keyboard shortcut command `editor.action.rename` used in VS Code. This command invokes the Rename Symbol refactoring action, which leverages rust-analyzer's semantic understanding for smart renaming of symbols (like variables or functions) across Rust files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.rename)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Provider in TypeScript\nDESCRIPTION: Direct implementation of a hover provider in TypeScript, including provider registration and hover information generation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoHoverProvider implements HoverProvider {\n    public provideHover(\n        document: TextDocument, position: Position, token: CancellationToken):\n        Thenable<Hover> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerHoverProvider(\n            GO_MODE, new GoHoverProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Django Admin URL Route Configuration in Python\nDESCRIPTION: Configures the URL route for Django's built-in administrative interface in the project-level urls.py file. This enables access to the admin panel through the /admin endpoint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# This path is included by default when creating the app\n path(\"admin/\", admin.site.urls),\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Loading Options in launch.json (JSON)\nDESCRIPTION: Provides a detailed JSON example for the `symbolOptions` property in `launch.json`. It configures symbol search paths (local directories and servers), enables searching the Microsoft Symbol Server (`searchMicrosoftSymbolServer: true`), sets a symbol cache path (`cachePath`), and defines a module filter (`moduleFilter`) to exclude specific modules (`DoNotLookForThisOne*.dll`) using the `loadAllButExcluded` mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    \"symbolOptions\": {\n        \"searchPaths\": [\n            \"C:\\\\src\\\\MyOtherProject\\\\bin\\\\debug\",\n            \"https://my-companies-symbols-server\"\n        ],\n        \"searchMicrosoftSymbolServer\": true,\n        \"cachePath\": \"%TEMP%\\\\symcache\",\n        \"moduleFilter\": {\n            \"mode\": \"loadAllButExcluded\",\n            \"excludedModules\": [ \"DoNotLookForThisOne*.dll\" ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Activation Events for VS Code Extension\nDESCRIPTION: A note about declaring activation events in package.json for compatibility with VS Code versions prior to 1.74.0. This section shows an empty activationEvents array, as newer versions use package.json's activationEvents property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": []\n```\n\n----------------------------------------\n\nTITLE: Problem Matcher Background Configuration\nDESCRIPTION: JSON configuration for TypeScript problem matcher background property, defining patterns for detecting task state changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"background\": {\n    \"activeOnStart\": true,\n    \"beginsPattern\": \"^\\\\s*\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}(?: AM| PM)? - File change detected\\\\. Starting incremental compilation\\\\.\\\\.\\\\.\",\n    \"endsPattern\": \"^\\\\s*\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}(?: AM| PM)? - Compilation complete\\\\. Watching for file changes\\\\.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Extension Context Menu Command Handler - VS Code API - TypeScript\nDESCRIPTION: Shows how to register a command handler for an extension context menu item in the Extensions view using the VS Code API in TypeScript. The handler receives the extension ID as an argument and displays it via an information message. This implementation is intended for use with a corresponding command contribution in 'package.json'. Dependencies include 'vscode' and compatible extension activation lifecycle.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.commands.registerCommand('extension.helloWorld', (extensionId) => {\n    vscode.window.showInformationMessage(extensionId);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tasks for Integrated Terminal\nDESCRIPTION: JSON configuration to enable task execution inside VS Code's Integrated Terminal. Setting the runner property to 'terminal' enables integrated terminal execution, while 'process' uses the default process runner.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"version\": \"0.1.0\",\n  \"runner\": \"terminal\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Defaults Override in package.json\nDESCRIPTION: Example of overriding the default behavior of a VS Code setting through the configurationDefaults contribution point in package.json. This example changes the default autoSave behavior to trigger on focus change.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"configurationDefaults\": {\n      \"files.autoSave\": \"onFocusChange\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Paste Behavior for Updating Imports in VS Code (JSON)\nDESCRIPTION: Configures VS Code to prioritize updating imports when pasting JavaScript or TypeScript code across files. This JSON snippet for `settings.json` sets `editor.pasteAs.preferences` to `[\"text.updateImports\"]`, making VS Code attempt to automatically add necessary imports. If this operation isn't possible, it falls back to pasting plain text.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"editor.pasteAs.preferences\": [\n    \"text.updateImports\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Sponsorship in package.json\nDESCRIPTION: Shows how to add sponsorship information to an extension's package.json to enable the Sponsor button feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"sponsor\": {\n    \"url\": \"https://github.com/sponsors/nvaccess\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Collection Description\nDESCRIPTION: Example of using the new EnvironmentVariableCollection.description API to provide context for environment changes in the terminal\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ncontext.environmentVariableCollection.description = 'An explanation of what the environment changes do';\n```\n\n----------------------------------------\n\nTITLE: Installing Resource Monitor Extension in VS Code settings.json\nDESCRIPTION: This snippet shows how to configure VS Code to automatically install the Resource Monitor extension in development containers. It adds the extension to the 'dev.containers.defaultExtensions' setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dev.containers.defaultExtensions\": [\n    \"mutantdino.resourcemonitor\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Notebook Contribution in package.json\nDESCRIPTION: JSON configuration for contributing a custom notebook type to VS Code. This configuration registers the 'echobook' notebook type for files with the '.echobook' extension, which works with the accompanying notebook serializer and controller implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"notebooks\": [{\n      \"type\": \"echobook\",\n      \"displayName\": \"Echobook\",\n      \"selector\": [{\n        \"filenamePattern\": \"*.echobook\"\n      }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings References\nDESCRIPTION: Configuration settings referenced in the accessibility section for signals and voice features\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"setting(accessibility.signals.save)\"\n\"setting(accessibility.signals.lineHasFoldedArea)\"\n\"setting(accessibility.signals.terminalQuickFix)\"\n\"setting(accessibility.signals.lineHasInlineSuggestion)\"\n\"setting(accessibility.voice.ignoreCodeBlocks)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Debug for Node.js in launch.json\nDESCRIPTION: Basic launch configuration for debugging a Node.js application running in a Docker container. Requires docker-run task to be defined in tasks.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-common.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Docker Node.js Launch\",\n            \"type\": \"docker\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"docker-run: debug\",\n            \"platform\": \"node\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Allowing GDB Process Attachment on Linux (Shell)\nDESCRIPTION: This shell command is used on Linux systems to temporarily disable the ptrace scope restriction, which often prevents GDB from attaching to running processes without root privileges, resulting in a 'ptrace: Operation not permitted' error. It uses `sudo tee` to write '0' to the kernel parameter file `/proc/sys/kernel/yama/ptrace_scope`, allowing any process owned by the user to be traced. This setting resets on reboot.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-debug.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n```\n\n----------------------------------------\n\nTITLE: Example Output of Running Flask Development Server in Bash\nDESCRIPTION: Shows the typical output displayed in the terminal when starting the Flask development server via `python -m flask run`. It indicates the environment (with a warning about using the development server in production), the debug mode status (off by default), and the local URL (`http://127.0.0.1:5000/`) where the application is accessible.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(.venv) D:\\py\\\\hello_flask>python -m flask run\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Creating Multilanguage Comment Snippets in JSON\nDESCRIPTION: JSON snippet configuration that demonstrates the use of new comment variables BLOCK_COMMENT_START and BLOCK_COMMENT_END to create language-specific comments. The snippet adapts between JavaScript and HTML files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hello\": {\n        \"scope\": \"javascript,html\",\n        \"prefix\": \"hello\",\n        \"body\": \"$BLOCK_COMMENT_START Hello World $BLOCK_COMMENT_END\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the iconTheme contribution point in package.json for VS Code extensions\nDESCRIPTION: Configuration for package.json that defines an iconTheme contribution. This snippet shows how to register a file icon theme in a VS Code extension by specifying an id, display label, and path to the theme definition file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/file-icon-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"iconThemes\": [\n      {\n        \"id\": \"turtles\",\n        \"label\": \"Turtles\",\n        \"path\": \"./fileicons/turtles-icon-theme.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PieceTable and Node Classes for Piece Tree in TypeScript\nDESCRIPTION: This snippet defines the basic structure for a piece tree implementation, including the PieceTable and Node classes. It introduces metadata for efficient line and offset lookups using a balanced binary tree approach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass PieceTable {\n    buffers: string[];\n    rootNode: Node;\n}\n\nclass Node {\n    bufferIndex: number;\n    start: number;\n    length: number;\n    lineStarts: number[];\n\n    left_subtree_length: number;\n    left_subtree_lfcnt: number;\n    left: Node;\n    right: Node;\n    parent: Node;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML File Associations for PowerShell Types and Format Files\nDESCRIPTION: JSON configuration for enabling IntelliSense features in PowerShell .ps1xml files using the XML extension by Red Hat. This setup enables syntax validation, schema validation, and other advanced editing features for Types.ps1xml and Format.ps1xml files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/powershell.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"xml.fileAssociations\": [\n  {\n    \"systemId\": \"https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Format.xsd\",\n    \"pattern\": \"**/*.Format.ps1xml\"\n  },\n  {\n    \"systemId\": \"https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Types.xsd\",\n    \"pattern\": \"**/*.Types.ps1xml\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell for VS Code Shell Integration (Manual)\nDESCRIPTION: This script manually enables VS Code shell integration for PowerShell (pwsh). It should be added to the user's PowerShell profile script (accessible via `$Profile`). The script checks if the environment variable `$env:TERM_PROGRAM` is equal to 'vscode' and, if true, executes (dots sources) the PowerShell-specific integration script located using `code --locate-shell-integration-path pwsh`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nif ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Titles to Quick Input Dialogs in TypeScript\nDESCRIPTION: Demonstrates the use of the optional `title` property within `QuickPickOptions` (for `showQuickPick`) and `InputBoxOptions` (for `showInputBox`). Setting this property displays a title bar on the respective quick input UI element.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.showQuickPick(['Option 1', 'Option 2'], {\n  title: 'My Quick Pick Title'\n});\n\nvscode.window.showInputBox({\n  title: 'My Input Box Title',\n  prompt: 'Enter value'\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript LogOutputChannel API Reference\nDESCRIPTION: TypeScript code showing the location of LogOutputChannel API definition in VS Code's type definitions, used for creating log output channels in extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// LogOutputChannel API Location\nsrc/vscode-dts/vscode.d.ts#L6474\n```\n\n----------------------------------------\n\nTITLE: Installing MinGW-w64 Toolchain (Non-UCRT) via pacman in MSYS2 (Bash)\nDESCRIPTION: This bash command is executed within an MSYS2 terminal on Windows versions prior to Windows 10 to install the MinGW-w64 development toolchain (compiler, debugger, etc.) without UCRT support. It utilizes the pacman package manager with the `-S --needed` flags to install `base-devel` and `mingw-w64-x86_64-toolchain` if they are not already present or up-to-date.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npacman -S --needed base-devel mingw-w64-x86_64-toolchain\n```\n\n----------------------------------------\n\nTITLE: Constructing Extension Resource URIs using vscode.Uri.joinPath in TypeScript\nDESCRIPTION: Demonstrates using the new `vscode.Uri.joinPath` utility function to create a URI for a resource ('file.png') located within the extension's installation directory. It uses the `context.extensionUri` provided by the VS Code API as the base URI. Subsequently, it shows how to read the content of the file at the constructed URI using `vscode.workspace.fs.readFile`. This utility simplifies creating URIs relative to the extension path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_45.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nconst fileUri = vscode.Uri.joinPath(context.extensionUri, './file.png');\nconst bytes = await vscode.workspace.fs.readFile(fileUri);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Code Generation Instructions in JSON\nDESCRIPTION: JSON configuration for setting up code generation instructions in GitHub Copilot. Allows defining custom instructions through direct text input or external file references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"github.copilot.chat.experimental.codeGeneration.instructions\": [\n    {\n      \"text\": \"Always add a comment: 'Generated by Copilot'.\"\n    },\n    {\n      \"text\": \"In TypeScript always use underscore for private field names.\"\n    },\n    {\n      \"file\": \"code-style.md\" // import instructions from file `code-style.md`\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mapping for Django Hot Reloading in tasks.json\nDESCRIPTION: Configuration for tasks.json to enable hot reloading in a Django application by mapping the local workspace folder to the /app directory in the container through volume mounting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"docker-run\",\n  \"label\": \"docker-run: debug\",\n  \"dependsOn\": [\n    \"docker-build\"\n  ],\n  \"dockerRun\": {\n    \"volumes\": [\n      {\n        \"containerPath\": \"/app\", \"localPath\": \"${workspaceFolder}\"\n      }\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Profile Template Settings in VS Code (JSON)\nDESCRIPTION: This JSON snippet defines specific VS Code settings for the Python Profile Template. It enables automatic import completions, configures fixing all unused imports as a source action, and sets 'charliermarsh.ruff' as the default editor formatter for Python files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n    \"python.analysis.autoImportCompletions\": true,\n    \"python.analysis.fixAll\": [\"source.unusedImports\"],\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\"\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Global Task Properties with Presentation Scope (JSON)\nDESCRIPTION: Illustrates the use of a global presentation property in tasks.json, specifying that all tasks run in a new terminal panel by default. Also defines a shell task to compile TypeScript, inheriting the global property unless overridden locally. Dependencies include knowledge of tasks.json schema and working TypeScript setup. Input: execution of a listed or any task; Output: task output appears in a new panel as specified globally.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"presentation\": {\n        \"panel\": \"new\"\n    },\n    \"tasks\": [\n        {\n            \"label\": \"TS - Compile current file\",\n            \"type\": \"shell\",\n            \"command\": \"tsc ${file}\",\n            \"problemMatcher\": [\n                \"$tsc\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Import Expressions in TypeScript 2.4\nDESCRIPTION: Example of using the ECMAScript dynamic import expression in TypeScript 2.4.1 for lazily loading modules. The function asynchronously imports a zip utility module and uses it to process file content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function getZipFile(name: string, files: File[]): Promise<File> {\n    const zipUtil = await import('./utils/create-zip-file');\n    const zipContents = await zipUtil.getContentAsBlob(files);\n    return new File(zipContents, name);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Snippet Variables in VS Code (JSON)\nDESCRIPTION: This snippet demonstrates how to define a custom snippet in Visual Studio Code for the JavaScript language using JSON. It shows usage of the built-in snippet variables ${UUID} for generating a unique identifier and ${RELATIVE_FILEPATH} for injecting the current file path. Required dependency is Visual Studio Code with support for user-defined snippets. The snippet expects no inputs; upon typing the prefix 'newVars' in a JavaScript file, it inserts a let declaration with concatenated relative file path and UUID. The output is a line of code with example usage of snippet variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"javascript\",\n  \"prefix\": \"newVars\",\n  \"body\": \"let someId = '${RELATIVE_FILEPATH}/${UUID}'$0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Environment Variables in VS Code Settings\nDESCRIPTION: Example showing how to unset environment variables for the Integrated Terminal by setting them to null in VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"terminal.integrated.env.linux\": {\n    \"HOME\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Django View Implementation\nDESCRIPTION: View function using render to combine template with context data\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef hello_there(request, name):\n    print(request.build_absolute_uri()) #optional\n    return render(\n        request,\n        'hello/hello_there.html',\n        {\n            'name': name,\n            'date': datetime.now()\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Features in devcontainer.json - JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify custom container features in a devcontainer setup using the new GitHub repository syntax. It requires a VS Code Remote-Containers extension and Docker support on the target SSH host. The 'features' property allows referencing features by their repository and feature name, and supports passing parameters like 'greeting'. Inputs are expected to follow the 'owner/repository/feature' triplet. Output is an enhanced devcontainer.json supporting custom container features via GitHub releases.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_63.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/base:bionic\",\\n    \"features\": {\\n        \"codspace/myfeatures/helloworld\": {\\n            \"greeting\": \"hey\"\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gopls for Gofumpt-Style Formatting in VS Code (JSON)\nDESCRIPTION: This JSON configuration instructs gopls to use gofumpt-style formatting by setting 'formatting.gofumpt' to true within the gopls object. Gopls and gofumpt must be installed for this to function. This setting results in a stricter, opinionated formatting style for Go files. Add the snippet to your settings.json to globally enable gofumpt-style formatting for Go projects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/go.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gopls\": {\n    \"formatting.gofumpt\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers with Custom Format using Docker CLI\nDESCRIPTION: This bash command lists all development containers managed by VS Code, displaying their ID, status, image, quality label, and local folder. It uses docker ps with custom filters and formatting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -a --filter=\"label=vsch.quality\" --format \"table \\{{.ID}}\\t\\{{.Status}}\\t\\{{.Image}}\\tvscode-\\{{.Label \\\"vsch.quality\\\"}}\\t\\{{.Label \\\"vsch.local.folder\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Link Options in Visual Studio Code Debug Settings\nDESCRIPTION: This snippet shows how to customize Source Link behavior by URL in the debug settings. It allows enabling or disabling Source Link for specific URLs using wildcards.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n    \"sourceLinkOptions\": {\n        \"https://raw.githubusercontent.com/*\": { \"enabled\": true },\n        \"*\": { \"enabled\": false }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring and Starting SSH Agent Service on Windows (PowerShell)\nDESCRIPTION: Sets the OpenSSH Authentication Agent service (`ssh-agent`) startup type to Automatic and starts the service on Windows using PowerShell with Administrator privileges. This ensures the SSH agent is running so `ssh-add` can be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Make sure you're running as an Administrator\nSet-Service ssh-agent -StartupType Automatic\nStart-Service ssh-agent\nGet-Service ssh-agent\n```\n\n----------------------------------------\n\nTITLE: Registering Completion Item Provider with Scheme Specification in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a completion item provider for TypeScript files, specifically for the 'file' scheme. It ensures that the provider is only active for local files and not for virtual resources.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreturn vscode.languages.registerCompletionItemProvider({ language: 'typescript', scheme: 'file' }, {\n  provideCompletionItems(document, position, token) {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Host Requirements in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to specify host requirements for Dev Containers in devcontainer.json. It allows setting minimum memory, storage, and CPU requirements for the Docker daemon's host machine, ensuring the development environment meets necessary specifications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_58.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n\n  \"hostRequirements\": {\n    \"memory\": \"10gb\",\n    \"storage\": \"20gb\",\n    \"cpus\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing NuGet Package via Command Palette in VS Code\nDESCRIPTION: VS Code command used via the Command Palette (`kb(workbench.action.showCommands)`) to remove an existing NuGet package dependency from a selected C# project. It prompts for project selection (if applicable) and then lists currently installed packages for removal selection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/package-management.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNuGet: Remove NuGet Package\n```\n\n----------------------------------------\n\nTITLE: Defining DefinitionLink Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for DefinitionLink, which allows definition providers to return additional metadata with definitions. It includes properties for the origin, URI, range, and selection range of the definition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DefinitionLink {\n   /**\n    * Span of the symbol being defined in the source file.\n    *\n    * Used as the underlined span for mouse definition hover. Defaults to the word range at\n    * the definition position.\n    */\n   origin?: Range;\n\n   /**\n    * The resource identifier of the definition.\n    */\n   uri: Uri;\n\n   /**\n    * The full range of the definition.\n    *\n    * For a class definition for example, this would be the entire body of the class definition.\n    */\n   range: Range;\n\n   /**\n    * The span of the symbol definition.\n    *\n    * For a class definition, this would be the class name itself in the class definition.\n    */\n   selectionRange?: Range;\n}\n```\n\n----------------------------------------\n\nTITLE: Django View Imports\nDESCRIPTION: Importing render function from Django shortcuts\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n```\n\n----------------------------------------\n\nTITLE: VS Code Clipboard API Implementation\nDESCRIPTION: Proposed API for accessing the clipboard in VS Code. It follows the browser Clipboard API pattern and provides methods for reading and writing text to the system clipboard.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Clipboard {\n  readText(): Thenable<string>;\n  writeText(value: string): Thenable<void>;\n}\nexport namespace env {\n  const clipboard: Clipboard;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Closing Shortcut for Windows/Linux in VS Code\nDESCRIPTION: Custom keyboard shortcut to close an entire editor group instead of a single editor on Windows/Linux. This binding overrides the default Ctrl+W behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+w\", \"command\": \"workbench.action.closeEditorsInGroup\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hello World Node.js Application\nDESCRIPTION: A basic Node.js script that defines a string variable and outputs it to the console, demonstrating VS Code's JavaScript language support and IntelliSense features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msg = 'Hello World';\nconsole.log(msg);\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Configuration in launch.json (JSON)\nDESCRIPTION: This JSON snippet defines a VS Code launch configuration named \"C/C++: cl.exe build and debug active file\" for debugging C++ applications compiled with MSVC. It specifies the executable path using variables (`${fileDirname}`, `${fileBasenameNoExtension}`), allows passing runtime arguments (`args`), sets the debugger type to `cppvsdbg`, configures whether to stop at the entry point (`stopAtEntry`), and links a pre-launch build task (`preLaunchTask`). This configuration is used when initiating debugging via the play button or F5.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"version\": \"0.2.0\",\n\"configurations\": [\n    {\n        \"name\": \"C/C++: cl.exe build and debug active file\",\n        \"type\": \"cppvsdbg\",\n        \"request\": \"launch\",\n        \"program\": \"${fileDirname}\\\\\\${fileBasenameNoExtension}.exe\",\n        \"args\": [],\n        \"stopAtEntry\": false,\n        \"cwd\": \"${workspaceFolder}\",\n        \"environment\": [],\n        \"externalConsole\": false,\n        \"preLaunchTask\": \"C/C++: cl.exe build active file\"\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Host Communication\nDESCRIPTION: JSON configuration for enabling extension host messaging in a notebook renderer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\"....\"],\n  \"contributes\": {\n    \"notebookRenderer\": [\n      {\n        \"id\": \"output-editor-renderer\",\n        \"displayName\": \"Output Editor Renderer\",\n        \"entrypoint\": \"./out/renderer.js\",\n        \"mimeTypes\": [...],\n        \"requiresMessaging\": \"optional\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Keybindings for Commands in VS Code Extensions (JSON)\nDESCRIPTION: Illustrates how to register a new keybinding for a specific command in a VS Code extension manifest. This allows the command (here, 'extension.sayHello') to be executed when the given key combinations are pressed, with support for platform-specific overrides (e.g., macOS versus Windows/Linux) and context-dependent activation via the 'when' clause. Key combinations must be valid and avoid conflicts for best user experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"keybindings\": [\n      {\n        \"command\": \"extension.sayHello\",\n        \"key\": \"ctrl+f1\",\n        \"mac\": \"cmd+f1\",\n        \"when\": \"editorTextFocus\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands to Open Settings with Specific Setting Focus in VS Code Extensions\nDESCRIPTION: This snippet demonstrates how to programmatically open the VS Code settings JSON file and reveal a specific setting. The example uses vscode.commands.executeCommand to open settings and highlight the editor.renderWhitespace configuration option using the revealSetting parameter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_81.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('workbench.action.openSettingsJson', { revealSetting: { key: 'editor.renderWhitespace' }});\n```\n\n----------------------------------------\n\nTITLE: Specifying Reusable Prompt Files in VS Code Copilot\nDESCRIPTION: Files ending with the `.prompt.md` extension are recognized by VS Code Copilot as reusable prompt files. These files can contain predefined prompts and context, support nested links, and offer enhanced editing features like autocompletion and validation. They can be configured using the `chat.promptFilesLocations` setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n.prompt.md\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Indication in VS Code Extension\nDESCRIPTION: Shows how to use the new progress API in VS Code extensions to display progress for long-running operations in the window or Source Control view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.withProgress({\n    location: vscode.ProgressLocation.Window,\n    title: 'My long running operation'\n}, async (progress) => {\n    // Progress is shown while this function runs.\n    // It can also return a promise which is then awaited\n    progress.report({ message: 'Doing this' });\n    await step1();\n\n    progress.report({ message: 'Doing that' });\n    await step2();\n})\n```\n\n----------------------------------------\n\nTITLE: Detecting Remote and Browser-based Execution Environments\nDESCRIPTION: Shows how to detect whether an extension is running remotely, in the Codespaces browser editor, or locally using vscode.env.uiKind, extension.extensionKind, and vscode.env.remoteName APIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n    // extensionKind returns ExtensionKind.UI when running locally, so use this to detect remote\n    const extension = vscode.extensions.getExtension('your.extensionId');\n    if (extension.extensionKind === vscode.ExtensionKind.Workspace) {\n        vscode.window.showInformationMessage('I am running remotely!');\n    }\n\n    // Codespaces browser-based editor will return UIKind.Web for uiKind\n    if (vscode.env.uiKind === vscode.UIKind.Web) {\n        vscode.window.showInformationMessage('I am running in the Codespaces browser editor!');\n    }\n\n    // VS Code will return undefined for remoteName if working with a local workspace\n    if (typeof(vscode.env.remoteName) === 'undefined') {\n        vscode.window.showInformationMessage('Not currently connected to a remote workspace.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Color Customization by Theme\nDESCRIPTION: Configuration for customizing syntax highlighting colors for specific themes or theme patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"editor.tokenColorCustomizations\": {\n    \"[Monokai]\": {\n        \"comments\": \"#229977\"\n    },\n    \"[*Dark*]\": {\n        \"variables\": \"#229977\"\n    },\n    \"[Abyss][Red]\": {\n        \"keywords\": \"#f00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Protocol for Forwarded Ports in VS Code Remote\nDESCRIPTION: This JSON snippet demonstrates how to set a protocol (HTTPS) for a forwarded port using the remote.portsAttributes setting. It also shows how to set a label and specify automatic forwarding behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_57.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.portsAttributes\": {\n  \"3000\": {\n    \"label\": \"Application\",\n    \"protocol\": \"https\",\n    \"onAutoForward\": \"openPreview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Diff Editor Settings in VS Code\nDESCRIPTION: JSON configuration for enabling the new experimental diff editor and its features in VS Code settings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"diffEditor.experimental.useVersion2\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Markdown Link Updates on Paste (JSON)\nDESCRIPTION: This JSON setting enables an experimental feature for Markdown editing in VS Code. Setting `\"markdown.experimental.updateLinksOnPaste\"` to `true` in `settings.json` automatically adjusts relative path links, reference links, and image/video paths when text is copied and pasted between Markdown files within the editor, preventing broken links.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"markdown.experimental.updateLinksOnPaste\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Participant in package.json\nDESCRIPTION: JSON configuration for registering a chat participant with specific attributes including ID, name, and description.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\":{\n    \"chatParticipants\": [\n    {\n        \"id\": \"chat-tutorial.code-tutor\",\n        \"fullName\": \"Code Tutor\",\n        \"name\": \"tutor\",\n        \"description\": \"What can I teach you?\",\n        \"isSticky\": true\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Variable Type Inlay Hints in TypeScript JSON Settings\nDESCRIPTION: This JSON setting enables or disables the display of inlay hints for variable types in TypeScript files within VS Code, specifically for variables declared without explicit type annotations. Set to `true` to enable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ntypescript.inlayHints.variableTypes.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Explorer Auto-Reveal Exclusions in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the explorer.autoRevealExclude setting in VS Code to prevent certain folders from being automatically revealed in the Explorer view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"explorer.autoRevealExclude\": {\n    \"**/node_modules\": true,\n    \"**/bower_components\": true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Git Stage Method for Multiple Resource States\nDESCRIPTION: This TypeScript method signature shows how Git implements staging multiple files, supporting multiple selection in the SCM view. It handles an array of resource states as its argument.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstage(...resourceStates: SourceControlResourceState[]): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Snippets with Multiple Prefixes in JSON\nDESCRIPTION: Example of how to create a project-level snippet with multiple prefixes in a .code-snippets file. The snippet uses an array of strings for the prefix property, allowing multiple ways to trigger the same snippet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"prefix\": [ \"header\", \"stub\", \"copyright\"],\n  \"body\": \"Copyright. Foo Corp 2028\",\n  \"description\": \"Adds copyright...\",\n  \"scope\": \"javascript,typescript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Remote Code to Local with rsync on Unix\nDESCRIPTION: Synchronizes a remote source code directory to a local folder using rsync over SSH. Excludes the .git directory for performance and to keep local Git state separate. The command preserves permissions, timestamps, symbolic links, and compresses the transfer. Requires rsync to be installed on both local and remote systems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nrsync -rlptzv --progress --delete --exclude=.git \"user@hostname:/remote/source/code/path\" .\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Refactoring Example\nDESCRIPTION: Example showing a function before and after using the inline variable refactoring feature to simplify the code by removing an unnecessary variable declaration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(a, b) {\n  const result = a + b;\n  return result\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code from APT Repository on Debian/Ubuntu\nDESCRIPTION: Installs `apt-transport-https` (often required for HTTPS repositories), updates the local package cache using `apt update`, and then installs the stable (`code`) or insiders (`code-insiders`) version of VS Code using `apt install`. Assumes the Microsoft APT repository has been previously added.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install code # or code-insiders\n```\n\n----------------------------------------\n\nTITLE: Qualifying Compound Debug Configurations by Folder - VS Code Workspace - JSON\nDESCRIPTION: Specifies a compound debug configuration referencing identically named launch configs from different folders within a multi-root workspace. Using the 'folder' and 'name' fields allows precise targeting of configurations where names collide. Requires VS Code's workspace support and properly named root folders ('Web Client', 'Desktop Client'). Keys are: 'folder' (name of the folder) and 'name' (configuration name).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"compounds\": [{\n      \"name\": \"Launch Server & Client\",\n      \"configurations\": [\n        \"Launch Server\",\n        {\n          \"folder\": \"Web Client\",\n          \"name\": \"Launch Client\"\n        },\n        {\n          \"folder\": \"Desktop Client\",\n          \"name\": \"Launch Client\"\n        }\n      ]\n  }]\n```\n\n----------------------------------------\n\nTITLE: Customizing Semantic Token Colors in VSCode Settings (TypeScript)\nDESCRIPTION: Example of how to customize semantic token colors in user settings to override the default theme rules. This snippet shows how to change the style of parameters and underline symbols from default libraries.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_45.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"editor.semanticTokenColorCustomizations\": {\n    \"enabled\": true, // enable semantic highlighting for all themes\n    \"rules\": {\n        // different color for all constants\n        \"property.readonly\": \"#35166d\",\n\n        // make all symbol declarations bold\n        \"*.declaration\": { \"bold\": true }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Environment Variables Configuration for Python in VS Code\nDESCRIPTION: Example production environment configuration file showing API endpoint and database connection variables. Contains commented documentation for production-specific settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# prod.env - production configuration\n\n# API endpoint\nMYPROJECT_APIENDPOINT=https://my.domain.com/api/\n\n# Variables for the database\nMYPROJECT_DBURL=https://my.domain.com/db/\nMYPROJECT_DBUSER=coreuser\nMYPROJECT_DBPASSWORD=kKKfa98*11@\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing a Task Programmatically using VS Code Task API (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates using the proposed VS Code Task API to define and execute a task programmatically. It creates a new `vscode.Task` instance representing a shell command (`echo 'Hello World'`) with a specific type, name, source extension, and execution details (`ShellExecution`). The task is then executed using `vscode.workspace.executeTask`. This API is proposed and requires opt-in (`enableProposedApi` in `package.json`) and the `vscode.proposed.d.ts` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet task = new vscode.Task(\n    {\n        type: \"myCustomTask\"\n    },\n    \"echo\",\n    \"myExtension\",\n    new vscode.ShellExecution('echo', ['Hello World'])\n);\nvscode.workspace.executeTask(task);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the New executeCommand Type Signature\nDESCRIPTION: An example showing how to properly type the return value of executeCommand when it can return undefined. This makes the code more type-safe by explicitly stating the possible return types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand<vscode.CallHierarchyItem | undefined>('vscode.prepareCallHierarchy', ...);\n```\n\n----------------------------------------\n\nTITLE: Enabling Reusable Prompts Feature in VS Code Settings\nDESCRIPTION: Specifies the VS Code setting `chat.promptFiles` used to enable the experimental reusable prompts feature. Setting it to `true` activates the feature using the default `.github/prompts` folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(chat.promptFiles)\n```\n\n----------------------------------------\n\nTITLE: Auto-Approving Agent Tools in VS Code Chat\nDESCRIPTION: This experimental VS Code setting automatically approves all tools requested by the Copilot agent mode, bypassing the manual confirmation prompt. Enabling this setting (`chat.tools.autoApprove:true`) increases efficiency but removes the opportunity to review potentially risky actions before execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(chat.tools.autoApprove:true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Header Link Completions\nDESCRIPTION: JSON configuration options for the markdown.suggest.paths.includeWorkspaceHeaderCompletions setting that controls when workspace header completions are shown in Markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"onDoubleHash\" // Show workspace header completions only after ##\n\"onSingleOrDoubleHash\" // Show completions after # or ##\n\"never\" // Never show workspace header completions\n```\n\n----------------------------------------\n\nTITLE: Undo/Redo Operation Sequence in VS Code Custom Editors\nDESCRIPTION: This snippet shows the sequence of undo and redo operations as they would be called by VS Code on custom editor edits. It demonstrates how VS Code maintains an internal stack of edits and calls the appropriate methods based on user actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/custom-editors.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nundo — c.undo()\nundo — b.undo()\nredo — b.redo()\nredo — c.redo()\nredo — no op, no more edits\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key Permissions (Bash)\nDESCRIPTION: Restricts permissions of your private SSH key so that only the file owner can access it, a security best practice required by OpenSSH. This command ensures no other users on the system can read your private key file. Update the path if using a nonstandard location for your key file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod 400 ~/.ssh/id_ed25519\n\n```\n\n----------------------------------------\n\nTITLE: Example Flask Server Log Entry for a GET Request\nDESCRIPTION: Illustrates a standard log entry generated by the Flask development server when it successfully handles an incoming HTTP GET request. This specific example shows a request made to the root path ('/') receiving a '200 OK' status code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 - - [11/Jul/2018 08:40:15] \"GET / HTTP/1.1\" 200 -\n```\n\n----------------------------------------\n\nTITLE: Using JSON Schema Draft-07 Conditional Validation with if/then/else Keywords\nDESCRIPTION: JSON Schema example showing the new conditional schema evaluation feature in JSON Schema Draft-07. This snippet demonstrates how to use the if, then, and else keywords to apply different validation rules based on a value's range.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_27.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"integer\",\n    \"minimum\": 1,\n    \"maximum\": 1000,\n    \"if\": { \"minimum\": 100 },\n    \"then\": { \"multipleOf\": 100 },\n    \"else\": {\n        \"if\": { \"minimum\": 10 },\n        \"then\": { \"multipleOf\": 10 }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Server Ready Pattern in Docker Debug Launch - VS Code Launch Configuration - JSON\nDESCRIPTION: This launch.json debug configuration for VS Code specifies a custom pattern ('Application has started on port (\\\\d+)') that matches the app-ready message for DockerServerReadyAction. A JavaScript-style regular expression with a capture group extracts the port, ensuring browser automation works even if non-default log phrases are emitted by the server. Required for non-standard logging frameworks. Used in .vscode/launch.json to automate browser open when container is ready.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Docker Node.js Launch\",\n            \"type\": \"docker\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"docker-run: debug\",\n            \"platform\": \"node\",\n            \"dockerServerReadyAction\": {\n                \"pattern\": \"Application has started on port (\\\\d+)\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Async Call Stacks in VS Code Node.js Debugging (JSON)\nDESCRIPTION: A launch configuration setting (`launch.json`) to disable the display of asynchronous call stacks in Node.js or Chrome debugging. This feature, which shows async frames leading to the current stack, is only supported with the 'inspector' protocol and is enabled by default. Setting `showAsyncStacks` to `false` disables it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"showAsyncStacks\": false\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental ES Modules in Node.js Debugger (launch.json)\nDESCRIPTION: JSON configuration snippet for `launch.json` showing how to enable Node.js's built-in experimental ECMAScript module support by passing the `--experimental-modules` flag via the `runtimeArgs` attribute. This method is applicable for Node.js versions v8.5.0 and later.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"runtimeArgs\": [\"--experimental-modules\"]\n```\n\n----------------------------------------\n\nTITLE: Registering a Chat Participant in package.json\nDESCRIPTION: This JSON snippet shows how to register a chat participant in the extension's package.json file. It defines the participant's ID, name, full name, description, and stickiness.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n        \"chatParticipants\": [\n            {\n                \"id\": \"chat-sample.cat\",\n                \"name\": \"cat\",\n                \"fullName\": \"Cat\",\n                \"description\": \"Meow! What can I teach you?\",\n                \"isSticky\": true\n            }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Git Credential Helper with WSL - Bash\nDESCRIPTION: This Bash command configures Git in WSL to use the same Git Credential Manager executable as Windows, allowing credentials entered or cached in Windows to be automatically available in WSL sessions. It references the Windows installation path, requiring that it is accessible from within WSL and that Git Credential Manager is installed correctly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n git config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing QuickPickItem Tooltips in TypeScript\nDESCRIPTION: Demonstrates how to add tooltips to QuickPickItems using the new tooltip property. Shows both plain text and markdown tooltip implementations with the vscode.window.showQuickPick API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait vscode.window.showQuickPick([\n   {\n      label: 'label',\n      tooltip: 'tooltip',\n   },\n   {\n      label: 'label2',\n      tooltip: new vscode.MarkdownString('tooltip2 [link](https://github.com)'),\n   }\n], {\n   placeHolder: 'placeholder'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Project with MySQL and Redis\nDESCRIPTION: Command to create a new Laravel project with MySQL and Redis containers using Sail. This single command sets up a complete development environment without manual installation of dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/03/08/the-tutorial-problem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://laravel.build/example-app?with=mysql,redis\" | bash\n```\n\n----------------------------------------\n\nTITLE: Accessing Telemetry Status via Extension API in TypeScript\nDESCRIPTION: Introduces the `isTelemetryEnabled` property and `onDidChangeTelemetryEnabled` event on the `vscode.env` object. `isTelemetryEnabled` provides a boolean indicating if telemetry is active, considering both user settings (`telemetry.telemetryLevel`) and the `--disable-telemetry` CLI flag. `onDidChangeTelemetryEnabled` fires when this status changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessing telemetry status\nconst telemetryEnabled = vscode.env.isTelemetryEnabled;\n\n// Listening for changes\nvscode.env.onDidChangeTelemetryEnabled(enabled => {\n  console.log(`Telemetry enabled status changed: ${enabled}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base Prompt for Chat Participant\nDESCRIPTION: TypeScript code defining the base prompt that guides the behavior of the code tutor chat participant.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst BASE_PROMPT = 'You are a helpful code tutor. Your job is to teach the user with simple descriptions and sample code of the concept. Respond with a guided overview of the concept in a series of messages. Do not give the user the answer directly, but guide them to find the answer themselves. If the user asks a non-programming question, politely decline to respond.';\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Node.js Attach with Restart (JSON)\nDESCRIPTION: This JSON snippet defines a VS Code launch configuration named \"Attach\". It's configured to attach (`\"request\": \"attach\"`) the Node.js debugger (`\"type\": \"node\"`) to a process listening on port 5858 (`\"port\": 5858`). The key feature is `\"restart\": true`, which instructs VS Code to automatically attempt re-attaching the debugger when the debug session ends, specifically designed for use with tools like `nodemon` that restart the Node.js process. An optional `timeout` attribute can be added to increase the re-attachment attempt duration (in milliseconds).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vFebruary.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"name\": \"Attach\",\n    \"type\": \"node\",\n    \"request\": \"attach\",\n    \"port\": 5858,\n    \"restart\": true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Stage Command in package.json\nDESCRIPTION: This JSON snippet shows how to define a menu contribution for the Git stage command. It uses context keys to conditionally show the command in the SCM resource context menu for Git repositories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"git.stage\",\n  \"when\": \"scmProvider == git && scmResourceGroup == merge\",\n  \"group\": \"inline\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Status from Build Task Group in tasks.json - JSON\nDESCRIPTION: This snippet shows how to remove the default designation from a build task group in tasks.json by replacing an object with a string value. This change affects which build task is used by default in VS Code when multiple tasks are defined, allowing users to explicitly manage the default behavior from the tasks.json file rather than via UI. Requires a previously defined tasks.json with a 'group' property; after this change, no build task is default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n    \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n    },\n```\n\nLANGUAGE: JSON\nCODE:\n```\n    \"group\": \"build\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View with Name Parameter\nDESCRIPTION: Defines a Django view function that handles the hello route, processes a name parameter with regex validation, and returns a formatted greeting with timestamp.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom django.utils.timezone import datetime\nfrom django.http import HttpResponse\n\ndef home(request):\n    return HttpResponse(\"Hello, Django!\")\n\ndef hello_there(request, name):\n    now = datetime.now()\n    formatted_now = now.strftime(\"%A, %d %B, %Y at %X\")\n\n    # Filter the name argument to letters only using regular expressions. URL arguments\n    # can contain arbitrary text, so we restrict to safe characters only.\n    match_object = re.match(\"[a-zA-Z]+\", name)\n\n    if match_object:\n        clean_name = match_object.group(0)\n    else:\n        clean_name = \"Friend\"\n\n    content = \"Hello there, \" + clean_name + \"! It's \" + formatted_now\n    return HttpResponse(content)\n```\n\n----------------------------------------\n\nTITLE: Using Command Input Variables in Debug Configurations\nDESCRIPTION: Demonstrates how to use the new 'command' type of input variable in debug configurations. This example uses a Mocha test picker command to allow users to select a test case at debug time.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"configurations\": [\n      {\n         \"type\": \"node\",\n         \"request\": \"launch\",\n         \"name\": \"Launch Test\",\n         \"program\": \"${workspaceFolder}/${input:pickTest}\"\n      }\n   ],\n   \"inputs\": [\n      {\n         \"id\": \"pickTest\",\n         \"type\": \"command\",\n         \"command\": \"extension.mochaSupport.testPicker\",\n         \"args\": {\n            \"testFolder\": \"${workspaceFolder}/tests\",\n         }\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: File Exclusion Settings\nDESCRIPTION: Settings to exclude files and folders from editor window and search results.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"search.exclude\": {\n    \"someFolder/\": true,\n    \"somefile\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Java Language Server\nDESCRIPTION: JSON configuration for VS Code settings to enable proxy support for the Java Language Server. This snippet sets the necessary VM arguments to use a corporate proxy for HTTP and HTTPS connections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"java.jdt.ls.vmargs\": \"-Dhttp.proxyHost=webproxy.corp.net -Dhttp.proxyPort=proxyport -Dhttp.proxyUser=user -Dhttp.proxyPassword=password -Dhttps.proxyHost=webproxy.corp.net -Dhttps.proxyPort=proxyport -Dhttps.proxyUser=user -Dhttps.proxyPassword=password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default VS Code Build Task for G++ in JSON\nDESCRIPTION: Illustrates the default `tasks.json` configuration automatically generated by the VS Code C/C++ extension. This task compiles the currently active C++ file using g++, enabling debugging symbols (`-g`), and outputs the executable to the same directory. It is set as the default build task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"version\": \"2.0.0\",\n\"tasks\": [\n    {\n        \"type\": \"shell\",\n        \"label\": \"C/C++: g++ build active file\",\n        \"command\": \"/usr/bin/g++\",\n        \"args\": [\n            \"-g\",\n            \"${file}\",\n            \"-o\",\n            \"${fileDirname}/${fileBasenameNoExtension}\"\n        ],\n        \"options\": {\n            \"cwd\": \"/usr/bin\"\n        },\n        \"problemMatcher\": [\n            \"$gcc\"\n        ],\n        \"group\": {\n            \"kind\": \"build\",\n            \"isDefault\": true\n        },\n        \"detail\": \"Task generated by Debugger.\"\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting VS Code CLI Using Bash\nDESCRIPTION: This Bash snippet demonstrates how to download the standalone VS Code CLI for Alpine Linux x64 using curl and then extract the downloaded tarball with tar. It is intended for use on remote machines without a UI, and eliminates the need for a full VS Code Desktop installation. The main parameters are the download URL, which points to the CLI tar.gz file, and the output file name. It requires curl and tar to be installed on the system. The expected input is a Bash shell and network connectivity; the output is the extracted VS Code CLI files in the current directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/tunnels.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz\n\ntar -xf vscode_cli.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Generating System.out.println() with Java Snippets in VS Code\nDESCRIPTION: Demonstrates the VS Code snippet expansion feature for Java. Typing `sout` or `sysout` and selecting the snippet generates the `System.out.println();` statement, commonly used for printing output to the console. This functionality is provided by the Java Language Support extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-editing.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println()\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental C# Hot Reload in VS Code Settings\nDESCRIPTION: This VS Code user setting (`settings.json`) must be set to `true` to enable the experimental Hot Reload feature for C# debugging when using the C# Dev Kit extension. This allows applying code changes during a debug session without restarting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncsharp.experimental.debug.hotReload\n```\n\n----------------------------------------\n\nTITLE: Defining SSH Server Port Ranges in settings.json - JSON\nDESCRIPTION: This JSON snippet lets users constrain the range of ports that the VS Code server may use when connecting via SSH. It belongs in settings.json and is supported by the Remote - SSH extension. Each hostname is mapped to a port range string ('start-end'). Inputs are hostname/range pairs, output is that connections will be attempted only within the specified port ranges, reducing conflicts and improving predictability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_63.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.serverPickPortsFromRange\": {\\n    \"work-main\": \"60000-61000\",\\n    \"work-test\": \"60000-61000\",\\n    \"localhost\": \"5000-6000\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Tasks with Simple Argument Quoting in VS Code\nDESCRIPTION: This JSON snippet demonstrates how to define a shell task in VS Code with separately specified command and arguments. The task runs the 'dir' command on a folder with spaces in its name, with automatic shell-appropriate quoting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"dir\",\n  \"type\": \"shell\",\n  \"command\": \"dir\",\n  \"args\": [\n    \"folder with spaces\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Code to Remote with rsync on Unix\nDESCRIPTION: Transfers local code (excluding the .git directory) to a remote machine using rsync over SSH, preserving permissions and compressing files. This reverse sync requires rsync on both ends and proper SSH authentication. Windows users must ensure consistent line endings prior to use.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrsync -rlptzv --progress --delete --exclude=.git . \"user@hostname:/remote/source/code/path\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Semantic Highlighting Configuration in package.json\nDESCRIPTION: This JSON snippet shows how a language extension can override the default semantic highlighting setting for a specific language. It configures semantic highlighting to be enabled by default for the extension's language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurationDefaults\": {\n    \"[languageId]\": {\n      \"editor.semanticHighlighting.enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Font Ligatures in VS Code Settings\nDESCRIPTION: This setting enables the rendering of programming ligatures in the VS Code editor if the selected font supports them (e.g., Fira Code, Hasklig). Ligatures provide compositions for common character sequences like '=>' or '!='. Requires setting `editor.fontLigatures` to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"editor.fontLigatures\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Add Missing Imports on Save - VS Code JSON\nDESCRIPTION: This JSON code snippet configures VS Code to automatically apply the 'Add all missing imports' source action whenever a file is saved. To use this, add the configuration under the editor.codeActionsOnSave setting in your settings.json file. This instructs VS Code to trigger the add missing imports action on file save for JavaScript/TypeScript files, streamlining the import management process. No additional dependencies are required beyond default VS Code (with TypeScript/JavaScript language features enabled). The configuration expects a list of code actions to apply.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeActionsOnSave\": [\n    \"source.addMissingImports\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Auto-Import Preference in VS Code\nDESCRIPTION: This setting controls whether auto-imports should default to using 'type' imports, which are fully erased at runtime. When set to true, auto-imports will use type-only imports.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"typescript.preferences.preferTypeOnlyAutoImports\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Workspace Support in VS Code Extension\nDESCRIPTION: Extensions can opt out of supporting virtual workspaces (where files don't exist physically on disk) by setting the 'virtualWorkspaces' capability to false in package.json. This prevents the extension from being activated in virtual workspace environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"virtualWorkspaces\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ctrl+Tab for Cross-Group Editor Navigation in VS Code\nDESCRIPTION: This JSON snippet shows how to configure Ctrl+Tab and Ctrl+Shift+Tab to navigate across all opened editors in all groups in VS Code. It overrides the default behavior of navigating only within the same editor group.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/editingevolved.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"key\": \"ctrl+tab\",\n        \"command\": \"workbench.action.quickOpenPreviousRecentlyUsedEditor\",\n        \"when\": \"!inEditorsPicker\"\n    },\n    {\n        \"key\": \"ctrl+shift+tab\",\n        \"command\": \"workbench.action.quickOpenLeastRecentlyUsedEditor\",\n        \"when\": \"!inEditorsPicker\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script to package.json for VS Code Extensions\nDESCRIPTION: This code diff demonstrates how to add a test script to the package.json file of a VS Code extension. It adds the 'test' command using the vscode-test CLI tool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-cool-extension\",\n  \"scripts\": {\n+   \"test\": \"vscode-test\"\n\n```\n\n----------------------------------------\n\nTITLE: MongoDB Playground Sample Query\nDESCRIPTION: Example of a MongoDB playground where developers can write and execute MongoDB queries with IntelliSense support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/mongodb.md#2025-04-23_snippet_1\n\nLANGUAGE: mongodb\nCODE:\n```\n// MongoDB Playground\nuse('dbname');\n\ndb.collection.find({\n    field: value\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Spring Profile Settings in JSON\nDESCRIPTION: VS Code settings JSON for the Java Spring profile template. It specifies the Red Hat Java extension as the default formatter for Java files and enables the Spring Boot rewrite reconciliation feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"[java]\": {\n        \"editor.defaultFormatter\": \"redhat.java\"\n    },\n    \"boot-java.rewrite.reconcile\": true\n```\n\n----------------------------------------\n\nTITLE: Opening Multiple Files via CLI - Bash\nDESCRIPTION: Example showing how to open multiple files in VS Code using the command line, including files in subdirectories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode index.html style.css documentation\\readme.md\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Resource Configuration in Multi-Root Workspace\nDESCRIPTION: TypeScript example demonstrating how to use the enhanced Configuration API to read and update resource-specific settings in Folder settings within a multi-root workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = vscode.window.activeTextEditor.document.uri;\nconst configuration = vscode.workspace.getConfiguration('mylint', uri);\n// Let value of `mylint.enable` is `false` in the settings of root folder containing `uri`.\nlet value = configuration.get('enable'); // value is `false`\nawait configuration.update('enable', !value, vscode.ConfigurationTarget.WorkspaceFolder)\nvalue = configuration.get('enable'); // value is `true`\n```\n\n----------------------------------------\n\nTITLE: Defining a User Authentication Schema Prompt - Markdown\nDESCRIPTION: This snippet defines a Markdown prompt file specifying the details of a database user authentication schema. The prompt includes both standard user fields and advanced features like social login IDs and magic link attributes. Intended for use with GitHub Copilot, it serves as a reusable schema descriptor for code generation tasks; it requires no dependencies aside from residing in the appropriate project folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n# User Authentication\\n\\nOur application will have `users` with the following information:\\n\\n- The standard user information, including: `name`, `email` (unique).\\n- A link for a \\\"magic\\\" login, which will be a `GUID` as well as the expiration date for the link.\\n- Social login account IDs for Microsoft, GitHub, and Google.\\n- The timestamp of the last login.\\n- The timestamp for when the user was created.\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Items for Tree Sticky Scroll in settings.json\nDESCRIPTION: This JSON setting allows customization of the maximum number of sticky elements displayed in tree view Sticky Scroll. It defaults to 7 and can be adjusted in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nworkbench.tree.stickyScrollMaxItemCount\n```\n\n----------------------------------------\n\nTITLE: Setting Webview Context via HTML Data Attributes (HTML)\nDESCRIPTION: This HTML snippet illustrates how to set specific contexts within a webview using the `data-vscode-context` attribute on HTML elements. The value is a JSON object defining context keys and values (e.g., `webviewSection`, `mouseCount`, `preventDefaultContextMenuItems`). These contexts are evaluated when a user right-clicks, influencing which contributed context menu items are shown. Contexts are inherited and can be overridden by child elements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"main\" data-vscode-context='{\"webviewSection\": \"main\", \"mouseCount\": 4}'>\n  <h1>Cat Coding</h1>\n\n  <textarea data-vscode-context='{\"webviewSection\": \"editor\", \"preventDefaultContextMenuItems\": true}'></textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Opening Issue Reporter using VS Code API\nDESCRIPTION: This API command opens the issue reporter in VS Code with optional prefilled data. It provides programmatic access to the issue reporting functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`vscode.openIssueReporter` - Open the issue reporter and optionally prefill part of the form.\n\n* _options_ - Data to use to prefill the issue reporter with.\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URL Patterns in Python\nDESCRIPTION: Python code for defining URL patterns in a Django application. The code adds routes for the about and contact pages with named URL patterns that match the references in the templates.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npath(\"about/\", views.about, name=\"about\"),\npath(\"contact/\", views.contact, name=\"contact\"),\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page View Using ListView in Django\nDESCRIPTION: Creates a HomeListView class that inherits from ListView to render the home page with a list of logged messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import ListView\n\nclass HomeListView(ListView):\n    \"\"\"Renders the home page, with a list of all messages.\"\"\"\n    model = LogMessage\n\n    def get_context_data(self, **kwargs):\n        context = super(HomeListView, self).get_context_data(**kwargs)\n        return context\n```\n\n----------------------------------------\n\nTITLE: Debug Variable Type Check Expression\nDESCRIPTION: A when clause expression to check if the debug configuration type is Java. Used to conditionally show debug context menu items for Java debugging sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"when\": \"debugConfigurationType == 'java'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Task Dependencies in VS Code\nDESCRIPTION: JSON task configuration demonstrating how to set up sequential task dependencies using dependsOrder and dependsOn properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"One\",\n    \"type\": \"shell\",\n    \"command\": \"echo Hello \",\n    \"dependsOrder\": \"sequence\",\n    \"dependsOn\":[\n        \"Two\",\n        \"Three\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task for Babel Transpilation\nDESCRIPTION: This JSON snippet provides a configuration for VS Code's `tasks.json` file. It defines a background task labeled \"watch\" that runs the Babel CLI to transpile JavaScript files from the `src` directory to the `lib` directory, enabling watch mode (`-w`) and source maps. It's set as the default build task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"watch\",\n            \"command\": \"${workspaceFolder}/node_modules/.bin/babel\",\n            \"args\": [\"src\", \"--out-dir\", \"lib\", \"-w\", \"--source-maps\"],\n            \"type\": \"shell\",\n            \"group\": { \"kind\": \"build\", \"isDefault\": true },\n            \"isBackground\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Expansion for Emmet\nDESCRIPTION: JSON setting to enable Tab key for expanding Emmet abbreviations while maintaining normal indentation functionality\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.triggerExpansionOnTab\": true\n```\n\n----------------------------------------\n\nTITLE: Adding and Pushing Git Remotes using Bash Commands - Bash\nDESCRIPTION: This snippet demonstrates how to add an origin remote to a local Git repository and push the local main branch to the origin using Bash commands. It assumes Git is installed and a local repository is initialized. Replace <repo owner> and <repo name> with the actual values for your target GitHub repository. The first command sets the remote URL, and the second command pushes the main branch, establishing the upstream relationship. Expected input is a valid repository URL. Output will display the results of the commands, including success or any errors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> git remote add origin https://github.com/<repo owner>/<repo name>.git\n> git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Associating Grammars and Snippets with a Language Identifier in VS Code Extension Manifest (JSON)\nDESCRIPTION: This `package.json` snippet illustrates how an extension contributes language-specific features like syntax highlighting (grammars) and code snippets. It associates a TextMate grammar file (`./syntaxes/Groovy.tmLanguage.json`) and a snippets file (`./snippets/groovy.json`) with the `groovy` language identifier using the `contributes.grammars` and `contributes.snippets` points respectively.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/identifiers.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"grammars\": [{\n    \"language\": \"groovy\",\n    \"scopeName\": \"source.groovy\",\n    \"path\": \"./syntaxes/Groovy.tmLanguage.json\"\n}],\n\"snippets\": [{\n    \"language\": \"groovy\",\n    \"path\": \"./snippets/groovy.json\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Devcontainer CLI Execution - Bash\nDESCRIPTION: Demonstrates typical CLI logs and JSON output when building and starting a dev container from a Rust project. Shows log messages for build stages, container start, and resulting JSON output with outcome and container metadata. Output will vary depending on environment and container image.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[88 ms] dev-containers-cli 0.1.0.\n[165 ms] Start: Run: docker build -f /home/node/vscode-remote-try-rust/.devcontainer/Dockerfile -t vsc-vscode-remote-try-rust-89420ad7399ba74f55921e49cc3ecfd2 --build-arg VARIANT=bullseye /home/node/vscode-remote-try-rust/.devcontainer\n[+] Building 0.5s (5/5) FINISHED\n => [internal] load build definition from Dockerfile                       0.0s\n => => transferring dockerfile: 38B                                        0.0s\n => [internal] load .dockerignore                                          0.0s\n => => transferring context: 2B                                            0.0s\n => [internal] load metadata for mcr.microsoft.com/vscode/devcontainers/r  0.4s\n => CACHED [1/1] FROM mcr.microsoft.com/vscode/devcontainers/rust:1-bulls  0.0s\n => exporting to image                                                     0.0s\n => => exporting layers                                                    0.0s\n => => writing image sha256:39873ccb81e6fb613975e11e37438eee1d49c963a436d  0.0s\n => => naming to docker.io/library/vsc-vscode-remote-try-rust-89420ad7399  0.0s\n[1640 ms] Start: Run: docker run --sig-proxy=false -a STDOUT -a STDERR --mount type=bind,source=/home/node/vscode-remote-try-rust,target=/workspaces/vscode-remote-try-rust -l devcontainer.local_folder=/home/node/vscode-remote-try-rust --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --entrypoint /bin/sh vsc-vscode-remote-try-rust-89420ad7399ba74f55921e49cc3ecfd2-uid -c echo Container started\nContainer started\n{\"outcome\":\"success\",\"containerId\":\"f0a055ff056c1c1bb99cc09930efbf3a0437c54d9b4644695aa23c1d57b4bd11\",\"remoteUser\":\"vscode\",\"remoteWorkspaceFolder\":\"/workspaces/vscode-remote-try-rust\"}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Input in launch.json\nDESCRIPTION: This configuration shows how to redirect input from a file to a Node.js program using the integrated terminal. It passes the shell redirect syntax as arguments to the program.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"launch program that reads a file from stdin\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"program.js\",\n    \"console\": \"integratedTerminal\",\n    \"args\": [\n        \"<\",\n        \"in.txt\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Organize Imports on Save - JSON\nDESCRIPTION: This code snippet configures Visual Studio Code to automatically organize imports whenever a TypeScript file is saved. By setting 'editor.codeActionsOnSave' with the 'source.organizeImports' action to 'explicit', it ensures imports are only organized during an explicit save operation (such as pressing Ctrl+S). To use this, add the shown setting in your 'settings.json' file. No additional tools are required; only VS Code is needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-refactoring.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"editor.codeActionsOnSave\\\": {\\n        \\\"source.organizeImports\\\": \\\"explicit\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onNotebook Activation Event for VS Code Extension\nDESCRIPTION: This snippet illustrates how to declare the onNotebook activation event in a VS Code extension's manifest. It's emitted when specified notebook document types ('jupyter-notebook' and 'interactive' in this case) are opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onNotebook:jupyter-notebook\",\n    \"onNotebook:interactive\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Terminal Working Directory in JSON\nDESCRIPTION: Specifies a custom default working directory for newly opened integrated terminals using the `terminal.integrated.cwd` setting in `settings.json`. Instead of opening in the project's root folder, terminals will start in the provided path (e.g., '/home/user').\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"terminal.integrated.cwd\": \"/home/user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Terminal Keyboard Shortcut in VSCode\nDESCRIPTION: Configuration to add Ctrl+T keyboard shortcut for opening the integrated terminal from the Explorer view\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+t\",\n  \"command\": \"openInTerminal\",\n  \"when\": \"filesExplorerFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions for PHP in Visual Studio Code\nDESCRIPTION: Example JSON configuration that maps custom file extensions to the PHP language identifier in VS Code. This setting helps VS Code recognize and apply PHP language features to files with custom extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n    \"files.associations\": {\n        \"*.myphp\": \"php\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring @vscode/test-electron to Disable Extensions\nDESCRIPTION: This TypeScript code demonstrates how to use the runTests API from @vscode/test-electron to disable extensions when running tests programmatically.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait runTests({\n  extensionDevelopmentPath,\n  extensionTestsPath,\n  /**\n   * A list of launch arguments passed to VS Code executable, in addition to `--extensionDevelopmentPath`\n   * and `--extensionTestsPath` which are provided by `extensionDevelopmentPath` and `extensionTestsPath`\n   * options.\n   *\n   * If the first argument is a path to a file/folder/workspace, the launched VS Code instance\n   * will open it.\n   *\n   * See `code --help` for possible arguments.\n   */\n  launchArgs: ['--disable-extensions']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Exception Breakpoint for NullReferenceException\nDESCRIPTION: This example condition value configures the C# debugger in VS Code to break execution *only* when a `System.NullReferenceException` is thrown. This condition is applied to either the 'All Exceptions' or 'User-Unhandled Exceptions' breakpoint setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.NullReferenceException\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js with Nodemon for Debugging\nDESCRIPTION: Command to start a Node.js application with nodemon in debug mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnodemon --inspect server.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Enhanced Session Logging for Remote SSH in VS Code Settings\nDESCRIPTION: This setting activates enhanced session logging for Remote - SSH connections, providing more detailed information for troubleshooting connection issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_96.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsetting(remote.SSH.experimental.enhancedSessionLogs)\n```\n\n----------------------------------------\n\nTITLE: Window Control Settings Configuration\nDESCRIPTION: Settings used to configure window controls and title bar style in VS Code, particularly for Linux support with experimental control overlay.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nvscode://settings/window.experimentalControlOverlay\nvscode://settings/window.titleBarStyle\n```\n\n----------------------------------------\n\nTITLE: Opening File Picker (Quick Open) via Keyboard Shortcut/Command\nDESCRIPTION: This command (`workbench.action.quickOpen`) opens the VS Code file picker, also known as Quick Open, typically invoked via a keyboard shortcut (like Ctrl+P). It allows fuzzy searching and opening of files within the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nworkbench.action.quickOpen\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Text Search in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable AI-powered semantic text search in the Search view of Visual Studio Code. This feature shows the most relevant results based on your query, on top of the regular search results.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"github.copilot.chat.search.semanticTextResults\": true\n```\n\n----------------------------------------\n\nTITLE: Defining EBNF Grammar for VS Code Snippets\nDESCRIPTION: This code block presents the Extended Backus-Naur Form (EBNF) grammar for VS Code snippets, defining the syntax for various snippet elements such as tabstops, placeholders, choices, variables, and transforms.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nany         ::= tabstop | placeholder | choice | variable | text\ntabstop     ::= '$' int\n                | '${' int '}'\n                | '${' int  transform '}'\nplaceholder ::= '${' int ':' any '}'\nchoice      ::= '${' int '|' text (',' text)* '|}'\nvariable    ::= '$' var | '${' var '}'\n                | '${' var ':' any '}'\n                | '${' var transform '}'\ntransform   ::= '/' regex '/' (format | text)+ '/' options\nformat      ::= '$' int | '${' int '}'\n                | '${' int ':' '/upcase' | '/downcase' | '/capitalize' | '/camelcase' | '/pascalcase' '}'\n                | '${' int ':+' if '}'\n                | '${' int ':?' if ':' else '}'\n                | '${' int ':-' else '}' | '${' int ':' else '}'\nregex       ::= JavaScript Regular Expression value (ctor-string)\noptions     ::= JavaScript Regular Expression option (ctor-options)\nvar         ::= [_a-zA-Z] [_a-zA-Z0-9]*\nint         ::= [0-9]+\ntext        ::= .*\nif          ::= text\nelse        ::= text\n```\n\n----------------------------------------\n\nTITLE: Registering Virtual Document Provider in TypeScript\nDESCRIPTION: Implementation of a TextDocumentContentProvider that manages virtual documents using a Map to store content. The provider handles URI manipulation to serve virtual document content for embedded languages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/embedded-languages.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst virtualDocumentContents = new Map<string, string>()\n\nworkspace.registerTextDocumentContentProvider('embedded-content', {\n  provideTextDocumentContent: uri => {\n    // Remove leading `/` and ending `.css` to get original URI\n    const originalUri = uri.path.slice(1).slice(0, -4);\n    const decodedUri = decodeURIComponent(originalUri);\n    return virtualDocumentContents.get(decodedUri);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Gradle Build Server Setting\nDESCRIPTION: Configuration setting to toggle the Gradle Build Server functionality in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-build.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\njava.gradle.buildServer.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Icons in VS Code Extensions\nDESCRIPTION: Shows how to define custom icons for language contributions in VS Code extensions using light and dark theme variants.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"contributes\": {\n    \"languages\": [\n      {\n        \"id\": \"latex\",\n        // ...\n        \"icon\": {\n          \"light\": \"./icons/latex-light.png\",\n          \"dark\": \"./icons/latex-dark.png\"\n        }\n      }\n  ]\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Merge Editor in Visual Studio Code\nDESCRIPTION: JSON configuration to enable the new 3-way merge editor for resolving Git merge conflicts in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"git.mergeEditor\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Test Discovery Pattern (settings.json)\nDESCRIPTION: Defines the file glob pattern used for automatic test discovery when `python.testing.autoTestDiscoverOnSaveEnabled` is true. The default pattern `**/*.py` includes all Python files in the workspace. This setting allows fine-tuning which files trigger automatic discovery.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Default pattern\n\"python.testing.autoTestDiscoverOnSavePattern\": \"**/*.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Startup Activation Event in VS Code Extension\nDESCRIPTION: This code snippet shows how to specify the startup activation event (\"*\") in a VS Code extension's manifest. It's emitted whenever VS Code starts up, but should be used sparingly to ensure a good user experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Specific Extensions in devcontainer.json (JSON)\nDESCRIPTION: Configures `devcontainer.json` to prevent the 'dbaeumer.vscode-eslint' extension from being installed within the dev container by prefixing its ID with a minus sign. This is useful for overriding extensions included by base images or Features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/typescript-node:1-20-bookworm\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"-dbaeumer.vscode-eslint\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Opening a VS Code Project Directory - Batch Script\nDESCRIPTION: This Windows batch script initializes a folder structure for a new development project. It creates a parent 'projects' directory and a 'helloworld' subdirectory, navigates into it, and opens Visual Studio Code in that directory using 'code .'. Users should ensure that the 'code' command is available on the system PATH for successful execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\nmkdir projects\ncd projects\nmkdir helloworld\ncd helloworld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Portable Mode in Windows/Linux\nDESCRIPTION: Shows the required directory structure for enabling Portable mode in Visual Studio Code on Windows and Linux platforms. The 'data' folder is created within the VS Code installation folder to contain all VS Code data.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/portable.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|- VSCode-win32-x64-1.84.2\n|   |- Code.exe (or code executable)\n|   |- data\n|   |- bin\n|   |  |- code\n|   |  |- ...\n|   |- ...\n```\n\n----------------------------------------\n\nTITLE: Node.js Debug Launch with Scoped Variables and Skip Files - VS Code Workspace - JSON\nDESCRIPTION: Provides a launch configuration for Node.js debugging in VS Code, demonstrating use of scoped variables in paths and specifying files or folders to skip during debugging. Requirements: There must be 'Program' and 'Library' folders at the workspace root. The configuration sets the 'program' field with a scoped workspace variable and 'skipFiles' as an array of scoped glob patterns. Outputs: Launches and debugs 'test.js', skipping all JavaScript files in 'Library/out'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"launch\": {\n  \"configurations\": [{\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Launch test\",\n      \"program\": \"${workspaceFolder:Program}/test.js\",\n      \"skipFiles\": [\n        \"${workspaceFolder:Library}/out/**/*.js\"\n      ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: jsconfig.json with Include Pattern\nDESCRIPTION: Configuration example demonstrating how to explicitly include source files in the JavaScript project using the include property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/jsconfig.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\"\n    },\n    \"include\": [\n        \"src/**/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Media Files Destination in VS Code\nDESCRIPTION: This snippet demonstrates how to configure the markdown.copyFiles.destination setting to control where media files are created when pasted into Markdown documents. The example maps files under the /docs directory to an images subdirectory specific to the current file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n\"markdown.copyFiles.destination\": {\n  \"/docs/**/*\": \"images/${documentBaseName}/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Node.js Runtime Version - VS Code Launch Config - JSON\nDESCRIPTION: Specifies a Node.js debug launch configuration using a specific Node.js version via the 'runtimeVersion' attribute. Designed for use with nvm or nvm-windows to manage Node.js versions. Prerequisite: The requested version (e.g., 7.10.1) must be installed and available in the environment. The configuration includes type, request, name, runtimeVersion, and program attributes; on launch, it uses the specified Node.js runtime to execute the given script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Launch test\",\n  \"runtimeVersion\": \"7.10.1\",\n  \"program\": \"${workspaceFolder}/test.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying and Setting Docker Context in Bash\nDESCRIPTION: This snippet demonstrates how to list Docker contexts and set the default context. It's useful for troubleshooting issues with dev container samples that may arise from incorrect Docker contexts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Displays the list of contexts, '*' denotes the current context\ndocker context list\n\n# Switches the list to the 'default' context\ndocker context use default\n```\n\n----------------------------------------\n\nTITLE: Defining Folders in a .code-workspace File using JSON\nDESCRIPTION: Shows the JSON schema for defining folders within a `.code-workspace` file. Each object in the `folders` array represents a root folder, specifying its `path` (relative or absolute) and an optional `name` attribute to customize its display name in the VS Code Explorer. Comments are supported.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"folders\": [\n        {\n            // Source code\n            \"name\": \"Product\",\n            \"path\": \"vscode\"\n        },\n        {\n            // Docs and release notes\n            \"name\": \"Documentation\",\n            \"path\": \"vscode-docs\"\n        },\n        {\n            // Yeoman extension generator\n            \"name\": \"Extension generator\",\n            \"path\": \"vscode-generator-code\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Azure AI Translations with @vscode/l10n-dev - Bash\nDESCRIPTION: This snippet illustrates the use of the @vscode/l10n-dev CLI tool to generate translation files for VS Code extensions with Azure AI Translator. It assumes the environment variables AZURE_TRANSLATOR_KEY and AZURE_TRANSLATOR_REGION are set for authentication. The command outputs localized resources from a bundle and NLS JSON files, helping automate localization for extension developers. Prerequisites include Node.js, NPM, and the @vscode/l10n-dev package.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @vscode/l10n-dev generate-azure -o ./l10n/ ./l10n/bundle.l10n.json ./package.nls.json\n```\n\n----------------------------------------\n\nTITLE: Assigning Expression to Variable in Java\nDESCRIPTION: Demonstrates assigning an expression to a local variable using the 'Assign to variable' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nArrays.asList(\"apple\", \"lemon\", \"banana\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> fruits = Arrays.asList(\"apple\", \"lemon\", \"banana\");\n```\n\n----------------------------------------\n\nTITLE: Installing nvm (Node Version Manager) on Chromebook\nDESCRIPTION: These commands download and install nvm, a utility for managing Node.js versions on the Chromebook's Linux environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/12/03/chromebook-get-started.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\nsource .bashrc\n```\n\n----------------------------------------\n\nTITLE: Opening Walkthrough in VS Code\nDESCRIPTION: This command opens a specific walkthrough in VS Code. It can optionally open the walkthrough in a new editor group to the side, providing flexibility in how the content is displayed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`workbench.action.openWalkthrough` - Open the walkthrough.\n\n* _walkthroughID_ - ID of the walkthrough to open.\n* _toSide_ - Opens the walkthrough in a new editor group to the side.\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Server for Web Extension Connection\nDESCRIPTION: Command to start a Jupyter server that allows connections from VS Code's web extension. This enables notebooks to be run on local Jupyter servers when using vscode.dev.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njupyter --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in TypeScript (VS Code Extension)\nDESCRIPTION: This snippet demonstrates how to programmatically execute the 'editor.action.addCommentLine' command to comment the currently selected lines in the active text editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nfunction commentLine() {\n  vscode.commands.executeCommand('editor.action.addCommentLine');\n}\n```\n\n----------------------------------------\n\nTITLE: File Pattern Matching for Schema Association\nDESCRIPTION: Configuration showing how to use wildcards and exclusion patterns for JSON schema associations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \"/receipts/*.json\",\n        \"!/receipts/*.excluded.json\"\n      ],\n      \"url\": \"./receipts.schema.json\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Launch Configuration in VS Code\nDESCRIPTION: JSON configuration for launching Microsoft Edge browser in debug mode with a specified URL\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/browser-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"msedge\",\n      \"request\": \"launch\",\n      \"name\": \"Launch my cool app\",\n      \"url\": \"http://localhost:8000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Debug Configuration for Node.js\nDESCRIPTION: YAML configuration for Docker Compose debug setup, specifying environment, ports, and debug command for Node.js application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.4'\n\nservices:\n  node-hello:\n    image: node-hello\n    build: .\n    environment:\n      NODE_ENV: development\n    ports:\n      - 3000\n      - 9229:9229\n    command: node --inspect=0.0.0.0:9229 ./bin/www\n```\n\n----------------------------------------\n\nTITLE: Customizing Settings Profile Colors in VS Code\nDESCRIPTION: JSON configuration for customizing the foreground and background colors of the Settings Profile status bar entry in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"statusBarItem.settingsProfilesBackground\": \"#ce4918\",\n    \"statusBarItem.settingsProfilesForeground\": \"#e0dfdb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the languageserver Package in R\nDESCRIPTION: Command to install the languageserver package in R, which is required for the R extension in VS Code to provide language features like code completion and linting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/r.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"languageserver\")\n```\n\n----------------------------------------\n\nTITLE: Defining Keys for Global State Sync in TypeScript\nDESCRIPTION: This TypeScript API definition introduces the `setKeysForSync` method on the `globalState` memento. Extensions can use this method to specify an array of keys whose corresponding values in the global state should be synchronized across devices when VS Code's Settings Sync feature is enabled. Calling this function replaces the previous set of keys; an empty array disables synchronization for this memento.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_51.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Set the keys whose values should be synchronized across devices when synchronizing user-data\n * like configuration, extensions, and mementos.\n *\n * Note that this function defines the whole set of keys whose values are synchronized:\n *  - calling it with an empty array stops synchronization for this memento\n *  - calling it with a non-empty array replaces all keys whose values are synchronized\n *\n * For any given set of keys this function needs to be called only once but there is no harm in\n * repeatedly calling it.\n *\n * @param keys The set of keys whose values are synced.\n */\nsetKeysForSync(keys: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Git Diagnostics Commit Hook\nDESCRIPTION: Sets the `git.diagnosticsCommitHook.Enabled` setting to `true` to enable an experimental feature that checks for unresolved diagnostics (like errors or warnings) in changed files before allowing a commit.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(git.diagnosticsCommitHook.Enabled:true)\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Available Commands to a File - Bash/Zsh\nDESCRIPTION: Lists all files in /usr/bin (typically shell command executables on Unix-like systems) and redirects the output to Command.txt in the current directory. This snippet requires Bash or Zsh and appropriate file permissions. The resulting Command.txt file contains file names and attributes, suitable for searching. Usage assumes a Unix shell environment and writes or overwrites the file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls -l /usr/bin > Command.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Profile in JavaScript Debugging\nDESCRIPTION: Example showing how to use console.profile() and console.profileEnd() for CPU profiling in the JavaScript debugger. The profile data will be saved as a .cpuprofile file in the workspace folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.profile();\ndoSomeExpensiveWork();\nconsole.profileEnd();\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Exception Breakpoint to Ignore Multiple Exception Types\nDESCRIPTION: This example condition value configures the C# debugger in VS Code to break on *all* exceptions *except* for `System.Threading.Tasks.TaskCanceledException` and `System.NotImplementedException`. Multiple excluded types are listed comma-separated after the '!' prefix.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n!System.Threading.Tasks.TaskCanceledException, System.NotImplementedException\n```\n\n----------------------------------------\n\nTITLE: Example Virtual Environment Folder Paths in VS Code\nDESCRIPTION: Example values for `python.venvFolders`, showing how to specify common locations for virtual environments, such as the workspace folder itself (`${workspaceFolder}`), a dedicated folder within the project (`.\\envs`), or a common folder in the user's home directory (`~/.virtualenvs`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n`${workspaceFolder}`\n```\n\nLANGUAGE: json\nCODE:\n```\n`.\\envs`\n```\n\nLANGUAGE: json\nCODE:\n```\n`~/.virtualenvs`\n```\n\n----------------------------------------\n\nTITLE: Disabling Snippet Suggestions in VS Code JSON Settings\nDESCRIPTION: This JSON setting configures how snippet suggestions are displayed relative to other IntelliSense suggestions in VS Code. Setting it to `\"none\"` disables snippet suggestions entirely. Other options include `\"top\"`, `\"bottom\"`, and `\"inline\"` (default). This setting is placed in the user or workspace settings file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neditor.snippetSuggestions\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Chord Keybindings in VS Code\nDESCRIPTION: Example of a user-defined keybinding configuration in keybindings.json that demonstrates VS Code's terminal chord support. This snippet shows how to define multiple keybindings for the same chord (Ctrl+M A) with different commands, illustrating the priority rules for keybindings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"ctrl+m a\", \"command\": \"workbench.action.terminal.toggleTerminal\" },\n  {\"key\": \"ctrl+m a\", \"command\": \"workbench.action.focusLastEditorGroup\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Task for Dev Container CI Integration\nDESCRIPTION: YAML configuration example demonstrating how to use the DevcontainersCI Azure DevOps Task to integrate development containers into Azure DevOps CI pipelines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCI@0\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: 'make ci-build'\n    sourceBranchFilterForPush: refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Installing webpack Dependencies\nDESCRIPTION: Commands to install webpack and its TypeScript loader as development dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev webpack webpack-cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev ts-loader\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Rerun Options\nDESCRIPTION: Task configuration demonstrating how to control variable reevaluation on task rerun using the reevaluateOnRerun option.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"gulp\",\n    \"task\": \"tslint\",\n    \"label\": \"Run tslint\",\n    \"runOptions\": {\n        \"reevaluateOnRerun\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Badge for Theme Previews in VS Code for the Web\nDESCRIPTION: Provides Markdown code for theme authors to add a badge to their README files. This badge links users directly to a preview of the theme within the VS Code for the Web environment using the `vscode.dev/editor/theme/<extensionId>` URL structure. The `<extensionId>` placeholder must be replaced with the actual theme extension identifier.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/vscode-web.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Preview in vscode.dev](https://img.shields.io/badge/preview%20in-vscode.dev-blue)](https://vscode.dev/editor/theme/<extensionId>)\n```\n\n----------------------------------------\n\nTITLE: Referencing Extension Resources in Webview HTML (HTML)\nDESCRIPTION: Displays how to load extension local resources within a webview's HTML content using the 'vscode-extension-resource:' URI scheme. This is required since webviews are sandboxed and cannot access the local file system directly for security. Typically used for stylesheets or images bundled with the extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"vscode-extension-resource:/Users/alice/.vscode-insiders/extensions/bierner.cat-counter-0.1.0/base.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Searching for Text in Files - VS Code Proposed API - TypeScript\nDESCRIPTION: This function declaration exposes a proposed API enabling extensions to search for text within workspace files. An extension supplies a search query, optional search options, and a callback to handle found matches. Optionally, a CancellationToken can cancel the search. Outputs are provided incrementally to the callback. This is analogous to the existing 'workspace.findFiles' but for searching file content. Requires adoption of proposed APIs and proper VS Code extension activation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace workspace {\n    export function findTextInFiles(query: TextSearchQuery, options: FindTextInFilesOptions, callback: (result: TextSearchResult) => void, token?: CancellationToken): Thenable<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Severity Overrides in VS Code Python Extension\nDESCRIPTION: Example JSON configuration showing how to customize diagnostic severity levels for Python analysis in VS Code. This example changes the severity of unbound variable reports to 'information' and implicit string concatenation to 'warning'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"python.analysis.diagnosticSeverityOverrides\": {\n        \"reportUnboundVariable\": \"information\",\n        \"reportImplicitStringConcatenation\": \"warning\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Word Wrap Setting in VS Code - JSON\nDESCRIPTION: Enables word wrap in the VS Code editor by setting the \\\"editor.wordWrap\\\" property to \\\"on\\\" in the settings JSON file. This setting ensures that text automatically wraps based on the width of the editor viewport. The property should be added to your settings.json file, and valid values include \\\"on\\\", \\\"off\\\", \\\"wordWrapColumn\\\", and \\\"bounded\\\".\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.wordWrap\": \"on\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Actions on Save\nDESCRIPTION: JSON configuration to enable automatic fixing of all issues and organizing imports when saving a file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// On save, run both fixAll and organizeImports source actions\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true,\n    \"source.organizeImports\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Notebook Server for VS Code Web\nDESCRIPTION: Command to start a local Jupyter notebook server that allows connections from vscode.dev. This enables using Jupyter features like plot viewer and dataframe viewer in the web version of VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```\n\n----------------------------------------\n\nTITLE: Defining Insert/Replace Ranges for Completion Items in TypeScript (Proposed API)\nDESCRIPTION: This snippet shows the proposed structure for the `CompletionItem` interface in the VS Code API. It introduces the ability for the `range` property to be an object with separate `insert` and `replace` ranges. This allows extensions to provide more precise control over how IntelliSense suggestions interact with existing text, supporting both insert and replace modes. Using this requires enabling proposed APIs in the extension's `package.json` and referencing `vscode.proposed.d.ts`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ninterface CompletionItem {\n  range?: Range | { insert: Range; replace: Range; };\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Code Snippet Configuration\nDESCRIPTION: VS Code snippet configuration for quickly creating new Flask template files that extend the base layout. Defines template structure with title and content blocks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"Flask Tutorial: template extending layout.html\": {\n    \"prefix\": \"flextlayout\",\n    \"body\": [\n        \"{% extends \\\"layout.html\\\" %}\",\n        \"{% block title %}\",\n        \"$0\",\n        \"{% endblock %}\",\n        \"{% block content %}\",\n        \"{% endblock %}\"\n    ],\n\n    \"description\": \"Boilerplate template that extends layout.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fish for VS Code Shell Integration (Manual)\nDESCRIPTION: This script manually enables VS Code shell integration for the Fish shell. It should be added to the user's 'config.fish' file (typically located at `$__fish_config_dir/config.fish`). The script uses `string match` to check if the `$TERM_PROGRAM` variable is 'vscode' and, if it matches, sources the Fish-specific integration script located using `code --locate-shell-integration-path fish`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nstring match -q \"$TERM_PROGRAM\" \"vscode\"\nand . (code --locate-shell-integration-path fish)\n```\n\n----------------------------------------\n\nTITLE: Controlling Word Wrap in VSCode Debug Console\nDESCRIPTION: A configuration setting that controls whether word wrap is enabled in the Debug Console. When disabled, lines will not be wrapped and a horizontal scrollbar will appear.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\ndebug.console.wordWrap\n```\n\n----------------------------------------\n\nTITLE: Defining the vscode.l10n Namespace API in TypeScript\nDESCRIPTION: This TypeScript declaration outlines the proposed `vscode.l10n` namespace API for VS Code extensions. It includes the `t` function for marking strings for localization (accepting either a string or an options object with message, args, and comment), the `bundle` property to access loaded localized strings, and the `uri` property for the bundle's location. This API is intended to replace older `vscode-nls` modules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ndeclare module 'vscode' {\n  export namespace l10n {\n    /**\n     * A string that can be pulled out of a localization bundle if it exists.\n     */\n    export function t(message: string, ...args: any[]): string;\n    /**\n     * A string that can be pulled out of a localization bundle if it exists.\n     */\n    export function t(options: { message: string; args?: any[]; comment: string[] }): string;\n    /**\n     * The bundle of localized strings that have been loaded for the extension.\n     */\n    export const bundle: { [key: string]: string };\n    /**\n     * The URI of the localization bundle that has been loaded for the extension.\n     */\n    export const uri: Uri | undefined;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Python Debug Configuration in launch.json\nDESCRIPTION: Updates the VS Code launch configuration (`launch.json`) for Python debugging to use the new standalone Python Debugger extension. The `type` property must be changed from `\"python\"` to `\"debugpy\"` to ensure compatibility with future versions where debugging support will be removed from the main Python extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"python\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// replace with\n```\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"debugpy\"\n```\n\n----------------------------------------\n\nTITLE: Updating Packages and Installing Node.js with Bash\nDESCRIPTION: This snippet performs system package list updates, fetches and runs the NodeSource Node.js setup script to configure package repositories for the latest LTS release, and installs Node.js (including npm) on a Debian-based Linux system such as Ubuntu. Required dependencies: curl, sudo, apt-get (typically present by default), and network connectivity to download remote scripts and packages. Key parameters involve the flexibility of specifying Node.js versions via NodeSource and the use of 'sudo' for administrative permissions. Input: None; Output: Installed node and npm binaries. Constraints: Designed for Debian/Ubuntu family; other Linux distributions may need alternate commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\ncurl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n----------------------------------------\n\nTITLE: Opening a Folder in VS Code using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the vscode.commands.executeCommand API to open a new folder in Visual Studio Code. It creates a Uri object from a file path and then executes the 'vscode.openFolder' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet uri = Uri.file('/some/path/to/folder');\nlet success = await commands.executeCommand('vscode.openFolder', uri);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom View Visibility in VS Code via Package.json - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the visibility of a custom view in the VS Code Explorer through the 'views' contribution point within an extension's package.json. The 'when' clause allows the custom view to display only in specific contexts, such as when in debug mode and debugging a Node.js application. To utilize this, extension authors must list the view under the appropriate view container (like 'explorer'), set a unique ID and optional name, and provide a condition in the 'when' property. Inputs include context keys and debug types. This setting does not require additional dependencies but assumes basic knowledge of VS Code extension contribution points and activation events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"views\": {\n        \"explorer\": [\n            {\n                \"id\": \"extension.node-debug.loadedScriptsExplorer\",\n                \"name\": \"Loaded Scripts\",\n                \"when\": \"inDebugMode && debugType == 'node'\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Tunnel Creation - Bash\nDESCRIPTION: Command to create a secure tunnel for remote development using VS Code's Remote Tunnels feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode tunnel\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET SDK Install Timeout in VS Code Settings (JSON)\nDESCRIPTION: This snippet demonstrates how to set a custom timeout value (in seconds) for the .NET Core runtime installation via the dotnetAcquisitionExtension.installTimeoutValue property in VS Code's settings.json. This impacts how long VS Code will wait for .NET to install before aborting. Required: The .NET Install Tool and C# Dev Kit extensions. Input: Number of seconds. Output: Custom timeout behavior for installation. Limitation: Does not affect existing installs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotnetAcquisitionExtension.installTimeoutValue\": 180\n}\n```\n\n----------------------------------------\n\nTITLE: Running NVM in interactive mode with postCreateCommand\nDESCRIPTION: This snippet shows how to use NVM (Node Version Manager) in interactive mode with postCreateCommand to install the latest LTS version of Node.js.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"bash -i -c 'nvm install --lts'\"\n```\n\n----------------------------------------\n\nTITLE: VSCode Command Reference Table\nDESCRIPTION: Markdown table defining new VSCode commands with their keyboard shortcuts and command IDs. Includes commands for refactoring, editor group management, list selection, and developer tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Command|Command id\n---|-------|----------\n`kb(editor.action.refactor)`|Open refactoring context menu at current position|`workbench.action.refactor`\n`kb(workbench.action.moveEditorToFirstGroup)`|Move Editor into First Group|`workbench.action.moveEditorToFirstGroup`\n`kb(workbench.action.moveEditorToSecondGroup)`|Move Editor into Second Group|`workbench.action.moveEditorToSecondGroup`\n`kb(workbench.action.moveEditorToThirdGroup)`|Move Editor into Third Group|`workbench.action.moveEditorToThirdGroup`\n`kb(list.expandSelectionDown)`|Multi-Select in lists/trees: expand selection down|`list.expandSelectionDown`\n`kb(list.expandSelectionUp)`|Multi-Select in lists/trees: expand selection up|`list.expandSelectionUp`\n`kb(workbench.action.openLogFile)`|Developer: Open Log File...|`workbench.action.openLogFile`\n`kb(workbench.action.openLogsFolder)`|Developer: Open Logs Folder|`workbench.action.openLogsFolder`\n`kb(workbench.action.showLogs)`|Developer: Show Logs...|`workbench.action.showLogs`\n`kb(workbench.action.setLogLevel)`|Developer: Set Log Level|`workbench.action.setLogLevel`\n`kb(settings.action.editFocusedSetting)`|Edit focused setting in the Settings editor|`settings.action.editFocusedSetting`\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Renderer API in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the new terminal renderer API. It includes methods for creating a terminal renderer, writing to it, and handling input events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace window {\n  export function createTerminalRenderer(name: string): TerminalRenderer;\n}\n\nexport interface TerminalRenderer {\n  name: string;\n  dimensions: TerminalDimensions | undefined;\n  readonly maximumDimensions: TerminalDimensions | undefined;\n  readonly terminal: Terminal;\n  readonly onDidAcceptInput: Event<string>;\n  readonly onDidChangeMaximumDimensions: Event<TerminalDimensions>;\n  write(text: string): void;\n}\n\nexport interface TerminalDimensions {\n  readonly columns: number;\n  readonly rows: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Read File Tool Configuration in JSON\nDESCRIPTION: JSON configuration for the read_file tool used by Copilot agent mode. Defines the tool's parameters including file path and line number ranges for reading file contents.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/02/24/introducing-copilot-agent-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"read_file\",\n    \"description\": \"Read the contents of a file. You must specify the line range you're interested in, and if the file is larger, you will be given an outline of the rest of the file. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"filePath\": {\n                \"description\": \"The absolute paths of the files to read.\",\n                \"type\": \"string\"\n            },\n            \"startLineNumberBaseZero\": {\n                \"type\": \"number\",\n                \"description\": \"The line number to start reading from, 0-based.\"\n            },\n            \"endLineNumberBaseZero\": {\n                \"type\": \"number\",\n                \"description\": \"The inclusive line number to end reading at, 0-based.\"\n            }\n        },\n        \"required\": [\n            \"filePath\",\n            \"startLineNumberBaseZero\",\n            \"endLineNumberBaseZero\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paste-as-Context for Copilot Chat in VS Code\nDESCRIPTION: JSON configuration for setting the editor's paste preferences to enable pasting code as context attachments in Copilot Chat. This allows for attaching code fragments with file information and line numbers to chat conversations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"editor.pasteAs.preferences\": [\n    \"chat.attach.text\"\n]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Parameter Hints Configuration\nDESCRIPTION: JSON configuration settings to enable inlay hints and parameter names in TypeScript and JavaScript files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"editor.inlayHints.enabled\": \"on\",\n\"typescript.inlayHints.parameterNames.enabled\": \"all\",\n\"javascript.inlayHints.parameterNames.enabled\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Command Navigation Keybindings for Windows and Linux\nDESCRIPTION: JSON configuration for adding terminal command navigation shortcuts on Windows and Linux platforms. These keybindings enable scrolling between commands and selecting command output in the integrated terminal using Ctrl+Up/Down and Ctrl+Shift+Up/Down.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Terminal command tracking on Windows and Linux\n  { \"key\": \"ctrl+up\",          \"command\": \"workbench.action.terminal.scrollToPreviousCommand\", \"when\": \"terminalFocus\" },\n  { \"key\": \"ctrl+down\",        \"command\": \"workbench.action.terminal.scrollToNextCommand\", \"when\": \"terminalFocus\" },\n  { \"key\": \"ctrl+shift+up\",    \"command\": \"workbench.action.terminal.selectToPreviousCommand\", \"when\": \"terminalFocus\" },\n  { \"key\": \"ctrl+shift+down\",  \"command\": \"workbench.action.terminal.selectToNextCommand\", \"when\": \"terminalFocus\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Port Range for SSH in VS Code\nDESCRIPTION: Setting to configure the preferred range of local ports for SSH connections in VS Code. This is useful when certain port ranges are reserved but not yet bound on a machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_92.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.preferredLocalPortRange\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings\nDESCRIPTION: Various settings configurations shown in the release notes for enabling features like Copilot Next Edit Suggestions, auto-accept delays, and temporal context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.copilot.nextEditSuggestions.enabled\n```\n\nLANGUAGE: plaintext\nCODE:\n```\neditor.inlineSuggest.edits.renderSideBySide:never\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nchat.editing.autoAcceptDelay\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.copilot.chat.editor.temporalContext.enabled\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.copilot.chat.edits.temporalContext.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Language Mappings in JSON\nDESCRIPTION: JSON configuration for the 'emmet.includeLanguages' setting which adds Emmet support to additional languages by mapping them to existing Emmet-supported languages. Left side is the new language ID, right side is the supported language ID.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"emmet.includeLanguages\": {\n    \"javascript\": \"javascriptreact\",\n    \"vue-html\": \"html\",\n    \"plaintext\": \"jade\"\n}\n```\n\n----------------------------------------\n\nTITLE: TextMate Grammar Injection Configuration\nDESCRIPTION: Configuration example showing how to inject TextMate grammar rules into existing grammars for enhanced syntax highlighting, specifically for TODO markers in JavaScript and TypeScript files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"grammars\": [\n  {\n    \"scopeName\": \"source.todo\",\n    \"path\": \"./syntaxes/todo.tmLanguage.json\",\n    \"injectTo\": [  \"source.js\", \"source.ts\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace TypeScript SDK Path - JSON\nDESCRIPTION: Sets the TypeScript SDK for a specific workspace by assigning the 'typescript.tsdk' property in workspace-level settings (settings.json). This configuration instructs VS Code to recognize a locally installed TypeScript version (typically under 'node_modules/typescript/lib') for that workspace, which can be activated via the 'TypeScript: Select TypeScript Version' command. The workspace must contain a full TypeScript installation including 'package.json' and 'tsserver.js'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"typescript.tsdk\": \"./node_modules/typescript/lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for Dev Container CI Integration\nDESCRIPTION: YAML configuration example showing how to use the devcontainers/ci GitHub Action to build and run a development container in CI pipelines, allowing reuse of the same setup used for local development.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build and run dev container task\n  uses: devcontainers/ci@v0.2\n  with:\n    imageName: ghcr.io/example/example-devcontainer\n    runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Tasks with Glob Patterns in VS Code\nDESCRIPTION: This JSON configuration demonstrates how to set up default build tasks in VS Code using glob patterns. It allows specifying different default tasks based on the file extension of the active file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"echo txt\",\n            \"type\": \"shell\",\n            \"command\": \"echo TextFile\",\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": \"**.txt\" // This is a glob pattern which will only match when the active file has a .txt extension.\n            }\n        },\n        {\n            \"label\": \"echo js\",\n            \"type\": \"shell\",\n            \"command\": \"echo JavascriptFile\",\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": \"**.js\" // This is a glob pattern which will only match when the active file has a .js extension.\n            },\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Web Worker from a Blob in a Webview (JavaScript)\nDESCRIPTION: This code demonstrates fetching a worker script as a blob, converting it to a blob URL, and instantiating a web worker within a webview context. This pattern is used because webviews can only load workers using 'data:' or 'blob:' URIs, not directly from file paths. Dependencies include browser fetch API and standard Worker constructor. Expected input is an absolute path to a worker JS file; output is a running worker context using the loaded code. Worker scripts in webviews cannot use importScripts or dynamic imports, and must be packaged as a single file if dependencies are needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst workerSource = 'absolute/path/to/worker.js';\n\nfetch(workerSource)\n  .then(result => result.blob())\n  .then(blob => {\n    const blobUrl = URL.createObjectURL(blob)\n    new Worker(blobUrl);\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Adding VS Code YUM/DNF Repository on RHEL/Fedora/CentOS\nDESCRIPTION: Imports the Microsoft GPG key using `rpm --import` and creates the YUM/DNF repository configuration file (`/etc/yum.repos.d/vscode.repo`) necessary to install and update VS Code via the system's package manager (`dnf` or `yum`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\necho -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\nautorefresh=1\\ntype=rpm-md\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" | sudo tee /etc/yum.repos.d/vscode.repo > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugging with Skipped Files in VS Code JSON Settings\nDESCRIPTION: JSON configuration for skipping specific files or modules during Node.js debugging in Visual Studio Code. This example skips all internal modules except 'events.js'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"skipFiles\": [\n  \"<node_internals>/**/*.js\",\n  \"!<node_internals>/events.js\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies on ChromeOS\nDESCRIPTION: Command to install essential Python packages including pip (package manager), venv (virtual environment tool), and build dependencies using apt-get on ChromeOS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/12/03/chromebook-get-started.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install -y python3-pip python3-dev python3-venv build-essential libssl-dev libffi-dev\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions with Markdown Media File Paths in VS Code\nDESCRIPTION: This example shows how to use regular expressions to transform variables in the markdown.copyFiles.destination setting. The snippet uses only the first letter of the document filename when creating the path for media files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n\"markdown.copyFiles.destination\": {\n  \"/docs/**/*\": \"images/${documentBaseName/(.).*/$1/}/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed API in VS Code Extension\nDESCRIPTION: JSON configuration to enable proposed API usage in a VS Code extension. This setting should be added to the extension's package.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Settings for Python Tests in launch.json\nDESCRIPTION: This JSON configuration in the launch.json file disables the justMyCode setting for debugging Python tests. It specifies the debugger type, request mode, program to debug, and sets the purpose to debug tests.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python: Debug Tests\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"program\": \"${file}\",\n    \"purpose\": [\"debug-test\"],\n    \"console\": \"integratedTerminal\",\n    \"justMyCode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang-Format Style Settings in JSON - JSON\nDESCRIPTION: This snippet demonstrates a set of configuration options for clang-format, typically found in a .clang-format file, as used by the VS Code C++ extension to enforce code formatting rules. The fields, such as UseTab, IndentWidth, BreakBeforeBraces, AllowShortIfStatementsOnASingleLine, IndentCaseLabels, and ColumnLimit, correspond to formatting behaviors like brace style, indentation, and line limits. These options are used by the extension to ensure code is formatted according to user or workspace standards. No external dependencies are required, but the C/C++ extension must be installed in VS Code and configured to use clang-format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-ide.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\nUseTab: (VS Code current setting)\\nIndentWidth: (VS Code current setting)\\nBreakBeforeBraces: Allman\\nAllowShortIfStatementsOnASingleLine: false\\nIndentCaseLabels: false\\nColumnLimit: 0\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VS Code Task to Open macOS Terminal (tasks.json Workaround)\nDESCRIPTION: This JSON snippet defines a VS Code task within `tasks.json` labeled \"Open Terminal\". It uses the `shell` type to execute an `osascript` command, which instructs the macOS Terminal application to run a simple script (`echo hello`). This task serves as a workaround for a known issue on macOS Catalina and later where the external console used for debugging might not accept user input unless the Terminal application has been explicitly launched and granted permissions previously.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Open Terminal\",\n    \"type\": \"shell\",\n    \"command\": \"osascript -e 'tell application \\\"Terminal\\\"\\ndo script \\\"echo hello\\\"\\nend tell'\",\n    \"problemMatcher\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Command Input Variable in launch.json Debug Configuration (JSON)\nDESCRIPTION: Defines a Node.js debug configuration in `launch.json` that uses an input variable of type `command`. The `${input:pickTest}` variable resolves by executing the specified `extension.mochaSupport.testPicker` command (assumed provided by an extension) with arguments, allowing the user to select a test file to debug dynamically before the launch.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Run specific test\",\n            \"program\": \"${workspaceFolder}/${input:pickTest}\"\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"pickTest\",\n            \"type\": \"command\",\n            \"command\": \"extension.mochaSupport.testPicker\",\n            \"args\": {\n                \"testFolder\": \"/out/tests\",\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code as a Linux Snap Package\nDESCRIPTION: Commands for installing the official VS Code snap package on Linux. Snap packages work across many Linux distributions, provide reliable execution environments, and support background updates, bringing automatic updates to Linux users similar to Windows and macOS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install code --classic\n```\n\n----------------------------------------\n\nTITLE: Defining a Gulp Lint Task (JavaScript)\nDESCRIPTION: This JavaScript code defines a Gulp task named 'lint' using the 'gulp-eslint' plugin. It sources all JavaScript files in the project (excluding node_modules), pipes them through ESLint for linting, formats the output to the console, and causes the process to exit with an error code if linting errors are found. This Gulp task can be auto-detected by VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst gulp = require('gulp');\nconst eslint = require('gulp-eslint');\n\ngulp.task('lint', () => {\n    // ESLint ignores files with \"node_modules\" paths.\n    // So, it's best to have gulp ignore the directory as well.\n    // Also, Be sure to return the stream from the task;\n    // Otherwise, the task may end before the stream has finished.\n    return gulp.src(['**/*.js','!node_modules/**'])\n        // eslint() attaches the lint output to the \"eslint\" property\n        // of the file object so it can be used by other modules.\n        .pipe(eslint())\n        // eslint.format() outputs the lint results to the console.\n        // Alternatively use eslint.formatEach() (see Docs).\n        .pipe(eslint.format())\n        // To have the process exit with an error code (1) on\n        // lint error, return the stream and pipe to failAfterError last.\n        .pipe(eslint.failAfterError());\n});\n\ngulp.task('default', ['lint'], function () {\n    // This will only run if the lint task is successful...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output\nDESCRIPTION: The JavaScript code generated after compiling the TypeScript Hello World example.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/typescript.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar message = \"Hello World\";\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Adding Jupyter Extension to Dev Container Configuration in JSON\nDESCRIPTION: JSON configuration to include Jupyter extension alongside Python and Pylance in a Dev Container. This ensures Jupyter notebook functionality is available in containers since it's no longer automatically installed with the Python extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"ms-python.vscode-pylance\", \"ms-python.python\", \"ms-toolsai.jupyter\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Language Identifier in VS Code Extension Manifest (JSON)\nDESCRIPTION: This snippet from an extension's `package.json` file shows how to define a new language mode. It uses the `contributes.languages` point to declare the `java` language identifier, associate it with specific file extensions (`.java`, `.jav`), and provide case-insensitive aliases (`Java`, `java`). This is essential for extensions introducing support for a new programming language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/identifiers.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": [{\n    \"id\": \"java\",\n    \"extensions\": [ \".java\", \".jav\" ],\n    \"aliases\": [ \"Java\", \"java\" ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Pre-seeding Debconf for Non-Interactive VS Code Repo Addition on Debian/Ubuntu\nDESCRIPTION: Uses `debconf-set-selections` to pre-configure the system to automatically add the Microsoft apt repository and signing key when installing the VS Code `.deb` package non-interactively. This avoids prompts during automated installations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"code code/add-microsoft-repo boolean true\" | sudo debconf-set-selections\n```\n\n----------------------------------------\n\nTITLE: Customizing Gauge Element Colors in VS Code Themes\nDESCRIPTION: Lists the configuration keys for controlling the appearance of gauge elements within the VS Code UI. This includes background, foreground, border colors, as well as specific colors for warning and error states. These identifiers are used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n- `gauge.background`: Gauge background color.\n- `gauge.foreground`: Gauge foreground color.\n- `gauge.border`: Gauge border color.\n- `gauge.warningBackground`: Gauge warning background color.\n- `gauge.warningForeground`: Gauge warning foreground color.\n- `gauge.errorBackground`: Gauge error background color.\n- `gauge.errorForeground`: Gauge error foreground color.\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveTreeItem in TreeDataProvider in TypeScript\nDESCRIPTION: New resolveTreeItem method in TreeDataProvider allows lazy loading of tree item properties that might take longer to calculate, such as tooltips.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyTreeDataProvider implements vscode.TreeDataProvider<MyTreeItem> {\n  // ...\n  resolveTreeItem(item: MyTreeItem): Thenable<MyTreeItem> {\n    return Promise.resolve(item).then(resolvedItem => {\n      resolvedItem.tooltip = new vscode.MarkdownString('Lazily loaded tooltip');\n      return resolvedItem;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revealing and Focusing TreeView Elements in TypeScript\nDESCRIPTION: This TypeScript code shows the updated signature for the `reveal` method on the `TreeView` API. It introduces an optional `focus` property (boolean) within the options object. When calling `reveal` with `{ focus: true }`, the specified element will not only be scrolled into view but also receive focus within the custom tree view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nreveal(element: T, options?: { select?: boolean, focus?: boolean }): Thenable<void>;\n```\n\n----------------------------------------\n\nTITLE: Tab and Whitespace Settings\nDESCRIPTION: Configurations for tab size, spaces vs tabs, and whitespace rendering.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"editor.renderWhitespace\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Creating Command URIs with Parameters\nDESCRIPTION: This hover provider example demonstrates how to create a command URI with arguments by URI-encoding a JSON array of parameters for the 'git.stage' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  vscode.languages.registerHoverProvider(\n    'javascript',\n    new class implements vscode.HoverProvider {\n      provideHover(\n        document: vscode.TextDocument,\n        _position: vscode.Position,\n        _token: vscode.CancellationToken\n      ): vscode.ProviderResult<vscode.Hover> {\n        const args = [{ resourceUri: document.uri }];\n        const stageCommandUri = vscode.Uri.parse(\n          `command:git.stage?${encodeURIComponent(JSON.stringify(args))}`\n        );\n        const contents = new vscode.MarkdownString(`[Stage file](${stageCommandUri})`);\n        contents.isTrusted = true;\n        return new vscode.Hover(contents);\n      }\n    }()\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over VS Code Collection Types\nDESCRIPTION: Example showing how to use the new iterable collection types in vscode.d.ts, specifically demonstrating iteration over a DataTransfer object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst data: vscode.DataTransfer = ...;\nfor (const [mime, item] of data) {\n    const str = await item.asString();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Multi-Diff Editor in settings.json\nDESCRIPTION: This JSON setting enables the experimental multi-file diff editor feature in VS Code. Set this to `true` in `settings.json` to try the preview feature, which allows viewing changes across multiple files in a single view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"multiDiffEditor.experimental.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Basic Build Task for Clang++ - VS Code tasks.json Configuration - json\nDESCRIPTION: This JSON snippet provides a canonical tasks.json configuration for compiling C++ files with clang++ in VS Code on macOS. It defines a default build task that compiles the active file and outputs an executable with the same basename. Required dependencies are clang++ and VS Code's C++ extension. The configuration uses task variables such as ${file} and ${fileDirname}, expects a C++ source file open, and outputs an executable to the source's directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"type\": \"cppbuild\",\n            \"label\": \"C/C++: clang++ build active file\",\n            \"command\": \"/usr/bin/clang++\",\n            \"args\": [\n                \"-fcolor-diagnostics\",\n                \"-fansi-escape-codes\",\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}/${fileBasenameNoExtension}\"\n            ],\n            \"options\": {\n                \"cwd\": \"${fileDirname}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"detail\": \"Task generated by Debugger.\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Folding Range Provider in VS Code Extensions (TypeScript)\nDESCRIPTION: Defines the `registerFoldingRangeProvider` function signature within the VS Code extension API. This function allows language extensions to register a provider responsible for computing syntax-aware folding ranges within documents specified by the `selector`. It accepts a `DocumentSelector` and a `FoldingRangeProvider` implementation, returning a `Disposable` object which can be used to unregister the provider. The API supports multiple providers per language, merging their results and handling overlaps based on position and registration order.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n   /**\n    * Register a folding range provider.\n    *\n    * Multiple providers can be registered for a language. In that case providers are asked in\n    * parallel and the results are merged.\n    * If multiple folding ranges start at the same position, only the range of the first registered provider is used.\n    * If a folding range overlaps with an other range that has a smaller position, it is also ignored.\n    *\n    * A failing provider (rejected promise or exception) will\n    * not cause a failure of the whole operation.\n    *\n    * @param selector A selector that defines the documents this provider is applicable to.\n    * @param provider A folding range provider.\n    * @return A [disposable](#Disposable) that unregisters this provider when being disposed.\n    */\n   export function registerFoldingRangeProvider(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Share Security Settings in JSON\nDESCRIPTION: Example of a .vsls.json configuration file used to customize file sharing exclusions in Visual Studio Live Share.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/05/07/live-share-public-preview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n.vsls.json\n```\n\n----------------------------------------\n\nTITLE: Customizing Syntax Highlighting Colors in JSON\nDESCRIPTION: These JSON snippets show how to customize syntax highlighting colors in Visual Studio Code. The first example demonstrates basic token color customization, while the second shows advanced TextMate theme color rule customization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.tokenColorCustomizations\": {\n    \"textMateRules\": [\n        {\n            \"scope\": \"emphasis\",\n            \"settings\": {\n                \"fontStyle\": \"italic\"\n            }\n        },\n        {\n            \"scope\": \"strong\",\n            \"settings\": {\n                \"fontStyle\": \"bold\"\n            }\n        },\n        {\n            \"scope\": \"entity.other.attribute-name\",\n            \"settings\": {\n                \"fontStyle\": \"italic\"\n            }\n        },\n        {\n            \"scope\": \"markup.underline\",\n            \"settings\": {\n                \"fontStyle\": \"underline\"\n            }\n        },\n        {\n            \"scope\": \"markup.bold\",\n            \"settings\": {\n                \"fontStyle\": \"bold\"\n            }\n        },\n        {\n            \"scope\": \"markup.heading\",\n            \"settings\": {\n                \"fontStyle\": \"bold\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Arguments in launch.json\nDESCRIPTION: This configuration demonstrates how to specify different arguments for Windows in a Node.js debugging setup. It uses the 'windows' property to override the global 'args' for Windows environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/debugging-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}/node_modules/gulp/bin/gulpfile.js\",\n            \"args\": [\"myFolder/path/app.js\"],\n            \"windows\": {\n                \"args\": [\"myFolder\\\\path\\\\app.js\"]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Directory Structure in Bash\nDESCRIPTION: This code snippet shows the typical directory structure for a Feature, including the required devcontainer-feature.json configuration file and install.sh script, along with optional additional files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/09/15/dev-container-features.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n+-- feature\n|    +-- devcontainer-feature.json\n|    +-- install.sh\n|    +-- (other files)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote JavaScript Debugging Launch in VS Code (JSON)\nDESCRIPTION: This `launch.json` configuration snippet demonstrates how to set up the new JavaScript debugger (`pwa-msedge` type) for remote debugging. It defines a launch configuration named \"Debug my App\" that targets a web application running on `http://localhost:5000`, typically accessed via port forwarding from a remote workspace like GitHub Codespaces or SSH. Requires the new JavaScript debugger and a running web server on the specified forwarded port.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"pwa-msedge\",\n      \"request\": \"launch\",\n      \"name\": \"Debug my App\",\n      \"url\": \"http://localhost:5000\", // <- debug an app forwarded on port 5000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Source File Paths in launch.json (JSON)\nDESCRIPTION: Shows an example JSON snippet for the `sourceFileMap` property in `launch.json`. It illustrates mapping a compile-time path (`/mnt/c`) to a local source location (`c:\\`) for correct source file resolution during debugging. Multiple mappings can be added, processed in order.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"sourceFileMap\": { \"/mnt/c\": \"c:\\\\\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Domains in VS Code\nDESCRIPTION: This snippet shows how to configure trusted domains in VS Code to manage outgoing link protection. It demonstrates adding a trusted domain pattern to allow links from specific websites.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/editingevolved.md#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n// You can use the \"Manage Trusted Domains\" command to open this file.\n// Save this file to apply the trusted domains rules.\n[\n  \"*.twitter.com\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Presentation with Auto-close in VS Code\nDESCRIPTION: JSON configuration for a shell task that automatically closes its terminal when the task completes. The task runs a Node.js script with a silent presentation mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"shell\",\n  \"command\": \"node build/lib/preLaunch.js\",\n  \"label\": \"Ensure Prelaunch Dependencies\",\n  \"presentation\": {\n    \"reveal\": \"silent\",\n    \"close\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WSL Server Prerequisites on Debian/Ubuntu using apt-get\nDESCRIPTION: Updates the APT package index and installs 'wget' and 'ca-certificates' required by the VS Code server in some WSL environments. This command runs in a Debian or Ubuntu shell and requires sudo privileges.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update && sudo apt-get install wget ca-certificates\n\n```\n\n----------------------------------------\n\nTITLE: Opening Current Folder and Specific File in Visual Studio Code\nDESCRIPTION: Shows how to open the current folder and a specific file within that folder using a single command-line instruction in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_5_0.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncode . HelloWorld.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Dotfiles Repository Integration in settings.json (JSON)\nDESCRIPTION: This JSON snippet shows how to configure VS Code's user `settings.json` to automatically clone and set up dotfiles from a specified GitHub repository into new Dev Containers. It requires specifying the repository URL (`dotfiles.repository`), the target path inside the container (`dotfiles.targetPath`), and the command to execute for installation (`dotfiles.installCommand`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotfiles.repository\": \"your-github-id/your-dotfiles-repo\",\n    \"dotfiles.targetPath\": \"~/dotfiles\",\n    \"dotfiles.installCommand\": \"install.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Organize Imports on Save with editor.codeActionsOnSave\nDESCRIPTION: JSON configuration to enable automatic organization of imports when saving TypeScript and TypeScriptReact files. This setting utilizes the editor.codeActionsOnSave feature to run the source.organizeImports action automatically on file save.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"[typescript]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n},\n\"[typescriptreact]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Including Additional Languages for Emmet\nDESCRIPTION: JSON setting to enable Emmet abbreviation expansion in additional file types using language mappings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.includeLanguages\": {\n  \"javascript\": \"javascriptreact\",\n  \"razor\": \"html\",\n  \"plaintext\": \"pug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Drop Edit Provider in TypeScript\nDESCRIPTION: Shows how to implement a DocumentDropEditProvider that handles file drops with double copy operations between processes. This is the original implementation before performance improvements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass CreateFileDropProvider implements vscode.DocumentDropEditProvider {\n    async provideDocumentDropEdits(_document: vscode.TextDocument, _position: vscode.Position, dataTransfer: vscode.DataTransfer, _token: vscode.CancellationToken): Promise<vscode.DocumentDropEdit | undefined> {\n        const pngFile = dataTransfer.get('image/png')?.asFile();\n        if (!pngFile) {\n            return;\n        }\n\n        // Read file\n        // This results in the entire file contents being copied over to the extension host.\n        const contents = await pngFile.data();\n\n        // Now create a workspace edit that writes the file into the workspace\n        // This results in the same file contents from above being copied back again.\n        const additionalEdit = new vscode.WorkspaceEdit();\n        const path = vscode.Uri.joinPath(vscode.workspace.workspaceFolders![0].uri, 'image.png');\n        additionalEdit.createFile(path, { contents });\n\n        const edit = new vscode.DocumentDropEdit(path.fsPath);\n        edit.additionalEdit = additionalEdit;\n        return edit;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogOutputChannel Interface with LogLevel in VS Code API (TypeScript)\nDESCRIPTION: TypeScript interface definition for the proposed `LogOutputChannel` in the VS Code API. It extends the standard `OutputChannel` by adding a read-only `logLevel` property to get the current logging level and an `onDidChangeLogLevel` event (of type `Event<LogLevel>`) that fires when the channel's log level changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A channel for containing log output.\n */\nexport interface LogOutputChannel extends OutputChannel {\n\n    /**\n     * The current log level of the channel.\n     * Defaults to application {@link env.logLevel application log level}.\n     */\n    readonly logLevel: LogLevel;\n\n    /**\n     * An {@link Event} which fires when the log level of the channel changes.\n     */\n    readonly onDidChangeLogLevel: Event<LogLevel>;\n    ...\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running .NET Application\nDESCRIPTION: Command to build and run a .NET application using the .NET CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/dotnet.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code as Default Text Editor via xdg-mime\nDESCRIPTION: Uses the `xdg-mime default` command to associate the `code.desktop` application handler with the `text/plain` MIME type. This makes VS Code the default editor when opening text files through `xdg-open` in desktop environments respecting XDG standards. Requires `xdg-utils` and a valid `code.desktop` file installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nxdg-mime default code.desktop text/plain\n```\n\n----------------------------------------\n\nTITLE: Defining WebAssembly Interface Types for Calculator Component\nDESCRIPTION: WIT file defining the interface for a calculator component with basic arithmetic operations using the WebAssembly Interface Type format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_0\n\nLANGUAGE: wit\nCODE:\n```\npackage vscode:example;\n\ninterface types {\n\trecord operands {\n\t\tleft: u32,\n\t\tright: u32\n\t}\n\n\tvariant operation {\n\t\tadd(operands),\n\t\tsub(operands),\n\t\tmul(operands),\n\t\tdiv(operands)\n\t}\n}\nworld calculator {\n\tuse types.{ operation };\n\n\texport calc: func(o: operation) -> u32;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Modal Information Message with Details in VS Code\nDESCRIPTION: This snippet demonstrates how to display a modal information message with additional details using the VS Code API. The message includes a main text and a more detailed explanation rendered less prominently.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.showInformationMessage('This is the message', {\n  modal: true,\n  detail: 'This is the detail. Rendered less prominent, but with more space for, well, details.'\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Chat Variables with #\nDESCRIPTION: Shows the `#` symbol used in the Copilot chat input field to trigger the display and selection of available chat variables, which allow referencing specific context like files or the entire codebase.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n`#`\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration for Git Input Validation\nDESCRIPTION: VSCode settings for enabling Git commit message input validation. Controls whether language diagnostics are used to provide better validation for authoring commit messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"git.inputValidation\": true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PATH Variable Behavior in Login Shell\nDESCRIPTION: Shell script that demonstrates how PATH variable gets modified when launching a login shell within another shell. Shows how the PATH order can become jumbled due to login shell initialization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# Add /test to the beginning of $PATH\nexport PATH=/test:$PATH\n# Echo $PATH, /test should be at the beginning\necho $PATH\n# Run bash as a login shell\nbash -l\n# Echo $PATH, the values should be jumbled\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Enabling Scrollable Output Regions in Visual Studio Code Notebooks\nDESCRIPTION: This configuration enables scrollable output regions in Visual Studio Code notebooks. When set to true, outputs and errors exceeding the 'notebook.output.textLineLimit' will render within a scrollable region.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"notebook.output.scrolling\": true\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Pointer Usage Enumeration in XSD\nDESCRIPTION: This XSD simpleType, `SmartPointerUsage`, defines an enumeration specifying the syntactic usage level of a smart pointer type within debugger expressions. It restricts a normalized string to three values: `Minimal` (dereference, comparison), `Indexable` (Minimal plus indexing/offset operators), and `Full` (includes conversion operator to underlying pointer). This determines which operators are overloaded for the smart pointer type in the Natvis definition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<xs:simpleType name=\"SmartPointerUsage\">\n    <xs:annotation>\n      <xs:documentation>Specifies how a smart pointer may be used syntactically.</xs:documentation>\n    </xs:annotation>\n    <xs:restriction base=\"xs:normalizedString\">\n      <xs:enumeration value=\"Minimal\">\n        <xs:annotation>\n          <xs:documentation>\n            Indicates that the smart pointer may be used syntactically only for the purposes of dereferencing and comparing.\n            It defines the following overloaded operators:\n            - operator*()    (dereference)\n            - operator->()   (access field of dereferenced value)\n            - operator==()   (compare with raw pointer or another smart pointer of the same type)\n            - operator!=()   (compare with raw pointer or another smart pointer of the same type)\n          </xs:documentation>\n        </xs:annotation>\n      </xs:enumeration>\n      <xs:enumeration value=\"Indexable\">\n        <xs:annotation>\n          <xs:documentation>\n            Indicates that the smart pointer may be used syntactically for the purposes of dereferencing and comparing, and indexing\n            It defines the following overloaded operators:\n            - operator+()  (add an offset of type size_t)\n            - operator-()  (subtract an offset of type size_t)\n            - operator[]   (add an offset of type size_t and dereference)\n            - All of the operators supported by SmartPointerUsage=&quot;Minimal&quot;\n          </xs:documentation>\n        </xs:annotation>\n      </xs:enumeration>\n      <xs:enumeration value=\"Full\">\n        <xs:annotation>\n          <xs:documentation>\n            Indicates that the smart pointer will contain a conversion operator to the underlying pointer. All valid uses of the underlying pointer in the language may be used through the conversion operator. Direct assignment to the smart pointer is still forbidden; in order to modify the internal pointer in an expression, you must do so explicitly.\n          </xs:documentation>\n        </xs:annotation>\n      </xs:enumeration>\n    </xs:restriction>\n  </xs:simpleType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container for FastAPI and Redis in VS Code\nDESCRIPTION: This JSON configuration sets up a Dev Container for a FastAPI project with Redis. It specifies the Python version, installs Redis Server, sets up post-creation commands to install dependencies, and configures VS Code extensions for Python development.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"postCreateCommand\": \"pip3 install --user -r requirements.txt\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"ms-python.python\",\n                \"ms-python.vscode-pylance\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Terminal Link Provider in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the `window.registerTerminalLinkProvider` API to create custom links within the VS Code integrated terminal. It defines a provider that finds the first occurrence of the word \"test\" on a line and creates a link for it. Clicking the link triggers the `handleTerminalLink` function, displaying an information message with associated data. This API is now stable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nwindow.registerTerminalLinkProvider({\n    provideTerminalLinks: (context, token) => {\n        // Detect the first instance of the word \"test\" if it exists and linkify it\n        const startIndex = (context.line as string).indexOf('test');\n        if (startIndex === -1) {\n            return [];\n        }\n        // Return an array of link results, this example only returns a single link\n        return [\n            {\n                startIndex,\n                length: 'test'.length,\n                tooltip: 'Show a notification',\n                // You can return data in this object to access inside handleTerminalLink\n                data: 'Example data'\n            }\n        ];\n    },\n    handleTerminalLink: (link: any) => {\n        vscode.window.showInformationMessage(`Link activated (data = ${link.data})`);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Shortcuts for Breadcrumbs Navigation in VS Code\nDESCRIPTION: Keyboard shortcuts to navigate and interact with the new breadcrumbs feature in Visual Studio Code. These commands allow users to focus, select, and navigate breadcrumb elements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(breadcrumbs.focusAndSelect)\nkb(breadcrumbs.focusPrevious)\nkb(breadcrumbs.focusNext)\nkb(breadcrumbs.focus)\nkb(breadcrumbs.revealFocused)\n```\n\n----------------------------------------\n\nTITLE: Executing Terminal File Paths With Line Numbers\nDESCRIPTION: Various supported file path formats for terminal links, including line and column number specifications. These formats work with file paths containing spaces and special characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nFile \"<path>\", line <line>\n<path>(<line>,<col>) : ...\n<file>:<line>\n<file>:<line>:<column>\n<file> <line>\n<file> <line>:<column>\n<file>(<line>)\n<file>(<line>,<column>)\n<file>(<line>, <column>)\n<file> (<line>)\n<file> (<line>,<column>)\n<file> (<line>, <column>)\n```\n\n----------------------------------------\n\nTITLE: Inverting Conditions in Java Boolean Expression\nDESCRIPTION: Example showing the invert conditions refactoring, where a compound boolean condition is transformed into its logical inverse by applying De Morgan's laws.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic void method(int value) {\n  if (value > 5 && value < 15) {\n    // do something\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method(int value) {\n  if (value <= 5 || value >= 15) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Views to Move Between Sidebar and Panel in VS Code - JSON\nDESCRIPTION: This snippet enables an experimental feature that lets users move certain views between the Sidebar and Panel in VS Code using the view's context menu. Set 'workbench.view.experimental.allowMovingToNewContainer' to true in your settings to activate the feature. The setting may change in the future and currently affects only specific views. Prerequisite: recent VS Code version with experimental features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"workbench.view.experimental.allowMovingToNewContainer\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSConfig for JavaScript Type Checking\nDESCRIPTION: Demonstrates how to configure a jsconfig.json file to enable TypeScript type checking for all JavaScript files in a project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"checkJs\": true\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Post-Render Hook for HTML Notebooks (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how an extension can use the experimental API to customize HTML rendering in notebooks. Within the `activate` function, it retrieves the built-in HTML renderer (`vscode.builtin-renderer`) using the `RendererContext` and registers a `postRender` hook via `experimental_registerHtmlRenderingHook`. This hook allows the extension to modify the rendered HTML element (`element`) for a given output item (`outputItem`) after the initial rendering is complete.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RendererContext } from 'vscode-notebook-renderer';\n\nexport async function activate(ctx: RendererContext<void>) {\n  const htmlRenderer = await ctx.getRenderer('vscode.builtin-renderer');\n  if (!htmlRenderer) {\n      throw new Error(`Could not load 'vscode.builtin-renderer'`);\n  }\n\n  htmlRenderer.experimental_registerHtmlRenderingHook({\n    // Invoked after the HTML content for `outputItem` has been rendered to `element`\n    postRender(outputItem: OutputItem, element: HTMLElement): HTMLElement | undefined {\n      // You can either modify `element` or return a replacement element\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating devcontainer.json in User Data Folder for Dev Containers in VS Code\nDESCRIPTION: This snippet shows the structure of a devcontainer.json file that can be created in the user data folder instead of the repository. It allows users to set up dev container configurations without creating outgoing changes in the repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_86.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Dev Container\",\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\",\n        \"options\": [\n            \"--network=host\",\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MinGW-w64 Toolchain with MSYS2 - Shell Script\nDESCRIPTION: This shell snippet demonstrates how to install the MinGW-w64 toolchain (including GCC, g++, and GDB) using pacman inside an MSYS2 terminal on Windows. The command installs both the base development tools and the full UCRT MinGW-w64 toolchain. Users must run this in the MSYS2 terminal after installing MSYS2; interactive input may be required to confirm package selections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-mingw.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain\n```\n\n----------------------------------------\n\nTITLE: Manually Adding VS Code to PATH in Bash (macOS)\nDESCRIPTION: Appends a command to the user's Bash profile (`~/.bash_profile`) using a heredoc to add the Visual Studio Code executable directory to the system's PATH environment variable. This enables launching VS Code from any Bash terminal via the 'code' command after restarting the terminal. The escaped `\\$PATH` ensures the variable is expanded correctly when the profile is loaded, not during the append.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/mac.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF >> ~/.bash_profile\n# Add Visual Studio Code (code)\nexport PATH=\"\\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Powerline Font in VS Code Settings (JSON)\nDESCRIPTION: Sets the editor's font family to a specific Powerline-patched font ('DejaVu Sans Mono for Powerline'). This allows the terminal (and editor) to correctly render special glyphs used by tools like Powerline or Starship. This setting is placed within the VS Code `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.fontFamily\": \"'DejaVu Sans Mono for Powerline'\"\n```\n\n----------------------------------------\n\nTITLE: Listing and Setting Default WSL Distribution – PowerShell\nDESCRIPTION: This snippet illustrates how to use PowerShell to list all installed Windows Subsystem for Linux (WSL) distributions and set the default WSL distribution. It is helpful for resolving launch failures in the VS Code terminal when WSL is selected as the default shell. Dependencies: Requires WSL installed on Windows 10 or later. `wslconfig.exe /l` lists available distributions and places (default) next to the current default. `wslconfig.exe /setdefault` sets the default distribution. The input to /setdefault must match the distribution name as listed. The commands output distribution information or change the system configuration as appropriate.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/troubleshoot-terminal-launch.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwslconfig.exe /l\nwslconfig.exe /setdefault \"distributionNameAsShownInList\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Suggestions for HTML Files in VS Code\nDESCRIPTION: JSON configuration to enable automatic Emmet completions in HTML string attributes without manual triggering. This setting enables quick suggestions for strings in HTML files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[html]\": {\n    \"editor.quickSuggestions\": {\n        \"other\": true,\n        \"comments\": false,\n        \"strings\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Indent Guide Colors in VS Code\nDESCRIPTION: JSON configuration to customize the active indent guide background color in VS Code's editor through the workbench.colorCustomizations setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"editorIndentGuide.activeBackground\": \"#ff0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration for ESBuild\nDESCRIPTION: NPM scripts configuration for building, watching, and testing VSCode web extensions using ESBuild and TypeScript.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vscode:prepublish\": \"npm run package-web\",\n    \"compile-web\": \"npm run check-types && node esbuild.js\",\n    \"watch-web\": \"npm-run-all -p watch-web:*\",\n    \"watch-web:esbuild\": \"node esbuild.js --watch\",\n    \"watch-web:tsc\": \"tsc --noEmit --watch --project tsconfig.json\",\n    \"package-web\": \"npm run check-types && node esbuild.js --production\",\n    \"check-types\": \"tsc --noEmit\",\n    \"pretest\": \"npm run compile-web\",\n    \"test\": \"vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/suite/extensionTests.js\",\n    \"run-in-browser\": \"vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Adapter Executable Command in VS Code Extension (JSON)\nDESCRIPTION: Shows the structure for defining a debug adapter executable command in a VS Code extension's package.json. This allows for dynamic calculation of the debug adapter's executable path and arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"<executable>\",\n  \"args\": [ \"<argument1>\", \"<argument2>\", ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: New VS Code Commands Table\nDESCRIPTION: A markdown table listing new commands added to VS Code, including their key bindings, descriptions, and command IDs. The commands cover notifications, integrated terminal, and extensions functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Command|Command id\n---|-------|----------\n`kb(notifications.showList)`|Show the Notification Center|`notifications.showList`\n`kb(notifications.hideList)`|Hide the Notification Center|`notifications.hideList`\n`kb(notifications.toggleList)`|Toggle the visibility of the Notification Center|`notifications.toggleList`\n`kb(notifications.hideToasts)`|Hide notification toasts|`notifications.hideToasts`\n`kb(notifications.focusToasts)`|Focus first notification toast|`notifications.focusToasts`\n`kb(notifications.focusNextToast)`|Focus next notification toast|`notifications.focusNextToast`\n`kb(notifications.focusPreviousToast)`|Focus previous notification toast|`notifications.focusPreviousToast`\n`kb(notifications.focusFirstToast)`|Focus first notification toast|`notifications.focusFirstToast`\n`kb(notifications.focusLastToast)`|Focus last notification toast|`notifications.focusLastToast`\n`kb(notification.collapse)`|Collapse notification if possible|`notification.collapse`\n`kb(notification.expand)`|Expand notification if possible|`notification.expand`\n`kb(notification.toggle)`|Toggle expansion state of notification if possible|`notification.toggle`\n`kb(notification.clear)`|Clear notification|`notification.clear`\n`kb(notifications.clearAll)`|Clear all notifications|`notifications.clearAll`\nIntegrated Terminal||\n`kb(workbench.action.terminal.split)`|Split Terminal|`workbench.action.terminal.split`\n`kb(workbench.action.terminal.focusNextPane)`|Focus Next Pane| `workbench.action.terminal.focusNextPane`\n`kb(workbench.action.terminal.focusPreviousPane)`|Focus Previous Pane| `workbench.action.terminal.focusPreviousPane`\n`kb(workbench.action.terminal.resizePaneDown)`|Resize Pane Down| `workbench.action.terminal.resizePaneDown)`\n`kb(workbench.action.terminal.resizePaneUp)`|Resize Pane Up|`workbench.action.terminal.resizePaneUp`\n`kb(workbench.action.terminal.resizePaneLeft)`|Resize Pane Left|`workbench.action.terminal.resizePaneLeft`\n`kb(workbench.action.terminal.resizePaneRight)`|Resize Pane Right|`workbench.action.terminal.resizePaneRight`\nExtensions||\n`kb(workbench.extensions.action.reinstall)`|Reinstall Extension|`workbench.extensions.action.reinstall`\n`kb(workbench.action.reloadWindowWithExtensionsDisabled)`|Reload with Extensions Disabled|`workbench.action.reloadWindowWithExtensionsDisabled`\n```\n\n----------------------------------------\n\nTITLE: Rich Formatting Schema Example\nDESCRIPTION: Schema showing how to use markdown formatting in property descriptions for enhanced hover information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n   \"type\": \"object\",\n   \"properties\": {\n       \"name\" : {\n           \"type\": \"string\",\n           \"description\": \"The name of the entry\",\n           \"markdownDescription\": \"The name of the entry. [See the documentation](https://example.com)\"\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Workspace Terminal Configuration in VS Code JSON Settings\nDESCRIPTION: This JSON setting, `terminal.integrated.allowWorkspaceConfiguration`, when set to `true`, allows VS Code to apply terminal configurations defined within the current workspace's `.vscode/settings.json` file. This opt-in setting was introduced due to security concerns in untrusted workspaces, replacing a previous prompt. It is noted that this setting might be dangerous in untrusted environments and will likely be superseded by the Workspace Trust feature once it's enabled by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.allowWorkspaceConfiguration\": true\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code as Git Merge Tool in Bash\nDESCRIPTION: These Bash commands configure Git globally to use Visual Studio Code as the default merge tool. The first command sets the 'merge.tool' property to 'vscode', and the second command defines the specific command-line instruction for Git to launch VS Code ('code --wait $MERGED'), ensuring Git waits for the merge process in VS Code to complete.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global merge.tool vscode\ngit config --global mergetool.vscode.cmd 'code --wait $MERGED'\n```\n\n----------------------------------------\n\nTITLE: Posting a Message from Extension to Webview (TypeScript)\nDESCRIPTION: Shows how a VS Code extension can post messages to the associated webview using the 'postMessage' API. The sent object can include fields such as 'type' and arbitrary payload like 'requestedBreed'. The webview must register a message handler to respond to these messages. Dependencies include 'webview' instance and serialization of the message object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwebview.postMessage({\n  type: 'change-cats',\n  requestedBreed: 'siberian'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering File Trees in VS Code Chat\nDESCRIPTION: Demonstrates how to create and render a file tree control for workspace preview functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a file tree instance\nvar tree: vscode.ChatResponseFileTree[] = [\n    { name: 'myworkspace', children: [\n        { name: 'README.md' },\n        { name: 'app.js' },\n        { name: 'package.json' }\n    ]}\n];\n\n// Render the file tree control at a base location\nstream.filetree(tree, baseLocation);\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Sticky Scroll in VS Code\nDESCRIPTION: This setting enables sticky scroll functionality in the VS Code integrated terminal, which keeps the prompt of the command at the top of the viewport.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"terminal.integrated.stickyScroll.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum to Identify TestItem Types in VS Code Testing API\nDESCRIPTION: Shows how to implement a simple type system for TestItems using an enum and a WeakMap. This pattern allows distinguishing between different types of test items, such as files and test cases.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum ItemType {\n  File,\n  TestCase,\n}\n\nconst testData = new WeakMap<vscode.TestItem, ItemType>();\n\nconst getType = (testItem: vscode.TestItem) => testData.get(testItem)!;\n```\n\n----------------------------------------\n\nTITLE: Configuring onWalkthrough Activation Event in VS Code Extension\nDESCRIPTION: This code snippet shows how to specify the onWalkthrough activation event in a VS Code extension's manifest. It's emitted when a specified walkthrough is opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onWalkthrough:nodejsWelcome\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Shell and Automation Shell in VS Code\nDESCRIPTION: Configuration that sets different shells for the integrated terminal and automation tasks. This is useful when using shells like tmux that don't work well with automation tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shell.osx\": \"/Users/user/bin/tmux_script\"\n\"terminal.integrated.automationShell.osx\": \"bash\",\n```\n\n----------------------------------------\n\nTITLE: Defining Duplicate Modifier Keybindings in VS Code - JSON\nDESCRIPTION: This snippet defines a custom keybinding in VS Code's keybindings.json file for invoking the quick open command using 'shift shift'. To use it, add this entry to keybindings.json in your VS Code configuration. The 'key' property specifies the keyboard shortcut, and 'command' names the VS Code action to trigger. Valid values for 'key' include duplicate modifiers, such as 'shift shift', 'alt alt', etc. Outputs include the ability to trigger quick open by pressing the specified modifier twice. Requires VS Code version with support for modifier-only keybindings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"shift shift\", \"command\": \"workbench.action.quickOpen\" }\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group on Linux (Bash)\nDESCRIPTION: This bash command adds the currently logged-in user (`$USER`) to the `docker` group using `usermod`. This step is necessary on Linux after installing Docker to allow the user to interact with the Docker daemon without requiring root privileges (sudo) for every command. A sign-out and sign-in is required for the change to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcut for VS Code Task (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define a custom keyboard shortcut in the `keybindings.json` file to execute a specific VS Code task. It binds the 'Ctrl+H' key combination to the `workbench.action.tasks.runTask` command, passing the name of the task ('Run tests') as an argument (`args`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+h\",\n    \"command\": \"workbench.action.tasks.runTask\",\n    \"args\": \"Run tests\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom lldb-mi Path in launch.json (JSON)\nDESCRIPTION: Demonstrates how to add the `miDebuggerPath` property to a VS Code `launch.json` configuration. This setting explicitly tells the C/C++ extension where to find the `lldb-mi` executable, which is necessary when using an `lldb-mi` located outside the default extension path, such as a custom build or one placed alongside a non-standard `LLDB.framework` location (e.g., `/Users/default/example/lldb-mi`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/lldb-mi.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"miDebuggerPath\": \"/Users/default/example/lldb-mi\"\n```\n\n----------------------------------------\n\nTITLE: ProxyCommand Configuration for Jump Box Setup\nDESCRIPTION: SSH configuration demonstrating how to set up a jump box connection using ProxyCommand to access machines behind a firewall.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/03/remote-ssh-tips-and-tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Jump box with public IP address\nHost jump-box\n    HostName 52.179.157.97\n    User sana\n    IdentityFile ~/.ssh/jumpbox\n\n# Target machine with private IP address\nHost target-box\n    HostName <IP address of target>\n    User sana\n    IdentityFile ~/.ssh/target\n    ProxyCommand ssh -q -W %h:%p jump-box\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Application\nDESCRIPTION: Command to create a new Angular application using the Angular CLI\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng new my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for LLDB-MI Debuggers - Visual Studio Code - JSON\nDESCRIPTION: This snippet demonstrates the default logging configuration block for macOS LLDB-MI debuggers within the launch.json file of Visual Studio Code. To enable specific logs, set the corresponding boolean flags (\"trace\", \"traceResponse\", or \"engineLogging\") to true. These properties control tracing the protocol, responses, and low-level engine communication between VS Code, the CppTools extension, and the LLDB-MI debugger. The expected input is a JSON object under the \"logging\" key, and outputs are directed to the output and debug panels as logs. Ensure launch.json is present in your project's .vscode directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/enable-logging-cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"logging\\\": {\\n        \\\"trace\\\": false,\\n        \\\"traceResponse\\\": false,\\n        \\\"engineLogging\\\": false\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: TreeView Expand/Collapse Event Listeners for VS Code Extensions\nDESCRIPTION: TypeScript definitions for events that fire when elements in a custom TreeView are expanded or collapsed. These events allow extension authors to react to tree state changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Event that is fired when an element is expanded\n */\nreadonly onDidExpandElement: Event<TreeViewExpansionEvent<T>>;\n\n/**\n * Event that is fired when an element is collapsed\n */\nreadonly onDidCollapseElement: Event<TreeViewExpansionEvent<T>>;\n\nexport interface TreeViewExpansionEvent<T> {\n\n   /**\n    * Element that is expanded or collapsed.\n    */\n   element: T;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indent Guides in VS Code Settings\nDESCRIPTION: This snippet shows how to disable indent guides in the VS Code editor. It uses a JSON-style setting to configure the editor's appearance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.guides.indentation\": false\n```\n\n----------------------------------------\n\nTITLE: Configure Rust-Analyzer Check Command for Clippy\nDESCRIPTION: References the VS Code setting key `rust-analyzer.check.command`. To enable more comprehensive linting with `clippy`, this setting should be changed from its default value (`check`) to `clippy` in the VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nrust-analyzer.check.command\n```\n\n----------------------------------------\n\nTITLE: VS Code Terminal Shell Integration Settings\nDESCRIPTION: Configuration settings for terminal shell integration features including command decorations and history management.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.shellIntegration.enabled\": true,\n  \"terminal.integrated.shellIntegration.decorationsEnabled\": true,\n  \"terminal.integrated.shellIntegration.history\": true\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Pipeline Configuration\nDESCRIPTION: GitLab CI configuration for testing VS Code extensions in Docker containers with xvfb support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/continuous-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:12-buster\n\nbefore_script:\n  - npm install\n\ntest:\n  script:\n    - |\n      apt update\n      apt install -y libasound2 libgbm1 libgtk-3-0 libnss3 xvfb\n      xvfb-run -a npm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Features and Installation Order in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify Dev Container Features and override their installation order in a devcontainer.json file. It shows the use of the 'features' and 'overrideFeatureInstallOrder' properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/09/15/dev-container-features.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n      \"ghcr.io/devcontainers/features/java:1\",\n      \"ghcr.io/devcontainers/features/node:1\",\n  },\n  \"overrideFeatureInstallOrder\": [\n    \"ghcr.io/devcontainers/features/node\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Type Hierarchy Provider in VS Code Extension\nDESCRIPTION: Interface for implementing type hierarchy provider that allows extensions to provide supertypes and subtypes for symbols. This is a proposed API that requires VS Code Insiders build.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nTypeHierarchyProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Workspace Trust Support in package.json\nDESCRIPTION: Demonstrates how to configure limited support for untrusted workspaces with restricted configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"capabilities\": {\n  \"untrustedWorkspaces\": {\n    \"supported\": \"limited\",\n    \"restrictedConfigurations\": [\n      \"markdown.styles\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Debug Adapter Inside Extension in TypeScript\nDESCRIPTION: Code snippet demonstrating how to intercept the launch of a debug session and run the debug adapter inside the extension for easier development and debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nEMBED_DEBUG_ADAPTER\n```\n\n----------------------------------------\n\nTITLE: Creating New F# Console Application\nDESCRIPTION: Command to initialize a new F# console application project using the .NET CLI with language specification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/dotnet.md#2025-04-23_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\ndotnet new console -lang \"F#\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Workspace Mount Configuration in devcontainer.json\nDESCRIPTION: Configuration example showing how to modify the default workspace mount behavior in a dev container. This snippet demonstrates setting a custom source directory and target mount point using the workspaceMount and workspaceFolder properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/change-default-source-mount.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=${localWorkspaceFolder}/sub-folder,target=/workspace,type=bind\",\n\"workspaceFolder\": \"/workspace\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Preferred Code Action Keybinding\nDESCRIPTION: JSON configuration for creating a keyboard shortcut to trigger a preferred refactoring action.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.constant\",\n    \"preferred\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Notebook Format on Save in Visual Studio Code\nDESCRIPTION: This code snippet demonstrates how to enable automatic formatting of notebooks when saving in Visual Studio Code. It requires setting the 'notebook.formatOnSave.enabled' configuration option to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"notebook.formatOnSave.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Runserver Arguments for Hot Reloading\nDESCRIPTION: Configuration for the Python attribute in tasks.json to enable hot reloading in Django by removing the --noreload and --nothreading flags from the runserver command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"dockerRun\": {\n    \"volumes\": [\n      {\n        \"containerPath\": \"/app\", \"localPath\": \"${workspaceFolder}\"\n      }\n    ]\n  },\n  \"python\": {\n    \"args\": [\n      \"runserver\",\n      \"0.0.0.0:8000\",\n    ],\n    \"file\": \"manage.py\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Containers\nDESCRIPTION: Command to stop and remove all containers defined in the docker-compose configuration. This frees up system resources and releases any ports being used by the containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/31/inspecting-containers.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot Chat Settings\nDESCRIPTION: JSON configuration for enabling notebook generation improvements in GitHub Copilot, including iterative fixing and improving capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_81.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.notebook\": {\n    \"iterativeFixing\": true,\n    \"iterativeImproving\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning HTML Content to a VS Code Webview (TypeScript)\nDESCRIPTION: Sets the HTML content of a webview by assigning a string to the 'html' property of the webview object. This example shows a minimal HTML page embedding an image using an external URL. It's essential that scripts and resources are permitted only if required via webview options to maintain security.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwebview.html = `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n</head>\n<body>\n    <img src='https://media.giphy.com/media/vFKqnCdLPNOKc/giphy.gif'>\n</body>\n</html>\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Host for Remote Connections in VS Code settings.json\nDESCRIPTION: This JSON snippet shows how to configure the Docker extension in VS Code to connect to a remote Docker host. It sets the DOCKER_HOST environment variable to use a local port forwarded via SSH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"docker.environment\": {\n    \"DOCKER_HOST\": \"tcp://localhost:23750\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the RelativePattern Class in VS Code API (TypeScript)\nDESCRIPTION: This snippet defines the RelativePattern class in TypeScript, a utility that constructs glob patterns relative to a base directory or a workspace folder. It includes documentation for all class properties and constructor, enabling robust file matching in extensions via APIs like workspace.findFiles or createFileSystemWatcher. Dependencies include the vscode workspace API and, optionally, WorkspaceFolder type; the key parameters are the base file path and the glob pattern string. The expected input is a base path and a glob pattern, and the class produces a pattern object with these fields for use with compatible VS Code APIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\\n * A relative pattern is a helper to construct glob patterns that are matched\\n * relatively to a base path. The base path can either be an absolute file path\\n * or a [workspace folder](#WorkspaceFolder).\\n */\\nclass RelativePattern {\\n\\n  /**\\n   * A base file path to which this pattern will be matched against relatively.\\n   */\\n  base: string;\\n\\n  /**\\n   * A file glob pattern like `*.{ts,js}` that will be matched on file paths\\n   * relative to the base path.\\n   *\\n   * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\\n   * the file glob pattern will match on `index.js`.\\n   */\\n  pattern: string;\\n\\n  /**\\n   * Creates a new relative pattern object with a base path and pattern to match. This pattern\\n   * will be matched on file paths relative to the base path.\\n   *\\n   * @param base A base file path to which this pattern will be matched against relatively.\\n   * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on file paths\\n   * relative to the base path.\\n   */\\n  constructor(base: WorkspaceFolder | string, pattern: string)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit4 Maven Dependencies\nDESCRIPTION: Maven configuration snippet for adding JUnit4 test dependencies to a Java project's pom.xml file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>(YOUR_JUNIT_VERSION)</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Associating Multiple File Extensions with PHP in VS Code\nDESCRIPTION: JSON configuration example that associates multiple custom file extensions (.php4, .php5) with the PHP language. This setting allows VS Code to recognize these files as PHP and provide appropriate language features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"files.associations\": {\n    \"*.php4\": \"php\",\n    \"*.php5\": \"php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Enter Key to Insert Custom Text (VS Code keybindings.json, JSON)\nDESCRIPTION: Demonstrates how to override the default Enter key behavior in VS Code by binding it to a 'type' command that inserts the string 'Hello World' at the cursor position when 'editorTextFocus' is true. No additional dependencies beyond VS Code's keybindings.json are required. The 'key' is the input key, 'command' sets the action, 'args' provides command arguments (here, the text to insert), and 'when' defines the context in which the keybinding is active.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"enter\", \"command\": \"type\",\n                  \"args\": { \"text\": \"Hello World\" },\n                  \"when\": \"editorTextFocus\" }\n```\n\n----------------------------------------\n\nTITLE: Adding VS Code Repository on openSUSE/SLE\nDESCRIPTION: Imports the Microsoft GPG key using `rpm --import` and creates the `zypper` repository configuration file (`/etc/zypp/repos.d/vscode.repo`) needed to install and update VS Code using the `zypper` package manager. This leverages the same YUM repository definition as RHEL-based systems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\necho -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\nautorefresh=1\\ntype=rpm-md\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" |sudo tee /etc/zypp/repos.d/vscode.repo > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Word Separator Characters in VS Code\nDESCRIPTION: JSON configuration for the terminal.integrated.wordSeparators setting which defines the characters used to delimit words for double-click word selection in the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_45.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"terminal.integrated.wordSeparators\": \" ()[]{}',\\\"`─\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for JSX Support\nDESCRIPTION: ESLint configuration object to enable JSX support in JavaScript files. This is a workaround for JSX support until VS Code adopts Salsa.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vDecember.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ecmaFeatures\": {\n        \"jsx\": true,\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Resolved Type to Var Type in Java\nDESCRIPTION: Example showing conversion from explicit type declaration to using var for type inference, leveraging Java 10+ language features for more concise code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nString s = \"\";\n```\n\nLANGUAGE: java\nCODE:\n```\nvar s = \"\";\n```\n\n----------------------------------------\n\nTITLE: Creating Express Node.js Project\nDESCRIPTION: Commands to create a new Express.js project and install dependencies using npm\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-node.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx express-generator\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing GVFS for Debian Trash Implementation\nDESCRIPTION: Commands to install required packages for implementing trash functionality in VS Code on Debian systems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install gvfs libglib2.0-bin\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Bindings for Calculator\nDESCRIPTION: Initial Rust code showing how to generate WebAssembly bindings using wit-bindgen procedural macro.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Use a procedural macro to generate bindings for the world we specified in\n// `calculator.wit`\nwit_bindgen::generate!({\n\t// the name of the world in the `*.wit` input file\n\tworld: \"calculator\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Proposed Extension Terminals API (TypeScript)\nDESCRIPTION: This TypeScript snippet showcases the proposed API interfaces for creating Extension Terminals in VS Code. It defines `ExtensionTerminalOptions` (requiring a name and a `Pseudoterminal` implementation) and the `Pseudoterminal` interface itself, which outlines the necessary event emitters (`onDidWrite`, `onDidOverrideDimensions`, `onDidClose`) and methods (`open`, `close`, `handleInput`, `setDimensions`) an extension must provide to manage a custom terminal's lifecycle and I/O. This is a proposed API and requires opting in via `enableProposedApi` in `package.json` and using VS Code Insiders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace window {\n  export function createTerminal(options: ExtensionTerminalOptions): Terminal;\n}\n\nexport interface ExtensionTerminalOptions {\n  name: string;\n  pty: Pseudoterminal;\n}\n\ninterface Pseudoterminal {\n  onDidWrite: Event<string>;\n  onDidOverrideDimensions?: Event<TerminalDimensions | undefined>;\n  onDidClose?: Event<void>;\n  open(initialDimensions: TerminalDimensions | undefined): void;\n  close(): void;\n  handleInput?(data: string): void;\n  setDimensions?(dimensions: TerminalDimensions): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tab Label Patterns in VS Code\nDESCRIPTION: Defines patterns for custom tab labels using file path variables. This example shows how to display HTML files in the src directory with a customized label format of 'directory/filename'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n    \"workbench.editor.customLabels.patterns\": {\n        \"**/src/**/index.html\": \"${dirname}/${filename}\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Scaffolding VS Code Extension with Yeoman\nDESCRIPTION: Uses Yeoman and VS Code Extension Generator to scaffold a new TypeScript extension project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx --package yo --package generator-code -- yo code\n```\n\n----------------------------------------\n\nTITLE: Example Python Terminal Launch Arguments in VS Code\nDESCRIPTION: Example showing how to structure launch arguments for `python.terminal.launchArgs`. Each top-level command-line element separated by a space becomes a separate item in the JSON list. Quoted values containing spaces are treated as a single element. For example, `[\"--a\", \"--b\", \"--c\", \"{\\\"value1\\\" : 1, \\\"value2\\\" : 2}\\\"\"]` corresponds to the command line `--a --b --c \"{\\\"value1\\\" : 1, \\\"value2\\\" : 2}\"`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\"--a\", \"--b\", \"--c\", \"{\\\"value1\\\" : 1, \\\"value2\\\" : 2}\\\"\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Folding Range Provider in Language Server Protocol\nDESCRIPTION: Code demonstrating how to access the folding range provider after breaking changes in the Language Server Protocol. The code gets the provider through the client's feature method using the FoldingRangeRequest method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_83.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclient.getFeature(lsclient.FoldingRangeRequest.method).getProvider(document)?.provider;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Language Suggestions in VS Code Settings - JSON\nDESCRIPTION: Sets preferences for built-in HTML language support features in VS Code. Each setting toggles code suggestion support for Angular v1, Ionic, or standard HTML5 syntax in the editor's suggestion list. Intended for use within `settings.json`; expects boolean values. Requires the built-in VS Code HTML language server. Modify according to project requirements to enable or disable specific tag/property suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Configures if the built-in HTML language suggests Angular V1 tags and properties.\\n\"html.suggest.angular1\": true,\\n\\n// Configures if the built-in HTML language suggests Ionic tags, properties and values.\\n\"html.suggest.ionic\": true,\\n\\n// Configures if the built-in HTML language suggests HTML5 tags, properties and values.\\n\"html.suggest.html5\": true\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Visualizer Type in XSD\nDESCRIPTION: This XSD complexType, `VisualizerType`, defines the core element for a Natvis visualizer entry, customizing the debugger view for a specific type. It requires a `Name` attribute specifying the target type name. It contains optional sequences for alternative types, versioning, intrinsic properties, derived type resolution (`MostDerivedType`), custom visualizers, smart pointer definitions (`SmartPointer`), display strings (`DisplayString`), string views (`StringView`), and expansion rules (`Expand`). Alternatively, it can specify one or more UI visualizers (`UIVisualizer`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"VisualizerType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a visualizer entry which customizes the debugger view of a type.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"AlternativeType\" type=\"AlternativeTypeType\"/>\n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Version\" type=\"VersionType\" />\n      <xs:choice minOccurs=\"0\" maxOccurs=\"1\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Intrinsic\" type=\"IntrinsicType\" />\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"MostDerivedType\" type=\"MostDerivedObjectType\" />\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"CustomVisualizer\" type=\"CustomVisualizerType\" />\n          <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"SmartPointer\" type=\"SmartPointerType\" />\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DisplayString\" type=\"DisplayStringType\"/>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"StringView\" type=\"StringViewType\"/>\n          <xs:element minOccurs=\"0\" name=\"Expand\" type=\"ExpandType\"/>\n        </xs:sequence>\n        <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"UIVisualizer\" type=\"UIVisualizerItemType\"/>\n      </xs:choice>\n    </xs:sequence>\n    <xs:attribute name=\"Name\" type=\"TypeNameType\" use=\"required\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Tree-Sitter Based Syntax Highlighting for CSS in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable experimental Tree-Sitter based syntax highlighting for CSS files in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"editor.experimental.preferTreeSitter.css\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental PowerShell Intellisense in Terminal (JSON)\nDESCRIPTION: This JSON setting enables experimental, VS Code-native IntelliSense suggestions for PowerShell within the integrated terminal. Setting `\"terminal.integrated.shellIntegration.suggestEnabled\"` to `true` in your `settings.json` file activates suggestions triggered by typing `-` or pressing Ctrl+Space. This is an early preview feature and the setting is not currently exposed in the standard settings UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shellIntegration.suggestEnabled\": true\n```\n\n----------------------------------------\n\nTITLE: Verifying TypeScript Compiler Installation (Bash)\nDESCRIPTION: Demonstrates how to check the installed version of the TypeScript compiler (`tsc`) and access its help documentation using command-line flags. This confirms that `tsc` is installed correctly and accessible in the system's PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsc --version\ntsc --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Activation Events with Glob Patterns in JSON\nDESCRIPTION: This snippet demonstrates how to configure an extension's `package.json` to activate when a workspace contains a file matching a specific glob pattern. In this example, the extension activates if any subfolder contains a `.editorconfig` file. This utilizes the `workspaceContains` key within the `activationEvents` array.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  ...\n  \"activationEvents\": [\n    \"workspaceContains:**/.editorconfig\"\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Python Code in VS Code Debug Console (Bash)\nDESCRIPTION: This snippet demonstrates evaluating a Python expression within the VS Code Debug Console while a debugging session is paused. The command `now.strftime(\"%A, %d %B, %Y at %X\")` calls the `strftime` method on the `now` variable (a `datetime` object available in the current debug scope) to format the date and time. The output shows the resulting string representation of the timestamp.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnow.strftime(\"%A, %d %B, %Y at %X\")\n'Wednesday, 31 October, 2018 at 18:13:39'\n```\n\n----------------------------------------\n\nTITLE: Assigning Keyboard Shortcut to Insert Language-Specific Snippet\nDESCRIPTION: This JSON configuration shows how to create a keyboard shortcut that inserts a specific snippet for a particular language in VS Code. It uses the 'langId' and 'name' arguments to reference an existing snippet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+k 1\",\n  \"command\": \"editor.action.insertSnippet\",\n  \"when\": \"editorTextFocus\",\n  \"args\": {\n    \"langId\": \"csharp\",\n    \"name\": \"myFavSnippet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container User in DevContainer JSON\nDESCRIPTION: JSON configuration for specifying the default container user for all processes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"containerUser\": \"user-name-goes-here\"\n```\n\n----------------------------------------\n\nTITLE: Adding test scripts to package.json in JSON\nDESCRIPTION: This snippet demonstrates how to add scripts for compiling and running tests in a VS Code extension project using TypeScript and the VS Code test runner.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"compile-tests\": \"tsc -p . --outDir out\",\n    \"pretest\": \"npm run compile-tests\",\n    \"test\": \"vscode-test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced ListAST Implementation in TypeScript\nDESCRIPTION: Updated ListAST class definition that allows for nested lists as children to improve query performance through balanced tree structures.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass ListAST {\n    constructor(\n        public items: Array<ListAST | BracketPairAST | TextAST>\n    ) {}\n\n    length = items.sum(item => item.length);\n}\n```\n\n----------------------------------------\n\nTITLE: Theme CSS Implementation\nDESCRIPTION: CSS implementation example showing how token colors are defined in the Visual Studio theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n...\n.monaco-editor.vs .token.delimiter          { color: #000000; }\n.monaco-editor.vs .token.keyword            { color: #0000FF; }\n.monaco-editor.vs .token.keyword.flow       { color: #AF00DB; }\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Files for Just My Code Debugging in VS Code\nDESCRIPTION: This TypeScript configuration shows how to use the skipFiles setting in launch configurations to skip code that you don't want to step through during debugging. The example excludes all JavaScript files in node_modules and lib folders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  \"skipFiles\": [\n    \"node_modules/**/*.js\",\n    \"lib/**/*.js\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Smart Send Experimental Feature\nDESCRIPTION: User setting to enable the experimental Python REPL Smart Send feature, which intelligently sends complete code blocks to the Python REPL when running code with Shift+Enter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"python.experiments.optInto\": [\"pythonREPLSmartSend\"]\n```\n\n----------------------------------------\n\nTITLE: Defining id Property for TreeItem State Persistence (TypeScript)\nDESCRIPTION: Presents the TypeScript definition and documentation for the optional `id` property of the `TreeItem` class. Providing a unique `id` across the tree enables VS Code to reliably retain the selection and expansion state of the tree item even if its label or position changes between data updates.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Optional id for the tree item that has to be unique across tree. The id is used to preserve the selection and expansion state of the tree item.\n *\n * If not provided, an id is generated using the tree item's label. **Note** that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.\n */\nid?: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Python REPL Settings\nDESCRIPTION: JSON settings to enable the experimental Python Native REPL with IntelliSense and syntax highlighting features\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"python.REPL.sendToNativeREPL\": true\n```\n\n----------------------------------------\n\nTITLE: Registering HoverProvider for Unsaved TypeScript Documents in VS Code Extension\nDESCRIPTION: This snippet demonstrates how to register a HoverProvider for new, unsaved TypeScript documents using the 'untitled' scheme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/document-selector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerHoverProvider(\n  { scheme: 'untitled', language: 'typescript' },\n  {\n    provideHover(doc: vscode.TextDocument) {\n      return new vscode.Hover('For new, unsaved TypeScript documents only');\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Command in a VS Code Extension\nDESCRIPTION: This snippet shows how to register a command with a handler function in a VS Code extension. The handler function can accept arguments and will be invoked when the command is executed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  const command = 'myExtension.sayHello';\n\n  const commandHandler = (name: string = 'world') => {\n    console.log(`Hello ${name}!!!`);\n  };\n\n  context.subscriptions.push(vscode.commands.registerCommand(command, commandHandler));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unbound Breakpoint Hint Message in JSON\nDESCRIPTION: Illustrates how to configure a custom hint message within a debugger extension's `package.json` that appears when there are unbound breakpoints during an active debug session. The message is defined using the `unverifiedBreakpoints` key within the `strings` property of the debugger contribution point.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"strings\": {\n  \"unverifiedBreakpoints\": \"Message text goes here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to VS Code Remote SSH Host from Terminal\nDESCRIPTION: Invokes VS Code to connect to a remote SSH server and open a specified folder. Uses the '--remote' flag with 'ssh-remote+remote_server' and a file/folder path. Requires VS Code and the Remote - SSH extension to be installed. Behaves differently based on the path provided (file/folder detection).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncode --remote ssh-remote+remote_server /code/my_project\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Tree-Sitter Based Syntax Highlighting for Regex in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable experimental Tree-Sitter based syntax highlighting for regular expressions within TypeScript in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"editor.experimental.preferTreeSitter.regex\": true\n```\n\n----------------------------------------\n\nTITLE: Creating Webview Panel and Loading Local Resources - VS Code Extension - TypeScript\nDESCRIPTION: This snippet demonstrates creating a VS Code webview panel and securely loading a local image using the asWebviewUri and cspSource APIs. It restricts the webview's resource roots to the extension's 'media' directory and sets up a strict Content Security Policy header for images. Requires the 'vscode' Node module, Node.js path utilities, and a valid 'extensionPath'; expects image assets to exist in the designated directory. The input is the extension path and outputs a panel with an image loaded from the extension directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n    // Restrict the webview to only loading local content from our extension's `media` directory.\n    localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst imagePath = vscode.Uri.file(path.join(extensionPath, 'media'));\n\npanel.html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${panel.webview.cspSource} https:;\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\"${panel.webview.asWebviewUri(imagePath)}/cat.gif\" width=\"300\" />\n</body>\n</html>`\n```\n\n----------------------------------------\n\nTITLE: Disabling a Keyboard Shortcut with an Empty Command (VS Code keybindings.json, JSON)\nDESCRIPTION: Shows how to override and effectively disable any keyboard shortcut for a given key ('tab' in this case) by setting the 'command' field to an empty string. This makes the key have no effect in contexts where the binding would otherwise be active. Only VS Code keybindings.json editing is necessary.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// To override and disable any `tab` keyboard shortcut, for example, add in keybindings.json:\n{ \"key\": \"tab\", \"command\": \"\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Image in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to configure a Dev Container image with additional configuration included, simplifying the devcontainer.json file. It specifies a Rust development container image from Microsoft's container registry.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_72.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Keyboard Shortcuts to Skip Shell in settings.json\nDESCRIPTION: Demonstrates customizing the `terminal.integrated.commandsToSkipShell` setting within the VS Code `settings.json` file. This array allows users to specify which commands' keyboard shortcuts should be handled by VS Code itself rather than being passed to the terminal shell. Adding a command ID ensures its shortcut skips the shell, while prefixing with '-' forces the shortcut to be sent to the shell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"terminal.integrated.commandsToSkipShell\": [\n    // Ensure the toggle sidebar visibility keyboard shortcut skips the shell\n    \"workbench.action.toggleSidebarVisibility\",\n    // Send quick open's keyboard shortcut to the shell\n    \"-workbench.action.quickOpen\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Securely Storing Secrets in Remote Extensions\nDESCRIPTION: Extensions can use the SecretStorage API to securely store and retrieve secrets in remote environments, ensuring consistent authentication across different endpoints.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.secrets.store(key, value)\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace-Level Launch Configurations with Scoped Variables in VS Code\nDESCRIPTION: This snippet shows how to define launch configurations at the workspace level, using explicitly scoped variables to reference specific folders. It includes examples of using folder-specific path variables and skip patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"launch\": {\n  \"configurations\": [{\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Launch test\",\n      \"program\": \"${workspaceFolder:Program}/test.js\",\n      \"skipFiles\": [\n        \"${workspaceFolder:Library}/out/**/*.js\"\n      ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Container with Sample Project\nDESCRIPTION: Commands to clone a Rust sample project and start a dev container using the CLI's up command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/05/18/dev-container-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-remote-try-rust\ndevcontainer up --workspace-folder <path-to-vscode-remote-try-rust>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown File Destination Settings in VS Code\nDESCRIPTION: JSON configuration for controlling where new media files are created when copying/pasting into Markdown documents. Uses glob patterns to map document paths to image destinations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"markdown.copyFiles.destination\": {\n  \"/docs/**/*\": \"images/${documentBaseName}/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in PowerShell Completions\nDESCRIPTION: Configuration to disable built-in PowerShell completions for specific commands like code and git. This allows users to prevent conflicts with other PowerShell modules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.suggest.builtinCompletions\": {\n  \"pwshCode\": false,\n  \"pwshGit\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Accessibility Support in VS Code Using JSON Settings - JSON\nDESCRIPTION: This snippet demonstrates how to explicitly enable accessibility support in Visual Studio Code through the JSON-based settings file. By setting the 'editor.accessibilitySupport' property to 'on', screen readers like Orca are enabled to interact with the editor content. This setting is applied either directly in the settings UI or by manually editing the JSON settings file. The main required parameter is the accessibilitySupport flag; no additional dependencies beyond VS Code are needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/accessibility/accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.accessibilitySupport\": \"on\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Basic Python Script in Bash (WSL)\nDESCRIPTION: These chained Bash commands create a directory named 'helloWorld', navigate into it, create a Python file named 'hello.py' containing a simple print statement, and then execute the script using the Python 3 interpreter. This demonstrates basic file manipulation and script execution within the WSL terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir helloWorld && cd helloWorld\necho 'print(\"hello from python on ubuntu on windows!\")' >> hello.py\npython3 hello.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Discard Untracked Changes Behavior\nDESCRIPTION: Controls whether discarding untracked files in Git moves them to the Recycle Bin/Trash or deletes them permanently. Setting `git.discardUntrackedChangesToTrash` to `false` disables the move-to-trash behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(git.discardUntrackedChangesToTrash)\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Hot Reload on Save in VS Code Settings\nDESCRIPTION: This VS Code user setting (`settings.json`) controls whether C# Hot Reload automatically applies code changes when a file is saved (`workbench.action.files.save`). Setting this to `true` streamlines the development workflow by applying changes immediately upon saving.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncsharp.debug.hotReloadOnSave\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Terminal Profile Manually (JSON)\nDESCRIPTION: This JSON snippet shows how to manually set the default terminal profile for a specific platform (Windows in this case) in VS Code settings. It first defines a profile named 'my-pwsh' using PowerShell source and '-NoProfile' argument, and then sets 'terminal.integrated.defaultProfile.windows' to 'my-pwsh'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"my-pwsh\": {\n      \"source\": \"PowerShell\",\n      \"args\": [\"-NoProfile\"]\n    }\n  },\n  \"terminal.integrated.defaultProfile.windows\": \"my-pwsh\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Project Command\nDESCRIPTION: Command to make TypeScript compiler use jsconfig.json configuration file\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntsc -p jsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Setting Up a TypeScript Project using the Command Line - Bash\nDESCRIPTION: This Bash script creates a new project directory, initializes a TypeScript configuration file, and opens Visual Studio Code in the new directory. Prerequisites include Node.js, TypeScript installed globally, and Visual Studio Code installed and accessible via the 'code' command. The commands must be run in a Unix-like terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir mytask\\ncd mytask\\ntsc --init\\ncode .\n```\n\n----------------------------------------\n\nTITLE: Defining Java Snippet and Postfix Shortcuts in VS Code\nDESCRIPTION: This section documents built-in Java snippet and postfix shortcuts in Visual Studio Code, including their trigger keywords and the code that will be inserted. It provides developers with references for quickly generating boilerplate Java code constructs such as loops, conditionals, variable declarations, and print statements. No external dependencies are required to use these snippets—only a properly configured Java environment in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-editing.md#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Example usages of VS Code Java snippets\n\n// Public constructor (ctor)\npublic MyClass() {\n    // ...\n}\n\n// Do-while statement (dowhile)\ndo {\n    // ...\n} while (condition);\n\n// For-each loop (foreach, iter)\nfor (Type item : items) {\n    // ...\n}\n\n// For-indexed loop (fori)\nfor (int i = 0; i < array.length; i++) {\n    // ...\n}\n\n// If statement (if)\nif (condition) {\n    // ...\n}\n\n// If-else statement (ifelse)\nif (condition) {\n    // ...\n} else {\n    // ...\n}\n\n// If-null statement (ifnull)\nif (object == null) {\n    // ...\n}\n\n// If-not-null statement (ifnotnull)\nif (object != null) {\n    // ...\n}\n\n// Main method (main, psvm)\npublic static void main(String[] args) {\n    // ...\n}\n\n// Try-catch block (try_catch)\ntry {\n    // ...\n} catch (ExceptionType e) {\n    // ...\n}\n\n```\n\nLANGUAGE: Java\nCODE:\n```\n// Example usages of Java postfix snippets in VS Code\n\n// Type cast (cast)\n((SomeType) expr);\n\n// Negated if statement (else)\nif (!expr) {\n    // ...\n}\n\n// For-each over expression (for)\nfor (T item : expr) {\n    // ...\n}\n\n// For-indexed array iteration (fori)\nfor (int i = 0; i < expr.length; i++) {\n    // ...\n}\n\n// For-reverse array iteration (forr)\nfor (int i = expr.length-1; i >= 0; i--) {\n    // ...\n}\n\n// If statement (if)\nif (expr) {\n    // ...\n}\n\n// Not-null check (nnull)\nif (expr != null) {\n    // ...\n}\n\n// Null check (null)\nif (expr == null) {\n    // ...\n}\n\n// Println (sysout)\nSystem.out.println(expr);\n\n// Throw exception (throw)\nthrow expr;\n\n// Variable assignment (var)\nT name = expr;\n\n// While loop (while)\nwhile (expr) {\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Notebook Renderer with Preact\nDESCRIPTION: Complex renderer implementation using Preact to create interactive GitHub issue views\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport type { ActivationFunction } from 'vscode-notebook-renderer';\nimport { h, render } from 'preact';\n\nconst Issue: FunctionComponent<{ issue: GithubIssue }> = ({ issue }) => (\n  <div key={issue.number}>\n    <h2>\n      {issue.title}\n      (<a href={`https://github.com/${issue.repo}/issues/${issue.number}`}>#{issue.number}</a>)\n    </h2>\n    <img src={issue.user.avatar_url} style={{ float: 'left', width: 32, borderRadius: '50%', marginRight: 20 }} />\n    <i>@{issue.user.login}</i> Opened: <div style=\"margin-top: 10px\">{issue.body}</div>\n  </div>\n);\n\nconst GithubIssues: FunctionComponent<{ issues: GithubIssue[]; }> = ({ issues }) => (\n  <div>{issues.map(issue => <Issue key={issue.number} issue={issue} />)}</div>\n);\n\nexport const activate: ActivationFunction = (context) => ({\n    renderOutputItem(data, element) {\n        render(<GithubIssues issues={data.json()} />, element);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Workspace Trust Support in package.json\nDESCRIPTION: Shows how to declare that an extension fully supports untrusted workspaces, enabling the extension in such environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"capabilities\": {\n  \"untrustedWorkspaces\": {\n    \"supported\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions via Command Line in VS Code\nDESCRIPTION: This command demonstrates how to install both pre-release and normal extensions together using the VS Code command line interface. It installs a pre-release version of the GitHub Pull Request extension and a release version of the RemoteHub extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode --install-extension GitHub.vscode-pull-request-github@prerelease --install-extension GitHub.remotehub\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bracket Detection in C++\nDESCRIPTION: Example showing how bracket detection in comments and strings can be challenging, where only specific bracket occurrences should be considered as valid closing brackets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n{ /* } */ char str[] = \"}\"; }\n```\n\n----------------------------------------\n\nTITLE: Using Math Equations in Markdown Cells for VS Code Notebooks\nDESCRIPTION: Demonstrates how to use KaTeX syntax for rendering math equations in notebook Markdown cells, supporting both inline and block equations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n$...$\n$$...$$\n```\n\n----------------------------------------\n\nTITLE: Simple Julia Debugging Example\nDESCRIPTION: A basic Julia program showing print statements used to demonstrate debugging functionality in VS Code. This example is implied from the debugging screenshots and context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/julia.md#2025-04-23_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nprintln(\"First print statement\")\nprintln(\"Second print statement\")\n```\n\n----------------------------------------\n\nTITLE: Contributing Views to Debug Side Bar in VS Code Extension\nDESCRIPTION: JSON configuration for contributing a custom view to the Debug Side Bar in VS Code extensions. This example adds a 'Loaded Scripts' view that appears when in debug mode with a Node.js debugger.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"views\": {\n    \"debug\": [\n      {\n        \"id\": \"extension.node-debug.loadedScriptsExplorer\",\n        \"name\": \"Loaded Scripts\",\n        \"when\": \"inDebugMode && debugType == 'node'\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Exception Breakpoint for Multiple Exception Types\nDESCRIPTION: This example condition value configures the C# debugger in VS Code to break execution when *either* a `System.NullReferenceException` or a `System.InvalidOperationException` is thrown. Multiple types are specified in a comma-separated list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.NullReferenceException, System.InvalidOperationException\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy-Paste Provider in VS Code\nDESCRIPTION: Shows how to create a document paste edit provider that tracks copy counts and modifies pasted text.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass CopyCountPasteEditProvider implements vscode.DocumentPasteEditProvider {\n\n  private readonly countMimeTypes = 'application/vnd.code.copydemo-copy-count';\n\n  private count = 0;\n\n  prepareDocumentPaste(\n    _document: vscode.TextDocument,\n    _range: vscode.Range,\n    dataTransfer: vscode.DataTransfer,\n    _token: vscode.CancellationToken\n  ): void | Thenable<void> {\n    dataTransfer.set(this.countMimeTypes, new vscode.DataTransferItem(this.count++));\n  }\n\n  async provideDocumentPasteEdits(\n    _document: vscode.TextDocument,\n    range: vscode.Range,\n    dataTransfer: vscode.DataTransfer,\n    token: vscode.CancellationToken\n  ) {\n    const countDataTransferItem = dataTransfer.get(this.countMimeTypes)\n    if (!countDataTransferItem) {\n      return undefined;\n    }\n\n    const textDataTransferItem = dataTransfer.get('text/plain') ?? dataTransfer.get('text');\n    if (!textDataTransferItem) {\n      return undefined;\n    }\n\n    const count = await countDataTransferItem.asString();\n    const text = await textDataTransferItem.asString();\n\n    // Build a snippet to insert\n    const snippet = new vscode.SnippetString();\n    snippet.appendText(`(copy #${count}) ${text}`);\n\n    return new vscode.SnippetTextEdit(range, snippet);\n  }\n}\n\nvscode.languages.registerDocumentPasteEditProvider({ language: 'markdown' }, new CopyCountPasteEditProvider());\n```\n\n----------------------------------------\n\nTITLE: New Accessibility Signal Configuration\nDESCRIPTION: Demonstrates the new configuration format for accessibility signals combining sound and announcement settings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"accessibility.signals.clear\": {\n    \"sound\": \"auto | on | off\",\n    \"announcement\" (optional): \"auto | off\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Checking the Default Terminal Shell - Proposed VS Code API - TypeScript\nDESCRIPTION: Example of using the proposed vscode.env.shell API to programmatically obtain the default shell for integrated terminals. The snippet demonstrates a platform check, enabling extension authors to implement shell-specific logic (e.g., for PowerShell versus others). This approach replaces previous reliance on user settings that may now default to null.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shell = vscode.env.shell;\nif (shell.search(/(powershell|pwsh)/i) !== -1) {\n    // Do something special that PowerShell needs\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Container Shutdown in Docker Compose\nDESCRIPTION: YAML configuration that overrides the default command in a Docker Compose service to keep the container running even after the main process ends. This is useful for development environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Overrides default command so things don't shut down after the process ends.\ncommand: /bin/sh -c \"while sleep 1000; do :; done\"\n```\n\n----------------------------------------\n\nTITLE: Python Environment API Example\nDESCRIPTION: The code shows Python API changes for working with and managing Python environments in VS Code extensions. This is part of the finalized environments API documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Defining the Task Class Constructor for Multi-Folder Workspaces in TypeScript\nDESCRIPTION: Shows the updated constructor signature for the `vscode.Task` class within the VS Code extension API. This constructor now accepts a `target` parameter (`WorkspaceFolder | TaskScope.Global | TaskScope.Workspace`), enabling extensions to define tasks that are global, workspace-specific, or tied to a particular workspace folder, supporting multi-root workspace scenarios. Other parameters include `taskDefinition`, `name`, `source`, `execution`, and `problemMatchers`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class Task {\n    /**\n        * Creates a new task.\n        *\n        * @param definition The task definition as defined in the taskDefinitions extension point.\n        * @param target Specifies the task's target. It is either a global or a workspace task\n        *  or a task for a specific workspace folder.\n        * @param name The task's name. Is presented in the user interface.\n        * @param source The task's source (e.g. 'gulp', 'npm', ...) presented in the user interface.\n        * @param execution The process or shell execution.\n        * @param problemMatchers the names of problem matchers to use, like '$tsc'\n        *  or '$eslint'. Problem matchers can be contributed by an extension using\n        *  the `problemMatchers` extension point.\n        */\n    constructor(taskDefinition: TaskDefinition, target: WorkspaceFolder | TaskScope.Global | TaskScope.Workspace, name: string, source: string, execution?: ProcessExecution | ShellExecution, problemMatchers?: string | string[]);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Webview Panel View State Management\nDESCRIPTION: Handles webview panel view state changes to update content based on which editor column the panel is displayed in.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst cats = {\n  'Coding Cat': 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',\n  'Compiling Cat': 'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif',\n  'Testing Cat': 'https://media.giphy.com/media/3oriO0OEd9QIDdllqo/giphy.gif'\n};\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand('catCoding.start', () => {\n      const panel = vscode.window.createWebviewPanel(\n        'catCoding',\n        'Cat Coding',\n        vscode.ViewColumn.One,\n        {}\n      );\n      panel.webview.html = getWebviewContent('Coding Cat');\n\n      // Update contents based on view state changes\n      panel.onDidChangeViewState(\n        e => {\n          const panel = e.webviewPanel;\n          switch (panel.viewColumn) {\n            case vscode.ViewColumn.One:\n              updateWebviewForCat(panel, 'Coding Cat');\n              return;\n\n            case vscode.ViewColumn.Two:\n              updateWebviewForCat(panel, 'Compiling Cat');\n              return;\n\n            case vscode.ViewColumn.Three:\n              updateWebviewForCat(panel, 'Testing Cat');\n              return;\n          }\n        },\n        null,\n        context.subscriptions\n      );\n    })\n  );\n}\n\nfunction updateWebviewForCat(panel: vscode.WebviewPanel, catName: keyof typeof cats) {\n  panel.title = catName;\n  panel.webview.html = getWebviewContent(catName);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status in WSL2\nDESCRIPTION: Command to list running Docker containers in WSL2, showing container details including matching container IDs across Windows and WSL contexts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/03/02/docker-in-wsl2.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Defining a Calculator Resource in WebAssembly Interface Type (WIT)\nDESCRIPTION: This WIT file defines a calculator package with a resource type that implements reverse Polish notation operations. It includes an operation enum and an engine resource with methods for pushing operands, operations, and executing calculations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_7\n\nLANGUAGE: wit\nCODE:\n```\n// wit/calculator.wit\npackage vscode:example;\n\ninterface types {\n\n\tenum operation {\n\t\tadd,\n\t\tsub,\n\t\tmul,\n\t\tdiv\n\t}\n\n\tresource engine {\n\t\tconstructor();\n\t\tpush-operand: func(operand: u32);\n\t\tpush-operation: func(operation: operation);\n\t\texecute: func() -> u32;\n\t}\n}\nworld calculator {\n\texport types;\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Customization for Specific Themes\nDESCRIPTION: Example of customizing colors for specific themes using workbench.colorCustomizations, including single theme targeting and multiple theme selection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"[Monokai]\": {\n        \"sideBar.background\": \"#347890\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling URIs in VS Code - TypeScript\nDESCRIPTION: This snippet defines interfaces and functions for VS Code extension authors to handle system-wide URIs. By implementing 'UriHandler' and registering it using the provided function, extensions can be activated and respond whenever a matching URI is handled by the OS. Dependencies are the VS Code API types. Key parameters are the URI to handle and callback registration. Inputs are incoming URIs; outputs/actions depend on the extension's implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UriHandler {\n    handleUri(uri: Uri): ProviderResult<void>;\n}\n\nexport namespace window {\n    export function registerUriHandler(handler: UriHandler): Disposable;\n}\n```\n\n----------------------------------------\n\nTITLE: Revealing Elements in TreeView with Default Selection\nDESCRIPTION: TypeScript code demonstrating how to reveal a specific element in a custom TreeView. By default, the revealed item will be selected in the view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncustomView.reveal('element');\n```\n\n----------------------------------------\n\nTITLE: Searching for a Command in a Text File - Bash/Zsh\nDESCRIPTION: Uses the grep command to search for the string 'dir' in all .txt files within the current directory, prefixing results with the line number. Requires Bash or Zsh (any POSIX shell supporting grep). Input: search term ('dir'), files (*.txt). Output: the file name, line number, and matching line. Useful for quickly locating command references in large text files created from previous shell output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngrep -n \"dir\" *.txt\n```\n\n----------------------------------------\n\nTITLE: Changing Var Type to Resolved Type in Java\nDESCRIPTION: Example demonstrating the opposite of var inference, where a variable using 'var' is converted to explicitly specify its type, which can improve code readability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nvar s = \"\";\n```\n\nLANGUAGE: java\nCODE:\n```\nString s = \"\";\n```\n\n----------------------------------------\n\nTITLE: Configuring onUri Activation in package.json\nDESCRIPTION: Declaration of onUri activation event that activates the extension whenever a system-wide URI for that extension is opened. This allows extensions to handle custom URI schemes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onUri\"\n]\n```\n\n----------------------------------------\n\nTITLE: Launching Azure Web App\nDESCRIPTION: Azure CLI command to launch and view the deployed web application in a browser.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naz appservice web browse -n nina-demo-app -g nina-demo\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration - Copilot and Terminal\nDESCRIPTION: Configuration settings for GitHub Copilot chat scope selection and terminal glyph rescaling functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.copilot.chat.scopeSelection\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngithubPullRequests.createDefaultBaseBranch\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njupyter.executionAnalysis.enabled\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnotebook.consolidatedRunButton\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nterminal.integrated.rescaleOverlappingGlyphs\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote User and Environment in devcontainer.json\nDESCRIPTION: New configuration options in devcontainer.json for specifying the user to start the VS Code Server and environment variables for the server. These settings provide more control over the remote development environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_41.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remoteUser\": \"string\",\n  \"remoteEnv\": {\n    \"key\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code Package Priority in APT\nDESCRIPTION: Configuration to ensure the official Microsoft VS Code package is prioritized over distribution-specific packages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nPackage: code\nPin: origin \"packages.microsoft.com\"\nPin-Priority: 9999\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Participant Commands in package.json\nDESCRIPTION: JSON configuration for registering a custom /exercise command in the VS Code extension's package.json file. Defines the command name, description and participant properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"chatParticipants\": [\n      {\n        \"id\": \"chat-tutorial.code-tutor\",\n        \"fullName\": \"Code Tutor\",\n        \"name\": \"tutor\",\n        \"description\": \"What can I teach you?\",\n        \"isSticky\": true,\n        \"commands\": [\n          {\n            \"name\": \"exercise\",\n            \"description\": \"Provide exercises to practice a concept.\"\n          }\n        ]\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing SSH Server Installation Paths in settings.json - JSON\nDESCRIPTION: This JSON configuration allows the user to define custom installation directories for the VS Code server on remote SSH hosts. It requires the Remote - SSH extension and should be placed in the user's settings.json. Each key is the SSH host alias, and each value is an absolute path for server installation. Inputs are hostname/path pairs, and output is a customized server location per remote.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_63.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.serverInstallPath\": {\\n    \"work-main\": \"/vscode_clean\",\\n    \"work-test\": \"/vscode_sandbox\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Opening a C++ Project Folder in VS Code using Windows Batch\nDESCRIPTION: This batch script sets up the folder structure for a new C++ project. It creates a 'projects' directory with a 'helloworld' subdirectory, navigates into it, and opens Visual Studio Code in the project folder. No dependencies are required aside from a Windows environment with VS Code installed and 'code' available in PATH. Input: none; Output: initialized workspace folders and launched VS Code; Limitation: must run from a command prompt with correct permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_0\n\nLANGUAGE: bat\nCODE:\n```\nmkdir projects\ncd projects\nmkdir helloworld\ncd helloworld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Persisting and Updating Webview State in VS Code (JavaScript)\nDESCRIPTION: Shows how to leverage the 'acquireVsCodeApi' function inside a webview to persist and update state using the VS Code webview API. This enables survival of UI state across tab switches or reloads. The snippet checks for existing state, increments a counter if it exists, or initializes it to 1 otherwise. The API allows storing any JSON-serializable object in state.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Inside a webview's JavaScript\nconst vscode = acquireVsCodeApi();\n\n// Look up old state (will be undefined if no state is set)\nconst oldState = vscode.getState();\n\n// Update the persisted state.\n// You can save off any json serializable object.\nif (oldState) {\n    vscode.setState({ count: oldState.count + 1 });\n} else {\n    vscode.setState({ count: 1 });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation for WebAssembly Execution\nDESCRIPTION: TypeScript code that implements WebAssembly loading and execution in VS Code, including terminal handling and error management.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/06/05/vscode-wasm-wasi.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wasm } from '@vscode/wasm-wasi';\nimport { commands, ExtensionContext, Uri, window, workspace } from 'vscode';\n\nexport async function activate(context: ExtensionContext) {\n\n    // Load the WASM API\n    const wasm: Wasm = await Wasm.load();\n\n    // Register a command that runs the C example\n    commands.registerCommand('wasm-wasi-c-example.run', async () => {\n        // Create a pseudoterminal to provide stdio to the WASM process.\n        const pty = wasm.createPseudoterminal();\n        const terminal = window.createTerminal({ name: 'Run C Example', pty, isTransient: true });\n        terminal.show(true);\n\n        try {\n            // Load the WASM module. It is stored alongside the extension's JS code.\n            // So we can use VS Code's file system API to load it. Makes it\n            // independent of whether the code runs in the desktop or the web.\n            const bits = await workspace.fs.readFile(Uri.joinPath(context.extensionUri, 'hello.wasm'));\n            const module = await WebAssembly.compile(bits);\n            // Create a WASM process.\n            const process = await wasm.createProcess('hello', module, { stdio: pty.stdio });\n            // Run the process and wait for its result.\n            const result = await process.run();\n            if (result !== 0) {\n                await window.showErrorMessage(`Process hello ended with error: ${result}`);\n            }\n        } catch (error) {\n            // Show an error message if something goes wrong.\n            await window.showErrorMessage(error.message);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Termination Keyboard Shortcut in VS Code\nDESCRIPTION: JSON configuration for creating a keyboard shortcut to terminate all running tasks using the workbench.action.tasks.terminate command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+k t\",\n  \"command\": \"workbench.action.tasks.terminate\",\n  \"args\": \"terminateAll\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Tab Labels in VS Code\nDESCRIPTION: Configuration to enable custom display labels for tabs and specify naming patterns. This helps differentiate between files with the same name but different paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"workbench.editor.customLabels.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Entry Point for Python File in tasks.json\nDESCRIPTION: Configuration for tasks.json that defines how to run a specific Python file in a Docker container. It specifies a docker-run task that executes manage.py with arguments for Django's runserver command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n    {\n      \"type\": \"docker-run\",\n      \"label\": \"docker-run: debug\",\n      \"dependsOn\": [\n        \"docker-build\"\n      ],\n      \"python\": {\n        \"args\": [\n          \"runserver\",\n          \"0.0.0.0:8000\",\n          \"--nothreading\",\n          \"--noreload\"\n        ],\n        \"file\": \"manage.py\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Received Messages from Webview in VS Code Extension (TypeScript)\nDESCRIPTION: Registers an event listener with the webview's 'onDidReceiveMessage' API to respond to incoming messages posted from the webview content. Processes messages by examining their 'type' and responds accordingly, e.g., updating internal state. This handler should be registered with proper disposal to prevent leaks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nwebview.onDidReceiveMessage(e => {\n  switch (e.type) {\n    case 'did-update-count':\n      this.handleUpdateCatCount(e.count);\n      break;\n  }\n}, null, disposables)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Instructions for GitHub Copilot in Markdown\nDESCRIPTION: This snippet demonstrates how to create custom instructions for GitHub Copilot using a markdown file. It specifies preferences for React 18, SvelteKit 4, and TypeScript coding styles.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/12/18/free-github-copilot.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## React 18\n* Use functional components\n* Use hooks for state management\n* Use TypeScript for type safety\n\n## SvelteKit 4\n* Use SSR for dynamic content rendering\n* Use static site generation (SSG) for pre-rendered static pages.\n\n## TypeScript\n* Use consistent object property shorthand: const obj = { name, age }\n* Avoid implicit any\n```\n\n----------------------------------------\n\nTITLE: Defining Region Markers for Code Folding in Multiple Languages\nDESCRIPTION: Shows the syntax for region markers used to define collapsible code sections across different programming languages. Each language has its own specific marker syntax that enables code folding functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript/JavaScript\nCODE:\n```\n//#region\n//#endregion\n//region\n//endregion\n```\n\nLANGUAGE: C#\nCODE:\n```\n#region\n#endregion\n```\n\nLANGUAGE: C/C++\nCODE:\n```\n#pragma region\n#pragma endregion\n```\n\nLANGUAGE: F#\nCODE:\n```\n//#region\n//#endregion\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n#region\n#endregion\n```\n\nLANGUAGE: VB\nCODE:\n```\n#Region\n#End Region\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Build with Features in JSON\nDESCRIPTION: This `devcontainer.json` snippet configures a development container build. It specifies the Dockerfile to use for the build process within the `build` object and includes the Docker-in-Docker feature from the GitHub Container Registry (`ghcr.io`) using the `features` object, pinning it to the latest version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\"\n    },\n    \"features\": {\n        \"ghcr.io/devcontainers/features/docker-in-docker:1\": {\n             \"version\": \"latest\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Boolean Policy in macOS Configuration Profile (XML)\nDESCRIPTION: This XML snippet demonstrates configuring a boolean policy, `EnableFeedback`, within a macOS `.mobileconfig` file for VS Code. Boolean policies use self-closing tags `<true/>` or `<false/>` to represent their value, rather than string tags. In this case, feedback features are enabled using `<true/>`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/enterprise.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>EnableFeedback</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Unmounting SSHFS Mount in Bash\nDESCRIPTION: Provides a Bash command to unmount a previously mounted SSHFS directory. This relies on the 'umount' command and the correct value for the environment variables. It is the recommended method for cleanly disconnecting the remote filesystem from the local machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\numount \"$HOME/sshfs/$USER_AT_HOST\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayItemsType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for specifying array views of variable contents. It includes elements for direction, rank, size, lower bound, and value pointer, with detailed annotations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_21\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"ArrayItemsType\">\n    <xs:annotation>\n      <xs:documentation>Specifies an array view of the contents of a variable. It assumes data elements are contiguous in memory.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Direction\" type=\"ArrayDirectionType\" />\n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Rank\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the rank of the array.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"Size\" type=\"SizeType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the size of each dimension of the array. For multi-dimensional arrays, you can specify an expression that uses the implicit $i parameter. The parameter will be substituted with the dimension index to find the size of the array in that dimension.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"LowerBound\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the lower bound of each dimension of the array. For multi-dimensional arrays, you can specify an expression that uses the implicit $i parameter. The parameter will be substituted with the dimension index to find the lower bound of the array in that dimension.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"ValuePointer\" type=\"ValuePointerType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the expression that points to the first element of the array. The expression must be a pointer of the element type that is not void*.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n    </xs:sequence>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Defining Keybinding Arguments in package.json (JSON)\nDESCRIPTION: Example `package.json` keybinding definition demonstrating how to pass static arguments (`{ \"foo\": 1, \"bar\": 2 }`) directly to the associated command (`myCommand`) when the keybinding (`cmd+i`) is invoked. These arguments are passed to the command handler upon execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"keybindings\": {\n  \"key\": \"cmd+i\",\n  \"command\": \"myCommand\",\n  \"args\": {\n    \"foo\": 1,\n    \"bar\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring env_file in Docker Compose Service (YAML)\nDESCRIPTION: This YAML snippet modifies docker-compose.yml to load environment variables using env_file, allowing value management outside the Compose file. The env_file should list KEY=VALUE entries and be placed relative to docker-compose.yml. All services defined can reference unique or shared env files as appropriate.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    env_file: devcontainer.env\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Directory and Opening VS Code (Bash)\nDESCRIPTION: These shell commands first create a new directory named `HelloWorld`, then navigate into that newly created directory using `cd`, and finally open Visual Studio Code (`code .`) scoped to the `HelloWorld` directory. This sequence prepares the project workspace for the tutorial.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir HelloWorld\ncd HelloWorld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Configuring Forwarded Ports with DNS Names in devcontainer.json\nDESCRIPTION: This snippet demonstrates how to specify DNS names when forwarding ports in a devcontainer.json file. It allows remote resources to be accessed locally using their DNS names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_61.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"forwardPorts\": [ \"db:5432\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hot Reloading for Flask by Modifying Dockerfile\nDESCRIPTION: Modification to the Dockerfile to enable hot reloading for Flask applications. This change prevents copying the app code into the container, allowing for volume mounting instead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\n#ADD . /app\n```\n\n----------------------------------------\n\nTITLE: Customizing Terminal Command Handling in VS Code\nDESCRIPTION: Shows how to configure which commands skip shell evaluation and are handled by VS Code instead. The setting uses additions and deletions to modify the default list rather than requiring a complete replacement.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.commandsToSkipShell\": [\n    // Make ctrl+n open a new file when the terminal is focused\n    \"workbench.action.files.newUntitledFile\",\n    // Send ctrl+e to the terminal\n    \"-workbench.action.quickOpen\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Crosstool-ng Environment Using Dockerfile - Docker\nDESCRIPTION: This Dockerfile sets up an Ubuntu-based container equipped with build tools, dependencies, and installs Crosstool-ng for generating a compatible sysroot. Dependencies such as gcc, g++, and various developer tools are installed via apt-get. It then downloads, extracts, configures, and installs Crosstool-ng in a custom output directory, appending its binaries to the PATH. The resulting environment serves as a reproducible base for building toolchains tailored to specific Linux library requirements (e.g., glibc 2.28), helpful when preparing to run VS Code Server on older distributions. All installation steps are scripted with RUN statements, while careful use of ENV ensures accessibility of Crosstool-ng tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM ubuntu:latest\\n\\nRUN apt-get update\\nRUN apt-get install -y gcc g++ gperf bison flex texinfo help2man make libncurses5-dev \\\npython3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip \\\npatch rsync meson ninja-build\\n\\n# Install crosstool-ng\\nRUN wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.26.0.tar.bz2\\nRUN tar -xjf crosstool-ng-1.26.0.tar.bz2\\nRUN cd crosstool-ng-1.26.0 && ./configure --prefix=/crosstool-ng-1.26.0/out && make && make install\\nENV PATH=$PATH:/crosstool-ng-1.26.0/out/bin\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Button in HTML for VS Code Release Notes\nDESCRIPTION: This HTML snippet creates a scroll-to-top button with accessibility features for use in Visual Studio Code's release notes. It includes an icon and ARIA label for screen readers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Registering a TextDocumentContentProvider in TypeScript\nDESCRIPTION: This snippet shows how to register a TextDocumentContentProvider with a specific scheme in VS Code. The registration returns a disposable that can be used to unregister the provider later.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.workspace.registerTextDocumentContentProvider(myScheme, myProvider);\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Options Delays in Accessibility Settings\nDESCRIPTION: A setting to customize the debouncing time for various accessibility signals when the 'Debounce position changes' setting is enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"accessibility.signalOptions.delays\"\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open in Dev Containers Link Inline - Markdown\nDESCRIPTION: This markdown demonstrates how to embed an 'Open in Dev Containers' link directly into documentation. The inline link points to the VS Code URI handler, initiating extension installation, repository cloning, and container setup upon clicking. This is suitable for READMEs and guides targeting developers with VS Code and Docker pre-installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\nIf you already have VS Code and Docker installed, you can click the badge above or [here](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java) to get started. Clicking these links will cause VS Code to automatically install the Dev Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.\n```\n\n----------------------------------------\n\nTITLE: Designating a Transient Workspace in VS Code - JSON\nDESCRIPTION: Shows how to mark a VS Code workspace as 'transient' by setting the 'transient' property to true in the workspace configuration file. This ensures the workspace will not reopen after restarting VS Code and does not appear in the recently opened list. Requires editing the .code-workspace file, and the JSON structure must contain 'folders' and 'transient' properties. Purpose is to provide a less persistent workspace experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"folders\\\": [],\\n    \\\"transient\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Settings Example in VSCode\nDESCRIPTION: Example showing different configuration scopes for Git extension settings including resource and window scoped settings with various property types and descriptions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"configuration\": {\n      \"title\": \"Git\",\n      \"properties\": {\n        \"git.alwaysSignOff\": {\n          \"type\": \"boolean\",\n          \"scope\": \"resource\",\n          \"default\": false,\n          \"description\": \"%config.alwaysSignOff%\"\n        },\n        \"git.ignoredRepositories\": {\n          \"type\": \"array\",\n          \"default\": [],\n          \"scope\": \"window\",\n          \"description\": \"%config.ignoredRepositories%\"\n        },\n        \"git.autofetch\": {\n          \"type\": [\n            \"boolean\",\n            \"string\"\n          ],\n          \"enum\": [\n            true,\n            false,\n            \"all\"\n          ],\n          \"scope\": \"resource\",\n          \"markdownDescription\": \"%config.autofetch%\",\n          \"default\": false,\n          \"tags\": [\n            \"usesOnlineServices\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Django Application Navigation and Layout\nDESCRIPTION: CSS styling for the Django application's navigation bar and content area. The styles define colors, fonts, and spacing for the navbar, navbar links, brand text, and main content body.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.navbar {\n    background-color: lightslategray;\n    font-size: 1em;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: white;\n    padding: 8px 5px 8px 5px;\n}\n\n.navbar a {\n    text-decoration: none;\n    color: inherit;\n}\n\n.navbar-brand {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.navbar-item {\n    font-variant: small-caps;\n    margin-left: 30px;\n}\n\n.body-content {\n    padding: 5px;\n    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownString for TreeItem tooltip in TypeScript\nDESCRIPTION: New proposed API allowing the tooltip of a TreeItem to be a MarkdownString. This enables rich formatting in tree item tooltips.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst treeItem = new vscode.TreeItem('Label');\ntreeItem.tooltip = new vscode.MarkdownString('**Bold** and *italic* text');\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Resource Links\nDESCRIPTION: Configuration for extension resource links including license, homepage, bugs tracking and repository information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"homepage\": \"https://github.com/microsoft/vscode-wordcount/blob/main/README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/microsoft/vscode-wordcount/issues\",\n    \"email\": \"sean@contoso.com\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/microsoft/vscode-wordcount.git\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Terminal Windows in VS Code\nDESCRIPTION: Tips for working with multiple terminal windows including dragging terminals in the editor and switching between them using keyboard shortcuts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/productivity.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Multiple terminal windows\n\n  * Drag terminal windows in the editor\n  * Switch between open terminals in the editor with `kb(workbench.action.quickOpen)`\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Feedback Telemetry\nDESCRIPTION: Example of implementing telemetry logging for chat feedback to measure participant success metrics.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = vscode.env.createTelemetryLogger({\n     // telemetry logging implementation goes here\n});\n\ncat.onDidReceiveFeedback((feedback: vscode.ChatResultFeedback) => {\n    // Log chat result feedback to be able to compute the success metric of the participant\n    logger.logUsage('chatResultFeedback', {\n        kind: feedback.kind\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing TypeScript Private Properties in JavaScript\nDESCRIPTION: This TypeScript snippet demonstrates that the `private` keyword only provides compile-time checking. After compilation to JavaScript, or by using type assertions like `any`, private properties can still be accessed from outside the class, highlighting a potential risk when automatically mangling property names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/07/20/mangling-vscode.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nclass Foo {\n    private bar = 123;\n}\n\nconst foo: any = new Foo();\nconsole.log(foo.bar);\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for SourceControlResourceState with Decorations\nDESCRIPTION: This TypeScript interface snippet shows how to customize resource states with decorations in the Source Control view. Decorations can provide visual cues for different types of changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControlResourceState {\n  readonly decorations?: SourceControlResourceDecorations;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Platform-Independent User Home Variable in VS Code Tasks\nDESCRIPTION: Demonstrates how to use the new 'userHome' variable in VS Code tasks. This variable provides a platform-independent way to reference the user's home directory in task configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Test Home\",\n    \"type\": \"shell\",\n    \"command\": \"ls ${userHome}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Completion Requests in Language Server for Embedded Languages\nDESCRIPTION: Shows how the language server processes completion requests by getting the appropriate language mode at the cursor position and delegating to that mode's completion handler.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/embedded-languages.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnection.onCompletion(async (textDocumentPosition, token) => {\n  const document = documents.get(textDocumentPosition.textDocument.uri);\n  if (!document) {\n    return null;\n  }\n\n  const mode = languageModes.getModeAtPosition(document, textDocumentPosition.position);\n  if (!mode || !mode.doComplete) {\n    return CompletionList.create();\n  }\n  const doComplete = mode.doComplete!;\n\n  return doComplete(document, textDocumentPosition.position);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring onOpenExternalUri Activation Event in VS Code Extension\nDESCRIPTION: This code snippet shows how to declare the onOpenExternalUri activation event in a VS Code extension's manifest. It's emitted when an external URI, such as an http or https link, is being opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onOpenExternalUri\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring File Icon Theme in VS Code Settings (JSON)\nDESCRIPTION: This snippet demonstrates how to specify the desired file icon theme in VS Code's settings.json file. The property \\\"workbench.iconTheme\\\" configures which icon theme is applied to file types and interface elements. Set this property to the identifier of the installed icon theme (such as \\\"vs-seti\\\"). Input is a JSON object within VS Code user or workspace settings, and the output is the visual update of file icons throughout the editor interface. The setting requires that the named icon theme is installed and available.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Specifies the file icon theme used in the workbench.\n  \"workbench.iconTheme\": \"vs-seti\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for webpack in JSON\nDESCRIPTION: This snippet shows how to update the scripts section in package.json to include webpack-related commands for compiling, watching, and packaging the extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"compile\": \"webpack --mode development\",\n    \"watch\": \"webpack --mode development --watch\",\n    \"vscode:prepublish\": \"npm run package\",\n    \"package\": \"webpack --mode production --devtool hidden-source-map\",\n}\n```\n\n----------------------------------------\n\nTITLE: Flask App Initialization in __init__.py\nDESCRIPTION: This snippet shows how to initialize a Flask application object in the __init__.py file, which makes the application a proper Python package and centralizes the app instance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport flask\napp = flask.Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Enabling HTML Support in MarkdownString in VS Code API\nDESCRIPTION: This snippet shows how to enable rendering of a safe subset of raw HTML inside Markdown text using the MarkdownString API in VS Code extensions. It sets the 'supportHtml' property to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst markdown = new vscode.MarkdownString();\nmarkdown.supportHtml = true;\n```\n\n----------------------------------------\n\nTITLE: VS Code settings reference in markdown\nDESCRIPTION: Markdown syntax used to reference VS Code settings in the documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`setting(github.copilot.chat.search.semanticTextResults)`\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Visualizer API in TypeScript\nDESCRIPTION: This snippet provides a link to the TypeScript definition file for the new Debug Visualizer API in VS Code. The API enables extensions to contribute visualizers for variables in the debugging process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.proposed.debugVisualization.d.ts\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring a WSL Terminal Profile on Windows (JSONC)\nDESCRIPTION: This JSONC snippet demonstrates how to manually configure a specific Windows Subsystem for Linux (WSL) distribution (Debian) as a terminal profile in VS Code on Windows. It uses 'wsl.exe' as the path and provides the '-d Debian' arguments to target the specific distribution. This method is useful when automatic WSL profile detection is disabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"Debian (WSL)\": {\n      \"path\": \"C:\\\\WINDOWS\\\\System32\\\\wsl.exe\",\n      \"args\": [\n        \"-d\",\n        \"Debian\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Indent and Tab Settings in VS Code (JSON)\nDESCRIPTION: This JSON snippet shows how to configure editor settings for indentation, including disabling auto-detection, using spaces for indentation, and setting custom tab and indent sizes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.detectIndentation\": false,\n\"editor.insertSpaces\": true,\n\"editor.tabSize\": 8,\n\"editor.indentSize\": 2\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Tasks for SSL Debug\nDESCRIPTION: JSON configuration for VS Code tasks.json to enable SSL debugging with Docker, including environment variables and .NET Core specific settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-netcore.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndockerRun: {\n    \"env\": {\n       \"ASPNETCORE_URLS\": \"https://+:5001;http://+:5000\"\n   }\n },\nnetCore: {\n     \"appProject\": \"${workspacefolder}/MyProject.csproj\",\n     \"enableDebugging\": true,\n     \"configureSsl\": true\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Git Log API in TypeScript\nDESCRIPTION: Updates to the Git extension API to allow constraining log results by path and querying branches. Introduces LogOptions and BranchQuery interfaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogOptions {\n  readonly maxEntries?: number;\n  readonly path?: string;\n}\nexport interface Repository {\n  log(options?: LogOptions): Promise<Commit[]>;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BranchQuery {\n  readonly remote?: boolean;\n  readonly contains?: string;\n}\nexport interface Repository {\n  getBranches(query: BranchQuery): Promise<Ref[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Rename Capability via LSP (JSON)\nDESCRIPTION: This JSON snippet demonstrates how a Language Server should declare its support for symbol renaming within the `capabilities` section of the `initialize` response. Setting `renameProvider` to `\"true\"` signals to VS Code that the server can handle `textDocument/rename` requests. This is part of the Language Server Protocol specification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"renameProvider\" : \"true\"\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File-Level Comment Creation UI via Comments API\nDESCRIPTION: Describes the `enableFileComments` boolean property on the `CommentingRangeProvider` interface in the VS Code extension API. Setting this to `true` indicates that the extension supports file-level comments and enables the corresponding UI for users to create them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nset the `enableFileComments` property on your `CommentingRangeProvider` to `true`\n```\n\n----------------------------------------\n\nTITLE: Enabling General Terminal Completions in VS Code Settings\nDESCRIPTION: Specifies the VS Code setting `terminal.integrated.suggest.enabled` used to activate the new general terminal completions feature, which is built upon a proposed API and replaces the previous PowerShell provider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.enabled)\n```\n\n----------------------------------------\n\nTITLE: Declaring Limited Support for Virtual Workspaces in package.json\nDESCRIPTION: Example of how to declare that an extension has limited support for virtual workspaces in the package.json file, including a description of the limitations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"virtualWorkspaces\": {\n      \"supported\": \"limited\",\n      \"description\": \"In virtual workspaces, resolving and finding references across files is not supported.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Macros with Values (c_cpp_properties.json Value)\nDESCRIPTION: Example format for defining a preprocessor macro (`VERSION`) and assigning it a value (`1`). This string `VERSION=1` would typically be included in the `defines` array within `c_cpp_properties.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nVERSION=1\n```\n\n----------------------------------------\n\nTITLE: Toggling VS Code Chat Agent Mode via Keyboard Shortcut\nDESCRIPTION: This represents the command ID for a VS Code keyboard shortcut (`kb(...)` notation). Executing `workbench.action.chat.toggleAgentMode` allows users to quickly switch between different modes (Ask, Edit, Agent) within the unified Chat view during a conversation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.chat.toggleAgentMode)\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Reveal API in Tree Views with Expand Options\nDESCRIPTION: Implementation of the reveal API for tree views that allows displaying and expanding elements. The API supports options for selecting, focusing, and expanding elements with recursive expansion up to 3 levels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Reveals the given element in the tree view.\n * If the tree view is not visible then the tree view is shown and element is revealed.\n *\n * By default revealed element is selected.\n * In order to not to select, set the option `select` to `false`.\n * In order to focus, set the option `focus` to `true`.\n * In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.\n * **NOTE:** You can expand only to 3 levels maximum.\n *\n * **NOTE:** [TreeDataProvider](#TreeDataProvider) is required to implement [getParent](#TreeDataProvider.getParent) method to access this API.\n */\nreveal(element: T, options?: { select?: boolean, focus?: boolean, expand?: boolean | number }): Thenable<void>;\n```\n\n----------------------------------------\n\nTITLE: Test Runner Script for VS Code Extension Tests\nDESCRIPTION: This TypeScript script defines a test runner for VS Code extension tests using Mocha. It sets up Mocha, discovers test files, adds them to the test suite, and runs the tests programmatically.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from 'path';\nimport * as Mocha from 'mocha';\nimport { glob } from 'glob';\n\nexport function run(): Promise<void> {\n  // Create the mocha test\n  const mocha = new Mocha({\n    ui: 'tdd',\n    color: true\n  });\n\n  const testsRoot = path.resolve(__dirname, '..');\n\n  return new Promise((c, e) => {\n    glob('**/**.test.js', { cwd: testsRoot }).then((files) => {\n      // Add files to the test suite\n      files.forEach(f => mocha.addFile(path.resolve(testsRoot, f)));\n\n      try {\n        // Run the mocha test\n        mocha.run(failures => {\n          if (failures > 0) {\n            e(new Error(`${failures} tests failed.`));\n          } else {\n            c();\n          }\n        });\n      } catch (err) {\n        e(err);\n      }\n    }).catch((err) => {\n      return e(err);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using vscode.env.asExternalUri with HTTP Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the proposed vscode.env.asExternalUri API to resolve an external URI from where the extension is running to a URI on the client machine. It sets up a local HTTP server and provides a command to resolve and display the external URI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport * as http from 'http';\n\nconst PORT = 3000;\n\nexport function activate(context: vscode.ExtensionContext) {\n  startLocalServer(PORT);\n\n  context.subscriptions.push(vscode.commands.registerCommand('example.command', async () => {\n      const resolved = vscode.env.asExternalUri(vscode.Uri.parse(`http://localhost:${PORT}`));\n      vscode.window.showInformationMessage(`Resolved to: ${resolved} on client and copied to clipboard`);\n      vscode.env.clipboard.writeText(resolved.toString());\n  }));\n}\n\nfunction startLocalServer(port: number) {\n  const server = http.createServer((req, res) => {\n    res.end('Hello world!');\n  });\n  server.on('clientError', (err, socket) => {\n    socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  });\n  server.listen(port);\n  vscode.window.showInformationMessage(`Started local server on port: ${port}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting TSLint Linting to Save Events in VS Code - JSON\nDESCRIPTION: Modifies linting behavior so that the TSLint extension runs checks only when a file is saved rather than on each keystroke. Place this in `settings.json` to optimize performance or reduce distractions. The value 'onSave' is supported by latest versions of `vscode-tslint`. No extra dependencies required apart from the installed extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"tslint.run\": \"onSave\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for executing a single expression in the context of an object. It allows the use of iteration variables and includes custom list code attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"ExecType\">\n    <xs:annotation>\n      <xs:documentation>\n        Executes a single expression. The expression executes in the context of the object, but may use iteration variables.\n        The expression may also modify iteration variables, but no other side effects are allowed.\n      </xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"xs:string\">\n        <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable in Debug Launch Configuration - VS Code JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the ${env:USERNAME} variable within a VS Code launch configuration (launch.json) to inject a user's environment variable as a program argument. It requires the VS Code debugger with Node.js support and any environment variable in the local environment (in this example: USERNAME). Key parameters include type (specifying the debugger), program (the relative path to the script), cwd (working directory), and args (array of arguments, here containing an environment variable). The input expects an environment variable named USERNAME to be set, and on launch, will pass its value to the Node.js program. This should be placed within the configurations array in launch.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"type\": \"node\",\\n    \"request\": \"launch\",\\n    \"name\": \"Launch Program\",\\n    \"program\": \"${workspaceFolder}/app.js\",\\n    \"cwd\": \"${workspaceFolder}\",\\n    \"args\": [ \"${env:USERNAME}\" ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Issue Suggestion Trigger Exclusions in VS Code (JSONC)\nDESCRIPTION: This JSONC snippet demonstrates how to configure the `githubIssues.ignoreCompletionTrigger` setting in Visual Studio Code. It specifies an array of language identifiers (in this case, 'python') where the '#' character should not trigger issue completion suggestions from the GitHub Pull Requests and Issues extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/github.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// Languages that the '#' character should not be used to trigger issue completion suggestions.\n\"githubIssues.ignoreCompletionTrigger\": [\n  \"python\"\n]\n```\n\n----------------------------------------\n\nTITLE: Binding Keyboard Shortcut with Automatic First Action Application in VS Code JSON\nDESCRIPTION: This JSON snippet configures a keyboard shortcut (`ctrl+shift+r ctrl+e`) for the `editor.action.codeAction` command in VS Code, targeting `refactor.extract.function` actions. The `\"apply\": \"first\"` argument modifies the default behavior, ensuring that the first available 'Extract Function' Code Action is automatically applied immediately when the shortcut is pressed, bypassing the selection menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/refactoring.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.function\",\n    \"apply\": \"first\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Contrast Ratio for Integrated Terminal in VS Code\nDESCRIPTION: Sets the minimum contrast ratio for text in the integrated terminal to improve readability. The value 4.5 is recommended for baseline website accessibility. Terminal colors will automatically adjust to meet this contrast ratio.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n// 4.5 is recommended for baseline website accessibility\n\"terminal.integrated.minimumContrastRatio\": 4.5\n```\n\n----------------------------------------\n\nTITLE: Using FocusedView Context Key in VS Code\nDESCRIPTION: Example of using the focusedView context key in keybinding when clauses to control when commands are enabled or displayed based on which view is currently focused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"when\": \"focusedView == nodeDependencies\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Task Auto Detection in VS Code Settings - JSON\nDESCRIPTION: This settings.json snippet disables auto-detection of tasks for TypeScript, Grunt, Jake, Gulp, and npm in Visual Studio Code. This is useful for controlling which tasks appear in the Task Runner UI, especially in complex project setups. Paste these settings into the workspace or user settings to apply.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"typescript.tsc.autoDetect\": \"off\",\\n    \"grunt.autoDetect\": \"off\",\\n    \"jake.autoDetect\": \"off\",\\n    \"gulp.autoDetect\": \"off\",\\n    \"npm.autoDetect\": \"off\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Executing serve-web CLI Command in VS Code\nDESCRIPTION: This command starts a standalone VS Code server that serves a web experience on localhost. For non-localhost access, TLS and a reverse proxy like Caddy are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_82.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nserve-web\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote SSH Copilot Chat Participant in VS Code Settings\nDESCRIPTION: This setting enables the new @remote-ssh chat participant in VS Code, which provides context-aware assistance for SSH connections and remote development.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_96.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsetting(remote.SSH.experimental.chat)\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Actions for Custom Views in package.json (JSON)\nDESCRIPTION: Demonstrates how to contribute inline actions to custom tree view items within a VS Code extension's `package.json`. It defines a 'Refresh' command and associates it with the `view/item/context` menu using the `inline` group, making the action appear directly on the tree item. Requires defining the corresponding command and potentially icons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"commands\": [\n    {\n      \"command\": \"jsonOutline.refreshNode\",\n      \"title\": \"Refresh\",\n      \"icon\": {\n        \"light\": \"resources/light/refresh.svg\",\n        \"dark\": \"resources/dark/refresh.svg\"\n      }\n    }\n  ],\n  \"menus\": {\n    \"view/item/context\": [\n      {\n        \"command\": \"jsonOutline.refreshNode\",\n        \"when\": \"view == jsonOutline\",\n        \"group\": \"inline\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Format On Save for Go Files in VS Code (JSON)\nDESCRIPTION: This snippet disables automatic formatting when saving Go files by setting 'editor.formatOnSave' to false for the '[go]' language identifier. Useful when you want to control formatting manually or use non-standard formatting workflows. Requires no additional dependencies, but must be placed in your VS Code settings.json file inside the root object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/go.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[go]\": {\n    \"editor.formatOnSave\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Terminal Clear Shortcut on macOS in keybindings.json\nDESCRIPTION: Shows how to remove the default keybinding for the terminal clear command (`workbench.action.terminal.clear`) typically assigned to `Cmd+K` on macOS. This modification is done in the user's `keybindings.json` file by prefixing the command ID with a hyphen (`-`). This is useful for enabling `Cmd+K` chord shortcuts that would otherwise be intercepted by the clear command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"cmd+k\",\n    \"command\": \"-workbench.action.terminal.clear\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Decorators in VS Code Settings\nDESCRIPTION: JSON configuration to disable color preview decorators globally or specifically for CSS/SCSS/Less files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.colorDecorators\": false\n```\n\nLANGUAGE: json\nCODE:\n```\n\"[css]\": {\n    \"editor.colorDecorators\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Missing Function Declaration with TypeScript Quick Fix - TypeScript\nDESCRIPTION: This snippet demonstrates how the TypeScript 'Add missing function declaration' Quick Fix auto-generates a stub for an unimplemented function, based on a function call. 'add' is called with arguments, and the Quick Fix generates a function definition with matching argument types and a placeholder throwing an error. Dependencies include TypeScript enabled (VS Code ships with TypeScript 4.2.2). The purpose is to speed up authoring by auto-generating correct signatures. Inputs are call sites missing a function; outputs are stubbed function code. Works with type checking enabled in JavaScript as well.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: number = add(1, 2);\nfunction add(arg0: number, arg1: number): number {\n    throw new Error(\"Function not implemented.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Diagnostic Tags in VS Code Extensions (TypeScript)\nDESCRIPTION: Demonstrates how to use the VS Code API to create a Diagnostic object and attach the 'Unnecessary' diagnostic tag, which is used to visually indicate unreachable or unused code by fading it out in the editor. Requires the vscode API and setting up a Diagnostic and Range object. The 'tags' property allows assigning an array of tags such as 'vscode.Diagnostic.Unnecessary', affecting rendering in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst diag = new vscode.Diagnostic(new Range(0, 0, 0, 10), 'Unused');\ndiag.tags = [vscode.Diagnostic.Unnecessary]\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Chat Accessibility View Configuration\nDESCRIPTION: VSCode setting to control the accessibility view for inline chat, which shows code changes similar to the accessible diff viewer. Can be configured to always be on or off.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"inlineChat.accessibleDiffView\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Hot Reloading for Django by Modifying Dockerfile\nDESCRIPTION: Modification to the Dockerfile to enable hot reloading for Django applications. This change prevents copying the app code into the container, allowing for volume mounting instead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\n#ADD . /app\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Number Display Options in VS Code Settings (JSON)\nDESCRIPTION: These string values represent the options for the `editor.lineNumbers` setting in VS Code's `settings.json`. This setting controls how line numbers are displayed in the editor's gutter. Version 1.6 introduced the `\"relative\"` option (shows line count from the current cursor position), alongside the existing `\"on\"` (absolute line numbers) and `\"off\"` (no line numbers) options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"on\", \"off\" and \"relative\"\n```\n\n----------------------------------------\n\nTITLE: Setting Port Icon Colors in VS Code Themes\nDESCRIPTION: Lists the configuration key for setting the color of the icon used for a port associated with a running process in VS Code. This identifier is used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n- `ports.iconRunningProcessForeground`: The color of the icon for a port that has an associated running process.\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Plugin for Workspace Versions in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a contributed TypeScript server plugin to be enabled even when the user is using a workspace version of TypeScript, by setting `enableForWorkspaceTypeScriptVersions` to `true` within the `contributes.typescriptServerPlugins` definition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"typescriptServerPlugins\": [\n      {\n        \"name\": \"typescript-styled-plugin\",\n        \"enableForWorkspaceTypeScriptVersions\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Auto-Forward Browser Opening in VS Code\nDESCRIPTION: This snippet demonstrates how to use the new 'openBrowserOnce' option for the 'onAutoForward' setting in remote.portsAttributes. This setting opens the browser only once per session when a specific port is detected, useful for watch tasks that frequently restart processes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_58.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote.portsAttributes\": {\n    \"4000\": {\n      \"onAutoForward\": \"openBrowserOnce\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce color provider capabilities in the LSP initialize method response. This allows the language server to provide color information for preview and modification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"colorProvider\" : \"true\"\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clean Environment Debug Settings in VS Code\nDESCRIPTION: Debug configuration for running extensions in a clean environment using the --profile-temp switch. This setup enables testing in an isolated environment without user settings and installed extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Extension\",\n    \"type\": \"extensionHost\",\n    \"request\": \"launch\",\n    \"args\": [\n        \"--profile-temp\",\n        \"--extensionDevelopmentPath=${workspaceFolder}\"\n    ],\n    \"outFiles\": [\n        \"${workspaceFolder}/dist/**/*.js\"\n    ],\n    \"preLaunchTask\": \"npm: watch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Settings in devcontainer.json (JSON)\nDESCRIPTION: Shows how to add container-specific settings to the devcontainer.json file using the \"settings\" property. These settings, such as overriding the Python path, are transferred into the container post-creation. Requires knowledge of the settings keys supported by VS Code and assumes configuration occurs during containerized development. Inputs involve a JSON object describing VS Code settings, while output manifests as those settings being present inside the container environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_35.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"python.pythonPath\": \"/usr/local/bin/python\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Shell Integration Installation for Bash\nDESCRIPTION: Shell script command to manually install VS Code shell integration for bash using the code CLI. This works cross-platform and with remote windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Configuration with Presentation Options in JSON\nDESCRIPTION: This JSON snippet shows how to structure a presentation attribute in a launch.json configuration. It allows sorting, grouping, and hiding configurations in the Debug dropdown using order, group, and hidden properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"presentation\": {\n    \"group\": \"5_tests\",\n    \"order\": 10,\n    \"hidden\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Code Completions in VS Code Settings\nDESCRIPTION: This setting key, `github.copilot.enable`, allows fine-grained control over Copilot's code completion feature within VS Code's settings (`settings.json`). It typically accepts an object where `\"*\": true/false` enables/disables completions globally, and entries like `\"python\": false` can disable it for specific languages. Requires the GitHub Copilot extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nsetting(github.copilot.enable)\n```\n\n----------------------------------------\n\nTITLE: Obsolete File Picker Matching Setting in VS Code\nDESCRIPTION: This setting (`filePicker.alternateFileNameMatching`) was previously used to control the file matching algorithm in the Quick Open file picker. It is now obsolete as fuzzy matching is enabled by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"filePicker.alternateFileNameMatching\": <boolean>\n```\n\n----------------------------------------\n\nTITLE: Excluding Derived JavaScript Files in VS Code Explorer (settings.json)\nDESCRIPTION: Provides a JSON configuration snippet for the `files.exclude` setting within VS Code's workspace `settings.json` file (located in `.vscode`). It uses a glob pattern (`**/*.js`) paired with a `when` clause (`$(basename).ts`) to hide JavaScript files in the File Explorer only when a corresponding TypeScript file with the same base name exists in the same directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-compiling.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"**/*.js: { \\\"when\\\": \\\"$(basename).ts\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Contributing Walkthroughs to VS Code's Getting Started Page\nDESCRIPTION: JSON configuration for creating interactive walkthroughs that appear on VS Code's Getting Started page. The example demonstrates a two-step walkthrough with different media types and completion events that track user progress.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"walkthroughs\": [\n      {\n        \"id\": \"sample\",\n        \"title\": \"Sample\",\n        \"description\": \"A sample walkthrough\",\n        \"steps\": [\n          {\n            \"id\": \"runcommand\",\n            \"title\": \"Run Command\",\n            \"description\": \"This step will run a command and check off once it has been run.\\n[Run Command](command:getting-started-sample.runCommand)\",\n            \"media\": { \"image\": \"media/image.png\", \"altText\": \"Empty image\" },\n            \"completionEvents\": [\"onCommand:getting-started-sample.runCommand\"]\n          },\n          {\n            \"id\": \"changesetting\",\n            \"title\": \"Change Setting\",\n            \"description\": \"This step will change a setting and check off when the setting has changed\\n[Change Setting](command:getting-started-sample.changeSetting)\",\n            \"media\": { \"markdown\": \"media/markdown.md\" },\n            \"completionEvents\": [\"onSettingChanged:getting-started-sample.sampleSetting\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Tab Position in VS Code (JSON)\nDESCRIPTION: This snippet shows how to control where new tabs appear in VS Code by setting the workbench.editor.openPositioning option to 'left' in the settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.openPositioning\": \"left\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Configuration for WebAssembly\nDESCRIPTION: Package.json configuration for a VS Code extension that supports WebAssembly execution, including necessary dependencies and command definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/06/05/vscode-wasm-wasi.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"...\",\n    ...,\n    \"extensionDependencies\": [\n        \"ms-vscode.wasm-wasi-core\"\n    ],\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"wasm-c-example.run\",\n                \"category\": \"WASM Example\",\n                \"title\": \"Run C Hello World\"\n            }\n        ]\n    },\n    \"devDependencies\": {\n        \"@types/vscode\": \"1.77.0\",\n    },\n    \"dependencies\": {\n        \"@vscode/wasm-wasi\": \"0.11.0-next.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tool-based Edit Mode in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable the new tool-based edit mode in Visual Studio Code. This mode aligns with agent mode, allowing seamless switching between modes and simplifying the underlying implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"chat.edits2.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Terminal Performance Example - Before Version 1.8.1\nDESCRIPTION: Demonstration of terminal performance before the optimization in version 1.8.1 showing slower processing of large amounts of data.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n![Terminal performance before](images/1_9/terminal-before.gif)\n```\n\n----------------------------------------\n\nTITLE: VS Code Semantic Token Customization\nDESCRIPTION: JSON configuration for customizing semantic token styling in VS Code, specifically for mutable variables in Rust.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"editor.semanticTokenColorCustomizations\": {\n    \"rules\": {\n      \"*.mutable\": {\n        \"fontStyle\": \"\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Copilot Feature Stages Table Structure\nDESCRIPTION: Markdown table defining the different stages of Copilot features from Experimental to Stable, including descriptions of each stage and their implications for users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Stage | Description |\n|-------|-------------|\n| **Experimental** | The feature is still in development and not yet ready for general use.<br/>View the [experimental features](command:workbench.action.openSettings?%5B%22%40tag%3Aexperimental%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:experimental`). |\n| **Preview** | The feature is still under refinement, yet ready to use. Feedback is welcome.<br/>View the [preview features](command:workbench.action.openSettings?%5B%22%40tag%3Apreview%20%40ext%3Agithub.copilot-chat%22%5D) (`@tag:preview`). |\n| **Stable** | The feature is ready for general use. |\n```\n\n----------------------------------------\n\nTITLE: Setting line endings with .gitattributes - YAML\nDESCRIPTION: This YAML-formatted .gitattributes example controls line ending normalization in a Git repository. It enforces LF for all files by default but makes exceptions for *.cmd and *.bat files which are forced to use CRLF endings. These rules help avoid spurious diffs across platforms and require Git v2.10+ for extended pattern support. The file should be placed at the repository root to take effect.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n* text=auto eol=lf\n*.{cmd,[cC][mM][dD]} text eol=crlf\n*.{bat,[bB][aA][tT]} text eol=crlf\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Notebook Interface Colors in VS Code Themes\nDESCRIPTION: Lists configuration keys for controlling the appearance of various elements within the VS Code Notebook interface. This includes cell backgrounds, borders, focus indicators, toolbar separators, status icons, output containers, and scrollbars. These identifiers are used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n- `notebook.editorBackground`: Notebook background color.\n- `notebook.cellBorderColor`: The border color for notebook cells.\n- `notebook.cellHoverBackground`: The background color of a cell when the cell is hovered.\n- `notebook.cellInsertionIndicator`: The color of the notebook cell insertion indicator.\n- `notebook.cellStatusBarItemHoverBackground`: The background color of notebook cell status bar items.\n- `notebook.cellToolbarSeparator`: The color of the separator in the cell bottom toolbar\n- `notebook.cellEditorBackground`: The color of the notebook cell editor background\n- `notebook.focusedCellBackground`: The background color of a cell when the cell is focused.\n- `notebook.focusedCellBorder`: The color of the cell's focus indicator borders when the cell is focused.\n- `notebook.focusedEditorBorder`: The color of the notebook cell editor border.\n- `notebook.inactiveFocusedCellBorder`: The color of the cell's top and bottom border when a cell is focused while the primary focus is outside of the editor.\n- `notebook.inactiveSelectedCellBorder`: The color of the cell's borders when multiple cells are selected.\n- `notebook.outputContainerBackgroundColor`: The Color of the notebook output container background.\n- `notebook.outputContainerBorderColor`: The border color of the notebook output container.\n- `notebook.selectedCellBackground`: The background color of a cell when the cell is selected.\n- `notebook.selectedCellBorder`: The color of the cell's top and bottom border when the cell is selected but not focused.\n- `notebook.symbolHighlightBackground`: Background color of highlighted cell\n- `notebookScrollbarSlider.activeBackground`: Notebook scrollbar slider background color when clicked on.\n- `notebookScrollbarSlider.background`: Notebook scrollbar slider background color.\n- `notebookScrollbarSlider.hoverBackground`: Notebook scrollbar slider background color when hovering.\n- `notebookStatusErrorIcon.foreground`: The error icon color of notebook cells in the cell status bar.\n- `notebookStatusRunningIcon.foreground`: The running icon color of notebook cells in the cell status bar.\n- `notebookStatusSuccessIcon.foreground`: The success icon color of notebook cells in the cell status bar.\n- `notebookEditorOverviewRuler.runningCellForeground`: The color of the running cell decoration in the notebook editor overview ruler.\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Container Lockfile in VS Code Settings (JSON)\nDESCRIPTION: Shows the JSON configuration for enabling the use of lockfiles in Dev Containers. This setting is experimental and records Feature dependencies in the devcontainer-lock.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_81.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dev.containers.experimentalLockfile\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active C/C++ Configuration Name (VS Code Variable)\nDESCRIPTION: Demonstrates the VS Code variable `${command:cpptools.activeConfigName}`. This variable can be used within `tasks.json` or `launch.json` files to dynamically retrieve the `name` of the currently active configuration selected from `c_cpp_properties.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n${command:cpptools.activeConfigName}\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Recent Command Keybinding in VS Code\nDESCRIPTION: JSON configuration to set up a keyboard shortcut (Ctrl+Space) for the 'Run Recent Command' feature in the VS Code integrated terminal. This allows quick access to command history.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+space\",\n    \"command\": \"workbench.action.terminal.runRecentCommand\",\n    \"when\": \"terminalFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Untitled Notebook with Command Arguments in VS Code - JSON\nDESCRIPTION: This JSON code snippet demonstrates how to bind a keyboard shortcut (\\u201ccmd+i\\u201d) to the VS Code command for creating a new untitled file with a specific notebook view type (\\u201cgithub-issues\\u201d). It is meant to be added to a user's keybindings.json, allowing quick creation of GitHub Issue Notebooks. Dependencies include the appropriate extension (such as GitHub Issue Notebooks) installed and VS Code supporting custom viewType arguments. Key parameters: \\u201ckey\\u201d for the shortcut, \\u201ccommand\\u201d for the action, and \\u201cargs\\u201d to specify details. The input is a keyboard event and the output is a new untitled notebook opened in the specified view. Limitations: Requires VS Code Insiders and the appropriate notebook extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"key\\\": \\\"cmd+i\\\",\\n    \\\"command\\\": \\\"workbench.action.files.newUntitledFile\\\",\\n    \\\"args\\\": { \\\"viewType\\\": \\\"github-issues\\\" }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Formatter Settings in VS Code\nDESCRIPTION: JSON configuration for the built-in CSS formatter in VS Code. These settings control various aspects of CSS, LESS, and SCSS formatting, such as newlines between rules and selectors, and spacing around selector separators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"css.format.enable\": true,\n    \"css.format.newlineBetweenRules\": true,\n    \"css.format.newlineBetweenSelectors\": true,\n    \"css.format.spaceAroundSelectorSeparator\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Reporting with VS Code Settings - JSON\nDESCRIPTION: This snippet demonstrates how to disable all telemetry data reporting in Visual Studio Code by setting the 'telemetry.telemetryLevel' user setting to 'off' within the JSON configuration. No dependencies beyond the VS Code editor are required. Add this line to your user or workspace settings file to prevent VS Code from sending telemetry, crash reports, and error information. The snippet is a single-key setting, expecting a string value; 'off' disables telemetry, while other values enable selective data collection. Only usable in JSON settings files or via the settings GUI in JSON mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"telemetry.telemetryLevel\": \"off\"\n```\n\n----------------------------------------\n\nTITLE: Setting CWD for New Terminals via createTerminal API (TypeScript)\nDESCRIPTION: Illustrates how to specify the current working directory (CWD) when creating a new terminal using the `vscode.window.createTerminal` API function. The example passes an options object with a `name` and a `cwd` property, setting the terminal's starting directory to the user's home directory retrieved from `process.env.HOME`. Depends on the `vscode` API module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nvscode.window.createTerminal({\n  name: 'My Ext Terminal',\n  cwd: process.env.HOME\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunicorn Command for Flask in Dockerfile\nDESCRIPTION: Docker command for running a Flask application with Gunicorn web server, binding to port 5000.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-python.md#2025-04-23_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"{subfolder}.{module_file}:app\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication Callback Handler in TypeScript\nDESCRIPTION: Demonstrates how to register a URI handler for authentication callbacks and implement a sign-in command using vscode.window.registerUriHandler and vscode.env.asExternalUri APIs. This implementation works across local VS Code, remote environments, and Codespaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\n// This is ${publisher}.${name} from package.json\nconst extensionId = 'my.amazing-extension';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\n    // Register a URI handler for the authentication callback\n    vscode.window.registerUriHandler({\n        handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {\n\n            // Add your code for what to do when the authentication completes here.\n            if (uri.path === '/auth-complete') {\n                vscode.window.showInformationMessage('Sign in successful!');\n            }\n\n        }\n    });\n\n    // Register a sign in command\n    context.subscriptions.push(vscode.commands.registerCommand(`${extensionId}.signin`, async () => {\n\n        // Get an externally addressable callback URI for the handler that the authentication provider can use\n        const callbackUri = await vscode.env.asExternalUri(vscode.Uri.parse(`${vscode.env.uriScheme}://${extensionId}/auth-complete`));\n\n        // Add your code to integrate with an authentication provider here - we'll fake it.\n        vscode.env.clipboard.writeText(callbackUri.toString());\n        await vscode.window.showInformationMessage('Open the URI copied to the clipboard in a browser window to authorize.');\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Style Guidelines in Markdown for Copilot Review\nDESCRIPTION: This Markdown snippet shows the contents of a code-style.md file that can be referenced in Copilot review settings. It defines coding standards such as private field naming conventions and class declarations per file that Copilot will use when reviewing code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPrivate fields should start with an underscore.\n\nA file can only contain one class declaration.\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Servers in VS Code (JSON)\nDESCRIPTION: Example `.vscode/mcp.json` file showing how to define input prompts for sensitive data like API keys and configure multiple MCP servers. It includes configurations for a Docker-based stdio server (`Perplexity`), a local command-based stdio server (`fetch`), and an SSE-based remote server (`my-remote-server`), illustrating various connection types and environment variable usage. Inputs are prompted on first server start and stored securely.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/mcp-servers.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Example .vscode/mcp.json\n{\n    // 💡 Inputs will be prompted on first server start,\n    //    then stored securely by VS Code.\n    \"inputs\": [\n        {\n            \"type\": \"promptString\",\n            \"id\": \"perplexity-key\",\n            \"description\": \"Perplexity API Key\",\n            \"password\": true\n        },\n    ],\n    \"servers\": {\n        // https://github.com/ppl-ai/modelcontextprotocol/\n        \"Perplexity\": {\n            \"type\": \"stdio\",\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"PERPLEXITY_API_KEY\",\n                \"mcp/perplexity-ask\"\n            ],\n            \"env\": {\n                \"PERPLEXITY_API_KEY\": \"${input:perplexity-key}\"\n            }\n        },\n        // https://github.com/modelcontextprotocol/servers/tree/main/src/fetch\n        \"fetch\": {\n            \"type\": \"stdio\",\n            \"command\": \"uvx\",\n            \"args\": [\"mcp-server-fetch\"]\n        },\n        \"my-remote-server\": {\n            \"type\": \"sse\",\n            \"url\": \"http://api.contoso.com/sse\",\n            \"headers\": { \"VERSION\": \"1.2\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Archived Debian Sources in Dockerfile\nDESCRIPTION: This Dockerfile snippet adds archived Debian Jessie sources to the source list. It's used to resolve build failures for images based on Debian 8/Jessie by providing access to necessary packages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\n# Add archived sources to source list if base image uses Debian 8 / Jessie\nRUN cat /etc/*-release | grep -q jessie && printf \"deb http://archive.debian.org/debian/ jessie main\\ndeb-src http://archive.debian.org/debian/ jessie main\\ndeb http://security.debian.org jessie/updates main\\ndeb-src http://security.debian.org jessie/updates main\" > /etc/apt/sources.list\n```\n\n----------------------------------------\n\nTITLE: Extension Directory Structure for TextMate Snippets\nDESCRIPTION: This bash code displays the directory structure of a VS Code snippet extension generated using the yo code generator, showing the placement of the snippets.json file and package.json manifest.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/snippet-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── snippets                    // VS Code integration\n│   └── snippets.json           // The JSON file w/ the snippets\n└── package.json                // extension's manifest\n```\n\n----------------------------------------\n\nTITLE: Extending Docker Compose Configuration for Dev Containers - YAML\nDESCRIPTION: This YAML snippet demonstrates how to extend an existing `docker-compose.yml` with additional configurations for development, including mapping the local project folder into the container, adding debugging capabilities through ptrace options, and preventing container shutdown after the primary process exits. It requires Docker Compose version 3 or higher and is intended to be included as an override file in conjunction with the main Compose file. The 'command' key is overridden to keep the container running for debugging and development workflows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n      # Mounts the project folder to '/workspace'. While this file is in .devcontainer,\n      # mounts are relative to the first file in the list, which is a level up.\n      - .:/workspace:cached\n\n    # [Optional] Required for ptrace-based debuggers like C++, Go, and Rust\n    cap_add:\n      - SYS_PTRACE\n    security_opt:\n      - seccomp:unconfined\n\n    # Overrides default command so things don't shut down after the process ends.\n    command: /bin/sh -c \"while sleep 1000; do :; done\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSH Tunnel for Remote Docker Host\nDESCRIPTION: This bash command establishes an SSH tunnel to forward the Docker socket from a remote host to the local machine. It's used when direct remote Docker connections are not possible due to network limitations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nssh -NL localhost:23750:/var/run/docker.sock user@hostname\n```\n\n----------------------------------------\n\nTITLE: Registering an Existing Debug Adapter using DebugAdapterInlineImplementation - VS Code Extension API - TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use an existing debug adapter that adheres to the DebugAdapter interface, wrapping it with DebugAdapterInlineImplementation. It registers a factory for a 'mock' debugger type and returns a new MockDebugSession wrapped as an inline implementation. Dependencies: 'vscode', custom MockDebugSession. Inputs: debug session (unused). Outputs: inline debug adapter instance. The external module must implement all protocol logic.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\n  createDebugAdapterDescriptor: (_session) => {\n    return new vscode.DebugAdapterInlineImplementation(new MockDebugSession());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Git Merge Configuration in gitconfig\nDESCRIPTION: Configuration to set VS Code as the default merge tool for Git by specifying the merge tool command with appropriate parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[merge]\n  tool = code\n[mergetool \"code\"]\n  cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED\n```\n\n----------------------------------------\n\nTITLE: Defining resourceUri for TreeItem in Custom Views (TypeScript)\nDESCRIPTION: Provides the TypeScript definition and documentation for the `resourceUri` property of the `TreeItem` class in the VS Code API. Setting this optional property allows a custom view item to link to a file resource, enabling VS Code to automatically derive the item's label (if not explicitly provided) and icon based on the user's configured file icon theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The [uri](#Uri) of the resource representing this item.\n *\n * Will be used to derive the [label](#TreeItem.label), when it is not provided.\n * Will be used to derive the icon from current file icon theme, when [iconPath](#TreeItem.iconPath) is not provided.\n */\nresourceUri?: Uri;\n```\n\n----------------------------------------\n\nTITLE: Disabling Minimum Contrast Ratio in VS Code Terminal (JSON)\nDESCRIPTION: This JSON configuration disables the minimum contrast ratio feature in the VS Code integrated terminal. This setting can be used to resolve issues with unexpected color display in the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.minimumContrastRatio\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Executable Path in VS Code (Linux/macOS)\nDESCRIPTION: JSON configuration examples for setting the PHP executable path in Linux or macOS environments through settings.json\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/php.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"php.validate.executablePath\": \"/usr/bin/php\"\n}\n\nor\n\n{\n    \"php.validate.executablePath\": \"/usr/local/bin/php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Debugger Settings in JSON\nDESCRIPTION: JSON configuration for enabling the new JavaScript debugger for Node.js and Chrome. This setting enables the new V3 debugger which supports debugging web workers and npm scripts without additional configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"debug.chrome.useV3\": true,\n  \"debug.node.useV3\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keybinding for Paste with Import Updates in VS Code (JSON)\nDESCRIPTION: Defines a custom keybinding in VS Code's `keybindings.json` file. This JSON object maps the `ctrl+shift+v` key combination to the `editor.action.pasteAs` command. The `args` property specifies `preferences` as `[\"text.updateImports\"]`, forcing this specific keybinding to always attempt pasting with automatic import updates for JavaScript/TypeScript.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+shift+v\",\n    \"command\": \"editor.action.pasteAs\",\n    \"args\": {\n        \"preferences\": [\n            \"text.updateImports\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lightbulb Configuration Setting\nDESCRIPTION: Setting to control the visibility of the Code Actions lightbulb icon in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nvscode://settings/editor.lightbulb.enabled\n```\n\n----------------------------------------\n\nTITLE: Executing VS Code Command via Input Variable in tasks.json (JSON)\nDESCRIPTION: Presents a `tasks.json` configuration where a task uses an input variable (`${input:terminate}`) of type `command`. This variable executes the built-in VS Code `workbench.action.tasks.terminate` command with the argument `terminateAll`, allowing the task to trigger the termination of all currently running tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Terminate All Tasks\",\n            \"command\": \"echo ${input:terminate}\",\n            \"type\": \"shell\",\n            \"problemMatcher\": []\n        }\n    ],\n     \"inputs\": [\n        {\n            \"id\": \"terminate\",\n            \"type\": \"command\",\n            \"command\": \"workbench.action.tasks.terminate\",\n            \"args\": \"terminateAll\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-starting SSH Agent and Adding Keys on Linux Login (Bash)\nDESCRIPTION: Bash script snippet intended to be added to `~/.bash_profile` or `~/.zprofile` on Linux. It checks if the SSH agent is running; if not, it starts one, saves its details to `$HOME/.ssh/ssh-agent`, sets the environment variables for the login shell, and attempts to add default SSH keys using `ssh-add`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nif [ -z \"$SSH_AUTH_SOCK\" ]; then\n   # Check for a currently running instance of the agent\n   RUNNING_AGENT=\"`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`\"\n   if [ \"$RUNNING_AGENT\" = \"0\" ]; then\n        # Launch a new instance of the agent\n        ssh-agent -s &> $HOME/.ssh/ssh-agent\n   fi\n   eval `cat $HOME/.ssh/ssh-agent` > /dev/null\n   ssh-add 2> /dev/null\nfi\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for Multi-Project Container Setup\nDESCRIPTION: Example directory structure showing how multiple project repositories can be organized by programming language for container configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/configure-separate-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n📁 Repos\n   📁 node\n   📁 python\n      📁 starter-snake-python\n      📁 vscode-remote-try-python\n      📁 your-python-project-here\n   📁 go\n   📁 dotnet\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Rendering Hook for Notebooks in TypeScript\nDESCRIPTION: Provides a TypeScript example demonstrating the usage of the proposed extensible JavaScript notebook renderer API. It shows how to obtain the built-in renderer instance using `ctx.getRenderer` and then register a custom hook (`preEvaluate`) using `experimental_registerJavaScriptRenderingHook`. This hook allows the extension to intercept and potentially modify the JavaScript code or the target HTML element before evaluation. Requires `vscode-notebook-renderer` types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RendererContext } from 'vscode-notebook-renderer';\n\nexport async function activate(ctx: RendererContext<void>) {\n  const builtinRenderer = await ctx.getRenderer('vscode.builtin-renderer');\n  if (!builtinRenderer) {\n      throw new Error(`Could not load 'vscode.builtin-renderer'`);\n  }\n\n  builtinRenderer.experimental_registerJavaScriptRenderingHook({\n    // Invoked before th js has been evaluated\n    preEvaluate(outputItem: OutputItem, element: HTMLElement, script: string, signal, signal: AbortSignal): string | undefined | Promise<string | undefined> {\n      // You can either modify `element` or return a new script source here\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Command with a Single Template in JSON\nDESCRIPTION: This JSON snippet demonstrates how to override the default `docker build` command executed by the VS Code Docker extension using a single custom template string in `settings.json`. The template utilizes placeholders like `${dockerfile}`, `${tag}`, and `${context}` which are substituted at runtime. This configuration applies globally whenever the build command is invoked through the extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"docker.commands.build\": \"docker build --rm -f \\\"${dockerfile}\\\" -t ${tag} \\\"${context}\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tree View Visualization Structure in XSD\nDESCRIPTION: This XSD complexType defines the structure for visualizing a variable as a tree in the debugger. It includes optional elements for the tree size and required elements for expressions pointing to the head, left child, right child, and value node of the tree. Documentation specifies how these pointer expressions are evaluated within the context of the tree node.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType>\n    <xs:annotation>\n      <xs:documentation>Specifies a tree view of the contents of a variable.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Size\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>The size of the tree.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"HeadPointer\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the head of the tree.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"LeftPointer\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the left child of a tree node. This expression is evaluated under the context of the tree node and not the parent type.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"RightPointer\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the right child of a tree node. This expression is evaluated under the context of the tree node and not the parent type.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"ValueNode\" type=\"TreeItemsNodeType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the value of the tree node. It can be left empty or have 'this' to refer to the tree node itself. This expression is evaluated under the context of the tree node and not the parent type.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n    </xs:sequence>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace Folders API in TypeScript\nDESCRIPTION: Proposed API for adding, removing, and changing workspace folders in the currently opened workspace. Allows for dynamic modification of the workspace structure.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWorkspaceFolders(\n  start: number,\n  deleteCount: number,\n  ...workspaceFoldersToAdd: { uri: Uri, name?: string }[]\n): boolean\n```\n\n----------------------------------------\n\nTITLE: Initializing VS Code Extension Project with Yeoman\nDESCRIPTION: Commands to generate a new VS Code extension project using Yeoman generator with specific configuration options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx --package yo --package generator-code -- yo code\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code from WSL 2 in Bash\nDESCRIPTION: This command launches Visual Studio Code from within the WSL 2 environment, opening the current directory in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/09/03/wsl2.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Illustrating Anchor Set Behavior with Unclosed Bracket\nDESCRIPTION: Provides an example demonstrating how anchor sets guide error recovery. The unclosed parenthesis `(` at [1] should terminate before the closing brace `}` at [2] because the anchor set at [1] (expected closing tokens from outer scope) would contain `}` but not `)`. This prevents the parser from incorrectly matching `(` [1] with a potential later `)` across the erroneous `}`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{\n    ( [1]\n} [2]\n{}\n```\n\n----------------------------------------\n\nTITLE: Using noDebug property for Run without Debugging in TypeScript\nDESCRIPTION: New API for 'Run without Debugging' feature in VS Code. The noDebug property is added to DebugSessionOptions of the debug.startDebugging function to control whether a session should run with or without debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndebug.startDebugging(undefined, {\n  type: 'node',\n  request: 'launch',\n  name: 'Launch Program',\n  program: '${file}'\n}, { noDebug: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing getVisibleCodeWithLineNumbers Function\nDESCRIPTION: Defines a function to retrieve visible code with line numbers from the current text editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getVisibleCodeWithLineNumbers(textEditor: vscode.TextEditor) {\n  // get the position of the first and last visible lines\n  let currentLine = textEditor.visibleRanges[0].start.line;\n  const endLine = textEditor.visibleRanges[0].end.line;\n\n  let code = '';\n\n  // get the text from the line at the current position.\n  // The line number is 0-based, so we add 1 to it to make it 1-based.\n  while (currentLine < endLine) {\n    code += `${currentLine + 1}: ${textEditor.document.lineAt(currentLine).text} \\n`;\n    // move to the next line position\n    currentLine++;\n  }\n  return code;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript ES6 Import Example for React Native\nDESCRIPTION: Example showing ES6 import syntax for React Native that requires allowSyntheticDefaultImports compiler option for proper IntelliSense support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Adding Test Coverage in TypeScript\nDESCRIPTION: Shows how to implement test coverage reporting in a test run handler, including adding file coverage data to the test run.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  // ...\n\n  for await (const file of readCoverageOutput()) {\n    run.addCoverage(new vscode.FileCoverage(file.uri, file.statementCoverage))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unpublishing a VS Code extension using vsce\nDESCRIPTION: This command unpublishes a VS Code extension from the Marketplace using vsce. It requires the full extension identifier, which is a combination of the publisher ID and extension name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvsce unpublish <publisher id>.<extension name>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Pack in VS Code Package Manifest - JSON\nDESCRIPTION: The snippet demonstrates how to declare an Extension Pack in a VS Code extension's package.json file using the 'extensionPack' property. It includes an array of extension identifiers, each representing an extension bundled in the pack. This enables users to install or manage multiple related extensions as a group. The only dependency is a valid VS Code extension project, and the extension identifiers must be correct. The input is a JSON object property, and the output is the Extension Pack definition in VS Code's UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"extensionPack\": [\n    \"andreweinand.mock-debug\",\n    \"ms-vscode.mono-debug\",\n    \"ms-vscode.cpptools\",\n    \"ms-dotnettools.csharp\",\n    \"vscjava.vscode-java-debug\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Suggestion Actions in VS Code\nDESCRIPTION: JSON configuration to disable spelling suggestions in JavaScript files within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"javascript.suggestionActions.enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Extension Activation Events in package.json\nDESCRIPTION: Examples of different activation event patterns for debug extensions in package.json. Shows how to use fine-grained activation events to optimize extension startup time.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\n    \"onDebug\",                        // Activate for all debugging sessions (use for lightweight extensions)\n    \"onDebugInitialConfigurations\",   // Activate just before provideDebugConfigurations is called\n    \"onDebugResolve:node\"             // Activate just before resolveDebugConfiguration for 'node' type is called\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Process Picker Command for Attaching to Java Process\nDESCRIPTION: Uses the VS Code command variable to open a process picker dialog that allows selecting a Java process to attach to.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"${command:PickJavaProcess}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Uninstall Hook in VS Code (JSON)\nDESCRIPTION: Defines a script executed upon complete uninstallation of a VS Code extension by specifying a 'vscode:uninstall' entry in the 'scripts' section of 'package.json'. This utilizes Node.js to perform clean-up operations on uninstall, with the provided value pointing to the Node script to execute. Only Node.js scripts are supported, and the script runs after VS Code restarts post-uninstallation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vscode:uninstall\": \"node ./out/src/lifecycle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Less Task Configuration\nDESCRIPTION: VS Code tasks.json configuration for compiling Less files to CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Less Compile\",\n            \"type\": \"shell\",\n            \"command\": \"lessc styles.less styles.css\",\n            \"group\": \"build\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating EventEmitter.fire Usage and Strict Null Checks in VS Code API - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the usage of the EventEmitter class, highlighting that in VS Code 1.44 and below, the fire method allowed optional arguments, potentially leading to undefined values under strict null checking. With VS Code 1.45, the argument to fire is required to improve type safety. The example requires vscode as a dependency, and shows how missing parameters can lead to undefined values in handlers. Input: none; Output: logs undefined when fire is called with no argument. This applies to custom extension development where event type strictness is required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_45.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Valid in VS Code 1.44\nconst emitter = new EventEmitter<number>();\n\nemitter.event((x: number) => console.log(x));\n\n// Calling fire with no argument was valid but resulted in the `x` above being `undefined`\nemitter.fire();\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Bar Visibility in VS Code (JSON)\nDESCRIPTION: This snippet shows how to hide the menu bar on Windows and Linux by changing the window.menuBarVisibility setting in the settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"window.menuBarVisibility\": \"toggle\"\n```\n\n----------------------------------------\n\nTITLE: Implementing prepareInvocation Method for Language Model Tool in TypeScript\nDESCRIPTION: This code shows how to implement the prepareInvocation method for a language model tool. It creates custom confirmation messages for the tool invocation, including a title and a markdown message.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync prepareInvocation(\n    options: vscode.LanguageModelToolInvocationPrepareOptions<ITabCountParameters>,\n    _token: vscode.CancellationToken\n) {\n    const confirmationMessages = {\n        title: 'Count the number of open tabs',\n        message: new vscode.MarkdownString(\n            `Count the number of open tabs?` +\n            (options.input.tabGroup !== undefined\n                ? ` in tab group ${options.input.tabGroup}`\n                : '')\n        ),\n    };\n\n    return {\n        invocationMessage: 'Counting the number of tabs',\n        confirmationMessages,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button using HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) that functions as a 'Scroll to Top' button. It uses the `id` 'scroll-to-top', ARIA attributes (`role`, `aria-label`) for accessibility, and includes an empty `<span>` with class 'icon' likely for styling via CSS. Clicking the link navigates the user to the top of the page (due to `href='#'`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Multi-Extension Debugging Workspace Configuration\nDESCRIPTION: Workspace configuration for debugging multiple VS Code extensions simultaneously using extensionDevelopmentPath arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"folders\": [\n    { \"path\": \"hello1\" },\n    { \"path\": \"hello2\" }\n  ],\n  \"launch\": {\n    \"configurations\": [\n      {\n        \"type\": \"extensionHost\",\n        \"request\": \"launch\",\n        \"name\": \"Launch Two Extensions\",\n        \"args\": [\n          \"--extensionDevelopmentPath=${workspaceFolder:hello1}\",\n          \"--extensionDevelopmentPath=${workspaceFolder:hello2}\",\n        ],\n        \"outFiles\": [\n          \"${workspaceFolder:hello1}/out/**/*.js\",\n          \"${workspaceFolder:hello2}/out/**/*.js\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Keybinding to Launch a Specific Terminal Profile (JSON)\nDESCRIPTION: This JSON snippet defines a custom keyboard shortcut (Ctrl+Shift+T) in VS Code's keybindings.json file. It uses the 'workbench.action.terminal.newWithProfile' command to open a new terminal using the profile named 'zsh' specifically within the editor area.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+t\",\n  \"command\": \"workbench.action.terminal.newWithProfile\",\n  \"args\": {\n    \"profileName\": \"zsh\",\n    \"location\": \"editor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Debug Configuration in launch.json\nDESCRIPTION: VS Code debug configuration for Docker .NET Core with URI format specification for debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-aspnet-core.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dockerServerReadyAction\": {\n    \"uriFormat\": \"%s://localhost:%s/WeatherForecast\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Auto Replies in settings.json\nDESCRIPTION: Shows an example configuration for the `terminal.integrated.autoReplies` setting in `settings.json`. This feature allows the terminal to automatically send a predefined input string when specific output text is detected. In this case, if the terminal outputs the exact string \"Terminate batch job (Y/N)\", it will automatically reply with \"Y\" followed by an Enter key press (`\\r`). This is useful for automating responses to common prompts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.autoReplies\": {\n    \"Terminate batch job (Y/N)\": \"Y\\r\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Diagnostics Commit Hook Sources\nDESCRIPTION: Adjusts the `git.diagnosticsCommitHook.Sources` setting to customize which diagnostic sources (e.g., linters, compilers) and severity levels (e.g., error, warning) should trigger the commit hook prompt.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(git.diagnosticsCommitHook.Sources)\n```\n\n----------------------------------------\n\nTITLE: Using Notebook Workspace Edit API\nDESCRIPTION: Demonstrates how to create workspace edits to modify notebook contents using the new notebookWorkspaceEdit API proposal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentNotebook = vscode.window.activeNotebookEditor?.notebook;\nif (currentNotebook) {\n  const edit = new vscode.WorkspaceEdit();\n\n  edit.set(currentNotebook.uri, vscode.NotebookEdit.insertCells(/* index*/ 1, [\n    // ... new notebook cell data\n  ]));\n\n  await vscode.workspace.applyEdit(edit);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Clang Debug Symbols via Compiler Flag (Shell/CLI)\nDESCRIPTION: Instructs the Clang C++ compiler to include debugging information in the output executable. This flag should be added to the compiler invocation command line.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Suggestion Selection in VS Code settings.json\nDESCRIPTION: This snippet shows the available options for the editor.suggestSelection setting in VS Code. It determines how suggestions are pre-selected in the IntelliSense list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/intellisense.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.suggestSelection\": \"first\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"editor.suggestSelection\": \"recentlyUsed\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"editor.suggestSelection\": \"recentlyUsedByPrefix\"\n```\n\n----------------------------------------\n\nTITLE: Copying Remote Code to Local with rsync in PowerShell via WSL\nDESCRIPTION: Runs rsync from a PowerShell session on Windows via the WSL environment to copy files from a remote server, handling path conversion with wslpath to ensure proper synchronization. Excludes the .git directory and requires WSL, rsync, and appropriate permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_30\n\nLANGUAGE: powershell\nCODE:\n```\nwsl rsync -rlptzv --progress --delete --exclude=.git \"user@hostname:/remote/source/code/path\" \"`$(wslpath -a '$PWD')\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Global Workspace Settings in a .code-workspace File using JSON\nDESCRIPTION: Demonstrates how to include global workspace settings within a `.code-workspace` file using the `settings` key. These settings, such as `window.zoomLevel` and `files.autoSave`, apply across all folders in the multi-root workspace, overriding user settings but potentially being overridden by individual folder settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"folders\": [\n        {\n            \"path\": \"vscode\"\n        },\n        {\n            \"path\": \"vscode-docs\"\n        },\n        {\n            \"path\": \"vscode-generator-code\"\n        }\n    ],\n    \"settings\": {\n        \"window.zoomLevel\": 1,\n        \"files.autoSave\": \"afterDelay\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Config File Setup in YAML\nDESCRIPTION: Example SSH configuration file showing how to set up multiple host connections with different parameters like hostname, user, port and identity file locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/03/remote-ssh-tips-and-tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Read more about SSH config files: https://linux.die.net/man/5/ssh_config\nHost python-linux-vm\n    HostName <vm address>\n    User sana\n    IdentityFile ~/.ssh/id_python_vm\n\nHost node-vm\n    HostName <vm address>\n    User sana\n    Port 5522\n    IdentityFile ~/.ssh/id_node_vm\n```\n\n----------------------------------------\n\nTITLE: Associating File Extensions with Language Identifiers in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure file associations in Visual Studio Code's settings (`settings.json`). It maps files with the `.myphp` extension to be treated as PHP files by specifying the `php` language identifier. This allows users to override or extend default file type recognition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/identifiers.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n    \"*.myphp\": \"php\"\n}\n```\n\n----------------------------------------\n\nTITLE: URL to Open Sample Repo in VS Code Dev Container\nDESCRIPTION: This URL utilizes the `vscode.dev` redirector service to instruct a local VS Code installation (with the Dev Containers extension) to clone the `microsoft/vscode-remote-try-python` GitHub repository directly into an isolated container volume. This provides a quick way to try out a pre-configured development container without cloning the repository locally first. It requires VS Code and the Dev Containers extension to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python\n```\n\n----------------------------------------\n\nTITLE: Executing the Rename Command Programmatically in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `vscode.commands.executeCommand` function to programmatically trigger VS Code's built-in rename functionality (`editor.action.rename`). It requires passing an array containing the target file's URI (created using `vscode.Uri.file`) and the specific position (`vscode.Position`) within that file where the rename operation should be initiated.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nvscode.commands.executeCommand(\n  'editor.action.rename',\n  [vscode.Uri.file('/my/file.abc'), new vscode.Position(14, 7)]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World Console Program using Modern C++\nDESCRIPTION: This C++ code snippet prints a greeting message by iterating over a vector of strings, outputting each word separated by a space, and ending the line. It requires the standard C++ library and should be compiled with a modern C++ compiler (such as MSVC or g++ supporting C++11 or newer). Parameters include no command-line arguments; output is 'Hello C++ World from VS Code and the C++ extension!' to stdout. Limitation: must be compiled in an environment with <iostream>, <vector>, and <string> available.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-msvc.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    vector<string> msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\n\n    for (const string& word : msg)\n    {\n        cout << word << \" \";\n    }\n    cout << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest Arguments in VS Code Python\nDESCRIPTION: Specifies arguments to pass to the `pytest` framework when running tests. The default is an empty list `[]`. Note that if `pytest-cov` is installed and you are debugging tests, you should include `\"--no-cov\"` in these arguments to prevent interference.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Setting Value for Open Editors Sort Order (Alphabetical)\nDESCRIPTION: A value for the `explorer.openEditors.sortOrder` setting. `alphabetical` lists editors in alphabetical order within each editor group in the 'OPEN EDITORS' view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nalphabetical\n```\n\n----------------------------------------\n\nTITLE: Using CodeAction.disabled to Explain Unavailable Refactorings in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to implement a `vscode.CodeActionProvider`. It demonstrates using the proposed `CodeAction.disabled` property to provide a user-friendly message explaining why a specific refactoring (`Convert to emoji`) is unavailable when the cursor is not positioned correctly (not at the start of ':)'). When disabled, the action is still returned so it can be shown faded in context menus. Requires the `vscode` module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport class Emojizer implements vscode.CodeActionProvider {\n\n    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] | undefined {\n        const action = new vscode.CodeAction(`Convert to ${emoji}`, vscode.CodeActionKind.Refactor.append('emojize'));\n\n        if (!this.isAtStartOfSmiley(document, range)) {\n            // Tell the user why our action is not available\n            action.disabled = 'Selection is not currently on a :)';\n            return [action];\n        }\n\n        action.edit = new vscode.WorkspaceEdit();\n        action.edit.replace(document.uri, new vscode.Range(range.start, range.start.translate(0, 2)), '😀');\n        return action;\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proposals in package.json\nDESCRIPTION: Example of enabling specific API proposals in VS Code extension package.json using the new enabledApiProposals property. This replaces the previous enableProposedApi property and requires listing specific proposal names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabledApiProposals\": [\n    \"languageStatus\",\n    \"tabs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing VS Code Settings for Telemetry Configuration\nDESCRIPTION: Markdown syntax for referencing the telemetry settings configuration in VS Code to disable data collection for GitHub Copilot.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`setting(telemetry.telemetryLevel)`\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for Adding Folders to Multi-Root Workspaces\nDESCRIPTION: Command line argument for adding folders to the currently active VS Code window. Works with empty workspaces, single-folder workspaces, and existing multi-root workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_6\n\nLANGUAGE: Command Line\nCODE:\n```\n--add\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Engine Requirement in package.json\nDESCRIPTION: Sets the minimal version of VS Code that an extension requires through the engines field in package.json. This configuration is used to determine which version of vscode.d.ts API definitions to use.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n    \"engines\": {\n        \"vscode\": \"^0.10.7\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet links an external CSS stylesheet (`inproduct_releasenotes.css`) located in the relative `css` directory to the current HTML document. The `rel=\"stylesheet\"` attribute specifies the relationship between the HTML document and the linked file, indicating it's a stylesheet. The `type=\"text/css\"` attribute specifies the MIME type of the linked resource. This link incorporates the necessary styles for rendering the in-product release notes correctly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link for Log Message Page in Django Template\nDESCRIPTION: Adds a link to the log message page in the navigation bar of the base layout template.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<!-- Insert below the link to Home -->\n<a href=\"{% url 'log' %}\" class=\"navbar-item\">Log Message</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Associations in VS Code with JSON\nDESCRIPTION: Sets custom file associations to ensure files with non-standard extensions are interpreted with the correct language mode. This example associates files with the .database extension to be treated as JSON files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n    \".database\": \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Log File in VS Code\nDESCRIPTION: This command opens a specified log file in VS Code. It can be useful for debugging and troubleshooting purposes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`workbench.action.openLogFile` - workbench.action.openLogFile\n\n* _logFile_ -\n```\n\n----------------------------------------\n\nTITLE: Specifying Workspace Folder for Volume-Mounted Workspace in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` snippet sets the `workspaceFolder` to `/workspace`. This is essential when using Docker Compose to mount the entire workspace into a named volume at `/workspace`, ensuring VS Code correctly identifies and opens the project directory within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceFolder\": \"/workspace\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure in Bash\nDESCRIPTION: Demonstrates how to create a C++ project directory named 'projects' with a subdirectory 'helloworld' within the user's Linux home directory using Bash. No dependencies other than a working Linux shell are required. The commands set up the folder structure necessary for storing source code and related files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir projects\\ncd projects\\nmkdir helloworld\n```\n\n----------------------------------------\n\nTITLE: Implementing a DocumentPasteEditProvider in VS Code Extension (TypeScript)\nDESCRIPTION: Example implementation of the proposed `vscode.DocumentPasteEditProvider` API. It shows how to intercept paste operations, add custom data during copy (`prepareDocumentPaste`), retrieve both custom and standard data during paste (`provideDocumentPasteEdits`), and return a `vscode.DocumentPasteEdit` containing a `SnippetString` to modify the pasted content. This example prepends a copy count to the pasted text and requires enabling the `documentPaste` proposed API. The `activate` function registers the provider for 'plaintext' documents.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n/**\n * Provider that maintains a count of the number of times it has copied text.\n */\nclass CopyCountPasteEditProvider implements vscode.DocumentPasteEditProvider {\n\n    private readonly countMimeTypes = 'application/vnd.code.copydemo-copy-count';\n\n    private count = 0;\n\n    prepareDocumentPaste?(\n        _document: vscode.TextDocument,\n        _ranges: readonly vscode.Range[],\n        dataTransfer: vscode.DataTransfer,\n        _token: vscode.CancellationToken\n    ): void | Thenable<void> {\n        dataTransfer.set(this.countMimeTypes, new vscode.DataTransferItem(this.count++));\n        dataTransfer.set('text/plain', new vscode.DataTransferItem(this.count++));\n    }\n\n    async provideDocumentPasteEdits(\n        _document: vscode.TextDocument,\n        _ranges: readonly vscode.Range[],\n        dataTransfer: vscode.DataTransfer,\n        _token: vscode.CancellationToken\n    ): Promise<vscode.DocumentPasteEdit | undefined> {\n        const countDataTransferItem = dataTransfer.get(this.countMimeTypes);\n        if (!countDataTransferItem) {\n            return undefined;\n        }\n\n        const textDataTransferItem = dataTransfer.get('text') ?? dataTransfer.get('text/plain');\n        if (!textDataTransferItem) {\n            return undefined;\n        }\n\n        const count = await countDataTransferItem.asString();\n        const text = await textDataTransferItem.asString();\n\n        // Build a snippet to insert\n        const snippet = new vscode.SnippetString();\n        snippet.appendText(`(copy #${count}) ${text}`);\n\n        return { insertText: snippet };\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    // Enable our provider in plaintext files\n    const selector: vscode.DocumentSelector = { language: 'plaintext' };\n\n    // Register our provider\n    context.subscriptions.push(vscode.languages.registerDocumentPasteEditProvider(selector, new CopyCountPasteEditProvider(), {\n        pasteMimeTypes: ['text/plain'],\n    }));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Conflicts Colors in VS Code\nDESCRIPTION: Color configuration options for merge conflict decorations, including headers, content backgrounds, and borders for different states of merge conflicts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- `merge.currentHeaderBackground`: Current header background in inline merge conflicts.\n- `merge.currentContentBackground`: Current content background in inline merge conflicts.\n- `merge.incomingHeaderBackground`: Incoming header background in inline merge conflicts.\n- `merge.incomingContentBackground`: Incoming content background in inline merge conflicts.\n- `merge.border`: Border color on headers and the splitter in inline merge conflicts.\n- `merge.commonContentBackground`: Common ancestor content background in inline merge-conflicts.\n- `merge.commonHeaderBackground`: Common ancestor header background in inline merge-conflicts.\n- `editorOverviewRuler.currentContentForeground`: Current overview ruler foreground for inline merge conflicts.\n- `editorOverviewRuler.incomingContentForeground`: Incoming overview ruler foreground for inline merge conflicts.\n- `editorOverviewRuler.commonContentForeground`: Common ancestor overview ruler foreground for inline merge conflicts.\n- `mergeEditor.change.background`: The background color for changes.\n- `mergeEditor.change.word.background`: The background color for word changes.\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurationChangeEvent Interface in TypeScript for VS Code Extensions\nDESCRIPTION: Defines the `ConfigurationChangeEvent` interface in TypeScript for the VS Code Extension API. This interface describes the event object passed when configurations change, featuring the `affectsConfiguration` method to check if a specific configuration section (potentially for a given resource) has been modified.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * An event describing the change in Configuration\n */\nexport interface ConfigurationChangeEvent {\n\n    /**\n     * Returns `true` if the given section for the given resource (if provided) is affected.\n     *\n     * @param section Configuration name, supports _dotted_ names.\n     * @param resource A resource Uri.\n     * @return `true` if the given section for the given resource (if provided) is affected.\n     */\n    affectsConfiguration(section: string, resource?: Uri): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Images with devcontainer CLI in Bash\nDESCRIPTION: This command demonstrates how to use the devcontainer CLI to build multi-platform images. It utilizes the new --platform option to specify multiple target architectures and the --push option to push the built images to a remote repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_69.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer build --workspace-folder <workspace folder> --platform linux/arm64,linux/amd64 --image-name <your Docker ID>/<name> --push\n```\n\n----------------------------------------\n\nTITLE: Code Style Instructions in Markdown\nDESCRIPTION: Markdown file content defining React component styling rules and commenting requirements for code generation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nAlways use React functional components.\nAlways add comments.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Paste Behavior with Multiple Paste Handlers\nDESCRIPTION: Mentions the `editor.pasteAs.preferences` setting in VS Code. This setting allows users to define their preferred paste action when multiple paste handlers (provided by extensions using the Document Paste API) are available for the copied content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\neditor.pasteAs.preferences\n```\n\n----------------------------------------\n\nTITLE: Setting Clang C++ Debug Flags for CMake via Environment Variable (Shell)\nDESCRIPTION: Sets the `CMAKE_CXX_FLAGS` environment variable, typically inheriting flags from `CXXFLAGS`. When CMake is run in this shell session, it will pass these flags (including the debug flag if previously set in `CXXFLAGS`) to the Clang++ compiler during the build process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport CMAKE_CXX_FLAGS=${CXXFLAGS}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default SCM Diff Decorations in VS Code\nDESCRIPTION: JSON configuration for the default Source Control Management (SCM) diff decorations in VS Code. This setting controls the use of patterns for added and modified line decorations in the editor gutter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scm.diffDecorationsGutterPattern\": {\n    \"added\": false,\n    \"modified\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Terminal Locations API in VS Code\nDESCRIPTION: Proposed API for creating terminal splits in both panel and editor areas, allowing more flexible terminal placement.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nTerminal.state and window.onDidChangeTerminalState\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Outline View Settings\nDESCRIPTION: Settings that control filtering options in the Notebook Outline view, allowing users to show or hide Markdown headers, Code Cells, and Code Cell Symbols.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nnotebook.outline.showMarkdownHeadersOnly\n```\n\nLANGUAGE: json\nCODE:\n```\nnotebook.outline.showCodeCells\n```\n\nLANGUAGE: json\nCODE:\n```\nnotebook.outline.showCodeCellSymbols\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest Color Output\nDESCRIPTION: Setting to enable colored output in Pytest test results within VS Code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"python.testing.pytestArgs\": [\"--color=yes\"]\n```\n\n----------------------------------------\n\nTITLE: Terminal Automation Shell Configuration for Debugging\nDESCRIPTION: Configuration that sets specific shells for terminal and automation in the context of debugging. This allows using a customized shell for terminal while having a more compatible shell for automation when launching debug targets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shell.osx\": \"/Users/user/bin/tmux_script\"\n\"terminal.integrated.automationShell.osx\": \"bash\",\n```\n\n----------------------------------------\n\nTITLE: Mapping Folder Contents to PHP Language in VS Code\nDESCRIPTION: JSON configuration that associates all files within a specific folder to the PHP language using glob patterns. This setting allows treating all files in a designated folder as PHP files regardless of extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"files.associations\": {\n    \"**/somefolder/*.*\": \"php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Final Modifiers to Variables and Parameters in Java\nDESCRIPTION: Example showing how to apply the 'final' modifier to all variables and parameters in a class to indicate they won't be reassigned after initialization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic class Clazz {\n  public void method(int value) {\n    boolean notValid = value > 5;\n    if (notValid) {\n      // do something\n    }\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Clazz {\n  public void method(final int value) {\n    final boolean notValid = value > 5;\n    if (notValid) {\n      // do something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Folding Provider in VS Code\nDESCRIPTION: JSON configuration to set a specific extension as the default folding provider for JavaScript files. This allows selecting which provider to use when multiple folding providers are available.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"[javascript]\": {\n            \"editor.defaultFoldingRangeProvider\": \"aeschli.better-folding\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Opening Current Folder as Workspace in VS Code via Terminal (Bash)\nDESCRIPTION: This Bash command launches Visual Studio Code, opening the current directory (`.`) as a single-folder workspace. It's an alternative to using the File > Open Folder menu. Requires the `code` command-line utility to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/workspaces.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncode .\n```\n```\n\n----------------------------------------\n\nTITLE: Stack Frame Property Addition in TypeScript\nDESCRIPTION: New optional boolean property 'canRestart' added to stack frames to indicate whether the frame can be restarted with the restart request. This property enables clients to control the visibility of the Restart Frame context menu action.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  canRestart: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Inline Notebook Diff View\nDESCRIPTION: Sets the `notebook.diff.experimental.toggleInline` setting to `true` to enable an experimental feature allowing notebook cell changes to be viewed inline within a single view, instead of side-by-side.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(notebook.diff.experimental.toggleInline:true)\n```\n\n----------------------------------------\n\nTITLE: AST Type Definitions in TypeScript\nDESCRIPTION: TypeScript interface definitions for an Abstract Syntax Tree implementation that uses length annotations instead of absolute positions. Includes definitions for different types of AST nodes including brackets, bracket pairs, lists, and text nodes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Length = ...;\n\ntype AST = BracketAST | BracketPairAST | ListAST | TextAST;\n\n/** Describes a single bracket, such as `{`, `}` or `begin` */\nclass BracketAST {\n    constructor(public length: Length) {}\n}\n\n/** Describes a matching bracket pair and the node in between, e.g. `{...}` */\nclass BracketPairAST {\n    constructor(\n        public openingBracket: BracketAST;\n        public child: BracketPairAST | ListAST | TextAST;\n        public closingBracket: BracketAST;\n    ) {}\n\n    length = openingBracket.length + child.length + closingBracket.length;\n}\n\n/** Describes a list of bracket pairs or text nodes, e.g. `()...()` */\nclass ListAST {\n    constructor(\n        public items: Array<BracketPairAST | TextAST>\n    ) {}\n\n    length = items.sum(item => item.length);\n}\n\n/** Describes text that has no brackets in it. */\nclass TextAST {\n    constructor(public length: Length) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet for VS Code Release Notes in HTML\nDESCRIPTION: HTML link element that references an external CSS file for styling VS Code in-product release notes. The stylesheet is located at 'css/inproduct_releasenotes.css' relative to the current document.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Accepting Selected Code Action in VS Code Keybindings (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the command for accepting the currently selected Code Action in the new Code Action list in Visual Studio Code. It can be used to customize keyboard shortcuts for interacting with Code Actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nacceptSelectedCodeAction\n```\n\n----------------------------------------\n\nTITLE: Executing VS Code Extension API Commands\nDESCRIPTION: This snippet demonstrates the structure of VS Code Extension API commands. Each command is listed with its name, parameters, and return value. These commands can be used to interact with various aspects of VS Code, such as notebooks, editors, and document providers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Commands\n\n`vscode.executeDataToNotebook` - Invoke notebook serializer\n\n* _notebookType_ - A notebook type\n* _data_ - Bytes to convert to data\n* _(returns)_ - Notebook Data\n\n`vscode.executeNotebookToData` - Invoke notebook serializer\n\n* _notebookType_ - A notebook type\n* _NotebookData_ - Notebook data to convert to bytes\n* _(returns)_ - Bytes\n\n`notebook.selectKernel` - Trigger kernel picker for specified notebook editor widget\n\n* _options_ - Select kernel options\n* _(returns)_ - no result\n\n`interactive.open` - Open interactive window and return notebook editor and input URI\n\n* _showOptions_ - Show Options\n* _resource_ - Interactive resource Uri\n* _controllerId_ - Notebook controller Id\n* _title_ - Interactive editor title\n* _(returns)_ - Notebook and input URI\n\n`vscode.editorChat.start` - Invoke a new editor chat session\n\n* _Run arguments_ -\n* _(returns)_ - no result\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Inline Values Hover in VS Code Settings\nDESCRIPTION: The `debug.inlineValues` setting in VS Code enables the display of variable values directly within the editor during a debugging session. When enabled, these inline value decorations now feature an inline hover, making it easier to inspect longer or more complex values without interrupting the debugging flow.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nsetting(debug.inlineValues)\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Tree-Sitter Syntax Highlighting for TypeScript\nDESCRIPTION: Explains how to activate the experimental Tree-Sitter based syntax highlighting for TypeScript files in VS Code by setting the `editor.experimental.preferTreeSitter` configuration to `true`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(editor.experimental.preferTreeSitter)\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Renderer Workspace Trust Check\nDESCRIPTION: Code demonstrating how to check workspace trust status in notebook renderers using the new RendererContext.workspace.isTrusted property. This allows renderers to implement different rendering logic based on workspace trust status.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ActivationFunction } from 'vscode-notebook-renderer';\n\nexport const activate: ActivationFunction<void> = (ctx) => {\n  return {\n    renderOutputItem: (outputInfo, element) => {\n      if (ctx.workspace.isTrusted) {\n        // Render normally. Still take precautions to avoid script injection and\n        // only enable as much functionality as your renderer needs.\n      } else {\n        // Only render safe content. Always make sure it has been properly sanitized.\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and Creating TreeView in VS Code Extensions\nDESCRIPTION: TypeScript code showing how to create a custom TreeView in a VS Code extension using the createTreeView API. This provides access to TreeView operations while using a custom TreeDataProvider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst customView = vscode.window.createTreeView<string>('customView', { treeDataProvider: new CustomViewDataProvider<string>() });\n```\n\n----------------------------------------\n\nTITLE: Selecting Chat Models with VS Code Language Model API - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the VS Code Language Model API to select chat models provided by the \\'copilot\\' vendor. The function \\'vscode.lm.selectChatModels\\' is called with a selector object to filter models based on vendor, and the result may be an empty array if no models are available or user consent is pending. Extensions must handle the empty state and should only prompt for models as part of user-driven actions due to required authentication dialogs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst models = await vscode.lm.selectChatModels({\n\tvendor: 'copilot',\n});\n\nif(models.length === 0) {\n\t// no models available\n\treturn;\n}\n```\n\n----------------------------------------\n\nTITLE: Video Tag Implementation in README\nDESCRIPTION: Example of using video tags in extension README files with full path requirements for src and poster attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<video>\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Launch with User Input Selection\nDESCRIPTION: Debug configuration example showing how to use pickString input type for user selection in launch.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}/${input:pickProgram}\"\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"pickProgram\",\n            \"description\": \"Select client or server\",\n            \"type\": \"pickString\",\n            \"options\": [\"client.js\", \"server.js\"],\n            \"default\": \"client.js\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Multiple VS Code Themes Simultaneously in JSON\nDESCRIPTION: This JSON snippet demonstrates the enhanced syntax for `workbench.colorCustomizations` in VS Code settings (settings.json). It allows applying specific color rules, like setting the `activityBar.background`, conditionally based on the active theme name. Multiple themes can be specified within brackets, and wildcards (`*`) can be used for pattern matching theme names (e.g., `[Abyss][Red]`, `[Monokai*]`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n    \"workbench.colorCustomizations\": {\n        \"[Abyss][Red]\": {\n            \"activityBar.background\": \"#ff0000\"\n        },\n        \"[Monokai*]\": {\n            \"activityBar.background\": \"#ff0000\"\n        }\n    },\n```\n```\n\n----------------------------------------\n\nTITLE: Adding URL Route for Logging Messages in Django\nDESCRIPTION: Adds a URL route for the log message page, mapping it to the 'log_message' view function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\npath(\"log/\", views.log_message, name=\"log\"),\n```\n\n----------------------------------------\n\nTITLE: Implementing and Binding an Imported Function in TypeScript (VS Code Extension)\nDESCRIPTION: This TypeScript snippet shows how to implement the `log` function (imported by the Wasm module) within a VS Code extension's `activate` function. It creates a VS Code output channel, defines a `service` object containing the `log` implementation, uses `calculator._.imports.create` (from the `@vscode/wasm-component-model` generated bindings) to prepare the import object, and passes it to `WebAssembly.instantiate` to make the function available to the Wasm module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n\t// ...\n\n\t// The channel for printing the log.\n\tconst log = vscode.window.createOutputChannel('Calculator - Log', { log: true });\n\tcontext.subscriptions.push(log);\n\n\t// The implementation of the log function that is called from WASM\n\tconst service: calculator.Imports = {\n\t\tlog: (msg: string) => {\n\t\t\tlog.info(msg);\n\t\t}\n\t};\n\n\t// Create the bindings to import the log function into the WASM module\n\tconst imports = calculator._.imports.create(service, wasmContext);\n\t// Instantiate the module\n\tconst instance = await WebAssembly.instantiate(module, imports);\n\n\t// ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variable File for Container (env)\nDESCRIPTION: This snippet shows a standard .env file containing environment variable definitions, typically placed in the .devcontainer directory. It can be used to bulk load variables into a container and referenced from Docker or Docker Compose configurations. Each line is a KEY=VALUE pair; comments are not supported.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nYOUR_ENV_VAR_NAME=your-value-goes-here\nANOTHER_ENV_VAR_NAME=your-value-goes-here\n```\n\n----------------------------------------\n\nTITLE: Displaying VS Code Server Help (Bash)\nDESCRIPTION: This command shows all available commands for launching and managing the VS Code Server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/07/07/vscode-server.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode-server -h\n```\n\n----------------------------------------\n\nTITLE: Language-specific Code Actions on Save for TypeScript\nDESCRIPTION: JSON configuration that enables organize imports on save specifically for TypeScript and TypeScript React files using language-specific editor settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"[typescript]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n},\n\"[typescriptreact]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic File Copying for Markdown in VS Code\nDESCRIPTION: This configuration disables the automatic copying of files into the workspace when dropping or pasting into Markdown documents. It sets both the drop and filePaste behaviors to 'never' copy files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"markdown.editor.drop.copyIntoWorkspace\": \"never\"\n\"markdown.editor.filePaste.copyIntoWorkspace\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tasks to Output in Split Terminals\nDESCRIPTION: Shows how to configure multiple tasks to display their output in a split terminal panel using the 'group' attribute in the presentation section, allowing users to monitor multiple tasks simultaneously.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Task One\",\n            \"type\": \"shell\",\n            \"command\": \"echo One && sleep 5000\",\n            \"problemMatcher\": [],\n            \"presentation\": {\n                \"group\": \"groupA\"\n            },\n        },\n        {\n            \"label\": \"Task Two\",\n            \"type\": \"shell\",\n            \"command\": \"echo Two && sleep 5000\",\n            \"problemMatcher\": [],\n            \"presentation\": {\n                \"group\": \"groupA\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ptrace-Based Debuggers in Docker Compose\nDESCRIPTION: YAML configuration that adds capabilities and security options necessary for ptrace-based debuggers like those used for C++, Go, and Rust. This allows debugging tools to work properly inside containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# Required for ptrace-based debuggers like C++, Go, and Rust\ncap_add:\n- SYS_PTRACE\nsecurity_opt:\n- seccomp:unconfined\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Search Engine for Web Search Copilot Extension\nDESCRIPTION: This setting allows users to choose between Tavily and Bing as the preferred search engine for the Web Search for Copilot extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"websearch.preferredEngine\": \"<engine>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for pytest in VS Code launch.json\nDESCRIPTION: Example of setting environment variables in a VS Code debug configuration to disable coverage when running pytest, allowing breakpoints to work correctly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/testing.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\"PYTEST_ADDOPTS\": \"--no-cov\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequelize Model Template for GitHub Copilot\nDESCRIPTION: Provides a JavaScript template for a Sequelize model that can be used as a custom instruction for GitHub Copilot to generate data access code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//Template for a Sequelize model\nconst { DataTypes, Model } = require('sequelize');\nclass User extends Model {\n  //static or factory methods\n  //instance methods\n}\nconst init = function(sequelize){\n  User.init({\n    //schema goes here\n  }, {\n    hooks: {},\n    tableName: \"users\"\n    underscored: true,\n    sequelize\n  })\n}\n\nexports.createUser = function(sequelize){\n  init(sequelize);\n  return User;\n}\n```\n\n----------------------------------------\n\nTITLE: SourceControlInputBox Interface\nDESCRIPTION: This TypeScript interface defines the Source Control Input Box, which provides a text input field for user messages. In Git, this is used for commit messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControlInputBox {\n  value: string;\n}\n\nexport interface SourceControl {\n  readonly inputBox: SourceControlInputBox;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Visual Studio Code via apt-get on Linux - Bash\nDESCRIPTION: This bash command removes the VS Code package installed through the Debian package manager on Linux systems. It requires the system to use apt-get and assumes VS Code was installed with the default package name 'code'. The command prompts for elevated permissions and uninstalls the stable release package. Users should replace 'code' with 'code-insiders' for the Insiders edition. The command outputs status information and, upon completion, removes the editor but not user data directories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/uninstall.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get remove code\n\n```\n\n----------------------------------------\n\nTITLE: Running Docker Mongo Container in WSL2\nDESCRIPTION: Example of running a MongoDB container using Docker CLI within WSL2 context, demonstrating the seamless Linux container execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/03/02/docker-in-wsl2.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run mongo\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Copilot Custom Instructions File\nDESCRIPTION: The file `.github/copilot-instructions.md` is used to provide custom instructions to GitHub Copilot within a repository. It now behaves like other reusable `.prompt.md` files, supporting features like nested link resolution and enhanced language support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n.github/copilot-instructions.md\n```\n\n----------------------------------------\n\nTITLE: Authorizing Windows SSH Host from Windows with User-Level Key (PowerShell)\nDESCRIPTION: Creates the .ssh directory on a remote Windows SSH host if it doesn't exist and appends the public SSH key for the current user using PowerShell invoked over SSH. It enables key-based login for standard (non-admin) users and ensures the proper key is added to authorized_keys.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$USER_AT_HOST=\"your-user-name-on-host@hostname\"\n$PUBKEYPATH=\"$HOME\\.ssh\\id_ed25519.pub\"\n\nGet-Content \"$PUBKEYPATH\" | Out-String | ssh $USER_AT_HOST \"powershell `\"New-Item -Force -ItemType Directory -Path `\"`$HOME\\.ssh`\"; Add-Content -Force -Path `\"`$HOME\\.ssh\\authorized_keys`\" `\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Command Palette\nDESCRIPTION: Represents the keyboard shortcut command `workbench.action.showCommands` used in VS Code to open the Command Palette. The Command Palette allows users to search for and execute various commands, including extension-specific ones like 'Rust Analyzer: Debug'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.showCommands)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Hello World Function in TypeScript - TypeScript\nDESCRIPTION: This TypeScript code defines a function 'sayHello' which takes a name as input and prints a greeting to the console. It serves as a basic demonstration of a typed function in TypeScript. No dependencies beyond the TypeScript compiler are required. Input is a string name, and output is a message logged to the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sayHello(name: string): void {\\n    console.log(`Hello ${name}!`);\\n}\\n\\nsayHello('Dave');\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component for GitHub Issue Display\nDESCRIPTION: React functional component that renders GitHub issue details with comment loading functionality. Shows basic implementation before adding controller communication.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Issue: FunctionComponent<{ issue: GithubIssueWithComments }> = ({ issue }) => {\n  const [showComments, setShowComments] = useState(false);\n\n  return (\n    <div key={issue.number}>\n      <h2>\n        {issue.title}\n        (<a href={`https://github.com/${issue.repo}/issues/${issue.number}`}>#{issue.number}</a>)\n      </h2>\n      <img src={issue.user.avatar_url} style={{ float: 'left', width: 32, borderRadius: '50%', marginRight: 20 }} />\n      <i>@{issue.user.login}</i> Opened: <div style=\"margin-top: 10px\">{issue.body}</div>\n      <button onClick={() => setShowComments(true)}>Show Comments</button>\n      {showComments && issue.comments.map(comment => <div>{comment.text}</div>)}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring an Optional TreeView Message Property (TypeScript)\nDESCRIPTION: Provides a TypeScript interface field declaration for TreeView in the VS Code extension API, documenting the new optional message property. This property, which can be a string or MarkdownString, allows an extension to render a custom message in its tree view for users. Used during TreeView registration or implementation, this key/value declaration has no direct inputs/outputs but offers enhanced UI feedback/communication within custom TreeViews.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * An optional human-readable message that will be rendered in the view.\n */\nmessage?: string | MarkdownString;\n```\n\n----------------------------------------\n\nTITLE: Packaging VS Code Extension Using vsce\nDESCRIPTION: Command to package a VS Code extension into a .vsix file for testing or private distribution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvsce package\n```\n\n----------------------------------------\n\nTITLE: Auto Save Configuration\nDESCRIPTION: Setting to enable automatic file saving after delay.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"files.autoSave\": \"afterDelay\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Navigate Keybindings for Recent Files in Visual Studio Code\nDESCRIPTION: JSON keybindings configuration to enable quick navigation through recently opened files and folders using Ctrl+J. This allows cycling through recent items while holding Ctrl and pressing J.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"key\": \"ctrl+j\",\n        \"command\": \"workbench.action.quickOpenRecent\"\n    },\n    {\n        \"key\": \"ctrl+j\",\n        \"command\": \"workbench.action.quickOpenNavigateNext\",\n        \"when\": \"inRecentFilesPicker\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining ElseType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for an 'Else' block. It specifies a block of instructions that execute if a condition is true, using custom list code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"ElseType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute if a condition is true.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes_NoCondition\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Tabs in VS Code\nDESCRIPTION: Configures VS Code to enable the preview feature of terminal tabs, allowing for better organization of multiple terminal instances.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.tabs.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Python Environment Activation in VS Code Terminal (JSON)\nDESCRIPTION: Prevents the VS Code Python extension from automatically activating the selected environment when a new terminal is created using the 'Terminal: Create New Terminal' command. Add this setting as a key-value pair to your `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n`\"python.terminal.activateEnvironment\": false`\n```\n\n----------------------------------------\n\nTITLE: Customizing Quick Open Keyboard Shortcut in VS Code\nDESCRIPTION: This JSON snippet demonstrates how to modify the keyboard shortcut for Quick Open in VS Code. It changes Ctrl+P to automatically select the second entry instead of the first, which can be useful for selecting the previous entry from the list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/editingevolved.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"key\": \"ctrl+p\",\n        \"command\": \"workbench.action.quickOpenPreviousEditor\"\n    },\n    {\n        \"key\": \"ctrl+p\",\n        \"command\": \"-workbench.action.quickOpen\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Probing in devcontainer.json\nDESCRIPTION: Demonstrates the new 'userEnvProbe' property in devcontainer.json for specifying how environment variables should be extracted from the container user's startup scripts. It supports three options: 'none', 'loginInteractiveShell', and 'interactiveShell'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_48.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userEnvProbe\": \"loginInteractiveShell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Available Commands to a File - PowerShell\nDESCRIPTION: Uses PowerShell to list all available commands in the current environment and write them to a file named Command.txt in the workspace. This snippet utilizes the Get-Command cmdlet piped to Out-File, requiring the user to be in a directory where they can write. The output file lists command metadata, which can be searched or reviewed in the editor. Requires PowerShell installed; outputs a plain text file. No command-line parameters are needed aside from the file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command | Out-File -FilePath .\\Command.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Format on Type Setting\nDESCRIPTION: JSON configuration to enable automatic code indentation for Python files using Pylance when typing code. This setting allows for real-time formatting as code is entered.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n \"[python]\": {\n        \"editor.formatOnType\": true,\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Tab Title and Description in VS Code\nDESCRIPTION: This snippet shows how to customize the terminal tab title and description using variables in VS Code settings. It demonstrates the default configuration for terminal tabs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.tabs.title\": \"${process}\",\n  \"terminal.integrated.tabs.description\": \"${task}${separator}${local}${separator}${cwdFolder}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SignatureHelpContext.activeSignatureHelp in TypeScript\nDESCRIPTION: Demonstrates how to implement a SignatureHelpProvider using the proposed SignatureHelpContext.activeSignatureHelp field to track previously active signatures.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nclass MySignatureHelpProvider implements vscode.SignatureHelpProvider {\n    provideSignatureHelp(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken,\n        context: vscode.SignatureHelpContext\n    ): vscode.ProviderResult<vscode.SignatureHelp> {\n        // The active signature help when this provider was triggered or undefined if\n        // no signature help was active.\n        console.log(context.activeSignatureHelp);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Command with Multiple Templates in JSON\nDESCRIPTION: This JSON snippet illustrates configuring the `docker build` command in VS Code `settings.json` using an array of template objects. It provides a default command template and a conditional template specific to contexts matching the regular expression \"alpine\" (e.g., Dockerfile name containing 'alpine'). VS Code selects the appropriate template based on context, potentially prompting the user if multiple templates match or if no specific match is found among constrained templates.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"docker.commands.build\": [\n        {\n            \"label\": \"Default build command\",\n            \"template\": \"docker build --rm -f \\\"${dockerfile}\\\" -t ${tag} \\\"${context}\\\"\"\n        },\n        {\n            \"label\": \"Alpine-specific build command\",\n            \"template\": \"docker build -p 1234:1234 -f \\\"${dockerfile}\\\" -t ${tag} \\\"${context}\\\"\",\n            \"match\": \"alpine\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Markdown Render Command - VS Code - HTML\nDESCRIPTION: This snippet shows the HTML output resulting from rendering the Markdown string '# Hello Markdown' using the built-in markdown API. The output contains a level-one header with specific data attributes suitable for VS Code integrations. This HTML is produced by the VS Code extension command, not meant for direct editing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nrendered markdown: <h1 id=\"hello-markdown\" data-line=\"0\" class=\"code-line\">Hello Markdown</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Header for OpenAI in VS Code Settings\nDESCRIPTION: Example of how to format the API key for OpenAI in the VS Code settings.json file. The key is added in the format of 'Authorization: Bearer <YOUR_API_KEY>' for the authentication header.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"windowsaistudio.remoteInfereneEndpoints\": {\n  \"https://api.openai.com/v1/chat/completions\": {\n    \"authentication\": {\n      \"type\": \"OpenAI\",\n      \"headers\": {\n        \"Authorization\": \"Bearer <YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Terminal Command Data Streams with Shell Integration API in TypeScript\nDESCRIPTION: Illustrates how to use the proposed VS Code Terminal Shell Integration API to listen to the data stream of commands executed in a specific terminal. It uses `window.onDidStartTerminalShellExecution` to get the execution object when a command starts, checks if it's the target terminal, creates a data stream using `execution.createDataStream()`, and iterates asynchronously over the stream (`for await...of`) to log incoming data.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Create a terminal and log all data via console.log\nconst myTerm = window.createTerminal();\nwindow.onDidStartTerminalShellExecution(execution => {\n  if (execution.terminal === myTerm) {\n    const stream = execution.createDataStream();\n    for await (const data of stream) {\n      console.log(data);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings URLs in VS Code\nDESCRIPTION: Code setting URL format used to link directly to specific VS Code settings. These URLs open VS Code and focus on the corresponding setting in the Settings editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvscode://settings/accessibility.voice.autoSynthesize\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Import Organization Groups\nDESCRIPTION: Example showing how import statements can be organized into logical groups (local code and built-ins) in TypeScript. This demonstrates the issue that the Organize Imports command aims to solve by maintaining these groups while sorting imports alphabetically within them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// local code\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\nimport * as aaa from \"./aaa\";\n\n// built-ins\nimport * as path from \"path\";\nimport * as child_process from \"child_process\"\nimport * as fs from \"fs\";\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Authorizing macOS/Linux SSH Host from Windows with PowerShell\nDESCRIPTION: This PowerShell snippet reads a local public SSH key and appends it to the remote host's authorized_keys file on a macOS or Linux SSH host. Orchestrates key copying, remote file creation, and permission setting via SSH from a Windows client, simplifying cross-platform SSH setup for VS Code Remote connections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$USER_AT_HOST=\"your-user-name-on-host@hostname\"\n$PUBKEYPATH=\"$HOME\\.ssh\\id_ed25519.pub\"\n\n$pubKey=(Get-Content \"$PUBKEYPATH\" | Out-String); ssh \"$USER_AT_HOST\" \"mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo '${pubKey}' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Context Menus in Webviews with JavaScript Event Handler\nDESCRIPTION: Code snippet showing how to prevent the built-in context menu from appearing in webviews by adding an event listener for the 'contextmenu' event and calling preventDefault() on it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('contextmenu', e => {\n  e.preventDefault(); // cancel the built-in context menu\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring editor.renderWhitespace to show only trailing whitespace\nDESCRIPTION: JSON configuration setting to make VS Code only render trailing whitespace characters, rather than all whitespace characters or none.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.renderWhitespace\": \"trailing\"\n```\n\n----------------------------------------\n\nTITLE: TreeView Selection API in VS Code Extensions\nDESCRIPTION: TypeScript definition for accessing currently selected elements in a custom TreeView within VS Code extensions. This API allows extension authors to react to user selections in custom views.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Currently selected elements.\n */\nreadonly selection: ReadonlyArray<T>;\n```\n\n----------------------------------------\n\nTITLE: Task Shell Configuration with Login Shell\nDESCRIPTION: Configuration for running a task with a login shell to resolve command not found issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"npm\",\n    \"script\": \"watch\",\n    \"options\": {\n        \"shell\": {\n            \"args\": [\"-c\", \"-l\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VS Code Snippet for Django Template Extension in JSON\nDESCRIPTION: A VS Code snippet definition that provides a template for extending the base layout in Django. The snippet has the prefix 'djextlayout' and inserts the basic structure needed to extend a base template with title and content blocks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"Django Tutorial: template extending layout.html\": {\n    \"prefix\": \"djextlayout\",\n    \"body\": [\n        \"{% extends \\\"hello/layout.html\\\" %}\",\n        \"{% block title %}\",\n        \"$0\",\n        \"{% endblock %}\",\n        \"{% block content %}\",\n        \"{% endblock %}\"\n    ],\n\n    \"description\": \"Boilerplate template that extends layout.html\"\n},\n```\n\n----------------------------------------\n\nTITLE: Editing Notebooks with WorkspaceEdit in VS Code\nDESCRIPTION: TypeScript code demonstrating how to modify notebooks using WorkspaceEdit and NotebookEdit APIs. Shows how to insert, replace, and delete cells in a notebook.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentNotebook = vscode.window.activeNotebookEditor?.notebook;\nif (currentNotebook) {\n  const edit = new vscode.WorkspaceEdit();\n\n  // Use .set to add one or more edits to the notebook\n  edit.set(currentNotebook.uri, [\n    // Create an edit that inserts one or more cells after the first cell in the notebook\n    vscode.NotebookEdit.insertCells(/* index */ 1, [\n      // ... new notebook cell data\n    ]),\n\n    // Additional notebook edits...\n  ]);\n\n  await vscode.workspace.applyEdit(edit);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Conflict Resolution in GitHub PR Extension (JSON)\nDESCRIPTION: This JSON setting enables the experimental conflict resolution feature within the VS Code GitHub Pull Requests extension. Setting `\"githubPullRequests.experimentalUpdateBranchWithGitHub\"` to `true` in `settings.json` allows users to attempt conflict resolution directly in the PR view without checking out the branch locally. Note that this is a hidden, experimental feature and may not function correctly in all scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.experimentalUpdateBranchWithGitHub\": true\n```\n\n----------------------------------------\n\nTITLE: Scan Code Keyboard Shortcut Example (VS Code keybindings.json, JSON)\nDESCRIPTION: Demonstrates usage of scan code-based keyboard shortcut definition, which remains consistent regardless of keyboard layout changes. The 'key' uses the '[Slash]' scan code with modifier (here, 'cmd+'), binding it to 'editor.action.commentLine' when the editor has focus. No extra dependencies are required, just VS Code 1.53 or later.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"cmd+[Slash]\", \"command\": \"editor.action.commentLine\",\n                               \"when\": \"editorTextFocus\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Zoom Keybindings for macOS\nDESCRIPTION: JSON configuration for custom keybindings to control editor font zoom on macOS, including zoom in, zoom out, and reset commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"cmd+numpad_add\",      \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"shift+cmd+=\",         \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"cmd+=\",               \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"cmd+numpad_subtract\", \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"shift+cmd+-\",         \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"cmd+-\",               \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"cmd+numpad0\",         \"command\": \"editor.action.fontZoomReset\" },\n{ \"key\": \"cmd+0\",               \"command\": \"editor.action.fontZoomReset\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML IntelliSense Settings in VS Code\nDESCRIPTION: JSON configuration for enabling HTML5 tag suggestions in VS Code. This setting controls whether the built-in HTML language service suggests HTML5 tags, properties, and values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Configures if the built-in HTML language suggests HTML5 tags, properties and values.\n\"html.suggest.html5\": true\n```\n\n----------------------------------------\n\nTITLE: Terminal Shell Type Reference in TypeScript\nDESCRIPTION: Reference to the TypeScript definition file that lists all identifiable shell types available through the terminal shell API. This allows extensions to detect the user's current shell type.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttps://github.com/microsoft/vscode/blob/99e3ae5586a74ab1c554b6a2a50bb9eb3a4ff7fd/src/vscode-dts/vscode.d.ts#L7740-L7750\n```\n\n----------------------------------------\n\nTITLE: Configuring System File Watcher Limit\nDESCRIPTION: Configuration to increase the maximum number of files that can be watched by the system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfs.inotify.max_user_watches=524288\n```\n\n----------------------------------------\n\nTITLE: Checking for VS Code Shell Launch using Environment Variable - Shell\nDESCRIPTION: This code snippet lets your shell or user scripts determine if they are running in a shell session launched by VS Code, by checking the VSCODE_RESOLVING_ENVIRONMENT environment variable. If this variable is set to 1, it indicates the shell was started by VS Code to synchronize environment variables. This snippet does not require explicit dependencies, but requires access to shell scripting and the surrounding context should use bash-compatible syntax or equivalent.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nif [ \"\\$VSCODE_RESOLVING_ENVIRONMENT\" = \"1\" ]; then\n  # VS Code launched this shell\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Save Mode in VS Code Settings\nDESCRIPTION: This setting (`files.autoSave`) in `settings.json` controls how VS Code automatically saves dirty files. It accepts values like `off` (disable), `afterDelay` (save after a timeout), and `onFocusChange` (save when editor loses focus).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"files.autoSave\": \"off\" | \"afterDelay\" | \"onFocusChange\"\n```\n\n----------------------------------------\n\nTITLE: Contributing a Custom Resource Label Formatter in package.json (JSON)\nDESCRIPTION: Example `package.json` contribution using the `contributes.resourceLabelFormatters` point. This allows an extension to define how URIs with a specific scheme (`remotehub` in this case) are displayed throughout the VS Code workbench, specifying the label format, separator character, and an optional suffix for workspace labels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n   \"resourceLabelFormatters\": [\n        {\n            \"scheme\": \"remotehub\",\n            \"formatting\": {\n                \"label\": \"${path}\",\n                \"separator\": \"/\",\n                \"workspaceSuffix\": \"GitHub\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Syntax Highlighting for Inline Completions (VS Code Setting)\nDESCRIPTION: Controls whether syntax highlighting should be applied to inline code suggestions displayed in the Visual Studio Code editor. Enabling this improves the readability of suggested code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_5\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(editor.inlineSuggest.syntaxHighlightingEnabled)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub PR Focused Mode in VS Code Settings\nDESCRIPTION: Sets the `githubPullRequests.focusedMode` setting in VS Code's settings JSON file to `\"multiDiff\"`. This configuration makes the GitHub Pull Requests and Issues extension automatically open the multi-diff editor, showing all changed files, whenever a pull request is checked out.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.focusedMode\": \"multiDiff\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Webview in VS Code Extension (TypeScript)\nDESCRIPTION: Demonstrates creating a new webview panel using the VS Code extension API by calling 'createWebview' with a URI, title, view column, and options. The returned webview object can be used to render HTML and communicate with the extension. Dependencies include the 'vscode.window' API, and the created webview appears in the specified editor column.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst webview = vscode.window.createWebview(\n  vscode.Uri.parse('cat-counter-ext:webview1'), // Identifier\n  'Cat Counter', // Title\n  vscode.ViewColumn.One, // Column to show in\n  {} // Webview options\n);\n```\n\n----------------------------------------\n\nTITLE: JSX Tag Rename Configuration in TypeScript\nDESCRIPTION: Settings to control JSX tag renaming behavior in JavaScript and TypeScript files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"javascript.preferences.renameMatchingJsxTags\": true,\n  \"typescript.preferences.renameMatchingJsxTags\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Format on Save in VS Code Settings (JSON)\nDESCRIPTION: This JSON setting enables the 'Format On Save' feature in VS Code. When set to `true` in `settings.json`, VS Code will automatically invoke a relevant formatter extension to format the entire document every time it is saved manually. This feature does not apply when saving automatically after a delay (`files.autoSave: \"afterDelay\"`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSave\": true\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Encoding to UTF-8 BOM - VS Code JSON\nDESCRIPTION: This code sets the default VS Code file encoding to UTF-8 with BOM (Byte Order Mark) by setting \\\"files.encoding\\\" to \\\"utf8bom\\\". This is useful for environments or workflows requiring UTF-8 BOM in all new files. Add this setting in settings.json to apply globally or at the workspace level; no additional dependencies are needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files.encoding\": \"utf8bom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Continuous Test Runs Support\nDESCRIPTION: Configuration changes needed to enable continuous test runs in VS Code test extensions, including profile setup and run handler modifications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nconst profile = controller.createRunProfile('Run', TestRunProfileKind.Run, runHandler);\n+profile.supportsContinuousRun = true;\n```\n\nLANGUAGE: diff\nCODE:\n```\nconst runHandler = (request: TestRunRequest, token: CancellationToken) => {\n+   if (request.continuous) {\n+       return watchForFileChangesThenRunTests(request, token);\n+   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Provider in TypeScript for VS Code\nDESCRIPTION: Demonstrates how to create a DocumentColorProvider class and register it in the extension's activate function. This provider allows returning color references and presentations for supported color formats.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoColorProvider implements vscode.DocumentColorProvider {\n    public provideDocumentColors(\n        document: vscode.TextDocument, token: vscode.CancellationToken):\n        Thenable<vscode.ColorInformation[]> {\n    ...\n    }\n    public provideColorPresentations(\n        color: Color, context: { document: TextDocument, range: Range }, token: vscode.CancellationToken):\n        Thenable<vscode.ColorPresentation[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerColorProvider(\n            GO_MODE, new GoColorProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Profiles and Default in VS Code JSON Settings\nDESCRIPTION: This JSON configuration snippet demonstrates how to define custom terminal profiles in VS Code settings (`settings.json`). It shows setting up a 'PowerShell' profile for Windows with specific source, name override, icon, and environment variables (`env`). It also sets this profile as the default for Windows using `terminal.integrated.defaultProfile.windows`. This method is the recommended way to configure the default terminal, replacing the deprecated `terminal.integrated.shell` and `terminal.integrated.shellArgs` settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.profiles.windows\": {\n  \"PowerShell\": {\n    \"source\": \"PowerShell\",\n    \"overrideName\": true,\n    \"icon\": \"terminal-powershell\",\n    \"env\": {\n      \"TEST_VAR\": \"value\"\n    }\n  }\n},\n\"terminal.integrated.defaultProfile.windows\": \"PowerShell\",\n```\n\n----------------------------------------\n\nTITLE: Constructing VS Code Download URLs (Bash Example)\nDESCRIPTION: Example URL demonstrating how to download a specific version (1.83.1) of VS Code for a particular platform (Linux Arm64 debian). Replace '1.83.1' and 'linux-deb-arm64' with the desired version and platform identifier respectively, based on the provided tables. Using 'latest' instead of a version number downloads the most recent stable release.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://update.code.visualstudio.com/1.83.1/linux-deb-arm64/stable\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Header for Azure OpenAI in VS Code Settings\nDESCRIPTION: Example of how to format the API key for Azure OpenAI in the VS Code settings.json file. The key is added in the format of 'api-key: <YOUR_API_KEY>' for the authentication header.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"windowsaistudio.remoteInfereneEndpoints\": {\n  \"https://your-resource-name.openai.azure.com/openai/deployments/your-deployment-name/chat/completions?api-version=2023-05-15\": {\n    \"authentication\": {\n      \"type\": \"Azure\",\n      \"headers\": {\n        \"api-key\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing launchSettingsFilePath in launch.json (JSON)\nDESCRIPTION: This snippet demonstrates how to override the default path used to find launchSettings.json via the 'launchSettingsFilePath' property. The field takes a string representing the relative or absolute file path. This configuration is useful when the project's structure is non-standard or the launchSettings.json is located in a custom directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"launchSettingsFilePath\": \"${workspaceFolder}/<Relative-Path-To-Project-Directory/Properties/launchSettings.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Image Support Configuration in VS Code\nDESCRIPTION: JSON configuration setting to enable experimental image support in the integrated terminal, allowing display of sixel and iTerm image protocols.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.experimentalImageSupport\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugger for Symlinks in launch.json\nDESCRIPTION: A JSON snippet for `launch.json` demonstrating how to pass the `--preserve-symlinks` argument to the Node.js runtime via the `runtimeArgs` array. This ensures that the debugger correctly resolves paths within symlinked directories, often used with `npm link`. If the main script itself is within a symlinked path, the `--preserve-symlinks-main` option (available in Node 10+) might also be required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"runtimeArgs\": [\n        \"--preserve-symlinks\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Support for Extensions\nDESCRIPTION: Example of how to set the HTTP proxy support configuration for extensions in VS Code settings. This enables network proxy support for all extensions by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.windowsEnableConpty\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Starting VS Code Server (Bash)\nDESCRIPTION: This command launches the VS Code Server on the remote machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/07/07/vscode-server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode-server\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll-to-Top Anchor Link in HTML\nDESCRIPTION: This HTML snippet defines an anchor element (`<a>`) intended to function as a 'scroll to top' button. It includes an `id` for targeting, accessibility attributes (`role`, `aria-label`), and an `href` pointing to the top of the page (`#`). A `<span>` element with class `icon` is included, likely styled with CSS to display an icon.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Generating Localization Bundles with @vscode/l10n-dev CLI\nDESCRIPTION: This shell command demonstrates using the `@vscode/l10n-dev` tool via `npx` to scan source code for localization calls. It takes the source directory (`./src`) as input and specifies the output directory (`./l10n`) where the generated `bundle.l10n.json` file will be placed. This file serves as the base for creating translations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpx @vscode/l10n-dev ./src --out ./l10n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint and TSLint Auto-Fix on Save in VS Code\nDESCRIPTION: JSON configuration to enable automatic fixing of ESLint and TSLint warnings on file save in Visual Studio Code. This setting is ignored when auto-save is set to 'afterDelay'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_7.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"eslint.autoFixOnSave\": true,\n    \"tslint.autoFixOnSave\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Root Folder from a VS Code Multi-root Workspace - Bash\nDESCRIPTION: This Bash code snippet demonstrates the use of the VS Code CLI to remove a root folder from a multi-root workspace. It uses the new '--remove' flag with the 'code' command, specifying the path to the folder intended for removal. Requires VS Code with multi-root workspace support; the command must be run from a shell with 'code' available in PATH. The input '/path/to/rootfolder' should be replaced with the actual path. Removes the folder from the workspace and updates the current session accordingly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode --remove /path/to/rootfolder\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Plugin Package JSON for Web Support\nDESCRIPTION: Package.json configuration showing how to enable TypeScript language service plugins for web by adding browser and main entrypoints.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"main\": \"out/main.js\",\n\"browser\": \"out/main.browser.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Actions on Save in VS Code JSON\nDESCRIPTION: This JSON configuration snippet defines settings for the `editor.codeActionsOnSave` feature in Visual Studio Code. It specifies that the `source.organizeImports` action should run on every save (explicit and auto-save), while the `source.sortImports` action should only run on explicit saves. This allows automatic code cleanup tailored to different save triggers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/refactoring.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// On explicit save, run sortImports source action. On auto save (window or focus change), run organizeImports source action.\n\"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": \"always\",\n    \"source.sortImports\": \"explicit\",\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Existing .NET Installation Path for Windows in VS Code (JSON)\nDESCRIPTION: This code shows how to specify an existing .NET executable path on Windows for the dotnetAcquisitionExtension.existingDotnetPath property in settings.json. This enables reuse of an already installed .NET SDK instead of downloading a new one. Dependency: C# Dev Kit and .NET Install Tool. Key parameters: extensionId for the relevant extension, and path to the local dotnet.exe. Inputs: Array of objects with extensionId and path. Outputs: The extension recognizes and uses the specified .NET binary. Limitation: Path format must match Windows conventions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotnetAcquisitionExtension.existingDotnetPath\": [\n        { \"extensionId\": \"msazuretools.azurerm-vscode-tools\", \"path\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Value for Open Editors Sort Order (Tab Order)\nDESCRIPTION: A value for the `explorer.openEditors.sortOrder` setting. `editorOrder` lists editors in the same order as the editor tabs are displayed. This is the default behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\neditorOrder\n```\n\n----------------------------------------\n\nTITLE: VS Code launch configuration\nDESCRIPTION: Example keyboard shortcut reference used in the documentation to access Extensions view in VS Code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/08/22/introducing-ios-web-debugging-for-vs-code-on-windows-and-mac.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nkb(workbench.view.extensions)\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy URL for .NET Acquisition in VS Code Settings (JSON)\nDESCRIPTION: This snippet sets a proxy URL explicitly for the .NET acquisition extension in case registry-detected proxies are unavailable. The dotnetAcquisitionExtension.proxyUrl property in settings.json allows the extension to connect through the specified proxy for .NET SDK operations. Dependencies: .NET Install Tool and C# Dev Kit. Key parameter: proxyUrl, a string with your proxy address and port. Input: URL string. Output: Network requests routed via the entered proxy. Limitation: Requires a valid, accessible proxy endpoint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotnetAcquisitionExtension.proxyUrl\": \"https://your_proxy_url:port\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Windows SSH Host from Windows with OpenSSH Server (PowerShell)\nDESCRIPTION: Appends a public SSH key from the local Windows machine to a remote Windows SSH host's administrators_authorized_keys file using PowerShell. This facilitates password-less SSH login for users with administrator privileges. It uses Get-Content to read the key and invokes PowerShell remotely via SSH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$USER_AT_HOST=\"your-user-name-on-host@hostname\"\n$PUBKEYPATH=\"$HOME\\.ssh\\id_ed25519.pub\"\n\nGet-Content \"$PUBKEYPATH\" | Out-String | ssh $USER_AT_HOST \"powershell `\"Add-Content -Force -Path `\"`$Env:PROGRAMDATA\\ssh\\administrators_authorized_keys`\" `\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Removing Default Build Group in tasks.json - VS Code tasks.json Group Field - json\nDESCRIPTION: This JSON snippet demonstrates how to alter the group setting in a build task definition within tasks.json by removing the default build designation. Switching from an object with 'isDefault: true' to simply \"group\": \"build\" affects which task is automatically selected for building. The snippet assumes presence within a tasks.json context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n    },\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": \"build\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunicorn Command for Django in Dockerfile\nDESCRIPTION: Docker command for running a Django application with Gunicorn web server, binding to port 8000.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-python.md#2025-04-23_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"{workspace_folder_name}.wsgi\"]\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Display Configuration\nDESCRIPTION: Example configuration for extension display name and description fields used in the VS Code marketplace for discoverability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Word Count\",\n    \"description\": \"Markdown Word Count Example - reports out the number of words in a Markdown file.\"\n}\n```\n\n----------------------------------------\n\nTITLE: jsconfig.json with Explicit Include Paths\nDESCRIPTION: An example jsconfig.json configuration that explicitly defines which files to include in the JavaScript project, limiting to files within the src directory structure.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\"\n    },\n    \"include\": [\n        \"src/**/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repositories via URL in VS Code for the Web\nDESCRIPTION: Demonstrates the URL schema `https://vscode.dev/github/<organization>/<repo>` for directly opening GitHub repositories within the vscode.dev environment. This example shows how to open the 'microsoft/vscode' repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/vscode-web.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://vscode.dev/github/microsoft/vscode\n```\n\n----------------------------------------\n\nTITLE: Documenting Token Metadata Bitfield Structure (Plaintext/Table Syntax)\nDESCRIPTION: This comment block describes how token metadata is densely packed into a 32-bit integer, with each section of bits encoding specific information (LanguageId, StandardTokenType, FontStyle, foreground/background color indices). It is a critical reference for code dealing with token parsing or rendering. There are no software dependencies for reading this schematic, but using this format requires understanding of bitwise operations in TypeScript/JavaScript. No code is executed; this snippet is a documentation-only overhead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n/**\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n */\n```\n\n----------------------------------------\n\nTITLE: Supported Image Formats for Drag-and-Drop in VS Code Copilot Vision\nDESCRIPTION: These file extensions represent the image formats supported by VS Code Copilot Vision when attaching images via drag-and-drop from a web browser. Images with URLs ending in `.jpg`, `.png`, `.gif`, `.webp`, or `.bmp` can be directly dragged into the chat.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n.jpg, .png, .gif, .webp, or .bmp\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Problem Matcher (JSON)\nDESCRIPTION: Example of how to modify an existing problem matcher ($tsc-watch) in a task configuration to apply to all documents instead of just closed ones.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"npm\",\n    \"script\": \"watch\",\n    \"problemMatcher\": {\n        \"base\": \"$tsc-watch\",\n        \"applyTo\": \"allDocuments\"\n    },\n    \"isBackground\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Registering External URI Opener in package.json\nDESCRIPTION: Defines activation events for an external URI opener extension supporting http and https URLs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n  \"onOpenExternalUri:http\",\n  \"onOpenExternalUri:https\"\n]\n```\n\n----------------------------------------\n\nTITLE: Preparing Workspace and Opening VS Code - Shell Commands - bash\nDESCRIPTION: These shell commands create a workspace directory structure for a new VS Code C++ project and launch VS Code in the designated folder. They sequentially create 'projects' and 'helloworld' directories and open VS Code using the 'code .' command. Run these commands in a macOS terminal; dependencies include the VS Code 'code' CLI being available on the system PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir projects\ncd projects\nmkdir helloworld\ncd helloworld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Monitoring Existing Tunnels with `code tunnel` CLI Command\nDESCRIPTION: Illustrates the command used to turn on Tunnel Access from the command line. In v1.77, running this command when a tunnel is already active on the machine will monitor the existing tunnel instead of creating a duplicate. Users can interact with the monitoring process to stop ('x') or restart ('r') the tunnel.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_77.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncode tunnel\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Environment Variables - VS Code Settings - JavaScript\nDESCRIPTION: Configures terminal environment variables for Linux in VS Code using the resolved variable format. Dependencies include VS Code's settings system and knowledge of supported variable references (e.g., ${workspaceRoot}, ${env:PATH}). The setting \"terminal.integrated.env.linux\" expects a map of environment variable names to their resolved values, enabling dynamic assignment based on workspace or system paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"terminal.integrated.env.linux\": {\n  \"FOO\": \"${workspaceRoot}\",\n  \"BAR\": \"${env:PATH}\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Fallback Ligatures for Terminal (JSON)\nDESCRIPTION: Defines a custom list of character sequences that should be joined to form ligatures when using the fallback ligature mechanism (e.g., if the font isn't parsed correctly or GPU acceleration is off). This example configures only 'ff', 'fi', and 'fl' as fallback ligatures using the `terminal.integrated.fontLigatures.fallbackLigatures` setting in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Only use ligatures for `ff`, `fi` and `fl`\n\"terminal.integrated.fontLigatures.fallbackLigatures\": [\n    \"ff\",\n    \"fi\",\n    \"fl\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring New Editor Opening Position in VS Code\nDESCRIPTION: Demonstrates how to control where new editors open using a workspace setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.openPositioning\": \"right\"\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Code with APT on Raspberry Pi OS (Bash)\nDESCRIPTION: This Bash code snippet shows how to update the local package index and install Visual Studio Code from the official Raspberry Pi OS APT repository. Running these commands will download and install the latest available 'code' package. Requires administrator privileges via 'sudo' and assumes internet connectivity. Input: none; Output: VS Code added to your system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/raspberry-pi.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\\nsudo apt install code\n```\n\n----------------------------------------\n\nTITLE: Tree View Drag and Drop Configuration - JSON\nDESCRIPTION: Example of NODE_MODULE_VERSION and Node.js version mapping for desktop and remote environments. Shows version compatibility information for native node modules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Desktop\": {\n    \"NODE_MODULE_VERSION\": 101,\n    \"Node-API\": 8\n  },\n  \"Remote\": {\n    \"NODE_MODULE_VERSION\": 93,\n    \"Node-API\": 8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Auto Quote Configuration\nDESCRIPTION: Configuration setting to disable automatic quote insertion in HTML attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"html.autoCreateQuotes\": false\n```\n\n----------------------------------------\n\nTITLE: Disabling macOS Developer Tools Access Prompt (Bash)\nDESCRIPTION: Shows the terminal command to permanently disable the macOS security prompt (\"Developer Tools Access needs to take control...\") that can appear during debugging sessions initiated by tools like `lldb-mi`. This command modifies system security settings for developer tools and requires administrative privileges (`sudo`) to execute successfully.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/lldb-mi.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo DevToolsSecurity --enable\n```\n\n----------------------------------------\n\nTITLE: Customizing Indent Guide Colors in VS Code\nDESCRIPTION: Configuration to customize the color of indent guides in the editor. This example changes the indent guides to bright blue by modifying the workbench color customizations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"editorIndentGuide.background\": \"#0000ff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Agent in Background on Linux (Bash)\nDESCRIPTION: Starts the `ssh-agent` process in the background on a Linux system and sets the necessary environment variables (`SSH_AUTH_SOCK`, `SSH_AGENT_PID`) in the current shell session. This is often the first step required before using `ssh-add` on Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(ssh-agent -s)\"\n```\n\n----------------------------------------\n\nTITLE: Checking GCC Installation with Bash\nDESCRIPTION: Command to verify if the GCC compiler is installed on your Linux system by displaying its version information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cmake-linux.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc -v\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration for SCM Incoming and Outgoing Changes\nDESCRIPTION: VSCode settings for controlling the display of incoming and outgoing changes in the Source Control view. These settings can be toggled via the UI in the Source Control view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scm.showIncomingChanges\": true,\n\"scm.showOutgoingChanges\": true,\n\"scm.showChangesSummary\": true\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from External File for Node Debugging\nDESCRIPTION: This TypeScript configuration shows how to load environment variables from an external file for Node.js debugging. The envFile attribute specifies the path to the environment file, while the env dictionary can override variables from the file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n   //...\n   \"envFile\": \"${workspaceRoot}/.env\",\n   \"env\": { \"USER\": \"john doe\" }\n   //...\n```\n\n----------------------------------------\n\nTITLE: Basic Python Script for Printing a Message\nDESCRIPTION: This Python code snippet initializes a string variable `msg` with the value \"Roll a dice!\" and then uses the `print()` function to output the content of `msg` to the console. It serves as the initial example program in the `hello.py` file for the tutorial, demonstrating basic variable assignment and output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmsg = \"Roll a dice!\"\nprint(msg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Break-on-Load Breakpoints for Chrome Debugging in VS Code\nDESCRIPTION: This JSON configuration enables the experimental break-on-load breakpoints feature in the Chrome Debugger for VS Code. It allows setting breakpoints in JavaScript before execution, improving reliability for early-executed code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/12/20/chrome-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"name\": \"Chrome\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"breakOnLoad\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Action Keybindings\nDESCRIPTION: Demonstrates how to configure keyboard shortcuts for specific Code Actions, such as Extract function refactoring, with control over how actions are applied.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.function\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Rescaling for Overlapping Glyphs\nDESCRIPTION: A setting that enables rescaling of glyphs that overlap following cells in the terminal, intended to handle ambiguous-width characters properly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"terminal.integrated.rescaleOverlappingGlyphs\"\n```\n\n----------------------------------------\n\nTITLE: Referencing New VS Code Codicons (Identifier)\nDESCRIPTION: Lists newly added icons available in the VS Code Codicon library. Extension developers can use these identifiers (e.g., `$(export)`) in various UI contributions like labels, status bar items, and tree views to display standardized icons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_50.md#2025-04-23_snippet_1\n\nLANGUAGE: identifier\nCODE:\n```\nexport\ngraph-left\nmagnet\nnotebook\nredo\ncheck-all\npinned\n```\n\n----------------------------------------\n\nTITLE: Using vscode.env.asExternalUri to Resolve External URIs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `vscode.env.asExternalUri` API within a VS Code extension. It resolves a local HTTP server URI (`http://localhost:PORT`) to an external URI accessible from the client machine, potentially involving port forwarding if the extension runs remotely. The example includes starting a simple Node.js HTTP server and registering a command that resolves the URI and copies it to the clipboard.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport * as vscode from 'vscode';\nimport * as http from 'http';\n\nconst PORT = 3000;\n\nexport function activate(context: vscode.ExtensionContext) {\n  startLocalServer(PORT);\n\n  context.subscriptions.push(vscode.commands.registerCommand('example.command', async () => {\n      const resolved = vscode.env.asExternalUri(vscode.Uri.parse(`http://localhost:${PORT}`));\n      vscode.window.showInformationMessage(`Resolved to: ${resolved} on client and copied to clipboard`);\n      vscode.env.clipboard.writeText(resolved.toString());\n  }));\n}\n\nfunction startLocalServer(port: number) {\n  const server = http.createServer((req, res) => {\n    res.end('Hello world!');\n  });\n  server.on('clientError', (err, socket) => {\n    socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  });\n  server.listen(port);\n  vscode.window.showInformationMessage(`Started local server on port: ${port}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Debugger Enable Breakpoints Attribute - VS Code Contribution Point - JSON\nDESCRIPTION: This JSON snippet shows the old/deprecated configuration for enabling breakpoints for specific languages inside a debugger definition in the contributes section. It uses the enableBreakpointsFor attribute inside contributes.debuggers, which is to be replaced. Used in package.json of the extension. Only for legacy support; new implementations should migrate away from this.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"contributes\": {\n    \"debuggers\": [{\n      \"type\": \"csharp\",\n      // ...\n      \"enableBreakpointsFor\": [ \"csharp\", \"razor\" ]\n      // ...\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inline References in VS Code Chat\nDESCRIPTION: Shows how to add inline references to symbols or locations using ChatResponseStream.anchor method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst symbolLocation: vscode.Uri = vscode.Uri.parse('location-to-a-symbol');\n\n// Render an inline anchor to a symbol in the workspace\nstream.anchor(symbolLocation, 'MySymbol');\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level for Git Extension\nDESCRIPTION: Command line instruction to start VS Code with debug log level specifically for the Git extension's output channel. This allows for more detailed logging from a specific extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode --log vscode.git:debug\n```\n\n----------------------------------------\n\nTITLE: Using DebugConfigurationProvider API for VS Code Debug Extensions\nDESCRIPTION: The new DebugConfigurationProvider API replaces command-based hooks for debug functionality. Requires enabling proposed API in package.json and including the vscode.proposed.d.ts file in the extension project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Identifying Docker Compose Files by Language ID\nDESCRIPTION: Specifies the language identifier `dockercompose` for Docker compose files. Extension authors can use this ID to target functionality specifically for these files, such as language features or commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndockercompose\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Resources for Fine-tuning in JSON\nDESCRIPTION: JSON configuration file generated by the 'AI Toolkit: Provision Azure Container Apps job for fine-tuning' command. It contains settings for Azure resources used in the fine-tuning process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/finetune.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"infra/finetuning.config.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fix All and Organize Imports on Save in JSON\nDESCRIPTION: Demonstrates how to enable automatic fixing of all issues and organizing of imports when saving a file using the editor.codeActionsOnSave setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n// On save, run both fixAll and organizeImports source actions\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true,\n    \"source.organizeImports\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Class Snippet with Variable Transformations in JSON\nDESCRIPTION: A VS Code snippet that creates a public Java class with a name derived from the filename using the new variable transformation feature. The transformation takes the filename, extracts the part before '.java', and capitalizes it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"Public Class\": {\n    \"prefix\": \"pclass\",\n    \"body\": [\n      \"public class ${1:${TM_FILENAME/(.*)\\\\.java/${1:\\/capitalize}/}} {\",\n      \"\\tpublic $1 (${2:params}) {\",\n      \"\\t\\t$0\",\n      \"\\t}\",\n      \"}\"\n    ],\n    \"description\": \"New public class\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Paste Behavior for Absolute Paths in VS Code (JSON)\nDESCRIPTION: Sets the default behavior for pasting files into the VS Code editor. This JSON configuration snippet, intended for `settings.json`, uses the `editor.pasteAs.preferences` setting with `[\"uri.path.absolute\"]` to prioritize inserting the absolute path of the pasted file over other potential formats like relative paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"editor.pasteAs.preferences\": [\n    \"uri.path.absolute\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring CDPATH Support in VS Code Terminal Suggestions\nDESCRIPTION: This setting (`terminal.integrated.suggest.cdPath`) enables and configures the display of directory entries from the `$CDPATH` environment variable within the terminal's IntelliSense suggestions when using the `cd` command. It works across platforms (including Windows with ';' separators) even if the shell doesn't natively support CDPATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nsetting(terminal.integrated.suggest.cdPath)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom View Containers in VS Code Extension Package.json\nDESCRIPTION: JSON configuration for extension authors to create custom view containers in VS Code's Activity Bar. This example defines a Package Explorer container with Dependencies and Outline views, including an icon specification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"contributes\": {\n        \"viewsContainers\": {\n            \"activitybar\": [\n                {\n                    \"id\": \"package-explorer\",\n                    \"title\": \"Package Explorer\",\n                    \"icon\": \"resources/package-explorer.svg\"\n                }\n            ]\n        },\n        \"views\": {\n            \"package-explorer\": [\n                {\n                    \"id\": \"package-dependencies\",\n                    \"name\": \"Dependencies\"\n                },\n                {\n                    \"id\": \"package-outline\",\n                    \"name\": \"Outline\"\n                }\n            ]\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory with CMD\nDESCRIPTION: Command to change the current directory to the newly created project folder after generating the Maven project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-webapp.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ncd webapp-project\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to SourceControlResourceState\nDESCRIPTION: This TypeScript interface snippet demonstrates how to associate commands with resource states in the Source Control view. Commands define the behavior when a user clicks on a resource state.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControlResourceState {\n  readonly command?: Command;\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Alias Usage Example\nDESCRIPTION: JavaScript code example showing how to use webpack aliases in import statements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/jsconfig.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Something from 'ClientApp/foo'\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript with Babel and Source Maps (Bash)\nDESCRIPTION: Command-line example demonstrating how to use Babel (`npx babel`) to transpile a JavaScript file (`script.js`), outputting the compiled code (`script-compiled.js`) and generating source maps (`--source-maps`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js --source-maps\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Extensions in VS Code (JSON)\nDESCRIPTION: This snippet shows various ways to configure allowed extensions in VS Code, including allowing specific publishers, extensions, versions, and platforms using the extensions.allowed setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.allowed\": {\n    \"microsoft\": true,\n    \"github\": true,\n    \"esbenp.prettier-vscode\": true,\n    \"ms-azuretools.vscode-docker\": false,\n    \"dbaeumer.vscode-eslint\": [\"3.0.0\"],\n    \"figma.figma-vscode-extension\": [\"3.0.0\", \"4.2.3\", \"4.1.2\"],\n    \"rust-lang.rust-analyzer\": [\"5.0.0@win32-x64\", \"5.0.0@darwin-x64\"],\n    \"github.vscode-pull-request-github\": \"stable\",\n    \"redhat\": \"stable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code via Package Managers - Bash\nDESCRIPTION: This series of Bash commands demonstrates installing Visual Studio Code using Debian-based (.deb) with dpkg or RedHat-based (.rpm) with yum package managers. Replace \\\"<file>\\\" with the actual downloaded package filename. Requires root (sudo) privileges and appropriate package files. These commands integrate VS Code into your system, installing desktop entries and the \\\"code\\\" CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# For .deb\nsudo dpkg -i <file>.deb\n\n# For .rpm\nsudo yum install <file>.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring Issue Triggers with VS Code Settings - JSON\nDESCRIPTION: This snippet demonstrates how to configure triggers for the GitHub Issues: Create Issue Triggers setting in VS Code. These triggers define which comment keywords (such as TODO or FIXME) prompt the Code Action for creating new issues from code. The setting must be placed in your settings.json file, and accepts an array of case-sensitive string triggers. Input is a settings key-value object, and output is automatic issue creation prompts when the triggers are detected.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/github.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"githubIssues.createIssueTriggers\\\": [\\n    \\\"TODO\\\",\\n    \\\"todo\\\",\\n    \\\"BUG\\\",\\n    \\\"FIXME\\\",\\n    \\\"ISSUE\\\",\\n    \\\"HACK\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Title with Focused View Variable\nDESCRIPTION: Shows how to use the ${focusedView} variable in window.title setting to display the name of the currently focused view in the title bar.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${focusedView}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings in VS Code\nDESCRIPTION: This example demonstrates how to customize editor settings for specific language modes (TypeScript and Markdown) in VS Code. Settings like formatOnSave and other editor behaviors can be scoped to specific file types using language identifiers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[typescript]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.formatOnPaste\": true\n  },\n  \"[markdown]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.wrappingColumn\": 0,\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.acceptSuggestionOnEnter\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code using Snap\nDESCRIPTION: Installs the stable (`code`) or insiders (`code-insiders`) version of VS Code as a Snap package using `sudo snap install --classic`. Requires `snapd` to be installed and configured on the system. Snap packages provide automatic background updates.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install --classic code # or code-insiders\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language for New Files in VS Code\nDESCRIPTION: JSON configuration for setting HTML as the default language for new blank files in VS Code. This setting automatically configures the editor for HTML language mode when creating new files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n  // The default language mode that is assigned to new files.\n  \"files.defaultLanguage\": \"html\"\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Colors in VS Code Themes\nDESCRIPTION: Provides configuration keys for setting colors used in charts displayed within VS Code. This includes general foreground, line colors, axis/guide colors, and specific palette colors (red, blue, yellow, etc.). These identifiers are used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n- `charts.foreground`: Contrast color for text in charts.\n- `charts.lines`: Color for lines in charts.\n- `charts.red`: Color for red elements in charts.\n- `charts.blue`: Color for blue elements in charts.\n- `charts.yellow`: Color for yellow elements in charts.\n- `charts.orange`: Color for orange elements in charts.\n- `charts.green`: Color for green elements in charts.\n- `charts.purple`: Color for purple elements in charts.\n- `chart.line`: Line color for the chart.\n- `chart.axis`: Axis color for the chart.\n- `chart.guide`: Guide line for the chart.\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Features for JavaScript in VS Code\nDESCRIPTION: Configuration example showing how to set up font family, enable ligatures globally, and configure specific font features for JavaScript files using Fira Code font.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"editor.fontFamily\": \"Fira Code\",\n\"editor.fontLigatures\": true,\n\"[javascript]\": {\n  \"editor.fontLigatures\": \"'ss02', 'ss19'\",\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Worst-Case Structure for Query Time Analysis\nDESCRIPTION: This structure represents the worst-case scenario for query time analysis by adding O(N / log N) sibling bracket pairs within each level of the O(log N) nested structure. Analyzing this structure helps derive the overall worst-case query complexity of O(log^2 N + R), considering both nesting depth and list length at each level.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{}{}{}{}{}{}{}{}... O(N / log N) many\n{\n    {}{}{}{}{}{}{}{}... O(N / log N) many\n    {\n        ... O(log N) many nested bracket pairs\n            {\n                {}{}{}{}{}{}{}{}... O(N / log N) many\n                {} [1]\n            }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repository Mirror Folder Structure for Dev Container Overrides - Directory Tree\nDESCRIPTION: This directory tree illustrates how to mirror a remote repository's location in your local filesystem for custom dev container configurations. It aids users in structuring their folders to match a repository (such as github.com/devcontainers/templates), placing the .devcontainer configuration where Dev Containers can auto-detect it based on repository URL and user settings. Ensure that the path hierarchy matches that of the Git remote for correct automatic loading.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n📁 github.com\n    📁 devcontainers\n        📁 templates\n           📁 .devcontainer\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using nvm on Chromebook\nDESCRIPTION: This command uses nvm to install the latest version of Node.js in the Chromebook's Linux environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/12/03/chromebook-get-started.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Imports on Save in VS Code\nDESCRIPTION: JSON configuration that enables automatic sorting of imports on file save for JavaScript and TypeScript files. This setting triggers the 'Sort imports' Code Action whenever a file is saved, without removing unused imports.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeActionsOnSave\": {\n    \"source.sortImports\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using System.out.println() in Java with VS Code Snippets\nDESCRIPTION: A code snippet that demonstrates the output of typing 'sout' or 'sysout' in VS Code, which generates a System.out.println() statement. This is a common snippet for quick console output in Java.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/java.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println()\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Split Keyboard Shortcut in VS Code\nDESCRIPTION: JSON configuration to map Ctrl+\\ to the terminal split command, overriding the default SIGQUIT behavior on Linux and Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+\\\\\", \"command\": \"workbench.action.terminal.split\", \"when\": \"terminalFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Page URL with ListView in Django\nDESCRIPTION: Sets up the URL configuration for the home page using the HomeListView, limiting the queryset to the five most recent messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom hello.models import LogMessage\n\nhome_list_view = views.HomeListView.as_view(\n    queryset=LogMessage.objects.order_by(\"-log_date\")[:5],  # :5 limits the results to the five most recent\n    context_object_name=\"message_list\",\n    template_name=\"hello/home.html\",\n)\n\n# Replace the existing path for \"\"\npath(\"\", home_list_view, name=\"home\"),\n```\n\n----------------------------------------\n\nTITLE: Configuring Iframe-based Webviews in VS Code\nDESCRIPTION: Configuration setting to enable experimental iframe-based webviews in desktop VS Code. This setting requires an internet connection and loads each webview in a unique origin for security isolation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"webview.experimental.useExternalEndpoint\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Conpty Backend for Terminal - VS Code User Settings (JSON)\nDESCRIPTION: This JSON snippet sets the 'terminal.integrated.experimental.windowsUseConptyDll' configuration to true, enabling an experimental backend for the integrated terminal on Windows. This feature is intended to provide performance and reliability improvements in terminal emulation, mimicking behavior found in Windows Terminal. The setting must be placed in the VS Code user or workspace settings file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"terminal.integrated.experimental.windowsUseConptyDll\": true\n```\n\n----------------------------------------\n\nTITLE: Deleting VS Code User Data on Windows\nDESCRIPTION: Specifies the default locations of Visual Studio Code user data folders on Windows. Deleting these folders (`%APPDATA%\\Code` and `%USERPROFILE%\\.vscode`) ensures a clean uninstall or reset of VS Code settings and data. These paths utilize standard Windows environment variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/setup-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n%APPDATA%\\Code\n```\n\nLANGUAGE: shell\nCODE:\n```\n%USERPROFILE%\\.vscode\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Palette History in Visual Studio Code Settings\nDESCRIPTION: JSON configuration to enable preserving input and setting the number of entries in the Command Palette history. This allows quickly accessing recently used commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workbench.commandPalette.preserveInput\": true,\n    \"workbench.commandPalette.history\": 50\n}\n```\n\n----------------------------------------\n\nTITLE: Default Glob Pattern for Python Auto Test Discovery\nDESCRIPTION: This glob pattern (`**/*.py`) is the default value for the `python.testing.autoTestDiscoverOnSavePattern` setting. It matches any file with a `.py` extension within any subdirectory of the workspace, ensuring that saving any Python file triggers automatic test discovery by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n**/*.py\n```\n\n----------------------------------------\n\nTITLE: Styling Webviews for High Contrast Light Theme in VS Code (CSS)\nDESCRIPTION: Demonstrates how to apply specific CSS styles within a VS Code webview when the high contrast light theme is active. It uses the `.vscode-high-contrast-light` class, automatically added to the webview's body element, to scope styles, such as setting the color of `.error` elements to red.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n```css\n.vscode-high-contrast-light .error {\n    color: red;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Opening Project Folder in VS Code via Bash\nDESCRIPTION: Explains how to use the 'cd' command to navigate to the helloworld project directory and launch Visual Studio Code in that location with 'code .'. The usage assumes the VS Code executable is available from the command line in WSL. This opens the folder as the current workspace in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/projects/helloworld\\ncode .\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Mutators in TypeScript\nDESCRIPTION: Demonstrates how to configure when environment variable mutations are applied, supporting both process creation and shell integration scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.environmentVariableCollection.prepend('PATH', '/my/custom/path', {\n  applyAtProcessCreation: true,\n  applyAtShellIntegration: true\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Express Application with npm in Bash\nDESCRIPTION: This command starts the Express application server using npm. It runs the app on the default port 3000 on the remote machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code Command Palette with Keyboard Shortcut\nDESCRIPTION: This code snippet illustrates how to use a keyboard shortcut to open the VS Code Command Palette. It's used within markdown to represent a key binding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/personalize-vscode.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.showCommands)`\n```\n\n----------------------------------------\n\nTITLE: Opening a Remote GitHub Repository in VS Code with RemoteHub Extension\nDESCRIPTION: Command line example showing how to open a GitHub repository as a folder in VS Code using the RemoteHub extension and the --folder-uri parameter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode --folder-uri remotehub://github.com/microsoft/vscode\n```\n\n----------------------------------------\n\nTITLE: Installing Extension Pre-release Version Command\nDESCRIPTION: Shows how to enable the Next Edit Suggestions feature in VS Code settings by enabling the github.copilot.nextEditSuggestions.enabled setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/02/12/next-edit-suggestions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"github.copilot.nextEditSuggestions.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring GCC Task in VS Code\nDESCRIPTION: Task configuration example showing how to use the gcc problem matcher in a tasks.json file for compiling C programs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"gcc\",\n    \"args\": [\"-Wall\", \"helloWorld.c\", \"-o\", \"helloWorld\"],\n    \"problemMatcher\": \"$gcc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Slash Commands with /\nDESCRIPTION: Shows the `/` symbol used in the Copilot chat input field to trigger the display and selection of available slash commands, which are shortcuts for common instructions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n`/`\n```\n\n----------------------------------------\n\nTITLE: Install Xcode Command-Line Tools on macOS\nDESCRIPTION: A shell command intended for macOS users. Running `xcode-select --install` in a terminal prompts the system to install the Xcode command-line tools, which include the Clang compiler and the `ld` linker necessary for building Rust projects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript with Source Maps (Bash)\nDESCRIPTION: Command-line example showing how to compile a TypeScript file (`app.ts`) using the `tsc` compiler, enabling source map generation (`--sourceMap`) and specifying an output directory (`--outDir bin`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntsc --sourceMap --outDir bin app.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Associations for Custom Editors in VS Code\nDESCRIPTION: This JSON configuration demonstrates how to associate specific file types with custom editors using the workbench.editorAssociations setting. The example maps files with .catScratch extension to open with the catCustoms.catScratch custom editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editorAssociations\": [\n  {\n    \"viewType\": \"catCustoms.catScratch\",\n    \"filenamePattern\": \"*.catScratch\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Passing Build Argument via devcontainer.json (JSON)\nDESCRIPTION: Configures the `build` section within a `devcontainer.json` file to pass a build argument (`devcontainercli`) with the value `\"true\"` to the Docker build process when building the dev container image. This mechanism works with a corresponding check within the Dockerfile (like the previous Bash snippet) to validate the build context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n          // set devcontainer-cli arg for Dockerfile\n          \"devcontainercli\": \"true\"\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering HoverProvider Using Codicons in MarkdownString - VS Code API - TypeScript\nDESCRIPTION: Demonstrates how to register a HoverProvider that displays all available codicon icons using the VS Code API. This snippet uses TypeScript, the 'vscode' module, and relies on the MarkdownString and ThemeIcon classes. The implementation constructs a Markdown string containing codicons (by name in the 'all' variable) and renders them in a hover tooltip. Inputs include the current document and position, and the output is a rendered hover. Requires the Codicon font to be available and the correct module imports.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.languages.registerHoverProvider('*', new class implements vscode.HoverProvider {\n    provideHover(doc: vscode.TextDocument, pos: vscode.Position) {\n        const all = `$(activate-breakpoints)$(add)...$(zoom-out)`;\n        const md = new vscode.MarkdownString(all, true);\n        return new vscode.Hover(md, doc.getWordRangeAtPosition(pos));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Language Model Tools API in TypeScript\nDESCRIPTION: This code snippet defines the proposed API for Language Model Tools in VS Code. It includes interfaces and types for registering and using tools with language models.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.proposed.lmTools.d.ts\n```\n\n----------------------------------------\n\nTITLE: Platform Independent Cache Configuration in Azure Pipelines\nDESCRIPTION: YAML configuration showing how to use the platformIndependent parameter in Azure Pipelines Artifact Caching Tasks to share cache results across build agents.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/18/optimizing-ci.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1\n  inputs:\n    keyfile: keyfile\n    targetfolder: target\n    vstsFeed: $(ArtifactFeed)\n    platformIndependent: true\n```\n\n----------------------------------------\n\nTITLE: Defining Always Installed Extensions in VS Code User Settings (JSON)\nDESCRIPTION: Specifies a list of extension IDs ('eamodio.gitlens', 'mutantdino.resourcemonitor') in the `dev.containers.defaultExtensions` user setting (`settings.json`). This ensures these extensions are automatically installed in every dev container upon connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"dev.containers.defaultExtensions\": [\n    \"eamodio.gitlens\",\n    \"mutantdino.resourcemonitor\"\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Per-File JavaScript Type Checking with @ts-nocheck\nDESCRIPTION: This JavaScript snippet demonstrates how to explicitly disable TypeScript type checking for a specific file using the `// @ts-nocheck` comment. This is useful when type checking is enabled globally or via a project configuration, but needs to be suppressed for a particular file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// @ts-nocheck\nlet easy = 'abc'\neasy = 123 // no error\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Scroll for Trees in settings.json\nDESCRIPTION: This JSON setting enables the Sticky Scroll feature for all tree views within VS Code, such as the File Explorer. Set this to `true` in `settings.json` to activate the feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nworkbench.tree.enableStickyScroll: true\n```\n\n----------------------------------------\n\nTITLE: Configuration Default Settings Example\nDESCRIPTION: Example showing how to override default configuration values and set language-specific editor configurations for Markdown.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"configurationDefaults\": {\n      \"[markdown]\": {\n        \"editor.wordWrap\": \"on\",\n        \"editor.quickSuggestions\": {\n                \"comments\": \"off\",\n                \"strings\": \"off\",\n                \"other\": \"off\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GDB Path for MinGW/Cygwin in launch.json (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `miDebuggerPath` property within a `launch.json` file in Visual Studio Code. It's used to explicitly set the path to the GDB executable (gdb.exe) when debugging C++ applications built with MinGW or Cygwin on a Windows system. This ensures VS Code uses the correct debugger for the specified environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"miDebuggerPath\": \"c:\\\\mingw\\\\bin\\\\gdb.exe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Always Show Editor Actions Setting\nDESCRIPTION: A setting that controls whether editor title actions are always visible for all editor groups, regardless of which editor is active.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"workbench.editor.alwaysShowEditorActions\"\n```\n\n----------------------------------------\n\nTITLE: Implementing QuickPickItem Separators in TypeScript\nDESCRIPTION: Code demonstrating how to add separator items to a Quick Pick menu by specifying the QuickPickItemKind.Separator kind property on a QuickPickItem. This creates visual grouping or spacing between regular items in the menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    label: 'APIs',\n    kind: QuickPickItemKind.Separator\n}\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Task Shell Configuration\nDESCRIPTION: Task configuration specifically for Windows environment using cmd.exe as the shell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"windows\": {\n        \"options\": {\n            \"shell\": {\n                \"executable\": \"cmd.exe\",\n                \"args\": [\n                    \"/d\", \"/c\"\n                ]\n            }\n        }\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Terminal Image Support\nDESCRIPTION: Configuration setting to disable the integrated terminal's image display capability.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.enableImages\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding for Refactor Action in VS Code (JSON)\nDESCRIPTION: This JSON code configures a custom keyboard shortcut (Ctrl+Shift+R Ctrl+E) to trigger the 'editor.action.codeAction' command with the argument 'kind: refactor.extract.function', which corresponds to the Extract Function refactoring in VS Code. This snippet must be added to the 'keybindings.json' file, and is dependent on VS Code supporting the referenced codeAction kind. The key parameter 'key' specifies the keystroke, 'command' the VS Code command, and 'args' further refines the action. Input is the keyboard shortcut; output is the activation of the Extract Function refactor. Ensure there are no conflicting shortcuts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.function\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RakeTaskDefinition Interface\nDESCRIPTION: TypeScript interface definition extending vscode.TaskDefinition for Rake tasks\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/task-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RakeTaskDefinition extends vscode.TaskDefinition {\n  /**\n   * The task name\n   */\n  task: string;\n\n  /**\n   * The rake file containing the task\n   */\n  file?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomListCode_NoItem Group for Code Without Items\nDESCRIPTION: XML schema group definition that specifies allowed code structures in collection traversal logic that don't include Item elements. This includes control structures like loops, conditions, and execution statements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<xs:group name=\"CustomListCode_NoItem\">\n    <xs:choice>\n      <!-- For the sake of simplifying implementation, I am not implementing declaring variables inside of an 'loop' block\n           until I encounter a scenario that requires it.-->\n      <!--<xs:element name=\"Variable\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"VariableType\"></xs:element>-->\n      <xs:element name=\"Loop\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"LoopType_NoItem\"></xs:element>\n      <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element name=\"If\" minOccurs=\"1\" maxOccurs=\"1\" type=\"IfType_NoItem\"></xs:element>\n        <xs:element name=\"Elseif\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"IfType_NoItem\"></xs:element>\n        <xs:element name=\"Else\" minOccurs=\"0\" maxOccurs=\"1\" type=\"ElseType_NoItem\"></xs:element>\n      </xs:sequence>\n      <xs:element name=\"Exec\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"ExecType\"></xs:element>\n      <xs:element name=\"Break\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"BreakType\"></xs:element>\n    </xs:choice>\n  </xs:group>\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Compiler Version\nDESCRIPTION: Command to verify Rust installation by checking the compiler version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustc --version\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc Type Assertions in JavaScript with TypeScript Checking\nDESCRIPTION: This snippet demonstrates how to use JSDoc type assertions in JavaScript files to apply TypeScript type checking. The example shows declaring an HTMLImageElement type for a DOM element, which enables proper intellisense and type checking when using @ts-check.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @ts-check\n\nconst img = /** @type {HTMLImageElement} */ (document.getElementById('#cat'))\nimg.src = './cat.gif'\n```\n\n----------------------------------------\n\nTITLE: VS Code URL Protocol Examples - Bash\nDESCRIPTION: Examples of VS Code URL protocol formats for opening projects, files, and settings from external applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvscode://file/{full path to project}/\n\nvscode://file/c:/myProject/\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Web Extension Testing in JSON\nDESCRIPTION: This package.json snippet shows how to add @vscode/test-web as a development dependency and create a script to open the extension in a browser for testing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@vscode/test-web\": \"*\"\n  },\n  \"scripts\": {\n    \"open-in-browser\": \"vscode-test-web --extensionDevelopmentPath=. .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration Example - Editor Focus\nDESCRIPTION: Setting to control the order in which editor tabs are closed, either in most recently used order or right to left.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.focusRecentEditorAfterClose\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic C++ Hello World Program\nDESCRIPTION: Provides the source code for a simple C++ program (`helloworld.cpp`). It uses iostream, vector, and string to print a greeting message to the console, demonstrating basic C++ features and standard library usage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    vector<string> msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\n\n    for (const string& word : msg)\n    {\n        cout << word << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Splitting on Drag and Drop\nDESCRIPTION: A VS Code setting `workbench.editor.splitOnDragAndDrop`. When set to `false` (the default is `true`), it prevents editor groups from automatically splitting when an editor tab is dragged and dropped over another editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\nworkbench.editor.splitOnDragAndDrop\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Data in HTML Language Service\nDESCRIPTION: This TypeScript code snippet demonstrates how to load custom data providers into the HTML language service using the vscode-html-languageservice library.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/24/custom-data-format.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLanguageService } from 'vscode-html-languageservice'\n\ngetLanguageService({\n  customDataProviders: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Extension Command and Menu Contribution in JSON\nDESCRIPTION: This JSON snippet configures the extension's command and adds a button to the editor title bar. It specifies the command details, icon, and menu placement for the 'Toggle Tutor Annotations' feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"commands\": [\n    {\n      \"command\": \"code-tutor.annotate\",\n      \"title\": \"Toggle Tutor Annotations\",\n      \"icon\": \"$(comment)\"\n    }\n  ],\n  \"menus\": {\n    \"editor/title\": [\n      {\n        \"command\": \"code-tutor.annotate\",\n        \"group\": \"navigation\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Command IDs\nDESCRIPTION: Examples of VS Code command IDs used for various actions like opening settings and managing profiles.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_81.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nworkbench.action.openSettingsJson\nworkbench.action.openApplicationSettingsJson\nbreadcrumbs.focusAndSelect\n```\n\n----------------------------------------\n\nTITLE: Controlling Source Control Input Box Visibility in VS Code (TypeScript)\nDESCRIPTION: Defines the `SourceControlInputBox` interface, adding a `visible` boolean property. This proposed API property allows VS Code extensions to programmatically show or hide the input box typically found at the top of a source control provider's view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControlInputBox {\n\n    /**\n    * Controls whether the input box is visible (default is  true`).\n    */\n    visible: boolean;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining OS-Specific Task Properties for Node.js Command (JSON)\nDESCRIPTION: Shows how to specify different command paths for Windows and Linux using the windows and linux keys in tasks.json, allowing the same task to adapt per operating system. Requires Node.js to be installed at the specified paths on each OS. No arguments or problem matchers are used; the configuration demonstrates property overriding and OS targeting. Input: task run on Windows or Linux; Output: correct node executable invoked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Run Node\",\n    \"type\": \"process\",\n    \"windows\": {\n        \"command\": \"C:\\\\Program Files\\\\nodejs\\\\node.exe\"\n    },\n    \"linux\": {\n        \"command\": \"/usr/bin/node\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Quick Diff Provider in VS Code\nDESCRIPTION: Example from GitHub Pull Request extension demonstrating how to register a quick diff provider for showing line changes in PR files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.registerQuickDiffProvider({ scheme: 'file' }, {\n    provideOriginalResource: (uri: vscode.Uri) => {\n        const changeNode = this.reviewModel.localFileChanges.find(changeNode => changeNode.changeModel.filePath.toString() === uri.toString());\n        if (changeNode) {\n            return changeNode.changeModel.parentFilePath;\n        }\n    }\n}, 'GitHub Pull Request', this.repository.rootUri);\n```\n\n----------------------------------------\n\nTITLE: Example Command for Converting Model to ONNX Format\nDESCRIPTION: Provides a complete example command for converting a specific model (Phi-3-mini) to ONNX format with FP16 precision for CPU execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npython -m onnxruntime_genai.models.builder -m C:\\hfmodel\\phi3 -p fp16 -e cpu -o C:\\Users\\Administrator\\.aitk\\models\\microsoft\\Phi-3-mini-4k-instruct\\cpu\\phi3-cpu-int4-rtn-block-32-acc-level-4 -c C:\\temp --extra_options include_prompt_templates=1\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Extract Refactoring Keybinding\nDESCRIPTION: JSON configuration for setting up a keyboard shortcut to trigger the Extract refactoring action for both constants and type aliases in TypeScript.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"shift+ctrl+e\",\n    \"command\": \"editor.action.codeAction\",\n    \"args\": {\n        \"kind\": \"refactor.extract\",\n        \"preferred\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace Settings via Menu\nDESCRIPTION: This menu path (`Preferences | Workspace Settings`) allows users to open and configure settings specific to the current workspace in VS Code. These settings override global user settings and are stored in `.vscode/settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nPreferences | Workspace Settings\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Command to Toggle Details in Terminal Suggestions\nDESCRIPTION: References the VS Code command ID `workbench.action.terminal.suggestToggleDetails`, which can be bound to a keyboard shortcut (`kb(...)`) to toggle the visibility of additional details within the terminal suggestion widget.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.terminal.suggestToggleDetails)\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Tool Availability\nDESCRIPTION: Example showing how to use when clauses to control when a language model tool is available based on VS Code context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"languageModelTools\": [\n        {\n            \"name\": \"chat-tools-sample_tabCount\",\n            \"when\": \"debugState == 'running'\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Available User Settings for VS Code Java Debugger\nDESCRIPTION: A collection of user settings keys for configuring the Java Debug extension in VS Code's `settings.json`. These settings control aspects like log levels, variable display formats (hex, static, qualified names, logical structure, toString), string length limits, Hot Code Replace behavior, CodeLens visibility, build actions, console type, exception/stepping class skipping rules, JDWP timeouts/limits, and default VM arguments. Each setting fine-tunes a specific aspect of the Java debugging experience within the IDE.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`java.debug.logLevel`: Minimum level of debugger logs that are sent to VS Code, defaults to `warn`.\n`java.debug.settings.showHex`: Show numbers in hex format in **Variables**, defaults to `false`.\n`java.debug.settings.showStaticVariables`: Show static variables in **Variables**, defaults to `false`.\n`java.debug.settings.showQualifiedNames`: Show fully qualified class names in **Variables**, defaults to `false`.\n`java.debug.settings.showLogicalStructure`: Show the logical structure for the Collection and Map classes in **Variables**, defaults to `true`.\n`java.debug.settings.showToString`: Show 'toString()' value for all classes that override 'toString' method in **Variables**, defaults to `true`.\n`java.debug.settings.maxStringLength`: The maximum length of strings displayed in **Variables** or **Debug Console**. Strings longer than this limit will be trimmed. The default is `0`, which means no trim is performed.\n`java.debug.settings.hotCodeReplace`: Reload the changed Java classes during debugging, defaults to `manual`. Make sure `java.autobuild.enabled` is not disabled for the [Java Language Support extension](https://github.com/redhat-developer/vscode-java). See the [Hot Code Replace wiki page](https://github.com/microsoft/vscode-java-debug/wiki/Hot-Code-Replace) for more information about usages and limitations.\n`java.debug.settings.enableHotCodeReplace`: Enable Hot Code Replace for Java code. Make sure the auto build is not disabled for [VS Code Java](https://github.com/redhat-developer/vscode-java). See the [Hot Code Replace wiki page](https://github.com/microsoft/vscode-java-debug/wiki/Hot-Code-Replace) for more information about usages and limitations.\n`java.debug.settings.enableRunDebugCodeLens`: Enable the CodeLens provider for the run and debug buttons over main entry points, defaults to `true`.\n`java.debug.settings.forceBuildBeforeLaunch`: Force building the workspace before launching java program, defaults to `true`.\n`java.debug.settings.console`: The specified console to launch a Java program, defaults to `integratedTerminal`. If you want to customize the console for a specific debug session, please modify the `console` configuration in `launch.json`.\n`java.debug.settings.exceptionBreakpoint.skipClasses`: Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.\n`java.debug.settings.stepping.skipClasses`: Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.\n`java.debug.settings.stepping.skipSynthetics`: Skip synthetic methods when stepping.\n`java.debug.settings.stepping.skipStaticInitializers`: Skip static initializer methods when stepping.\n`java.debug.settings.stepping.skipConstructors`: Skip constructor methods when stepping.\n`java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest`: The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout. Defaults to 100.\n`java.debug.settings.jdwp.requestTimeout`: The timeout (ms) of JDWP request when the debugger communicates with the target JVM. Defaults to 3000.\n`java.debug.settings.vmArgs`: The default VM arguments to launch the Java program. For example, use '-Xmx1G -ea' to increase the heap size to 1 GB and enable assertions. If you want to customize the VM arguments for a specific debug session, you can modify the 'vmArgs' config in `launch.json`.\n`java.silentNotification`: Controls whether notifications can be used to report progress. If true, use status bar to report progress instead. Defaults to `false`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hover Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling hover functionality in the language server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"hoverProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - Inline Chat Text Buttons\nDESCRIPTION: Experimental setting to enable narrative style button text in inline chat.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ninlineChat.experimental.textButtons:true\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Navigation Toggle for File Explorer\nDESCRIPTION: JSON configuration to set up a keyboard shortcut (/) to toggle keyboard navigation in the File Explorer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"/\",\n    \"command\": \"list.toggleKeyboardNavigation\",\n    \"when\": \"filesExplorerFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Extensions in devcontainer.json for Laravel Development\nDESCRIPTION: Configuration snippet from devcontainer.json showing recommended VS Code extensions for Laravel development. Extensions are commented out by default to allow developers to selectively enable them based on their needs. Includes extensions for .env files, Laravel IntelliSense, Artisan commands, and Blade templating.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/03/08/the-tutorial-problem.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    ...\\n    \"extensions\": [\\n        // \"mikestead.dotenv\",\\n        // \"amiralizadeh9480.laravel-extra-intellisense\",\\n        // \"ryannaddy.laravel-artisan\",\\n        // \"onecentlin.laravel5-snippets\",\\n        // \"onecentlin.laravel-blade\"\\n    ],\n```\n\n----------------------------------------\n\nTITLE: Setting Existing .NET Installation Path for macOS in VS Code (JSON)\nDESCRIPTION: This configuration snippet specifies an existing .NET installation path for macOS, using the dotnetAcquisitionExtension.existingDotnetPath property in VS Code settings.json. It allows directing the .NET acquisition extension to utilize a pre-installed dotnet binary for specified extensions. Dependencies include C# Dev Kit and .NET Install Tool. Parameters: extensionId and absolute UNIX-style path. Input: Array with extensionId and path. Output: The extension leverages the designated .NET install. Limitation: Path must be valid for macOS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/cs-dev-kit-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dotnetAcquisitionExtension.existingDotnetPath\": [\n        { \"extensionId\": \"msazuretools.azurerm-vscode-tools\", \"path\": \"/usr/local/share/dotnet/dotnet\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Fold Background Color with JSON\nDESCRIPTION: This snippet demonstrates how to customize the background color of folded code regions in VS Code using workbench.colorCustomizations setting. The setting targets the editor.foldBackground property to change the default highlight color.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"workbench.colorCustomizations\": {\n    \"editor.foldBackground\": \"#355000\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bracket Re-pairing After Insertion\nDESCRIPTION: Demonstrates the scenario from the first example after prepending `{` at [0]. This insertion changes the pairing: `{` [0] now matches `}` [2], `(` [1] becomes unclosed, and `)` [3] becomes unopened. This highlights the need for robust error recovery and the dynamic nature of bracket matching handled by the parser.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{ [0]\n( [1]\n} [2]\n) [3]\n```\n\n----------------------------------------\n\nTITLE: Configuring No Workspace Trust Support in package.json\nDESCRIPTION: Shows how to declare that an extension does not support untrusted workspaces, which disables the extension in such environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"capabilities\": {\n  \"untrustedWorkspaces\": {\n    \"supported\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BreakType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for breaking out of the innermost loop element or terminating collection iteration. It includes custom list code attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_18\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"BreakType\">\n    <xs:annotation>\n      <xs:documentation>Breaks out of the innermost &lt;Loop&gt; element. A &lt;Break&gt; element outside of a loop will terminate iteration of the collection.</xs:documentation>\n    </xs:annotation>\n    <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in VS Code Menu Contribution When Clauses (JSON)\nDESCRIPTION: This JSON snippet defines a menu contribution for the editor title bar within a VS Code extension's `package.json`. It demonstrates the use of the logical OR operator (`||`) within the `when` clause to make the `showPreviewToSide` command available only when the active editor's language ID is either `markdown` or `html`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"menus\": {\n    \"editor/title\": [{\n      \"command\": \"showPreviewToSide\",\n      \"when\": \"editorLangId == markdown || editorLangId == html\",\n      \"group\": \"navigation\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Link Keybinding in VS Code\nDESCRIPTION: JSON configuration for creating a keyboard shortcut to convert selected text into a Markdown link using snippets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+k\",\n  \"command\": \"editor.action.insertSnippet\",\n  \"when\": \"editorTextFocus\",\n  \"args\": {\n    \"langId\": \"markdown\",\n    \"name\": \"Insert link\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Background Terminals in VS Code Extensions\nDESCRIPTION: A proposed API example showing how to create a terminal that runs in the background without being displayed in the UI. The terminal can be shown later when needed using Terminal.show().\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a background terminal\nconst terminal = window.createTerminal({ runInBackground: true });\n\n// Show the terminal in the panel\nterminal.show();\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Compose Up with Template Picker (JSON)\nDESCRIPTION: This JSON snippet configures the VS Code `docker.commands.composeUp` setting with multiple templates (dev, test, prod), each defining a specific `docker-compose` command with different file combinations. Since the `match` property is omitted, VS Code will prompt the user to choose which labeled template (dev, test, or prod) to use each time the 'Compose Up' command is invoked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"docker.commands.composeUp\": [\n    {\n        \"label\": \"dev\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.common.dev.yml ${configurationFile} up -d --build\"\n    },\n    {\n        \"label\": \"test\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.common.test.yml ${configurationFile} up -d --build\"\n    },\n    {\n        \"label\": \"prod\",\n        \"template\": \"docker-compose -f docker-compose.yml -f docker-compose.common.prod.yml ${configurationFile} up -d --build\"\n    },\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Existing Azure Environment Parameters\nDESCRIPTION: JSON configuration for specifying an existing Azure Container Apps environment in the parameters file. Shows how to reference an existing environment while leaving other resources to be created.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/finetune.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n      \"acaEnvironmentName\": {\n        \"value\": \"<your-aca-env-name>\"\n      },\n      \"acaEnvironmentStorageName\": {\n        \"value\": null\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Sponsorship in package.json\nDESCRIPTION: Adds sponsor link to extension by configuring the sponsor property in package.json. The link appears in the Marketplace and VS Code extension details.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"sponsor\": {\n  \"url\": \"https://github.com/sponsors/nvaccess\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Extension Documentation Sample\nDESCRIPTION: Example devcontainer.json reference showing how VS Code configures development containers including Dockerfile setup, port forwarding, and extension installation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/02/remote-development.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA `devcontainer.json` file can be used to tell VS Code how to configure the development container, including the `Dockerfile` to use, ports to open, and extensions to install in the container.\n```\n\n----------------------------------------\n\nTITLE: Lightbulb Control Setting\nDESCRIPTION: Setting to toggle the visibility of the lightbulb control in the editor. Controls whether code actions are shown via lightbulb UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\neditor.lightbulb.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Font and UI Settings in VS Code\nDESCRIPTION: Settings to customize font size for the main editor, terminal, and output panel. Also includes zoom level configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Main editor\n\"editor.fontSize\": 18,\n// Terminal panel\n\"terminal.integrated.fontSize\": 14,\n// Output panel\n\"[Log]\": {\n    \"editor.fontSize\": 15\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask on Remote VM\nDESCRIPTION: This command installs the Flask web framework on the remote Ubuntu VM using apt package manager.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/07/25/remote-ssh.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-flask\n```\n\n----------------------------------------\n\nTITLE: Installing Gulp and Required Plugins\nDESCRIPTION: Commands to install Gulp globally and locally along with sass/less plugins required for compilation tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g gulp\nnpm install gulp gulp-sass gulp-less\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Webview HTML Structure with Strict CSP in TypeScript\nDESCRIPTION: This TypeScript function returns a string containing the basic HTML boilerplate for a VS Code webview. It includes essential meta tags like charset, viewport, and importantly, a Content Security Policy meta tag set to `default-src 'none';`, which initially disallows all content loading, enhancing security.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nfunction getWebviewContent() {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\">\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <title>Cat Coding</title>\n</head>\n<body>\n    ...\n</body>\n</html>`;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration Reference in Markdown\nDESCRIPTION: Shows the syntax for referencing VS Code settings in release notes documentation using the setting() syntax, which renders with a settings-gear icon in the release notes editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nsetting(setting.name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy Meta Tag in HTML\nDESCRIPTION: This HTML snippet demonstrates a `<meta>` tag for setting the Content Security Policy within a webview's `<head>`. It uses `default-src 'none';` as a base and explicitly allows images (`img-src`), scripts (`script-src`), and styles (`style-src`) from specific sources (`${webview.cspSource}` placeholder and `https:` for images), while implicitly disallowing inline scripts/styles.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n```html\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'none'; img-src ${webview.cspSource} https:; script-src ${webview.cspSource}; style-src ${webview.cspSource};\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Fetch in GitHub Pull Requests Extension (settings.json)\nDESCRIPTION: This JSON setting prevents the GitHub Pull Requests and Issues extension from automatically running the `fetch` command. Set this to `false` in `settings.json` to disable fetching.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.allowFetch\": false\n```\n\n----------------------------------------\n\nTITLE: Defining View Sizes in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates the proposed API for specifying relative sizes for contributed views within the same container in `package.json`. The `size` property works like the CSS `flex-grow` property, determining the proportion of space the view should occupy relative to other views contributed by the same extension in that container. In this example, the 'Create Pull Request' view will be twice the size of the 'Compare Changes' view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"views\": {\n        \"github-pull-request\": [\n            {\n                \"id\": \"github:createPullRequest\",\n                \"type\": \"webview\",\n                \"name\": \"Create Pull Request\",\n                \"size\": 2\n            },\n            {\n                \"id\": \"github:compareChanges\",\n                \"name\": \"Compare Changes\",\n                \"size\": 1\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Folders to a Language Using Glob Patterns - VS Code JSON\nDESCRIPTION: This snippet shows how to associate all files inside a specific folder (\\\"somefolder\\\") with the PHP language in Visual Studio Code, leveraging glob patterns in the settings file. Useful for projects using non-standard file naming where all files in a folder should be mapped to a language. It requires understanding glob syntax and the VS Code settings system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files.associations\": {\n        \"**/somefolder/*.*\": \"php\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Suggestion Status Bar Visibility\nDESCRIPTION: Specifies the VS Code setting `terminal.integrated.suggest.showStatusBar` which controls the visibility of the status bar element within the terminal suggestion widget, providing contextual actions and information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.showStatusBar)\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Opening VS Code\nDESCRIPTION: Terminal commands to create a new project directory called 'helloworld', navigate into it, and open VS Code in that location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cmake-quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir helloworld\ncd helloworld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Using DocumentFilter with Pattern for Test Folders in VS Code Extension\nDESCRIPTION: This code shows how to use a DocumentFilter with a pattern to register a HoverProvider for documents inside 'test' folders only.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/document-selector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerHoverProvider(\n  { pattern: '**/test/**' },\n  {\n    provideHover(doc: vscode.TextDocument) {\n      return new vscode.Hover('For documents inside `test`-folders only');\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Sysroot Using Crosstool-ng Command Line - Shell\nDESCRIPTION: This shell script sequence demonstrates how to generate a sysroot using Crosstool-ng. The steps involve creating and changing into a toolchain directory, copying a configuration file to be used by Crosstool-ng, and invoking the build process. A key parameter is the path to the configuration file, defining target architecture and library versions (such as glibc 2.28). This automation is essential for producing the environment libraries required by VS Code Server on unsupported Linux distributions, and should be run in an environment with Crosstool-ng installed. The script assumes proper permissions for directory manipulation and file copying.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir toolchain-dir\\ncd toolchain-dir\\ncp <path-to-config-file> > .config\\nct-ng build\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Switch Window Keybindings in Visual Studio Code\nDESCRIPTION: JSON keybindings configuration to enable quick switching between open windows using Ctrl+R. This allows cycling through windows while holding Ctrl and pressing R.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"key\": \"ctrl+r\",\n        \"command\": \"workbench.action.quickSwitchWindow\"\n    },\n    {\n        \"key\": \"ctrl+r\",\n        \"command\": \"workbench.action.quickOpenNavigateNext\",\n        \"when\": \"inWindowsPicker\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Color Decorators Limit Setting\nDESCRIPTION: Setting to configure the maximum number of color decorators shown in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"editor.colorDecoratorsLimit\"\n```\n\n----------------------------------------\n\nTITLE: Creating Linux App Service Plan\nDESCRIPTION: Azure CLI command to create an App Service plan with Linux workers for hosting containerized applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz appservice plan create -n nina-demo-plan -g nina-demo --is-linux\n```\n\n----------------------------------------\n\nTITLE: Contributing Custom Views to Source Control in VS Code Extension Package.json\nDESCRIPTION: JSON configuration for extension authors to add custom views to the Source Control Management (SCM) container in VS Code's Activity Bar. This example adds a Git Compare view to the Source Control section.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"contributes\": {\n    \"views\": {\n        \"scm\": [\n            {\n                \"id\": \"git-compare\",\n                \"name\": \"Compare\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman and VS Code Extension Generator\nDESCRIPTION: This bash command installs Yeoman and the VS Code extension generator globally using npm, which are prerequisites for creating a new theme extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/color-theme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yo generator-code\nyo code\n```\n\n----------------------------------------\n\nTITLE: Searching for a Command in a Text File - PowerShell\nDESCRIPTION: Searches for occurrences of the string 'dir' in any .txt file in the current directory using PowerShell cmdlets. Get-ChildItem retrieves .txt files, which are then piped to Select-String for matching lines. This outputs file names and matched lines with context. Dependencies: PowerShell installed. Inputs: pattern ('dir'), search path (current directory). Outputs: console matches including file and line details. Handles multiple files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem *.txt | Select-String \"dir\"\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Chat Mode to Experimental Lightweight UI\nDESCRIPTION: Configuration setting to enable the experimental lightweight UI mode for inline chat, which provides a smoother streaming experience and renders diffs only on demand.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"inlineChat.mode\": \"live3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Django App Configuration\nDESCRIPTION: Adding the 'hello' app to INSTALLED_APPS in Django settings to enable template handling\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n'hello',\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Right-Click Behavior in VS Code\nDESCRIPTION: Configuration snippet for setting the right-click behavior in VS Code's integrated terminal to always paste. This setting is added to the user settings.json file to customize terminal interaction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.rightClickBehavior\": \"paste\"\n```\n\n----------------------------------------\n\nTITLE: Setting IntelliSense Cache Size Limit in VS Code Settings (JSON)\nDESCRIPTION: This setting defines an approximate size limit (in bytes) for the IntelliSense cache (`ipch` folder). The extension attempts to keep the cache size close to this limit. Replace `<number>` with the desired maximum size in bytes. This setting applies to the cache location, whether default or overridden by `C_Cpp.intelliSenseCachePath`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"C_Cpp.intelliSenseCacheSize\": <number>\n```\n\n----------------------------------------\n\nTITLE: Downloading Proposed API Type Definitions using Shell\nDESCRIPTION: This shell command uses npx to run the `@vscode/dts` tool in development mode. It downloads the necessary TypeScript definition (`.d.ts`) files for any proposed APIs listed in the `package.json#enabledApiProposals` into the extension's workspace, enabling development against these APIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vscode/dts dev\n```\n\n----------------------------------------\n\nTITLE: Categorizing Extension as Snippets in package.json\nDESCRIPTION: This configuration adds the Snippets category to your extension's package.json, which helps users discover it when searching for snippet extensions in the marketplace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/snippet-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"categories\": [\"Snippets\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Terminal Shell Integration Activation in VS Code Settings\nDESCRIPTION: This setting (`python.terminal.shellIntegration.enabled`) controls the activation of enhanced shell integration features for Python terminals within VS Code. Modifications to this setting now apply dynamically to newly created terminals without requiring a full VS Code reload.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nsetting(python.terminal.shellIntegration.enabled)\n```\n\n----------------------------------------\n\nTITLE: Resource Label Formatter Proposed API in TypeScript\nDESCRIPTION: TypeScript interface definition for the proposed ResourceLabelFormatter API that allows extensions to customize how URIs are displayed in the VS Code workbench.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResourceLabelFormatter {\n  scheme: string;\n  authority?: string;\n  formatting: ResourceLabelFormatting;\n}\n\nexport interface ResourceLabelFormatting {\n  label: string; // myLabel:/${path}\n  separator: '/' | '\\\\' | '';\n  tildify?: boolean;\n  normalizeDriveLetter?: boolean;\n  workspaceSuffix?: string;\n  authorityPrefix?: string;\n}\n\nexport namespace workspace {\n  export function registerResourceLabelFormatter(formatter: ResourceLabelFormatter): Disposable;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Collection Description in TypeScript\nDESCRIPTION: Example of setting a description for environment variable collection in VS Code extensions, which appears in terminal tab hover tooltips.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.environmentVariableCollection.description = 'Enables a Git authentication provider';\n```\n\n----------------------------------------\n\nTITLE: Configuring List Type Navigation Mode in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set up a custom keybinding to trigger type navigation mode in lists using the '/' key. It uses the 'list.toggleKeyboardNavigation' command and is active when a list has focus.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"/\",\n  \"command\": \"list.toggleKeyboardNavigation\",\n  \"when\": \"listFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Build Task Default Status in tasks.json (JSON)\nDESCRIPTION: These JSON snippets illustrate how to modify the 'group' property within a task definition in 'tasks.json' to control whether it's the default build task invoked by the VS Code play button. The first snippet shows the structure for marking a task as the default build task using an object with 'kind' and 'isDefault: true'. The second snippet shows how to change it to a non-default task by replacing the object with the string 'build'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n    },\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": \"build\",\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Terminal Replies for Clink in VS Code (JSON)\nDESCRIPTION: This JSON configuration shows how to disable automatic terminal replies for Clink in VS Code to avoid conflicts with Clink's similar feature. It sets the reply for the batch job termination prompt to null.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.autoReplies\": {\n  \"Terminate batch job (Y/N)\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Terminal Texture Caching in JSON\nDESCRIPTION: This JSON snippet demonstrates how to enable the experimental dynamic texture atlas caching strategy for the integrated terminal in VS Code settings (`settings.json`). Setting `terminal.integrated.experimentalTextureCachingStrategy` to `\"dynamic\"` opts into this feature, which aims to improve terminal rendering performance and reduce startup time by caching character glyphs dynamically as needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.experimentalTextureCachingStrategy\": \"dynamic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onConfigurationChanged in TypeScript Server Plugins\nDESCRIPTION: This code demonstrates how to implement the onConfigurationChanged method in a TypeScript server plugin. This method receives configuration data sent from VS Code extensions, allowing dynamic configuration of the plugin's behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// In your TypeScript plugin\n\nimport * as ts_module from 'typescript/lib/tsserverlibrary';\n\nexport = function init({ typescript }: { typescript: typeof ts_module }) {\n    return {\n        create(info: ts.server.PluginCreateInfo) {\n            // Create new language service\n        },\n        onConfigurationChanged(config: any) {\n            // Receive configuration changes sent from VS Code\n        },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: VS Code Snippet Date Variables\nDESCRIPTION: New snippet variables for inserting current date and time in various formats, including day and month names in both full and short forms.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* ${CURRENT_DAY_NAME} - The name of the day ('Monday').\n* ${CURRENT_DAY_NAME_SHORT} - The short name of the day ('Mon').\n* ${CURRENT_MONTH_NAME} - The full name of the month ('July').\n* ${CURRENT_MONTH_NAME_SHORT} - The short name of the month ('Jul').\n```\n\n----------------------------------------\n\nTITLE: Defining CustomListCode Group for Full Collection Traversal Logic\nDESCRIPTION: XML schema group definition that specifies all allowed code structures in collection traversal logic, including Item elements. This provides the full range of control and visualization capabilities for custom collections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<xs:group name=\"CustomListCode\">\n    <xs:choice>\n      <!-- For the sake of simplifying implementation, I am not implementing declaring variables inside of an 'loop' block\n          until I encounter a scenario that requires it.-->\n      <!--<xs:element name=\"Variable\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"VariableType\"></xs:element>-->\n      <xs:element name=\"Loop\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"LoopType\"></xs:element>\n      <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element name=\"If\" minOccurs=\"1\" maxOccurs=\"1\" type=\"IfType\"></xs:element>\n        <xs:element name=\"Elseif\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"IfType\"></xs:element>\n        <xs:element name=\"Else\" minOccurs=\"0\" maxOccurs=\"1\" type=\"ElseType\"></xs:element>\n      </xs:sequence>\n      <xs:element name=\"Exec\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"ExecType\"></xs:element>\n      <xs:element name=\"Break\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"BreakType\"></xs:element>\n      <xs:element name=\"Item\" minOccurs=\"0\" maxOccurs=\"unbounded\" type=\"CustomListItemType\"></xs:element>\n    </xs:choice>\n  </xs:group>\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Thinking Tool in Agent Mode\nDESCRIPTION: Setting to enable the experimental thinking tool in agent mode, which allows models to process information between tool calls for improved performance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"github.copilot.chat.agent.thinkingTool:true\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Editor Theme Color Properties - Lightbulb and Brackets\nDESCRIPTION: Color configuration properties for editor lightbulb actions and bracket matching/highlighting features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\neditorLightBulb.foreground\neditorLightBulbAutoFix.foreground\neditorLightBulbAi.foreground\neditorBracketMatch.background\neditorBracketMatch.border\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple TypeScript Web App Source (helloweb.ts) - TypeScript\nDESCRIPTION: This code initializes a string variable and assigns its value to the innerHTML of the document body, displaying a message on the web page. No external dependencies are required beyond the browser and built TypeScript (compiled to JS). The main parameter is the 'message' string, and the output is the visible display of 'Hello Web' in the HTML body.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet message : string = \"Hello Web\";\\ndocument.body.innerHTML = message;\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Named Volume with Non-Root User in devcontainer.json (JSON)\nDESCRIPTION: This `devcontainer.json` configuration builds upon mounting `node_modules` to a named volume. It adds a `postCreateCommand` to change the ownership of the mounted `node_modules` directory to the specified `remoteUser` (`node` in this case). This is necessary because volumes might be mounted as root by default, preventing the non-root user from writing to them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remoteUser\": \"node\",\n\"mounts\": [\n    \"source=${localWorkspaceFolderBasename}-node_modules,target=${containerWorkspaceFolder}/node_modules,type=volume\"\n],\n\"postCreateCommand\": \"sudo chown node node_modules\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Markdown File Destination with RegEx Transform\nDESCRIPTION: JSON configuration demonstrating how to use regular expressions to transform variables when determining media file destinations in Markdown documents.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/markdown.md#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"markdown.copyFiles.destination\": {\n  \"/docs/**/*\": \"images/${documentBaseName/(.).*/$1/}/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Prompt for GitHub Copilot in TypeScript\nDESCRIPTION: This code defines a prompt for the GitHub Copilot model to generate code annotations. It instructs the model on how to evaluate code and format suggestions as JSON objects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst ANNOTATION_PROMPT = `You are a code tutor who helps students learn how to write better code. Your job is to evaluate a block of code that the user gives you and then annotate any lines that could be improved with a brief suggestion and the reason why you are making that suggestion. Only make suggestions when you feel the severity is enough that it will impact the readability and maintainability of the code. Be friendly with your suggestions and remember that these are students so they need gentle guidance. Format each suggestion as a single JSON object. It is not necessary to wrap your response in triple backticks. Here is an example of what your response should look like:\n\n{ \"line\": 1, \"suggestion\": \"I think you should use a for loop instead of a while loop. A for loop is more concise and easier to read.\" }{ \"line\": 12, \"suggestion\": \"I think you should use a for loop instead of a while loop. A for loop is more concise and easier to read.\" }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash History Persistence for Root User in Dockerfile - Docker - bash\nDESCRIPTION: This Dockerfile RUN command appends export statements to /root/.bashrc so that the bash history is written to /commandhistory/.bash_history and updates after each command. No additional dependencies are required, but the /commandhistory directory should be mounted for persistence. Key parameters include PROMPT_COMMAND (ensuring history is saved on each prompt) and HISTFILE (specifying the persistent location). The expected outcome is that bash history is preserved across container restarts for root users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/persist-bash-history.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nRUN SNIPPET=\"export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history\" \\\n    && echo \"$SNIPPET\" >> \"/root/.bashrc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Syntax Profiles for JSX\nDESCRIPTION: Configuration for customizing Emmet abbreviation expansion in JSX/TSX files, specifically for class attributes and value prefixes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.syntaxProfiles\": {\n    \"jsx\": {\n        \"markup.attributes\": {\n            \"class*\": \"className\",\n        },\n        \"markup.valuePrefix\": {\n            \"class*\": \"myStyles\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Basic Null Checking\nDESCRIPTION: Updated version of getStatus function with basic null checking and warning documentation, showing an intermediate attempt at fixing null-related issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get the status of a user\n *\n * Don't call this with undefined or null!\n */\nexport async function getStatus(user: User): Promise<string> {\n    if (!user) {\n        return '';\n    }\n    const id = user.id;\n    const result = await fetch(`/api/v0/${id}/status`);\n    const json = await result.json();\n    return json.status;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createOutputChannel API for Log Channels in TypeScript\nDESCRIPTION: This TypeScript snippet shows the signature of the `vscode.window.createOutputChannel` function when called with the `options` parameter `{ readonly log: true }`. This specific overload creates and returns a `LogOutputChannel`, which is specialized for logging purposes, distinct from standard output channels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n/**\n * Creates a new {@link LogOutputChannel log output channel} with the given name.\n *\n * @param name Human-readable string which will be used to represent the channel in the UI.\n * @param options Options for the log output channel.\n */\nexport function createOutputChannel(name: string, options: { readonly log: true }): LogOutputChannel;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Task with Auto-run on Folder Open\nDESCRIPTION: Task configuration example showing how to configure a task to run automatically when a folder is opened using the runOn property. The example is for a TypeScript null check task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"npm\",\n    \"script\": \"strict-null-check-watch\",\n    \"label\": \"TS - Strict Null Checks\",\n    \"isBackground\": true,\n    \"problemMatcher\": {\n        \"base\": \"$tsc-watch\",\n        \"owner\": \"typescript-strict-null\",\n        \"applyTo\": \"allDocuments\"\n    },\n    \"runOptions\": {\n        \"runOn\": \"folderOpen\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tokens as HTML Spans\nDESCRIPTION: This HTML snippet demonstrates how the approximated tokens are rendered as span elements with appropriate CSS classes for syntax highlighting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"token meta function js storage type\">function</span>\n<span class=\"token meta function js\">&nbsp;</span>\n<span class=\"token meta function js definition entity name\">f1</span>\n<span class=\"token meta function js definition parameters punctuation\">()</span>\n<span class=\"token meta function js\">&nbsp;</span>\n<span class=\"token meta function js definition punctuation block\">{</span>\n```\n\n----------------------------------------\n\nTITLE: Auto File Open Setting\nDESCRIPTION: Setting to control whether files automatically open when dragged and dropped into the explorer. Default is true but can be disabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nexplorer.autoOpenDroppedFile\n```\n\n----------------------------------------\n\nTITLE: Custom Shell Configuration for Tasks\nDESCRIPTION: Configuration for specifying a custom shell (cmd.exe) for VS Code automation and tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n    \"terminal.integrated.automationProfile.windows\": {\n        \"path\": \"cmd.exe\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Auto Fix When Source FixAll is Enabled in VS Code - JSON\nDESCRIPTION: This JSON snippet shows how to enable all code actions' auto-fix features in VS Code, except for ESLint. By setting both \"source.fixAll\": true and \"source.fixAll.eslint\": false, you override ESLint's specific fixes, preventing them from running on save while still enabling all other extension-based fixes. Add this to your settings.json for selective control of auto-fix providers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"editor.codeActionsOnSave\\\": {\\n        \\\"source.fixAll\\\": true,\\n        \\\"source.fixAll.eslint\\\": false\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Copilot Quick Question Feature in VS Code\nDESCRIPTION: This configuration enables the experimental Quick Question feature for GitHub Copilot, which allows users to ask programming questions without leaving their current context. The feature can be toggled with a keyboard shortcut.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"chat.experimental.quickQuestion.enable\": true\n```\n\n----------------------------------------\n\nTITLE: Codebase-Specific Question using #codebase\nDESCRIPTION: Demonstrates how to ask a question specific to the current workspace by including the `#codebase` chat variable. This instructs Copilot to consider the entire codebase context when generating the response.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`how to implement authentication in this #codebase`\n```\n\n----------------------------------------\n\nTITLE: Custom File Count Client Request in TypeScript\nDESCRIPTION: TypeScript code for sending a custom file count request to the WebAssembly LSP server and displaying the result.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst folder = workspace.workspaceFolders![0].uri;\nconst result = await client.sendRequest(CountFilesRequest, { folder: client.code2ProtocolConverter.asUri(folder) });\nwindow.showInformationMessage(`The workspace contains ${result} files.`);\n```\n\n----------------------------------------\n\nTITLE: Disabling UID/GID Update in devcontainer.json\nDESCRIPTION: Configuration option to disable automatic updating of UID and GID for the VS Code Server user in containers on Linux. This allows for more control over user permissions in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_41.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"updateRemoteUserUID\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced React Component with Controller Communication\nDESCRIPTION: Updated React component that uses the controller's comment loading functionality with proper availability checking.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst canLoadComments = globalThis.githubIssueCommentProvider !== undefined;\nconst Issue: FunctionComponent<{ issue: GithubIssue }> = ({ issue }) => {\n  const [comments, setComments] = useState([]);\n  const loadComments = () =>\n    globalThis.githubIssueCommentProvider.loadComments(issue.id, setComments);\n\n  return (\n    <div key={issue.number}>\n      <h2>\n        {issue.title}\n        (<a href={`https://github.com/${issue.repo}/issues/${issue.number}`}>#{issue.number}</a>)\n      </h2>\n      <img src={issue.user.avatar_url} style={{ float: 'left', width: 32, borderRadius: '50%', marginRight: 20 }} />\n      <i>@{issue.user.login}</i> Opened: <div style=\"margin-top: 10px\">{issue.body}</div>\n      {canLoadComments && <button onClick={loadComments}>Load Comments</button>}\n      {comments.map(comment => <div>{comment.text}</div>)}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Localized Minimal Translation Strings for Language Packs (TypeScript)\nDESCRIPTION: Offers a TypeScript object literal structure for translating minimal required UI strings in a language pack extension. Utilizes the 'localize' function for internationalization. Required for proper language pack offering in the VS Code Marketplace and to localize in-product prompts. The keys represent critical UI operations such as searching, installing, and restarting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n   showLanguagePackExtensions: localize('showLanguagePackExtensions', \"Search language packs in the Marketplace to change the display language to {0}.\"),\n   searchMarketplace: localize('searchMarketplace', \"Search Marketplace\"),\n   installAndRestartMessage: localize('installAndRestartMessage', \"Install language pack to change the display language to {0}.\"),\n   installAndRestart: localize('installAndRestart', \"Install and Restart\")\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Repository Structure\nDESCRIPTION: A file listing of different VS Code repositories where contributions were made, including links to pull requests and contributor information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n* bitshiftza (@bitshiftza): Fix for issue #39458 [PR #52506]\n* [@brentwang23]: Implement word part move and delete for issue #46203 [PR #48023]\n* Howard Chen (@chenhowa): Await git.pullFrom and git.pushTo to ensure any failures display an … [PR #49167]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Development Mode Debugging\nDESCRIPTION: JSON configuration for debugging Flask applications in development mode, enabling Flask's built-in development server with full debug capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Flask (development mode)\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"flask\",\n    \"env\": {\n        \"FLASK_APP\": \"app.py\",\n        \"FLASK_ENV\": \"development\"\n    },\n    \"args\": [\n        \"run\"\n    ],\n    \"jinja\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sideloading an Office Add-in for Testing\nDESCRIPTION: Command to build and sideload an Office Add-in using npm. This will start the local development server and open Office with the add-in loaded for testing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/other/office.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Image Paste Settings\nDESCRIPTION: Settings to enable pasting screenshots or image files into Markdown cells in Jupyter notebooks. Currently supports PNG format only.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ipynb.experimental.pasteImages.enabled\": true\n\"editor.experimental.pasteActions.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Sass Task Configuration\nDESCRIPTION: VS Code tasks.json configuration for compiling Sass files to CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Sass Compile\",\n            \"type\": \"shell\",\n            \"command\": \"sass styles.scss styles.css\",\n            \"group\": \"build\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Out-of-Box Setup in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable the experimental feature for showing functional chat experiences out of the box in Visual Studio Code. This includes the Chat view, editor/terminal inline chat, and quick chat.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"chat.setupFromDialog\": true\n```\n\n----------------------------------------\n\nTITLE: Creating Webview Text Editor Insets - Proposed VS Code API - TypeScript\nDESCRIPTION: Shows usage of the proposed createWebviewTextEditorInset API, which allows extension authors to inject webview insets into a text editor at a given line with specified height. This API expects parameters for the editor reference, line number, and height, plus optional webview options. Insets are disposed automatically when the corresponding editor closes. Requires the proposed API enabled and is for advanced scenarios such as custom in-editor visualization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createWebviewTextEditorInset(editor: TextEditor, line: number, height: number, options?: WebviewOptions): WebviewEditorInset;\n```\n\n----------------------------------------\n\nTITLE: Setting a Non-Root User in Docker Compose\nDESCRIPTION: YAML configuration that specifies which user all processes should run as in a Docker Compose service. This changes the default user for the entire container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nuser: your-user-name-here\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Error and Warning Colors in VS Code Settings - JSON\nDESCRIPTION: This JSON snippet demonstrates how to override default colors for error and warning indicators in Visual Studio Code by editing the 'workbench.colorCustomizations' property within the user settings.json file. Dependencies include having VS Code installed and access to the user settings, and no additional packages are required. The keys 'editorError.foreground' and 'editorWarning.foreground' control the color of the wavy lines for errors and warnings, respectively, and users must select appropriate hex color codes; the expected input is a dictionary, and the output is a visible change in the editor UI colors. This setting is limited to customizing color properties and does not affect underlying validation or error detection behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/accessibility/accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workbench.colorCustomizations\": {\n        \"editorError.foreground\": \"#ffef0f\",\n        \"editorWarning.foreground\": \"#3777ff\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Occurrences Highlight Delay\nDESCRIPTION: Adjusts the delay for highlighting occurrences of selected text within the editor using the `editor.occurrencesHighlightDelay` setting. The default is now 0ms for increased responsiveness.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(editor.occurrencesHighlightDelay)` setting.\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Command to Toggle Focus in Terminal Suggestion Details\nDESCRIPTION: References the VS Code command ID `workbench.action.terminal.suggestToggleDetailsFocus`, assignable to a keyboard shortcut (`kb(...)`), used to toggle keyboard focus between the terminal input and the details pane of the suggestion widget.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.terminal.suggestToggleDetailsFocus)\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server for Extension Testing (Bash)\nDESCRIPTION: Command to start a local HTTPS server using npx serve, allowing the extension to be hosted securely for testing in vscode.dev.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx serve --cors -l 5000 --ssl-cert $HOME/certs/localhost.pem --ssl-key $HOME/certs/localhost-key.pem\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Path for VS Code Reusable Prompts\nDESCRIPTION: Illustrates the object notation `{ \"/path/to/folder\": boolean }` used within the `chat.promptFiles` setting to specify a custom folder path for reusable prompt files (`*.prompt.md`) and enable/disable it, overriding the default location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{ \"/path/to/folder\": boolean }\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Terminal Shell Type (Proposed API)\nDESCRIPTION: References the proposed VS Code API definition (`vscode.proposed.terminalShellType.d.ts`) that enables extensions to programmatically access information about the currently active shell type (e.g., bash, zsh, powershell) within a terminal instance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\naccess currently active shell type information\n```\n\n----------------------------------------\n\nTITLE: Removing Default Build Task Marker in tasks.json\nDESCRIPTION: Shows the alternative JSON fragment to replace the default task marker in `tasks.json`. Changing the `group` property to the string `\"build\"` removes the task's default status.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": \"build\",\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Command Reference\nDESCRIPTION: Reference to VS Code's keyboard shortcut command for opening the Command Palette.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-build.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.showCommands)\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-Recursive Browse Paths (c_cpp_properties.json Value)\nDESCRIPTION: Shows the use of the `${workspaceFolder}/*` pattern, typically used as a string value within the `browse.path` array property of `c_cpp_properties.json`. This tells the Tag Parser (browse engine) to search for headers non-recursively only in the immediate workspace folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n${workspaceFolder}/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Commands for Virtual Documents in package.json\nDESCRIPTION: This JSON snippet shows how to declare editor commands for virtual documents in the package.json file. It adds a command to the editor title menu with a condition that it only appears for documents with a specific scheme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-documents.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"menus\": {\n  \"editor/title\": [\n    {\n      \"command\": \"cowsay.backwards\",\n      \"group\": \"navigation\",\n      \"when\": \"resourceScheme == cowsay\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BEM Filter Profile\nDESCRIPTION: JSON setting to apply BEM filter globally for HTML files using syntax profiles\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.syntaxProfiles\": {\n  \"html\": {\n    \"filters\": \"bem\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Workflow YAML Configuration Examples\nDESCRIPTION: References to different types of starter workflow templates available for AKS deployments, including basic deployment, Helm, Kompose, and Kustomize configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/aksextensions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Workflow template references:\n- azure-kubernetes-service.yml\n- azure-kubernetes-service-helm.yml\n- azure-kubernetes-service-kompose.yml\n- azure-kubernetes-service-kustomize.yml\n```\n\n----------------------------------------\n\nTITLE: Creating New Rust Project\nDESCRIPTION: Commands to create and open a new Rust project using Cargo.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo new hello_world\ncd hello_world\ncode .\n```\n\n----------------------------------------\n\nTITLE: Generating a Dedicated SSH Key for Remote Development (PowerShell)\nDESCRIPTION: Creates a dedicated Ed25519 SSH key with a custom filename using ssh-keygen under PowerShell (Windows environments). Used to separate VS Code Remote Development credentials from more general SSH usage, allowing for fine-grained access control and revocation if needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nssh-keygen -t ed25519 -f \"$HOME\\.ssh\\id_ed25519-remote-ssh\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Fix on Save for ESLint Only in VS Code - JSON\nDESCRIPTION: This snippet restricts Auto Fix on Save to only ESLint in Visual Studio Code. By setting \"source.fixAll.eslint\" to true within the \"editor.codeActionsOnSave\" configuration in your settings.json file, VS Code will automatically apply all available ESLint fixes when you save a file. Other code action providers' fixes will not run unless explicitly enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"editor.codeActionsOnSave\\\": {\\n        \\\"source.fixAll.eslint\\\": true\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Overridable Language Settings in Package JSON - VS Code Extension Manifest - JSON\nDESCRIPTION: Defines a language-overridable configuration setting for a VS Code extension by contributing a property with scope 'language-overridable' in 'package.json'. This JSON snippet is intended for use in an extension manifest and requires VS Code API support for reading and updating configuration data by language. Key parameters include the 'sample.languageSetting' property of type boolean, and the configuration becomes overridable per language context. No runtime code is involved; applies solely to extension metadata.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"contributes\": {\n        \"configuration\": {\n            \"title\": \"sample\",\n            \"properties\": {\n                \"sample.languageSetting\": {\n                    \"type\": \"boolean\",\n                    \"scope\": \"language-overridable\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Semantic Token Colors Globally in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to globally customize the appearance of a specific C++ semantic token (`templateType`) in VS Code settings. It uses the `editor.semanticTokenColorCustomizations` setting to define a rule that sets the foreground color to red (`#ff0000`) and the font style to italic, bold, and underlined for all `templateType` tokens, regardless of the active theme. This configuration is placed within the `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/colorization-cpp.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.semanticTokenColorCustomizations\": {\n        \"rules\": {\n            \"templateType\": {\n                \"foreground\": \"#ff0000\",\n                \"fontStyle\": \"italic bold underline\"\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting onSearch Activation Event for VS Code Extension\nDESCRIPTION: This snippet demonstrates how to specify the onSearch activation event in a VS Code extension's manifest. It's emitted when a search is started in a folder with the given scheme (here, 'file').\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onSearch:file\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Adapter Executable Provider in TypeScript\nDESCRIPTION: New method on DebugConfigurationProvider to return the path and arguments for a debug adapter executable, replacing the previous command-based mechanism.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndebugAdapterExecutable\n```\n\n----------------------------------------\n\nTITLE: Setting Conda Executable Path in VS Code Python Settings\nDESCRIPTION: Specifies the path to the `conda` executable for the Python extension. The default value `\"conda\"` assumes the executable is available in the system's PATH environment variable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"conda\"\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Debug Console in TypeScript/JavaScript\nDESCRIPTION: Example of using the Debug Console API to append text to the Debug Console. The API provides append and appendLine methods for output to the active debug console.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Append text to Debug Console\nvscode.debug.activeDebugConsole.append(\"Text without line break\");\n\n// Append text with line break\nvscode.debug.activeDebugConsole.appendLine(\"Text with line break\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Java 22 Preview Features\nDESCRIPTION: Groovy configuration for Gradle to enable Java 22 preview features. This snippet sets the source compatibility to Java 22 and adds the '--enable-preview' flag to both compilation and test tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nsourceCompatibility = 22\ntasks.withType(JavaCompile) {\n    options.compilerArgs += '--enable-preview'\n}\ntasks.withType(Test) {\n    jvmArgs += \"--enable-preview\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Webview Context Menus and Commands in JSON\nDESCRIPTION: Defines custom context menu items for a specific webview (`catCoding`) within the `package.json` `contributes` section. It uses the `webview/context` menu contribution point, linking commands (`catCoding.yarn`, `catCoding.insertLion`) to menu items and utilizing `when` clauses based on `webviewId` and `webviewSection` for conditional display. Corresponding command definitions with titles and categories are also included.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"menus\": {\n    \"webview/context\": [\n      {\n        \"command\": \"catCoding.yarn\",\n        \"when\": \"webviewId == 'catCoding'\"\n      },\n      {\n        \"command\": \"catCoding.insertLion\",\n        \"when\": \"webviewId == 'catCoding' && webviewSection == 'editor'\"\n      }\n    ]\n  },\n  \"commands\": [\n    {\n      \"command\": \"catCoding.yarn\",\n      \"title\": \"Yarn 🧶\",\n      \"category\": \"Cat Coding\"\n    },\n    {\n      \"command\": \"catCoding.insertLion\",\n      \"title\": \"Insert 🦁\",\n      \"category\": \"Cat Coding\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Keybinding in keybindings.json\nDESCRIPTION: Demonstrates how to use a when clause to conditionally enable a debug start keybinding based on debugger availability and state.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"f5\",  \"command\": \"workbench.action.debug.start\",\n                   \"when\": \"debuggersAvailable && debugState != 'initializing'\" }\n```\n\n----------------------------------------\n\nTITLE: Disabling Ruby LSP Inlay Hints\nDESCRIPTION: Configuration to disable inlay hints feature specifically for Ruby LSP\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"rubyLsp.enabledFeatures\": {\n    \"inlayHint\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File-Level Comments via Comments API\nDESCRIPTION: Explains that within the VS Code Comments API, setting the `range` property of a comment object to `undefined` designates it as a file-level comment, not attached to any specific line or range in the document.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nset the `range` of the comment to `undefined`\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Mount Consistency in devcontainer.json\nDESCRIPTION: Sets the consistency for the default mount point to 'cached' to improve file performance on macOS. This can be configured in the devcontainer.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_38.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaceMountConsistency\": \"cached\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing FileCoverage in TypeScript\nDESCRIPTION: Shows how to extend the FileCoverage class to include additional coverage data and implement custom loading behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyFileCoverage extends vscode.FileCoverage {\n  // ...\n}\n\nprofile.loadDetailedCoverage = async (testRun, fileCoverage, token) => {\n  return fileCoverage instanceof MyFileCoverage ? await fileCoverage.load() : [];\n}\n\nasync function runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  // ...\n\n  for await (const file of readCoverageOutput()) {\n    // 'file' is MyFileCoverage:\n    run.addCoverage(file);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extensions Sync Configuration\nDESCRIPTION: JSON setting to specify ignored extensions for Settings Sync.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nsetting(settingsSync.ignoredExtensions)\n```\n\n----------------------------------------\n\nTITLE: Contributing Problem Matchers in VS Code Extensions\nDESCRIPTION: TypeScript configuration showing how to contribute problem matchers for the gcc compiler in a VS Code extension's package.json, including pattern matching for error detection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"contributes\": {\n    \"problemMatchers\": [\n      {\n          \"name\": \"gcc\",\n          \"owner\": \"cpp\",\n          \"fileLocation\": [\"relative\", \"${workspaceRoot}\"],\n          \"pattern\": {\n              \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n              \"file\": 1,\n              \"line\": 2,\n              \"column\": 3,\n              \"severity\": 4,\n              \"message\": 5\n          }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayStringType Complex Type in XML Schema\nDESCRIPTION: Defines the DisplayStringType complex type, which specifies the string to be shown as the value of visualized objects. It includes attributes for legacy add-ins and encoding options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"DisplayStringType\">\n  <xs:annotation>\n    <xs:documentation>Specifies the string to be shown as the value of objects of the visualized type. It accepts arbitrary strings mixed with expressions. Everything inside curly braces (for example, { and }) is interpreted as an expression and gets evaluated. To escape a curly brace, you can type two curly braces (for example, \\{{ or }}).</xs:documentation>\n  </xs:annotation>\n  <xs:simpleContent>\n    <xs:extension base=\"xs:string\">\n      <xs:attributeGroup ref=\"CommonAttributes\" />\n      <xs:attribute name=\"LegacyAddin\" type=\"StringType\" use=\"optional\">\n        <xs:annotation>\n          <xs:documentation>If a legacy add-in exists, specifies the dll of the legacy addin. If a full path isn't specified, Visual Studio will look in the visualizer directory next to the .natvis file that specified the add-in. A regular display string is still allowed in conjunction with an add-in, and will be used as a fallback if the add-in dll cannot be loaded.</xs:documentation>\n        </xs:annotation>\n      </xs:attribute>\n      <xs:attribute name=\"Export\" type=\"StringType\" use=\"optional\">\n        <xs:annotation>\n          <xs:documentation>If a legacy add-in exists, specifies the name of the export for the legacy add-in implementation. This attribute is valid only if 'LegacyAddin' is also specified.</xs:documentation>\n        </xs:annotation>\n      </xs:attribute>\n      <xs:attribute name=\"Encoding\" type=\"EncodingType\" use=\"optional\">\n        <xs:annotation>\n          <xs:documentation>Specifies the encoding of the string returned by the legacy addin. Default is Utf8. This attribute is valid only if 'LegacyAddin' is also specified.\n          </xs:documentation>\n        </xs:annotation>\n      </xs:attribute>\n    </xs:extension>\n  </xs:simpleContent>\n</xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Blocks in VS Code Chat\nDESCRIPTION: Shows how to create interactive code blocks with IntelliSense and formatting support using Markdown code block syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Render a code block that enables users to interact with\nstream.markdown('```bash\\n');\nstream.markdown('```ls -l\\n');\nstream.markdown('```');\n```\n\n----------------------------------------\n\nTITLE: LSIF Folding Range Example\nDESCRIPTION: LSIF graph data representation for folding ranges, showing document vertices and folding range results.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// a vertex representing the document\n{ id: 1, type: \"vertex\", label: \"document\", uri: \"file:///Users/username/sample.ts\", languageId: \"typescript\" }\n// a vertex representing the folding result\n{ id: 2, type: \"vertex\", label: \"foldingRangeResult\", result: [ { startLine: 0, startCharacter: 20, endLine: 2, endCharacter: 1 } ] }\n// an edge connecting the folding result to the document.\n{ id: 3, type: \"edge\", label: \"textDocument/foldingRange\", outV: 1, inV: 2 }\n```\n\n----------------------------------------\n\nTITLE: Registering HoverProvider for TypeScript Files in VS Code Extension\nDESCRIPTION: This snippet demonstrates how to register a HoverProvider for TypeScript files using a simple language identifier as the document selector.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/document-selector.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerHoverProvider('typescript', {\n  provideHover(doc: vscode.TextDocument) {\n    return new vscode.Hover('For *all* TypeScript documents.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TestNG Maven Dependencies\nDESCRIPTION: Maven configuration snippet for adding TestNG dependencies to a Java project's pom.xml file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.testng</groupId>\n  <artifactId>testng</artifactId>\n  <version>(YOUR_TESTNG_VERSION)</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Window and Files Settings\nDESCRIPTION: Settings for VS Code window behavior and file handling, including macOS full screen mode and end-of-line character handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"window.nativeFullScreen\": false,\n\"files.eol\": \"auto\",\n\"workbench.editor.highlightModifiedTabs\": true,\n\"workbench.editor.centeredLayoutAutoResize\": true\n```\n\n----------------------------------------\n\nTITLE: Styling Webviews Based on Active Theme ID using CSS\nDESCRIPTION: Provides a CSS example demonstrating how to apply styles to webview content based on the currently active VS Code theme. It uses the new `data-vscode-theme-id` attribute (e.g., `body[data-vscode-theme-id=\"One Dark Pro\"]`) to target specific themes, replacing the deprecated `data-vscode-theme-name` attribute for more reliable theme-specific styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nbody[data-vscode-theme-id=\"One Dark Pro\"] {\n    background: hotpink;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Splitting Between Groups in Visual Studio Code (plaintext)\nDESCRIPTION: This snippet showcases the full set of split-to-group command identifiers added for splitting editors into existing groups (e.g., previous, next, above, below, left, right, first, or last). These are used for command palette invocation, keybinding assignment, or automation, and enable precise editor pane arrangement within the workbench interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nworkbench.action.splitEditorToPreviousGroup\nworkbench.action.splitEditorToNextGroup\nworkbench.action.splitEditorToAboveGroup\nworkbench.action.splitEditorToBelowGroup\nworkbench.action.splitEditorToLeftGroup\nworkbench.action.splitEditorToRightGroup\nworkbench.action.splitEditorToFirstGroup\nworkbench.action.splitEditorToLastGroup\n```\n\n----------------------------------------\n\nTITLE: Configuring curl and wget to Use Default Configuration Files in VS Code SSH\nDESCRIPTION: Setting to enable the use of curlrc and wgetrc configuration files during SSH connection bootstrapping. By default, these files are now ignored for greater consistency.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_92.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.useCurlAndWgetConfigurationFiles\"\n```\n\n----------------------------------------\n\nTITLE: Configuring launchSettingsProfile in launch.json (JSON)\nDESCRIPTION: This snippet shows how to set the 'launchSettingsProfile' field in a launch.json configuration to select a specific profile from launchSettings.json. 'launchSettingsProfile' is used to determine which configuration profile's settings should be used during a debugging session. The input is a JSON object with a string-valued 'launchSettingsProfile' property. The value must match a profile defined in your launchSettings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"launchSettingsProfile\": \"ProfileNameGoesHere\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Terminal Sequence Shortcut in keybindings.json\nDESCRIPTION: Illustrates how to define a custom keyboard shortcut (`Ctrl+U`) in `keybindings.json` that sends a specific sequence of characters to the integrated terminal using the `workbench.action.terminal.sendSequence` command. The `args.text` property contains the sequence, using Unicode escape characters (`\\uXXXX`). In this example, it sends `Ctrl+Left` (`\\u001b[1;5D`) followed by `Backspace` (`\\u007f`). Variable substitution is supported within the sequence.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"key\": \"ctrl+u\",\n  \"command\": \"workbench.action.terminal.sendSequence\",\n  \"args\": {\n    \"text\": \"\\u001b[1;5D\\u007f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Links in InputBox prompts and validation messages with TypeScript\nDESCRIPTION: Example showing how to create clickable links in InputBox prompts and validation messages using markdown-like syntax. Links can target URLs or command IDs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n[link text](link target)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tab Expansion for Emmet in VS Code\nDESCRIPTION: Enables expanding Emmet abbreviations using the Tab key. This is particularly useful for expanding custom tags that don't appear in the suggestion list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.triggerExpansionOnTab\": true\n```\n\n----------------------------------------\n\nTITLE: Building Rust Project\nDESCRIPTION: Command to build a Rust project using Cargo.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local MongoDB Instance\nDESCRIPTION: Default connection string for connecting to a local MongoDB instance running on the default port.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/mongodb.md#2025-04-23_snippet_0\n\nLANGUAGE: mongodb\nCODE:\n```\nmongodb://127.0.0.1:27017\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Link in HTML\nDESCRIPTION: This HTML snippet creates a link styled as a button that allows users to scroll to the top of the page. It includes accessibility attributes like role, title, and aria-label, and uses a span with a class 'icon' likely for styling purposes (e.g., adding an arrow icon via CSS). It's specifically noted as an 'In-product release notes style' and should not be modified without considering related regex in gulpfile.common.js.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Label in Simple File Picker via `openLabel`\nDESCRIPTION: Describes the `openLabel` property within the `OpenDialogOptions` interface of the VS Code extension API. Setting this string property allows an extension to customize the label of the confirmation button (e.g., 'Select', 'Open') in the simple file picker dialog.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nopenLabel` property in the `OpenDialogOptions\n```\n\n----------------------------------------\n\nTITLE: Example Chat Variables\nDESCRIPTION: Provides examples of chat variables like `#file` (to reference a specific file) and `#codebase` (to reference the entire workspace) available in VS Code Copilot Chat.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n`#file`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`#codebase`\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in an .env File (Bash/Env)\nDESCRIPTION: Demonstrates the format of an environment variable definition file (`.env`). It includes comments starting with `#`, basic key-value assignments (`MYENVRIONMENTPATH=C:\\\\Users\\\\USERNAME\\\\Project`), and handling variable values containing spaces by enclosing them in double quotes (`SPACED_OUT_PATH=\"C:\\\\This Has Spaces\\\\Project\"`). This file can be referenced using the `envFile` property in a `launch.json` configuration for `cppvsdbg`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/launch-json-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# project.env\n\n# Example environment with key as 'MYENVRIONMENTPATH' and value as C:\\\\Users\\\\USERNAME\\\\Project\nMYENVRIONMENTPATH=C:\\\\Users\\\\USERNAME\\\\Project\n\n# Variables with spaces\nSPACED_OUT_PATH=\"C:\\\\This Has Spaces\\\\Project\"\n```\n\n----------------------------------------\n\nTITLE: Checking VS Code Command-Line Options - Visual Studio Code - Shell\nDESCRIPTION: This snippet illustrates checking the available command-line options for the VS Code CLI by running 'code --help' within a WSL (or standard terminal) environment. Execution outputs a help message listing all parameters and usage patterns for the 'code' command, assisting users in discovering how to interact with VS Code from the terminal. This command requires that the 'code' executable is present in the shell's PATH. No parameters or arguments are required beyond '--help', and the command is safe to run anywhere.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncode --help\n```\n\n----------------------------------------\n\nTITLE: Configuring onWebviewPanel Activation in package.json\nDESCRIPTION: Declaration of onWebviewPanel activation event that activates the extension when VS Code needs to restore a webview with the matching viewType. This example activates for 'catCoding' webviews.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onWebviewPanel:catCoding\"\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Inline Value Provider for Markdown in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates registering an `InlineValuesProvider` for Markdown files using the proposed VS Code extension API. It iterates through lines up to the debugger's stopped location, uses a regular expression (`/local_[ifso]/ig`) to find variable names matching the pattern `local_` followed by `i`, `f`, `s`, or `o` (case-insensitive), and creates `InlineValueVariableLookup` objects. These objects instruct VS Code to look up the variable's value in the VARIABLES view and display it inline (e.g., 'variableName = value') during debugging sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nvscode.languages.registerInlineValuesProvider('markdown', {\n  provideInlineValues(document: TextDocument, viewport: Range, context: InlineValueContext) : ProviderResult<InlineValue[]> {\n    const allValues: InlineValue[] = [];\n    for (let l = 0; l <= context.stoppedLocation.end.line; l++) {\n      const line = document.lineAt(l);\n      var regExp = /local_[ifso]/ig;\t// match variables of the form local_i, local_f, Local_i, LOCAL_S...\n      do {\n        var match = regExp.exec(line.text);\n        if (match) {\n          const varName = match[0];\n          const varRange = new Range(l, match.index, l, match.index + varName.length);\n          // Provide the found variable name to VS Code for lookup in the Variables view\n          allValues.push(new InlineValueVariableLookup(varRange, varName));\n        }\n      } while (match);\n    }\n    return allValues;\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Optimized Window Title for Accessibility\nDESCRIPTION: Sets the `accessibility.windowTitleOptimized` setting to `false` to disable the automatic appending of `activeEditorState` information to the window title when in Screen Reader Optimized mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(accessibility.windowTitleOptimized:false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal .NET Docker Build Task in JSON\nDESCRIPTION: Defines a minimal `docker-build` task in `tasks.json` for a .NET project. It specifies the `netCore` object, which implicitly sets the platform to `netcore`. The `appProject` property within `netCore` is required and points to the project file (e.g., `.csproj`). Default values for `dockerBuild.context`, `dockerBuild.dockerfile`, and `dockerBuild.tag` are inferred based on the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Build Node Image\",\n            \"type\": \"docker-build\",\n            \"netCore\": {\n                \"appProject\": \"${workspaceFolder}/project.csproj\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Server to Listen on Socket (VS Code Settings)\nDESCRIPTION: This setting configures the VS Code Remote Server to use Unix sockets instead of network ports when connecting to Linux or macOS hosts via SSH. This improves security by restricting access to a specific user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_47.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.remoteServerListenOnSocket\": true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Markdown-it Plugin Extension in TypeScript\nDESCRIPTION: Demonstrates how to implement the activate function in a TypeScript extension that extends markdown-it with a plugin. This example shows how to use the emoji plugin.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/markdown-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  return {\n    extendMarkdownIt(md: any) {\n      return md.use(require('markdown-it-emoji'));\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Snippets in JSON Schema\nDESCRIPTION: Schema example demonstrating how to define custom snippets for keyboard shortcuts configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"title\": \"Keyboard shortcuts configuration\",\n    \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"key\"],\n        \"defaultSnippets\": [\n            {\n                \"label\": \"New keyboard shortcut\",\n                \"description\": \"Binds a key to a command for a given state\",\n                \"body\": { \"key\": \"$1\", \"command\": \"$2\", \"when\": \"$3\" }\n            }\n        ],\n        \"properties\": {\n            \"key\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Setting Changes Table\nDESCRIPTION: Configuration table showing new default settings in VS Code 1.13, including minimap, icon theme, indent guides, drag and drop, extension auto-update, and window behavior settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSetting | New Default | Description\n------- | ------- | ----\n`editor.minimap.enabled` | true | Show file minimap (outline view) in the right gutter\n`workbench.iconTheme` | \"vs-seti\" | Use `vs-seti` file icon theme\n`editor.renderIndentGuides` | true | Display editor indentation guides\n`editor.dragAndDrop` | true | Move editor selections with drag and drop\n`extensions.autoUpdate` | true | Automatically update extensions\n`window.openFilesInNewWindow` | \"off\" | Open files in the running VS Code instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Recommended Extensions in VS Code\nDESCRIPTION: Example of an extensions.json file used to define recommended extensions for a workspace. This file should be placed in the .vscode folder and defines extensions that are suggested for installation when first opening the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"recommendations\": [\n\t\t\"eg2.tslint\",\n\t\t\"dbaeumer.vscode-eslint\",\n\t\t\"msjsdiag.debugger-for-chrome\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Schema Definition in Settings\nDESCRIPTION: Example showing how to define a JSON schema directly within VS Code settings for .myconfig files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"json.schemas\": [\n    {\n        \"fileMatch\": [\n            \"/.myconfig\"\n        ],\n        \"schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\" : {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the entry\"\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling GitHub LFS Write Support in Visual Studio Code\nDESCRIPTION: These configuration settings disable Git LFS write support for GitHub Repositories and Azure Repos extensions in Visual Studio Code. This affects the ability to commit LFS-tracked files without installing Git LFS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"githubRepositories.experimental.lfs.write.enabled\": false,\n\"azureRepos.experimental.lfs.write.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Null Checks in TypeScript Project\nDESCRIPTION: This JSON snippet shows the configuration for a separate TypeScript project file that enables strict null checking. It extends the base configuration and initially includes no files, allowing for incremental addition of strict null checked files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"./tsconfig.base.json\", // Shared configuration with our main `tsconfig.json`\n    \"compilerOptions\": {\n        \"noEmit\": true, // Don't output any javascript\n        \"strictNullChecks\": true\n    },\n    \"files\": [\n        // Slowly growing list of strict null check files goes here\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Large Folders from VS Code Search (JSON)\nDESCRIPTION: This JSON configuration excludes specified large folders from VS Code's file explorer and project file search. This can improve performance when opening folders with many files by reducing the search scope.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"files.exclude\": {\n        \"**/largeFolder\": true\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Echo Feature in VS Code Terminal (JSON)\nDESCRIPTION: This JSON configuration disables the local echo feature in VS Code's integrated terminal. Local echo is used to mitigate input latency in remote windows by displaying keystrokes before they're confirmed by the remote system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/advanced.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.localEchoEnabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Uninstall Hook in package.json for VS Code Extensions\nDESCRIPTION: This snippet shows how to register a Node.js script as an uninstall hook in the package.json file. This script will be executed when the extension is completely uninstalled from VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vscode:uninstall\": \"node ./out/src/lifecycle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Find in Cell Selection for Notebooks\nDESCRIPTION: An experimental setting that enables the Find control to search within specific ranges of selected cells in notebooks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"notebook.experimental.find.scope.enabled\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and TypeScript support using yarn\nDESCRIPTION: This command installs ESLint, a TypeScript parser for ESLint, and TypeScript-specific ESLint rules using yarn as the package manager.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/tslint-eslint-migration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable - Shell Command\nDESCRIPTION: Command to set the VSCODE_TSJS environment variable for enabling Salsa in OS X\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport VSCODE_TSJS=1\n```\n\n----------------------------------------\n\nTITLE: Creating Command URIs in a Hover Provider\nDESCRIPTION: This snippet creates a hover provider that displays a clickable link to execute the 'editor.action.addCommentLine' command when hovering over JavaScript code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  vscode.languages.registerHoverProvider(\n    'javascript',\n    new class implements vscode.HoverProvider {\n      provideHover(\n        _document: vscode.TextDocument,\n        _position: vscode.Position,\n        _token: vscode.CancellationToken\n      ): vscode.ProviderResult<vscode.Hover> {\n        const commentCommandUri = vscode.Uri.parse(`command:editor.action.addCommentLine`);\n        const contents = new vscode.MarkdownString(`[Add comment](${commentCommandUri})`);\n\n        // To enable command URIs in Markdown content, you must set the `isTrusted` flag.\n        // When creating trusted Markdown string, make sure to properly sanitize all the\n        // input content so that only expected command URIs can be executed\n        contents.isTrusted = true;\n\n        return new vscode.Hover(contents);\n      }\n    }()\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Working Directory Using Variables in VS Code\nDESCRIPTION: Configuration that sets the integrated terminal's current working directory using a variable. When the variable cannot be resolved, VS Code now falls back to the workspace directory instead of throwing an error.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.cwd\": \"${fileDirname}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying .NET Debugger Path in launch.json\nDESCRIPTION: This JSON snippet is part of a VS Code `launch.json` configuration for attaching to a .NET application in Docker. It specifies the path (`/remote_debugger/vsdbg`) within the container where the .NET debugger (`vsdbg`) is located or should be copied to by VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"netCore\": {\n    \"debuggerPath\": \"/remote_debugger/vsdbg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container to Opt Out of ESLint Extension\nDESCRIPTION: This JSON configuration demonstrates how to disable the installation of the ESLint extension in a Dev Container using a TypeScript Node base image. It shows the use of the minus sign to opt out of specific extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_85.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/typescript-node:1-20-bookworm\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"-dbaeumer.vscode-eslint\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Token Scopes in JavaScript\nDESCRIPTION: This snippet demonstrates how tokens are generated with arrays of scopes for each part of a JavaScript function declaration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntokens = [\n  { startIndex:  0, scopes: ['source.js','meta.function.js','storage.type.function.js'] },\n  { startIndex:  8, scopes: ['source.js','meta.function.js'] },\n  { startIndex:  9, scopes: ['source.js','meta.function.js','meta.definition.function.js',\n                             'entity.name.function.js'] },\n  { startIndex: 11, scopes: ['source.js','meta.function.js','meta.parameters.js',\n                             'punctuation.definition.parameters.js'] },\n  { startIndex: 13, scopes: ['source.js','meta.function.js'] },\n  { startIndex: 14, scopes: ['source.js','meta.function.js','meta.block.js',\n                             'punctuation.definition.block.js'] },\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Extension Auto-Updates (JSON)\nDESCRIPTION: JSON setting to disable automatic updates for installed VS Code extensions. Add this line to your `settings.json` file (accessible via File > Preferences > Settings > JSON editor) to prevent extensions from updating automatically.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"extensions.autoUpdate\": false\n```\n\n----------------------------------------\n\nTITLE: TextMate Theme Rules JSON Implementation\nDESCRIPTION: Example of TextMate theme rules showing function and class name styling definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n...\n// Function name\n{ \"scope\": \"entity.name.function\", \"fontStyle\": \"\", \"foreground\":\"#A6E22E\" }\n...\n// Class name\n{ \"scope\": \"entity.name.class\", \"fontStyle\": \"underline\", \"foreground\":\"#A6E22E\" }\n...\n```\n\n----------------------------------------\n\nTITLE: VS Code File URL Examples - Bash\nDESCRIPTION: URL protocol examples for opening specific files and navigating to specific lines and columns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvscode://file/{full path to file}\n\nvscode://file/c:/myProject/package.json\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Status Output in Terminal\nDESCRIPTION: This bash snippet shows the output of the 'git status' command, displaying the current state of a Git repository with staged and unstaged changes. It illustrates the foundation of the SCM model in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvsce main* → git status\nOn branch main\nYour branch is up-to-date with 'origin/main'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.md\n        renamed:    src/api.ts -> src/test/api.ts\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    .travis.yml\n        modified:   README.md\n```\n\n----------------------------------------\n\nTITLE: HTML Link and Style Elements\nDESCRIPTION: HTML code for a scroll-to-top button and stylesheet link for in-product release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Browser Configuration Setting\nDESCRIPTION: Setting to configure which browser to use for opening links in VS Code. Accepts full path to browser executable or browser aliases like 'edge', 'chrome', or 'firefox'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nworkbench.externalBrowser\n```\n\n----------------------------------------\n\nTITLE: Terminal Contrast Ratio Configuration\nDESCRIPTION: Setting to adjust the minimum contrast ratio for terminal text\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\"terminal.integrated.minimumContrastRatio\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Setting with Markdown Description\nDESCRIPTION: Demonstrates how to use markdownDescription for rich text formatting in setting descriptions, including links and multiple paragraphs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitMagic.blame.dateFormat\": {\n    \"markdownDescription\": \"Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Keyboard Shortcut in JSON\nDESCRIPTION: Example of overriding the Enter key to print 'Hello World' using keybindings.json configuration. Shows how to define a keyboard shortcut with command arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"enter\", \"command\": \"type\",\n                    \"args\": { \"text\": \"Hello World\" },\n                    \"when\": \"editorTextFocus\" }\n```\n\n----------------------------------------\n\nTITLE: Excluding Files and Folders from File Watching - VS Code JSON\nDESCRIPTION: This JSON snippet configures the \\\"files.watcherExclude\\\" setting in VS Code to prevent the file watcher from monitoring certain paths (like \\\".git/objects\\\" and \\\"node_modules\\\") for changes. This reduces CPU usage for large projects. Use glob patterns as property names and \\\"true\\\" to disable watching for matching paths. Modify as needed for additional folders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files.watcherExclude\": {\n        \"**/.git/objects/**\": true,\n        \"**/node_modules/**\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose Service Environment Variables (YAML)\nDESCRIPTION: This YAML block sets container-wide environment variables for a specific service using Docker Compose’s environment property. It should be inserted into the docker-compose.yml file. Replace 'your-service-name-here' and the variable names/values as needed. No external dependencies outside standard Docker Compose.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/environment-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    environment:\n      - YOUR_ENV_VAR_NAME=your-value-goes-here\n      - ANOTHER_VAR=another-value\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Electron Sandbox Permissions on Linux\nDESCRIPTION: Commands to set the correct permissions for the Electron sandbox on Linux. This is necessary for the 'setuid' sandbox to function properly in Portable mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/portable.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown root <path-to-vscode>/chrome-sandbox\nsudo chmod 4755 <path-to-vscode>/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Extensions Policy in macOS Configuration Profile (XML)\nDESCRIPTION: This XML snippet demonstrates configuring the `AllowedExtensions` policy within a macOS `.mobileconfig` file for VS Code. The value between the `<string>` tags is a JSON string specifying that extensions from the 'microsoft' and 'github' publishers are allowed. This structure is used for policies requiring complex string values, often JSON.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/enterprise.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>AllowedExtensions</key>\n<string>{\"microsoft\": true, \"github\": true}</string>\n```\n\n----------------------------------------\n\nTITLE: Contributing Issue Reporter Command and Menu in package.json\nDESCRIPTION: This JSON snippet demonstrates how to contribute a custom command and menu item for integrating with VS Code's issue reporter. It defines a command and adds it to the issue/reporter menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/get-started/wrapping-up.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [\n    {\n        \"command\": \"extension.myCommand\",\n        \"title\": \"Report Issue\"\n    }\n],\n    \"menus\": {\n        \"issue/reporter\": [\n            {\n                \"command\": \"extension.myCommand\"\n            }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Command Output Logging in VS Code\nDESCRIPTION: Specifies a list of Git commands that will have their stdout logged in the Git output window. This setting allows users to customize which Git command outputs they want to see.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"git.commandsToLog\": []\n```\n\n----------------------------------------\n\nTITLE: Extension Virtual Workspace Configuration in package.json\nDESCRIPTION: Configuration snippet showing how to define virtual workspace capabilities in an extension's package.json file. This setting signals whether an extension is compatible with virtual workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/06/10/remote-repositories.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"virtualWorkspaces\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CodeActionProvider with CodeAction Class (TypeScript)\nDESCRIPTION: Shows a TypeScript example of implementing `vscode.CodeActionProvider`. The `Emojizer` class provides a Quick Fix that converts the text ':)' to the '😀' emoji. It utilizes the new `vscode.CodeAction` class (introduced in v1.20), specifying a `title`, `kind` (`vscode.CodeActionKind.QuickFix`), and a `WorkspaceEdit` to perform the text replacement. Depends on the `vscode` API module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport * as vscode from 'vscode'\n\n/**\n * Quick fix provider that converts :) to 😀\n */\nexport class Emojizer implements vscode.CodeActionProvider {\n    provideCodeActions(document: vscode.TextDocument, range: vscode.Range) {\n        const pos = range.start;\n        const line = document.lineAt(pos.line);\n\n        // Check if we are at a :)\n        if (line.text[pos.character] === ':' && line.text[pos.character + 1] === ')') {\n            const fix = new vscode.CodeAction('Convert to 😀', vscode.CodeActionKind.QuickFix);\n            fix.edit = new vscode.WorkspaceEdit();\n            fix.edit.replace(document.uri, new vscode.Range(pos, pos.translate(0, 2)), '😀');\n            return [fix];\n        }\n        return undefined;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Development Environment Variables Configuration for Python in VS Code\nDESCRIPTION: Example development environment configuration file showing API endpoint and database connection variables. Contains commented documentation for development-specific settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/environments.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# dev.env - development configuration\n\n# API endpoint\nMYPROJECT_APIENDPOINT=https://my.domain.com/api/dev/\n\n# Variables for the database\nMYPROJECT_DBURL=https://my.domain.com/db/dev\nMYPROJECT_DBUSER=devadmin\nMYPROJECT_DBPASSWORD=!dfka**213=\n```\n\n----------------------------------------\n\nTITLE: Illustrating JSDoc @see Tags with TypeScript Integration\nDESCRIPTION: This example demonstrates how to use JSDoc @see tags to reference other functions and classes in JavaScript and TypeScript. It shows a function referencing a class from another file, allowing VS Code features like Go to Definition and Rename to work with these references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// @filename: somewhere.ts\nexport class WrappedError extends Error { ... }\n\n// @filename: ace.ts\nimport { WrappedError } from './somewhere'\n\n/**\n * @see {WrappedError}\n */\nfunction crash(kind) {\n    throw new WrappedError(kind);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Application with create-react-app\nDESCRIPTION: Command to generate a new React application using the create-react-app package via npx. This creates a new folder with the specified name containing a starter React project with all necessary dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Querying Available Authentication Accounts - VS Code Authentication API (TypeScript)\nDESCRIPTION: This snippet retrieves all authentication accounts available for a provider (in this case, \\\"microsoft\\\") by calling vscode.authentication.getAccounts. It returns an array of account information objects, which can then be used for acquiring authentication sessions. The only dependency is the VS Code authentication API and the relevant provider, and the main parameter is the provider ID string. The output is an account list for subsequent use.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst accounts = vscode.authentication.getAccounts('microsoft');\n```\n\n----------------------------------------\n\nTITLE: Enabling Shell Integration in Visual Studio Code Terminal\nDESCRIPTION: JSON configuration to enable shell integration features in the VS Code integrated terminal for PowerShell, bash, and zsh.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shellIntegration.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Implementation\nDESCRIPTION: CSS styling for message display in Django template\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.message {\n    font-weight: 600;\n    color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Specific Settings via URL Scheme in VS Code\nDESCRIPTION: This snippet demonstrates the custom URL scheme used by Visual Studio Code to open the Settings editor directly to a specific setting. The format requires the setting's unique ID. For example, using `vscode://settings/workbench.colorTheme` will open the Settings editor focused on the 'Color Theme' setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: uri\nCODE:\n```\nvscode://settings/<settingName>\n```\n\nLANGUAGE: uri\nCODE:\n```\nvscode://settings/workbench.colorTheme\n```\n\n----------------------------------------\n\nTITLE: Setting Occurrences Highlight Delay in VS Code Editor\nDESCRIPTION: This setting allows users to control the delay before occurrences are highlighted in the editor, potentially leading to a more responsive experience with semantic highlighting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"editor.occurrencesHighlightDelay\": <value>\n```\n\n----------------------------------------\n\nTITLE: Configuring onFileSystem Activation in package.json\nDESCRIPTION: Declaration of onFileSystem activation event that activates the extension whenever a file from a specific scheme is accessed. This example activates the extension for SFTP operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onFileSystem:sftp\"\n]\n```\n\n----------------------------------------\n\nTITLE: Constructing MCP Server Installation URL (TypeScript)\nDESCRIPTION: TypeScript code snippet showing how to create a VS Code URL handler link (`vscode:mcp/install?`) for installing an MCP server. It involves creating a JSON object (`obj`) with the server configuration and then encoding it as a URL component to append to the base URI scheme. This link can be used to trigger the installation process in VS Code via a browser or command line.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/mcp-servers.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// For Insiders, use `vscode-insiders` instead of `code`\nconst link = `vscode:mcp/install?${encodeURIComponent(JSON.stringify(obj))`;\n```\n\n----------------------------------------\n\nTITLE: Markdown Path Suggestions Configuration\nDESCRIPTION: Setting to disable path suggestions functionality in Markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"markdown.suggest.paths.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Terminal Launch Arguments in VS Code\nDESCRIPTION: Sets the launch arguments passed to the Python interpreter when running a file using commands like 'Python: Run Python File in Terminal'. The default is an empty list `[]`, meaning no extra arguments are passed. This setting is ignored during debugging, which uses `launch.json` configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code from Ubuntu Terminal in WSL 2\nDESCRIPTION: This command opens Visual Studio Code in the current directory within the WSL 2 environment. It's used to start developing in a WSL 2 context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/01/containers-wsl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Creating a VS Code Terminal with Strict Environment Control (TypeScript)\nDESCRIPTION: TypeScript code snippet showing how to use `vscode.window.createTerminal` with the `TerminalOptions.strictEnv` property set to `true`. This ensures the created terminal process starts exclusively with the environment variables defined in the `env` object (here, just `FOO=BAR`), preventing inheritance or modification of the default shell environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// This will create a terminal whose environment only contains the single value\n// FOO=BAR.\nconst terminal = createTerminal({\n  name: \"Test terminal\",\n  env: {\n    \"FOO\": \"BAR\"\n  },\n  strictEnv: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Copilot PR Instructions in JSON\nDESCRIPTION: JSON configuration example showing how to customize instructions for generating pull request titles and descriptions in GitHub Copilot. This setting allows specifying custom rules either inline or via a file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.chat.pullRequestDescriptionGeneration.instructions\": [\n    {\n      \"text\": \"Prefix every PR title with an emoji.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings in VS Code (JSON)\nDESCRIPTION: Example of how to configure language-specific settings in VS Code's settings.json file. This snippet demonstrates disabling word-based suggestions for Markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"[markdown]\": {\n    \"editor.wordBasedSuggestions\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ASCII Characters with ImageBitmap in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of ImageBitmap to render ASCII characters in a texture atlas for improved rendering performance in the terminal. It utilizes the canvas element and CanvasRenderingContext2D for drawing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/10/03/terminal-renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d');\n\n// Create ImageBitmap with ASCII characters\nconst imageBitmap = await createImageBitmap(canvas);\n\n// Use imageBitmap for rendering instead of fillText\nctx.drawImage(imageBitmap, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);\n```\n\n----------------------------------------\n\nTITLE: Customizing Syntax Colors in VS Code Settings\nDESCRIPTION: This snippet shows how to customize syntax highlighting colors in VS Code by modifying the editor.tokenColorCustomizations setting. The example changes the color of comments to red.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/color-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.tokenColorCustomizations\": {\n    \"comments\": \"#FF0000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Problem Panel Reveal Settings\nDESCRIPTION: Task configuration showing how to automatically reveal the Problems panel using the revealProblems property with npm watch script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"watch\",\n      \"problemMatcher\": \"$tsc-watch\",\n      \"isBackground\": true,\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"revealProblems\": \"onProblem\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Indentation Rules in Language Configuration\nDESCRIPTION: Example JSON configuration for defining language indentation rules in a 'language-configuration.json' file. The patterns specify when to increase or decrease indentation levels based on regex patterns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"indentationRules\": {\n    \"increaseIndentPattern\": \"^\\\\s*((begin|class|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while)|(.*\\\\sdo\\\\b))\\\\b[^\\\\{;]*$\",\n    \"decreaseIndentPattern\": \"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Category Title in VS Code Extension\nDESCRIPTION: JSON configuration demonstrating how to set the title for a category of settings. The title will be used as the heading for that category in the Settings UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configuration\": {\n    \"title\": \"GitMagic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - ESLint Flat Config\nDESCRIPTION: Setting to control whether ESLint uses the new flat config file format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\neslint.useFlatConfig\n```\n\n----------------------------------------\n\nTITLE: Linking External Stylesheet for In-Product Release Notes - HTML\nDESCRIPTION: This code snippet demonstrates how to use an HTML <link> element to attach an external CSS stylesheet (css/inproduct_releasenotes.css) to an HTML document. The rel attribute declares the relationship as a stylesheet, while the type attribute specifies it as text/css. The href attribute sets the path to the CSS file. This approach requires the stylesheet to be available at the specified relative path, and is essential for applying the intended look and feel to the release notes page. Input is an HTML document; output is a visually styled page based on the referenced CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Including In-Product Release Notes Stylesheet in HTML\nDESCRIPTION: This HTML code links to a CSS stylesheet named 'inproduct_releasenotes.css' for styling in-product release notes sections. It ensures consistent look-and-feel for special components within documentation or product pages. The file path assumes a 'css' directory is present at the same level as the page, and correct styling depends on the existence of the referenced CSS file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomExecution Task\nDESCRIPTION: TypeScript example showing how to create a custom execution task with Pseudoterminal implementation\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/task-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreturn new vscode.Task(definition, vscode.TaskScope.Workspace, `${flavor} ${flags.join(' ')}`,\n  CustomBuildTaskProvider.CustomBuildScriptType, new vscode.CustomExecution(async (): Promise<vscode.Pseudoterminal> => {\n    // When the task is executed, this callback will run. Here, we setup for running the task.\n    return new CustomBuildTaskTerminal(this.workspaceRoot, flavor, flags, () => this.sharedState, (state: string) => this.sharedState = state);\n  }));\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code using DNF on Fedora/RHEL/CentOS\nDESCRIPTION: Checks for updates using `dnf check-update` and installs the stable (`code`) or insiders (`code-insiders`) version of VS Code using `sudo dnf install`. This is the standard method for Fedora 22+ and recent RHEL/CentOS versions. Assumes the Microsoft YUM/DNF repository has been previously added.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf check-update\nsudo dnf install code # or code-insiders\n```\n\n----------------------------------------\n\nTITLE: Mapping Source Files with sourceFileMap (JSON)\nDESCRIPTION: This snippet shows how to use the 'sourceFileMap' property in a debug configuration to remap original source locations (e.g., on Windows) to local paths, useful for debugging binaries compiled on different machines or accessing source during remote debugging. The JSON object maps original absolute paths to their new locations on the local or remote system. Only use forward slashes for non-Windows paths; original keys can be files or directories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sourceFileMap\": {\n        \"C:\\\\foo\":\"/home/me/foo\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Session Creation in TypeScript\nDESCRIPTION: Shows how to create an authentication session for a specific account using the retrieved account information and required scopes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = vscode.authentication.getSession('microsoft', scopes, { account: accounts[0] })\n```\n\n----------------------------------------\n\nTITLE: Selecting Previous Code Action in VS Code Keybindings (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the command for selecting the previous Code Action in the new Code Action list in Visual Studio Code. It can be used to customize keyboard shortcuts for navigating through Code Actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselectPrevCodeAction\n```\n\n----------------------------------------\n\nTITLE: Using VS Code API for Opening Diffs\nDESCRIPTION: The `vscode.diff` API command. Extension authors using the custom tree API should use this command for `TreeItem.command` when the action should open a diff editor, ensuring correct preview mode behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode.diff\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Settings Editor\nDESCRIPTION: Represents the keyboard shortcut command `workbench.action.openSettings` used in VS Code to open the Settings editor. This interface allows users to search for and modify configuration options, such as 'Debug: Allow Breakpoints Everywhere' required for debugging Rust.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.openSettings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Languages in a Grammar Extension\nDESCRIPTION: Shows how to configure a grammar to support embedded languages, ensuring proper language features like commenting and snippets work in embedded code blocks. This example maps JavaScript embedded blocks to the JavaScript language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"grammars\": [\n      {\n        \"path\": \"./syntaxes/abc.tmLanguage.json\",\n        \"scopeName\": \"source.abc\",\n        \"embeddedLanguages\": {\n          \"meta.embedded.block.javascript\": \"javascript\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Support for Untrusted Workspaces in VS Code settings.json\nDESCRIPTION: JSON configuration in settings.json to override Workspace Trust support for specific extensions. This example enables support for the Prettier extension in untrusted workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/workspace-trust.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"extensions.supportUntrustedWorkspaces\": {\n    \"esbenp.prettier-vscode\": {\n      \"supported\": true,\n      \"version\": \"6.4.0\"\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Variables for Emmet Snippets in VS Code\nDESCRIPTION: Customizes variables used by Emmet snippets. This example sets the language to German and the charset to UTF-16 for generated HTML.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.variables\": {\n  \"lang\": \"de\",\n  \"charset\": \"UTF-16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Closing Shortcut for macOS in VS Code\nDESCRIPTION: Custom keyboard shortcut to close an entire editor group instead of a single editor on macOS. This binding overrides the default Cmd+W behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"cmd+w\", \"command\": \"workbench.action.closeEditorsInGroup\" }\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Messages in VS Code Chat\nDESCRIPTION: Shows how to display progress messages during long-running operations using ChatResponseStream.progress method.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Render a progress message\nstream.progress('Connecting to the database.');\n```\n\n----------------------------------------\n\nTITLE: Setting onIssueReporterOpened Activation Event for VS Code Extension\nDESCRIPTION: This snippet illustrates how to declare the onIssueReporterOpened activation event in a VS Code extension's manifest. It's emitted when the issue reporter is opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onIssueReporterOpened\"\n]\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Accuracy with scikit-learn in Python\nDESCRIPTION: Uses the trained model to predict outcomes for the test dataset and calculates the accuracy score using scikit-learn's metrics module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn import metrics\npredict_test = model.predict(X_test)\nprint(metrics.accuracy_score(y_test, predict_test))\n```\n\n----------------------------------------\n\nTITLE: Using Variable Command for Program Arguments\nDESCRIPTION: Uses the VS Code command variable to prompt for program arguments when launching a Java application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"${command:SpecifyProgramArgs}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing User UID/GID in Dockerfile\nDESCRIPTION: Dockerfile commands for changing the UID/GID of an existing user in the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG USERNAME=user-name-goes-here\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\nRUN groupmod --gid $USER_GID $USERNAME \\\n    && usermod --uid $USER_UID --gid $USER_GID $USERNAME \\\n    && chown -R $USER_UID:$USER_GID /home/$USERNAME\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Issues Queries in VS Code Settings\nDESCRIPTION: This code snippet shows how to configure custom queries for GitHub Issues in VS Code settings. It allows users to specify issue queries using GitHub search syntax to include issues from multiple repositories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/05/06/github-issues-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"githubIssues.queries\": [\n  {\n    \"label\": \"My Issues\",\n    \"query\": \"default\"\n  },\n  {\n    \"label\": \"Created Issues\",\n    \"query\": \"author:${user} state:open repo:${owner}/${repository} sort:created-desc\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Submenu Contribution in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to contribute a submenu placeholder using the `contributes.submenus` property in `package.json`. It defines a submenu with a unique `id` (`git.commit`) and a `label` (`Commit`) that will be displayed in the parent menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"submenus\": [\n      {\n        \"id\": \"git.commit\",\n        \"label\": \"Commit\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Neural Network Model Accuracy with Keras in Python\nDESCRIPTION: Uses the trained neural network to predict survival on the test dataset and calculates the accuracy score using scikit-learn's metrics.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ny_pred = np.rint(model.predict(X_test).flatten())\nprint(metrics.accuracy_score(y_test, y_pred))\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Commands Based on Resource Scheme\nDESCRIPTION: Example of using the 'resourceScheme' context key to conditionally show a command only for local file resources.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"menus\": {\n      \"editor/context\": [\n        {\n          \"command\": \"npm.runSelectedScript\",\n          \"when\": \"resourceFilename == 'package.json' && resourceScheme == file\"\n        }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to Removed Built-in Dev Container Repository\nDESCRIPTION: Mentions the `vscode-dev-containers` repository, specifically within the context of `github.com`, from which built-in Dev Container configurations were previously sourced. Support for these built-in configurations has been dropped in this release, although they remain available directly in the repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_77.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode-dev-containers\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.com\n```\n\n----------------------------------------\n\nTITLE: Configuring onView Activation in package.json\nDESCRIPTION: Declaration of onView activation event that activates the extension when a specific view is expanded in the VS Code sidebar. This example activates when the 'nodeDependencies' view becomes visible.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onView:nodeDependencies\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Window Title Bar Style to Native\nDESCRIPTION: Configures the `window.titleBarStyle` setting to `native`, reverting the window title bar from the custom VS Code version back to the operating system's native title bar, particularly relevant on Linux where the custom bar is now default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(window.titleBarStyle)` to `native`\n```\n\n----------------------------------------\n\nTITLE: Building .NET Application\nDESCRIPTION: Console output showing successful build of a .NET application using dotnet CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-aspnet-core.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPS C:\\source\\repos\\net> dotnet build\nMSBuild version 17.4.0-preview-22470-08+6521b1591 for .NET\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n  net -> C:\\source\\repos\\net\\bin\\Debug\\net7.0\\net.dll\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:08.96\n```\n\n----------------------------------------\n\nTITLE: Static Root Configuration\nDESCRIPTION: Setting static root directory for collected static files in Django settings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nSTATIC_ROOT = BASE_DIR / 'static_collected'\n```\n\n----------------------------------------\n\nTITLE: Using Double Shift Keyboard Shortcut in VS Code\nDESCRIPTION: Instructions for assigning double Shift keyboard shortcut for frequently used commands using the Keyboard Shortcuts editor in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/productivity.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Double Shift\n\n  * Assign the double `kbstyle(Shift)` keyboard shortcut for often-used commands in the Keyboard Shortcuts editor (**Preferences: Open Keyboard Shortcuts** command)\n```\n\n----------------------------------------\n\nTITLE: TypeScript ATA Module Request Algorithm\nDESCRIPTION: The algorithm that caused high load on npm servers by repeatedly requesting non-existent @types packages. The process checks modules in package.json against a cache and makes requests to npm for uncached modules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/11/3/rollback.md#2025-04-23_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. TypeScript language server checks modules in package.json against application cache\n2. For uncached modules, request @types/{module} from npm\n3. Cache existing modules\n4. Retry non-existent modules on each project open\n```\n\n----------------------------------------\n\nTITLE: Starting Debugging with Copilot-Debug for Python Applications\nDESCRIPTION: Use the copilot-debug command in the integrated terminal to automatically configure and start a debugging session for a Python application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/guides/debug-with-copilot.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncopilot-debug python manage.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Indentation-based Folding in HTML\nDESCRIPTION: JSON configuration to override the default syntax-aware folding and use indentation-based folding for HTML files in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"[html]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Enabling Emmet HTML Abbreviations in JavaScript Files - JSON\nDESCRIPTION: Associates Emmet's HTML abbreviation support with JavaScript files in VS Code by mapping the 'javascript' language ID to the 'html' Emmet profile. Insert this JSON block into `settings.json` to enable Emmet expansions meant for HTML in JavaScript files, helping with template literals or JSX. No external dependencies beyond VS Code's built-in Emmet functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"emmet.syntaxProfiles\": {\\n        \"javascript\": \"html\"\\n     }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Support for Virtual Workspaces in VS Code\nDESCRIPTION: This JSON snippet shows how to manually enable an extension to support virtual workspaces in VS Code using the 'extensions.supportVirtualWorkspaces' setting in the user settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/06/10/remote-repositories.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"extensions.supportVirtualWorkspaces\": { \"<extensionID>\": true }\n```\n\n----------------------------------------\n\nTITLE: Extension Activation Helper for Language Server Tests\nDESCRIPTION: Helper module that handles activating the language server extension for testing. It opens the document being tested, shows it in the editor, and waits for the server to activate before tests proceed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport * as path from 'path';\n\nexport let doc: vscode.TextDocument;\nexport let editor: vscode.TextEditor;\nexport let documentEol: string;\nexport let platformEol: string;\n\n/**\n * Activates the vscode.lsp-sample extension\n */\nexport async function activate(docUri: vscode.Uri) {\n  // The extensionId is `publisher.name` from package.json\n  const ext = vscode.extensions.getExtension('vscode-samples.lsp-sample')!;\n  await ext.activate();\n  try {\n    doc = await vscode.workspace.openTextDocument(docUri);\n    editor = await vscode.window.showTextDocument(doc);\n    await sleep(2000); // Wait for server activation\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nasync function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensible Notebook Renderer\nDESCRIPTION: JSON configuration for registering a notebook renderer that extends VS Code's built-in Markdown renderer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"notebookRenderer\": [\n    {\n        \"id\": \"sample.markdown-it.emoji-extension\",\n        \"displayName\": \"Markdown it Emoji renderer\",\n        \"entrypoint\": {\n            \"extends\": \"vscode.markdown-it-renderer\",\n            \"path\": \"./out/emoji.js\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Definition Files with jsconfig.json\nDESCRIPTION: JSON configuration for enabling TypeScript definition files in JavaScript projects. Required for TypeScript 1.8.2 to pick up definition files like node.d.ts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vFebruary.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Bracket Pairs in VS Code Settings (JSON)\nDESCRIPTION: This snippet shows how to customize bracket pairs and colorized bracket pairs for JavaScript using VS Code settings. It defines which brackets should be matched and which should be colorized.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[javascript]\": {\n    \"editor.language.brackets\": [\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    \"editor.language.colorizedBracketPairs\": [\n        [\"[\", \"]\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Calculator Resource from TypeScript in VS Code Extension\nDESCRIPTION: TypeScript code demonstrating how to bind and use the WebAssembly calculator resource in a VS Code extension. It creates a new calculator instance, pushes operands and operations, then executes the calculation and displays the result.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Bind the JavaScript Api\nconst api = calculator._.exports.bind(instance.exports as calculator._.Exports, wasmContext);\n\ncontext.subscriptions.push(vscode.commands.registerCommand('vscode-samples.wasm-component-model.run', () => {\n\tchannel.show();\n\tchannel.appendLine('Running calculator example');\n\n\t// Create a new calculator engine\n\tconst calculator = new api.types.Engine();\n\n\t// Push some operands and operations\n\tcalculator.pushOperand(10);\n\tcalculator.pushOperand(20);\n\tcalculator.pushOperation(Types.Operation.add);\n\tcalculator.pushOperand(2);\n\tcalculator.pushOperation(Types.Operation.mul);\n\n\t// Calculate the result\n\tconst result = calculator.execute();\n\tchannel.appendLine(`Result: ${result}`);\n}));\n```\n\n----------------------------------------\n\nTITLE: Documenting Reusable Security Review Practices for REST APIs (Markdown)\nDESCRIPTION: This Markdown snippet documents a security review checklist for REST APIs. It emphasizes the need to protect endpoints with authentication/authorization, validate and sanitize input data, implement rate limiting and throttling, and set up logging and monitoring for security events. Used as a prompt in Copilot or for internal documentation, it conveys standardized security review tasks and assumes familiarity with API security best practices.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSecure REST API review:\n* Ensure all endpoints are protected by authentication and authorization\n* Validate all user inputs and sanitize data\n* Implement rate limiting and throttling\n* Implement logging and monitoring for security events\n…\n```\n\n----------------------------------------\n\nTITLE: Configuring pickString Input with Label in VS Code Tasks - JSON\nDESCRIPTION: This snippet demonstrates how to use the 'inputs' section of a VS Code task to define a pickString input with user-friendly option labels. The 'options' array shows how to provide both bare string values and labeled objects to improve the task picker UI. This pattern enhances user experience by displaying descriptive labels rather than raw values. Required dependency: VS Code tasks system. Inputs include the 'options' array with possible values, the 'default' selected value, and the 'description' for the input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"inputs\\\": [\\n    {\\n        \\\"id\\\": \\\"pickAnInputValue\\\",\\n        \\\"description\\\": \\\"Pick a Value\\\",\\n        \\\"type\\\": \\\"pickString\\\",\\n        \\\"options\\\": [\\n            \\\"first-value\\\",\\n            {\\n                \\\"label\\\": \\\"Second Value\\\",\\n                \\\"value\\\": \\\"second-long-value-that-can-be-simplified-for-display\\\"\\n            }\\n        ],\\n        \\\"default\\\": \\\"first-value\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: Defines an HTML link (`<link>`) tag to include an external CSS file located at `css/inproduct_releasenotes.css`. This stylesheet is intended to style the elements of the in-product release notes page, potentially including the scroll-to-top button defined previously. A comment above warns against modifying it without updating a related regex in gulpfile.common.js.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Django Template Implementation\nDESCRIPTION: HTML template with Django template syntax for displaying personalized greeting with formatted date and time\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Hello, Django</title>\n    </head>\n    <body>\n        <strong>Hello there, {{ name }}!</strong> It's {{ date | date:\"l, d F, Y\" }} at {{ date | time:\"H:i:s\" }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Browser Debug Mode Launch Command\nDESCRIPTION: Command to launch Edge/Chrome browser in debug mode with remote debugging port\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/browser-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nedge.exe --remote-debugging-port=9222 --user-data-dir=remote-debug-profile\n```\n\n----------------------------------------\n\nTITLE: Document Drop Edit Provider Registration with Metadata\nDESCRIPTION: Shows how to register a DocumentDropEditProvider with metadata including provider ID and supported MIME types for better performance and drop handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerDocumentDropEditProvider('markdown', new InsertBase64ImageProvider(), {\n    // Unique id that identities this provider\n    id: 'insertBase64Image',\n\n    // Array of mime types, such as `image/png` or `text/plain`, that this provider supports.\n    // You can also use wildcards, such as `image/*` which matches any image content that is dropped.\n    dropMimeTypes: [\"image/*\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Link in HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) functioning as a 'Scroll to top' button. It includes ARIA attributes for accessibility (`role`, `aria-label`) and a `title` attribute for tooltips. The actual scrolling behavior typically requires JavaScript or relies on the `href=\"#\"` targeting the top of the page. A nested `<span>` with class 'icon' is likely used for displaying a visual indicator, styled via CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Running Rust Application in Dev Container - Bash\nDESCRIPTION: Sample CLI and build output of compiling and running the Rust sample inside a dev container. Output includes information about compilation, execution, and success status in JSON. Actual output will differ based on code and environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[33 ms] dev-containers-cli 0.1.0.\n   Compiling hello_remote_world v0.1.0 (/workspaces/vscode-remote-try-rust)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.06s\n     Running `target/debug/hello_remote_world`\nHello, VS Code Dev Containers!\n{\"outcome\":\"success\"}\n```\n\n----------------------------------------\n\nTITLE: Shell Environment Resolution Timeout Setting\nDESCRIPTION: Configuration setting to adjust the timeout duration for shell environment resolution on macOS and Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"application.shellEnvironmentResolutionTimeout\"\n```\n\n----------------------------------------\n\nTITLE: Example Windows Linker Error for Rust Build\nDESCRIPTION: An example error message encountered on Windows when attempting to build a Rust program without the necessary C/C++ build tools installed. It indicates that the Microsoft C++ linker, `link.exe`, could not be found.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n\"error: linker \\`link.exe\\` not found\"\n```\n\n----------------------------------------\n\nTITLE: Cache Aliasing in Azure Pipelines\nDESCRIPTION: YAML configuration demonstrating how to use the alias parameter to manage multiple caches in a single build job, specifically for caching NPM packages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/18/optimizing-ci.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1\n  inputs:\n    keyfile: \"yarn.lock\"\n    targetfolder: \"node_modules\"\n    vstsFeed: \"$(ArtifactFeed)\"\n    alias: \"Packages\"\n\n- script: |\n    yarn install\n  displayName: Install Dependencies\n  condition: ne(variables['CacheRestored-Packages'], 'true')\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Search in VS Code Settings\nDESCRIPTION: Sets the search.location configuration to display the Search view in the panel for more horizontal space. This feature is currently in preview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"search.location\": \"panel\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Security Setting for Trust Banner\nDESCRIPTION: VS Code setting to control the visibility of the Restricted Mode banner.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/07/06/workspace-trust.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"security.workspace.trust.banner\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Buffer Implementation in VS Code\nDESCRIPTION: JSON configuration for enabling experimental terminal buffer improvements using TypedArray implementation for better performance and reduced memory usage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.experimentalBufferImpl\": \"TypedArray\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Project Reference using .NET CLI (Shell)\nDESCRIPTION: Mentions the `dotnet add reference` command-line tool for adding a reference to another project within the solution to a C# project. This is suggested as the method for adding project references since the UI doesn't support it directly. Requires the .NET SDK/CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/project-management.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add reference\n```\n\n----------------------------------------\n\nTITLE: Organizing Markdown Link Definitions\nDESCRIPTION: Example demonstrating how the Organize link definitions feature sorts and cleans up link definitions in a Markdown file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nSome [link][example] and an image:\n\n![An image of a cat][cat-gif]\n\n[example]: http://example.com\n[cat-gif]: /keyboard-cat.gif\n[some unused link]: http://example.com/file2\n```\n\n----------------------------------------\n\nTITLE: Replace API for OutputChannel in VS Code\nDESCRIPTION: Definition of the new replace method for OutputChannel which allows replacing all content in the output channel with a given value. This provides an alternative to appending content to the channel.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Replaces all output from the channel with the given value.\n *\n * @param value A string, falsy values will not be printed.\n */\nreplace(value: string): void;\n```\n\n----------------------------------------\n\nTITLE: Binary Token Representation\nDESCRIPTION: Shows the final binary representation of tokens using 53-bit mantissa numbers for compact storage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntokens = [\n                 //       type                 startIndex\n     4294967296, // 0000000000000001 00000000000000000000000000000000\n              8, // 0000000000000000 00000000000000000000000000001000\n     8589934601, // 0000000000000010 00000000000000000000000000001001\n    12884901899, // 0000000000000011 00000000000000000000000000001011\n    12884901900, // 0000000000000011 00000000000000000000000000001100\n             13, // 0000000000000000 00000000000000000000000000001101\n    17179869198, // 0000000000000100 00000000000000000000000000001110\n]\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styling for Message List Table in Django\nDESCRIPTION: Adds CSS rules to format the table displaying logged messages, aligning text to the left and adding right padding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.message_list th,td {\n    text-align: left;\n    padding-right: 15px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secondary Side Bar Label Visibility\nDESCRIPTION: Adjusts the `workbench.secondarySideBar.showLabels` setting. Setting this likely controls whether views in the Secondary Side Bar display text labels or just icons. The surrounding text implies setting it to false would show icons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(workbench.secondarySideBar.showLabels)\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Body Refactoring in C#\nDESCRIPTION: Shows how to refactor lambda expressions between expression body and block body syntax. The refactoring helps in choosing between concise expression syntax and more verbose block syntax based on complexity and readability needs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/refactoring.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Expression body\nx => x * x\n\n// Block body\nx => { return x * x; }\n```\n\n----------------------------------------\n\nTITLE: Disabling Bracket Pair Colorization for TypeScript in VS Code\nDESCRIPTION: JSON configuration to disable bracket pair colorization specifically for TypeScript files in VS Code. This setting overrides the default behavior for the TypeScript language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"[typescript]\": {\n  \"editor.bracketPairColorization.enabled\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugging with Nodemon in VS Code JSON Settings\nDESCRIPTION: JSON configuration for setting up Node.js debugging with Nodemon in Visual Studio Code. This launch configuration uses Nodemon to automatically restart the debug session when JavaScript source changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"type\": \"node\",\n\t\"request\": \"launch\",\n\t\"name\": \"nodemon\",\n\t\"cwd\": \"${workspaceRoot}\",\n\t\"runtimeExecutable\": \"nodemon\",\n\t\"runtimeArgs\": [\n\t\t\"--debug=5858\"\n\t],\n\t\"program\": \"${workspaceRoot}/app.js\",\n\t\"restart\": true,\n\t\"port\": 5858\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Snippet with Variables in JSON\nDESCRIPTION: Example of creating a custom snippet that wraps selected text in single quotes or provides a placeholder. Demonstrates usage of snippet variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"in quotes\": {\n\t\"prefix\": \"inq\",\n\t\"body\": \"'${TM_SELECTED_TEXT:${1:type_here}}'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Uninitialized Property Access with Strict Null Checks in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how accessing an uninitialized class property doesn't trigger a strict null check error unless strict property initialization is also enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// strictNullCheck: true\n\nclass Value {\n    public x: number;\n\n    public setValue(x: number) { this.x = x; }\n\n    public double(): number {\n        return this.x * 2; // not an error even though `x` will be `undefined` if `setValue` has not been called yet\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut References\nDESCRIPTION: Keyboard shortcut placeholders used in the documentation to reference VS Code commands - showing commands for opening Command Palette and Settings editor\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.showCommands)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.openSettings)\n```\n\n----------------------------------------\n\nTITLE: Adding Folders to Workspace via Command Line in Bash\nDESCRIPTION: Demonstrates using the `code --add` command to add specified folders (`vscode`, `vscode-docs`) to the last active VS Code multi-root workspace. Requires the VS Code command-line interface to be installed and configured.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  code --add vscode vscode-docs\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Merge Editor Diffing Algorithm in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to enable an experimental diffing algorithm for the merge editor in Visual Studio Code settings. The new algorithm aims to improve the merge editor experience for edge cases but may not be optimized for performance yet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mergeEditor.diffAlgorithm\": \"experimental\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Mapping in User Settings\nDESCRIPTION: Configuration showing how to map .babelrc files to a specific schema in VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"json.schemas\": [\n    {\n        \"fileMatch\": [\n            \"/.babelrc\"\n        ],\n        \"url\": \"https://json.schemastore.org/babelrc\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Key Binding for ESLint Fix All Problems Command (JSON)\nDESCRIPTION: JSON snippet showing how to add a custom key binding for the ESLint 'fix all problems' command in Visual Studio Code's keybindings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    { \"key\": \"ctrl+shift+alt+f\",   \"command\": \"eslint.fixAllProblems\",\n                                     \"when\": \"editorTextFocus\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting COMPOSE_PROJECT_NAME Environment Variable in PowerShell for Docker Compose - PowerShell\nDESCRIPTION: This snippet shows how to set the COMPOSE_PROJECT_NAME environment variable in a PowerShell session before starting Visual Studio Code. This variable controls the Docker Compose project name and affects all Compose operations within that VS Code session. Ensure there are no open VS Code windows for the setting to take effect, and modify \"foo\" as needed for the project name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/set-docker-compose-project-name.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# from PowerShell\\n$env:COMPOSE_PROJECT_NAME=foo\\ncode .\n```\n\n----------------------------------------\n\nTITLE: Displaying License Banner in Visual Studio Code Server (Bash)\nDESCRIPTION: This snippet shows the license agreement banner output that appears when the Visual Studio Code Server is first run. It is intended for user acknowledgment and does not require any dependencies except access to the server CLI. The banner presents the relevant license and privacy links and signals acceptance by continued usage. No code execution is required—this is informational output to the console upon CLI startup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/vscode-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* Visual Studio Code Server\\n*\\n* By using the software, you agree to\\n* the Visual Studio Code Server License Terms (https://aka.ms/vscode-server-license) and\\n* the Microsoft Privacy Statement (https://privacy.microsoft.com/en-US/privacystatement).\n```\n\n----------------------------------------\n\nTITLE: Emmet Configuration Setting\nDESCRIPTION: Example of enabling Emmet abbreviation expansion using Tab key through VS Code settings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/08/07/emmet-2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.triggerExpansionOnTab\": true\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key Permissions (Windows PowerShell)\nDESCRIPTION: Grants explicit read permissions to the specified user for the private SSH key file on Windows. Uses the `icacls` command and is often followed by additional permission adjustments via GUI for security. Replace `privateKeyPath` and `<username>` with the actual key file path and your Windows username.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nicacls \"privateKeyPath\" /grant <username>:R\n\n```\n\n----------------------------------------\n\nTITLE: Using asExternalUri for Workspace URIs\nDESCRIPTION: TypeScript example showing how to create system-wide URIs for workspaces using the asExternalUri API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = await vscode.env.asExternalUri('file:///Users/john/work/code');\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Level in VS Code\nDESCRIPTION: Configuration to adjust the window zoom level.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"window.zoomLevel\": 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Task with Clear Terminal Option\nDESCRIPTION: Task configuration showing how to clear the terminal before task execution using the presentation.clear property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"gulp\",\n    \"task\": \"tslint\",\n    \"label\": \"Run tslint\",\n    \"presentation\": {\n        \"clear\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - Code Action Accessibility Signals\nDESCRIPTION: Settings to enable accessibility signals for code action triggers and completions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\naccessibility.signals.codeActionTriggered\n```\n\nLANGUAGE: json\nCODE:\n```\naccessibility.signals.codeActionApplied\n```\n\n----------------------------------------\n\nTITLE: Weather Forecast JSON Response Example\nDESCRIPTION: Sample JSON response from the WeatherForecast endpoint showing weather data structure.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-aspnet-core.md#2025-04-23_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n    {\"date\":\"2019-11-07T23:31:57.0527092+00:00\",\"temperatureC\":4,\"temperatureF\":39,\"summary\":\"Bracing\"},\n    {\"date\":\"2019-11-08T23:31:57.0539243+00:00\",\"temperatureC\":-19,\"temperatureF\":-2,\"summary\":\"Freezing\"},\n    {\"date\":\"2019-11-09T23:31:57.0539269+00:00\",\"temperatureC\":2,\"temperatureF\":35,\"summary\":\"Freezing\"},\n    {\"date\":\"2019-11-10T23:31:57.0539275+00:00\",\"temperatureC\":-4,\"temperatureF\":25,\"summary\":\"Freezing\"},\n    {\"date\":\"2019-11-11T23:31:57.053928+00:00\",\"temperatureC\":9,\"temperatureF\":48,\"summary\":\"Bracing\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Language Mode in Embedded HTML\nDESCRIPTION: Defines a CSS language mode that handles language requests in CSS regions by creating virtual CSS documents and using the CSS language service to process them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/embedded-languages.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getCSSMode(\n  cssLanguageService: CSSLanguageService,\n  documentRegions: LanguageModelCache<HTMLDocumentRegions>\n): LanguageMode {\n  return {\n    getId() { return 'css' },\n    doComplete(document: TextDocument, position: Position) {\n      // Get virtual CSS document, with all non-CSS code replaced with whitespace\n      const embedded = documentRegions.get(document).getEmbeddedDocument('css')\n      // Compute a response with vscode-css-languageservice\n      const stylesheet = cssLanguageService.parseStylesheet(embedded)\n      return cssLanguageService.doComplete(embedded, position, stylesheet)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global HTTP and HTTPS Proxies for Remote SSH in VS Code (JSON)\nDESCRIPTION: This snippet shows how to set global HTTP and HTTPS proxies for all hosts in the Remote - SSH extension settings. It uses the 'remote.SSH.httpProxy' and 'remote.SSH.httpsProxy' settings with single proxy URLs for all connections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_98.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remote.SSH.httpProxy\": \"http://proxy.example.com:8080\",\n    \"remote.SSH.httpsProxy\": \"https://proxy.example.com:8080\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Video List in HTML\nDESCRIPTION: This HTML snippet creates an unordered list of video links, each containing a thumbnail image, title, description, and duration. It's used to display the introductory videos for Visual Studio Code in a structured format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/introvideos.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"video-list\">\n\t<li class=\"video\">\n            <a href=\"/docs/introvideos/basics\">\n\t\t\t<img src=\"/assets/docs/getstarted/introvideos/getting-started.png\" alt aria-hidden=\"true\" class=\"thumb\"/>\n\t\t\t<div class=\"info\">\n                <h2 class=\"title faux-h3\">Getting Started</h2>\n\t\t\t\t<p class=\"description\">Set up and learn the basics of Visual Studio Code.</p>\n\t\t\t\t<span class=\"duration\"><span class=\"sr-only\">Duration </span>7<span aria-hidden=\"true\"> min</span><span class=\"sr-only\"> minutes</span></span>\n\t\t\t</div>\n\t\t</a>\n\t</li>\n\t<!-- Additional list items for other videos -->\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining UI Visualizer Item Type in XSD\nDESCRIPTION: This XSD complexType, named `UIVisualizerItemType`, defines an element that specifies a UI visualizer capable of handling objects of a certain type. It extends a simple string content and requires two attributes: `ServiceId` (the GUID of the visualizer service) and `Id` (an integer to differentiate multiple viewers from the same service). This links a type visualization to a pre-defined UI visualizer within the Natvis file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"UIVisualizerItemType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a UI visualizer which can handle objects of this type. The UI visualizer must be previously defined in the natvis file.</xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"xs:string\">\n        <xs:attribute name=\"ServiceId\" type=\"GuidType\" use=\"required\">\n          <xs:annotation>\n            <xs:documentation>The service GUID of the visualizer.</xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n        <xs:attribute name=\"Id\" type=\"xs:int\" use=\"required\">\n          <xs:annotation>\n            <xs:documentation>Specifies the visualizer id. Use to differentiate multiple viewers provided by the visualizer service.</xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Profile for New Windows\nDESCRIPTION: A setting that specifies which profile should be used when opening a new VS Code window, instead of using the active window's profile or default profile.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"window.newWindowProfile\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Notebook Variables View\nDESCRIPTION: JSON configuration to enable the experimental variable view in notebooks that displays variables from notebook kernels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"notebook.experimental.variablesView\": true\n```\n\n----------------------------------------\n\nTITLE: Identifier for Auto Save Setting in VS Code (JSON)\nDESCRIPTION: This setting identifier, `files.autoSave`, refers to the VS Code configuration option that controls the automatic saving of files. Its value can be toggled via the 'File' > 'Auto Save' menu item or set directly in `settings.json` to values like `off`, `afterDelay`, `onFocusChange`, or `onWindowChange`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nfiles.autoSave\n```\n\n----------------------------------------\n\nTITLE: Comparing Authentication API Calls in VS Code\nDESCRIPTION: Code comparison showing two authentication getSession calls with different option parameters: createIfNone and forceNewSession.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.authentication.getSession(provider, scopes, { createIfNone: options });\nvscode.authentication.getSession(provider, scopes, { forceNewSession: options });\n```\n\n----------------------------------------\n\nTITLE: Enabling Return Type Inlay Hints in TypeScript JSON Settings\nDESCRIPTION: This JSON setting enables or disables the display of inlay hints for the return types of functions in TypeScript files within VS Code, specifically when the return type is not explicitly annotated. Set to `true` to enable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ntypescript.inlayHints.functionLikeReturnTypes.enabled\n```\n\n----------------------------------------\n\nTITLE: Verifying publisher credentials with vsce\nDESCRIPTION: This command logs in to the VS Code Marketplace using vsce, verifying the publisher credentials. It requires the publisher ID and a Personal Access Token for authentication.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvsce login <publisher id>\n\nhttps://marketplace.visualstudio.com/manage/publishers/\nPersonal Access Token for publisher '<publisher id>': ****************************************************\n\nThe Personal Access Token verification succeeded for the publisher '<publisher id>'.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hit Count Conditional Breakpoints in Node.js Debugging\nDESCRIPTION: Examples of hit count conditions for breakpoints in Node.js debugging. The syntax includes operators like <, <=, =, >, >=, % followed by an integer, or just an integer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_7.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n>10 // break always after 10 hits\n<3 // break on the first two hits only\n10 // same as >=10\n%2 // break on every other hit\n```\n\n----------------------------------------\n\nTITLE: Suggested Deployment Prompts\nDESCRIPTION: Example prompts for deploying applications and checking service availability\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/11/15/introducing-github-copilot-for-azure.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@azure Can you help me build an RAG chat app with GPT-4o?\n@azure List the regions where GPT-4o is available\n```\n\n----------------------------------------\n\nTITLE: VS Code Documentation Links in Markdown\nDESCRIPTION: Markdown links to additional VS Code documentation covering unit testing, integrated terminal usage, and remote development setup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [Discover and run unit tests for your code](/docs/debugtest/testing.md)\n\n- [Use the integrated terminal](/docs/terminal/getting-started.md)\n\n- [Set up a remote development environment](/docs/remote/remote-overview.md)\n```\n\n----------------------------------------\n\nTITLE: Allowlisting C# Dev Kit License Entitlement URL\nDESCRIPTION: This URL needs to be added to a firewall's allowlist to resolve issues where a license cannot be retrieved after successfully signing in. This allows VS Code to communicate with the Visual Studio subscription service to verify entitlements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/signing-in.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.subscriptions.visualstudio.microsoft.com/Me/Entitlements/IDEBenefits\n```\n\n----------------------------------------\n\nTITLE: Linking In-Product Release Notes CSS in HTML\nDESCRIPTION: This HTML snippet includes a CSS stylesheet specific to in-product release notes pages. The snippet links to 'css/inproduct_releasenotes.css', which must exist in the correct path for styles to apply properly. There are no parameters, and the snippet is intended for use in the head or body of an HTML document that renders release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/inproduct_releasenotes.css\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Listing New VS Code Editor Commands and IDs\nDESCRIPTION: Provides a list of newly introduced commands in Visual Studio Code, including their keyboard shortcuts (represented by `kb(...)`), descriptions, and unique command identifiers used for keybindings or programmatic execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nKey|Command|Command id\n---|-------|----------\n`kb(workbench.action.navigateToLastEditLocation)`|Navigate to the last location edited|`workbench.action.navigateToLastEditLocation`\n`kb(workbench.action.files.saveWithoutFormatting)`|Save file without running save participants (formatters, etc.)|`workbench.action.files.saveWithoutFormatting`\n`kb(workbench.action.closeEditorInAllGroups)`|Close the active file across all editor groups|`workbench.action.closeEditorInAllGroups`\n`kb(toggle.diff.renderSideBySide)`|Toggle diff editor inline and side-by-side mode (deprecates `toggle.diff.editorMode`)|`toggle.diff.renderSideBySide`\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributor List\nDESCRIPTION: A formatted markdown list of contributors and their contributions to the VS Code project, including pull request references and descriptions of changes made.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n## Thank you\n\nLast but certainly not least, a big *__Thank You!__* to the following folks that helped to make VS Code even better:\n\nContributions to `vscode`:\n\n* [kaoru (@0x6b)](https://github.com/0x6b): Lowercase 'For' in 'Checking For Updates...' menu item [PR #77972](https://github.com/microsoft/vscode/pull/77972)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Extension Development Dependencies\nDESCRIPTION: DevDependencies configuration for JavaScript-based VS Code extension development, including TypeScript for JavaScript authoring and ESLint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n    \"typescript\": \"^2.0.3\",\n    \"vscode\": \"^1.0.0\",\n    \"mocha\": \"^2.3.3\",\n    \"eslint\": \"^3.6.0\",\n    \"@types/node\": \"^6.0.40\",\n    \"@types/mocha\": \"^2.2.32\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Snippet Whitespace Normalization Options\nDESCRIPTION: Examples showing how snippet whitespace normalization can be controlled with the keepWhitespace option, affecting indentation in multi-line snippets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst snippet = `This is an indented\n    snippet`;\n\n// keepWhitespace: false, undefined\nfunction indentedFunctionWithSnippet() {\n    return `This is an indented\n        snippet`; // adjusted indentation\n}\n\n// keepWhitespace: true\nfunction indentedFunctionWithSnippet() {\n    return `This is an indented\n    snippet`; // original indentation\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling VS Code Startup Performance via Command Line (Shell)\nDESCRIPTION: Command-line option to launch VS Code with startup profiling enabled. Executing `code --prof-startup` generates performance profiles for the main and renderer processes, storing them in the user's home directory. These profiles can be shared to help diagnose and improve VS Code startup performance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncode --prof-startup\n```\n\n----------------------------------------\n\nTITLE: Configuring postCreateCommand in devcontainer.json\nDESCRIPTION: This snippet shows how to use the postCreateCommand property in devcontainer.json to run a bash script for installing dependencies after the container is created.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"bash scripts/install-dependencies.sh\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Terminal Environment Variables - VS Code Proposed API - TypeScript\nDESCRIPTION: Illustrates how an extension can programmatically modify terminal environment variables at startup using VS Code's proposed API. The snippet shows platform-aware path concatenation and variable replacement. Dependencies: VS Code Insiders, proposed API enabled and imported, and appropriate permissions for modifying environment variables. Inputs include the variable name and the value to prepend or replace; changes persist per extension or workspace as configured. Outputs affect the environment seen by subsequently launched terminals. Limited to non-published development extensions until API finalization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst collection = window.getEnvironmentVariableCollection(true);\nconst separator = process.platform === 'win32' ? ';' : ':';\ncollection.prepend('PATH', `/foo${separator}`);\ncollection.replace('JAVA_HOME', '/bar');\n```\n\n----------------------------------------\n\nTITLE: Defining Application LogLevel in VS Code env Namespace (TypeScript)\nDESCRIPTION: TypeScript definition showing proposed additions to the `vscode.env` namespace within the VS Code API. It introduces a global read-only `logLevel` property representing the application's current log level and an `onDidChangeLogLevel` event (of type `Event<LogLevel>`) that fires when this global application log level changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace env {\n\n    /**\n     * The current log level of the application.\n     */\n    export const logLevel: LogLevel;\n\n    /**\n     * An {@link Event} which fires when the log level of the application changes.\n     */\n    export const onDidChangeLogLevel: Event<LogLevel>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select All Keybinding for Terminal in JSON\nDESCRIPTION: Defines a custom keyboard shortcut in `keybindings.json` to map `Ctrl+A` to the 'Terminal: Select All' command (`workbench.action.terminal.selectAll`). This binding is specifically applied when the terminal has focus (`terminalFocus`) and the operating system is not macOS (`!isMac`), avoiding conflicts with potential shell hotkeys on Windows and Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+a\",\n  \"command\": \"workbench.action.terminal.selectAll\",\n  \"when\": \"terminalFocus && !isMac\"\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Packages using apt-get with sudo (Bash)\nDESCRIPTION: This Bash script shows commands for installing software packages in a Debian/Ubuntu-based dev container using `apt-get` when running as a non-root user with `sudo` privileges. It first updates the package list (`sudo apt-get update`) and then installs a specified package (`sudo apt-get install <package>`), requiring the user to replace `<package>` with the desired package name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# If sudo is installed and configured\nsudo apt-get update\nsudo apt-get install <package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Profile Settings in JSON\nDESCRIPTION: VS Code settings JSON for the Angular profile template. Includes settings similar to the Node.js profile (format on paste, Git autofetch, formatters) and additionally sets the Material Icon Theme as the active workbench icon theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/profiles.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.formatOnPaste\": true,\n    \"git.autofetch\": true,\n    \"[markdown]\":  {\n        \"editor.wordWrap\": \"on\"\n    },\n    \"[json]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[jsonc]\": {\n        \"editor.defaultFormatter\": \"vscode.json-language-features\"\n    },\n    \"[html]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[javascript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[typescript]\": {\n        \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"workbench.iconTheme\": \"material-icon-theme\"\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Proposed APIs\nDESCRIPTION: Required configuration in an extension's package.json file to enable the use of proposed APIs. Developers must add this setting to test proposed APIs in VS Code Insiders builds.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Checking in JavaScript File\nDESCRIPTION: Shows how to disable TypeScript type checking for an entire JavaScript file using a comment directive. This allows opting out of type checking when needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-nocheck\nlet easy = 'abc'\neasy = 123 // No error\n```\n\n----------------------------------------\n\nTITLE: Disabling DevCert Check in Visual Studio Code Debug Settings\nDESCRIPTION: This snippet shows how to disable the automatic check for a self-signed HTTPS certificate used in web project development. This can be useful when you don't want the debugger to prompt for certificate creation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n    \"checkForDevCert\": \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Highlight Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling document symbol highlighting functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"documentHighlightProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking External Stylesheet for Release Notes in HTML\nDESCRIPTION: This HTML snippet links an external Cascading Style Sheet (CSS) file named `inproduct_releasenotes.css` located in the relative `css` directory. It uses the standard `<link>` tag with `rel=\"stylesheet\"` to apply styling rules defined in the CSS file to the HTML document, specifically intended for formatting in-product release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Extending Diagnostics with Link Targets in VS Code API (TypeScript)\nDESCRIPTION: This class-style snippet outlines the Diagnostic structure with added support for a code property that includes an identifier and an associated URI target. This allows links to further information about a diagnostic to be embedded in diagnostics. Intended for use in diagnostic and code action related extension code, it requires the VS Code API and proper URI construction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Diagnostic {\n  ...\n\n  /**\n   * A code or identifier for this diagnostic.\n   * Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).\n   */\n  code?: string | number | {\n    /**\n     * A code or identifier for this diagnostic.\n     * Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).\n     */\n    value: string | number;\n\n    /**\n     * A target URI to open with more information about the diagnostic error.\n     */\n    target: Uri;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Version Manager in VS Code\nDESCRIPTION: JSON configuration for specifying the Ruby version manager (rbenv) in VS Code settings\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rubyLsp.rubyVersionManager\": {\n    \"identifier\": \"rbenv\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Organize Imports (Previous Behavior)\nDESCRIPTION: Example showing how the Organize Imports command previously worked, sorting all imports alphabetically regardless of grouping, which resulted in losing the logical organization of imports.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// local code\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\n// built-ins\nimport * as path from \"path\";\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Sticky Scroll Transparency in VS Code\nDESCRIPTION: JSON configuration for customizing the terminal sticky scroll background transparency in VS Code themes. This snippet shows how to set a semi-transparent background for the terminal sticky scroll feature in the Default Dark Modern theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"[Default Dark Modern]\": {\n      \"terminalStickyScroll.background\": \"#181818c0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Tab Sizing in Visual Studio Code\nDESCRIPTION: JSON configuration for setting fixed tab sizing in VS Code. Includes settings for enabling fixed tab sizing and setting the maximum width of fixed-size tabs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"workbench.editor.tabSizing\": \"fixed\",\n  \"workbench.editor.tabSizingFixedMaxWidth\": 160\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Debug Session Programmatically in VS Code Extension\nDESCRIPTION: Shows how to programmatically start a debug session using the vscode.startDebug command API. The example demonstrates launching a Node.js debug configuration with custom parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    let launchConfig = {\n        type: \"node\",\n        request: \"launch\",\n        program: \"${workspaceRoot}/test.js\",\n        cwd: \"${workspaceRoot}\"\n    };\n\n    vscode.commands.executeCommand('vscode.startDebug', launchConfig).then(() => {\n        vscode.window.showInformationMessage('Debug session started successfully');\n    }, err => {\n        vscode.window.showInformationMessage('Error: ' + err.message);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Boolean Setting with Compact Description\nDESCRIPTION: Example of a boolean setting with a compact description for gutter blame annotations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitMagic.blame.compact\": {\n    \"type\": \"boolean\",\n    \"description\": \"Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for JavaScript\nDESCRIPTION: JSON configuration to disable unused code highlighting in JavaScript and JSX files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/javascript.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"[javascript]\": {\n    \"editor.showUnused\":  false\n},\n\"[javascriptreact]\": {\n    \"editor.showUnused\":  false\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Project Manager Base Folders in VS Code\nDESCRIPTION: JSON configuration to specify the base project folders for Git Project Manager extension in VS Code settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/10/31/js_roundup_2.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"gitProjectManager.baseProjectsFolders\": [\n    \"/path/to/your/base/project/folders\"\n]\n```\n\n----------------------------------------\n\nTITLE: Styling Flask Web Application\nDESCRIPTION: CSS styles for the web application defining navbar appearance and body content formatting. Includes styles for navigation elements and basic layout parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.navbar {\n    background-color: lightslategray;\n    font-size: 1em;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: white;\n    padding: 8px 5px 8px 5px;\n}\n\n.navbar a {\n    text-decoration: none;\n    color: inherit;\n}\n\n.navbar-brand {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.navbar-item {\n    font-variant: small-caps;\n    margin-left: 30px;\n}\n\n.body-content {\n    padding: 5px;\n    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing JIT Optimizations in Debugger (JSON)\nDESCRIPTION: This snippet shows how to use the 'suppressJITOptimizations' property to request that the Just-In-Time (JIT) compiler disable optimizations in loaded modules. This option helps when debugging third-party or release-compiled DLLs to improve variable inspection and step accuracy. Set to true to suppress optimizations; may slow down debugging, and has no effect on pre-JIT-compiled (ngen'ed) DLLs or loaded modules on attach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"suppressJITOptimizations\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pseudoterminal with Name Change Events\nDESCRIPTION: TypeScript implementation of a Pseudoterminal that allows changing the terminal title through input handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeEmitter = new EventEmitter<string>();\nconst nameEmitter = new EventEmitter<string>();\nconst pty = {\n    onDidWrite: writeEmitter.event,\n    open: () => writeEmitter.fire('Type to change the title of the terminal'),\n    close: () => { /* noop*/ },\n    handleInput: (data: string) => nameEmitter.fire(data)\n};\nconst terminal = vscode.window.createTerminal({\n    name: `My Terminal`,\n    pty\n});\nterminal.show();\n```\n\n----------------------------------------\n\nTITLE: Configuring Prompt File Locations with Glob Patterns in VS Code\nDESCRIPTION: This JSON-like glob pattern configuration, used within the `chat.promptFilesLocations` VS Code setting, allows specifying directories or files containing reusable prompts. The example `{ \"**\": true }` includes all files matching the pattern (implicitly `.prompt.md` files based on context) within the current workspace and its subdirectories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"**\": true }\n```\n\n----------------------------------------\n\nTITLE: Disabling Local History Feature in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet represents a VS Code setting. Setting `\"workbench.localHistory.enabled\"` to `false` disables the built-in Local History feature, preventing VS Code from automatically tracking changes to files. This is relevant to PR #212936 which hides related UI commands when this setting is applied.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.localHistory.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Enabling the Simple File Picker\nDESCRIPTION: Sets the `files.simpleDialog.enable` setting to `true` to enable the simple file picker dialog, which is an alternative file picker used in specific scenarios like remote connections or when explicitly enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(files.simpleDialog.enable:true)\n```\n\n----------------------------------------\n\nTITLE: Defining LinkedListItemsType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for specifying linked list views of variable contents. It includes elements for size, head pointer, next pointer, and value node, with detailed annotations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_23\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"LinkedListItemsType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a linked list view of the contents of a variable.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Size\" type=\"SizeType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the number of elements in the linked list. If multiple size elements are specified, the first size element with a true condition (or no condition) will\n          determine the size. If no size is specified (or all size elements have a false condition), the debugger will traverse the list to figure out the size. It is recommended that natvis entries\n          specify a size for linked lists when possible, as providing a size will improve the performance of the debugger.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"HeadPointer\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the first node of the linked list.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"NextPointer\" type=\"StringType\">\n        <xs:annotation>\n          <xs:documentation>Expression that points to the next element. This expression is evaluated under the context of the linked list node and not the parent linked list type.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element maxOccurs=\"1\" name=\"ValueNode\" type=\"ListItemsNodeType\">\n      </xs:element>\n    </xs:sequence>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: IntelliSense Keyboard Shortcuts in VS Code\nDESCRIPTION: This markdown table lists the default keyboard shortcuts for common IntelliSense actions in VS Code, including triggering suggestions and toggling suggestion details.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/intellisense.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Keybinding |\n| --- | --- |\n| `editor.action.triggerSuggest` | `kb(editor.action.triggerSuggest)` |\n| `toggleSuggestionDetails` | `kb(toggleSuggestionDetails)` |\n| `toggleSuggestionFocus` | `kb(toggleSuggestionFocus)` |\n```\n\n----------------------------------------\n\nTITLE: Disabling JSX Auto Closing Tags in TypeScript JSON Settings\nDESCRIPTION: This JSON setting controls whether VS Code automatically closes JSX tags as you type in `.tsx` files. Setting `typescript.autoClosingTags` to `false` disables this feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.autoClosingTags\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Legacy Auto Save Option via Menu\nDESCRIPTION: This menu path (`File | Auto Save`) represents the previous method for toggling the auto-save feature in VS Code. This UI toggle has been superseded by more granular settings in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nFile | Auto Save\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Indentation Settings\nDESCRIPTION: JSON configuration to set default indentation preferences, specifying space-based indentation and tab size.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 4,\n```\n\n----------------------------------------\n\nTITLE: Defining Task Schema in package.json\nDESCRIPTION: JSON schema definition for Rake tasks that specifies required and optional properties for task identification\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/task-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"taskDefinitions\": [\n    {\n        \"type\": \"rake\",\n        \"required\": [\n            \"task\"\n        ],\n        \"properties\": {\n            \"task\": {\n                \"type\": \"string\",\n                \"description\": \"The Rake task to customize\"\n            },\n            \"file\": {\n                \"type\": \"string\",\n                \"description\": \"The Rake file that provides the task. Can be omitted.\"\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Showing File Open Dialog using VS Code API in TypeScript\nDESCRIPTION: Demonstrates how to use the `vscode.window.showOpenDialog` function from the VS Code extension API to prompt the user to select one or more image files (`.png`, `.jpg`). It configures the dialog to allow multiple selections (`canSelectMany: true`) and specifies file filters. The result, an array of URIs, is handled in a promise callback, logging the count of selected files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nvscode.window.showOpenDialog({\n    canSelectMany: true,\n    filters: { 'Images': ['png', 'jpg'] }\n}).then(result => {\n    if (result) {\n        console.log(`${result.length} files have been selected`);\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Select Modifier in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to change the multi-selection modifier in VS Code from the default Ctrl/Cmd key to the Alt key. This setting affects how users select multiple items in lists and trees throughout VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.list.multiSelectModifier\": \"alt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel View Labels in VS Code Settings\nDESCRIPTION: This setting controls whether view labels are displayed in the Panel area of VS Code. When set to false, icons are shown instead of labels to conserve space.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.panel.showLabels\": false\n```\n\n----------------------------------------\n\nTITLE: Debug Protocol Extension Implementation\nDESCRIPTION: Debug protocol extensions including Restart Frame capability, Variable Paging support, Continued Event handling, Source Request MIME type support, and Variable Type client capability. These extensions enhance the debugging experience in VSCode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsupportsRestartFrame\nrestartFrame\nStoppedEvent\nsupportsVariablePaging\nindexedVariables\nnamedVariables\nvariablesReference\nContinueEvent\nmimeType\nsupportsVariableType\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Math in Markdown Preview - Markdown\nDESCRIPTION: Demonstrates how to write inline math equations within a Markdown file in VS Code using single dollar sign delimiters. Relies on KaTeX support in the built-in Markdown preview and the 'markdown.math.enabled' setting being true. The code expects mathematical expressions to be placed between dollar signs for inline rendering within text. Output is a typeset inline formula in the Markdown preview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nInline math: $x^2$\n```\n\n----------------------------------------\n\nTITLE: SonarLint Extension Usage\nDESCRIPTION: Illustration of SonarLint extension performing real-time code analysis and providing quick fixes for JavaScript code issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: gif\nCODE:\n```\nsonarlint.gif\n```\n\n----------------------------------------\n\nTITLE: Terminal Creation with Custom Message\nDESCRIPTION: Shows how to create a terminal with a custom message displayed before process launch using the new TerminalOptions.message API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.createTerminal({\n message: '\\x1b[3;1mSome custom message\\x1b[0m'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-detected Tasks in tasks.json (JSON)\nDESCRIPTION: This JSON snippet shows an example `tasks.json` file generated by VS Code's 'Configure Tasks' command using auto-detection. It defines a default build task that runs 'npm install'. The `version` property specifies the task schema version, and the `tasks` array contains task definitions, including type, script, and group properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"npm\",\n            \"script\": \"install\",\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diff Editor Moved Code Detection\nDESCRIPTION: Settings to enable moved code detection in diff editor which shows arrows indicating code block movements within the same file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"diffEditor.experimental.showMoves\": true\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Language-specific Settings via VS Code API - TypeScript\nDESCRIPTION: Demonstrates how to access and update language-specific configuration settings using the VS Code workspace API in TypeScript. The snippet shows how to retrieve configuration objects for a given resource and language ID, get a boolean setting, perform an update (optionally global and language-specific), and listen for changes via event handlers. Dependencies include the 'vscode' module, and correct values for 'resource' and 'languageId' are required. Useful for extensions that adapt behavior based on language context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Read language configuration.\n */\nconst textDocumentConfiguration = vscode.workspace.getConfiguration('sample', {resource, languageId});\ntextDocumentConfiguration.get('languageSetting');\n\n/**\n * Override configuration under language\n */\ntextDocumentConfiguration.update('languageSetting', false, ConfigurationTarget.Global, true);\n\n/**\n * Listen language configuration changes\n */\nworkspace.onDidChangeConfiguration(e => {\n    if(e.affectsConfiguration('sample.languageSetting',  {resource, languageId}) {\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Identifying the Rerun Task Action Command ID in VS Code\nDESCRIPTION: This identifier (`workbench.action.tasks.rerunForActiveTerminal`) represents the command ID for the 'Rerun Task' action in VS Code. This action reruns the last task executed in the currently active terminal and can be triggered via the terminal tab's toolbar, context menu, or custom keybindings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.action.tasks.rerunForActiveTerminal)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Proxy Login Dialog (Deprecated)\nDESCRIPTION: The VS Code setting `window.enableExperimentalProxyLoginDialog`. Setting this to `true` would revert to the older proxy login dialog. This setting was intended for temporary use during the transition and is planned for removal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\nwindow.enableExperimentalProxyLoginDialog\n```\n\n----------------------------------------\n\nTITLE: Specifying Workspace Folder in devcontainer.json for Docker Compose (JSON)\nDESCRIPTION: This `devcontainer.json` snippet sets the `workspaceFolder` property. This is required when using Docker Compose to ensure VS Code correctly identifies the primary source code directory inside the container, especially when volume mounts map the local source to a specific path like `/workspace`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceFolder\": \"/workspace\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default UI Strings in package.nls.json\nDESCRIPTION: This JSON snippet shows the contents of a `package.nls.json` file. It provides the default (typically English) values for localization keys referenced in `package.json`. In this example, it defines the string \"Hello World\" for the key `my-extension.helloWorld.title`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  // That same key from the package.json\n  \"my-extension.helloWorld.title\": \"Hello World\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Command Visibility in the Command Palette\nDESCRIPTION: This JSON snippet demonstrates how to use the 'menus.commandPalette' contribution point to specify when a command should be shown in the Command Palette, based on a when clause.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/command.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"commandPalette\": [\n        {\n          \"command\": \"myExtension.sayHello\",\n          \"when\": \"editorLangId == markdown\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Port Detection Behavior in VS Code Remote\nDESCRIPTION: This JSON snippet shows how to use the 'remote.otherPortsAttributes' setting to configure the default behavior for auto-forwarded ports that aren't explicitly configured. It sets all other detected ports to be silently forwarded without notifications or opening.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_55.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remote.otherPortsAttributes\": {\n        \"onAutoForward\": \"silent\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Package Reference using .NET CLI (Shell)\nDESCRIPTION: Mentions the `dotnet remove package` command-line tool for removing an existing package reference (like a NuGet package) from a C# project. This CLI command is necessary as the Solution Explorer UI lacks this functionality. Requires the .NET SDK/CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/project-management.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet remove package\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Button (HTML)\nDESCRIPTION: This HTML code defines an anchor tag styled as a button to scroll the user to the top of the page. It uses `id=\"scroll-to-top\"`, `role=\"button\"`, and ARIA attributes for accessibility. The `href=\"#\"` targets the top of the page, and the `span` likely holds a CSS-based icon.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet BEM Preferences in JSON\nDESCRIPTION: Configuration for Emmet BEM (Block Element Modifier) preferences in VS Code. This older format example shows how to customize the 'filter.commentAfter' preference in Emmet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.preferences\": {\n    \"filter.commentAfter\": \"\\n<!-- /<%= attr('id', '#') %><%= attr('class', '.') %> -->\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Terminal Executables in VS Code Settings (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to customize the external terminal application launched by Visual Studio Code. It sets 'powershell' as the executable for Windows (`terminal.external.windowsExec`) and 'terminator' for Linux (`terminal.external.linuxExec`) within the VS Code user or workspace settings. This configuration allows users to specify their preferred shell when using commands like 'Open in Command Prompt' or 'Open in Terminal'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vApril.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"terminal.external.windowsExec\": \"powershell\",\n    \"terminal.external.linuxExec\": \"terminator\"\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Stylish Output Example (Bash)\nDESCRIPTION: Sample output from ESLint in stylish mode, demonstrating multiline problem reporting that requires a more complex problem matcher.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ntest.js\n  1:0   error  Missing \"use strict\" statement                 strict\n✖ 1 problems (1 errors, 0 warnings)\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Name Mangling Example\nDESCRIPTION: Demonstrates how name mangling transforms long variable names into shorter ones during minification to reduce code size.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/07/20/mangling-vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst someLongVariableName = 123;\nconsole.log(someLongVariableName);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 123;\nconsole.log(x);\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Color Preview Example\nDESCRIPTION: CSS code example showing color variable completion with color swatch preview functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Example of color variable completion with preview */\n:root {\n  --primary-color: #0066cc;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code with GPU Acceleration Disabled (Bash)\nDESCRIPTION: This command launches Visual Studio Code with GPU hardware acceleration disabled, which can resolve issues where VS Code displays a blank main window due to GPU compatibility problems.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode --disable-gpu\n```\n\n----------------------------------------\n\nTITLE: Creating Deprecated Diagnostics with DiagnosticTag in VS Code\nDESCRIPTION: TypeScript function that creates diagnostics with the Deprecated tag, causing the flagged text to be displayed with a strike-through line in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet diagnostics = vscode.languages.createDiagnosticCollection('Sample Errors');\nlet validate = (editor: vscode.TextEditor | undefined) => {\n    if (!editor) {\n        return;\n    }\n    let result: vscode.Diagnostic[] = [];\n    for (let line = 0; line < editor.document.lineCount; line++) {\n        let pos = 0;\n        while ((pos = editor.document.lineAt(line).text.indexOf('guys', pos)) >= 0) {\n            let diag = new vscode.Diagnostic(new vscode.Range(line, pos, line, pos + 'guys'.length), 'This is deprecated, use \"folks\", \"people\", or \"you all\" instead.');\n            diag.severity = vscode.DiagnosticSeverity.Warning;\n            diag.tags = [vscode.DiagnosticTag.Deprecated];\n            result.push(diag);\n            pos += 'guys'.length;\n        };\n    }\n    diagnostics.set(editor.document.uri, result);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Math Block Equations in Markdown Preview - Markdown\nDESCRIPTION: Demonstrates writing a multi-line math block in a Markdown file using double dollar sign delimiters. Requires VS Code's built-in Markdown preview with KaTeX enabled, and works when the 'markdown.math.enabled' setting is true. The code expects block-level mathematical expressions enclosed within double dollar signs, which will be rendered as displayed math in the Markdown preview.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nMath block:\\n\\n$$\\n\\\\displaystyle\\n\\\\left( \\\\sum_{k=1}^n a_k b_k \\\\right)^2\\n\\\\leq\\n\\\\left( \\\\sum_{k=1}^n a_k^2 \\\\right)\\n\\\\left( \\\\sum_{k=1}^n b_k^2 \\\\right)\\n$$\n```\n\n----------------------------------------\n\nTITLE: Documenting a Reusable Form Generation Task with Markdown (Markdown)\nDESCRIPTION: This Markdown snippet provides a prompt for generating a new React form component. It lists the required form generation steps and best practices, such as using components from a specific design system, integrating react-hook-form for state management, using TypeScript typings for form data, applying the 'uncontrolled' pattern, specifying defaultValues, and leveraging yup for validation with separate schema files. The snippet is intended for documentation or as a prompt in Copilot and assumes the presence of React, react-hook-form, yup, and TypeScript in the project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/copilot-customization.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nYour goal is to generate a new React form component.\n\nAsk for the form name and fields if not provided.\n\nRequirements for the form:\n* Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)\n* Use `react-hook-form` for form state management:\n* Always define TypeScript types for your form data\n* Prefer *uncontrolled* components using register\n* Use `defaultValues` to prevent unnecessary rerenders\n* Use `yup` for validation:\n* Create reusable validation schemas in separate files\n* Use TypeScript types to ensure type safety\n* Customize UX-friendly validation rules\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Decorations in VS Code Terminal\nDESCRIPTION: This JSON snippet shows how to disable command decorations in the VS Code integrated terminal, which can be useful if unwanted decorations are appearing due to system-wide shell integration scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shellIntegration.decorationsEnabled\": never\n```\n\n----------------------------------------\n\nTITLE: TypeScript Group-Aware Organize Imports (New Behavior)\nDESCRIPTION: Example demonstrating the new TypeScript 4.7 feature where Organize Imports maintains logical groups while sorting imports alphabetically within each group, preserving the organizational structure.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// local code\nimport * as aaa from \"./aaa\";\nimport * as bbb from \"./bbb\";\nimport * as ccc from \"./ccc\";\n\n// built-ins\nimport * as child_process from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// some code...\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable for Docker-Run - VS Code Tasks - JSON\nDESCRIPTION: This snippet configures the environment of the Docker container by setting the DEBUG env var to * within a docker-run task in VS Code’s tasks.json. It ensures the debug logging module will output all namespace logs, aiding VS Code debug console diagnostics. Intended for insertion in tasks.json as part of a docker-run task. This only affects the container environment during launch.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-node.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"type\": \"docker-run\",\n            \"label\": \"docker-run: debug\",\n            \"dependsOn\": [\n                \"docker-build\"\n            ],\n            \"dockerRun\": {\n                \"env\": {\n                    \"DEBUG\": \"*\"\n                }\n            },\n            \"node\": {\n                \"enableDebugging\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Colors for Decorations in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use `vscode.ThemeColor` to reference a theme color (e.g., `editorWarning.foreground`) when defining a text editor decoration using `vscode.window.createTextEditorDecorationType`. This approach allows the decoration's color to adapt to the user's current theme, which is preferred over hardcoding color values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n  var decorationType = vscode.window.createTextEditorDecorationType({\n      before: {\n          contentText: \"\\u26A0\",\n          color: new vscode.ThemeColor('editorWarning.foreground')\n      }\n  });\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-publish TypeScript Compilation\nDESCRIPTION: Package.json configuration showing how to add a pre-publish step that compiles TypeScript before packaging the extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"uuid\",\n  \"version\": \"0.0.1\",\n  \"publisher\": \"someone\",\n  \"engines\": {\n    \"vscode\": \"0.10.x\"\n  },\n  \"scripts\": {\n    \"vscode:prepublish\": \"tsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Renderer Scripts\nDESCRIPTION: TypeScript code showing how to set up renderer scripts in a notebook controller for enabling communication.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Controller {\n    // ...\n\n    readonly rendererScriptId = 'my-renderer-script';\n\n    constructor() {\n        // ...\n\n        this._controller.rendererScripts.push(new vscode.NotebookRendererScript(vscode.Uri.file(/* path to script */), rendererScriptId));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Element for Demonstrating Drop Into Editor Feature\nDESCRIPTION: HTML video element showing the proposed drop into editor API in action. The video demonstrates creating a link in a Markdown file using drag and drop functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"images/1_66/proposal-drop-into-editor.mp4\" autoplay loop controls muted title=\"Creating a link in a Markdown file using the proposed drop into editor API\"></video>\n```\n\n----------------------------------------\n\nTITLE: Contributing Code Action Documentation via CodeActionProviderMetadata - VS Code Extension API - TypeScript\nDESCRIPTION: Defines a TypeScript class implementing the vscode.CodeActionProvider interface and statically declares CodeActionProviderMetadata, including documentation entries for refactor actions. This snippet demonstrates how to attach external help links or documentation commands to code actions via the new documentation property. Dependencies include the vscode API and a predefined LearnMoreAboutRefactoringsCommand; key parameters are the command id, its localized title, and the CodeActionKind. The output manifests as selectable documentation in the VS Code UI after a refactor code action, improving discoverability of custom actions in extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TypeScriptRefactorProvider implements vscode.CodeActionProvider {\n\n  public static readonly metadata: vscode.CodeActionProviderMetadata = {\n    providedCodeActionKinds: [ vscode.CodeActionKind.Refactor ],\n    documentation: [\n      {\n        kind: vscode.CodeActionKind.Refactor,\n\n        // This command opens a webpage when executed\n        command: {\n          command: LearnMoreAboutRefactoringsCommand.id,\n          title: localize('refactor.documentation.title', \"Learn more about JS/TS refactorings\")\n        }\n      }\n    ]\n  };\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing WebviewPanelOptions to Custom Editors in TypeScript (Proposed API)\nDESCRIPTION: This snippet presents the proposed updated signature for the `registerWebviewEditorProvider` function in the VS Code API. It now accepts an optional `options` parameter of type `WebviewPanelOptions`. This allows extension developers creating custom editors to configure the underlying webview panel, for instance, to enable `retainContextWhenHidden`. Utilizing this feature requires opting into proposed APIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport function registerWebviewEditorProvider(\n  viewType: string,\n  provider: WebviewEditorProvider,\n  options?: WebviewPanelOptions\n): Disposable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Language-specific Settings for JavaScript and TypeScript\nDESCRIPTION: This JSON snippet shows how to apply the same settings to multiple languages at once. It sets the maxTokenizationLineLength parameter for both JavaScript and TypeScript files together.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"[javascript][typescript]\": {\n  \"editor.maxTokenizationLineLength\": 2500\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Right Click Behavior in VS Code\nDESCRIPTION: Settings configuration to enable right-clicking to select a word in the Integrated Terminal across different platforms. The setting can be set to \"selectWord\" to enable this behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"terminal.integrated.rightClickBehavior\": \"selectWord\"\n```\n\n----------------------------------------\n\nTITLE: Disabling JSDoc Completion Suggestions in TypeScript JSON Settings\nDESCRIPTION: This JSON setting controls whether VS Code suggests JSDoc comment completion templates when typing `/**` before functions or classes in TypeScript files. Setting it to `false` disables these suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.suggest.completeJSDocs\": false\n```\n\n----------------------------------------\n\nTITLE: File Icon Theme Configuration Examples\nDESCRIPTION: Demonstrates how to configure file icon themes with folder-specific associations for filenames, file extensions, and folder names.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"fileNames\": {\n    \"system/win.ini\": \"_win_ini_file\"\n  },\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"fileExtensions\": {\n    \"system/ini\": \"_ini_file\"\n  },\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"folderNames\": {\n    \".vscode/extensions\": \"_vscode_folder\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Removing a Project Reference using .NET CLI (Shell)\nDESCRIPTION: Mentions the `dotnet remove reference` command-line tool for removing an existing project reference from a C# project. This CLI command is used as the Solution Explorer doesn't provide UI actions for removing references. Requires the .NET SDK/CLI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/project-management.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet remove reference\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Import in Notebooks\nDESCRIPTION: Example showing how to use JavaScript imports within notebook output cells, demonstrating the new module-based evaluation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n%%javascript\nimport { myFunction } from './myModules.js';\n\nconsole.log(myFunction());\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Highlighting for TypeScript & JavaScript in VS Code - JSON\nDESCRIPTION: This snippet activates semantic highlighting for TypeScript and JavaScript files by setting 'editor.semanticHighlighting.enabled' to true in settings. It enhances syntax highlighting by differentiating identifiers such as classes, variables, and namespaces. Key parameter: boolean flag. No additional dependencies beyond a compatible VS Code version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"editor.semanticHighlighting.enabled\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Font Ligatures in VS Code Settings\nDESCRIPTION: JSON setting to enable font ligatures in VS Code editor. Requires a font that supports ligatures like Fira Code to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/06/20/great-looking-editor-roundup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.fontLigatures\": true\n```\n\n----------------------------------------\n\nTITLE: Running VS Code with Forced GPU Rasterization on macOS Sierra - Bash\nDESCRIPTION: This snippet provides a bash command that launches Visual Studio Code with the '--force-gpu-rasterization' flag enabled. This mode is intended to mitigate display artifacts on macOS Sierra (especially with custom color profiles) by forcing GPU rasterization. To use, simply run the command in a Terminal; there are no external dependencies aside from having VS Code installed and properly configured in the PATH as 'code'. The input is the system shell and the output is VS Code starting with the specified graphics mode enforced.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncode --force-gpu-rasterization\n\n```\n\n----------------------------------------\n\nTITLE: Granting D-Bus Permissions to VS Code Flatpak for KWallet Access\nDESCRIPTION: This command uses Flatpak to override user permissions for the Visual Studio Code Flatpak package (`com.visualstudio.code`). It specifically grants permission to talk to the `org.kde.kwalletd5` and `org.freedesktop.secrets` D-Bus services. This can resolve issues where the Flatpak version of VS Code cannot access the KWallet keyring for storing authentication tokens, a problem noted for some KDE users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nflatpak override --user --talk-name=org.kde.kwalletd5 --talk-name=org.freedesktop.secrets com.visualstudio.code\n```\n\n----------------------------------------\n\nTITLE: Executing Quick Open Command Programmatically\nDESCRIPTION: TypeScript code showing how to programmatically execute the Quick Open command with a prefix argument from an extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('workbench.action.quickOpen', 'my-prefix');\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Pointer Type Element in XSD\nDESCRIPTION: This XSD complexType, `SmartPointerType`, defines an element indicating that a type is a smart pointer. Its content specifies the expression to get the underlying pointer. It affects default display string, string view, and expansion behavior, inheriting them from the underlying pointer unless overridden. It requires a `Usage` attribute (of type `SmartPointerUsage`) to define supported operators and has an optional `DefaultExpansion` attribute (defaulting to true) to control automatic expansion based on the underlying pointer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"SmartPointerType\">\n    <xs:annotation>\n      <xs:documentation>\n        Indicates that the given type is a smart pointer. The text inside this element specifies the expression to evaluate the underlying pointer.\n        The &lt;SmartPointer&gt; element has the following effects:\n          - If no alternative &lt;DisplayString&gt; element is provided (or all &lt;DisplayString&gt; elements have failed conditions), the underlying pointer will be the display string\n          - If no alternative &lt;StringView&gt; element is provided (or all &lt;StringView&gt; elements have failed conditions), the underlying pointer will be the string view, if it has one.\n          - If no alternative &lt;Expand&gt; element is provided, the expansion of the smart pointer will be the expansion of the underlying pointer.\n          - The smart pointer class will also support overloaded operators as determined by the &lt;Usage&gt; attribute. You can opt out of this behavior by specifying\n              'DefaultExpansion=&quot;false&quot;'\n      </xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attributeGroup ref=\"CommonAttributes_NoCondition\" />\n        <xs:attribute name=\"Usage\" type=\"SmartPointerUsage\" use=\"required\">\n          <xs:annotation>\n            <xs:documentation>Indicates which combinations of operators this smart pointer object supports.\n            </xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n        <xs:attribute name=\"DefaultExpansion\" type=\"xs:boolean\" use=\"optional\">\n          <xs:annotation>\n            <xs:documentation>\n              If true and no expand element is provided, a default expansion will be supplied based on the expansion of the underlying pointer. If false, no &lt;Expand&gt; element will be automatically created\n              based on the smart pointer. If this attribute is not present, the default value is 'true'.\n            </xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Markdown Line Break Rendering Example\nDESCRIPTION: Example showing how the 'markdown.preview.breaks' setting affects the rendering of line breaks in Markdown preview. This setting determines whether single line breaks in paragraphs are ignored or converted to HTML <br> tags.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n# Hello world\n\nThis is the first sentence.\nThis is the second sentence.\n\nThis is the third sentence.\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Specific CSS in VS Code Webviews - CSS\nDESCRIPTION: This CSS snippet demonstrates how to target a specific VS Code theme for a webview using the data-vscode-theme-name attribute on the body element. When the active theme is 'One Dark Pro', the background is set to hotpink. This approach enables limited theme-specific styling for extension webviews in VS Code and requires an extension webview context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nbody[data-vscode-theme-name=\\\"One Dark Pro\\\"] {\\n    background: hotpink;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet Suggestions in VS Code settings.json\nDESCRIPTION: This snippet demonstrates how to configure the display of code snippets in the suggestion list using the editor.snippetSuggestions setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/intellisense.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.snippetSuggestions\": \"none\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"editor.snippetSuggestions\": \"top\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"editor.snippetSuggestions\": \"bottom\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"editor.snippetSuggestions\": \"inline\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Clipboard Integration in Remote Extensions\nDESCRIPTION: Extension authors can use the VS Code clipboard API to properly integrate with the clipboard on the remote side, avoiding issues with node modules like 'clipboardy'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.env.clipboard.readText()\n```\n\n----------------------------------------\n\nTITLE: Setting up Text Editor Drop API in VS Code settings\nDESCRIPTION: Configuration setting required to enable the experimental drag and drop functionality for the text editor in VS Code. This must be set to true before using the proposed text editor drop API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.experimental.editor.dragAndDropIntoEditor.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimap Position in VS Code Settings\nDESCRIPTION: This snippet shows how to move the minimap to the left side or disable it completely using VS Code settings. It demonstrates the use of JSON-style configuration for editor settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.minimap.side\": \"left\"\n\"editor.minimap.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Ordered List Snippet in Markdown\nDESCRIPTION: This JSON snippet defines a markdown snippet for creating ordered list items. It uses the $CURSOR_NUMBER variable to automatically number list items when using multiple cursors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ordered_list\": {\n  \"scope\": \"markdown\",\n  \"prefix\": \"ol\",\n  \"body\": [\n    \"$CURSOR_NUMBER. $0\"\n  ],\n  \"description\": \"Add ordered list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Revealing Elements in TreeView without Selection\nDESCRIPTION: TypeScript code showing how to reveal an element in a TreeView without selecting it, by passing the select option as false. The getParent method must be implemented in the TreeDataProvider for reveal to work.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncustomView.reveal('element', { select: false });\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Chat Participant Detection in VS Code\nDESCRIPTION: This VS Code setting allows users to disable the experimental feature where Copilot Chat automatically routes questions to suitable participants like '@workspace'. When set to false, questions are sent directly to Copilot unless a participant is explicitly invoked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_2\n\nLANGUAGE: settings\nCODE:\n```\nsetting(chat.experimental.detectParticipant.enabled)\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Tab Title to Shell Sequence (JSON)\nDESCRIPTION: Configures the title displayed on terminal tabs to use the escape sequence provided by the shell process itself. This uses the `${sequence}` variable within the `terminal.integrated.tabs.title` setting in `settings.json`, mimicking the behavior of many standalone terminal emulators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.tabs.title\": \"${sequence}\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Class Definition with Getters\nDESCRIPTION: Example TypeScript code showing class definitions with getter properties to demonstrate lazy variable evaluation in the debugger.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name = \"Danny\";\n  get email(): string {\n    return \"foo@example.bar\";\n  }\n  get address(): Address {\n    return new Address();\n  }\n}\nclass Address {\n  street = \"Main Street\";\n  city = \"Zurich\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Tasks in VS Code (After)\nDESCRIPTION: JSON configuration showing the new format for referencing a Gulp build task in launch.json, requiring the task type prefix.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.1.0\",\n    \"configurations\": [\n        {\n            \"preLaunchTask\": \"gulp: build\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @vscode/dts CLI to Download Proposed API Definitions\nDESCRIPTION: Demonstrates how to use the @vscode/dts CLI utility to download the latest proposed API definition files needed for extension development based on proposals listed in package.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/using-proposed-api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npx @vscode/dts dev\nDownloading vscode.proposed.languageStatus.d.ts\nTo:   /Users/Me/Code/MyExtension/vscode.proposed.languageStatus.d.ts\nFrom: https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageStatus.d.ts\nRead more about proposed API at: https://code.visualstudio.com/api/advanced-topics/using-proposed-api\n```\n\n----------------------------------------\n\nTITLE: Running MongoDB Docker Container\nDESCRIPTION: Command to start a MongoDB container using Docker, exposing the standard MongoDB port 27017.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -it -p 27017:27017 mongo\n```\n\n----------------------------------------\n\nTITLE: Terminal Bracketed Paste Mode Configuration\nDESCRIPTION: Settings to disable bracketed paste mode in terminal to prevent unwanted characters\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.ignoreBracketedPasteMode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Inlining Local Variable in Java Conditional Check\nDESCRIPTION: Example demonstrating the inline local variable refactoring, where a boolean variable storing a platform check is replaced directly with the expression in the conditional statement.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  boolean isMac = platform.equalsIgnoreCase(\"MAC\");\n  if (isMac) {\n    // do something\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method() {\n  if (platform.equalsIgnoreCase(\"MAC\")) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - REPL Focus Management\nDESCRIPTION: Setting to control focus behavior after code execution in the REPL.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\naccessibility.replEditor.autoFocusReplExecution\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Options in devContainer.json for VS Code\nDESCRIPTION: Shows how to use the 'build' property in devContainer.json to specify Docker build options. This includes setting the dockerfile path, build context, target stage, and build arguments for more flexible container configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_43.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"build\": {\n        \"dockerfile\": \"../Dockerfile\",\n        \"context\": \"..\",\n        \"target\": \"development\",\n        \"args\": {\n            \"ARG1\": \"FOO\",\n            \"ARG2\": \"BAR\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screencast Mode Keyboard Shortcuts Format\nDESCRIPTION: Demonstrates the setting to show command names along with keyboard shortcuts in VS Code's screencast mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"screencastMode.keyboardShortcutsFormat\": \"commandAndKeys\"\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Terminal\nDESCRIPTION: This command is used to verify the Node.js installation by checking its version in the terminal or command prompt.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/codeediting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Pull Requests Experimental Features\nDESCRIPTION: These settings enable experimental features in the GitHub Pull Requests extension, including Copilot integration for chat and a new notifications view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.experimental.chat\": true\n```\n\nLANGUAGE: json\nCODE:\n```\n\"githubPullRequests.experimental.notificationsView\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Close Keybinding in VS Code (JSON)\nDESCRIPTION: JSON configuration to restore the Cmd+W / Ctrl+W keybinding for closing the VS Code window when no editor is open. Separate configurations are provided for macOS and Windows/Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+w\",\n  \"command\": \"workbench.action.closeWindow\",\n  \"when\": \"!editorIsOpen && !multipleEditorGroups\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+w\",\n  \"command\": \"workbench.action.closeWindow\",\n  \"when\": \"!editorIsOpen && !multipleEditorGroups\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring References Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling find-all-references functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"referencesProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring editor.formatOnSaveMode in VS Code settings\nDESCRIPTION: JSON configuration to set editor.formatOnSaveMode which allows Format on Save to only apply to modified lines. This helps limit unwanted changes when contributing to other projects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSaveMode\": \"modifications\"\n```\n\n----------------------------------------\n\nTITLE: Creating Split Button with Context Menu in Webview (HTML)\nDESCRIPTION: This HTML snippet shows how to create a split button that displays a context menu on left/primary click. It uses JavaScript to dispatch a `contextmenu` event on click, allowing the menu to be shown as if right-clicked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/webview.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button data-vscode-context='{\"preventDefaultContextMenuItems\": true }' onClick='((e) => {\n        e.preventDefault();\n        e.target.dispatchEvent(new MouseEvent(\"contextmenu\", { bubbles: true, clientX: e.clientX, clientY: e.clientY }));\n        e.stopPropagation();\n    })(event)'>Create</button>\n```\n\n----------------------------------------\n\nTITLE: Inline Suggestions Toolbar Setting\nDESCRIPTION: Setting to control the visibility of the inline suggestions toolbar.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"editor.inlineSuggest.showToolbar\": \"always\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Debug Configuration Attribute for Node.js\nDESCRIPTION: The 'useWSL' debug configuration attribute for Node.js debugging in Windows Subsystem for Linux is now deprecated. Users should migrate to the WSL extension for improved Linux development support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"useWSL\": true\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Extension for VS Code\nDESCRIPTION: Commands for installing and packaging the MongoDB extension for VS Code. This includes global installation of vsce, packaging the extension, and installing it in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/05/10/build-2017-demo.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install -g vsce\nvsce package\ncode --install-extension vscode-mongodb-0.0.1.vsix\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook-Specific Indentation Settings\nDESCRIPTION: VSCode setting that allows users to set specific indentation styles for notebooks, controlling tab size, indent size, and whether spaces are inserted instead of tabs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"notebook.editorOptionsCustomizations\": {\n  \"editor.tabSize\": 4,\n  \"editor.indentSize\": 4,\n  \"editor.insertSpaces\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Recursive Include Paths (c_cpp_properties.json Value)\nDESCRIPTION: Shows the use of the `${workspaceFolder}/**` pattern, typically used as a string value within the `includePath` array property of `c_cpp_properties.json`. This tells the IntelliSense engine to recursively search for header files in all subdirectories of the workspace folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n${workspaceFolder}/**\n```\n\n----------------------------------------\n\nTITLE: Authentication Account Retrieval in TypeScript\nDESCRIPTION: Demonstrates how to retrieve authentication accounts from Microsoft's authentication provider using the new getAccounts API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst accounts = vscode.authentication.getAccounts('microsoft');\n```\n\n----------------------------------------\n\nTITLE: Cloning VS Code Docs Repository Without Binary Files on Windows\nDESCRIPTION: PowerShell commands for cloning the repository on Windows without downloading large binary files, using environment variables to skip LFS smudge operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows:\n$env:GIT_LFS_SKIP_SMUDGE=\"1\"; git clone git@github.com:microsoft/vscode-docs.git\n# or\n$env:GIT_LFS_SKIP_SMUDGE=\"1\"; git clone https://github.com/microsoft/vscode-docs.git\n```\n\n----------------------------------------\n\nTITLE: Custom Terminal Keybindings Configuration\nDESCRIPTION: JSON configuration for setting up custom terminal keybindings to replicate shell reverse search functionality with Ctrl+R and fallback options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+r\",     \"command\": \"workbench.action.terminal.runRecentCommand\", \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+alt+r\", \"command\": \"workbench.action.terminal.sendSequence\", \"args\": { \"text\": \"\\u0012\"/*^R*/ }, \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+r\",     \"command\": \"workbench.action.quickOpenNavigateNextInViewPicker\", \"when\": \"inQuickOpen && inTerminalRunCommandPicker\" },\n{ \"key\": \"ctrl+c\",     \"command\": \"workbench.action.closeQuickOpen\", \"when\": \"inQuickOpen && inTerminalRunCommandPicker\" }\n```\n\n----------------------------------------\n\nTITLE: Providing German UI Strings in package.nls.de.json\nDESCRIPTION: This JSON snippet demonstrates a locale-specific `package.nls.de.json` file for German translations. It defines the German translation (\"Hallo Welt\") for the `my-extension.helloWorld.title` key, which will be used when the VS Code UI language is set to German.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  // That same key from the package.json\n  \"my-extension.helloWorld.title\": \"Hallo Welt\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Emmet Variables in JSON Configuration\nDESCRIPTION: JSON configuration for the 'emmet.variables' setting which allows customization of variables used in Emmet snippets. Example shows setting language and charset variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\"emmet.variables\": {\n    \"lang\": \"de\",\n    \"charset\": \"UTF-16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Minimum Contrast Ratio Adjustment in Terminal (JSON)\nDESCRIPTION: Sets the minimum contrast ratio for terminal text to 1, effectively disabling the feature. This prevents VS Code from automatically adjusting text color luminance to meet a minimum contrast, preserving the original colors even if they have low contrast. This is configured via `terminal.integrated.minimumContrastRatio` in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.minimumContrastRatio\": 1\n```\n\n----------------------------------------\n\nTITLE: Mapping Build Paths with Source File Map - JSON Configuration - JSON\nDESCRIPTION: This configuration snippet illustrates how to use the csharp.debug.sourceFileMap setting to map a build-time path to a local source path so the debugger identifies the correct source code files when paths differ between build and development environments. It uses a key-value pair object, where the key is the build path and the value is the local path. The mapping should be provided as a valid JSON object within the appropriate VS Code settings location. Input is the mapping object as shown; no output is produced except for debugger behavior change. Key parameters are the build and local source paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"<build-path>\\\":\\\"<local-source-path>\\\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding with Quick Open Prefix\nDESCRIPTION: JSON configuration for setting up a custom keybinding that opens Quick Open with predefined text prefix.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"cmd+o\", \"command\": \"workbench.action.quickOpen\", \"args\": \"my-prefix\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Files with Exclusion Patterns for Node Debugging\nDESCRIPTION: This TypeScript configuration demonstrates using negative glob patterns with skipFiles to include specific modules while skipping others. The example skips all node_modules except the math module.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"skipFiles\": [\n    \"node_modules/**/*.js\",\n    \"!node_modules/math/**/*.js\"\n]\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Code Tutor Extension\nDESCRIPTION: Updates the package.json file to include the correct command for toggling tutor annotations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"commands\": [\n      {\n      \"command\": \"code-tutor.annotate\",\n      \"title\": \"Toggle Tutor Annotations\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button with HTML\nDESCRIPTION: This HTML snippet defines an accessible 'scroll to top' button using an anchor (`<a>`) tag with `role=\"button\"` and `aria-label`. It includes an empty `<span>` with class `icon`, intended to be styled with CSS to display an icon. It's likely used within VS Code's in-product release notes or documentation pages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Model Tool in package.json\nDESCRIPTION: Example configuration of a tool that counts active tabs in VS Code. Shows how to define a language model tool in package.json including name, description, input schema, and UI properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"languageModelTools\": [\n        {\n            \"name\": \"chat-tools-sample_tabCount\",\n            \"tags\": [\n                \"editors\",\n                \"chat-tools-sample\"\n            ],\n            \"toolReferenceName\": \"tabCount\",\n            \"displayName\": \"Tab Count\",\n            \"modelDescription\": \"The number of active tabs in a tab group in VS Code.\",\n            \"userDescription\": \"Count the number of active tabs in a tab group.\",\n            \"canBeReferencedInPrompt\": true,\n            \"icon\": \"$(files)\",\n            \"inputSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"tabGroup\": {\n                        \"type\": \"number\",\n                        \"description\": \"The index of the tab group to check. This is optional- if not specified, the active tab group will be checked.\",\n                        \"default\": 0\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Deprecated Completion Item - VS Code Language API - TypeScript\nDESCRIPTION: This snippet registers a completion item provider for plaintext files in VS Code that marks a completion as deprecated using the 'tags' property. The 'vscode.CompletionItemTag.Deprecated' value adds visual cues (strikeout, dimming) in the suggestions UI. Requires the 'vscode' API and is generally called in an extension's activation event; outputs a single deprecated completion item.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.languages.registerCompletionItemProvider('plaintext', {\n  provideCompletionItems() {\n    const item = new vscode.CompletionItem(\"deprecated_completion\");\n    item.tags = [vscode.CompletionItemTag.Deprecated];\n    return [item];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Python Test Adapter Rewrite in settings.json\nDESCRIPTION: This JSON setting allows users to opt out of the experimental Python test adapter rewrite. Adding this key-value pair to the user or workspace `settings.json` file disables the new testing architecture.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"python.experiments.optOutFrom\" : \"pythonTestAdapter\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp Less Task\nDESCRIPTION: Gulp configuration for watching and compiling Less files to CSS. Sets up file watching and automatic compilation on changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Less configuration\nvar gulp = require('gulp');\nvar less = require('gulp-less');\n\ngulp.task('less', function(cb) {\n    gulp.src('*.less')\n        .pipe(less())\n        .pipe(gulp.dest(function(f) {\n            return f.base;\n        }));\n    cb();\n});\n\ngulp.task('default', gulp.series('less', function(cb) {\n    gulp.watch('*.less', gulp.series('less'));\n    cb();\n}));\n```\n\n----------------------------------------\n\nTITLE: Enabling Implementations CodeLens for TypeScript in JSON Settings\nDESCRIPTION: This JSON setting enables the Implementations CodeLens feature in VS Code for TypeScript files. When enabled (`true`), it displays an inline count of implementations above interfaces. Clicking the count allows quick browsing of all implementing classes or objects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.implementationsCodeLens.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Language Detection Setting in VS Code\nDESCRIPTION: JSON configuration to enable experimental automatic language detection for untitled files in VS Code using TensorFlow.js and Guesslang ML model.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.untitled.experimentalLanguageDetection\": true\n```\n\n----------------------------------------\n\nTITLE: Static Files URL Configuration\nDESCRIPTION: Importing and configuring static files URL patterns in Django\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\nurlpatterns += staticfiles_urlpatterns()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tasks in VS Code\nDESCRIPTION: JSON configuration for defining custom tasks in VS Code's tasks.json file version 2.0.0, showing how to configure a test script execution with specific presentation options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n      {\n          \"taskName\": \"Run tests\",\n          \"type\": \"shell\",\n          \"command\": \"./scripts/test.sh\",\n          \"windows\": {\n              \"command\": \".\\\\scripts\\\\test.bat\"\n          },\n          \"group\": \"test\",\n          \"presentation\": {\n              \"reveal\": \"always\",\n              \"panel\": \"new\"\n          }\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Webview Content with Resource URI Management\nDESCRIPTION: Shows how to properly create and manage webview content using the asWebviewUri API, which is essential for proper resource handling in remote development scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create the webview\nconst panel = vscode.window.createWebviewPanel(\n    'catWebview',\n    'Cat Webview',\n    vscode.ViewColumn.One);\n\n// Get the content Uri\nconst catGifUri = panel.webview.asWebviewUri(\n    vscode.Uri.joinPath(context.extensionUri, 'media', 'cat.gif'));\n\n// Reference it in your content\npanel.webview.html = `<!DOCTYPE html>\n<html>\n<body>\n    <img src=\"${catGifUri}\" width=\"300\" />\n</body>\n</html>`;\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Shell Type in VS Code Extensions\nDESCRIPTION: TypeScript code snippet showing how to use the vscode.env.shell API to determine the default shell for the terminal and perform shell-specific operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst shell = vscode.env.shell;\nif (shell.search(/(powershell|pwsh)/i) !== -1) {\n    // Do something special that PowerShell needs\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH Agent on Windows\nDESCRIPTION: PowerShell commands to enable and start the SSH agent on Windows, ensuring it starts automatically on login.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n# Make sure you're running as an Administrator\nSet-Service ssh-agent -StartupType Automatic\nStart-Service ssh-agent\nGet-Service ssh-agent\n```\n\n----------------------------------------\n\nTITLE: Implementing a Factorial Method in a JavaScript Calculator Class\nDESCRIPTION: This snippet shows the signature of a factorial method inside a Calculator class to demonstrate how Copilot offers multiple code suggestions for implementation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfactorial(n) {\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Highlighting\nDESCRIPTION: Setting to enable semantic highlighting for enhanced code visualization\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.semanticHighlighting.enabled\": true,\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Suggestions Setting in VS Code\nDESCRIPTION: JSON configuration to enable quick suggestions while editing snippets by setting editor.suggest.snippetsPreventQuickSuggestions to false.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.suggest.snippetsPreventQuickSuggestions\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Full Support for Virtual Workspaces in package.json\nDESCRIPTION: Example of how to declare that an extension fully supports virtual workspaces in the package.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/virtual-workspaces.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"virtualWorkspaces\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling the Editor View Using VS Code Commands API - JavaScript\nDESCRIPTION: Invokes the VS Code command 'editorScroll' to scroll the editor's view up by one page using the commands API. Intended for use within VS Code extensions. Requires access to 'vscode.commands'. The 'to', 'by', and 'value' parameters control direction, scroll granularity, and amount. No user input; the result is a UI scroll effect in the visible editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  commands.executeCommand('editorScroll', {to: 'up', by: 'page', value: '1'})\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeLens Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce CodeLens provider capabilities in the LSP initialize method response. This allows the language server to provide contextual information interspersed with the source code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"codeLensProvider\" : {\n            \"resolveProvider\": \"true\"\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying VS Code Codicon Icons using HTML\nDESCRIPTION: HTML markup patterns for displaying VS Code's built-in codicon icons. Each icon uses the codicon base class combined with a specific icon identifier class.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-git-branch-delete\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-git-commit\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-git-compare\"></i>\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Control Style in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to choose between different styles for window controls in Visual Studio Code on Linux and Windows. Options include 'native', 'custom', and 'hidden'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"window.controlsStyle\": \"native\"\n```\n\n----------------------------------------\n\nTITLE: Linking an External Stylesheet for In-Product Release Notes in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to include an external CSS stylesheet located at `css/inproduct_releasenotes.css`. The `rel=\"stylesheet\"` attribute specifies that it's a stylesheet, and `type=\"text/css\"` indicates the MIME type. This CSS file defines styles for the in-product release notes presentation. A comment warns against modifying it without updating a related regex in `gulpfile.common.js`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_27.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/inproduct_releasenotes.css\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Contributing Bundled JSON Schema Validation - VS Code Extension - JSON\nDESCRIPTION: This snippet demonstrates how to associate a local (bundled) JSON schema with files matching a certain pattern via the VS Code extension manifest. By specifying a relative schema file path (e.g., './schemas/htmlhintrc.schema.json') in the 'url' field of a 'jsonValidation' contribution, VS Code will validate matching files using the bundled schema. This requires the schema file to be included in the extension's published package and accessible at the defined relative path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vDecember.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contributes\": {\n        \"jsonValidation\": [{\n            \"fileMatch\": \".htmlhintrc\",\n            \"url\": \"./schemas/htmlhintrc.schema.json\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CodeActionProvider with Disabled Reasoning (TypeScript)\nDESCRIPTION: This example defines an Emojizer class that implements the vscode.CodeActionProvider interface. It demonstrates the use of the CodeAction.disabled property to explain to users why a code action (such as emoji replacement) is not currently available, improving user feedback and discoverability. Dependencies include the VS Code API, and key parameters involve the document and range context in which code actions are provided.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport class Emojizer implements vscode.CodeActionProvider {\n\n    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] | undefined {\n        const action = new vscode.CodeAction(`Convert to ${emoji}`, vscode.CodeActionKind.Refactor.append('emojize'));\n\n        if (!this.isAtStartOfSmiley(document, range)) {\n            // Tell the user why our action is not available\n            action.disabled = { reason: 'Selection is not currently on a :)' };\n            return [action];\n        }\n\n        action.edit = new vscode.WorkspaceEdit();\n        action.edit.replace(document.uri, new vscode.Range(range.start, range.start.translate(0, 2)), '😀');\n        return action;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Emmet to Markup and Stylesheet Files\nDESCRIPTION: JSON setting to limit Emmet suggestions to only HTML/CSS contexts\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.showExpandedAbbreviation\": \"inMarkupAndStylesheetFilesOnly\"\n```\n\n----------------------------------------\n\nTITLE: Configuring workspaceContains Activation in package.json\nDESCRIPTION: Declaration of workspaceContains activation event that activates the extension whenever a folder is opened containing files matching the specified glob pattern. This example activates for any .editorconfig file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"workspaceContains:**/.editorconfig\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Wrangler Default Launch Mode via VS Code Setting\nDESCRIPTION: This VS Code setting identifier allows users to configure the default mode (Viewing or Editing) in which Data Wrangler opens when launched from a Jupyter Notebook entry point. This setting can be modified in the VS Code Settings editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-wrangler.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(workbench.settings.dataWrangler.startInEditModeForNotebookEntrypoints)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Button and Release Notes Styling in HTML/CSS\nDESCRIPTION: This snippet includes HTML for a scroll-to-top button and links a CSS file for styling in-product release notes. The button is accessible and includes an icon.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Terminal Completion Providers in VS Code Settings\nDESCRIPTION: Mentions the `terminal.integrated.suggest.providers` setting in VS Code, which allows users to customize the sources (providers) used for the new general terminal completions feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.providers)\n```\n\n----------------------------------------\n\nTITLE: Terminal Command Navigation Keybindings\nDESCRIPTION: Custom keybinding configuration for terminal command navigation and selection on Windows and Linux platforms.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{ \"key\": \"ctrl+down\",       \"command\": \"workbench.action.terminal.scrollToNextCommand\",\n                               \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+up\",         \"command\": \"workbench.action.terminal.scrollToPreviousCommand\",\n                               \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+down\", \"command\": \"workbench.action.terminal.selectToNextCommand\",\n                               \"when\": \"terminalFocus\" },\n{ \"key\": \"ctrl+shift+up\",   \"command\": \"workbench.action.terminal.selectToPreviousCommand\",\n                               \"when\": \"terminalFocus\" }\n```\n\n----------------------------------------\n\nTITLE: TextEditor Interface with Visible Ranges in VS Code API\nDESCRIPTION: TypeScript interface definition showing the TextEditor interface with the visibleRanges property. This allows extensions to determine which ranges of text are currently visible in the editor, accounting for vertical scrolling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextEditor {\n    /**\n     * The current visible ranges in the editor (vertically).\n     * This accounts only for vertical scrolling, and not for horizontal scrolling.\n     */\n    readonly visibleRanges: Range[];\n}\n\nexport namespace window {\n    /**\n     * An [event](#Event) which fires when the selection in an editor has changed.\n     */\n    export const onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Token Styling in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to customize the appearance of semantic tokens within VS Code's settings (`settings.json`) or a color theme file. It uses the `editor.tokenColorCustomizationsExperimental` property to target specific token types (like `variable.member`) or modifiers (like `*.modification`) and apply custom foreground colors or font styles. This relies on an extension providing semantic token information and the editor supporting this proposed feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.tokenColorCustomizationsExperimental\": {\n        \"variable.member\": {\n            \"foreground\": \"#35166d\"\n        },\n        \"*.modification\": {\n            \"fontStyle\": \"underline\"\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Snippet Choices in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define custom snippet choices in Visual Studio Code. It creates a 'color' snippet with predefined color options that can be selected when inserting the snippet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"color\": {\n  \"prefix\": \"color\",\n  \"body\": \"> Pick your favorite color ${1|red,green,blue,pink|}.\n< He likes $1.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Token Color Customization\nDESCRIPTION: Example of enabling semantic highlighting and customizing semantic token colors for a specific theme.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"editor.semanticTokenColorCustomizations\": {\n    \"[Rouge]\": {\n        \"enabled\": true,\n        \"rules\": {\n            \"*.declaration\": { \"bold\": true }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Development Settings in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure workspace folder, extensions, and port forwarding for container development in VS Code. It specifies the workspace folder, lists required extensions, and sets up port forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_39.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workspaceFolder\": \"/scripts\",\n    \"extensions\": [\n        \"ms-vscode.azurecli\"\n    ],\n    \"forwardPorts\": [\n        3000\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon for View Container in VSCode Extension\nDESCRIPTION: Example of configuring a view container in a VSCode extension's package.json to use codicons as icons for views. This demonstrates how to set an icon for an NPM Scripts view in the explorer container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n\"views\": {\n      \"explorer\": [\n        {\n          \"id\": \"npm\",\n          \"name\": \"NPM Scripts\",\n          \"icon\": \"$(code)\",\n          \"visibility\": \"hidden\"\n        }\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Base Localization Strings in bundle.l10n.json\nDESCRIPTION: This JSON snippet illustrates the structure of a `bundle.l10n.json` file generated by `@vscode/l10n-dev`. It contains key-value pairs where keys are the original strings (or string + comment identifiers) found in the code, and values are the strings themselves or objects containing the message and comments for translator context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"Hello\": \"Hello\",\n  \"Hello {0}\": \"Hello {0}\",\n  \"Hello {0}/This is a comment\": {\n    \"message\": \"Hello {0}\",\n    \"comment\": [\"This is a comment\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylance Language Server Modes in VS Code\nDESCRIPTION: This JSON table demonstrates the effects of the 'python.analysis.languageServerMode' setting on various Pylance configuration options. It shows how the 'light', 'default', and 'full' modes change default values for analysis settings like indexing, auto-imports, and pytest support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n| Setting                                                | light    | default | full |\n|--------------------------------------------------------|----------|---------|------|\n| python.analysis.exclude                                | [\"**\"] | []      | []   |\n| python.analysis.useLibraryCodeForTypes                 | false    | true    | true |\n| python.analysis.enablePytestSupport                    | false    | true    | true |\n| python.analysis.indexing                               | false    | true    | true |\n| python.analysis.autoImportCompletions                  | false    | false   | true |\n| python.analysis.showOnlyDirectDependenciesInAutoImport | false    | false   | true |\n| python.analysis.packageIndexDepths                     | ```[ { \"name\": \"sklearn\", \"depth\": 2 }, { \"name\": \"matplotlib\", \"depth\": 2 }, { \"name\": \"scipy\", \"depth\": 2 }, { \"name\": \"django\", \"depth\": 2 }, { \"name\": \"flask\", \"depth\": 2 }, { \"name\": \"fastapi\", \"depth\": 2 } ]``` | ```[ { \"name\": \"sklearn\", \"depth\": 2 }, { \"name\": \"matplotlib\", \"depth\": 2 }, { \"name\": \"scipy\", \"depth\": 2 }, { \"name\": \"django\", \"depth\": 2 }, { \"name\": \"flask\", \"depth\": 2 }, { \"name\": \"fastapi\", \"depth\": 2 } ]``` | ```{ \"name\": \"\", \"depth\": 4,  \"includeAllSymbols\": true }``` |\n| python.analysis.regenerateStdLibIndices                | false    | false   | true |\n| python.analysis.userFileIndexingLimit                  | 2000     | 2000    | -1   |\n| python.analysis.includeAliasesFromUserFiles            | false    | false   | true |\n| python.analysis.functionReturnTypes                    | false    | false   | true |\n| python.analysis.pytestParameters                       | false    | false   | true |\n| python.analysis.supportRestructuredText                | false    | false   | true |\n| python.analysis.supportDocstringTemplate               | false    | false   | true |\n```\n\n----------------------------------------\n\nTITLE: Cleanup Coverage Data in TypeScript\nDESCRIPTION: Shows how to properly clean up coverage output files when they are no longer needed using the test run's disposal event.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promises as fs } from 'fs';\n\nasync function runHandler(shouldDebug: boolean, request: vscode.TestRunRequest, token: vscode.CancellationToken) {\n  // ...\n\n  run.onDidDispose(async () => {\n    await fs.rm(coverageOutputDirectory, { recursive: true, force: true });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Snippets for JavaScript and TypeScript\nDESCRIPTION: Defines a code snippet for adding copyright headers in JavaScript and TypeScript files. The snippet uses scope attribute to target specific languages and includes variables for customization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"JS & TS Stub\": {\n  \"scope\": \"javascript,typescript\",\n  \"prefix\": \"stub\",\n  \"body\": [\n    \"/*--------------------------------------------------------------\",\n    \" *  Copyright (c) Your Corporation. All rights reserved.\",\n    \" *  Licensed under the MIT License.\",\n    \" *-------------------------------------------------------------*/\",\n    \"\",\n    \"'use strict';\",\n    \"\",\n    \"$0\"\n  ],\n  \"description\": \"Insert Copyright Statement\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Multi-line Paste Support in VS Code\nDESCRIPTION: JSON keybinding configuration that enables multi-line text pasting in PowerShell terminal. This sends the text representing Ctrl+V directly to PowerShell, which gets picked up by PSReadLine and handled properly for multi-line text.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_45.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+v\",                \"command\": \"workbench.action.terminal.sendSequence\",\n                                     \"when\": \"terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'\",\n                                     \"args\": {\"text\":\"\\u0016\"} }\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Terminal Working Directory Behavior in JSON\nDESCRIPTION: Customizes the working directory behavior for split terminals using the `terminal.integrated.splitCwd` setting in `settings.json`. Setting it to `workspaceRoot` ensures split terminals always start in the workspace root directory, overriding the default behavior (inheriting parent's CWD on macOS/Linux, parent's initial CWD on Windows).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"terminal.integrated.splitCwd\": \"workspaceRoot\"\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Theme Color Configuration - Status Bar Focus\nDESCRIPTION: Theme color settings for configuring focus border colors in the Status bar. Defines colors for both the entire status bar and individual status bar items when focused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusBar.focusBorder\": \"#color\",\n  \"statusBarItem.focusBorder\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External URI Opener in TypeScript\nDESCRIPTION: Registers an external URI opener that handles opening specific URLs within VS Code, with priority settings and custom labels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.window.registerExternalUriOpener('myExtension.opener', {\n  canOpenExternalUri(uri: vscode.Uri) {\n    // Check if a URI can be opened.\n    // This is called when the user first selects a link and VS Code\n    // needs to determine which openers are available.\n\n    if (uri.authority === 'localhost:8080') {\n      // This opener has default priority for this URI.\n      // This will result in the user being prompted since VS Code always has\n      // its own default opener.\n      return vscode.ExternalUriOpenerPriority.Default;\n    }\n\n    // The opener can be used but should not be used by default\n    return vscode.ExternalUriOpenerPriority.Option;\n  },\n  openExternalUri(resolveUri: vscode.Uri) {\n    // Actually open the URI.\n    // This is called once the user has selected this opener.\n  }\n}, {\n  schemes: ['http', 'https'],\n  label: localize('openTitle', \"Open URL using My Extension\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Including Python in Opt-in Experiments\nDESCRIPTION: User setting to opt into Python experimental features, specifically the terminal environment variable activation mechanism which activates the selected environment without explicit activation commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"python.experiments.optInto\": [\"pythonTerminalEnvVarActivation\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User in Dockerfile\nDESCRIPTION: Dockerfile commands for creating a non-root user with sudo privileges in a Debian/Ubuntu container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG USERNAME=user-name-goes-here\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create the user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    #\n    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.\n    && apt-get update \\\n    && apt-get install -y sudo \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\n\n# ********************************************************\n# * Anything else you want to do like clean up goes here *\n# ********************************************************\n\n# [Optional] Set the default user. Omit if you want to keep the default as root.\nUSER $USERNAME\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown Links to Reference Style\nDESCRIPTION: Example showing the transformation of inline Markdown links to reference-style links using the Extract to link definition feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Markdown](https://daringfireball.net/projects/markdown/) and you: Adventures in [Markdown linking](https://daringfireball.net/projects/markdown/)!\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Exclusions in jsconfig.json for JavaScript\nDESCRIPTION: Example of using the 'exclude' property in jsconfig.json to exclude files and folders from a JavaScript project, such as the node_modules directory. This is useful for large projects to improve performance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_7_0.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"target\": \"ES6\"\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Terminal Quick Suggestions\nDESCRIPTION: Shows the default JavaScript object value for the `terminal.integrated.suggest.quickSuggestions` setting. By default, quick suggestions are enabled for commands and arguments but disabled for general unknown input to reduce noise.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n\"terminal.integrated.suggest.quickSuggestions\": {\n  \"commands\": \"on\",\n  \"arguments\": \"on\",\n  \"unknown\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Language Participant Configuration for Handlebars\nDESCRIPTION: Package.json configuration example showing how to declare a language as an HTML language participant to inherit HTML language server features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"htmlLanguageParticipants\": [\n     {\n       \"languageId\": \"handlebars\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cursor Placement in Word Wrapped Lines with Keybindings - VS Code - JSON\nDESCRIPTION: Overrides the default keyboard shortcuts for inserting cursors above and below while ignoring word wraps, by adding keybinding entries to the VS Code keybindings JSON. Each keybinding specifies a key combination, command, applicable editor context, and passes an argument object with \\\"logicalLine\\\": true to ensure the cursor moves by logical lines rather than visual wrapped lines. Place these objects in your keybindings.json file; keys, commands, and context ('when') fields are required, and the 'args' field customizes command behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"shift+alt+down\",\n  \"command\": \"editor.action.insertCursorBelow\",\n  \"when\": \"textInputFocus\",\n  \"args\": { \"logicalLine\": true }\n},\n{\n  \"key\": \"shift+alt+up\",\n  \"command\": \"editor.action.insertCursorAbove\",\n  \"when\": \"textInputFocus\",\n  \"args\": { \"logicalLine\": true }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Help Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling function and method signature help functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"signatureHelpProvider\" : {\n            \"triggerCharacters\": [ '(' ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Key Binding in Visual Studio Code (JSON)\nDESCRIPTION: JSON snippet demonstrating how to remove a specific default key binding in Visual Studio Code by adding a '-' prefix to the command in the keybindings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n// In Default Keyboard Shortcuts\n...\n{ \"key\": \"tab\", \"command\": \"tab\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"jumpToNextSnippetPlaceholder\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"acceptSelectedSuggestion\", \"when\": ... },\n...\n\n// To remove the second rule, for example, add in keybindings.json:\n{ \"key\": \"tab\", \"command\": \"-jumpToNextSnippetPlaceholder\" }\n```\n\n----------------------------------------\n\nTITLE: Displaying GCC Compiler Output in VS Code (Bash)\nDESCRIPTION: Example of GCC compiler output for a C program with a typo, which will be used to create a problem matcher.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nhelloWorld.c:5:3: warning: implicit declaration of function 'prinft'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container Extensions in JSON\nDESCRIPTION: JSON configuration file for the Dev Container, showing how installed extensions are persisted for future container attachments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/31/inspecting-containers.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workspace\": \"/usr/src/app\",\n    \"extensions\": [\n        \"eamodio.gitlens\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Definition File with External TextMate Theme\nDESCRIPTION: This JSON snippet shows a theme definition file that imports an external TextMate theme. It defines basic workbench colors while delegating syntax highlighting to the external Diner.tmTheme file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/color-theme.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"dark\",\n  \"colors\": {\n    \"editor.background\": \"#1e1e1e\",\n    \"editor.foreground\": \"#d4d4d4\",\n    \"editorIndentGuide.background\": \"#404040\",\n    \"editorRuler.foreground\": \"#333333\",\n    \"activityBarBadge.background\": \"#007acc\",\n    \"sideBarTitle.foreground\": \"#bbbbbb\"\n  },\n  \"tokenColors\": \"./Diner.tmTheme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Link in HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) functioning as a button to scroll the page to the top. It uses `id=\"scroll-to-top\"`, `role=\"button\"`, and `aria-label=\"scroll to top\"` for accessibility and identification. An empty `<span>` with class `icon` is included, presumably styled via CSS to display a visual indicator. It requires associated CSS for proper styling and appearance, as indicated by the preceding comment regarding `inproduct_releasenotes.css`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring serverReadyAction in launch.json\nDESCRIPTION: Configuration snippet showing how to set up serverReadyAction to start debugging by name. The pattern matches a port number and triggers the named debug configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n\"serverReadyAction\": {\n  \"action\": \"startDebugging\",\n  \"pattern\": \"listening on port ([0-9]+)\",\n  \"name\": \"Launch Browser\"\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Adapter Protocol Communication Example\nDESCRIPTION: JSON wire-format communication example between a development tool and Debug Adapter, showing protocol messages for setting breakpoints, continuing execution, and handling debugging events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/08/07/debug-adapter-protocol-website.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"setBreakpoints\": \"request\",\n  \"continue\": \"request\", \n  \"stopped\": \"event\",\n  \"stacktrace\": \"request\",\n  \"variables\": \"request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Chat Follow-up Prompts Display\nDESCRIPTION: This VS Code setting controls the visibility of follow-up prompts suggested by Copilot Chat after a response. It accepts three values: 'firstOnly' (default, shows prompts only on the first turn), 'always' (shows prompts after every response), or 'never' (disables follow-up prompts entirely).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_5\n\nLANGUAGE: settings\nCODE:\n```\nsetting(github.copilot.chat.followUps)\n```\n\n----------------------------------------\n\nTITLE: Enabling Parameter Type Inlay Hints in TypeScript JSON Settings\nDESCRIPTION: This JSON setting enables or disables the display of inlay hints for implicitly typed parameters in TypeScript functions within VS Code. Set to `true` to enable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ntypescript.inlayHints.parameterTypes.enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable File Extensions for Windows Terminal Completions\nDESCRIPTION: Describes the `terminal.integrated.suggest.windowsExecutableExtensions` setting in VS Code. This allows users to define a list of file extensions considered executable for terminal path completions on Windows, compensating for the lack of an executable bit in Windows file metadata.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.windowsExecutableExtensions)\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Format Document\nDESCRIPTION: Represents the keyboard shortcut command `editor.action.formatDocument` used in VS Code. When used in a Rust file with the rust-analyzer extension installed, this command typically invokes the `rustfmt` tool to format the entire document according to Rust conventions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.formatDocument)\n```\n\n----------------------------------------\n\nTITLE: Removing a Keyboard Shortcut Programmatically (VS Code keybindings.json, JSON)\nDESCRIPTION: Provides an example for removing a specific keyboard shortcut rule by prepending a '-' to the 'command' entry in keybindings.json. This disables the targeted command (here, 'jumpToNextSnippetPlaceholder') for a given key (here, 'tab'), ensuring it does not trigger when the key is pressed. No additional configuration or dependencies required beyond editing keybindings.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// In Default Keyboard Shortcuts\n...\n{ \"key\": \"tab\", \"command\": \"tab\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"jumpToNextSnippetPlaceholder\", \"when\": ... },\n{ \"key\": \"tab\", \"command\": \"acceptSelectedSuggestion\", \"when\": ... },\n...\n\n// To remove the second rule, for example, add in keybindings.json:\n{ \"key\": \"tab\", \"command\": \"-jumpToNextSnippetPlaceholder\" }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Folding Strategy for JavaScript/TypeScript in VS Code\nDESCRIPTION: JSON configuration to revert back to indentation-based folding instead of using the new syntax-aware folding for JavaScript and TypeScript files. This setting can be added to user settings to control folding behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[javascript]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  },\n  \"[javascriptreact]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  },\n  \"[typescript]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  },\n  \"[typescriptreact]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Markdown-it Plugins in package.json\nDESCRIPTION: Shows how to declare markdown-it plugin support in an extension's package.json using the markdown.markdownItPlugins contribution point.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/markdown-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"markdown.markdownItPlugins\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CLI Task with Input Variables in JSON\nDESCRIPTION: Provides a `tasks.json` configuration for running an Angular CLI command (`ng g`). It utilizes a `pickString` input (`componentType`) for selecting the component type from a predefined list and a `promptString` input (`componentName`) for the component name, showcasing user interaction during task execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/variables-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"ng g\",\n            \"type\": \"shell\",\n            \"command\": \"ng\",\n            \"args\": [\n                \"g\",\n                \"${input:componentType}\",\n                \"${input:componentName}\"\n            ],\n        }\n    ],\n    \"inputs\": [\n        {\n            \"type\": \"pickString\",\n            \"id\": \"componentType\",\n            \"description\": \"What type of component do you want to create?\",\n            \"options\": [\"component\", \"directive\", \"pipe\", \"service\", \"class\", \"guard\", \"interface\", \"enum\"],\n            \"default\": \"component\"\n        },\n        {\n            \"type\": \"promptString\",\n            \"id\": \"componentName\",\n            \"description\": \"Name your component.\",\n            \"default\": \"my-new-component\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Unix-style line endings globally - Bash\nDESCRIPTION: This Bash command sets the global Git configuration so that lines are automatically converted to LF on commit, but line endings are unchanged on checkout. Intended for users who want to preserve Unix-style endings regardless of platform. This setting requires Git to be installed and only affects the user's global configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf input\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SignatureHelpProvider with ActiveSignatureHelp in TypeScript\nDESCRIPTION: TypeScript implementation of a VS Code SignatureHelpProvider that demonstrates how to access the activeSignatureHelp context. This allows tracking which overload was selected by the user before the provider was retriggered.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nclass MySignatureHelpProvider implements vscode.SignatureHelpProvider {\n    provideSignatureHelp(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken,\n        context: vscode.SignatureHelpContext\n    ): vscode.ProviderResult<vscode.SignatureHelp> {\n        // The active signature help when this provider was triggered or undefined if\n        // no signature help was active.\n        console.log(context.activeSignatureHelp);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code as Default Editor via Debian Alternatives\nDESCRIPTION: Uses `update-alternatives --set editor` to configure `/usr/bin/code` as the default system editor via the Debian alternatives system. This affects applications that invoke the generic `editor` command (like `visudo` or `crontab -e`). Requires VS Code to be registered as an alternative first.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-alternatives --set editor /usr/bin/code\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Transformers Library from GitHub\nDESCRIPTION: Installs the latest development version of the Transformers library directly from GitHub, which may be necessary for newer models like Phi-4-mini.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npip install git+https://github.com/huggingface/transformers\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript with Globals Causing Type Errors\nDESCRIPTION: This JavaScript snippet demonstrates legacy code that uses non-standard DOM APIs (`webkitNotifications`) and a potentially undefined global variable (`CAN_NOTIFY`). When type checking (`// @ts-check`) is enabled, TypeScript will report errors for these unknown properties and variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nwindow.onload = function() {\n    if (window.webkitNotifications.requestPermission() === CAN_NOTIFY) {\n        window.webkitNotifications.createNotification(null, 'Woof!', '🐶').show()\n    } else {\n        alert('Could not notify')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Scroll-to-Top Button\nDESCRIPTION: This HTML snippet defines an anchor (`<a>`) tag functioning as a button to scroll the page to the top. It includes accessibility attributes (`role`, `aria-label`) and an empty `<span>` element with class `icon`, likely used for displaying a visual cue via CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Scroll Button and CSS Import\nDESCRIPTION: Defines a scroll-to-top button with accessibility attributes and links to an external CSS stylesheet for release notes styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Microsoft C++ Linker Executable Name (Windows)\nDESCRIPTION: The filename `link.exe` refers to the Microsoft C++ linker executable. This tool is required on Windows systems to link the object files produced by the Rust compiler into a final executable binary. It is part of the Microsoft C++ Build Tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nlink.exe\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Container Metadata to a Dockerfile\nDESCRIPTION: Shows how to manually add devcontainer metadata to a Docker image using a label. This example adds capability settings, user configuration, and post-creation commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_9\n\nLANGUAGE: docker\nCODE:\n```\nLABEL devcontainer.metadata='[{ \\\n  \"capAdd\": [ \"SYS_PTRACE\" ], \\\n  \"remoteUser\": \"devcontainer\", \\\n  \"postCreateCommand\": \"yarn install\" \\\n}]'\n```\n\n----------------------------------------\n\nTITLE: Folding Editor Content via Command API in VS Code - JavaScript\nDESCRIPTION: Triggers the 'editor.fold' command to collapse content in the code editor by a specified number of levels downward from the cursor. Used in extension development; requires 'vscode.commands'. Parameters: 'levels' (number of levels to fold) and 'up' (direction; false for downward). Affects UI folding display, no return value.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  commands.executeCommand('editor.fold', {levels: '2', up: false})\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Preview Scripts in package.json\nDESCRIPTION: Demonstrates how to use the markdown.previewScripts contribution point to register JavaScript files that will be executed within the Markdown preview for advanced functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/markdown-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"markdown.previewScripts\": [\n        \"./main.js\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using interactive bash shell with postCreateCommand\nDESCRIPTION: This example demonstrates how to use an interactive bash shell with postCreateCommand to ensure .bashrc is picked up, customizing the shell for the environment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateCommand\": \"bash -i scripts/install-dependencies.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Manager on Windows - Batch\nDESCRIPTION: This batch command registers the 'wincred' credential helper with Git globally on the Windows system. It allows secure storage of Git credentials in the Windows Credential Manager so they can be reused. The command must be run in a Windows command prompt or PowerShell session, and Git for Windows must be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_42\n\nLANGUAGE: bat\nCODE:\n```\n git config --global credential.helper wincred\n\n```\n\n----------------------------------------\n\nTITLE: Example Commands with Enhanced Terminal Argument Awareness\nDESCRIPTION: Lists several common shell commands (`code`, `cd`, `ls`, etc.) for which the VS Code terminal completion feature now provides improved argument awareness, leading to more relevant suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n`code`, `code-insiders`, `cd`, `ls`, `rm`, `echo`, `mkdir`, `rmdir`, `touch`\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and TypeScript support using npm\nDESCRIPTION: This command installs ESLint, a TypeScript parser for ESLint, and TypeScript-specific ESLint rules using npm as the package manager.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/tslint-eslint-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal ConPTY Setting in JSON\nDESCRIPTION: JSON configuration to disable the ConPTY terminal backend on Windows\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.windowsEnableConpty\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Symbol Icon Colors in VS Code Themes\nDESCRIPTION: Lists the configuration keys used to set the foreground colors for various types of symbol icons displayed in VS Code UI elements like the Outline view, breadcrumb navigation, and suggest widget. These identifiers are used within theme definition files or the `workbench.colorCustomizations` setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n- `symbolIcon.arrayForeground`: The foreground color for array symbols.\n- `symbolIcon.booleanForeground`: The foreground color for boolean symbols.\n- `symbolIcon.classForeground`: The foreground color for class symbols.\n- `symbolIcon.colorForeground`: The foreground color for color symbols.\n- `symbolIcon.constantForeground`: The foreground color for constant symbols.\n- `symbolIcon.constructorForeground`: The foreground color for constructor symbols.\n- `symbolIcon.enumeratorForeground`: The foreground color for enumerator symbols.\n- `symbolIcon.enumeratorMemberForeground`: The foreground color for enumerator member symbols.\n- `symbolIcon.eventForeground`: The foreground color for event symbols.\n- `symbolIcon.fieldForeground`: The foreground color for field symbols.\n- `symbolIcon.fileForeground`: The foreground color for file symbols.\n- `symbolIcon.folderForeground`: The foreground color for folder symbols.\n- `symbolIcon.functionForeground`: The foreground color for function symbols.\n- `symbolIcon.interfaceForeground`: The foreground color for interface symbols.\n- `symbolIcon.keyForeground`: The foreground color for key symbols.\n- `symbolIcon.keywordForeground`: The foreground color for keyword symbols.\n- `symbolIcon.methodForeground`: The foreground color for method symbols.\n- `symbolIcon.moduleForeground`: The foreground color for module symbols.\n- `symbolIcon.namespaceForeground`: The foreground color for namespace symbols.\n- `symbolIcon.nullForeground`: The foreground color for null symbols.\n- `symbolIcon.numberForeground`: The foreground color for number symbols.\n- `symbolIcon.objectForeground`: The foreground color for object symbols.\n- `symbolIcon.operatorForeground`: The foreground color for operator symbols.\n- `symbolIcon.packageForeground`: The foreground color for package symbols.\n- `symbolIcon.propertyForeground`: The foreground color for property symbols.\n- `symbolIcon.referenceForeground`: The foreground color for reference symbols.\n- `symbolIcon.snippetForeground`: The foreground color for snippet symbols.\n- `symbolIcon.stringForeground`: The foreground color for string symbols.\n- `symbolIcon.structForeground`: The foreground color for struct symbols.\n- `symbolIcon.textForeground`: The foreground color for text symbols.\n- `symbolIcon.typeParameterForeground`: The foreground color for type parameter symbols.\n- `symbolIcon.unitForeground`: The foreground color for unit symbols.\n- `symbolIcon.variableForeground`: The foreground color for variable symbols.\n```\n\n----------------------------------------\n\nTITLE: Compiling and Training Neural Network Model with Keras in Python\nDESCRIPTION: Compiles the neural network model with specified optimizer, loss function, and metrics, then trains it on the Titanic dataset for 50 epochs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmodel.compile(optimizer=\"adam\", loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, batch_size=32, epochs=50)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Log Level API Reference\nDESCRIPTION: TypeScript code showing the location of logLevel property and onDidChangeLogLevel event definitions in VS Code's type definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// logLevel property location\nsrc/vscode-dts/vscode.d.ts#L9464\n\n// onDidChangeLogLevel event location\nsrc/vscode-dts/vscode.d.ts#L9469\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Availability in Dev Containers (JSON)\nDESCRIPTION: A new user setting to specify GPU availability for Dev Containers when automatic detection fails. This setting ensures expected behavior when a devcontainer.json configures GPU as an optional resource.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_94.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"hostRequirements\": { \"gpu\": \"optional\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Window Controls Overlay Configuration\nDESCRIPTION: Configuration setting to enable VS Code sandbox mode in the settings file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"window.experimental.useSandbox\": true\n```\n\n----------------------------------------\n\nTITLE: Linux Debugging Permission Configuration\nDESCRIPTION: Bash command to modify ptrace scope settings on Linux systems to prevent timeout errors when attaching debugger to running processes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\necho 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal CWD Keyboard Shortcut in VS Code\nDESCRIPTION: JSON configuration for creating a custom keyboard shortcut to open a new terminal with a specific working directory. Uses the fileDirname variable to set the working directory to the current file's location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+shift+h\",\n  \"command\": \"workbench.action.terminal.newWithCwd\",\n  \"args\": {\n    \"cwd\": \"${fileDirname}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Video Tag Insertion\nDESCRIPTION: Example of HTML video tag syntax inserted into Markdown files when dragging and dropping video files. The tag includes basic video attributes for playback control.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<video src=\"path/to/video.mp4\" autoplay loop controls muted title=\"Video description\"></video>\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Client Middleware for Request Forwarding\nDESCRIPTION: Configuration of language client options with middleware that intercepts completion requests. The code handles style regions in HTML documents by creating virtual CSS documents and forwarding completion requests.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/embedded-languages.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: LanguageClientOptions = {\n  documentSelector: [{ scheme: 'file', language: 'html' }],\n  middleware: {\n    provideCompletionItem: async (document, position, context, token, next) => {\n      // If not in `<style>`, do not perform request forwarding\n      if (!isInsideStyleRegion(htmlLanguageService, document.getText(), document.offsetAt(position))) {\n        return await next(document, position, context, token);\n      }\n\n      const originalUri = document.uri.toString(true);\n      virtualDocumentContents.set(originalUri, getCSSVirtualContent(htmlLanguageService, document.getText()));\n\n      const vdocUriString = `embedded-content://css/${encodeURIComponent(\n        originalUri\n      )}.css`;\n      const vdocUri = Uri.parse(vdocUriString);\n      return await commands.executeCommand<CompletionList>(\n        'vscode.executeCompletionItemProvider',\n        vdocUri,\n        position,\n        context.triggerCharacter\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Discovery Setting\nDESCRIPTION: Setting to control whether VS Code automatically discovers and offers to run Model Context Protocol servers from other applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"chat.mcp.discovery.enabled\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Global Line Ending Conversion (Bash)\nDESCRIPTION: Sets the global Git configuration to disable automatic line ending conversion (`core.autocrlf false`). This prevents Git from altering line endings during checkout or commit, leaving them as-is. This is another alternative global setting for managing line endings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell Type via `TerminalState.shellType` (Proposed API)\nDESCRIPTION: Specifies that within the proposed Terminal Shell Type API, the identified shell type (e.g., 'bash', 'pwsh') will be accessible to extensions through the `shellType` field located on the `TerminalState` object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nThe `shellType` field will be part of `TerminalState`.\n```\n\n----------------------------------------\n\nTITLE: Illustrating DocumentSymbol Range vs SelectionRange in Bash (Diagram)\nDESCRIPTION: This ASCII art diagram, presented within a Bash code block, visually explains the concept of `range` and `selectionRange` for the `DocumentSymbol` type used by `DocumentSymbolProviders` in VS Code extensions. The `<range>` encompasses the entire symbol definition including preceding comments, while the `<selection range>` specifically targets the symbol's identifier (`fooFunction`), which is useful for features like the Outline view.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n         +--/**\n         |   * Some Comment\n<range>--|   */\n         |  export function fooFunction() {\n         |                  +----------+\n         +--}                   |\n                                |\n                          <selection range>\n```\n\n----------------------------------------\n\nTITLE: Executing Markdown Render Command - VS Code Markdown Extension - TypeScript\nDESCRIPTION: This code snippet uses VS Code's command API to render Markdown as HTML via the 'markdown.api.render' command. It demonstrates activating an extension and asynchronously receiving the HTML result of rendering a Markdown string, shown in the extension host logs. Requires the 'vscode' extension API, and the Markdown extension must be enabled. Input is a Markdown string (here: '# Hello Markdown'); output is HTML logged to the console.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n  vscode.commands.executeCommand('markdown.api.render', '# Hello Markdown').then(result => {\n    console.log(`rendered markdown: ${result}`);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Showing keyboard shortcut in markdown\nDESCRIPTION: Markdown syntax used to display keyboard shortcuts in the VS Code documentation using the kbstyle formatting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`kbstyle(Shift)`\n```\n\n----------------------------------------\n\nTITLE: Redis Database Flush Script in Python\nDESCRIPTION: A standalone Python script that connects to a Redis database and flushes all data. This is useful for resetting the database during development and testing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nredis_client = redis.StrictRedis(host='0.0.0.0', port=6379, db=0, decode_responses=True)\nredis_client.flushdb()\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut References\nDESCRIPTION: Shows keyboard shortcut syntax used in documentation for various commands and actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(widgetNavigation.focusNext)\nkb(widgetNavigation.focusPrevious)\nkbstyle(Shift+Tab)\nkb(workbench.action.terminal.focusAccessibleBuffer)\nkb(editor.action.accessibleViewGoToSymbol)\n```\n\n----------------------------------------\n\nTITLE: VS Code Security Setting for Workspace Trust\nDESCRIPTION: VS Code setting to control the workspace trust startup prompt behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/07/06/workspace-trust.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"security.workspace.trust.startupPrompt\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed WSL Distros in Windows Command Prompt\nDESCRIPTION: Lists all installed WSL distributions on Windows with wslconfig.exe. Helpful for selecting or changing the default distribution for remote development workflows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_37\n\nLANGUAGE: bat\nCODE:\n```\nwslconfig /l\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Math Formula Example\nDESCRIPTION: Examples showing how to write inline and block math equations in Markdown using KaTeX syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/markdown.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nInline math: $x^2$\n\nMath block:\n\n$$\n\\displaystyle\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2\n\\leq\n\\left( \\sum_{k=1}^n a_k^2 \\right)\n\\left( \\sum_{k=1}^n b_k^2 \\right)\n$$\n```\n\n----------------------------------------\n\nTITLE: Adding Default SSH Keys to SSH Agent (Bash)\nDESCRIPTION: Adds default SSH identity files (like ~/.ssh/id_rsa, ~/.ssh/id_ed25519, etc.) to the locally running SSH agent. This allows the Dev Containers extension to forward the SSH agent connection into the container for authenticating SSH connections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh-add\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for Multiple Dev Containers\nDESCRIPTION: Illustrates the recommended directory layout for a project using separate `devcontainer.json` files for different services (Python, Node.js) defined in a common `docker-compose.yml`. Highlights the location of `.git`, `.devcontainer` subdirectories containing individual container configurations, source folders, and the root `docker-compose.yml`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/connect-multiple-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n📁 project-root\n    📁 .git\n    📁 .devcontainer\n      📁 python-container\n        📄 devcontainer.json\n      📁 node-container\n        📄 devcontainer.json\n    📁 python-src\n        📄 hello.py\n    📁 node-src\n        📄 hello.js\n    📄 docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Font Sources for Product Icons\nDESCRIPTION: JSON configuration for declaring custom font sources used in the product icon theme. Specifies font file path, format, weight and style properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/product-icon-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fonts\": [\n    {\n      \"id\": \"alien-font\",\n      \"src\": [\n        {\n          \"path\": \"./alien.woff\",\n          \"format\": \"woff\"\n        }\n      ],\n      \"weight\": \"normal\",\n      \"style\": \"normal\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Editor Behavior with Command Arguments\nDESCRIPTION: JSON configuration for a keyboard shortcut that opens a new Search editor with custom behavior. This example runs the search for 'VS Code' automatically but keeps focus in the search query field rather than the results.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"key\": \"ctrl+o\",\n    \"command\": \"search.action.openNewEditor\",\n    \"args\": { \"query\": \"VS Code\", \"triggerSearch\":true, \"focusResults\": false }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Mapping for Remote Debugging in VS Code Launch Configuration\nDESCRIPTION: The `localRoot` and `remoteRoot` attributes within an `attach` configuration in `launch.json` are used to map file paths between the local VS Code workspace and the remote system where the Node.js code is running. This ensures correct breakpoint mapping and source navigation during remote debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"attach\": {\n  // ... other attach config\n  \"localRoot\": \"${workspaceFolder}\",\n  \"remoteRoot\": \"/path/on/remote/server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Portable Mode Migration on Windows\nDESCRIPTION: Shows the desired directory structure after migrating an existing VS Code installation to Portable mode on Windows. User data and extensions are moved to the 'data' folder within the VS Code installation directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/portable.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n|- VSCode-win32-x64-1.84.2\n|   |- Code.exe (or code executable)\n|   |- data\n|   |   |- user-data\n|   |   |   |- ...\n|   |   |- extensions\n|   |   |   |- ...\n|   |- ...\n```\n\n----------------------------------------\n\nTITLE: Opting Into Python Test Adapter Experiment\nDESCRIPTION: Configuration setting to opt into the experimental Python test adapter rewrite which redesigns the architecture behind test discovery and execution for both unittest and pytest in the Python extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"python.experiments.optInto\": [\"pythonTestAdapter\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Subsections in YAML for VS Code Documentation\nDESCRIPTION: This YAML snippet demonstrates how to create a nested subsection within a main section of the VS Code documentation table of contents. It shows the structure for the GitHub Copilot section with a nested Guides subsection containing multiple topics.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    {\n      \"name\": \"GitHub Copilot\",\n      \"area\": \"copilot\",\n      \"topics\": [\n        [\"Overview\", \"/docs/copilot/overview\"],\n        [\"Setup\", \"/docs/copilot/setup\"],\n        [\"\", \"\", {\n          \"name\": \"Guides\",\n          \"area\": \"copilot/guides\",\n          \"topics\": [\n            [\"Test with Copilot\", \"/docs/copilot/guides/test-with-copilot\"],\n            [\"Debug with Copilot\", \"/docs/copilot/guides/debug-with-copilot\"]\n          ]\n        }\n        ],\n        [\"FAQ\", \"/docs/copilot/faq\"]\n      ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylint Severity Levels in VS Code\nDESCRIPTION: JSON configuration for adjusting the severity levels of issues reported by Pylint in VS Code. This allows customization of how different types of Pylint messages are displayed in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_66.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"convention\": \"Information\",\n    \"error\": \"Error\",\n    \"fatal\": \"Error\",\n    \"refactor\": \"Hint\",\n    \"warning\": \"Warning\",\n    \"info\": \"Information\",\n    \"W0611\": \"Error\",\n    \"unused-import\": \"Error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Semantic Token Modifiers in VSCode Extensions\nDESCRIPTION: JSON configuration for adding custom semantic token modifiers for syntax highlighting. This example defines a 'native' modifier for symbols implemented natively.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenModifiers\": [\n      {\n        \"id\": \"native\",\n        \"description\": \"Annotates a symbol that is implemented natively\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard command reference in markdown\nDESCRIPTION: Markdown syntax for referencing keyboard commands in VS Code documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.chat.attachContext)`\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Function Without Null Checking\nDESCRIPTION: Example of a simple TypeScript function that fetches user status without proper null checking, demonstrating potential runtime issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User {\n    readonly id: string;\n}\n\n/**\n * Get the status of a user\n */\nexport async function getStatus(user: User): Promise<string> {\n    const id = user.id;\n    const result = await fetch(`/api/v0/${id}/status`);\n    const json = await result.json();\n    return json.status;\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut Troubleshooting Log Example\nDESCRIPTION: Sample log output showing how VS Code processes and resolves keyboard shortcuts when cmd+/ is pressed on macOS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: MetaLeft, keyCode: 91, key: Meta\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: MetaLeft, keyCode: 57 ('Meta')\n[KeybindingService]: \\ Keyboard event cannot be dispatched.\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: Slash, keyCode: 191, key: /\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: Slash, keyCode: 85 ('/')\n[KeybindingService]: | Resolving meta+[Slash]\n[KeybindingService]: \\ From 2 keybinding entries, matched editor.action.commentLine, when: editorTextFocus && !editorReadonly, source: built-in.\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Stylish Problem Matcher for Relative Paths (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `problemMatcher` within a VS Code `tasks.json` file for ESLint. It specifically overrides the default behavior of the `$eslint-stylish` base matcher by setting `\"fileLocation\": \"relative\"`. This is necessary if using an older version of ESLint or a setup where the stylish reporter outputs relative file paths, ensuring that errors and warnings are correctly linked to files in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vFebruary.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"problemMatcher\": {\n    \"base\": \"$eslint-stylish\",\n    \"fileLocation\": \"relative\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Token Types in VSCode Extensions\nDESCRIPTION: JSON configuration for contributing custom semantic token types for syntax highlighting. This example defines a 'templateType' token that extends the built-in 'type' token.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenTypes\": [\n      {\n        \"id\": \"templateType\",\n        \"superType\": \"type\",\n        \"description\": \"A template type.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Keyboard Keys in VS Code Documentation\nDESCRIPTION: These code snippets show how to represent specific keyboard keys in VS Code documentation using the kbstyle markdown extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/personalize-vscode.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`kbstyle(Up)`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`kbstyle(Down)`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`kbstyle(Enter)`\n```\n\n----------------------------------------\n\nTITLE: Error Message for Sandbox Configuration\nDESCRIPTION: The fatal error message displayed when the SUID sandbox helper binary is found but not configured correctly. This occurs when running VS Code from a tar archive without proper sandbox permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nFATAL:setuid_sandbox_host.cc(158)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I'm aborting now. You need to make sure that chrome-sandbox is owned by root and has mode 4755.\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Opening Extensions View in VS Code\nDESCRIPTION: This code snippet represents a keyboard shortcut for opening the Extensions view in Visual Studio Code. It's used within the markdown to provide a quick reference for users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.view.extensions)`\n```\n\n----------------------------------------\n\nTITLE: Cloning Express Sample Application in Bash\nDESCRIPTION: Command to clone a simple Node.js Express application from GitHub. This step is optional if you already have a containerized application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/31/inspecting-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-express-sample.git\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Authentication Session for a Specific Account - VS Code Authentication API (TypeScript)\nDESCRIPTION: This snippet demonstrates acquiring an authentication session for a specific account by providing the account information in the getSession call. The session is created with the provider ID, required scopes, and an options object specifying the target account (in this case, accounts[0]). This requires that the authentication provider supports scoping sessions by account, as implemented by the built-in GitHub and Microsoft providers. Inputs are the provider ID string, a list of scopes, and the account reference, outputting an authentication session object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst session = vscode.authentication.getSession('microsoft', scopes, { account: accounts[0] })\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributor List\nDESCRIPTION: A markdown formatted list of contributors and their pull requests to various VSCode repositories, including links to GitHub profiles and PRs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [@alexr00](https://github.com/alexr00): Fixes #48714: Added conversion from local case of the file to git case [PR #49397](https://github.com/microsoft/vscode/pull/49397)\n* [Arjun Attam (@arjun27)](https://github.com/arjun27): Adds webview select-all command [PR #54851](https://github.com/microsoft/vscode/pull/54851)\n```\n\n----------------------------------------\n\nTITLE: Opening a DAP Source URI in VS Code Using the Debug Extension API - TypeScript\nDESCRIPTION: This TypeScript function shows how to open a Debug Adapter Protocol (DAP) Source in a VS Code editor using the new 'debug.asDebugSourceUri' API. It takes a debug session and a DAP Source object, produces a corresponding URI, and then displays the source using the VS Code window and workspace APIs. Required dependencies include the VS Code extension API with the debug extension enabled and the Debug Adapter Protocol types. The function expects valid session and source parameters and operates asynchronously.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function openDAPSource(session: vscode.DebugSession, source: DebugProtocol.Source) {\\n  const uri = vscode.debug.asDebugSourceUri(source, session);\\n  vscode.window.showTextDocument(vscode.workspace.openTextDocument(uri));\\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript QuickPick Button Implementation\nDESCRIPTION: Example showing the TypeScript definition structure for the new QuickPickItem buttons API. This feature allows adding interactive buttons to individual QuickPickItems in VS Code's Quick Pick interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.createQuickPick()\n  .keepScrollPosition = true;\n```\n\n----------------------------------------\n\nTITLE: Sample SCSS/Less Stylesheet\nDESCRIPTION: Example SCSS code demonstrating nested selectors and variable usage. Can be used with Less by changing $padding to @padding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$padding: 6px;\n\nnav {\n  ul {\n    margin: 0;\n    padding: $padding;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: $padding 12px;\n    text-decoration: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating VS Code Event Handlers to Readonly Arrays - TypeScript\nDESCRIPTION: Demonstrates how to refactor VS Code extension code to accommodate stricter typings for event objects, notably making use of readonly arrays in handler signatures. The example highlights how TypeScript now enforces readonly properties on selections, requiring extension authors to accept readonly arrays to maintain type safety. Ensure your functions and handlers utilize the readonly modifier to avoid type errors with updated VS Code API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.window.onDidChangeTextEditorSelection(e => {\n    // Error: `e.selections` is now a readonly array but\n    // our `updateForSelections` function takes a mutable array\n    updateForSelections(e.selections);\n});\n\nfunction updateForSelections(selections: vscode.Selection[]) {\n    ...\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.window.onDidChangeTextEditorSelection(e => {\n    updateForSelections(e.selections);\n});\n\nfunction updateForSelections(selections: readonly vscode.Selection[]) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CompletionContext Interface in TypeScript\nDESCRIPTION: Presents the TypeScript interface definition for `CompletionContext`, which is passed to `CompletionItemProvider.provideCompletionItems`. This interface provides details about how the completion was triggered, including the `triggerKind` (e.g., invoke, trigger character) and the optional `triggerCharacter` if applicable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ninterface CompletionContext {\n  /**\n    * How the completion was triggered.\n    */\n  readonly triggerKind: CompletionTriggerKind;\n\n  /**\n    * Character that triggered the completion item provider.\n    * `undefined` if provider was not triggered by a character.\n    * The trigger character is already in the document when the completion provider is triggered.\n    */\n  readonly triggerCharacter?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Understanding CodeActionContext Trigger Kinds\nDESCRIPTION: Describes the possible values for the proposed `triggerKind` property on `CodeActionContext`. `Invoke` signifies an explicit user request (e.g., shortcut, command), while `Automatic` indicates an implicit request (e.g., document change). Providers can tailor returned actions based on this trigger kind.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Possible values for CodeActionContext.triggerKind\nCodeActionTriggerKind.Invoke; // Explicit request\nCodeActionTriggerKind.Automatic; // Implicit request\n```\n\n----------------------------------------\n\nTITLE: Engine Version Configuration for VS Code Extension\nDESCRIPTION: JSON configuration to specify the minimum required VS Code engine version for an extension to ensure compatibility with new implicit activation events feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"engines\": {\n        \"vscode\": \"^1.74.0\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Resolving npm Path Issues in Terminal\nDESCRIPTION: Commands to identify and remove conflicting npm installations that cause nvm compatibility issues\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nls -la /usr/local/bin | grep \"np[mx]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm /usr/local/bin/npm /usr/local/lib/node_modules/npm/bin/npm-cli.js\nrm /usr/local/bin/npx /usr/local/lib/node_modules/npm/bin/npx-cli.js\n```\n\n----------------------------------------\n\nTITLE: Publishing Platform-specific Extensions\nDESCRIPTION: Commands demonstrating how to publish platform-specific extension packages for different architectures using vsce.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nvsce publish --target win32-x64 win32-arm64\nvsce package --target win32-x64\nvsce publish --packagePath PATH_TO_WIN32X64_VSIX\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration Example - Tree Indentation\nDESCRIPTION: Setting to customize the indentation of tree nodes across the workbench UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.tree.indent\"\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Spaces in Markdown\nDESCRIPTION: Demonstrates how to create Markdown links that contain spaces or special characters in their destinations using angle brackets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Some link](<path to file with spaces.md>)\n```\n\n----------------------------------------\n\nTITLE: Customizing VS Code Theme Colors with workbench.colorCustomizations in JSON\nDESCRIPTION: Example of how to customize the active Visual Studio Code color theme by modifying the workbench.colorCustomizations setting in your user settings. This snippet shows how to change the activity bar background color to green.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"activityBar.background\": \"#00AA00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Associations for Markdown Preview\nDESCRIPTION: JSON configuration to automatically open Markdown files as preview instead of text editor using workbench.editorAssociations setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editorAssociations\": {\n  \"*.md\": \"vscode.markdown.preview.editor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DocumentLinkProvider in VSCode\nDESCRIPTION: VSCode's built-in link detector finds http, https, and file links. Developers can implement custom link detection logic by implementing a DocumentLinkProvider and registering it using registerDocumentLinkProvider.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nregisterDocumentLinkProvider\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Web Extension Testing (JSON)\nDESCRIPTION: JSON configuration for VS Code's launch.json to enable running and debugging web extension tests within VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Extension Tests in VS Code\",\n      \"type\": \"extensionHost\",\n      \"debugWebWorkerHost\": true,\n      \"request\": \"launch\",\n      \"args\": [\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionDevelopmentKind=web\",\n        \"--extensionTestsPath=${workspaceFolder}/dist/web/test/suite/index\"\n      ],\n      \"outFiles\": [\n        \"${workspaceFolder}/dist/web/**/*.js\"\n      ],\n      \"preLaunchTask\": \"npm: watch-web\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling VS Code Auto-Updates (JSON)\nDESCRIPTION: JSON setting to disable automatic updates for the VS Code editor. Add this line to your `settings.json` file (accessible via File > Preferences > Settings > JSON editor) to prevent VS Code from updating automatically.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"update.mode\": \"none\"\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to VS Code Icon\nDESCRIPTION: Shows how to add a spinning animation to supported icons by appending ~spin to the icon name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$(sync~spin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerelease Package Inclusion in VS Code Settings\nDESCRIPTION: VS Code setting identifier (`nuget.includePrereleasePackageVersions`) used to control whether prerelease versions of NuGet packages are included when searching or updating via the NuGet commands. Set this option to `true` under File > Preferences > Settings (`kb(workbench.action.openSettings)`) to enable the inclusion of prerelease versions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/package-management.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nnuget.includePrereleasePackageVersions\n```\n\n----------------------------------------\n\nTITLE: Contributing Welcome Content to VS Code Views\nDESCRIPTION: JSON configuration for adding welcome content to empty tree views in VS Code. The example shows how to contribute content to the SCM view with command links that appear as buttons and conditional visibility.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"viewsWelcome\": [\n      {\n        \"view\": \"scm\",\n        \"contents\": \"In order to use git features, you can open a folder containing a git repository or clone from a URL.\\n[Open Folder](command:vscode.openFolder)\\n[Clone Repository](command:git.clone)\\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).\",\n        \"when\": \"config.git.enabled && git.state == initialized && workbenchState == empty\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tabs in VS Code Editor (JSON)\nDESCRIPTION: This code snippet demonstrates how to disable the tabs feature in VS Code by setting the workbench.editor.showTabs option to 'single' in the settings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.showTabs\": \"single\"\n```\n\n----------------------------------------\n\nTITLE: Example Built-in Chat Participants\nDESCRIPTION: Lists examples of built-in chat participants (`@workspace`, `@vscode`, `@terminal`, `@github`) available in VS Code Copilot Chat. These participants offer specialized context or actions related to the workspace, VS Code itself, the terminal, or GitHub.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`@workspace`, `@vscode`, `@terminal`, and `@github`\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Tasks with Custom Argument Quoting in VS Code\nDESCRIPTION: This JSON snippet shows how to define a shell task with explicit control over argument quoting. It uses the 'escape' quoting style to handle spaces in the argument, which uses backtick in PowerShell and backslash in bash.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"dir\",\n  \"type\": \"shell\",\n  \"command\": \"dir\",\n  \"args\": [\n    {\n      \"value\": \"folder with spaces\",\n      \"quoting\": \"escape\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WebAssembly LSP Client in TypeScript\nDESCRIPTION: TypeScript code showing how to set up and activate a WebAssembly language server client in VS Code. Includes WASI process creation, stdio setup, and client configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/07/wasm-part2.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStdioOptions, createUriConverters, startServer } from '@vscode/wasm-wasi-lsp';\n\nexport async function activate(context: ExtensionContext) {\n\tconst wasm: Wasm = await Wasm.load();\n\n\tconst channel = window.createOutputChannel('LSP WASM Server');\n\tconst serverOptions: ServerOptions = async () => {\n\t\tconst options: ProcessOptions = {\n\t\t\tstdio: createStdioOptions(),\n\t\t\tmountPoints: [\n\t\t\t\t{ kind: 'workspaceFolder' },\n\t\t\t]\n\t\t};\n\n\t\tconst filename = Uri.joinPath(context.extensionUri, 'server', 'target', 'wasm32-wasip1-threads', 'release', 'server.wasm');\n\t\tconst bits = await workspace.fs.readFile(filename);\n\t\tconst module = await WebAssembly.compile(bits);\n\n\t\tconst process = await wasm.createProcess('lsp-server', module, { initial: 160, maximum: 160, shared: true }, options);\n\n\t\tconst decoder = new TextDecoder('utf-8');\n\t\tprocess.stderr!.onData((data) => {\n\t\t\tchannel.append(decoder.decode(data));\n\t\t});\n\n\t\treturn startServer(process);\n\t};\n\n\tconst clientOptions: LanguageClientOptions = {\n\t\tdocumentSelector: [ { language: 'plaintext' } ],\n\t\toutputChannel: channel,\n\t\turiConverters: createUriConverters(),\n\t};\n\n\tlet client = new LanguageClient('lspClient', 'LSP Client', serverOptions, clientOptions);\n\tawait client.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Properties/Pseudo-classes for VS Code IntelliSense (JSON)\nDESCRIPTION: JSON structure defining custom CSS properties (`my-size`) and pseudo-classes (`:my-link`) with descriptions. This data enhances VS Code's CSS language service, providing completion and hover information when used with the `css.experimental.customData` setting or `contributes.css.experimental.customData` extension contribution point.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"properties\": [{\n    \"name\": \"my-size\",\n    \"description\": \"Compiles down to `width` and `height`. See details at https://github.com/postcss/postcss-size.\"\n  }],\n  \"pseudoClasses\": [{\n    \"name\": \":my-link\",\n    \"description\": \":any-link pseudo class. See details at https://preset-env.cssdb.org/features#any-link-pseudo-class.\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Extension Pack Manifest for CodeLens Roundup\nDESCRIPTION: JSON example of an Extension Pack manifest file, listing multiple extensions to be included in the pack.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/03/07/extension-pack-roundup.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensionPack\": [\n    \"eamodio.gitlens\",\n    \"VisualStudioOnlineApplicationInsights.application-insights\",\n    \"kisstkondoros.vscode-codemetrics\",\n    \"chrmarti.regex\",\n    \"pflannery.vscode-versionlens\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Breadcrumbs Symbol Order\nDESCRIPTION: Configuration for controlling how symbols are ordered in the Breadcrumbs navigation picker.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"breadcrumbs.symbolSortOrder\": \"position\" // or \"name\" or \"type\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icons in VS Code Extension\nDESCRIPTION: Shows how to contribute custom icons to VS Code through the icon contribution point. The example defines two distribution-specific icons (Ubuntu and Fedora) with their font characters and paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"icons\": {\n    \"distro-ubuntu\": {\n      \"description\": \"Ubuntu icon\",\n      \"default\": {\n        \"fontPath\": \"./distroicons.woff\",\n        \"fontCharacter\": \"\\\\E001\"\n      }\n    },\n    \"distro-fedora\": {\n      \"description\": \"Ubuntu icon\",\n      \"default\": {\n        \"fontPath\": \"./distroicons.woff\",\n        \"fontCharacter\": \"\\\\E002\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Custom Instruction Files in VS Code Settings\nDESCRIPTION: Demonstrates how to set up multiple custom instruction files for different aspects of coding in the VS Code workspace settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"file\": \"./docs/javascript-styles.md\"\n    },\n    {\n      \"file\": \"./docs/database-styles.md\"\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Extension from VSIX File using Command\nDESCRIPTION: Shows how to programmatically install a VS Code extension from a local VSIX file by providing its file path URI to the workbench.extensions.installExtension command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('workbench.extensions.installExtension', vscode.Uri.file('path-to-vsix'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Font for Inline Completions (VS Code Setting)\nDESCRIPTION: Specifies the font family to be used for displaying inline code suggestions provided by features like GitHub Copilot in the Visual Studio Code editor. This allows customization of the visual appearance of suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_3\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(editor.inlineSuggest.fontFamily)\n```\n\n----------------------------------------\n\nTITLE: Mocha Test Runner Configuration for Web Extensions\nDESCRIPTION: TypeScript implementation of a Mocha test runner for web extensions that sets up the test environment and handles test execution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'mocha/mocha';\n\nmocha.setup({\n\tui: 'tdd',\n\treporter: undefined\n});\n\nexport function run(): Promise<void> {\n\treturn new Promise((c, e) => {\n\t\ttry {\n\t\t\tmocha.run(failures => {\n\t\t\t\tif (failures > 0) {\n\t\t\t\t\te(new Error(`${failures} tests failed.`));\n\t\t\t\t} else {\n\t\t\t\t\tc();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\te(err);\n\t\t}\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Protocol Handler Extension (VS Code API, TypeScript)\nDESCRIPTION: This TypeScript function demonstrates how to activate a VS Code extension by registering a protocol handler that processes incoming URIs for the extension. The handler implements the `handleUri` method, which logs the URI to the console as a string. This example assumes the use of the proposed VS Code API and proper registration in `package.json`. Dependencies include the base VS Code extension API and proposed API activation attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction activate() {\\n    registerProtocolHandler({\\n        handleUri(uri: Uri) {\\n            console.log('Received URI', uri.toString());\\n        }\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Launch Configurations with Simple References in VS Code\nDESCRIPTION: This snippet shows how to create compound launch configurations in a workspace file that reference individual configurations by name. This approach works when configuration names are unique across all workspace folders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"compounds\": [{\n      \"name\": \"Launch Server & Client\",\n      \"configurations\": [\n        \"Launch Server\",\n        \"Launch Client\"\n      ]\n  }]\n```\n\n----------------------------------------\n\nTITLE: Color Mapped Theme Implementation\nDESCRIPTION: Theme implementation with color mapping for efficient storage and lookup of color values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n//                          1          2          3          4          5           6\ncolorMap = [\"reserved\", \"#F8F8F2\", \"#00FF00\", \"#0000FF\", \"#100000\", \"#200000\", \"#300000\"]\ntheme = [\n  {                                  \"foreground\": 1                           },\n  { \"scope\": \"var\",                  \"foreground\": 1,                          },\n  { \"scope\": \"var.identifier\",       \"foreground\": 2, \"fontStyle\": \"bold\"      },\n  { \"scope\": \"meta var.identifier\",  \"foreground\": 3                           },\n  { \"scope\": \"constant\",             \"foreground\": 4, \"fontStyle\": \"italic\"    },\n  { \"scope\": \"constant.numeric\",     \"foreground\": 5                           },\n  { \"scope\": \"constant.numeric.hex\",                  \"fontStyle\": \"bold\"      },\n  { \"scope\": \"constant.numeric.oct\",                  \"fontStyle\": \"underline\" },\n  { \"scope\": \"constant.numeric.dec\", \"foreground\": 6                           },\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling New Workspace Creation in Agent Mode\nDESCRIPTION: Experimental setting to enable workspace scaffolding functionality in agent mode for creating new development environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"github.copilot.chat.newWorkspaceCreation.enabled\"\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint script to package.json\nDESCRIPTION: This JSON snippet shows how to add an ESLint script to the package.json file for linting TypeScript files in a specified source folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/tslint-eslint-migration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": \"eslint -c .eslintrc.js --ext .ts <mySrcFolder>\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Background Process on Container Start using postStartCommand (JSON)\nDESCRIPTION: This `devcontainer.json` snippet demonstrates using `postStartCommand` with `nohup` and the background operator (`&`) to launch a command or script (`your-command-here`) that continues running in the background after the initial startup sequence completes. This is useful for starting services or watchers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"nohup bash -c 'your-command-here &'\"\n```\n\n----------------------------------------\n\nTITLE: Explorer Sort Configuration\nDESCRIPTION: Setting to enable reverse sorting in the VS Code Explorer, providing additional flexibility for file organization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nvscode://settings/explorer.sortOrderReverse\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal General Python App Docker-Run Task (VS Code, JSON)\nDESCRIPTION: This JSON example illustrates a minimal VS Code task for running a generic Python application in a Docker container. The configuration omits explicit module or arguments, specifying only the Python executable file. It presumes Python and the required entrypoint are present in the container. As in other examples, it depends on a 'docker-build' task, and is suitable for basic Python scripts or CLI applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"docker-run\\\",\\n    \\\"label\\\": \\\"docker-run: debug\\\",\\n    \\\"dependsOn\\\": [\\n      \\\"docker-build\\\"\\n    ],\\n    \\\"python\\\": {\\n      \\\"file\\\": \\\"path_to/app_entry_point.py\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding for Adding Missing Imports - VS Code JSON\nDESCRIPTION: This code snippet demonstrates how to assign a custom keybinding (Ctrl+Shift+I) to the VS Code command for adding all missing imports via a source action. The configuration requires adding an entry under your keybindings.json file. The snippet assumes VS Code has the underlying support for source actions as described in the documentation; make sure you have a compatible version. The key parameters are the shortcut ('key'), the targeted command, and the arguments specifying the source action kind and application mode. When triggered, the shortcut applies the source.addMissingImports code action to your JavaScript/TypeScript file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+shift+i\",\n    \"command\": \"editor.action.sourceAction\",\n    \"args\": {\n        \"kind\": \"source.addMissingImports\",\n        \"apply\": \"first\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container for Web App\nDESCRIPTION: Azure CLI command to configure the web app to use a specific Docker image from DockerHub.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naz appservice web config container update -n nina-demo-app -g nina-demo -c lostintangent/node\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Profile in package.json\nDESCRIPTION: JSON configuration for contributing terminal profiles in VS Code extensions. Defines profile metadata including title, ID and icon.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"terminal\": {\n    \"profiles\": [\n      {\n        \"title\": \"Profile from extension\",\n        \"id\": \"my-ext.terminal-profile\",\n        \"icon\": \"lightbulb\"\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll-To-Top Anchor and Including Stylesheet in HTML - HTML\nDESCRIPTION: This HTML snippet provides a button for users to scroll to the top of the page and includes a link to an external CSS file responsible for release notes styles. The <a> tag is used with appropriate ARIA attributes for accessibility, and the <link> tag references the stylesheet in the 'css' directory. Dependencies include the referenced CSS file. Inputs are user interactions with the scroll-to-top button, and the output is the modification of page scroll behavior and visual styling as defined by the stylesheet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Opening the Vue Project in VS Code\nDESCRIPTION: Commands to navigate to the Vue project folder and open it in Visual Studio Code from the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/vuejs-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd vue-project\ncode .\n```\n\n----------------------------------------\n\nTITLE: Using TerminalExitStatus.reason API in TypeScript\nDESCRIPTION: Enum that provides insights into why a terminal exited, giving extension authors more detailed information about terminal exit reasons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TerminalExitReason {\n  Unknown = 0,\n  Shutdown = 1,\n  Process = 2,\n  User = 3,\n  Extension = 4,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Labels Pattern in VS Code\nDESCRIPTION: Example showing how multiple extensions can contribute to custom label patterns that are merged together in VS Code configuration. Demonstrates pattern matching for file paths and custom label formatting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.customLabels.patterns\" : {\n  \"**/app/**/page.tsx\": \"${dirname} - Page\",\n  \"**/app/**/layout.tsx\": \"${dirname} - Layout\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Reference Links\nDESCRIPTION: Example demonstrating how to use reference-style links in Markdown for easier link management and reuse.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis [link][example-link] and [this link][example-link] both point to the same place!\n\n[example-link]: http://example.com\n```\n\n----------------------------------------\n\nTITLE: Side Bar Theme Colors\nDESCRIPTION: Color tokens for customizing the VS Code side bar, including background, borders, and section headers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nsideBar.background\nsideBar.foreground\nsideBar.border\nsideBar.dropBackground\nsideBarTitle.foreground\nsideBarSectionHeader.background\n```\n\n----------------------------------------\n\nTITLE: Defining Open Folder Command Parameters for Remote Containers (TypeScript)\nDESCRIPTION: Defines a TypeScript interface and function signature supporting new parameters for the 'remote-containers.openFolder' command. The interface specifies optional flags for opening folders with control over window reuse and history, and the function accepts a VS Code Uri and options parameter. Dependencies include VS Code's extension API and the vscode.Uri type. Key parameters are 'forceNewWindow', 'forceReuseWindow', and 'noRecentEntry', all booleans controlling folder-opening behavior. Inputs include an optional uri and IOpenFolderOptions, with the function being asynchronous and returning a Promise. Usage requires a TypeScript-based extension or script targeting VS Code's API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_35.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOpenFolderOptions {\n\tforceNewWindow?: boolean;\n\tforceReuseWindow?: boolean;\n\tnoRecentEntry?: boolean;\n}\n\nasync function openFolder(uri?: vscode.Uri, options?: IOpenFolderOptions);\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Snippets in VS Code Suggestions\nDESCRIPTION: This JSON setting changes the order of code suggestions in VS Code to prioritize snippets, making it more similar to Sublime Text's behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/04/10/sublime-text-roundup.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.snippetSuggestions\": \"top\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Global Line Endings for Unix-Style Uploads (Bash)\nDESCRIPTION: Sets the global Git configuration to convert CRLF line endings to LF on commit (`input`). This prevents mixed line endings in the repository when working across Windows and Linux environments, ensuring commits always use Unix-style LF endings. This is an alternative to using a `.gitattributes` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf input\n```\n\n----------------------------------------\n\nTITLE: Command for Publishing Pre-release Extensions\nDESCRIPTION: A bash command showing how to publish a pre-release version of a VS Code extension using the vsce tool. This allows extension authors to get early feedback before an official release.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvsce publish --pre-release\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent Minimap Background in VS Code\nDESCRIPTION: JSON configuration for customizing the minimap background color in VS Code. This example sets a semi-transparent black background by defining the color with an alpha channel (55 in hexadecimal).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workbench.colorCustomizations\": {\n    \"minimap.background\": \"#00000055\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Jupyter Notebook Server for Web Extension\nDESCRIPTION: Command to start a Jupyter notebook server with specific configurations to enable web extension connectivity. Sets up CORS access for vscode-cdn.net domains and disables browser auto-launch.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook --no-browser --NotebookApp.allow_origin_pat=https://.*\\.vscode-cdn\\.net\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Link Forwarding in VS Code\nDESCRIPTION: This setting allows you to control whether links opened from within VS Code are forwarded. Setting it to false prevents link forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_75.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.forwardOnOpen\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Keyboard Shortcuts for Editor Navigation in VS Code\nDESCRIPTION: JSON configuration for setting keyboard shortcuts to navigate between editors across all groups using Ctrl+Tab and Ctrl+Shift+Tab, replacing the default behavior of navigating only within the active group.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n      \"key\": \"ctrl+tab\",\n      \"command\": \"workbench.action.quickOpenPreviousRecentlyUsedEditor\",\n      \"when\": \"!inEditorsPicker\"\n  },\n  {\n      \"key\": \"ctrl+shift+tab\",\n      \"command\": \"workbench.action.quickOpenLeastRecentlyUsedEditor\",\n      \"when\": \"!inEditorsPicker\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Workspace Indexing for Copilot Chat\nDESCRIPTION: This VS Code command explicitly initiates the process of building the local workspace index used by the '@workspace' chat participant. This is useful for starting the indexing process proactively, especially in larger workspaces (up to 2000 files, excluding ignored ones like node_modules), rather than waiting for the first '@workspace' query.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_95.md#2025-04-23_snippet_4\n\nLANGUAGE: vscode-command\nCODE:\n```\nGitHub Copilot: Build Local Workspace index\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Cursor Style When Unfocused\nDESCRIPTION: Setting to configure the appearance of terminal cursor when terminal is not focused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.cursorStyleInactive\": \"outline\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Color Theme in User Settings\nDESCRIPTION: JSON configuration to specify the default color theme used in the VS Code workbench.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  // Specifies the color theme used in the workbench.\n  \"workbench.colorTheme\": \"Solarized Dark\"\n```\n\n----------------------------------------\n\nTITLE: Installing a VS Code Extension from VSIX via Command Line (Bash)\nDESCRIPTION: This Bash command demonstrates how to install a Visual Studio Code extension packaged as a `.vsix` file using the `code` command-line interface. The `--install-extension` switch is used, followed by the path to the `.vsix` file (e.g., `myextension.vsix`). This method allows for scriptable or manual installation outside the VS Code UI. Multiple extensions can be installed by repeating the switch and file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/extensions/extension-marketplace.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncode --install-extension myextension.vsix\n```\n```\n\n----------------------------------------\n\nTITLE: Azure Pipelines Configuration for VS Code Extension Testing\nDESCRIPTION: YAML configuration for setting up Azure Pipelines to test VS Code extensions across Windows, macOS, and Linux. Includes Node.js setup, xvfb configuration for Linux, and test execution steps.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/continuous-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  branches:\n    include:\n    - main\n  tags:\n    include:\n    - v*\n\nstrategy:\n  matrix:\n    linux:\n      imageName: 'ubuntu-latest'\n    mac:\n      imageName: 'macos-latest'\n    windows:\n      imageName: 'windows-latest'\n\npool:\n  vmImage: $(imageName)\n\nsteps:\n\n- task: NodeTool@0\n  inputs:\n    versionSpec: '10.x'\n  displayName: 'Install Node.js'\n\n- bash: |\n    /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n    echo \">>> Started xvfb\"\n  displayName: Start xvfb\n  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))\n\n- bash: |\n    echo \">>> Compile vscode-test\"\n    yarn && yarn compile\n    echo \">>> Compiled vscode-test\"\n    cd sample\n    echo \">>> Run sample integration test\"\n    yarn && yarn compile && yarn test\n  displayName: Run Tests\n  env:\n    DISPLAY: ':99.0'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Task Execution in VS Code Extensions\nDESCRIPTION: Demonstrates how to create a custom task execution in VS Code extensions using the CustomExecution API. This allows extensions to maintain state and handle input/output when a task is run, instead of launching a process or script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet execution = new vscode.CustomExecution((terminalRenderer, cancellationToken, args): Thenable<number> => {\n        return new Promise<number>(resolve => {\n            // This is the custom task callback!\n            resolve(0);\n        });\n    });\nconst taskName = \"First custom task\";\nlet task = new vscode.Task2(kind, vscode.TaskScope.Workspace, taskName, taskType, execution);\n```\n\n----------------------------------------\n\nTITLE: Registering Terminal Link Handler - VS Code Proposed API - TypeScript\nDESCRIPTION: Shows how to register a terminal link handler within a VS Code extension using the proposed API. This handler intercepts link clicks in the terminal and customizes their handling, such as displaying a message if the link matches a specific URL. Dependencies: Running in VS Code Insiders, enabling proposed APIs in package.json, and copying 'vscode.proposed.d.ts'. Inputs are the terminal and the clicked link; output is a boolean indicating if the link was consumed. Not publishable to the Marketplace until API is stabilized.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nwindow.registerTerminalLinkHandler({\n  handleLink((terminal, link) => {\n    if (link === 'https://code.visualstudio.com') {\n      window.showInformationMessage('Handled');\n      return true;\n    }\n    return false;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet CSS Fuzzy Search Settings\nDESCRIPTION: JSON configuration for controlling Emmet abbreviation fuzzy matching accuracy in stylesheets through the css.fuzzySearchMinScore preference setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_22.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.preferences\": {\n    \"css.fuzzySearchMinScore\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll-to-Top Button and Release Notes Stylesheet in HTML\nDESCRIPTION: This HTML snippet adds a scroll-to-top button with accessibility attributes and links a custom stylesheet for in-product release notes. It includes a comment about not modifying the code without updating the related gulpfile.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Marketplace Tag for Chat Participants\nDESCRIPTION: Specifies the tag (`tag:chat-participant`) used for searching the VS Code Marketplace or Extensions view to find extensions that contribute additional chat participants.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n`tag:chat-participant`\n```\n\n----------------------------------------\n\nTITLE: Defining Active Terminal Tracking API in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for tracking the active terminal in VS Code. It includes properties for accessing the current active terminal and an event for detecting changes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace\n  export const activeTerminal: Terminal | undefined;\n  export const onDidChangeActiveTerminal: Event<Terminal | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning VS Code Docs Repository with Git LFS\nDESCRIPTION: Commands for cloning the VS Code documentation repository with Git LFS support to properly handle binary files like images.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit lfs install\ngit clone git@github.com:microsoft/vscode-docs.git\n# or\ngit clone https://github.com/microsoft/vscode-docs.git\n```\n\n----------------------------------------\n\nTITLE: Registering a Folding Provider with Proposed API in VS Code (TypeScript)\nDESCRIPTION: Shows the declaration of the 'registerFoldingProvider' function in the 'languages' namespace from the proposed VS Code API to enable language-aware code folding. The function accepts a document selector and a folding provider, returning a Disposable for unregistering. This API is available only if opted into proposed APIs and the extension is configured accordingly. Dependencies include 'DocumentSelector', 'FoldingProvider', and 'Disposable'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace languages {\n\n    /**\n     * Register a folding provider.\n     *\n     * @param selector A selector that defines the documents this provider is applicable to.\n     * @param provider A folding provider.\n     * @return A [disposable](#Disposable) that unregisters this provider when being disposed.\n     */\n    export function registerFoldingProvider(selector: DocumentSelector, provider: FoldingProvider): Disposable;\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Status Command\nDESCRIPTION: Command line instruction to display VS Code diagnostic information including environment details, running processes, and workspace statistics.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode --status\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Lines in VS Code\nDESCRIPTION: Keyboard shortcuts for copying and pasting entire lines in VS Code without needing to select the full line.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/productivity.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Copy Paste\n\n  * Press `kb(editor.action.clipboardCopyAction)` to copy the entire line\n  * Press `kb(editor.action.clipboardPasteAction)` to paste the entire line\n```\n\n----------------------------------------\n\nTITLE: Keybinding Configuration Schema for VS Code Extensions\nDESCRIPTION: JSON schema showing how to define custom keyboard shortcuts for VS Code extensions, including platform-specific bindings for Mac, Linux, and Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/10/31/js_roundup_2.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mac\": \"<keyboard shortcut for mac>\",\n    \"linux\": \"<keyboard shortcut for linux\",\n    \"win\": \"<keyboard shortcut for windows\",\n    \"key\": \"<default keyboard shortcut>\",\n    \"command\": \"<name of the command in VS Code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic C Program Compilation for WebAssembly\nDESCRIPTION: A simple C 'Hello World' program that demonstrates basic printf functionality when compiled to WebAssembly.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/06/05/vscode-wasm-wasi.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nint main(void)\n{\n    printf(\"Hello, World\\n\");\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed UNC Hosts via Environment Variable (Windows)\nDESCRIPTION: This global environment variable, `NODE_UNC_HOST_ALLOWLIST`, provides an alternative way to allow access to specific UNC hostnames for Node.js applications, including VS Code's backend processes. It should contain a backslash-separated list of allowed hostnames (e.g., 'server-a\\\\server-b'). This offers a system-wide configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/windows.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNODE_UNC_HOST_ALLOWLIST\n```\n\nLANGUAGE: shell\nCODE:\n```\nserver-a\\server-b\n```\n\n----------------------------------------\n\nTITLE: Minimap Theme Colors\nDESCRIPTION: Color tokens for customizing the VS Code minimap, including highlights, sliders, and gutter indicators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nminimap.findMatchHighlight\nminimap.selectionHighlight\nminimap.errorHighlight\nminimap.warningHighlight\nminimap.background\nminimap.selectionOccurrenceHighlight\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Links for VS Code Workspace Access\nDESCRIPTION: Example showing the syntax for protocol links to open folders or workspaces in VS Code. Protocol links use the vscode:// or vscode-insiders:// prefix followed by file/ and the file path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvscode://file/<path>\nvscode-insiders://file/<path>\n```\n\n----------------------------------------\n\nTITLE: Using Active View Context Key in VS Code Keybindings (JSON)\nDESCRIPTION: Demonstrates the use of the new 'activeViewlet' context key in a 'when' clause within VS Code keybindings settings. This enables targeting commands or keybindings to specific views, such as the 'Source Control Manager' (SCM), by matching against the viewlet's id. This pattern is configured in user or extension 'keybindings.json' files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"when\": \"activeViewlet == workbench.view.scm\"\n```\n\n----------------------------------------\n\nTITLE: Defining VersionType Complex Type in XML Schema\nDESCRIPTION: Defines the VersionType complex type, which specifies a matching module name and version for a visualizer. It includes attributes for Name, Min, and Max version numbers with documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"VersionType\">\n  <xs:annotation>\n    <xs:documentation>Specifies a matching module name and version for this visualizer.</xs:documentation>\n  </xs:annotation>\n  <xs:attribute name=\"Name\" type=\"ModuleNameStringType\" use=\"required\" />\n  <xs:attribute name=\"Min\" type=\"VersionStringType\" use=\"optional\">\n    <xs:annotation>\n      <xs:documentation>Specifies the minimum (inclusive) version number. </xs:documentation>\n    </xs:annotation>\n  </xs:attribute>\n  <xs:attribute name=\"Max\" type=\"VersionStringType\" use=\"optional\">\n    <xs:annotation>\n      <xs:documentation>Specifies the maximum (inclusive) version number. </xs:documentation>\n    </xs:annotation>\n  </xs:attribute>\n</xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions in Dev Container - Bash\nDESCRIPTION: This snippet validates that Node.js and npm are installed in the container by printing their versions. It expects both Node.js and npm to be installed and available on the system PATH. The output confirms the environment is correctly set up for Node.js development inside the container. Useful for debugging or confirming the expected setup within the dev container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version; npm --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Renderer Extension Point in JSON\nDESCRIPTION: Shows the `package.json` configuration for an extension aiming to customize a built-in notebook renderer using a proposed API. It defines a new renderer (`id`, `displayName`) under the `notebookRenderer` contribution point and specifies its `entrypoint`, indicating that it `extends` the `vscode.builtin-renderer` and providing the path to the extension's implementation script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"notebookRenderer\": [\n    {\n      \"id\": \"vscode-samples.my-custom-js-extension\",\n      \"displayName\": \"My custom javascript renderer extension\",\n      \"entrypoint\": {\n        \"extends\": \"vscode.builtin-renderer\",\n        \"path\": \"./out/main.js\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom REPL with Terminal Renderer in TypeScript\nDESCRIPTION: This example demonstrates how to create a custom REPL (Read-Eval-Print Loop) using the new terminal renderer API. It listens for input and echoes it back to the terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst shell = vscode.window.createTerminalRenderer('My Extension REPL');\nshell.write('Type and press enter to echo the text\\r\\n\\r\\n');\nshell.terminal.show();\n\nlet line = '';\nshell.onDidAcceptInput(data => {\n  if (data === '\\r') {\n    shell.write(`\\r\\necho: \"${line}\"\\r\\n\\n`);\n    line = '';\n  } else {\n    line += data;\n    shell.write(data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Preferences in VS Code Settings\nDESCRIPTION: Example configuration options for Emmet 2.0 preferences in VS Code, including CSS property formatting and unit settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"emmet.preferences\": {\n    \"css.propertyEnd\": \";\",\n    \"css.valueSeparator\": \":\",\n    \"sass.propertyEnd\": \";\",\n    \"sass.valueSeparator\": \":\",\n    \"stylus.propertyEnd\": \"\",\n    \"stylus.valueSeparator\": \" \",\n    \"css.unitAliases\": \"\",\n    \"css.intUnit\": \"px\",\n    \"css.floatUnit\": \"em\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Icon and Color in VS Code\nDESCRIPTION: JSON configuration to set a custom icon and color for a task in VS Code. This example sets a light bulb icon with blue color for a shell task that echoes 'test'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"test\",\n    \"type\": \"shell\",\n    \"command\": \"echo test\",\n    \"icon\": { \"id\": \"light-bulb\", \"color\": \"terminal.ansiBlue\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting to Native Title Bar on Linux in VS Code Settings\nDESCRIPTION: Explains how to disable the custom title bar and restore the default native window decorations on Linux by setting the `window.titleBarStyle` configuration to `native` in VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(window.titleBarStyle)` to `native\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Label Formatters in VSCode Extensions\nDESCRIPTION: JSON configuration for contributing resource label formatters that control how URIs are displayed. This example formats 'remotehub' URIs to show only the path segment with custom separators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"resourceLabelFormatters\": [\n      {\n        \"scheme\": \"remotehub\",\n        \"formatting\": {\n          \"label\": \"${path}\",\n          \"separator\": \"/\",\n          \"workspaceSuffix\": \"GitHub\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding for Markdown Snippet Insertion\nDESCRIPTION: Demonstrates how to set up a key binding in VS Code to insert a bold text snippet in Markdown files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"cmd+k 8\",\n    \"command\": \"editor.action.insertSnippet\",\n    \"when\": \"resourceLangId == 'markdown'\",\n    \"args\": {\n        \"name\": \"Insert bold text\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SCSS Map Support in VS Code JSON Settings\nDESCRIPTION: JSON configuration for enabling SCSS map syntax support in Visual Studio Code. This setting allows the editor to understand and work with SCSS map syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"html.format.contentUnformatted\": \"pre\"\n```\n\n----------------------------------------\n\nTITLE: Creating File System Watchers in VS Code Extensions\nDESCRIPTION: Examples of creating file system watchers for monitoring files and folders both inside and outside the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Watch a folder non-recursively\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '*.js'));\n\n// Watch the active text editor file\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.window.activeTextEditor.document.uri, '*'));\n```\n\n----------------------------------------\n\nTITLE: Verifying Devcontainer CLI Installation and Viewing Help - Bash\nDESCRIPTION: Verifies installation and displays available commands and options for the devcontainer CLI. Outputs help info for CLI usage and available commands, with placeholders for actual command usage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/devcontainer-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer <command>\n\nCommands:\n  devcontainer up                   Create and run dev container\n  devcontainer build [path]         Build a dev container image\n  devcontainer run-user-commands    Run user commands\n  devcontainer read-configuration   Read configuration\n  devcontainer features             Features commands\n  devcontainer templates            Templates commands\n  devcontainer exec <cmd> [args..]  Execute a command on a running dev container\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Contributing Remote JSON Schema Validation - VS Code Extension - JSON\nDESCRIPTION: This snippet shows how to add JSON schema validation to a specific file type within a VS Code extension manifest. The 'jsonValidation' contribution point allows associating a file pattern (such as .jshintrc) with a remote schema by providing the schema's URL. To use this, add the shown configuration under the 'contributes' property in package.json; VS Code will then validate files matching the pattern with the referenced schema. The main parameters are 'fileMatch' for glob patterns and 'url' for the schema endpoint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vDecember.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contributes\": {\n        \"jsonValidation\": [{\n            \"fileMatch\": \".jshintrc\",\n            \"url\": \"https://json.schemastore.org/jshintrc\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Calculator Class in JavaScript with Copilot Assistance\nDESCRIPTION: This snippet shows the beginning of a JavaScript Calculator class that serves as an example for demonstrating Copilot's code suggestion capabilities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Calculator\n```\n\n----------------------------------------\n\nTITLE: Setting numeric font-weight values in VS Code\nDESCRIPTION: JSON configuration demonstrating how to use numeric values for editor.fontWeight setting. Accepts values from 1 to 1000, in addition to string values like \"normal\" and \"bold\".\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.fontWeight\": 350\n```\n\n----------------------------------------\n\nTITLE: Defining CustomListItemType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for generating child items by evaluating expressions. It includes attributes for custom list code and an optional name attribute for the item.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"CustomListItemType\">\n    <xs:annotation>\n      <xs:documentation>Generates a child item obtained by evaluating the given expression.</xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n        <xs:attribute name=\"Name\" type=\"xs:string\" use=\"optional\">\n          <xs:annotation>\n            <xs:documentation>\n              Specifies an optional name to use for the item. The name is provided in &lt;DisplayString&gt; syntax and may contain embedded expressions.\n              If no name is provided a default name will be used in the form &quot;[i]&quot;, where 'i' is the index representing the order in which the item was returned.\n            </xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Command Invocation with Multiple Arguments (VS Code keybindings.json, JSON)\nDESCRIPTION: Illustrates passing an array of arguments to a command within a multi-command configuration. The snippet shows binding 'ctrl+shift+e' to 'runCommands' that will call 'myCommand' with two string arguments. If the intended command requires more or structured arguments, wrap them as needed in the 'args' array. Only VS Code's keybinding infrastructure is needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+e\",\n  \"command\": \"runCommands\",\n  \"args\": {\n    \"commands\": [\n      {\n        // command invoked with 2 arguments: vscode.executeCommand(\"myCommand\", \"arg1\", \"arg2\")\n        \"command\": \"myCommand\",\n        \"args\": [\n          \"arg1\",\n          \"arg2\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment in Bash\nDESCRIPTION: Command to manually initialize the environment for AI Toolkit projects when Conda activation fails.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash /mnt/[PROJECT_PATH]/setup/first_time_setup.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - Debug Inline Values\nDESCRIPTION: Setting to enable inline value display during debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndebug.inlineValues\n```\n\n----------------------------------------\n\nTITLE: Declaring File Icon Themes for VS Code (JSON)\nDESCRIPTION: This snippet shows how to add a file icon theme via the iconThemes contribution point in package.json for a VS Code extension. The theme is identified by an id, has a human-readable label, and references a local JSON file that defines the icon mappings for file types. The referenced file path must be present in the extension, and the id can be selected in user settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"iconThemes\": [\n      {\n        \"id\": \"my-cool-file-icons\",\n        \"label\": \"Cool File Icons\",\n        \"path\": \"./fileicons/cool-file-icon-theme.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Bind Mount Performance Note in VS Code\nDESCRIPTION: This code snippet shows how to display a note about bind mount performance in VS Code's user interface. It highlights the potential performance issues with bind mounts across operating system boundaries and suggests alternatives for better performance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_76.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Note on bind mount performance](images/1_76/bind-mount-performance.png)\n```\n\n----------------------------------------\n\nTITLE: Installing GPG as Non-Root User in a Debian/Ubuntu Container (Dockerfile)\nDESCRIPTION: Dockerfile instruction to install the `gnupg2` package in a Debian-based container using `sudo apt-get`. This variant is used when the Dockerfile instructions are executed as a non-root user who has been granted `sudo` permissions. Required for GPG key sharing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN sudo apt-get update && sudo apt-get install gnupg2 -y\n```\n\n----------------------------------------\n\nTITLE: Opening a Workspace File Using vscode.commands API\nDESCRIPTION: TypeScript example demonstrating how to use the vscode.commands.executeCommand method to open a workspace file after obtaining its URI from workspace.workspaceFile.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);\n```\n\n----------------------------------------\n\nTITLE: Installing js-yaml and Converting YAML Grammar to JSON\nDESCRIPTION: Commands for installing js-yaml as a development dependency and using it to convert a YAML grammar file to JSON format for use in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install js-yaml as a development only dependency in your extension\n$ npm install js-yaml --save-dev\n\n# Use the command-line tool to convert the yaml grammar to json\n$ npx js-yaml syntaxes/abc.tmLanguage.yaml > syntaxes/abc.tmLanguage.json\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet using HTML\nDESCRIPTION: This HTML snippet uses a <link> tag to associate an external CSS stylesheet with the HTML document. The `rel=\"stylesheet\"` attribute defines the relationship, `type=\"text/css\"` specifies the content type, and `href=\"css/inproduct_releasenotes.css\"` points to the location of the CSS file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Conda Auto-Activation in WSL\nDESCRIPTION: Command to disable the automatic activation of the Conda base environment in WSL.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconda config --set auto_activate_base false\n```\n\n----------------------------------------\n\nTITLE: Integrating Scroll-To-Top UI in Release Notes - HTML\nDESCRIPTION: This HTML snippet defines a clickable 'Scroll to top' button with semantic ARIA attributes and links an external CSS file for styling in-product release notes. It is intended to be embedded in release notes pages to facilitate accessibility and navigation, with the anchor element styled via the included CSS. Dependencies include the referenced 'css/inproduct_releasenotes.css' stylesheet. Key attributes provide accessibility hints; the button expects to trigger scrolling behavior, usually backed by additional JS logic or browser defaults. Outputs are the interactive UI element on compatible browsers; limitations depend on the presence and correctness of the linked stylesheet and any associated scroll handler scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_48.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Type Assertions with Space Option\nDESCRIPTION: Demonstrates the effect of the 'typescript.format.insertSpaceAfterTypeAssertion' setting on code formatting. This setting controls whether a space is inserted after type assertions in TypeScript.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Default formatting\n<Foo>{ abc: 123, ... };\n\n// With \"typescript.format.insertSpaceAfterTypeAssertion\":true\n<Foo> { abc: 123, ... };\n```\n\n----------------------------------------\n\nTITLE: Debug Variable Context Menu Contribution\nDESCRIPTION: Example of contributing a menu item to the debug variables context menu. Shows how to add a custom array view command that only appears for array-type variables in Java debugging sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n  \"contributes\": {\n    \"menus\": {\n      \"debug/variables/context\": [\n        {\n          \"command\": \"variables-view.showArrayAsCustomDataView\",\n          \"when\": \"debugConfigurationType == 'java' &&\n                     debugProtocolVariableMenuContext == 'array'\"\n        }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Proxies for Remote SSH in VS Code (JSON)\nDESCRIPTION: This snippet demonstrates how to configure HTTP and HTTPS proxies for specific hosts or all hosts in the Remote - SSH extension settings. It uses the 'remote.SSH.httpProxy' and 'remote.SSH.httpsProxy' settings to specify proxy URLs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_98.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remote.SSH.httpProxy\": {\n        \"myhost\": \"http://proxy.example.com:8080\",\n        \"myhost2\": \"http://proxy2.example.com\"\n    },\n    \"remote.SSH.httpsProxy\": {\n        \"myhost\": \"https://proxy.example.com:8080\",\n        \"myhost2\": \"https://proxy2.example.com\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Command Registration\nDESCRIPTION: Example showing how NES can suggest updates to both extension.ts and package.json when adding a new command to a VS Code extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/02/12/next-edit-suggestions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// extension.ts\ncontext.subscriptions.push(\n    vscode.commands.registerCommand('myExtension.newCommand', () => {\n        // Command implementation\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Boolean Setting with Description\nDESCRIPTION: Example showing how to define a boolean setting with a description that will be used as a checkbox label in the settings UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitMagic.blame.heatMap.enabled\": {\n    \"description\": \"Specifies whether to provide a heatmap indicator in the gutter blame annotations\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Electron Renderer with Node.js Access\nDESCRIPTION: Example showing direct Node.js API usage in an Electron renderer process before sandboxing, demonstrating file system access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/11/28/vscode-sandbox.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <h1>Hello World</h1>\n    <script>\n      const fs = require('fs');\n      fs.writeFileSync('/some/file.txt', 'Hello World');\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for AutoVisualizer Configuration in Visual Studio\nDESCRIPTION: This XML schema defines the structure for AutoVisualizer configuration files used in Visual Studio debugging. It includes complex types for various visualizer elements, attributes for customization, and documentation for each component.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_30\n\nLANGUAGE: XML\nCODE:\n```\n<xs:attributeGroup ref=\"ViewConstraints\" />\n<xs:attribute name=\"Priority\" type=\"PriorityType\" />\n<xs:attribute name=\"Inheritable\" type=\"xs:boolean\" use=\"optional\">\n  <xs:annotation>\n    <xs:documentation>\n      True if this visualizer may be used by objects of classes derived from the given type, false if an object must be directly of this type for the visualizer to take effect.\n      Default is true.\n    </xs:documentation>\n  </xs:annotation>\n</xs:attribute>\n</xs:complexType>\n\n<xs:simpleType name=\"PriorityType\">\n<xs:annotation>\n  <xs:documentation>Specifies an optional priority to assign to this entry for type matching. Higher priority entries within a particular file or directory\n  are checked first. &lt;Type&gt; entries that do not specify a priority receive default priority of &quot;Medium&quot;  &lt;AlternativeType&gt; entries which do not specify a priority\n  will inherit the priority of the enclosing &lt;Type&gt; element. The priority is only used to disambiguate type matching when all other means of disambiguation are unavailable.\n  For example, entries with more specific template instantiations, module constraints, or view constraints will take priority regardless of any priority values specified.\n  Similarly, regardless of priority, natvis files that are part of a loaded project will always take precedence over files in the user natvis directory,\n  which will, in turn, take precedence over files in the system-wide natvis directory.\n  If two entries have the same priority and cannot otherwise be disambiguated, it is unspecified which one will get used.\n  </xs:documentation>\n</xs:annotation>\n<xs:union>\n  <xs:simpleType>\n    <xs:restriction base=\"xs:string\">\n      <xs:enumeration value=\"Low\" />\n      <xs:enumeration value=\"MediumLow\" />\n      <xs:enumeration value=\"Medium\" />\n      <xs:enumeration value=\"MediumHigh\" />\n      <xs:enumeration value=\"High\" />\n    </xs:restriction>\n  </xs:simpleType>\n</xs:union>\n</xs:simpleType>\n\n<xs:complexType name=\"UIVisualizerType\">\n<xs:annotation>\n  <xs:documentation>Specifies details of a UI visualizer which creates its own interface to display an object. Visualizer entry for a type needs to reference a UI visualizer in order to associate the type with the UI visualizer.</xs:documentation>\n</xs:annotation>\n<xs:simpleContent>\n  <xs:extension base=\"xs:string\">\n    <xs:attribute name=\"ServiceId\" type=\"GuidType\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>Specifies the visualizer service GUID. The service must be provided by a Visual Studio package that also implements IVsCppDebugUIVisualizer interface. The debugger will load the package only when user requests this visualization service.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attribute name=\"Id\" type=\"xs:int\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>Specifies the visualizer id. Use to differentiate multiple viewers provided by this visualizer service.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attribute name=\"MenuName\" type=\"xs:string\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>Specifies the name which will be shown in the UI visualizer list for a variable.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attribute name=\"Description\" type=\"xs:string\" use=\"optional\">\n      <xs:annotation>\n        <xs:documentation>Specifies the description for this UI visualizer.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n  </xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n\n<xs:complexType name=\"HResultType\">\n<xs:annotation>\n  <xs:documentation>Specifies a visualizer entry which customizes the debugger view of an HRESULT.</xs:documentation>\n</xs:annotation>\n<xs:sequence>\n  <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"AlternativeHResult\" type=\"AlternativeHResultType\">\n    <xs:annotation>\n      <xs:documentation>Other HResult types that will share the same visualizer.</xs:documentation>\n    </xs:annotation>\n  </xs:element>\n  <xs:element minOccurs=\"1\" maxOccurs=\"1\" name=\"HRValue\" type=\"StringType\">\n    <xs:annotation>\n      <xs:documentation>32 bit HRESULT value to be customized.</xs:documentation>\n    </xs:annotation>\n  </xs:element>\n  <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"HRDescription\" type=\"StringType\">\n    <xs:annotation>\n      <xs:documentation>The description for this HRESULT value to be shown in the debugger windows.</xs:documentation>\n    </xs:annotation>\n  </xs:element>\n</xs:sequence>\n<xs:attribute name=\"Name\" type=\"StringType\" use=\"required\">\n  <xs:annotation>\n    <xs:documentation>The name of the HRESULT value to be shown in the debugger windows.</xs:documentation>\n  </xs:annotation>\n</xs:attribute>\n</xs:complexType>\n\n<xs:complexType name=\"LocalizedStringType\">\n<xs:annotation>\n  <xs:documentation>\n    Defines a localized string resource that can be referenced by natvis elements that accept strings (e.g. DisplayString, Name attribute of Item element).\n    Use @&lt;id&gt;; format to reference a localized string (e.g. @1001;)\n  </xs:documentation>\n</xs:annotation>\n<xs:simpleContent>\n  <xs:extension base=\"xs:string\">\n    <xs:attribute name=\"Id\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>The id of the localized string. Use @&lt;id&gt;; format to reference this localized string.</xs:documentation>\n      </xs:annotation>\n      <xs:simpleType>\n        <xs:restriction base=\"xs:unsignedInt\">\n          <xs:minInclusive value=\"1\"/>\n        </xs:restriction>\n      </xs:simpleType>\n    </xs:attribute>\n  </xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n\n<xs:complexType name=\"LocalizedStringsType\">\n<xs:annotation>\n  <xs:documentation>\n    Specifies a list of localized strings that can be referenced by natvis elements. Define localized strings in a satellite natvis file with the same name as the main file\n    and deploy it into a locale specific folder next to the main natvis file. Debugger will load localized resources from the appropriate satellite file.\n    Define localized strings in the main natvis file to serve as defaults when there is no satellite file for a locale.\n  </xs:documentation>\n</xs:annotation>\n<xs:sequence>\n  <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"LocalizedString\" type=\"LocalizedStringType\"/>\n</xs:sequence>\n</xs:complexType>\n\n<!-- Definition of complex elements-->\n\n<xs:element name=\"AutoVisualizer\">\n<xs:annotation>\n  <xs:documentation>Root element of the natvis file.</xs:documentation>\n</xs:annotation>\n<xs:complexType>\n  <xs:sequence>\n    <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Version\" type=\"VersionType\">\n      <xs:annotation>\n        <xs:documentation>Specifies a matching module name and version for all visualizers which do not explicitly specify a module name and version in this file.</xs:documentation>\n      </xs:annotation>\n    </xs:element>\n    <xs:element minOccurs=\"0\" maxOccurs=\"1\" name=\"LocalizedStrings\" type=\"LocalizedStringsType\"/>\n    <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"UIVisualizer\" type=\"UIVisualizerType\"/>\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Type\" type=\"VisualizerType\" />\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"HResult\" type=\"HResultType\"/>\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Intrinsic\" type=\"IntrinsicType\" />\n    </xs:choice>\n  </xs:sequence>\n</xs:complexType>\n</xs:element>\n</xs:schema>\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Nodemon for Debugging (Bash)\nDESCRIPTION: This command starts the `server.js` Node.js application using `nodemon`, which automatically restarts the application on file changes. The `--debug` flag enables Node.js debugging, typically listening on port 5858, allowing a debugger like VS Code to attach. This setup is used in conjunction with a VS Code 'attach' launch configuration with the `restart` option enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vFebruary.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnodemon --debug server.js\n```\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownString.baseUri with File Path in TypeScript\nDESCRIPTION: Example of using the MarkdownString.baseUri property to resolve relative links in Markdown against a file path. When baseUri points to a file, relative paths are resolved relative to the parent directory of that file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst md = new vscode.MarkdownString(`[link](./file.js)`);\nmd.baseUri = vscode.Uri.file('/path/to/otherFile.js');\n// Here 'link' in the rendered Markdown resolves to '/path/to/file.js'\n```\n\n----------------------------------------\n\nTITLE: Diff Editor Color Configuration\nDESCRIPTION: Color settings for the diff editor, including inserted/removed text highlighting, borders, and unchanged region styling\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"diffEditor.insertedTextBackground\": \"#color\",\n  \"diffEditor.removedTextBackground\": \"#color\",\n  \"diffEditor.border\": \"#color\",\n  \"diffEditor.diagonalFill\": \"#color\",\n  \"diffEditor.unchangedRegionBackground\": \"#color\",\n  \"diffEditor.unchangedCodeBackground\": \"#color\",\n  \"multiDiffEditor.headerBackground\": \"#color\",\n  \"multiDiffEditor.background\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Experimenting with Date Formatting in VS Code Debug Console (Bash)\nDESCRIPTION: These snippets show further interaction within the VS Code Debug Console during a paused Python debugging session. They demonstrate experimenting with different format codes for the `strftime` method on the `now` datetime object to produce various string representations of the date and time. This allows developers to test code snippets dynamically in the context of the paused application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnow.strftime(\"%a, %d %B, %Y at %X\")\n'Wed, 31 October, 2018 at 18:13:39'\nnow.strftime(\"%a, %d %b, %Y at %X\")\n'Wed, 31 Oct, 2018 at 18:13:39'\nnow.strftime(\"%a, %d %b, %y at %X\")\n'Wed, 31 Oct, 18 at 18:13:39'\n```\n\n----------------------------------------\n\nTITLE: Selectively Downloading Binary Files with Git LFS\nDESCRIPTION: Commands for selectively downloading binary files after a skip-smudge clone, using Git LFS pull with include patterns to manage which directories or files to fetch.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit lfs pull -I \"docs/nodejs\"\ngit lfs pull -I \"release-notes/images/1_4*/*\"\ngit lfs pull -I \"docs,api\"\ngit lfs pull -I <PATTERN>\n```\n\n----------------------------------------\n\nTITLE: Pre-release Version Format in package.json\nDESCRIPTION: Example of defining pre-release versions for VS Code extensions using semantic versioning format. Supports alpha, beta, and other pre-release designations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-extension\",\n  \"displayName\": \"My Extension\",\n  \"version\": \"1.2.3-alpha\",  // Pre-release version format\n  // Other package.json properties\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcuts\nDESCRIPTION: Keyboard shortcuts referenced for Copilot Edits navigation and actions\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkb(editor.action.accessibilityHelp)\nkb(chatEditor.action.navigateNext)\nkb(chatEditor.action.navigatePrevious)\nkb(chatEditor.action.acceptHunk)\nkb(chatEditor.action.undoHunk)\nkb(chatEditor.action.diffHunk)\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding to Close Output Panel in JSON\nDESCRIPTION: JSON configuration for a custom keybinding that closes the panel when the Output panel is active. This helps users revert to the previous panel toggle behavior by defining a specific keyboard shortcut.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"key\": \"cmd+shift+u\",\n    \"command\": \"workbench.action.closePanel\",\n    \"when\": \"activePanel==workbench.panel.output\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Entire Workspace to a Named Volume in Docker Compose (YAML)\nDESCRIPTION: This Docker Compose configuration snippet maps a named volume (`your-volume-name-here`) to the `/workspace` directory within a service. This places the entire project source code inside the volume for optimal performance, instead of bind-mounting from the host. The source code needs to be cloned into this volume after the container starts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n        - your-volume-name-here:/workspace\n    # ...\n\nvolumes:\n  your-volume-name-here:\n```\n\n----------------------------------------\n\nTITLE: Using Regex Match in 'when' Clause Conditions (JSON)\nDESCRIPTION: Illustrates how to use the regular expression match operator (`=~`) within a `when` clause in VS Code's contribution points (e.g., menus, keybindings in `package.json`). This example shows how to conditionally enable a feature based on the `resourceFilename` context key matching the regular expression `/docker/`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"when\": \"resourceFilename =~ /docker/\"\n```\n\n----------------------------------------\n\nTITLE: Checking Telemetry Configuration Level\nDESCRIPTION: Shows the configuration key `telemetry.telemetryLevel` which extensions could previously check to determine the user's telemetry settings. This setting reflects user configuration choices but doesn't account for the CLI flag.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntelemetry.telemetryLevel\n```\n\n----------------------------------------\n\nTITLE: Including Release Notes CSS Stylesheet\nDESCRIPTION: HTML link element that references an external CSS file for styling VS Code release notes in the documentation. The stylesheet is loaded from the css directory and specifically targets release notes content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Git LFS Support Settings\nDESCRIPTION: JSON configuration to disable Git LFS read support for GitHub Repositories and Azure Repos extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"githubRepositories.experimental.lfs.read.enabled\": false\n\"azureRepos.experimental.lfs.read.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Checking libstdc++ Availability in Bash\nDESCRIPTION: This command inspects the `libstdc++.so.6` library file to determine available C++ standard library versions, specifically checking for the presence of GLIBCXX_3.4.25 or higher. This helps verify if the system meets the `libstdc++` prerequisite (>= 3.4.25) for VS Code Remote Development. Note that the path `/usr/lib64/` might vary based on the Linux distribution and architecture.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/linux.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstrings /usr/lib64/libstdc++.so.6 \\| grep GLIBCXX\n```\n\n----------------------------------------\n\nTITLE: Disabling Emmet Abbreviations for PHP Files - JSON\nDESCRIPTION: Configures VS Code to exclude the 'php' language from Emmet abbreviation expansions. Add this configuration to `settings.json` to prevent Emmet triggers in PHP files. The value is a string array of language IDs. Useful when Emmet is undesired in certain languages or conflicts with other extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"emmet.excludeLanguages\": [\\n        \"php\"\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Colors in TypeScript for VS Code Extension\nDESCRIPTION: TypeScript code for consuming theme colors in an extension using the ThemeColor API, allowing access to both built-in and custom theme colors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst errorColor = new vscode.ThemeColor(\"superstatus.error\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Extension Scripts\nDESCRIPTION: Script configuration for VS Code extension development, including compilation and publishing commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"vscode:prepublish\": \"tsc -p ./\",\n    \"compile\": \"tsc -watch -p ./\",\n    \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Arguments for Proposed API Access\nDESCRIPTION: Shows how to configure the VS Code Insiders argv.json file to enable proposed APIs for specific extensions on every launch, allowing for easier development and testing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/using-proposed-api.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"enable-proposed-api\": [\"<YOUR-EXTENSION-ID>\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering IntelliSense Suggestions or Documentation via Keyboard Shortcut/Command\nDESCRIPTION: This command (`editor.action.triggerSuggest`) manually triggers IntelliSense suggestions in the VS Code editor. If suggestions are already visible, triggering it again can expand the documentation panel for the selected suggestion.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\neditor.action.triggerSuggest\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Volume Mount for node_modules in Docker Compose (YAML)\nDESCRIPTION: This Docker Compose configuration snippet demonstrates how to mount the `node_modules` folder to a named volume (`try-node-node_modules`) within a specific service. It also includes a standard bind mount for the project's source code. This approach enhances performance for package installations when using Docker Compose with Dev Containers on macOS or Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/improve-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n      # Or wherever you've mounted your source code\n      - .:/workspace:cached\n      - try-node-node_modules:/workspace/node_modules\n    # ...\n\nvolumes:\n  try-node-node_modules:\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button HTML\nDESCRIPTION: Defines an HTML anchor tag (`<a>`) styled as a button to allow users to scroll back to the top of the page. It uses ARIA attributes (`role`, `aria-label`) for accessibility and includes an empty `<span>` with the class `icon`, likely used for displaying an icon via the linked CSS. This element is part of the in-product release notes styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewConstraints Attribute Group in XML Schema\nDESCRIPTION: Defines the ViewConstraints attribute group, which includes attributes for filtering by view in the visualizer configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<xs:attributeGroup name=\"ViewConstraints\">\n  <xs:attribute name=\"IncludeView\" type =\"ViewIncludeType\" use=\"optional\" />\n  <xs:attribute name=\"ExcludeView\" type =\"ViewExcludeType\" use=\"optional\" />\n</xs:attributeGroup>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Terminal Raw Data Streams (VS Code Terminal API, TypeScript)\nDESCRIPTION: This snippet demonstrates how an extension can subscribe to real-time output from a terminal, including raw ANSI escape sequences, using the VS Code Terminal API. The code creates a new terminal using `window.createTerminal()` and attaches an `onData` event listener that logs the incoming data. Extensions using this must have access to the VS Code API and request the proposed API if required. The listener callback receives the data as a string argument.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst terminal = window.createTerminal();\\nterminal.onData(data => {\\n    console.log('Terminal data: ' + data);\\n});\n```\n\n----------------------------------------\n\nTITLE: Example PowerShell Global Completions in VS Code Terminal\nDESCRIPTION: Provides examples (`Get-ChildItem`, `Write-Host`) of PowerShell-specific global commands (cmdlets) that are now suggested by the enhanced terminal completion feature in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n`Get-ChildItem`, `Write-Host`\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom Task in Extension Code (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how an extension creates a `vscode.Task` instance that conforms to a previously contributed task definition (like the `npm` example). It passes a `TaskDefinition` object (`{ type: 'npm', script: 'test' }`) matching the structure defined in `package.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nlet task = new vscode.Task({ type: 'npm', script: 'test' }, ....);\n```\n\n----------------------------------------\n\nTITLE: Binding a Key to Insert Snippet for Text Wrapping in JSON\nDESCRIPTION: This JSON snippet defines a VS Code keybinding that triggers the `editor.action.insertSnippet` command. It assigns the key combination `cmd+k '` to insert a snippet which wraps the currently selected text (`$TM_SELECTED_TEXT`) within single quotes. This configuration would typically reside in the user's `keybindings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n\t\"key\": \"cmd+k '\",\n\t\"command\": \"editor.action.insertSnippet\",\n\t\"args\": { \"snippet\": \"'$TM_SELECTED_TEXT'\" }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick Suggestions in VS Code Editor\nDESCRIPTION: JSON configuration for controlling IntelliSense behavior in different contexts (comments, strings, and other code) using the editor.quickSuggestions setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_11.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.quickSuggestions\": {\n    \"comments\": false, // <- no 24x7 IntelliSense in comments\n    \"strings\": true, // but in strings and the other parts of source files\n    \"other\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing npm IntelliSense Extension in Visual Studio Code\nDESCRIPTION: This snippet shows how to install the npm IntelliSense extension using Visual Studio Code's Quick Open feature. It provides the keyboard shortcut for Quick Open and the extension installation command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/05/04/extension-roundup-may.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n>**Install:** Quick Open (`kb(workbench.action.quickOpen)`), paste `ext install npm-intellisense` and press `kbstyle(Enter)`.\n```\n\n----------------------------------------\n\nTITLE: Setting Action Bar Toggled Background Color\nDESCRIPTION: Specifies the configuration key used to set the background color for action items in a toggled state within the VS Code Action Bar. This identifier is used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n- `actionBar.toggledBackground`: Background color for toggled action items in action bar.\n```\n\n----------------------------------------\n\nTITLE: Creating Quick Pick and Input Box Controls with VS Code QuickInput API (TypeScript)\nDESCRIPTION: Shows the proposed API function signatures to create customizable QuickPick and InputBox UI controls for richer user input in extensions, as opposed to default modal dialogs. Developers can register event handlers and set properties on these instances. This API requires dependence on the latest VS Code proposed API and is available only in Insiders builds with \"enableProposedApi\": true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport namespace window {\n  export function createQuickPick<T extends QuickPickItem>(): QuickPick<T>;\n  export function createInputBox(): InputBox;\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting code with console.profile for CPU profiling in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually instrument JavaScript code to collect CPU profiles by using console.profile() to start profiling and console.profileEnd() to stop it. The resulting .cpuprofile will be automatically saved in the workspace folder.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/profiling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.profile();\ndoSomeVeryExpensiveWork();\nconsole.profileEnd();\n```\n\n----------------------------------------\n\nTITLE: Auto Closing Configuration for VSCode Editor\nDESCRIPTION: CSS code snippets demonstrating path completion functionality for @import statements and url() links in CSS, SCSS and Less files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_27.md#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"./styles/\"\nurl(\"../assets/\")\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcuts in Markdown\nDESCRIPTION: Documentation showing keyboard shortcut notation for VS Code commands using kbstyle formatting\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/03/30/vscode-copilot.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Cmd+I) on macOS (or kbstyle(Ctrl+I) on Windows/Linux)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Tab)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Enter)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Up/Down)\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Save for LaTeX Files in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet, intended for the VS Code `settings.json` file, demonstrates how to configure language-specific settings. It overrides the global `files.autoSave` setting specifically for files identified with the `latex` language ID, setting it to `\"off\"` to disable automatic saving for LaTeX documents.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n    \"[latex]\": {\n        \"files.autoSave\": \"off\",\n    },\n```\n```\n\n----------------------------------------\n\nTITLE: VSCode Tasks Configuration for ESBuild\nDESCRIPTION: Tasks configuration for VSCode that sets up watch tasks and build processes for ESBuild and TypeScript compilation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n\t\t\t\"label\": \"watch-web\",\n\t\t\t\"dependsOn\": [\n\t\t\t\t\"npm: watch-web:tsc\",\n\t\t\t\t\"npm: watch-web:esbuild\"\n\t\t\t],\n\t\t\t\"presentation\": {\n\t\t\t\t\"reveal\": \"never\"\n\t\t\t},\n\t\t\t\"group\": {\n\t\t\t\t\"kind\": \"build\",\n\t\t\t\t\"isDefault\": true\n\t\t\t},\n\t\t\t\"runOptions\": {\n\t\t\t\t\"runOn\": \"folderOpen\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"npm\",\n\t\t\t\"script\": \"watch-web:esbuild\",\n\t\t\t\"group\": \"build\",\n\t\t\t\"problemMatcher\": \"$esbuild-watch\",\n\t\t\t\"isBackground\": true,\n\t\t\t\"label\": \"npm: watch-web:esbuild\",\n\t\t\t\"presentation\": {\n\t\t\t\t\"group\": \"watch\",\n\t\t\t\t\"reveal\": \"never\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"npm\",\n\t\t\t\"script\": \"watch-web:tsc\",\n\t\t\t\"group\": \"build\",\n\t\t\t\"problemMatcher\": \"$tsc-watch\",\n\t\t\t\"isBackground\": true,\n\t\t\t\"label\": \"npm: watch-web:tsc\",\n\t\t\t\"presentation\": {\n\t\t\t\t\"group\": \"watch\",\n\t\t\t\t\"reveal\": \"never\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"label\": \"compile\",\n\t\t\t\"type\": \"npm\",\n\t\t\t\"script\": \"compile-web\",\n\t\t\t\"problemMatcher\": [\n\t\t\t\t\"$tsc\",\n\t\t\t\t\"$esbuild\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote User in VS Code DevContainer\nDESCRIPTION: JSON configuration for specifying a non-root user for VS Code and related processes in a dev container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remoteUser\": \"user-name-goes-here\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Server Plugin for Web\nDESCRIPTION: TypeScript module that exports a default initialization function for activating the plugin in a web worker environment. The function receives TypeScript server library modules as parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function init(modules: { typescript: typeof import(\"typescript/lib/tsserverlibrary\") }) {\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Encoding Categorical Gender Data in Python\nDESCRIPTION: Converts the categorical 'sex' column in the `data` DataFrame from string values ('male', 'female') to numerical representations (1 for 'male', 0 for 'female') using the `replace` method with `inplace=True`. This encoding is necessary for performing numerical analyses like correlation calculations that require numeric input. Depends on the `data` DataFrame containing the 'sex' column with string values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/data-science-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata.replace({'male': 1, 'female': 0}, inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Extension from Marketplace using Command\nDESCRIPTION: Demonstrates how to programmatically install an extension from the VS Code Marketplace using the workbench.extensions.installExtension command with the extension's identifier.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.executeCommand('workbench.extensions.installExtension', 'ms-python.python');\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - Inline Chat Empty Line Hint\nDESCRIPTION: Experimental setting to enable Inline Chat hints on empty lines in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ninlineChat.lineEmptyHint\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic DocumentLinkProvider Interface in VS Code API - TypeScript\nDESCRIPTION: This TypeScript interface shows the updated generic definition for DocumentLinkProvider in the VS Code API, allowing implementers to specify custom types for links. Both provideDocumentLinks and resolveDocumentLink methods support a generic parameter T, which defaults to DocumentLink. This update clarifies how the 'provide' and 'resolve' methods are related and is backwards compatible for extensions using the default type.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface DocumentLinkProvider<T = DocumentLink> {\\n\\n  provideDocumentLinks(document: TextDocument, token: CancellationToken): ProviderResult<T[]>;\\n\\n  resolveDocumentLink?(link: T, token: CancellationToken): ProviderResult<T>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Formatting in VS Code Settings\nDESCRIPTION: JSON configuration to disable the default HTML formatter in VS Code. This is useful when using a different formatting extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"html.format.enable\": false\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package via Command Palette in VS Code\nDESCRIPTION: VS Code command used via the Command Palette (`kb(workbench.action.showCommands)`) to initiate the process of adding a new NuGet package dependency to a selected C# project within the current solution. This command prompts for project selection (if multiple exist), package search term, and desired package version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/package-management.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNuGet: Add NuGet Package\n```\n\n----------------------------------------\n\nTITLE: Executing Move Active Editor Command in Visual Studio Code JavaScript\nDESCRIPTION: JavaScript code to programmatically move the active editor across groups or tabs using the 'moveActiveEditor' command. This example moves the editor 3 tabs to the left.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncommands.executeCommand('moveActiveEditor', {to: 'left', by: 'tab', value: '3'})\n```\n\n----------------------------------------\n\nTITLE: Publishing Pre-release Extensions\nDESCRIPTION: Commands for packaging and publishing pre-release versions of extensions using vsce CLI tool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvsce package --pre-release\nvsce publish --pre-release\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcuts Configuration Examples\nDESCRIPTION: Examples of keyboard shortcut configurations in JSON format, showing different types of shortcuts including editor-specific, complementary, global, and chord shortcuts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Keyboard shortcuts that are active when the focus is in the editor\n{ \"key\": \"home\",            \"command\": \"cursorHome\",                  \"when\": \"editorTextFocus\" },\n{ \"key\": \"shift+home\",      \"command\": \"cursorHomeSelect\",            \"when\": \"editorTextFocus\" },\n\n// Keyboard shortcuts that are complementary\n{ \"key\": \"f5\",              \"command\": \"workbench.action.debug.continue\", \"when\": \"inDebugMode\" },\n{ \"key\": \"f5\",              \"command\": \"workbench.action.debug.start\",    \"when\": \"!inDebugMode\" },\n\n// Global keyboard shortcuts\n{ \"key\": \"ctrl+f\",          \"command\": \"actions.find\" },\n{ \"key\": \"alt+left\",        \"command\": \"workbench.action.navigateBack\" },\n{ \"key\": \"alt+right\",       \"command\": \"workbench.action.navigateForward\" },\n\n// Global keyboard shortcuts using chords (two separate keypress actions)\n{ \"key\": \"ctrl+k enter\",    \"command\": \"workbench.action.keepEditor\" },\n{ \"key\": \"ctrl+k ctrl+w\",   \"command\": \"workbench.action.closeAllEditors\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Icon Theme in package.json\nDESCRIPTION: Extension manifest configuration for declaring a new product icon theme contribution. Defines the theme's ID, display label, and path to the theme definition file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/product-icon-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"productIconThemes\": [\n      {\n        \"id\": \"aliensAreBack\",\n        \"label\": \"Aliens Are Back\",\n        \"path\": \"./producticons/aliens-product-icon-theme.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hugging Face Hub CLI\nDESCRIPTION: Installs the Hugging Face Hub command-line interface for managing model repositories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npip install -U \"huggingface_hub[cli]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ask GitHub Copilot Location Setting\nDESCRIPTION: JSON configuration to specify whether Ask GitHub Copilot should open in Quick Chat instead of the default Chat view in the side bar.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_83.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.commandPalette.experimental.askChatLocation\": \"quickChat\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Tab Label Format in VS Code Settings using JSON\nDESCRIPTION: Illustrates how to configure the display format for editor tabs in VS Code settings. Setting `workbench.editor.labelFormat` to `\"medium\"` makes VS Code display the folder name along with the file name in the tab header, useful for disambiguating files in multi-root workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/workspaces/multi-root-workspaces.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.labelFormat\": \"medium\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Executable Path in VS Code (Windows)\nDESCRIPTION: JSON configuration for setting the PHP executable path in Windows environment through settings.json\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/php.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"php.validate.executablePath\": \"c:/php/php.exe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Focus Setting Options\nDESCRIPTION: Shows the possible values for the terminal.integrated.focusAfterRun setting that controls focus behavior after running selected text.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\naccessible-buffer\nterminal\nnone\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Commands and Context Menu Contributions - VS Code Extension Manifest - JSON\nDESCRIPTION: Provides a JSON manifest example for contributing commands and associating them with the Extensions view context menu in VS Code extensions. The snippet defines a 'Hello World' command, assigns it to the 'extension/context' menu group, and specifies a 'when' clause for display based on extension status. No runtime dependencies are required. The approach enables authors to create context-specific actions for extension management in the UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"extension.helloWorld\",\n                \"title\": \"Hello World\"\n            }\n        ],\n        \"menus\": {\n            \"extension/context\": [\n                {\n                    \"command\": \"extension.helloWorld\",\n                    \"group\": \"2_configure\",\n                    \"when\": \"extensionStatus==installed\",\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unfolding Editor Content via Command API in VS Code - JavaScript\nDESCRIPTION: Calls the 'editor.unfold' command to expand collapsed code sections by a specified number of levels below the cursor. Suitable for custom VS Code extensions. Parameters: 'levels' determines how many folding levels to unfold. Directly interacts with the editor UI.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  commands.executeCommand('editor.unfold', {levels: '2'})\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - Python RestructuredText Support\nDESCRIPTION: Experimental setting to enable support for reStructuredText docstrings in Python.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\npython.analysis.supportRestructuredText:true\n```\n\n----------------------------------------\n\nTITLE: Redirecting stderr to stdout in Dockerfile RUN Command\nDESCRIPTION: Redirects standard error (stderr) to standard output (stdout) for a command executed within a Dockerfile `RUN` instruction using `2>&1`. This prevents informational messages or harmless warnings sent to stderr from appearing in red in terminals like VS Code's, while still allowing actual errors to halt the build and be logged.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get -y install --no-install-recommends apt-utils dialog 2>&1\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy SSH Service Entry - Windows PowerShell (PowerShell)\nDESCRIPTION: This PowerShell command creates a new Windows service entry named 'sshd', pointing to the OpenSSH executable. It is a workaround for a Windows issue where SSH identity access may be broken after an OS update. Prerequisites: Administrative PowerShell prompt and Windows with OpenSSH installed. Inputs include service name and path; output is a new service registered in Windows for OpenSSH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/ssh.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Service sshd -BinaryPathName \"C:\\\\Windows\\\\System32\\\\OpenSSH\\\\ssh.exe\"\n```\n\n----------------------------------------\n\nTITLE: Enabling C++ Enhanced Colorization in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to enable the `C_Cpp.enhancedColorization` setting within VS Code's `settings.json` file. This setting controls whether the C/C++ extension provides enhanced semantic colorization based on IntelliSense information. It requires the VS Code C/C++ extension to be installed and IntelliSense to be functional. This setting is enabled by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/colorization-cpp.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"C_Cpp.enhancedColorization\": \"enabled\"\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Scopes for VS Code Extension Settings\nDESCRIPTION: JSON configuration showing how to define scopes for extension settings. This example classifies 'mylint.enable' as a resource-specific setting that can be configured at User, Workspace, and Folder levels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"configuration\": {\n  \"type\": \"object\",\n  \"title\": \"MyLint\",\n  \"properties\": {\n    \"mylint.enable\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"description\": \"Control whether mylint is enabled for files or not.\",\n      \"scope\": \"resource\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific TypeScript Version via NPM (Shell)\nDESCRIPTION: This shell command uses Node Package Manager (NPM) to install TypeScript version 1.8.10 as a local dependency within the current workspace directory. This allows developers working on a specific project to use TypeScript 1.8.10 instead of the newer version (2.0.3) bundled with VS Code 1.6, by subsequently configuring the `typescript.tsdk` workspace setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typescript@1.8.10\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Maps with Glob Patterns in VS Code\nDESCRIPTION: Launch configuration that uses glob patterns to specify source map locations for debugging transpiled code. This example includes files from 'out' and 'node_modules' directories while excluding test files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceMaps\": true,\n  \"outFiles\": [\n    \"${workspaceRoot}/{out,node_modules}/**/*.js\",\n    \"!${workspaceRoot}/out/tests/**/*.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Shortcuts for File Path Operations in VS Code\nDESCRIPTION: Keyboard shortcuts for copying file paths in Visual Studio Code. These commands allow users to copy the absolute path or the relative path of a file to the clipboard.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(copyFilePath)\nkb(copyRelativeFilePath)\n```\n\n----------------------------------------\n\nTITLE: JavaScript ES6 Code Snippets\nDESCRIPTION: Example of JavaScript ES6 code snippets provided by the extension for rapid code development.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: image\nCODE:\n```\njavascript_snippets.png\n```\n\n----------------------------------------\n\nTITLE: Defining IndexListItemsType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for specifying generalized array views of variables. It includes elements for size and value nodes, with annotations explaining their usage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_22\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"IndexListItemsType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a more generalized form of array view of a variable. Use when your data elements are not contiguous in memory and you need to compute index to the data elements.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"Size\" type=\"SizeType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the size of the index list.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n      <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"ValueNode\" type=\"IndexNodeType\">\n        <xs:annotation>\n          <xs:documentation>Specifies the expression that uses the implicit $i parameter that points to the ith element.</xs:documentation>\n        </xs:annotation>\n      </xs:element>\n    </xs:sequence>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Setting with Custom Labels and Descriptions\nDESCRIPTION: Demonstrates how to create an enum setting with custom labels, markdown descriptions, and default value.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settingsEditorTestExtension.enumSetting\": {\n    \"type\": \"string\",\n    \"enum\": [\"first\", \"second\", \"third\"],\n    \"markdownEnumDescriptions\": [\"The *first* enum\", \"The *second* enum\", \"The *third* enum\"],\n    \"enumItemLabels\": [\"1st\", \"2nd\", \"3rd\"],\n    \"default\": \"first\",\n    \"description\": \"Example setting with an enum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Server on WSL (Bash)\nDESCRIPTION: This command downloads and runs the setup script for the VS Code Server on a Windows Subsystem for Linux (WSL) instance.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/07/07/vscode-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O- https://aka.ms/install-vscode-server/setup.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Specifying COMPOSE_PROJECT_NAME in .env File for Docker Compose - ENV\nDESCRIPTION: This snippet provides the syntax for defining the COMPOSE_PROJECT_NAME environment variable within a .env file, which must reside in the same directory as the docker-compose.yml. When present, Docker Compose and associated tools like Visual Studio Code will use this value as the project's name. No additional tools are needed beyond Docker Compose and proper context configuration; change \"foo\" to the desired project name as needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/set-docker-compose-project-name.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nCOMPOSE_PROJECT_NAME=foo\n```\n\n----------------------------------------\n\nTITLE: LSIF Graph Data Example\nDESCRIPTION: Example of LSIF graph data representation including document, range, and hover result vertices and edges.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// a vertex representing the document\n{ id: 1, type: \"vertex\", label: \"document\", uri: \"file:///Users/username/sample.ts\", languageId: \"typescript\" }\n// a vertex representing the range for the identifier bar\n{ id: 4, type: \"vertex\", label: \"range\", start: { line: 0, character: 9}, end: { line: 0, character: 12 } }\n// an edge saying that the document with id 1 contains the range with id 4\n{ id: 5, type: \"edge\", label: \"contains\", outV: 1, inV: 4}\n// a vertex representing the actual hover result\n{ id: 6, type: \"vertex\", label: \"hoverResult\",\n  result: {\n    contents: [\n      { language: \"typescript\", value: \"function bar(): void\" }\n    ]\n  }\n}\n// an edge linking the hover result to the range.\n{ id: 7, type: \"edge\", label: \"textDocument/hover\", outV: 4, inV: 6 }\n```\n\n----------------------------------------\n\nTITLE: Checking CPU architecture on Chromebook\nDESCRIPTION: This command helps determine the CPU architecture of the Chromebook, which is necessary for selecting the correct VS Code package to install.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/12/03/chromebook-get-started.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndpkg --print-architecture\n```\n\n----------------------------------------\n\nTITLE: Install Build Essentials on Debian/Ubuntu Linux\nDESCRIPTION: A shell command for Debian-based Linux distributions (like Ubuntu). Running `sudo apt-get install build-essential` installs the `build-essential` package, which provides the GCC compiler suite, make, and other essential tools, including the linker (`ld`), required for compiling and linking Rust programs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Path Environment Variable in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure the `devcontainer.json` file to pass the host machine's workspace folder path into the dev container as an environment variable named `HOST_PROJECT_PATH`. This is particularly useful in the Docker-outside-of-Docker scenario, enabling correct host volume mounting when running Docker commands from within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/use-docker-kubernetes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"remoteEnv\": {\n    // Pass in the host directory for Docker mount commands from inside the container\n    \"HOST_PROJECT_PATH\": \"${localWorkspaceFolder}\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring File Icon Visibility in Editor Tabs (JSON)\nDESCRIPTION: This setting identifier, `workbench.editor.showIcons`, refers to a VS Code configuration option. It allows users to control whether file icons are displayed in the editor tab headings, complementing the 'Icons Everywhere' feature introduced in version 1.6. To hide icons in tabs, this setting would typically be set to `false` in the `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nworkbench.editor.showIcons\n```\n\n----------------------------------------\n\nTITLE: Supported Directory Navigation Shortcuts in Terminal Completions\nDESCRIPTION: Shows examples of relative directory navigation shortcuts (`.`, `..`, `../../`) that are now recognized and supported by the VS Code terminal completion feature to aid in path suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n`.`, `..`, and `../../`\n```\n\n----------------------------------------\n\nTITLE: Initializing the Grocery List State with Type Hints in Python FastAPI\nDESCRIPTION: This snippet declares and initializes the in-memory storage for grocery list items as an empty dictionary, with type hints specifying integer keys (item IDs) and `ItemPayload` values. The use of Python type hints supports enhanced editor features, static analysis, and IDE guidance. The state variable `grocery_list` will be manipulated by route handlers to store, fetch, and update items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngrocery_list: dict[int, ItemPayload] = {}\n```\n\n----------------------------------------\n\nTITLE: Opening Untitled Document with Language in VS Code Extension (TypeScript)\nDESCRIPTION: Demonstrates how to use the new overload of openTextDocument to create an untitled document with a specific language. This example creates a text document with XML as the language.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nopenTextDocument({ language: 'xml' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Runtime Settings in VS Code\nDESCRIPTION: JSON configuration for setting up multiple Java runtime versions in VS Code. Defines paths for different JDK versions and allows setting a default runtime for unmanaged folders.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-project.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"java.configuration.runtimes\": [\n  {\n    \"name\": \"JavaSE-1.8\",\n    \"path\": \"/usr/local/jdk1.8.0_201\"\n  },\n  {\n    \"name\": \"JavaSE-11\",\n    \"path\": \"/usr/local/jdk-11.0.3\",\n    \"sources\" : \"/usr/local/jdk-11.0.3/lib/src.zip\",\n    \"javadoc\" : \"https://docs.oracle.com/en/java/javase/11/docs/api\",\n    \"default\":  true\n   },\n   {\n    \"name\": \"JavaSE-12\",\n    \"path\": \"/usr/local/jdk-12.0.2\"\n   },\n   {\n    \"name\": \"JavaSE-13\",\n    \"path\": \"/usr/local/jdk-13\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration Variables\nDESCRIPTION: New variables introduced for launch.json and tasks.json configuration files including fileWorkspaceFolder, fileDirnameBasename, and pathSeparator for improved path handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"${fileWorkspaceFolder}\": \"workspace folder path of active file\",\n  \"${fileDirnameBasename}\": \"name of folder containing active file\",\n  \"${pathSeparator}\": \"OS-specific path separator character\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Title Bar on Linux in VS Code Settings\nDESCRIPTION: Shows how to manually activate the experimental custom title bar on Linux by setting the `window.titleBarStyle` configuration to `custom` in VS Code settings. This overrides the default native title bar.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_97.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(window.titleBarStyle)` as `custom\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Down Command in VS Code\nDESCRIPTION: This snippet shows the default configuration for the 'docker compose down' command in VS Code. It uses placeholders for the compose command and configuration file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration Setting | Default Value |\n|--|--|\n| `docker.commands.composeDown` | `${composeCommand} ${configurationFile} down` |\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Type Checking Error in JavaScript\nDESCRIPTION: Illustrates how to ignore a specific TypeScript type checking error in a JavaScript file using a line-specific comment directive.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet easy = 'abc'\n// @ts-ignore\neasy = 123 // No error\n```\n\n----------------------------------------\n\nTITLE: Clipboard Operations in VS Code Extensions\nDESCRIPTION: Demonstrates how to interact with the system clipboard using VS Code's clipboard API, ensuring proper functionality in remote workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.commands.registerCommand('myAmazingExtension.clipboardIt', async () => {\n        // Read from clipboard\n        const text = await vscode.env.clipboard.readText();\n\n        // Write to clipboard\n        await vscode.env.clipboard.writeText(`It looks like you're copying \"${text}\". Would you like help?`);\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Executable Path in VS Code Settings (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for setting the Docker CLI executable path in VS Code settings. It allows users to specify a custom path, which is useful for alternative container engines like Podman.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_46.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docker.dockerPath\": \"podman\"\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing New Authentication Session with Learn More Link in TypeScript\nDESCRIPTION: Shows how to use the proposed `learnMore` property within the `AuthenticationForceNewSessionOptions` when calling `vscode.authentication.getSession`. This example attempts to get a GitHub session with 'repo' scope, forcing a new session prompt that includes a custom detail message (`l10n.t(...)`) and a `learnMore` URI (`Uri.parse(...)`) pointing to additional information for the user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nvscode.authentication.getSession('github', ['repo'], {\n  forceNewSession: {\n    detail: l10n.t('To show you more relevant Copilot Chat results, we need permission to read the contents of your repository on GitHub.'),\n    learnMore: Uri.parse('https://aka.ms/copilotRepoScope')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Semantic Token Types and Modifiers in package.json\nDESCRIPTION: This JSON snippet shows how to contribute custom semantic token types and modifiers through a VS Code extension's package.json. It defines a custom type 'templateType' that inherits from the standard 'type', and a custom modifier 'native'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenTypes\": [{\n      \"id\": \"templateType\",\n      \"superType\": \"type\",\n      \"description\": \"A template type.\"\n    }],\n    \"semanticTokenModifiers\": [{\n      \"id\": \"native\",\n      \"description\": \"Annotates a symbol that is implemented natively\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js and npm Installation in Bash\nDESCRIPTION: This short snippet checks and prints the currently installed versions of Node.js and npm by executing their respective version commands. Dependencies: Node.js and npm must already be installed through package managers or manually. Outputs are version numbers to standard output, helpful to confirm successful installations. Input: None required; Output: Version strings. No constraints, but assumes global 'node' and 'npm' commands resolve on the PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Example Package.json Dependencies Configuration for TypeScript IntelliSense\nDESCRIPTION: A simple package.json snippet showing how to declare dependencies that will automatically receive type declarations for IntelliSense support in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"lodash\": \"^4.17.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task Runner for Terminal Execution in JSON\nDESCRIPTION: This JSON configuration demonstrates how to enable the experimental terminal task runner in VS Code by setting the `_runner` property to `\"terminal\"`. It includes example tasks for running the TypeScript compiler (`tsc`) in watch mode and listing directory contents (`dir`). This requires VS Code version 1.9 or later and opts into the new terminal-based execution engine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"version\": \"0.1.0\",\n    \"_runner\": \"terminal\",\n    \"tasks\": [\n        {\n            \"taskName\": \"tsc\",\n            \"command\": \"tsc -w\",\n            \"isShellCommand\": true,\n            \"isBackground\": true,\n            \"problemMatcher\": \"$tsc-watch\",\n            \"isBuildCommand\": true\n        },\n        {\n            \"taskName\": \"dir\",\n            \"command\": \"dir\",\n            \"isShellCommand\": true\n        }\n    ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code Keyboard Shortcuts Editor with Keyboard Shortcut\nDESCRIPTION: This code snippet shows how to use a keyboard shortcut to open the VS Code Keyboard Shortcuts editor. It's used within markdown to represent a key binding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/personalize-vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.openGlobalKeybindings)`\n```\n\n----------------------------------------\n\nTITLE: Changing Azure Repos URL to vscode.dev URL\nDESCRIPTION: Shows how to modify an Azure Repos URL to open it in vscode.dev for viewing (preview mode).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/10/20/vscode-dev.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFor Azure Repos, do the same. Change `https://dev.azure.com/…` to 'https://**vscode.dev**/dev.azure.com /…'.\n```\n\n----------------------------------------\n\nTITLE: Specifying Runtime Arguments in VS Code Launch Configuration\nDESCRIPTION: The `runtimeArgs` attribute in `launch.json` allows passing command-line arguments directly to the runtime executable (e.g., Node.js) when launching a debug session. This is used, for example, to pass options like `--nolazy`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"launch\": {\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Launch Program\",\n  \"program\": \"${workspaceFolder}/app.js\",\n  \"runtimeArgs\": [\n    \"--nolazy\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Terminal.onData Event in TypeScript\nDESCRIPTION: This snippet shows the renamed Terminal.onData event, now called onDidWriteData, to align with VS Code's naming guidelines for events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Terminal {\n  onDidWriteData: Event<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: MacOS Terminal Split Pane Fix\nDESCRIPTION: Script to disable system sounds when resizing terminal split panes on macOS\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/Library/KeyBindings\ncat > ~/Library/KeyBindings/DefaultKeyBinding.dict <<EOF\n{\n  \"@^\\UF700\" = \"noop:\";\n  \"@^\\UF701\" = \"noop:\";\n  \"@^\\UF702\" = \"noop:\";\n  \"@^\\UF703\" = \"noop:\";\n  \"@~^\\UF700\" = \"noop:\";\n  \"@~^\\UF701\" = \"noop:\";\n  \"@~^\\UF702\" = \"noop:\";\n  \"@~^\\UF703\" = \"noop:\";\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Volume Mount (Docker-in-Docker)\nDESCRIPTION: This bash command demonstrates how to run a new Docker container (`debian`) from within a dev container using the Docker-in-Docker approach. It bind mounts a file (`/workspace/examplefile.txt`) from the dev container's filesystem to a path (`/incontainer/path`) inside the newly created container. This works directly because the Docker daemon is running within the dev container's context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/use-docker-kubernetes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v /workspace/examplefile.txt:/incontainer/path debian\n```\n\n----------------------------------------\n\nTITLE: Filtering Code Actions using CodeActionKind.intersects (TypeScript)\nDESCRIPTION: Example `CodeActionProvider` implementation in TypeScript demonstrating the use of `vscode.CodeActionKind.SourceOrganizeImports.intersects(context.only)` to check if organize imports actions were specifically requested by the user or context. This helps optimize performance by avoiding computation of actions that aren't needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport class OrganizeImportsProvider implements vscode.CodeActionProvider {\n    public provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext,\n        token: vscode.CancellationToken\n    ): vscode.CodeAction[] {\n        // Only return organize imports actions if they were explicitly requested\n        // We can check this using `intersects`.\n        if (!context.only || !vscode.CodeActionKind.SourceOrganizeImports.intersects(context.only)) {\n            // Organize imports actions were not requested\n            return [];\n        }\n\n        // Organize imports was requested\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization Path in package.json\nDESCRIPTION: This JSON snippet shows how to configure the location of localization bundles in an extension's `package.json` file. The `l10n` property specifies a relative path (e.g., `./l10n`) to the directory where localization bundle files (like `bundle.l10n.json` and `bundle.l10n.<locale>.json`) should be placed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"main\": \"./out/extension.js\",\n  \"l10n\": \"./l10n\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Webview Context via data-vscode-context in HTML\nDESCRIPTION: Illustrates using the `data-vscode-context` HTML attribute within a webview to define contexts for specific elements. These contexts (like `webviewSection` and `mouseCount`) are represented as a JSON object and are used in `when` clauses of menu contributions to control context menu visibility. The example also shows the `preventDefaultContextMenuItems` context, which can hide default VS Code menu items like copy/paste.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"main\" data-vscode-context='{\"webviewSection\": \"main\", \"mouseCount\": 4}'>\n  <h1>Cat Coding</h1>\n\n  <textarea data-vscode-context='{\"webviewSection\": \"editor\", \"preventDefaultContextMenuItems\": true}'></textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific End of Line Settings in VS Code\nDESCRIPTION: Example showing how to configure the end-of-line sequence for a specific language using the files.eol setting in VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"[mylanguage]\": {\n   \"files.eol\": \"\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Require Exact Source for Debugger (JSON)\nDESCRIPTION: This snippet demonstrates disabling strict source matching by setting 'requireExactSource' to false. This feature relaxes the requirement that symbol (pdb) and source files match exactly, which can be useful when debugging against modified or rebuilt binaries. Input is a boolean; set to true for strict matching, false for lenience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requireExactSource\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Exec Server Mode in VS Code Settings\nDESCRIPTION: This snippet shows how to disable the new 'Exec Server' mode for SSH in VS Code user settings. The new mode is set as default in this release, but can be turned off if issues are encountered.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_88.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.ssh.useExecServer\": false\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Container Name in launch.json (.NET)\nDESCRIPTION: This JSON snippet, intended for a .NET Docker attach configuration in `launch.json`, sets the `containerName` property. Providing the specific name of the target Docker container avoids the prompt asking the user to select the container when starting the debug session.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/docker-compose.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"containerName\": \"Your ContainerName\"\n```\n\n----------------------------------------\n\nTITLE: Opening Multiple Folders and Files from Command Line in Visual Studio Code\nDESCRIPTION: Opens multiple folders and/or files from the command line by appending multiple folder and/or file paths to open multiple sessions of VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_3_0.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncode c:\\myfolder1 c:\\myfolder2 c:\\myapp\\program.cs\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Commands to install Node.js project dependencies using either npm or Yarn package managers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Run Task for Custom Port in tasks.json - Visual Studio Code - json\nDESCRIPTION: This JSON snippet configures a VS Code docker-run task to start a Python application (such as Django) on a custom port (1024). It ensures alignment between the Dockerfile's exposed port and the application's startup configuration for debugging. The 'python.args' array specifies command-line arguments for the Python process, including port, threading, and reload options, with 'manage.py' as the entry point. To avoid conflicts, make sure all instances of the old port are updated to the new value in both Dockerfile and task configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"docker-run\",\n  \"label\": \"docker-run: debug\",\n  \"dependsOn\": [\n    \"docker-build\"\n  ],\n  \"python\": {\n    \"args\": [\n      \"runserver\",\n      \"0.0.0.0:1024\", //<- Change the number after the colon\n      \"--nothreading\",\n      \"--noreload\"\n    ],\n    \"file\": \"manage.py\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownString for Completion Item Documentation in TypeScript\nDESCRIPTION: Illustrates how to enhance completion item tooltips within a VS Code extension by using `MarkdownString`. This snippet creates a `CompletionItem` named 'Pretty' and sets its `documentation` property to a `MarkdownString` containing basic Markdown formatting (bold and inline code). This allows for richer documentation rendering in the editor's completion suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst item = new vscode.CompletionItem('Pretty');\nitem.documentation = new vscode.MarkdownString('*Hello*, `World`');\n```\n```\n\n----------------------------------------\n\nTITLE: MacOS Terminal Command Key Mapping\nDESCRIPTION: Custom keyboard shortcut to map Cmd+. to Ctrl+C functionality in terminal\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/basics.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+.\",\n  \"command\": \"workbench.action.terminal.sendSequence\",\n  \"when\": \"terminalFocus\",\n  \"args\": { \"text\": \"\\u0003\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSONL Dataset for Bulk Run in AI Toolkit\nDESCRIPTION: This snippet describes the format requirement for importing a JSONL file as a dataset for bulk run in AI Toolkit. The file must contain a 'query' field to represent each prompt.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/bulkrun.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe JSONL file needs to have a `query` field to represent a prompt.\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Zoom Keybindings for Windows and Linux\nDESCRIPTION: JSON configuration for custom keybindings to control editor font zoom on Windows and Linux, including zoom in, zoom out, and reset commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+numpad_add\",      \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"shift+ctrl+=\",         \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"ctrl+=\",               \"command\": \"editor.action.fontZoomIn\" },\n{ \"key\": \"ctrl+numpad_subtract\", \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"shift+ctrl+-\",         \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"ctrl+-\",               \"command\": \"editor.action.fontZoomOut\" },\n{ \"key\": \"ctrl+numpad0\",         \"command\": \"editor.action.fontZoomReset\" },\n{ \"key\": \"ctrl+0\",               \"command\": \"editor.action.fontZoomReset\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Format on Type\nDESCRIPTION: Configuration to enable automatic formatting while typing Ruby code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnType\": true\n```\n\n----------------------------------------\n\nTITLE: Customizing Word Navigation and Deletion Keybindings - VS Code JSON\nDESCRIPTION: This JSON array configures custom keybindings in Visual Studio Code to replicate Visual Studio-like word navigation and deletion behaviors. Keys such as \\\"ctrl+right\\\" and \\\"ctrl+backspace\\\" are bound to commands like \\\"cursorWordStartRight\\\" and \\\"deleteWordStartLeft\\\". Place this in your keybindings.json to override defaults. Applies only when editor text is focused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"key\": \"ctrl+right\",       \"command\": \"cursorWordStartRight\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"ctrl+shift+right\", \"command\": \"cursorWordStartRightSelect\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"ctrl+backspace\",   \"command\": \"deleteWordStartLeft\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"ctrl+delete\",      \"command\": \"deleteWordStartRight\",\n                                        \"when\": \"editorTextFocus\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Comments View Icon Colors in VS Code Themes\nDESCRIPTION: Provides the configuration keys for setting the icon colors for resolved and unresolved comments within the VS Code Comments View. These identifiers are used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n- `commentsView.resolvedIcon`: Icon color for resolved comments.\n- `commentsView.unresolvedIcon`: Icon color for unresolved comments.\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Mount for Remote Docker Containers using JSON\nDESCRIPTION: This JSON snippet shows how to configure the workspaceMount and workspaceFolder properties in a devcontainer.json file for remote Docker development. It includes options for both volume mounts and bind mounts, depending on whether the user has login access to the remote host.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=remote-workspace,target=/workspace,type=volume\",\n\"workspaceFolder\": \"/workspace\",\n```\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=/absolute/path/on/remote/machine,target=/workspace,type=bind,consistency=cached\",\n\"workspaceFolder\": \"/workspace\",\n```\n\n----------------------------------------\n\nTITLE: JavaScript Project Configuration\nDESCRIPTION: JSConfig settings for JavaScript-based VS Code extension development, including ES6 target and module configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\",\n        \"lib\": [\n            \"ES6\"\n        ]\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Comment Filter Configuration\nDESCRIPTION: JSON setting to customize the comment filter format in Emmet 2.0\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.preferences\": {\n  \"filter.commentAfter\": \"\\n<!-- /[#ID][.CLASS] -->\"\n}\n```\n\n----------------------------------------\n\nTITLE: LSIF Hover Interface Definition\nDESCRIPTION: TypeScript interface definition for the Hover type used in LSP, showing the structure of hover information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Hover {\n    /**\n     * The hover's content\n     */\n    contents: MarkupContent | MarkedString | MarkedString[];\n    /**\n     * An optional range\n     */\n    range?: Range;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OS-Specific Debug Launch Settings in VS Code\nDESCRIPTION: Example showing how to specify different runtime executables for Windows vs other operating systems in VS Code's launch.json configuration file. This allows for platform-specific debug settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"node\",\n   \"request\": \"launch\",\n   \"runtimeExecutable\": \"mynode\",\n   \"windows\": {\n     \"runtimeExecutable\": \"mynode.exe\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValuePointerType and SizeType Complex Types in XML Schema\nDESCRIPTION: Defines complex types for value pointers with optional conditions and size specifications with common attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_20\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"ValuePointerType\">\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attribute name=\"Condition\" type=\"ConditionType\" use=\"optional\" />\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n\n  <xs:complexType name=\"SizeType\">\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attributeGroup ref=\"CommonAttributes\" />\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Referencing Localization Keys in package.json (JSONC)\nDESCRIPTION: This JSON with Comments (JSONC) snippet shows how to reference localizable strings within an extension's `package.json` file, specifically for a command's title. The key (`my-extension.helloWorld.title`) is enclosed in '%' characters (`%my-extension.helloWorld.title%`). VS Code will look up this key in the corresponding `package.nls.json` (or locale-specific variants) to display the localized string. The `l10n` property for runtime localization is also shown.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_26\n\nLANGUAGE: jsonc\nCODE:\n```\n```jsonc\n{\n  \"name\": \"my-extension\",\n  \"version\": \"0.0.1\",\n  \"main\": \"./out/extension.js\",\n  \"l10n\": \"./l10n\",\n  //...\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"my-extension.helloWorld\",\n        // The key is surrounded by % characters\n        \"title\": \"%my-extension.helloWorld.title%\"\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Changing GitHub URL to vscode.dev URL\nDESCRIPTION: Demonstrates how to modify a GitHub repository URL to open it in vscode.dev for editing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/10/20/vscode-dev.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor example, change `https://github.com/microsoft/vscode` to 'https://**vscode.dev**/github.com/Microsoft/vscode'.\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Bracket Pair Colorization in VS Code Settings\nDESCRIPTION: This code snippet shows how to enable the high-performance native bracket pair colorization feature in Visual Studio Code settings. It sets the 'editor.bracketPairColorization.enabled' setting to true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.bracketPairColorization.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Navigating Side Bar with Keyboard Shortcuts in VS Code\nDESCRIPTION: Keyboard shortcuts for focusing on the Primary Side Bar and switching focus back to the editor in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/productivity.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Side Bar focus with keyboard shortcuts\n\n  * Press `kb(workbench.action.focusSideBar)` to put the focus in the Primary Side Bar\n  * Press `kb(workbench.action.focusFirstEditorGroup)` to put the focus back in the editor\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Platform for Windows SSH Hosts\nDESCRIPTION: This JSON snippet demonstrates how to force VS Code to identify a particular host as Windows using the remote.SSH.remotePlatform setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.remotePlatform\": {\n    \"host-in-ssh-config-or-fqdn\": \"windows\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration for Automated Publishing\nDESCRIPTION: NPM script configuration for automated extension publishing using vsce command line tool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/continuous-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"vsce publish --yarn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Most Derived Object Type Element in XSD\nDESCRIPTION: This XSD complexType, `MostDerivedObjectType`, defines an element containing an expression that evaluates to an object cast to its most-derived type. It's used when the debugger cannot automatically determine the most-derived type, often in C++ hierarchies without virtual functions or with custom vtable logic. It extends `StringType` and includes an optional boolean attribute `IgnoreVTable` to bypass default vtable-based determination.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"MostDerivedObjectType\">\n    <xs:annotation>\n      <xs:documentation>\n        Specifies an expression which evaluates to the current object, casted to its most-derived type.\n        In most cases, the debugger is able to automatically determine an object's most-derived type, in which case use of the &lt;MostDerivedType&gt; element is unnecessary. Automatic determination of an object's most-derived type requires the object to be an instance of a C++ class, with a\n        compiler-generated virtual function table. This is sufficient for most class-hierarchies; however, custom logic may occasionally be necessary\n        when dealing with a class hierarchy that does not contain virtual functions, or when the virtual function table is manually constructed by the application code.\n      </xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attributeGroup ref=\"CommonAttributes\" />\n        <xs:attribute name=\"IgnoreVTable\" type=\"xs:boolean\" use=\"optional\">\n          <xs:annotation>\n            <xs:documentation>\n              If true, indicates that the most derived type of the object will always be the static type of the provided expression. By default,\n              the debugger will use vtables to calculate the most-derived type of the provided most-derived-type expressions. This option should\n              be used only when the application code builds vtables using custom logic that the debugger does not understand.\n            </xs:documentation>\n          </xs:annotation>\n        </xs:attribute>\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Checking Support for Run in Terminal Request in TypeScript\nDESCRIPTION: This code snippet demonstrates how to verify if the front-end client supports the 'runInTerminal' request before calling it. It checks the 'supportsRunInTerminalRequest' attribute in the arguments passed to the 'initialize' request.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nBefore calling `runInTerminal` make sure that the front-end client supports it by verifying that the arguments passed to the `initialize` request have a `supportsRunInTerminalRequest` attribute and that its value is true.\n```\n\n----------------------------------------\n\nTITLE: Opening Issue Reporter in VS Code\nDESCRIPTION: This command opens the issue reporter in VS Code with optional prefilled data. It can be used to streamline the process of reporting issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`workbench.action.openIssueReporter` - Open the issue reporter and optionally prefill part of the form.\n\n* _options_ - Data to use to prefill the issue reporter with.\n```\n\n----------------------------------------\n\nTITLE: Starting a Service via Init Script using postStartCommand (JSON)\nDESCRIPTION: This `devcontainer.json` configuration uses `postStartCommand` to start the SSH service by directly invoking its init script located at `/etc/init.d/ssh`. This method is applicable in container environments based on Debian/Ubuntu where `systemd` might not be available, providing a way to manage services.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"/etc/init.d/ssh start\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Terminal Settings with Variable Support\nDESCRIPTION: JSON settings that now support variable substitution in VS Code terminal configuration, allowing dynamic values for cwd, shell, and shellArgs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nterminal.integrated.cwd\nterminal.integrated.shell.<platform>\nterminal.integrated.shellArgs.<platform>\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code Settings Editor with Keyboard Shortcut\nDESCRIPTION: This code snippet demonstrates how to use a keyboard shortcut to open the VS Code Settings editor. It's used within markdown to represent a key binding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/personalize-vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.openSettings)`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Case-Insensitive File Path Handling with openTextDocument in VS Code - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the updated behavior of the openTextDocument function on case-insensitive file systems. It shows how URIs of different casing map to the same document and emphasizes the importance of using TextDocument#uri as the canonical reference. Requires the VS Code API (vscode) and a case-insensitive filesystem. Demonstrates that multiple URIs differing only by case result in the same underlying document object.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// case-insensitive file system\\n\\nconst uriA = vscode.Uri.file('/foo/bar.code');\\nconst docA = await vscode.workspace.openTextDocument(uriA);\\n\\nconst uriB = vscode.Uri.file('/foo/BAR.code');\\nconst docB = await vscode.workspace.openTextDocument(uriB);\\n\\nassert.ok(docA === docB); // same document\\nassert.ok(docB.uri.toString() === uriA.toString()); // uriA is used, NOT uriB\\nassert.ok(docB.uri.toString() !== uriB.toString());\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Environment Variables\nDESCRIPTION: JSON configuration for setting environment variables for the integrated terminal on Linux platform.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_15.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.env.linux\": {\n  \"PYTHONPATH\": \"~/packages\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Chromium Sandbox in VS Code Configuration (JSON)\nDESCRIPTION: This JSON configuration entry, added to the `argv.json` file (accessible via the 'Preferences: Configure Runtime Arguments' command), disables the Chromium sandbox in VS Code. This is a workaround required to run VS Code as an administrator when AppLocker is enabled, due to limitations in the runtime sandbox. A restart of VS Code is required after adding this setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/windows.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"disable-chromium-sandbox\": true\n```\n\n----------------------------------------\n\nTITLE: Enabling Weighted Key Search in Settings Editor (Preview)\nDESCRIPTION: Sets the `workbench.settings.useWeightedKeySearch` setting to `true` to enable a preview feature that uses a new algorithm for searching within the Settings editor, aiming to prioritize more relevant key matches.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(workbench.settings.useWeightedKeySearch:true)\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Globally via npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the ESLint command-line tool globally on the system. This makes the `eslint` command available in the terminal for any project. A prerequisite is having Node.js and npm installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g eslint\n```\n\n----------------------------------------\n\nTITLE: VS Code Configuration for Attaching to Local debugpy Session\nDESCRIPTION: JSON configuration for launch.json that allows VS Code to attach to a locally running debugpy session on port 5678. This is used with the Python Debugger extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Python Debugger: Attach\",\n    \"type\": \"debugpy\",\n    \"request\": \"attach\",\n    \"connect\": {\n        \"host\": \"localhost\",\n        \"port\": 5678\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Travis CI Setup using Xvfb for VS Code Extension Tests on Linux (Bash)\nDESCRIPTION: This Bash script presents the updated recommended way to configure a Travis CI Linux environment for VS Code extension integration tests requiring a display server, using Xvfb (X virtual framebuffer). It checks if the operating system is Linux, exports the `DISPLAY` environment variable, and directly starts the Xvfb server executable in the background on display :99 with a specific screen resolution and color depth, redirecting standard output and error to `/dev/null`. This approach is preferred over older methods using init scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nif [ $TRAVIS_OS_NAME == \"linux\" ]; then\n  export DISPLAY=':99.0'\n  /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating a Text File Using Terminal in VS Code\nDESCRIPTION: This command creates a new text file named 'greetings.txt' with the content 'Hello, VS Code' using the echo command in the integrated terminal of Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello, VS Code\" > greetings.txt\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Configuration\nDESCRIPTION: Settings to configure JSON schema validation for different file types and custom schemas.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"json.schemas\": [\n    {\n        \"fileMatch\": [\n            \"/.myconfig\"\n        ],\n        \"schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\" : {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the entry\"\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Folding Strategy for CSS Files\nDESCRIPTION: JSON configuration to switch to indentation-based code folding for CSS, Less and SCSS files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"[css]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n},\n```\n\n----------------------------------------\n\nTITLE: Terminal Menu Configuration in Extension Manifest\nDESCRIPTION: Example JSON configuration for contributing to terminal context menus in VS Code extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_83.md#2025-04-23_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"terminal/context\": [\n        { \"command\": \"terminalTest.sendText\" }\n      ],\n      \"terminal/title/context\": [\n        { \"command\": \"terminalTest.sendText\" }\n      ]\n    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Component Example\nDESCRIPTION: Example demonstrating JSX code context where autoclosing behavior is relevant.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-configuration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Component = () =>\n  <div className={>\n                  ^ Does not get autoclosed by default\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Adding Project Reference for NUnit Test Project using .NET CLI\nDESCRIPTION: Uses the .NET CLI command `dotnet add reference` to link an NUnit test project (specified by its `.csproj` file path) to the main project it intends to test (also specified by its `.csproj` file path). This dependency enables the test project to reference and test the code within the main project. Requires the .NET SDK and paths to both `.csproj` files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]\n```\n\n----------------------------------------\n\nTITLE: Creating a Webview with a Custom Icon - VS Code Extensions - TypeScript\nDESCRIPTION: This code demonstrates registering a VS Code extension command that opens a webview panel with a custom title and icon. It imports the necessary VS Code and Node.js path modules, and sets the webview's tab bar icon to an image bundled with the extension. Dependencies are 'vscode' and 'path', and it requires an image asset at the specified location. Inputs include the extension context; outputs are UI changes within VS Code. Ensure the resource path is valid and that this occurs within the extension activation lifecycle.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    context.subscriptions.push(vscode.commands.registerCommand('catCoding.start', () => {\n        const panel = vscode.window.createWebviewPanel('catCoding',\n            \"Coding Cat\", vscode.ViewColumn.One, { });\n\n        panel.iconPath = vscode.Uri.file(path.join(context.extensionPath, 'media', 'cat.png'));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Type Formatting Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce on-type formatting capabilities in the LSP initialize method response. This allows the language server to provide formatting support as the user types, triggered by specific characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"documentOnTypeFormattingProvider\" : {\n            \"firstTriggerCharacter\": \"}\",\n            \"moreTriggerCharacter\": [\";\", \",\"]\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Enablement in VS Code Extensions\nDESCRIPTION: JSON configuration showing how to add a command to the editor context menu with conditional enablement based on text selection state.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [{\n    \"command\": \"extension.sayHello\",\n    \"title\": \"Hello Enablement\",\n    \"enablement\": \"editorHasSelection\"\n}],\n\"menus\": {\n    \"editor/context\": [{\n        \"command\": \"extension.sayHello\",\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webview with Port Mapping in VS Code Extension\nDESCRIPTION: This snippet shows how to use the portMapping option when creating a webview to map localhost ports to remote ports. This approach works for VS Code client but not for browser-based Codespaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst LOCAL_STATIC_PORT = 3000;\nconst dynamicServerPort = await getWebServerPort();\n\n// Create webview and pass portMapping in\nconst panel = vscode.window.createWebviewPanel(\n    'remoteMappingExample',\n    'Remote Mapping Example',\n    vscode.ViewColumn.One, {\n        portMapping: [\n            // This maps localhost:3000 in the webview to the web server port on the remote host.\n            { webviewPort: LOCAL_STATIC_PORT, extensionHostPort: dynamicServerPort }\n        ]\n    });\n\n// Reference the port in any full URIs you reference in your HTML.\npanel.webview.html = `<!DOCTYPE html>\n    <body>\n        <!-- This will resolve to the dynamic server port on the remote machine -->\n        <img src=\"http://localhost:${LOCAL_STATIC_PORT}/canvas.png\">\n    </body>\n    </html>`;\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Attach for Node.js Debugging in VS Code\nDESCRIPTION: Demonstrates how to enable the auto-attach feature for Node.js debugging in Visual Studio Code. This feature automatically attaches the debugger to Node.js processes launched with the --inspect flag from the Integrated Terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/07/12/introducing-logpoints-and-auto-attach.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnode --inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings with insertFinalNewline for HTML in VS Code\nDESCRIPTION: This snippet demonstrates how to configure the files.insertFinalNewline setting specifically for HTML files using a language scope in VS Code settings. This replaces the deprecated html.format.endWithNewline setting and allows for language-specific final newline configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_69.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"[html]\": {\n        \"files.insertFinalNewline\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for running extension tests in JSON\nDESCRIPTION: This snippet shows the configuration for launch.json to run extension tests in VS Code, including the necessary runtime arguments and pre-launch tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Extension Tests\",\n    \"type\": \"extensionHost\",\n    \"request\": \"launch\",\n    \"runtimeExecutable\": \"${execPath}\",\n    \"args\": [\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionTestsPath=${workspaceFolder}/out/test\"\n    ],\n    \"outFiles\": [\n        \"${workspaceFolder}/out/test/**/*.js\"\n    ],\n    \"preLaunchTask\": \"npm: compile-tests\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS for VS Code Release Notes Styling\nDESCRIPTION: This HTML snippet links an external CSS file specifically for styling in-product release notes in Visual Studio Code. The file path is relative to the current document.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Linked Editing in VS Code\nDESCRIPTION: JSON configuration to enable linked editing for JSX tags and other paired elements.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.linkedEditing\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Go To Locations Command with Fallback Message in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `vscode.commands.executeCommand` API to invoke the built-in `editor.action.goToLocations` command. It specifies the anchor URI and position from the active editor, provides an empty array for locations (simulating a 'not found' scenario), sets the mode to 'goto', and crucially, supplies a custom fallback message 'No Super Types Found' to be displayed to the user in this case. This pattern is useful for implementing custom navigation features like 'Go to Super Type'. Requires the `vscode` API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nvscode.commands.executeCommand(\n    'editor.action.goToLocations',\n    vscode.window.activeTextEditor.document.uri, //anchor uri and position\n    vscode.window.activeTextEditor.selection.start,\n    [], // results (vscode.Location[])\n    'goto', // mode\n    'No Super Types Found' // <- message\n);\n```\n```\n\n----------------------------------------\n\nTITLE: VS Code Sandbox Configuration Setting\nDESCRIPTION: Experimental setting used to enable sandbox mode in VS Code, allowing for gradual rollout and testing of the sandboxed renderer process feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/11/28/vscode-sandbox.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.experimental.useSandbox\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration Example - Horizontal Scrolling\nDESCRIPTION: Setting to enable horizontal scrolling in trees and lists including Explorer, Search, SCM, and Debug views.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.tree.horizontalScrolling\"\n```\n\n----------------------------------------\n\nTITLE: Authorizing Windows Host with User-Level Key (Bash)\nDESCRIPTION: Appends the public SSH key to a user-level authorized_keys file on a Windows SSH host using a Bash SSH command that invokes PowerShell remotely. It first creates the .ssh directory if missing, sets up permissions, and adds the public key to the appropriate file. Designed for cases where the user doesn't have administrator-level access or needs user-scope key authorization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport USER_AT_HOST=\"your-user-name-on-host@hostname\"\nexport PUBKEYPATH=\"$HOME/.ssh/id_ed25519.pub\"\n\nssh $USER_AT_HOST \"powershell New-Item -Force -ItemType Directory -Path \\\"$HOME\\\\.ssh\\\"; Add-Content -Force -Path \\\"$HOME\\\\.ssh\\\\authorized_keys\\\" -Value '$(tr -d '\\n\\r' < \\\"$PUBKEYPATH\\\")'\"\n\n```\n\n----------------------------------------\n\nTITLE: Redis Item ID Lookup\nDESCRIPTION: Retrieves an item ID from Redis hash using the item name as key.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nitem_id = redis_client.hget(\"item_name_to_id\", item_name)\n```\n\n----------------------------------------\n\nTITLE: Inline Edit Color Customization\nDESCRIPTION: Color configuration options for inline editing features in VS Code, including gutters, backgrounds, and borders for original and modified text\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inlineEdit.gutterIndicator.background\": \"#color\",\n  \"inlineEdit.originalBackground\": \"#color\",\n  \"inlineEdit.modifiedBackground\": \"#color\",\n  \"inlineEdit.originalChangedLineBackground\": \"#color\",\n  \"inlineEdit.originalChangedTextBackground\": \"#color\",\n  \"inlineEdit.modifiedChangedLineBackground\": \"#color\",\n  \"inlineEdit.modifiedChangedTextBackground\": \"#color\",\n  \"inlineEdit.originalBorder\": \"#color\",\n  \"inlineEdit.modifiedBorder\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VS Code Specific Copilot Commands in Markdown\nDESCRIPTION: Examples of using GitHub Copilot commands specific to VS Code, including interacting with the terminal and querying VS Code features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n@terminal list the 5 largest files in this workspace\n@terminal /explain top shell command\n@vscode how to enable word wrapping?\n@vscode /runCommand enable developer mode\n@vscode /search python files without imports\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family and Ligatures\nDESCRIPTION: Settings to enable font ligatures and set custom font family.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.fontFamily\": \"Fira Code\",\n\"editor.fontLigatures\": true\n```\n\n----------------------------------------\n\nTITLE: QuickDiffProvider Interface for Source Control\nDESCRIPTION: This TypeScript interface shows how to integrate QuickDiffProvider with SourceControl to enable quick diff functionality in the editor gutter. The provider supplies the original content for comparison.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControl {\n  quickDiffProvider?: QuickDiffProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code using Nix Package Manager\nDESCRIPTION: Installs VS Code using the Nix package manager command `nix-env -i vscode`. Requires the `allowUnfree` option to be set to `true` in the Nix configuration (`config.nix`) and the Nix package manager to be installed and configured on the system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -i vscode\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugger OS-specific Program Paths in VS Code Extensions - JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify different OS-specific program executables for a debugger in a VS Code extension's package.json file. It requires extension authors to define the 'debuggers' contribution point, detailing the 'type', and providing 'program' paths for general Windows and 32-bit Windows ('winx86'). The main parameters include the operating system keys ('win', 'winx86'), each mapping to an object with a 'program' field containing the relative path to the debug adapter executable. This configuration ensures that the correct binary is launched based on the user's platform. Inputs are static JSON values; there are no runtime outputs. The configuration is constrained to predefined OS keys recognized by VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vFebruary.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"debuggers\": [{\n        \"type\": \"gdb\",\n        \"win\": {\n            \"program\": \"./bin/gdbDebug.exe\"\n        },\n        \"winx86\": {\n            \"program\": \"./bin/gdbDebug_x86.exe\"\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Mappings for Emmet in VS Code\nDESCRIPTION: Maps non-standard languages to Emmet-supported languages, enabling Emmet functionality in additional file types. This example maps JavaScript to JSX and plaintext to Pug.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.includeLanguages\": {\n  \"javascript\": \"javascriptreact\",\n  \"plaintext\": \"pug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Find Keybinding in VS Code\nDESCRIPTION: JavaScript configuration to remove the Ctrl+F keybinding for terminal find functionality on Linux and Windows, allowing the keystroke to go to the shell instead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"key\": \"ctrl+f\", \"command\": \"-workbench.action.terminal.focusFind\", \"when\": \"terminalFocus\" }\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Semantic Token Scope Mapping\nDESCRIPTION: Configuration example for language-specific semantic token scope mappings in an extension's package.json. Shows how to define TypeScript-specific scope mappings for semantic tokens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/semantic-highlight-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"semanticTokenScopes\": [\n      {\n        \"language\": \"typescript\",\n        \"scopes\": {\n          \"property.readonly\": [\"variable.other.constant.property.ts\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Run Arguments for Hot Reloading\nDESCRIPTION: Configuration for the Python attribute in tasks.json to enable hot reloading in Flask by removing the --no-reload and --no-debugger flags from the flask run command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"dockerRun\": {\n    \"env\": {\n      \"FLASK_APP\": \"path_to/flask_entry_point.py\",\n      \"FLASK_ENV\": \"development\"\n    },\n    \"volumes\": [\n      {\n        \"containerPath\": \"/app\", \"localPath\": \"${workspaceFolder}\"\n      }\n    ]\n  },\n  \"python\": {\n    \"args\": [\n      \"run\",\n      \"--host\", \"0.0.0.0\",\n      \"--port\", \"5000\"\n    ],\n    \"module\": \"flask\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-only Mode in Visual Studio Code\nDESCRIPTION: JSON configuration for marking specific files and folders as read-only in VS Code. Includes settings for inclusion patterns, exclusion patterns, and handling files without write permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"files.readonlyInclude\": \"<paths or glob patterns>\",\n  \"files.readonlyExclude\": \"<paths or glob patterns>\",\n  \"files.readonlyFromPermissions\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Diff Tool in VS Code\nDESCRIPTION: This snippet shows how to configure VS Code as the default diff tool for Git. It sets up the diff tool command to use VS Code with the --wait and --diff options to compare files side by side.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[diff]\n    tool = default-difftool\n[difftool \"default-difftool\"]\n    cmd = code --wait --diff $LOCAL $REMOTE\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository in VS Code\nDESCRIPTION: Steps to clone a Git repository using the VS Code Command Palette, demonstrating the 'Git: Clone' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngitcl\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Null Check Bypass with 'any' Type in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how using the 'any' type can bypass strict null checking, potentially leading to runtime errors even with strict null checks enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// strictNullCheck: true\n\nfunction double(x: number): number { return x * 2; }\n\ndouble(undefined as any); // not an error\n```\n\n----------------------------------------\n\nTITLE: Removing Snippets from Suggestions Widget in Visual Studio Code JSON\nDESCRIPTION: JSON configuration to remove snippets from the suggestions widget while keeping other suggestions enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.snippetSuggestions\": \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeMetrics Extension Settings in VS Code\nDESCRIPTION: JSON configuration for customizing the complexity level descriptions in the CodeMetrics extension using emoji indicators. These settings define how code complexity is displayed using CodeLens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/12/code-lens-roundup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"codemetrics.basics.ComplexityLevelExtremeDescription\": \"😱\",\n\"codemetrics.basics.ComplexityLevelHighDescription\": \"😳\",\n\"codemetrics.basics.ComplexityLevelLowDescription\": \"🤓\",\n\"codemetrics.basics.ComplexityLevelNormalDescription\": \"🤔\",\n\"codemetrics.basics.ComplexityTemplate\": \"Complexity is {0} {1}\"\n```\n\n----------------------------------------\n\nTITLE: Defining ElseType_NoItem Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for an 'Else' block without items. It specifies a block of instructions that execute if a condition is true, using custom list code without items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"ElseType_NoItem\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute if a condition is true.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode_NoItem\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes_NoCondition\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Docker Entrypoint Script (Bash)\nDESCRIPTION: This Bash script serves as a custom Docker entrypoint (`docker-entrypoint.sh`). It first executes custom initialization logic (like printing a message) and then uses `exec \"$@\"` to replace the script process with the command specified by `CMD` in the Dockerfile or passed via `docker run`. This ensures that the container's intended command is executed after the entrypoint's setup tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"Hello from our entrypoint!\"\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Handling MongoDB Connection Error in Node.js\nDESCRIPTION: This code adds an error handler for MongoDB connection errors in a Node.js application using Mongoose. It showcases VS Code's auto-completion for third-party libraries.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connection.on(\"error\", () => { console.log(\"DB connection error\"); });\n```\n\n----------------------------------------\n\nTITLE: Installing SSHFS on macOS\nDESCRIPTION: Homebrew commands to install SSHFS on macOS for secure remote filesystem access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask macfuse\nbrew install gromgit/fuse/sshfs-mac\nbrew link --overwrite sshfs-mac\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Symbol Provider in TypeScript\nDESCRIPTION: Direct implementation of a document symbol provider in TypeScript for symbol navigation within a document.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoDocumentSymbolProvider implements vscode.DocumentSymbolProvider {\n    public provideDocumentSymbols(\n        document: vscode.TextDocument, token: vscode.CancellationToken):\n        Thenable<vscode.SymbolInformation[]> {\n    ...\n    }\n}\n\nexport function activate(ctx: vscode.ExtensionContext): void {\n    ...\n    ctx.subscriptions.push(\n        vscode.languages.registerDocumentSymbolProvider(\n            GO_MODE, new GoDocumentSymbolProvider()));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VS Code Repository Configuration\nDESCRIPTION: Commands to manually create the VS Code repository configuration directory and file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /etc/apt/sources.list.d\nsudo touch /etc/apt/sources.list.d/vscode.list\n```\n\n----------------------------------------\n\nTITLE: Checking File Explorer Focus When Clause in VS Code\nDESCRIPTION: JSON when clause example that checks if the File Explorer view container has focus by combining sideBarFocus and activeViewlet context keys.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/when-clause-contexts.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sideBarFocus && activeViewlet == 'workbench.view.explorer'\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Dev Container Progress Notification in VS Code\nDESCRIPTION: This snippet shows how to include an image of the Dev Container Progress Notification in Markdown, which appears when building a dev container in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Dev Container Progress Notification](images/containers/dev-container-progress.png)\n```\n\n----------------------------------------\n\nTITLE: Setting URL Configuration Example\nDESCRIPTION: Example showing how to format a VS Code settings URL to directly open specific settings in the Settings Editor. The URL follows the pattern vscode://settings/setting.name.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvscode://settings/setting.name\n```\n\n----------------------------------------\n\nTITLE: Installing React Typings - Shell Command\nDESCRIPTION: Command to install React typings for JSX IntelliSense support\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntsd install react-global\n```\n\n----------------------------------------\n\nTITLE: Editor Suggestion Selection Mode Setting\nDESCRIPTION: Setting to configure how suggestions are automatically selected in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.suggest.selectionMode\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting VS Code Telemetry Settings for Copilot\nDESCRIPTION: Code example showing how to disable telemetry data collection in VS Code by setting the telemetry level to 'off'. This is mentioned as an option for users who want to opt out of telemetry collection in the free version of GitHub Copilot.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/setup-simplified.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(telemetry.telemetryLevel)\n```\n\n----------------------------------------\n\nTITLE: Installing Sass and Less via npm\nDESCRIPTION: Command to globally install the Sass and Less npm packages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g sass less\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Folder Sort Order in VS Code\nDESCRIPTION: This snippet shows how to configure the sort order of SSH targets in VS Code. It uses the 'remote.SSH.foldersSortOrder' setting to sort targets alphabetically or by recent use.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.foldersSortOrder\": \"\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut Commands\nDESCRIPTION: Examples of VS Code keyboard shortcut command syntax used throughout the documentation for various features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_81.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(editor.action.accessibleView)\nkb(editor.action.accessibleViewNext)\nkb(editor.action.accessibleViewPrevious)\nkb(widgetNavigation.focusNext)\nkb(widgetNavigation.focusPrevious)\nkb(editor.action.accessibleDiffViewer.next)\n```\n\n----------------------------------------\n\nTITLE: Removing a Tunnel or Machine using VS Code CLI\nDESCRIPTION: This snippet shows how to unregister a machine from tunneling using the 'code' CLI. It's useful for cleaning up remote connections when they're no longer needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/12/07/remote-even-better.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode tunnel unregister\n```\n\n----------------------------------------\n\nTITLE: Updating the Vue Template to Display Hello World\nDESCRIPTION: HTML template code showing how to modify the default Vue application to display 'Hello World!' by updating the msg property on the HelloWorld component.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/vuejs-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <header>\n    <img alt=\"Vue logo\" class=\"logo\" src=\"./assets/logo.svg\" width=\"125\" height=\"125\" />\n\n    <div class=\"wrapper\">\n      <HelloWorld msg=\"Hello World!\" />\n    </div>\n  </header>\n\n  <main>\n    <TheWelcome />\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Suggestion Priority\nDESCRIPTION: JSON settings to ensure Emmet suggestions appear at the top of the suggestion list\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/emmet.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.showSuggestionsAsSnippets\": true,\n\"editor.snippetSuggestions\": \"top\"\n```\n\n----------------------------------------\n\nTITLE: Updating VS Code extension recommendations\nDESCRIPTION: This JSON snippet updates the .vscode/extensions.json file to recommend the ESLint extension instead of TSLint.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/tslint-eslint-migration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"recommendations\": [\n  \"dbaeumer.vscode-eslint\"\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling IntelliSense Cache in VS Code Settings (JSON)\nDESCRIPTION: Disables the IntelliSense caching feature by setting the cache size limit to 0. This prevents the creation and use of `ipch` files, which can be useful for troubleshooting cache-related issues or minimizing disk writes. Add this line to your User or Workspace settings JSON file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/faq-cpp.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"C_Cpp.intelliSenseCacheSize\": 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Formatter Settings in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure settings for enabling or disabling default formatters in VS Code. It includes settings for HTML, JavaScript, TypeScript, and JSON formatters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/11/15/formatters-best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"html.format.enable\": true,\n\"javascript.format.enable\": true,\n\"typescript.format.enable\": true,\n\"json.format.enable\": true\n```\n\n----------------------------------------\n\nTITLE: Building Java Web App Project with Maven\nDESCRIPTION: Maven command to clean the project and package it into a deployable WAR or JAR file. This command is executed in the terminal or command prompt.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-webapp.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-word Navigation Keybindings in VS Code\nDESCRIPTION: JSON configuration for customizing keyboard shortcuts to enable sub-word navigation and deletion in camelCase words and at underscore positions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+alt+right\",          \"command\": \"cursorWordPartRight\",\n                                       \"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+shift+alt+right\",    \"command\": \"cursorWordPartRightSelect\",\n                                       \"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+alt+left\",           \"command\": \"cursorWordPartStartLeft\",\n                                       \"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+shift+alt+left\",      \"command\": \"cursorWordPartStartLeftSelect\",\n                                       \"when\": \"textInputFocus\" },\n{ \"key\": \"ctrl+alt+backspace\",       \"command\": \"deleteWordPartLeft\",\n                                       \"when\": \"textInputFocus && !editorReadonly\" },\n{ \"key\": \"ctrl+shift+alt+backspace\", \"command\": \"deleteWordPartRight\",\n                                       \"when\": \"textInputFocus && !editorReadonly\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Async Notebook Renderer Function Signature in TypeScript\nDESCRIPTION: Shows the updated TypeScript function signature for `renderOutputItem` within the notebook renderer API. This signature explicitly supports asynchronous operations by allowing the function to return a `Promise<void>` and includes an `AbortSignal` parameter, enabling VS Code to signal cancellation requests to the renderer.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nrenderOutputItem(outputItem: OutputItem, element: HTMLElement, signal: AbortSignal): void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Terminal Environment Variable Activation\nDESCRIPTION: User setting to opt into the experimental feature for Python terminal environment variable activation\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_84.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"python.experiments.optInto\": [\"pythonTerminalEnvVarActivation\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Application Scoped Settings in VS Code Extensions (JSON)\nDESCRIPTION: This JSON snippet demonstrates how an extension's configuration can define a setting (`git.path`) with application-level scope, preventing it from being overridden at lower (window or resource) scopes. The setting specifies the path to the git executable. To use it, add this object inside the `contributes` node of your `package.json`. The `scope` property should be set to `application`, and the setting should include an appropriate type and description. This approach replaces the previously used `isExecutable` property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"configuration\\\": {\\n        \\\"properties\\\": {\\n            \\\"git.path\\\": {\\n                \\\"type\\\": \\\"string\\\",\\n                \\\"description\\\": \\\"Path to the git executable\\\",\\n                \\\"scope\\\": \\\"application\\\"\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Compiler Arguments with Parameters in c_cpp_properties.json (JSON)\nDESCRIPTION: Illustrates how to specify compiler arguments that require their own parameters (e.g., `--sysroot <arg>`) within the `compilerArgs` array in `c_cpp_properties.json`. Each part (the flag and its argument) should be a separate string in the JSON array.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/c-cpp-properties-schema-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\\\"--sysroot\\\", \\\"<arg>\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Fix and Preferred Code Actions in JSON\nDESCRIPTION: Shows how to set up a keybinding for a preferred refactoring code action using the editor.action.codeAction command in VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+r ctrl+e\",\n  \"command\": \"editor.action.codeAction\",\n  \"args\": {\n    \"kind\": \"refactor.extract.constant\",\n    \"preferred\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Language-Specific Block Comments in JavaScript and HTML\nDESCRIPTION: This snippet demonstrates how to use the BLOCK_COMMENT_START and BLOCK_COMMENT_END variables to insert language-specific block comments in JavaScript and HTML files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hello\": {\n        \"scope\": \"javascript,html\",\n        \"prefix\": \"hello\",\n        \"body\": \"$BLOCK_COMMENT_START Hello World $BLOCK_COMMENT_END\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Workspace Folder Variable in devcontainer.json\nDESCRIPTION: Introduces a new variable ${localWorkspaceFolder} for referencing the local folder's path in the devcontainer.json configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_38.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"someProperty\": \"${localWorkspaceFolder}/somePath\"\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extensions Search Query Format\nDESCRIPTION: Demonstrates how to search for VS Code extensions by category or tag in the Extensions view search box\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/12/12/roundup-customize.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncategory:{category name}\ntag:{tag name}\n```\n\n----------------------------------------\n\nTITLE: Constructing a RelativePattern Instance for Workspace Folder (TypeScript)\nDESCRIPTION: This snippet shows how to instantiate the RelativePattern class for the first workspace folder, using a glob to match all TypeScript files. It requires the vscode extension API context, specifically the workspace and RelativePattern APIs, and assumes at least one workspace folder is present. The constructor combines a workspace folder and '*.ts' pattern to create an object used with methods like findFiles, returning relative file matches as specified by the pattern.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Construct a relative pattern for the first root folder\\nconst relativePattern = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '*.ts');\\n\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Bisect Tool via NPX\nDESCRIPTION: Command to run the vscode-bisect tool for diagnosing issues by testing different VS Code Insiders builds.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx vscode-bisect\n```\n\n----------------------------------------\n\nTITLE: Running a Simple JavaScript Application in VS Code\nDESCRIPTION: This snippet demonstrates how to run a basic 'Hello world' JavaScript application using Node.js in Visual Studio Code's Integrated Terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/codeediting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Colored Rulers in VS Code Editor\nDESCRIPTION: JSON configuration for defining multiple editor rulers with custom colors. This example creates a magenta ruler at column 80 and a red ruler at column 90 using the editor.rulers setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.rulers\": [\n    { \"column\": 80, \"color\": \"#ff00ff\" },\n    { \"column\": 90, \"color\": \"#ff0000\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Extension Dependencies\nDESCRIPTION: Example devDependencies configuration for VS Code extension development using TypeScript 2.0.3, including required type definitions and testing dependencies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n    \"typescript\": \"^2.0.3\",\n    \"vscode\": \"^1.0.0\",\n    \"mocha\": \"^2.3.3\",\n    \"@types/node\": \"^6.0.40\",\n    \"@types/mocha\": \"^2.2.32\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP_PROXY Environment Variables for Remote SSH\nDESCRIPTION: This Bash snippet shows how to set HTTP_PROXY and HTTPS_PROXY environment variables in the .bashrc file on the SSH host to enable proxy access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=http://proxy.fqdn.or.ip:3128\nexport HTTPS_PROXY=$HTTP_PROXY\n\n# Or if an authenticated proxy\nexport HTTP_PROXY=http://username:password@proxy.fqdn.or.ip:3128\nexport HTTPS_PROXY=$HTTP_PROXY\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows UNC Host Allowlist in Visual Studio Code\nDESCRIPTION: JSON configuration for managing the Windows UNC host allowlist in VS Code. Includes a setting to disable the UNC allowlist for hosts, which is not recommended due to security concerns.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"security.allowedUNCHosts\": [\"<allowed UNC hosts>\"],\n  \"security.restrictUNCAccess\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute on macOS\nDESCRIPTION: Command to remove the quarantine attribute from the VS Code application on macOS, which is necessary for Portable Mode to work if the application was just downloaded.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/portable.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxattr -dr com.apple.quarantine Visual\\ Studio\\ Code.app\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Debug Address in VS Code Launch Configuration\nDESCRIPTION: The `address` attribute within an `attach` configuration in `launch.json` specifies the hostname or IP address of the remote machine running the Node.js process (version >= 4.x) to which the VS Code debugger should attach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"attach\": {\n  \"type\": \"node\",\n  \"request\": \"attach\",\n  \"name\": \"Attach to Remote\",\n  \"address\": \"<remote_host_ip_or_name>\",\n  \"port\": <port_number>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Package Lists Using apt-get in Bash\nDESCRIPTION: Shows how to update the Ubuntu system's package list using 'sudo apt-get update' from the bash shell. Requires sudo privileges and network connectivity. Keeping package information up-to-date ensures that subsequent installations pull the latest available versions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-wsl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Adding Features to a Dev Container Configuration in JSON\nDESCRIPTION: This code snippet demonstrates how to add the 'go' and 'docker-in-docker' Features to a dev container configuration using the 'features' property in devcontainer.json. It specifies versions and options for each Feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/09/15/dev-container-features.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"my-project-devcontainer\",\n\"image\": \"mcr.microsoft.com/devcontainers/base:ubuntu\",\n\"features\": {\n    \"ghcr.io/devcontainers/features/go:1\": {\n        \"version\": \"1.18\"\n    },\n    \"ghcr.io/devcontainers/features/docker-in-docker:1\": {\n        \"version\": \"latest\",\n        \"moby\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Terminal Tab Status Animation (JSON)\nDESCRIPTION: Disables the animation for status icons that appear on the right side of terminal tabs. This setting, `terminal.integrated.tabs.enableAnimation` set to `false` in `settings.json`, can reduce visual distraction.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/appearance.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.tabs.enableAnimation\": false\n```\n\n----------------------------------------\n\nTITLE: Multi-Theme Color Customization\nDESCRIPTION: JSON configuration showing how to customize colors for multiple themes using wildcards and specific theme combinations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"[Abyss][Red]\": {\n        \"activityBar.background\": \"#ff0000\"\n    },\n    \"[Monokai*]\": {\n        \"activityBar.background\": \"#ff0000\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Help Context and Trigger Reason in VS Code (TypeScript)\nDESCRIPTION: Defines the `SignatureHelpContext` interface, which contains details about a signature help request: `triggerReason` (enum `SignatureHelpTriggerReason`), optional `triggerCharacter`, and `isRetrigger` boolean. The `SignatureHelpTriggerReason` enum specifies whether the trigger was manual invocation, a trigger character, or a content change. This is part of a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Contains additional information about the context in which a\n * [signature help provider](#SignatureHelpProvider.provideSignatureHelp) is triggered.\n */\nexport interface SignatureHelpContext {\n  /**\n   * Action that caused signature help to be requested.\n   */\n  readonly triggerReason: SignatureHelpTriggerReason;\n\n  /**\n   * Character that caused signature help to be requested.\n   *\n   * This is `undefined` when signature help is not triggered by typing, such as when invoking signature help\n   * or when moving the cursor.\n   */\n  readonly triggerCharacter?: string;\n\n  /**\n   * Whether or not signature help was previously showing when triggered.\n   *\n   * Retriggers occur when the signature help is already active and can be caused by typing a trigger character\n   * or by a cursor move.\n   */\n  readonly isRetrigger: boolean;\n}\n\n/**\n * How a [Signature provider](#SignatureHelpProvider) was triggered\n */\nexport enum SignatureHelpTriggerReason {\n  /**\n   * Signature help was invoked manually by the user or by a command.\n   */\n  Invoke = 1,\n\n  /**\n   * Signature help was triggered by a trigger character.\n   */\n  TriggerCharacter = 2,\n\n  /**\n   * Signature help was triggered by the cursor moving or by the document content changing.\n   */\n  ContentChange = 3,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Categorizing an Extension Pack in package.json for VS Code\nDESCRIPTION: This snippet demonstrates how to categorize an Extension Pack in the package.json file for proper classification in the VS Code Marketplace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"categories\": [\"Extension Packs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Built-in Terminal Profile on Windows (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to remove a built-in terminal profile, specifically 'Git Bash' on Windows, from the VS Code terminal dropdown. Setting the profile name to 'null' within the platform-specific profiles configuration achieves this.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/profiles.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"Git Bash\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Angular Component\nDESCRIPTION: Modified AppComponent TypeScript code showing the Hello World example\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onDebug Activation in package.json\nDESCRIPTION: Declaration of onDebug activation event that activates the extension before any debug session is started. This is useful for extensions that provide debugging functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onDebug\"\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Bracket Highlight Colors in VS Code Settings (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to override the default theme colors for bracket pair colorization in Visual Studio Code settings. It uses the `workbench.colorCustomizations` setting to assign specific hex color codes (#FFD700, #DA70D6, #179fff) to the first three bracket highlight foregrounds (`editorBracketHighlight.foreground1`, `editorBracketHighlight.foreground2`, `editorBracketHighlight.foreground3`). This allows users to personalize the appearance of matching brackets when the `editor.bracketPairColorization.enabled` setting is true.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/editingevolved.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"editorBracketHighlight.foreground1\": \"#FFD700\",\n    \"editorBracketHighlight.foreground2\": \"#DA70D6\",\n    \"editorBracketHighlight.foreground3\": \"#179fff\",\n},\n```\n\n----------------------------------------\n\nTITLE: Contributing Custom Icons in VS Code Extension\nDESCRIPTION: Example of how to contribute custom icons through an extension's package.json, defining new icon IDs with associated font characters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"icons\": {\n        \"distro-ubuntu\": {\n            \"description\": \"Ubuntu icon\",\n            \"default\": {\n                \"fontPath\": \"./distroicons.woff\",\n                \"fontCharacter\": \"\\\\E001\"\n            }\n        },\n        \"distro-fedora\": {\n            \"description\": \"Ubuntu icon\",\n            \"default\": {\n                \"fontPath\": \"./distroicons.woff\",\n                \"fontCharacter\": \"\\\\E002\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Profile Debug Settings in VS Code\nDESCRIPTION: Debug configuration for running extensions in a controlled environment using a named profile. This allows testing with specific user settings and extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Extension\",\n    \"type\": \"extensionHost\",\n    \"request\": \"launch\",\n    \"args\": [\n        \"--profile=extensionContext\",\n        \"--extensionDevelopmentPath=${workspaceFolder}\"\n    ],\n    \"outFiles\": [\n        \"${workspaceFolder}/dist/**/*.js\"\n    ],\n    \"preLaunchTask\": \"npm: watch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding to Open Settings Editor to Side in JSON\nDESCRIPTION: This JSON object defines a keybinding configuration for VS Code. It maps the `cmd+,` key combination (adjust key as needed for other OS) to the `workbench.action.openSettings` command, using the `openToSide` argument set to `true` to force the Settings editor to open in a side group instead of the current one. This configuration should be added to the user's `keybindings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"cmd+,\",\n    \"command\": \"workbench.action.openSettings\",\n    \"args\": {\n        \"openToSide\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Service via 'service' Command using postStartCommand (JSON)\nDESCRIPTION: This snippet demonstrates using the `postStartCommand` property in `devcontainer.json` to start the SSH service using the generic `service` command. The `service` command intelligently uses either `systemctl` or init scripts based on the underlying system configuration, offering a more portable way to manage services within the container on startup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/start-processes.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"service ssh start\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Colors in INI Format\nDESCRIPTION: This INI code snippet shows how to configure Git to use underline and strikethrough attributes for different status types in the terminal output. It sets custom colors and styles for added, changed, untracked, and branch statuses.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[color \"status\"]\n  added = green bold\n  changed = red bold strike\n  untracked = cyan\n  branch = yellow black bold ul\n```\n\n----------------------------------------\n\nTITLE: Opening Project in VS Code\nDESCRIPTION: Commands to navigate to the project directory and open it in VS Code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/angular-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\ncode .\n```\n\n----------------------------------------\n\nTITLE: Cursor Movement Commands in VS Code\nDESCRIPTION: Configuration options for cursor movement operations including direction, units, and selection behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n'line', 'wrappedLine', 'character', 'halfLine'\n```\n\n----------------------------------------\n\nTITLE: VS Code Issue Reporter Configuration\nDESCRIPTION: Setting to enable the experimental web-based issue reporter feature\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"issueReporter.experimental.webReporter\": true\n```\n\n----------------------------------------\n\nTITLE: Implementing InputBox Validation Severity in TypeScript\nDESCRIPTION: Demonstrates how to add severity level to input box validation messages using the InputBoxValidationSeverity API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_68.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ message: 'this is an info message'; severity: InputBoxValidationSeverity.Info }\n```\n\n----------------------------------------\n\nTITLE: Contributing Product Icon Themes in VSCode Extensions\nDESCRIPTION: JSON configuration for defining a product icon theme contribution. This specifies the theme ID, display label, and path to the icon definition file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"productIconThemes\": [\n      {\n        \"id\": \"elegant\",\n        \"label\": \"Elegant Icon Theme\",\n        \"path\": \"./producticons/elegant-product-icon-theme.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json to Disable Extensions During Debugging\nDESCRIPTION: This JSON configuration extends the previous setup by adding the '--disable-extensions' argument, which prevents other extensions from loading during the test run.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Extension Tests\",\n      \"type\": \"extensionHost\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${execPath}\",\n      \"args\": [\n        \"--disable-extensions\",\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionTestsPath=${workspaceFolder}/out/test/suite/index\"\n      ],\n      \"outFiles\": [\"${workspaceFolder}/out/test/**/*.js\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CSS for Markdown Preview\nDESCRIPTION: JSON configuration to specify custom stylesheets for the Markdown preview using the markdown.styles setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/markdown.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"markdown.styles\": [\n        \"Style.css\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js with Debugger Attached (Bash)\nDESCRIPTION: Command to launch a Node.js program (`program.js`) with the inspector agent enabled and listening on the default port (9229). The program starts immediately, allowing a debugger to attach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnode --inspect program.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Language Activations in package.json\nDESCRIPTION: Declaration of onLanguage activation events for multiple file types. This configuration activates the extension when JSON, Markdown, or TypeScript files are opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onLanguage:json\",\n    \"onLanguage:markdown\",\n    \"onLanguage:typescript\"\n]\n```\n\n----------------------------------------\n\nTITLE: Changing ExtensionTerminalOptions-based Terminal Names in VS Code\nDESCRIPTION: This snippet demonstrates how to dynamically change the name of terminals created with ExtensionTerminalOptions using the Pseudoterminal.onDidChangeName event in a VS Code extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_58.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst writeEmitter = new vscode.EventEmitter<string>();\nconst nameEmitter = new vscode.EventEmitter<string>();\nconst pty = {\n  onDidWrite: writeEmitter.event,\n  onDidChangeName: nameEmitter.event,\n  open: () => writeEmitter.fire('Press and key to set the terminal title'),\n  close: () => { /* noop*/ },\n  handleInput: (data: string) => {\n    writeEmitter.fire(`Set title to \"${data}\"`);\n    nameEmitter.fire(data);\n  }\n};\nconst terminal = (<any>vscode.window).createTerminal({ name: `My Extension REPL`, pty });\nterminal.show();\n```\n\n----------------------------------------\n\nTITLE: Checking CMake Version with Bash\nDESCRIPTION: Command to verify the installed CMake version from the terminal. The CMake Tools extension requires CMake to be installed on your system, with version 3.27 or greater recommended.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cmake-linux.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Suggestions Priority\nDESCRIPTION: Settings to ensure Emmet suggestions appear at the top of the suggestion list by treating them as snippets.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"emmet.showSuggestionsAsSnippets\": true,\n\"editor.snippetSuggestions\": \"top\"\n```\n\n----------------------------------------\n\nTITLE: Linking Release Notes Stylesheet - HTML\nDESCRIPTION: This snippet includes a link tag to apply custom CSS styling (inproduct_releasenotes.css) to the documentation page. It ensures that in-product release notes are properly formatted, matching VS Code documentation standards. Requires the CSS file to be available at the specified path; improper path or missing file may result in unstyled content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/inproduct_releasenotes.css\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Contributing Themable Colors in VS Code Extensions\nDESCRIPTION: This JSON configuration demonstrates how extensions can contribute custom themable colors. The example defines a custom status bar error color that inherits from the errorForeground theme color across different themes (dark, light, high contrast).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n  \"colors\": [{\n      \"id\": \"superstatus.error\",\n      \"description\": \"Color for error message in the status bar.\",\n      \"defaults\": {\n          \"dark\": \"errorForeground\",\n          \"light\": \"errorForeground\",\n          \"highContrast\": \"errorForeground\"\n      }\n  }]\n```\n\n----------------------------------------\n\nTITLE: Suggested Troubleshooting Prompts\nDESCRIPTION: Example prompts for diagnosing and troubleshooting Azure resources and applications\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/11/15/introducing-github-copilot-for-azure.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n@azure Why is my [ReallyImportantWebsite] webapp running slow?\n@azure Are there any errors in the logs of my [SuperCoolDemo] Container App?\n```\n\n----------------------------------------\n\nTITLE: Grammar Configuration Example\nDESCRIPTION: Example showing how to contribute a TextMate grammar for Markdown with embedded language support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"grammars\": [\n      {\n        \"language\": \"markdown\",\n        \"scopeName\": \"text.html.markdown\",\n        \"path\": \"./syntaxes/markdown.tmLanguage.json\",\n        \"embeddedLanguages\": {\n          \"meta.embedded.block.frontmatter\": \"yaml\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using activeEditorState Window Title Variable\nDESCRIPTION: References the `activeEditorState` variable within the `window.title` setting. This variable displays editor state information (modified, problems, Copilot Edits) primarily for screen reader users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(window.title)` variable, `activeEditorState`\n```\n\n----------------------------------------\n\nTITLE: Creating an icon definition in a file icon theme\nDESCRIPTION: This snippet shows how to define an icon in the iconDefinitions section of a file icon theme. It specifies a folder icon with a path to its SVG image.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/file-icon-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iconDefinitions\": {\n    \"_folder_dark\": {\n      \"iconPath\": \"./images/Folder_16x_inverse.svg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Pricing Label\nDESCRIPTION: JSON configuration for specifying the pricing label (Free or Trial) in package.json for VS Code marketplace display.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pricing\": \"Free\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Scroll-to-Top Button with HTML\nDESCRIPTION: This HTML snippet creates a scroll-to-top button using an anchor element with ARIA accessibility attributes and a CSS class for icon rendering. There are no external dependencies beyond the referenced stylesheet, but correct visual appearance requires that the 'icon' class is appropriately defined elsewhere. The anchor is meant to facilitate navigation within a static documentation or release notes page, relying on an associated click handler (not shown) and CSS for functionality and presentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a id=\\\"scroll-to-top\\\" role=\\\"button\\\" aria-label=\\\"scroll to top\\\" href=\\\"#\\\"><span class=\\\"icon\\\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Contributing Custom Issue Reporter Command in package.json - JSON\nDESCRIPTION: This snippet from package.json demonstrates how to contribute a new command and menu entry for the issue reporter in VS Code extensions. The 'commands' section registers a new command (e.g., 'extension.myCommand'), while the 'menus' object places it in the 'issue/reporter' menu. Dependencies include basic understanding of VS Code's extension manifests. The snippet shows how to enhance the user's issue reporting workflow with prefilled data or custom flows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [\n    {\n        \"command\": \"extension.myCommand\",\n        \"title\": \"Report Issue\"\n    }\n],\n    \"menus\": {\n        \"issue/reporter\": [\n            {\n                \"command\": \"extension.myCommand\"\n            }\n        ]\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Octicon Icons in VS Code UI\nDESCRIPTION: Examples of updated Octicon icons that have been resized for consistency, including beaker, bell, info-outline, and tools icons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$(beaker) $(bell) $(info-outline) $(tools)\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Top Padding in VS Code\nDESCRIPTION: JSON configuration for adding padding space at the top of the editor. This example sets a 50-pixel top padding using the editor.padding.top setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.padding.top\": 50\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Example\nDESCRIPTION: Reference to VS Code's ESLint configuration file used after migration from TSLint, showing the path to the configuration file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n.eslintrc.json\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Project with Dev Container Support\nDESCRIPTION: Command to create a new Laravel project that includes Dev Container configuration files, enabling VS Code's Dev Containers extension integration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/03/08/the-tutorial-problem.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://laravel.build/example-app?with=mysql,redis&devcontainer\" | bash\n```\n\n----------------------------------------\n\nTITLE: Contributing Refactoring Documentation to the Command Palette - VS Code Extension point - JSON\nDESCRIPTION: This JSON code demonstrates how to contribute refactoring documentation links in a VS Code extension's package.json. It registers a documentation.refactoring array entry with title, when clause, and command fields. No dependencies other than VS Code's extension API. The command field must map to a command implemented by the extension or VS Code. Limitations: The title must be meaningful and the when clause must properly target managed files for which the documentation is relevant.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"contributes\": {\n    \"documentation\": {\n      \"refactoring\": [\n        {\n          \"title\": \"Learn more about JS/TS refactorings\",\n          \"when\": \"typescript.isManagedFile\",\n          \"command\": \"_typescript.learnMoreAboutRefactorings\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Current Timezone Offset in Snippets\nDESCRIPTION: A new snippet variable CURRENT_TIMEZONE_OFFSET has been introduced. It returns the current timezone offset in the format +HH:MM or -HH:MM, complementing other time-related snippet variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCURRENT_TIMEZONE_OFFSET\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - Navigation Controls\nDESCRIPTION: Setting to control visibility of navigation controls in the title area.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nworkbench.navigationControl.enabled\n```\n\n----------------------------------------\n\nTITLE: Listening for New Terminal Events (VS Code Window API, TypeScript)\nDESCRIPTION: This TypeScript code snippet registers an event listener with the VS Code API that fires when a new terminal is created. The event handler receives a terminal object and logs its name to the console. This requires access to the VS Code extension API and helps extensions react to dynamic terminal creation. The main parameter is the callback function that receives the new terminal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.onDidOpenTerminal(terminal => {\\n    console.log('New terminal: ' + terminal.name);\\n});\n```\n\n----------------------------------------\n\nTITLE: Registering VS Code with Debian Alternatives System\nDESCRIPTION: Uses `update-alternatives --install` to register the `code` executable (location determined by `which code`) as an alternative for the generic `editor` link group with a priority of 10. This step is necessary on Debian-based systems before VS Code can be selected as the default editor using `update-alternatives --config editor` or `update-alternatives --set editor`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-alternatives --install /usr/bin/editor editor $(which code) 10\n```\n\n----------------------------------------\n\nTITLE: Displaying Screen Reader Mode Toggle Help via Keyboard Shortcut\nDESCRIPTION: This keyboard shortcut (`Alt+F1`) displays a tooltip in VS Code explaining how to enable or disable the experimental screen reader support mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nAlt+F1\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Suggestions in VS Code JSON Settings\nDESCRIPTION: JSON configuration for enabling or disabling built-in PHP language suggestions in Visual Studio Code. This setting controls whether the editor suggests PHP globals and variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\"php.suggest.basic\": true\n```\n\n----------------------------------------\n\nTITLE: Defining AlternativeTypeType Complex Type in XML Schema\nDESCRIPTION: Defines the AlternativeTypeType complex type, which specifies an alternative type sharing the same visualizer. It includes attributes for Name, Priority, and Inheritable with documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"AlternativeTypeType\">\n  <xs:annotation>\n    <xs:documentation>Specifies an alternative type which will share the same visualizer.</xs:documentation>\n  </xs:annotation>\n  <xs:attribute name=\"Name\" type=\"TypeNameType\" use=\"required\"/>\n  <xs:attribute name=\"Priority\" type=\"PriorityType\" use=\"optional\" />\n  <xs:attribute name=\"Inheritable\" type=\"xs:boolean\" use=\"optional\">\n    <xs:annotation>\n      <xs:documentation>\n        True if this visualizer may be used by objects of classes derived from the given type, false if an object must be directly of this type for the visualizer to take effect.\n        Default is true.\n      </xs:documentation>\n    </xs:annotation>\n  </xs:attribute>\n</xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Actions Order in JSON Settings\nDESCRIPTION: JSON configuration that defines the execution order for Code Actions on save. This example ensures that 'Organize Imports' will always run before 'Fix All' actions, preventing potential conflicts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeActionsOnSave\": [\n    \"source.organizeImports\",\n    \"source.fixAll\"\n]\n```\n\n----------------------------------------\n\nTITLE: HTML CSS Stylesheet Link\nDESCRIPTION: This HTML snippet links an external Cascading Style Sheet (CSS) file located at `css/inproduct_releasenotes.css` to the document. This file contains styling rules specific to the presentation of the release notes content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Command Links in VS Code Chat\nDESCRIPTION: Demonstrates how to create trusted command links in chat responses using MarkdownString with proper command ID trust configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Use command URIs to link to commands from Markdown\nlet markdownCommandString: vscode.MarkdownString = new vscode.MarkdownString(`[Use cat names](command:${CAT_NAMES_COMMAND_ID})`);\nmarkdownCommandString.isTrusted = { enabledCommands: [ CAT_NAMES_COMMAND_ID ] };\n\nstream.markdown(markdownCommandString);\n```\n\n----------------------------------------\n\nTITLE: Converting to Static Import in Java\nDESCRIPTION: Illustrates converting a field or method to a static import using the 'Convert to static import' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.Assert;\n...\npublic void test() {\n  Assert.assertEquals(expected, actual);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nimport static org.junit.Assert.assertEquals;\n...\npublic void test() {\n  assertEquals(expected, actual);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SyntheticItemType Complex Type in XML Schema\nDESCRIPTION: Defines a complex type for specifying synthetic child elements with custom display and expansion options. It includes attributes for name, expression, and common attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<xs:complexType name=\"SyntheticItemType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a child element whose value is not backed by an expression. The value of the item can be specified using a 'DisplayString' element. The children of the item can be specified using an 'Expand' element.</xs:documentation>\n    </xs:annotation>\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"CustomVisualizer\" type=\"CustomVisualizerType\" />\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"DisplayString\" type=\"DisplayStringType\"/>\n      <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"StringView\" type=\"StringViewType\"/>\n      <xs:element minOccurs=\"0\" name=\"Expand\" type=\"ExpandType\"/>\n    </xs:sequence>\n    <xs:attribute name=\"Name\" type=\"StringType\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>Name of the child element as it will be shown under the name column in the debugger windows.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attribute name=\"Expression\" type=\"StringType\" use=\"optional\">\n      <xs:annotation>\n        <xs:documentation>Expression that will be used to retrieve the value of the item when the user wants to track it separately using 'Add watch' command on the item.</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attributeGroup ref=\"CommonAttributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Deeply Nested Structure for Query Time Analysis\nDESCRIPTION: This example shows a document structure with O(log N) nested bracket pairs used to analyze the initial phase of worst-case query time. It demonstrates the scenario where traversing the nested structure contributes O(log N) to the complexity before considering horizontal list lengths within each level.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\n    {\n        ... O(log N) many nested bracket pairs\n            {\n                {} [1]\n            }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring onChatParticipant Activation Event in VS Code Extension\nDESCRIPTION: This code example shows how to specify the onChatParticipant activation event in a VS Code extension's manifest. It's emitted when the specified chat participant is invoked.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onChatParticipant:my-chat-participant\"\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Contributor Updates - Markdown\nDESCRIPTION: This Markdown snippet lists contributors' recent pull requests to a selection of Microsoft VS Code repositories, using bullet points to associate GitHub usernames, PR links, and short descriptions. It is intended to provide an easily readable and maintainable credits/change log section in project documentation, and it requires no external dependencies. Inputs are contributor details and pull request references; outputs are formatted lists rendered by Markdown parsers. Limitations include that formatting relies on client Markdown support.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_48.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Ellis Kenyő (@elken)](https://github.com/elken): Update README.md [PR #252](https://github.com/microsoft/vscode-recipes/pull/252)\n* [tasdevani21 (@tasdevani21)](https://github.com/tasdevani21): Update Vuejs readme to include latest cli commands and improve debugging [PR #263](https://github.com/microsoft/vscode-recipes/pull/263)\n\nContribution to `vscode-hexeditor`:\n\n* [Jean Pierre (@jeanp413)](https://github.com/jeanp413): Improvements to cell selection logic [PR #92](https://github.com/microsoft/vscode-hexeditor/pull/92)\n\nContributions to `vscode-js-debug`:\n\n* [Ashik Paul (@Ashikpaul)](https://github.com/Ashikpaul): Fixed a minor typo [PR #614](https://github.com/microsoft/vscode-js-debug/pull/614)\n\nContributions to `vscode-generator-code`:\n\n* [undefined (@masnn)](https://github.com/masnn): Update index.js [PR #216](https://github.com/microsoft/vscode-generator-code/pull/216)\n* [Sibiraj (@sibiraj-s)](https://github.com/sibiraj-s): Update Eslint, Mocha [PR #213](https://github.com/microsoft/vscode-generator-code/pull/213)\n```\n\n----------------------------------------\n\nTITLE: Toggling Tab Key Trapping via Keyboard Shortcut\nDESCRIPTION: This keyboard shortcut (`Ctrl+M`) acts as a toggle to enable or disable the trapping of the `Tab` key by the editor. When trapping is enabled, `Tab` inserts a tab character or spaces; when disabled, it moves focus.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCtrl+M\n```\n\n----------------------------------------\n\nTITLE: VS Code Command ID for Quick Fix Shortcut (Contextual)\nDESCRIPTION: References the specific command ID `editor.action.quickFix` associated with the VS Code Quick Fix action, typically triggered by the `kb(editor.action.quickFix)` keyboard shortcut. This command highlights source code eligible for refactoring or fixing via Quick Fixes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/rust.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.quickFix)\n```\n\n----------------------------------------\n\nTITLE: Executing Cursor Move Command in Visual Studio Code JavaScript\nDESCRIPTION: JavaScript code to programmatically move the cursor in the editor using the 'cursorMove' command. This example moves the cursor up by 2 wrapped lines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncommands.executeCommand('cursorMove', {to: 'up', by: 'wrappedLine', value: '2'})\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Build and Run Tasks in tasks.json (JSON)\nDESCRIPTION: This JSON snippet shows a complete `tasks.json` configuration for building and running a Docker container, suitable for a Flask application. It defines a 'docker-run: debug' task that depends on the 'docker-build' task. The 'docker-run' task specifies the container name, image, environment variables (FLASK_APP, FLASK_ENV), volume mounts, port mappings, and Python-specific arguments for running Flask. The 'docker-build' task defines how to build the image, specifying the context, Dockerfile location, and image tag.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/debug-python.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"docker-run\",\n      \"label\": \"docker-run: debug\",\n      \"dependsOn\": [\n          \"docker-build\"\n      ],\n      \"dockerRun\": {\n          \"containerName\": \"YOUR_IMAGE_NAME\",\n          \"image\": \"YOUR_IMAGE_NAME:YOUR_IMAGE_TAG\",\n          \"env\": {\n              \"FLASK_APP\": \"path_to/flask_entry_point.py\",\n              \"FLASK_ENV\": \"development\"\n          },\n          \"volumes\": [\n              {\n                  \"containerPath\": \"/app\",\n                  \"localPath\": \"${workspaceFolder}\"\n              }\n          ],\n          \"ports\": [\n              {\n                  \"containerPort\": 5000,\n                  \"hostPort\": 5000\n              }\n          ]\n      },\n      \"python\": {\n          \"args\": [\n              \"run\",\n              \"--host\",\n              \"0.0.0.0\",\n              \"--port\",\n              \"5000\"\n          ],\n          \"module\": \"flask\"\n      }\n  },\n  {\n      \"label\": \"docker-build\",\n      \"type\": \"docker-build\",\n      \"dockerBuild\": {\n          \"context\": \"${workspaceFolder}\",\n          \"dockerfile\": \"${workspaceFolder}/Dockerfile\",\n          \"tag\": \"YOUR_IMAGE_NAME:YOUR_IMAGE_TAG\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Scope List Elements in vscode-textmate (TypeScript)\nDESCRIPTION: This TypeScript snippet declares the ScopeListElement class, essential for representing an immutable linked list of scope stack entries used in VS Code's syntax highlighting. Each element maintains a reference to its parent, the current scope string, and its associated packed metadata as a 32-bit number. Dependencies include the broader vscode-textmate module, and the class is designed to be used within tokenization pipelines, enabling efficient, context-aware theme resolution. Inputs are scope and metadata; the output is an immutable element. Usage assumes working in a TypeScript codebase, with TypeScript language features.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ScopeListElement {\n    public readonly parent: ScopeListElement;\n    public readonly scope: string;\n    public readonly metadata: number;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Symbol Provider in LSP\nDESCRIPTION: Language Server Protocol configuration for enabling workspace-wide symbol search functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"capabilities\" : {\n        \"workspaceSymbolProvider\" : \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Copilot Code Search Setting\nDESCRIPTION: References the VS Code setting `github.copilot.chat.codesearch.enabled`. Enabling this preview setting enhances the results when using the `#codebase` chat variable by improving how Copilot finds relevant files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`setting(github.copilot.chat.codesearch.enabled)`\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code using Zypper on openSUSE/SLE\nDESCRIPTION: Installs the stable version of VS Code using `sudo zypper install code`. Assumes the Microsoft repository has been previously added using the appropriate configuration method for `zypper` (typically the commands shown in the preceding snippet).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install code\n```\n\n----------------------------------------\n\nTITLE: Code Repository References in TypeScript/JavaScript\nDESCRIPTION: Links to key build and test configuration files in the VS Code repository, including compilation, hygiene checks, and test suites.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/09/12/engineering-with-azure-pipelines.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuild/lib/compilation.ts\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuild/gulpfile.hygiene.js\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntest/\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Preloads in VS Code package.json (JSONC)\nDESCRIPTION: Shows how to use the proposed `notebookPreload` contribution point in a VS Code extension's `package.json` to specify JavaScript preload scripts for particular notebook types (like 'jupyter-notebook'). These scripts, identified by their `entrypoint`, are executed before any notebook renderer scripts for the specified `type`. This feature requires enabling the `contribNotebookStaticPreloads` proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_73.md#2025-04-23_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"contributes\": {\n        \"notebookPreload\": [\n            {\n                \"type\": \"jupyter-notebook\", // Type of notebook for the preload script\n                \"entrypoint\": \"./path/to/preload.js\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Web Extension Testing (JSON)\nDESCRIPTION: JSON configuration in package.json for running web extension tests using @vscode/test-web. It includes the necessary dev dependency and test script.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@vscode/test-web\": \"*\"\n  },\n  \"scripts\": {\n    \"test\": \"vscode-test-web --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/suite/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diff Editor Layout Behavior\nDESCRIPTION: Setting to control automatic switching to inline view when editor width is limited.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"diffEditor.useInlineViewWhenSpaceIsLimited\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Icon Colors in VS Code Themes\nDESCRIPTION: Lists the configuration keys for setting the colors of icons related to debugging features in VS Code. This includes breakpoint status icons and icons used in the debug toolbar (start, pause, stop, step, etc.). These identifiers are used within theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n- `debugIcon.breakpointForeground`: Icon color for breakpoints.\n- `debugIcon.breakpointDisabledForeground`: Icon color for disabled breakpoints.\n- `debugIcon.breakpointUnverifiedForeground`: Icon color for unverified breakpoints.\n- `debugIcon.breakpointCurrentStackframeForeground`: Icon color for the current breakpoint stack frame.\n- `debugIcon.breakpointStackframeForeground`: Icon color for all breakpoint stack frames.\n- `debugIcon.startForeground`: Debug toolbar icon for start debugging.\n- `debugIcon.pauseForeground`: Debug toolbar icon for pause.\n- `debugIcon.stopForeground`: Debug toolbar icon for stop.\n- `debugIcon.disconnectForeground`: Debug toolbar icon for disconnect.\n- `debugIcon.restartForeground`: Debug toolbar icon for restart.\n- `debugIcon.stepOverForeground`: Debug toolbar icon for step over.\n- `debugIcon.stepIntoForeground`: Debug toolbar icon for step into.\n- `debugIcon.stepOutForeground`: Debug toolbar icon for step over.\n- `debugIcon.continueForeground`: Debug toolbar icon for continue.\n- `debugIcon.stepBackForeground`: Debug toolbar icon for step back.\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter Descriptor Factory with VS Code (TypeScript)\nDESCRIPTION: Demonstrates how to register a DebugAdapterDescriptorFactory for a debug type (here, 'mock') using the finalized VS Code API. The factory starts a network server on a random port for the first debug session, makes VS Code connect to a DebugAdapterServer using this port, and embeds the adapter logic in the extension itself. Dependencies include Node.js (Net), VS Code API, and an implementation of MockDebugSession. The key parameters are the debug type ('mock'), the debug session, and the executable. The input is a debug session, and the output is a descriptor (DebugAdapterServer). This approach enables advanced scenarios such as running or reusing debug adapters across sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet server: Net.Server;\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\n    createDebugAdapterDescriptor(session: DebugSession, executable: DebugAdapterExecutable) {\n        // start server on launch of first debug session\n        if (!server) {\n            // start listening on a random port\n            server = Net.createServer(socket => {\n                const s = new MockDebugSession();\n                s.setRunAsServer(true);\n                s.start(<NodeJS.ReadableStream>socket, socket);\n            }).listen(0);\n        }\n        // make VS Code connect to debug server instead of launching debug adapter\n        return new DebugAdapterServer(server.address().port);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Previous Type Signature for executeCommand Method in VS Code\nDESCRIPTION: The old type signature for vscode.commands.executeCommand which returned a promise of a potentially undefined value. This was problematic for commands that never return undefined, like those returning empty arrays instead.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function executeCommand<T>(command: string, ...rest: any[]): Thenable<T | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug View Display on Break in VS Code\nDESCRIPTION: Sets the default value for the debug.openDebug setting to open the Debug view automatically on breakpoint hits and session starts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"debug.openDebug\": \"openOnDebugBreak\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Git Blame Editor Decoration Template in VS Code Settings (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to customize the format of the inline Git blame message shown in the VS Code editor using the `git.blame.editorDecoration.template` setting. It utilizes variables like `${subject}`, `${authorName}`, and `${authorDateAgo}` to display the commit subject, author's name, and relative author date. This setting requires VS Code's Git integration and allows users to tailor the blame information presentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/sourcecontrol/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git.blame.editorDecoration.template\": \"${subject}, ${authorName} (${authorDateAgo})\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Colors in VS Code\nDESCRIPTION: Color configuration options for panels that appear below the editor area, including panel backgrounds, borders, titles, and section headers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- `panel.background`: Panel background color.\n- `panel.border`: Panel border color to separate the panel from the editor.\n- `panel.dropBorder`: Drag and drop feedback color for the panel titles.\n- `panelTitle.activeBorder`: Border color for the active panel title.\n- `panelTitle.activeForeground`: Title color for the active panel.\n- `panelTitle.inactiveForeground`: Title color for the inactive panel.\n- `panelTitle.border`: Panel title border color on the bottom.\n- `panelTitleBadge.background`: Panel title badge background color.\n- `panelTitleBadge.foreground`: Panel title badge foreground color.\n- `panelInput.border`: Input box border for inputs in the panel.\n- `panelSection.border`: Panel section border color.\n- `panelSection.dropBackground`: Drag and drop feedback color for the panel sections.\n- `panelSectionHeader.background`: Panel section header background color.\n- `panelSectionHeader.foreground`: Panel section header foreground color.\n- `panelStickyScroll.background`: Background color of sticky scroll in the panel.\n- `panelStickyScroll.border`: Border color of sticky scroll in the panel.\n- `panelStickyScroll.shadow`: Shadow color of sticky scroll in the panel.\n```\n\n----------------------------------------\n\nTITLE: Creating a Keybinding for Paste with Imports in VS Code (JSON)\nDESCRIPTION: This snippet demonstrates how to set up a keybinding in VS Code to paste with imports if available, using Ctrl+Shift+V as the keyboard shortcut.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"ctrl+shift+v\",\n    \"command\": \"editor.action.pasteAs\",\n    \"args\": {\n        \"preferences\": [\n            \"text.updateImports\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting VS Code User Data on Linux\nDESCRIPTION: Specifies the default locations of Visual Studio Code user data folders on Linux. Deleting these folders (`$HOME/.config/Code` and `~/.vscode`) ensures a clean uninstall or reset of VS Code settings and data. These paths utilize standard Linux/Unix shell conventions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/setup-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/.config/Code\n```\n\nLANGUAGE: shell\nCODE:\n```\n~/.vscode\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Package Lists using apt-get in Bash\nDESCRIPTION: Updates the list of available packages from the repositories configured on an Ubuntu system. This is recommended before installing new packages to ensure access to the latest versions. Requires administrator privileges (sudo).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Configuring OS-Specific Task Arguments in VS Code\nDESCRIPTION: This example shows how to make task commands OS-specific in VS Code's tasks.json. It demonstrates adding different arguments to a gulp build command based on whether it's running on Windows, Linux, or macOS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskName\": \"build\",\n    \"command\": \"gulp\",\n    \"windows\": {\n        \"args\": [\"build\", \"win32\"]\n    },\n    \"linux\": {\n        \"args\": [\"build\", \"linux\"]\n    },\n    \"osx\": {\n        \"args\": [\"build\", \"osx\"]\n    },\n    \"isShellCommand\": true\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Find Control Keybinding Configuration\nDESCRIPTION: JSON configuration to customize keybindings for the Find control feature in list views.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"cmd+f\", // \"ctrl+f\" on Windows/Linux\n    \"command\": \"-list.find\",\n    \"when\": \"listFocus && listSupportsFind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attribute Wrapping in VS Code JSON Settings\nDESCRIPTION: JSON configuration options for controlling how HTML attributes are wrapped in Visual Studio Code. These settings allow customization of attribute formatting and line wrapping behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n\"html.format.wrapAttributes\": \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Root Workspace API in TypeScript\nDESCRIPTION: Proposed API for handling multiple workspace folders in VS Code. Includes new interfaces for workspace folders, configuration, and events. Requires enabling proposed API in extension's package.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace workspace {\n    /**\n    * List of workspace folders or `undefined` when no folder is open. The *first*\n    * element in the array is equal to the [`rootPath`](#workspace.rootPath)\n    */\n    export let workspaceFolders: Uri[] | undefined\n    /**\n     * An event that is emitted when a workspace folder is added or removed.\n     */\n    export const onDidChangeWorkspaceFolders: Event<WorkspaceFoldersChangeEvent>;\n    /**\n    * Get a configuration object.\n    *\n    * @param section A dot-separated identifier.\n    * @param resource A resource for which configuration is asked\n    * @return The full workspace configuration or a subset.\n    */\n    export function getConfiguration2(section?: string, resource?: Uri): WorkspaceConfiguration2;\n}\n\nexport interface WorkspaceFoldersChangeEvent {\n    readonly addedFolders: Uri[];\n    readonly removedFolders: Uri[];\n}\n\nexport interface WorkspaceConfiguration2 extends WorkspaceConfiguration {\n\n    /**\n    * Retrieve all information about a configuration setting. A configuration value\n    * often consists of a *default* value, a global or installation-wide value,\n    * a workspace-specific value and a folder-specific value.\n    *\n    * The *effective* value (returned by [`get`](#WorkspaceConfiguration.get))\n    * is computed like this: `defaultValue` overwritten by `globalValue`,\n    * `globalValue` overwritten by `workspaceValue`. `workspaceValue` overwritten by `folderValue`.\n    *\n    * *Note:* The configuration name must denote a leaf in the configuration tree\n    * (`editor.fontSize` vs `editor`) otherwise no result is returned.\n    *\n    * @param section Configuration name, supports _dotted_ names.\n    * @return Information about a configuration setting or `undefined`.\n    */\n    inspect<T>(section: string): { key: string; defaultValue?: T; globalValue?: T; workspaceValue?: T, folderValue?: T } | undefined;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Source Files for Remote Debugging in launch.json\nDESCRIPTION: This JSON snippet demonstrates the 'sourceFileMap' configuration within launch.json. It is used in conjunction with remote debugging setups like 'pipeTransport' to map source file paths on the remote machine (key) to their corresponding paths on the local development machine (value). This mapping allows the debugger to correctly display source code and set breakpoints.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/pipe-transport.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"sourceFileMap\": {\n    // \"remote\": \"local\"\n    \"/home/user/src\": \"/src/projectA/src\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dev Container CLI Help Command Output\nDESCRIPTION: Shows the available commands and options for the dev container CLI, including up, build, run-user-commands, read-configuration, and exec commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/05/18/dev-container-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer <command>\n\nCommands:\n  devcontainer up                   Create and run dev container\n  devcontainer build [path]         Build a dev container image\n  devcontainer run-user-commands    Run user commands\n  devcontainer read-configuration   Read configuration\n  devcontainer exec <cmd> [args..]  Execute a command on a running dev container\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Updating VS Code Launch Configuration for Flask\nDESCRIPTION: This JSON snippet configures the VS Code debugger environment to point to the new entry point of the refactored Flask application. It sets the FLASK_APP environment variable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n    \"FLASK_APP\": \"hello_app.webapp\"\n},\n```\n\n----------------------------------------\n\nTITLE: Enabling Tasks Version 2.0.0 Preview Configuration in VS Code\nDESCRIPTION: JSON configuration snippet to enable the Tasks version 2.0.0 preview in VS Code. This version is still under development but available for early feedback, enabling automatic detection of tasks from various task runners.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Platform in Node.js Debug Console\nDESCRIPTION: This command, when entered in the VS Code Debug console while debugging a Node.js application in WSL 2, shows that the environment is Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/09/03/wsl2.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.platform\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll-to-Top Button in HTML\nDESCRIPTION: This snippet implements an accessible scroll-to-top button in HTML for in-product release notes. Dependencies include standard web browser HTML support and accessible ARIA attributes. The 'icon' span is intended to display an icon, possibly via CSS or a larger UI framework; clicking the anchor provides navigation for users to jump to the top.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\\\"scroll-to-top\\\" role=\\\"button\\\" aria-label=\\\"scroll to top\\\" href=\\\"#\\\"><span class=\\\"icon\\\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Renderer Fallback in TypeScript\nDESCRIPTION: Code showing how to implement fallback rendering in VS Code notebook renderers by throwing a special error that signals VS Code to try alternate rendering methods.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new class extends Error {\n    override name = 'vscode.fallbackToNextRenderer';\n}();\n```\n\n----------------------------------------\n\nTITLE: Comparing Uint8Array and JSON String Representations in JavaScript\nDESCRIPTION: Illustrates the performance difference between storing notebook outputs as Uint8Arrays versus JSON strings. The example shows how converting binary data to JSON can significantly increase data size.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew Uint8Array([72, 101, 108, 108, 111, 32, 67, 111, 100, 101, 33])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"[72,101,108,108,111,32,67,111,100,101,33]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Control Flow Attribute Groups for Custom List Code\nDESCRIPTION: XML schema attribute group definitions that specify attributes for custom list code elements, particularly focusing on conditional execution. These attributes control when and how code elements are processed during collection traversal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<xs:attributeGroup name=\"CustomListCode_Attributes\">\n    <xs:attribute name=\"Condition\" type=\"ConditionType\" use=\"optional\">\n      <xs:annotation>\n        <xs:documentation>Condition controlling whether this element and inner elements should execute</xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n    <xs:attributeGroup ref=\"CustomListCode_Attributes_NoCondition\" />\n  </xs:attributeGroup>\n\n  <!-- Defines attributes that do on custom list code elements besides the condition. Currently, this is empty, but maintaining the group\n  as a placeholder in case we decide to add something to it later. -->\n  <xs:attributeGroup name=\"CustomListCode_Attributes_NoCondition\">\n  </xs:attributeGroup>\n```\n\n----------------------------------------\n\nTITLE: Comment Thread Menu Location\nDESCRIPTION: Menu location identifier for contributing buttons to comment threads.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncomments/commentThread/additionalActions\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Controller Renderer Scripts with JavaScript Modules\nDESCRIPTION: Example showing the new module-based structure for notebook controller renderer scripts. The code demonstrates how to export an activate function that receives the VS Code kernel preload context API, replacing the previous global symbol approach.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninterface KernelPreloadContext {\n    readonly onDidReceiveKernelMessage: Event<unknown>;\n    postKernelMessage(data: unknown): void;\n}\n\nexport function activate(ctx: KernelPreloadContext): Promise<void> | undefined {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Timeline View Preview in VS Code Settings (JSON)\nDESCRIPTION: This JSON setting enables the experimental Timeline view feature in VS Code Stable builds. Setting `\"timeline.showView\"` to `true` within the user or workspace settings file makes the view available in the editor interface. This setting is mentioned as part of the Timeline view preview feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_43.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"timeline.showView\": true\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Express Application JavaScript\nDESCRIPTION: This snippet shows setting a breakpoint on line 10 of the app.js file in an Express application. It demonstrates the ability to use VS Code's debugging features over SSH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Breakpoint set on this line (line 10)\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n```\n\n----------------------------------------\n\nTITLE: Using --nolazy Option for Node.js Debugging\nDESCRIPTION: The `--nolazy` command-line option for Node.js disables lazy compilation of functions. It can improve the reliability of hitting breakpoints, especially in certain scenarios. VS Code no longer adds this automatically, so it should be explicitly added to the `runtimeArgs` in `launch.json` if needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n--nolazy\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair using ssh-keygen\nDESCRIPTION: Creates a new SSH key pair using ED25519 encryption algorithm. The command generates both public and private keys, with an option to add a passphrase for additional security.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/07/25/remote-ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519\n```\n\n----------------------------------------\n\nTITLE: Implementing an Injection Grammar for TODO Highlighting\nDESCRIPTION: JSON structure of an injection grammar that highlights 'TODO' keywords in JavaScript double-slash comments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scopeName\": \"todo-comment.injection\",\n  \"injectionSelector\": \"L:comment.line.double-slash\",\n  \"patterns\": [\n    {\n      \"include\": \"#todo-keyword\"\n    }\n  ],\n  \"repository\": {\n    \"todo-keyword\": {\n      \"match\": \"TODO\",\n      \"name\": \"keyword.todo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in Virtual Environment (Python)\nDESCRIPTION: This command upgrades the pip package installer within the currently activated Python virtual environment to its latest version. It uses the 'python -m pip' command to ensure it's using the pip associated with the virtual environment's Python interpreter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Release Notes Page HTML Elements\nDESCRIPTION: HTML markup for release notes styling including a scroll-to-top button with accessibility attributes and a CSS stylesheet link\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_46.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Extension Logging API in TypeScript\nDESCRIPTION: Proposed API for extension logging, allowing extensions to write logs to their own folder inside VS Code's log folder. Includes log levels and methods for writing different types of log messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The severity level of a log message\n */\nexport enum LogLevel {\n  Trace = 1,\n  Debug = 2,\n  Info = 3,\n  Warning = 4,\n  Error = 5,\n  Critical = 6,\n  Off = 7\n}\n\n/**\n * A logger for writing to an extension's log file, and accessing its dedicated log directory.\n */\nexport interface Logger {\n  readonly onDidChangeLogLevel: Event<LogLevel>;\n  readonly currentLevel: LogLevel;\n  readonly logDirectory: Thenable<string>;\n\n  trace(message: string, ...args: any[]): void;\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string | Error, ...args: any[]): void;\n  critical(message: string | Error, ...args: any[]): void;\n}\n\nexport interface ExtensionContext {\n  /**\n   * This extension's logger\n   */\n  logger: Logger;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Formatting Examples with Commands and UI Elements\nDESCRIPTION: Shows examples of bold formatting for VS Code commands and UI elements, and inline code formatting for settings and filenames.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Extensions: Install Extension**\n**Debug Console**\n```\n\n----------------------------------------\n\nTITLE: Installing CodeMetrics Extension in Visual Studio Code\nDESCRIPTION: This snippet demonstrates how to install the CodeMetrics extension using Visual Studio Code's Quick Open feature. It includes the keyboard shortcut for Quick Open and the extension installation command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/05/04/extension-roundup-may.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n>**Install:** Quick Open (`kb(workbench.action.quickOpen)`), paste `ext install vscode-codemetrics` and press `kbstyle(Enter)`.\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Workspaces via Application Links in VS Code\nDESCRIPTION: Demonstrates the syntax for opening remote workspaces in VS Code and VS Code Insiders using protocol links. This feature allows direct access to remote environments through specially formatted URLs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_43.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvscode://vscode-remote/<remoteName>+<resolverArguments>/<path>\nvscode-insiders://vscode-remote/<remoteName>+<resolverArguments>/<path>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Vertical Rulers in VS Code Editor\nDESCRIPTION: Configures multiple vertical column rulers in the editor to help maintain code line length consistency. This setting adds ruler lines at character positions 20, 40, and 60.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"editor.rulers\": [\n        20, 40, 60\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Program in the 'abc' Language\nDESCRIPTION: A simple program written in the fictional 'abc' language demonstrating how the grammar rules are applied. The program includes letters and nested parenthetical expressions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\na\n(\n    b\n)\nx\n(\n    (\n        c\n        xyz\n    )\n)\n(\na\n```\n\n----------------------------------------\n\nTITLE: Configuring contextual menu items with when clauses in JSON\nDESCRIPTION: Example of a package.json menu contribution that uses the 'in' operator to show a command only for specific folders based on a custom context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/when-clause-contexts.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Note, this assumes you have already defined a command called ext.doSpecial\n\"menus\": {\n  \"explorer/context\": [\n    {\n      \"command\": \"ext.doSpecial\",\n      \"when\": \"explorerResourceIsFolder && resourceFilename in ext.supportedFolders\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Menu Bar Visibility via Menu (Windows/Linux)\nDESCRIPTION: This menu path (`View | Toggle Menu Bar`) allows users on Windows and Linux to show or hide the main VS Code menu bar. When hidden, the menu can still be accessed temporarily, often by pressing the `Alt` key.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nView | Toggle Menu Bar\n```\n\n----------------------------------------\n\nTITLE: Extracting Constant in Java\nDESCRIPTION: Demonstrates extracting a value to a constant using the 'Extract to constant' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic double getArea(double r) {\n  return 3.14 * r * r;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate static final double PI = 3.14;\n\npublic double getArea(double r) {\n  return PI * r * r;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Quick Suggestions in Visual Studio Code JSON\nDESCRIPTION: JSON configuration to disable quick suggestions in the editor. This can be useful when using tab completion for snippets to avoid interference.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.quickSuggestions\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Indentation-Based Folding for HTML\nDESCRIPTION: JSON configuration to use indentation-based folding strategy instead of the default tag-based folding for HTML files. This setting is applied specifically to HTML language mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/html.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"[html]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n},\n```\n\n----------------------------------------\n\nTITLE: Opening React Project in VS Code\nDESCRIPTION: Commands to navigate to the React project directory and open it in Visual Studio Code. The 'code .' command opens VS Code in the current directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/reactjs-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\ncode .\n```\n\n----------------------------------------\n\nTITLE: Example Ask Mode Questions for Copilot Chat\nDESCRIPTION: Provides example natural language questions suitable for the 'ask mode' in VS Code Copilot Chat. These demonstrate querying general programming concepts, API usage, and framework-specific tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`What is the factory design pattern?`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`How do I use the fetch API in JavaScript?`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`How do I create a new React component?`\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Sync Configuration\nDESCRIPTION: JSON setting to control platform-specific keyboard shortcuts synchronization.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nsetting(settingsSync.keybindingsPerPlatform)\n```\n\n----------------------------------------\n\nTITLE: Git Clone URI Protocol Handler for VS Code\nDESCRIPTION: Bash command example demonstrating the protocol handler API for Git clone operations in VS Code, which allows cloning repositories directly from URIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvscode://vscode.git/clone?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-vsce.git\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Uncalled Function Bug in TypeScript\nDESCRIPTION: Example TypeScript code illustrating a common bug where a function (isDirectory) is used as a property instead of being called. This demonstrates why VS Code's uncalled function check is useful, especially with strict null checking enabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_41.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as fs from 'fs';\n\nfs.stat('/path/to/file', function(err, stats) {\n    if (stats.isDirectory) {\n        handleDirectory(stats);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Opening New Window without Restoring Previous Session in Visual Studio Code\nDESCRIPTION: Uses the -n or --new-window switch to start VS Code without restoring the previous session.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_3_0.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncode -n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Web App\nDESCRIPTION: Azure CLI command to create a web app instance within the specified App Service plan and resource group.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz appservice web create -n nina-demo-app -p nina-demo-plan -g nina-demo\n```\n\n----------------------------------------\n\nTITLE: Defining an Extension Pack in package.json for VS Code\nDESCRIPTION: This snippet shows how to define an Extension Pack in the package.json file, bundling multiple extensions together for easy installation. It includes a PHP debugger and language service.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensionPack\": [\n    \"xdebug.php-debug\",\n    \"zobo.php-intellisense\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hidden Menu Bar via Keyboard Shortcut (Windows/Linux)\nDESCRIPTION: Pressing the `Alt` key on Windows and Linux temporarily reveals the main menu bar if it has been hidden using the `View | Toggle Menu Bar` action.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nAlt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Glob Pattern Usage in VS Code Search Settings\nDESCRIPTION: This snippet shows how glob patterns are used differently in the Search view compared to settings like files.exclude and search.exclude. It highlights the special case of the '**' prefix.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editor/glob-patterns.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n**/example to match a folder named example in subfolder folder1/example in your workspace\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Flask Template\nDESCRIPTION: CSS stylesheet defining styles for template elements, demonstrating static file usage in Flask applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.message {\n    font-weight: 600;\n    color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: LSIF Hover Content Example\nDESCRIPTION: Concrete example of hover content implementation in TypeScript.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  contents: [\n    { language: \"typescript\", value: \"function bar(): void\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Activation Events for Debug Adapter Protocol Tracking (JSON)\nDESCRIPTION: Illustrates a package.json excerpt specifying extension activation events. The configuration ensures that the extension is activated specifically for the Debug Adapter Protocol tracker of the Node.js debugger ('onDebugAdapterProtocolTracker:node'). The input is the activationEvents array; output is the timing of activation. This is required for extensions relying on protocol tracking to initialize only when the tracker is needed, optimizing performance and correctness.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"activationEvents\": [\n        \"onDebugAdapterProtocolTracker:node\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting VS Code GPU Cache (Bash)\nDESCRIPTION: This command removes the GPUCache directory for Visual Studio Code, which can resolve issues that occur after updates where VS Code displays a blank main window.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -r ~/.config/Code/GPUCache\n```\n\n----------------------------------------\n\nTITLE: Displaying WSL Remote Indicator Hover Information\nDESCRIPTION: This image demonstrates the new hover information for the Remote indicator, which now shows whether the current Linux distribution is using WSL 1 or WSL 2.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_62.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![WSL Remote indicator hover](images/1_62/wsl-remote-indicator-hover.png)\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - SCM History Graph Display\nDESCRIPTION: Setting to enable experimental graph visualization of incoming and outgoing changes in source control.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nscm.experimental.showHistoryGraph\n```\n\n----------------------------------------\n\nTITLE: Setting SSH Agent Socket Environment Variable in Bash\nDESCRIPTION: This command updates the SSH_AUTH_SOCK environment variable with the current value stored in SSH_AUTH_SOCK_LOCATION. It's used to refresh the SSH agent connection after a remote session reconnection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_37.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSSH_AUTH_SOCK=`cat $SSH_AUTH_SOCK_LOCATION`\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Commands in VS Code Tasks\nDESCRIPTION: This JSON configuration demonstrates how to define different commands per task in VS Code's tasks.json. It allows running different commands for different tasks without writing shell scripts, with one task watching TypeScript files and another running gulp build.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.1.0\",\n    \"tasks\": [\n        {\n            \"taskName\": \"tsc\",\n            \"command\": \"tsc\",\n            \"args\": [\"-w\"],\n            \"isShellCommand\": true,\n            \"isBackground\": true,\n            \"problemMatcher\": \"$tsc-watch\"\n        },\n        {\n            \"taskName\": \"build\",\n            \"command\": \"gulp\",\n            \"args\": [\"build\"],\n            \"isShellCommand\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Machine-Scoped Git Path Configuration\nDESCRIPTION: Extension configuration example showing how to define a machine-scoped setting for Git executable path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"configuration\": {\n  \"title\": \"Git\",\n  \"properties\": {\n   \"git.path\": {\n      \"type\": [\n        \"string\",\n        \"null\"\n      ],\n      \"markdownDescription\": \"Path and filename of the git executable.\",\n      \"default\": null,\n      \"scope\": \"machine\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Extension Workspace Trust Support in VS Code JSON Settings\nDESCRIPTION: This JSON configuration snippet demonstrates how to use the `extensions.supportUntrustedWorkspaces` setting within VS Code's user `settings.json` file. It specifically overrides the Workspace Trust support for the 'Prettier - Code formatter' extension (`esbenp.prettier-vscode`) by setting `supported` to `true` for version `6.4.0`. This allows the specified extension version to run even in Restricted Mode, although users should be cautious when overriding extension trust declarations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_57.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n  \"extensions.supportUntrustedWorkspaces\": {\n    \"esbenp.prettier-vscode\": {\n      \"supported\": true,\n      \"version\": \"6.4.0\"\n    },\n  },\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Indentation Detection\nDESCRIPTION: JSON configuration to disable automatic indentation detection and set a custom tab size of 3 spaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.detectIndentation\": false,\n    \"editor.tabSize\": 3,\n```\n\n----------------------------------------\n\nTITLE: VS Code Theme Color Key Table\nDESCRIPTION: Table describing changes to theme color behavior in VS Code, including panel borders, tab borders, editor group borders, and list color configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_13.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Description\n---|-------\n`panel.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`tab.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`editorGroup.border`|Now overwrites the value of `contrastBorder`, allowing a more specific color if `contrastBorder` is set.\n`list.*`|All list colors can now be set even in the presence of `contrastBorder` and `contrastActiveBorder`.\n```\n\n----------------------------------------\n\nTITLE: Comment Configuration in JSON\nDESCRIPTION: Configuration for line and block comments toggling functionality in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-configuration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"comments\": {\n    \"lineComment\": \"//\",\n    \"blockComment\": [\"/*\", \"*/\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button in HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) styled as a button to scroll the page to the top. It includes accessibility attributes like `role='button'` and `aria-label`. The `href='#'` targets the top of the page, and an empty `<span>` with class `icon` is likely used for styling a visual indicator (e.g., an arrow icon via CSS). This is intended for use within in-product release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Enabling Smooth Scrolling in VS Code\nDESCRIPTION: Configuration setting to enable animated smooth scrolling behavior in the VS Code editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"editor.smoothScrolling\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusion Pattern in Visual Studio Code\nDESCRIPTION: Demonstrates how to configure a pattern to hide derived JavaScript files when a TypeScript file with the same name is present, using the files.exclude setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_5_0.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"**/*.js\": { \"when\": \"$(basename).ts\"}\n```\n\n----------------------------------------\n\nTITLE: Example Slash Commands\nDESCRIPTION: Provides examples of slash commands like `/fix` (to propose fixes) and `/explain` (to explain selected code) available in VS Code Copilot Chat.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n`/fix`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`/explain`\n```\n\n----------------------------------------\n\nTITLE: Invoking Chat Participants with @\nDESCRIPTION: Shows the `@` symbol used in the Copilot chat input field to trigger the display and selection of available chat participants, which provide domain-specific knowledge.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`@`\n```\n\n----------------------------------------\n\nTITLE: Terminal Performance Example - After Version 1.9.0\nDESCRIPTION: Demonstration of improved terminal performance in version 1.9.0 showing approximately 5x faster processing speed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n![Terminal performance before](images/1_9/terminal-after.gif)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTML Entities Using JSON in VS Code\nDESCRIPTION: This JSON snippet demonstrates how to define a custom HTML tag 'my-button' using the Custom Data Format. It includes the tag name, description, and external references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/24/custom-data-format.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1.1,\n  \"tags\": [\n    {\n      \"name\": \"my-button\",\n      \"description\": \"My button. You should use it as in `<my-button type='alert'></mybutton>`.\",\n      \"references\": [\n        {\n          \"name\": \"Bootstrap buttons\",\n          \"url\": \"https://getbootstrap.com/docs/4.0/components/buttons/\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the New Debug Adapter Protocol Schema URL - Bash\nDESCRIPTION: This snippet highlights the updated location of the Debug Adapter Protocol JSON schema. Developers using the DAP JSON-schema programmatically should replace references to the former URL with this new one to ensure continued compatibility as the old location will only be maintained for a limited transitional period. No code execution occurs; it solely represents the replacement string.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhttps://microsoft.github.io/debug-adapter-protocol/debugAdapterProtocol.json\n```\n\n----------------------------------------\n\nTITLE: Using Workspace Root Variable in VS Code Configurations\nDESCRIPTION: The `${workspaceRoot}` (or newer `${workspaceFolder}`) variable is used in VS Code configuration files like `launch.json` and `settings.json`. It dynamically resolves to the absolute path of the root folder of the opened workspace, ensuring paths are relative and portable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n${workspaceRoot}\n```\n\n----------------------------------------\n\nTITLE: Registering Signature Help Providers with Trigger/Retrigger Characters (TypeScript)\nDESCRIPTION: Introduces the `SignatureHelpProviderMetadata` interface with `triggerCharacters` and `retriggerCharacters` arrays. The `languages.registerSignatureHelpProvider` function is updated to accept this metadata, allowing extensions to define specific characters that trigger signature help initially versus those that re-trigger it when it's already active. This is part of a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\nexport interface SignatureHelpProviderMetadata {\n  readonly triggerCharacters: ReadonlyArray<string>;\n  readonly retriggerCharacters: ReadonlyArray<string>;\n}\n\nnamespace languages {\n  export function registerSignatureHelpProvider(\n    selector: DocumentSelector,\n    provider: SignatureHelpProvider,\n    metadata: SignatureHelpProviderMetadata\n  ): Disposable;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using WebviewOptions.portMapping in VS Code Extension API\nDESCRIPTION: Demonstrates how to use the proposed portMapping feature in WebviewOptions to transparently map localhost ports in webviews. This allows a webview to use hard-coded ports that are mapped to dynamically opened ports on the local machine, which is useful for services like live servers that run on random ports.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel = vscode.window.createWebviewPanel('dog', \"Dog Doodling\", vscode.ViewColumn.One, {\n    portMapping: [\n        // Map localhost:3000 in the webview to localhost:4000 externally\n        { port: 3000, resolvedPort: 4000 }\n    ]\n});\n\npanel.webview.html =  `<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <title>Dog Doodling</title>\n    </head>\n    <body>\n        <!--\n            With the above port mapping, this image will actually be resolved\n            to localhost:4000 on the local machine\n        -->\n        <img src=\"http://localhost:3000/canvas.png\">\n    </body>\n    </html>`;\n```\n\n----------------------------------------\n\nTITLE: Token Array Representation in JavaScript\nDESCRIPTION: Example showing the original token representation format with full objects containing startIndex and type properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntokens = [\n    { startIndex:  0, type: 'keyword.js' },\n    { startIndex:  8, type: '' },\n    { startIndex:  9, type: 'identifier.js' },\n    { startIndex: 11, type: 'delimiter.paren.js' },\n    { startIndex: 12, type: 'delimiter.paren.js' },\n    { startIndex: 13, type: '' },\n    { startIndex: 14, type: 'delimiter.curly.js' },\n]\n```\n\n----------------------------------------\n\nTITLE: Resetting Theme Colors to Default\nDESCRIPTION: Example of how to reset a specific color customization back to its default value.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"workbench.colorCustomizations\": {\n      \"diffEditor.removedTextBorder\": \"default\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code Language Using Command Line\nDESCRIPTION: Command to launch VS Code with a specific display language (French in this example) using the --locale parameter. Requires the appropriate Language Pack to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/locales.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode . --locale=fr\n```\n\n----------------------------------------\n\nTITLE: Configuring ControlMaster in SSH Config File\nDESCRIPTION: This YAML snippet demonstrates how to configure the ControlMaster feature in the SSH config file to enable multiple SSH sessions over a single connection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nHost *\n    ControlMaster auto\n    ControlPath  ~/.ssh/sockets/%r@%h-%p\n    ControlPersist  600\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Table in Markdown/HTML\nDESCRIPTION: This snippet demonstrates how to create a table listing product icons, including their preview, identifier, default codicon ID, and description. It uses HTML within Markdown to render the icon previews.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| preview     | identifier                        | default codicon ID                | description\n| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |\n|<i class=\"codicon codicon-account\"></i>|accounts-view-bar-icon|account|Accounts icon in the view bar.|\n|<i class=\"codicon codicon-activate-breakpoints\"></i>|breakpoints-activate|activate-breakpoints|Icon for the activate action in the breakpoints view.|\n|<i class=\"codicon codicon-close-all\"></i>|breakpoints-remove-all|close-all|Icon for the Remove All action in the breakpoints view.|\n|<i class=\"codicon codicon-debug-alt\"></i>|breakpoints-view-icon|debug-alt|View icon of the breakpoints view.|\n```\n\n----------------------------------------\n\nTITLE: Setting onStartupFinished Activation Event in VS Code Extension\nDESCRIPTION: This code snippet shows how to declare the onStartupFinished activation event in a VS Code extension's manifest. This event is emitted some time after VS Code starts up, without slowing down the startup process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onStartupFinished\"\n]\n```\n\n----------------------------------------\n\nTITLE: Changing the Encoding for Task Output on Windows (JSON)\nDESCRIPTION: Demonstrates how to explicitly set the code page before running a command in tasks.json to ensure proper file encoding handling in command output. This example uses 'chcp 866' to switch to code page 866 before displaying a file with Cyrillic text via 'more', applicable in Windows cmd.exe. Precondition: user has a Russian-encoded file; Limitation: OS and shell-specific solution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"more\",\n            \"type\": \"shell\",\n            \"command\": \"chcp 866 && more russian.txt\",\n            \"problemMatcher\": []\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Linux packages and installing dependencies on Chromebook\nDESCRIPTION: These commands update the list of Linux packages and install the recommended gnome-keyring dependency for VS Code on a Chromebook.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/12/03/chromebook-get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y gnome-keyring\n```\n\n----------------------------------------\n\nTITLE: Contributing Test Views to Activity Bar in VS Code Extension Package.json\nDESCRIPTION: JSON configuration for extension authors to contribute custom views to the Test container in VS Code's Activity Bar. This example shows how to add a Mocha test view that will appear in the Test activity section.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"contributes\": {\n    \"views\": {\n        \"test\": [\n            {\n                \"id\": \"mocha\",\n                \"name\": \"mocha\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Tab Context Menu in VSCode Extensions\nDESCRIPTION: Example showing how to contribute menu entries to the editor tab context menu using the 'editor/title/context' menu path. This configuration adds a 'Do Something' command to the tab context menu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_7.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [{\n    \"command\": \"doSomething\",\n    \"title\": \"Do Something\"\n}],\n\"menus\": {\n    \"editor/title/context\": [\n        {\n            \"command\": \"doSomething\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Verbose Log Output for Keychain Backend Detection\nDESCRIPTION: This log snippet exemplifies the output generated when running VS Code with verbose logging for keychain issues. It shows the detected desktop environment (GNOME) and the specific backend (`GNOME_LIBSECRET`) selected by Chromium's `oscrypt` module for storing encryption keys. Analyzing this output helps understand how VS Code interacts with the system's keyring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n[9699:0626/093542.027629:VERBOSE1:key_storage_util_linux.cc(54)] Password storage detected desktop environment: GNOME\n[9699:0626/093542.027660:VERBOSE1:key_storage_linux.cc(122)] Selected backend for OSCrypt: GNOME_LIBSECRET\n```\n\n----------------------------------------\n\nTITLE: Defining SkipType for Optimized Collection Navigation\nDESCRIPTION: XML schema complex type that provides performance optimization for collection traversal by allowing the collection to skip quickly through large numbers of items. This element contains logic for efficient navigation to desired points in large collections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"SkipType\">\n    <xs:annotation>\n      <xs:documentation>\n        Specifies logic to skip a specified number of items in the collection. The skip logic is invoked\n        when the user scrolls in the watch window in order to quickly navigate the collection traversal down to the desired point. After the skip logic,\n        control will return to be start of the execution, but with iteration variables modified as needed to reflect the updated state.\n\n        The &lt;Skip&gt; element exist as an optional performance optimization to allow the collection traversal to skip through large numbers\n        of items quickly. If a &lt;Skip&gt; element is not specified, the expression evaluator will run the traversal logic when it needs to do\n        a skip until the desired number of &lt;Item&gt; elements have executed. Depending on the data structure of the underlying collection,\n        this may involve a significant amount of unnecessary computation.\n      </xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode_NoItem\" />\n    </xs:choice>\n\n    <xs:attribute name=\"Value\" type=\"CppIdType\" use=\"required\">\n      <xs:annotation>\n        <xs:documentation>\n          Name of the variable specifying the number of items to skip, as an unsigned 32-bit integer. If a &lt;Size&gt; element is specified,\n          the expression evaluator will never pass in a skip value that would cause the current index of the traversal to exceed the bounds of the collection.\n          If no &lt;Size&gt; element is specified, the skip value may be any arbitrary integer, and it is the responsibility of the &lt;Skip&gt; logic\n          to do any bounds checking necessary. In the event that it is not possible to skip over the full number of items requested, the &lt;Skip&gt; logic\n          should modify the value to the skip variable so that when execution completes, it contains the actual number of items skipped.\n        </xs:documentation>\n      </xs:annotation>\n    </xs:attribute>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown File Extension Style\nDESCRIPTION: JSON configuration values for markdown.preferredMdPathExtensionStyle setting to control how file extensions appear in Markdown links.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_76.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"auto\" // Preserve existing file extension style\n\"includeExtension\" // Include .md extension\n\"removeExtension\" // Remove .md extension\n```\n\n----------------------------------------\n\nTITLE: Defining Loop and Conditional Types for Collection Traversal Logic\nDESCRIPTION: XML schema complex type definitions for Loop and If elements in both Item and non-Item variants. These elements provide control flow mechanisms during collection traversal in debugger visualizations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"LoopType_NoItem\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute multiple times until a &lt;Break&gt; element is encountered, or an expression fails to evaluate.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode_NoItem\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n  </xs:complexType>\n\n\n  <xs:complexType name=\"LoopType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute multiple times until a &lt;Break&gt; element is encountered, or an expression fails to evaluate.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"IfType_NoItem\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute if a condition is true.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode_NoItem\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"IfType\">\n    <xs:annotation>\n      <xs:documentation>Specifies a block of instructions which will only execute if a condition is true.</xs:documentation>\n    </xs:annotation>\n\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:group ref=\"CustomListCode\" />\n    </xs:choice>\n\n    <xs:attributeGroup ref=\"CustomListCode_Attributes\" />\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Installing SVG Viewer Extension in Visual Studio Code\nDESCRIPTION: This snippet shows how to install the SVG Viewer extension using Visual Studio Code's Quick Open feature. It provides the keyboard shortcut for Quick Open and the extension installation command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/05/04/extension-roundup-may.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n>**Install:** Quick Open (`kb(workbench.action.quickOpen)`), paste `ext install vscode-svgviewer` and press `kbstyle(Enter)`.\n```\n\n----------------------------------------\n\nTITLE: Setting Pipenv Executable Path in VS Code Python\nDESCRIPTION: Specifies the path to the `pipenv` executable used for environment activation. The default value `\"pipenv\"` assumes the executable is available in the system's PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"pipenv\"\n```\n\n----------------------------------------\n\nTITLE: Editor Scroll Commands in VS Code\nDESCRIPTION: Options for scrolling editor content including direction, scroll units, and cursor reveal behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'up', 'down'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n```\n\n----------------------------------------\n\nTITLE: Invoking Go to References via Keyboard Shortcut in VS Code\nDESCRIPTION: Demonstrates the keyboard shortcut representation used in VS Code documentation to trigger the 'Go to References' command. Pressing this key combination (which varies by OS and user settings) selects a symbol and displays its references in a peek window.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cpp-ide.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nkb(editor.action.goToReferences)\n```\n\n----------------------------------------\n\nTITLE: Mouse + Key Modifier for Opening Editor to Side\nDESCRIPTION: Represents the action of holding the Alt key while clicking (Alt+Click) on an item (like in a custom tree) to open the corresponding editor to the side of the currently active one.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAlt+Click\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Extensions View\nDESCRIPTION: VS Code keyboard shortcut command for opening the Extensions view panel\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/remote-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.view.extensions)\n```\n\n----------------------------------------\n\nTITLE: Test Case for Null Handling\nDESCRIPTION: Unit test demonstrating handling of undefined user input in the getStatus function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/05/23/strict-null.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('should return empty status for undefined user', async () => {\n    assert.equals(getStatus(undefined), '');\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler File Change Detection Output\nDESCRIPTION: Example of tsc compiler output when detecting file changes, showing error messages and compilation status.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n12:32:35 PM - File change detected. Starting incremental compilation...\nsrc/messages.ts(276,9): error TS2304: Cannot find name 'candidate'.\n12:32:35 PM - Compilation complete. Watching for file changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Speech Language\nDESCRIPTION: Setting to control the speech language used by VS Code Speech extension. The default 'auto' uses the VS Code display language if supported.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\naccessibility.voice.speechLanguage\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to associate an external Cascading Style Sheet (CSS) file with the HTML document. The `rel=\"stylesheet\"` attribute specifies the relationship, `type=\"text/css\"` defines the MIME type, and `href=\"css/inproduct_releasenotes.css\"` provides the path to the CSS file responsible for styling the release notes content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Detection Override for Markdown Files\nDESCRIPTION: JSON configuration to disable automatic language detection specifically for Markdown files while keeping it enabled for other file types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.untitled.experimentalLanguageDetection\": true\n\"[markdown]\": { \"workbench.editor.untitled.experimentalLanguageDetection\": false }\n```\n\n----------------------------------------\n\nTITLE: Customizing GitHub Copilot Commit Message Generation in VS Code Settings\nDESCRIPTION: Shows how to override workspace settings to customize GitHub Copilot's commit message generation, making it more detailed and emoji-rich.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2025/03/26/custom-instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github.copilot.chat.commitMessageGeneration.instructions\": [\n    {\n      \"text\": \"Be extremely detailed with the file changes and the reason for the change. Use lots of emojis.\"\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Simple For Loop to Enhanced For Loop in Java\nDESCRIPTION: Demonstrates converting a simple for loop to an enhanced for-each style loop using the 'Convert to enhanced for loop' refactoring.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void order(String[] books) {\n  for (int i = 0; i < books.length; i++) {\n    // do something\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void order(String[] books) {\n  for (String book : books) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Codicon Icons HTML Implementation\nDESCRIPTION: HTML markup patterns for implementing VS Code's Codicon icons in web interfaces. Each snippet shows how to render a specific icon using the codicon CSS class system.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"codicon codicon-bracket-error\"></i>\n```\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"codicon codicon-bracket\"></i>\n```\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"codicon codicon-briefcase\"></i>\n```\n\n----------------------------------------\n\nTITLE: Creating Command Links with Arguments in VS Code Chat\nDESCRIPTION: Shows how to create command links that include encoded arguments as query parameters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/chat.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Encode the command arguments\nconst encodedArgs = encodeURIComponent(JSON.stringify(args));\n\n// Use command URIs with arguments to link to commands from Markdown\nlet markdownCommandString: vscode.MarkdownString = new vscode.MarkdownString(`[Use cat names](command:${CAT_NAMES_COMMAND_ID}?${encodedArgs})`);\nmarkdownCommandString.isTrusted = { enabledCommands: [ CAT_NAMES_COMMAND_ID ] };\n\nstream.markdown(markdownCommandString);\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll-to-Top Button and Release Notes Styles in HTML\nDESCRIPTION: This HTML snippet adds a scroll-to-top button for user navigation and links to an external CSS file for in-product release notes styling. It depends on the presence of the referenced CSS file (css/inproduct_releasenotes.css) for correct styling and may require accompanying JavaScript for the button functionality. The button is accessible with ARIA attributes and is intended for embedding in documentation or release notes pages to enhance UX; inputs and outputs are handled by the browser, with no dynamic logic in this snippet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a id=\\\"scroll-to-top\\\" role=\\\"button\\\" aria-label=\\\"scroll to top\\\" href=\\\"#\\\"><span class=\\\"icon\\\"></span></a>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/inproduct_releasenotes.css\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Token Spans with Metadata Classes in VS Code (HTML)\nDESCRIPTION: This HTML snippet demonstrates how tokens, after being processed by the tokenizer and mapped to metadata, are rendered in the editor as span elements with class names indicating both color and style. For example, 'mtk9 mtki' denotes token color index 9 with an italic font. This is the final step for displaying syntax-highlighted tokens on the web. No external dependencies are needed except correct CSS class definitions. Inputs are tokens with associated metadata; outputs are rendered, styled text spans.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"mtk9 mtki\">function</span>\n<span class=\"mtk1\">&nbsp;</span>\n<span class=\"mtk5\">f1</span>\n<span class=\"mtk1\">()&nbsp;{</span>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Remote-SSH Chat Participant in VS Code\nDESCRIPTION: This identifier (`@remote-ssh`) is used to invoke the Remote-SSH chat participant within VS Code's chat interface. This feature allows users to interact with the Remote-SSH extension through chat commands. Version 1.97 includes improvements to this participant.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_97.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n@remote-ssh\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript Syntax Error Reporting in VS Code\nDESCRIPTION: Shows how to disable the new JavaScript syntax error reporting feature introduced in VS Code 1.65. This setting can be useful if you prefer not to see these errors in your JavaScript files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"javascript.validate.enable\": false\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Reveal in Problems Panel\nDESCRIPTION: Demonstrates how to prevent the Problems panel from automatically revealing problems in the active file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"problems.autoReveal\": false\n```\n\n----------------------------------------\n\nTITLE: Supported Tokens for Docker Compose Down Command\nDESCRIPTION: This table lists the supported tokens for the Docker Compose Down command, including the configuration file and compose command tokens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Token | Description |\n| -- | -- |\n| `${configurationFile}` | Set to `-f` plus the workspace-relative path to the selected Docker Compose YAML file. |\n| `${composeCommand}` | Set to the value of the `docker.composeCommand` setting if set, otherwise the extension will try to automatically determine the command to use (`docker compose` or `docker-compose`). |\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Debugging in WSL with JSON\nDESCRIPTION: A debug configuration for launching and debugging Node.js applications in Windows Subsystem for Linux (WSL). The 'useWSL' flag configures the debugger to run in the Linux subsystem and correctly map paths between WSL and Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch in WSL\",\n    \"useWSL\": true,\n    \"program\": \"${workspaceFolder}/hello.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Legacy Dev Container Features to New Contributable Features\nDESCRIPTION: Shows the names of legacy Dev Container features (`maven`, `gradle`, `jupyterlab`) that have been refactored. These are now mapped to corresponding options within the newer, contributable features hosted at `ghcr.io/devcontainers/features/java` and `ghcr.io/devcontainers/features/python`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_77.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmaven\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngradle\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njupyterlab\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nghcr.io/devcontainers/features/java\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nghcr.io/devcontainers/features/python\n```\n\n----------------------------------------\n\nTITLE: Diff Editor View Settings\nDESCRIPTION: Configuration options for controlling the diff editor view mode and whitespace handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vNovember.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"diffEditor.renderSideBySide\": true,\n\"diffEditor.ignoreTrimWhitespace\": false\n```\n\n----------------------------------------\n\nTITLE: Creating a French Localization Bundle (bundle.l10n.fr.json)\nDESCRIPTION: This JSON snippet shows an example of a French localization file (`bundle.l10n.fr.json`). It maps the keys from the base `bundle.l10n.json` to their corresponding French translations. Comments included in the base bundle are not needed here, so the value is just the translated string.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"Hello\": \"Bonjour\",\n  \"Hello {0}\": \"Bonjour {0}\",\n  \"Hello {0}/This is a comment\": \"Bonjour {0}\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling ESLint for JavaScript in Visual Studio Code\nDESCRIPTION: Instructions for enabling ESLint for JavaScript linting in Visual Studio Code. Includes steps for installing ESLint and configuring VS Code settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_8_0.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"eslint.enable\": true\n```\n\nLANGUAGE: json\nCODE:\n```\n\"javascript.validate.enable\": false\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Console Log\nDESCRIPTION: Example TypeScript function with console output used to demonstrate folding range functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar(): void {\n  console.log('Hello World!');\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing to VS Code Remote Indicator Menu\nDESCRIPTION: This code demonstrates how to contribute items to the remote indicator menu in VS Code's status bar. It defines a menu entry and corresponding command that appears in the remote indicator dropdown, with specific group naming conventions for proper sorting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n    \"menus\": {\n        \"statusBar/remoteIndicator\": [\n        {\n          \"command\": \"remote-wsl.newWindow\",\n          \"when\": \"!remoteName && isWindows\",\n          \"group\": \"remote_10_wsl_0_local@1\"\n        }\n    ]},\n    \"commands\": [\n      {\n        \"command\": \"remote-wsl.newWindow\",\n        \"title\": \"New WSL Window\",\n        \"category\": \"Remote-WSL\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button using HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (<a>) functioning as a 'Scroll to top' button. It includes attributes like id, role, title, and aria-label for identification and accessibility. An empty span element with class 'icon' is nested, presumably for displaying an icon via CSS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Side-by-Side Rendering for Copilot NES (VS Code Setting)\nDESCRIPTION: Controls how larger Copilot Next Edit Suggestions (NES) are displayed. It can be set to 'auto' (default) to show side-by-side diff views if space allows, or 'never' to always show suggestions below the relevant code in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/ai-powered-suggestions.md#2025-04-23_snippet_8\n\nLANGUAGE: vscode-setting\nCODE:\n```\nsetting(editor.inlineSuggest.edits.renderSideBySide)\n```\n\n----------------------------------------\n\nTITLE: Linking Release Notes Stylesheet (HTML)\nDESCRIPTION: This HTML `link` tag imports an external Cascading Style Sheet (CSS) file located at `css/inproduct_releasenotes.css`. This stylesheet defines the visual appearance and layout for the in-product release notes page. It uses the `rel=\"stylesheet\"` and `type=\"text/css\"` attributes to specify its purpose and format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_92.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet Suggestions in Visual Studio Code JSON\nDESCRIPTION: JSON configuration to control how snippets appear in the suggestions widget. This setting allows removing snippets or specifying their order relative to other suggestions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/July_2016.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.snippetSuggestions\": \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Workspace Resources in Webview HTML (HTML)\nDESCRIPTION: Illustrates referencing resources from the user's workspace within webview HTML by using the 'vscode-workspace-resource:' URI scheme. This enables access to project-specific assets, such as images, from webview panels without file system access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<img src=\\\"vscode-workspace-resource:/Users/bob/projects/toast/images/welcome-bread-cat.gif\\\">\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to include an external CSS stylesheet named `inproduct_releasenotes.css`. The `rel='stylesheet'` attribute specifies the relationship, `type='text/css'` defines the MIME type (though often optional in HTML5), and `href` provides the path to the CSS file used for styling in-product release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_40.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: PHP Linter Configuration Settings\nDESCRIPTION: Settings for configuring the PHP linter executable path and run behavior in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vNovember.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"php.validate.executablePath\": \"/path/to/php\",\n\"php.validate.run\": \"onSave\"\n```\n\n----------------------------------------\n\nTITLE: Using Alpine-based Node.js Docker Image\nDESCRIPTION: Docker configuration using a minimal Alpine Linux-based Node.js image for smaller container size and faster deployments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\nFROM mhart\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippets Contribution in package.json\nDESCRIPTION: This snippet shows how to configure the contributes.snippets section in your extension's package.json file. It specifies the language the snippets apply to and the path to the snippets JSON file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/snippet-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"snippets\": [\n      {\n        \"language\": \"javascript\",\n        \"path\": \"./snippets.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Markdown Drop Behavior via Settings\nDESCRIPTION: Configuration setting to disable the automatic link creation when dropping files into a Markdown editor. Set to false to turn off this feature.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_67.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"markdown.editor.drop.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code File Watcher Exclusions\nDESCRIPTION: JSON configuration to exclude specific directories from VS Code's file watching system to reduce resource usage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"files.watcherExclude\": {\n    \"**/.git/objects/**\": true,\n    \"**/.git/subtree-cache/**\": true,\n    \"**/node_modules/*/**\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Management Commands\nDESCRIPTION: Command line interface examples for managing VS Code extensions, including listing installed extensions, installing new extensions, and uninstalling existing ones.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncode --list-extensions\ncode --install-extension ms-vscode.cpptools\ncode --uninstall-extension ms-dotnettools.csharp\n```\n\n----------------------------------------\n\nTITLE: Defining Task Run Options Interface in TypeScript\nDESCRIPTION: This interface defines the options for controlling when and how a task is executed in VS Code. It includes settings for variable re-evaluation and task run triggers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/tasks-appendix.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RunOptions {\n    /**\n     * Controls how variables are evaluated when a task is executed through\n     * the Rerun Last Task command.\n     * The default is `true`, meaning that variables will be re-evaluated when\n     * a task is rerun. When set to `false`, the resolved variable values from\n     * the previous run of the task will be used.\n     */\n    reevaluateOnRerun?: boolean;\n\n    /**\n     * Specifies when a task is run.\n     *\n     * Valid values are:\n     *   \"default\": The task will only be run when executed through the Run Task command.\n     *   \"folderOpen\": The task will be run when the containing folder is opened.\n     */\n    runOn?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for VS Code Extension Tests\nDESCRIPTION: This JavaScript snippet shows a simple configuration for VS Code extension tests using the @vscode/test-cli module. It defines the test files to run using a glob pattern.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/testing-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .vscode-test.js\nconst { defineConfig } = require('@vscode/test-cli');\n\nmodule.exports = defineConfig({ files: 'out/test/**/*.test.js' });\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry via Command Line\nDESCRIPTION: Illustrates the command-line interface (CLI) flag `--disable-telemetry` used to completely disable telemetry reporting in VS Code. The new `isTelemetryEnabled` API considers this flag.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--disable-telemetry\n```\n\n----------------------------------------\n\nTITLE: Implementing Workspace File Watching for Test Discovery in VS Code\nDESCRIPTION: Shows how to discover and monitor all files in the workspace that match a pattern. This implementation watches for file creation, modification, and deletion to keep the test explorer up to date.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function discoverAllFilesInWorkspace() {\n  if (!vscode.workspace.workspaceFolders) {\n    return []; // handle the case of no open folders\n  }\n\n  return Promise.all(vscode.workspace.workspaceFolders.map(async workspaceFolder => {\n    const pattern = new vscode.RelativePattern(workspaceFolder, '**/*.md');\n    const watcher = vscode.workspace.createFileSystemWatcher(pattern);\n\n    // When files are created, make sure there's a corresponding \"file\" node in the tree\n    watcher.onDidCreate(uri => getOrCreateFile(uri));\n    // When files change, re-parse them. Note that you could optimize this so\n    // that you only re-parse children that have been resolved in the past.\n    watcher.onDidChange(uri => parseTestsInFileContents(getOrCreateFile(uri)));\n    // And, finally, delete TestItems for removed files. This is simple, since\n    // we use the URI as the TestItem's ID.\n    watcher.onDidDelete(uri => controller.items.delete(uri.toString()));\n\n    for (const file of await vscode.workspace.findFiles(pattern)) {\n      getOrCreateFile(file);\n    }\n\n    return watcher;\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VS Code Module Version for Extension Security\nDESCRIPTION: Command to clear npm cache and reinstall dependencies to remove malicious code from extension development environments. Extension authors need to update the vscode module to version 1.1.22.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/11/26/event-stream.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm cache clean --force\n```\n\n----------------------------------------\n\nTITLE: Using VS Code API for Opening Resources\nDESCRIPTION: The `vscode.open` API command. Extension authors using the custom tree API should use this command for `TreeItem.command` to ensure correct preview mode behavior when users interact with tree items.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode.open\n```\n\n----------------------------------------\n\nTITLE: Excluding Node-Pty Components from Anti-Virus – File Path List\nDESCRIPTION: This plaintext snippet lists the critical node-pty files and executables that may be blocked by anti-virus software, causing the VS Code terminal to fail on Windows. Users should add these files to their anti-virus exclusion list to prevent interference with the terminal's winpty/conpty components. Required paths must be adjusted to the user's actual VS Code installation directory. Accurate exclusion of these files may resolve errors related to native exceptions or blocked terminal processes. There are no direct inputs or outputs, aside from changes in anti-virus policy.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/supporting/troubleshoot-terminal-launch.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{install_path}\\resources\\app\\node_modules.asar.unpacked\\node-pty\\build\\Release\\winpty.dll\n{install_path}\\resources\\app\\node_modules.asar.unpacked\\node-pty\\build\\Release\\winpty-agent.exe\n{install_path}\\resources\\app\\node_modules.asar.unpacked\\node-pty\\build\\Release\\conpty.node\n{install_path}\\resources\\app\\node_modules.asar.unpacked\\node-pty\\build\\Release\\conpty_console_list.node\n```\n\n----------------------------------------\n\nTITLE: WASI Compilation Command\nDESCRIPTION: Shell command to compile C code into WebAssembly using the WASI SDK clang compiler.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/06/05/vscode-wasm-wasi.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nclang hello.c -o ./hello.wasm\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio Code from Command Prompt\nDESCRIPTION: Shows how to launch VS Code from the command prompt using the 'code' command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/27/containers-edu.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncode\n```\n\n----------------------------------------\n\nTITLE: Defining In-product Release Notes Scroll-to-top Button - HTML\nDESCRIPTION: This HTML snippet creates a scroll-to-top button using an anchor element with accessibility attributes and icon span. It aids in documentation navigation, specifically for release notes pages. No dependencies are needed besides the referenced inproduct_releasenotes.css for style; expected behavior is that clicking the button scrolls the content to the top, usually controlled by JavaScript elsewhere.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<a id=\\\"scroll-to-top\\\" role=\\\"button\\\" aria-label=\\\"scroll to top\\\" href=\\\"#\\\"><span class=\\\"icon\\\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Edit and Delete Flags in VS Code API (TypeScript)\nDESCRIPTION: Introduces new proposed flags for `Comment` objects within the VS Code API. These flags (`canEdit` and `canDelete`) indicate whether a specific comment supports editing or deletion, controlling the visibility of corresponding UI actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Definitions available at: https://github.com/microsoft/vscode/blob/513025ed9e97c2fc04721d435bd88e5b4a2269ad/src/vs/vscode.proposed.d.ts#L724-L738\n// Represents the concept described in the text.\ninterface Comment {\n    // ... existing properties ...\n\n    /**\n     * Whether the comment can be edited.\n     * If not provided, the comment provider's `editComment` method will be checked.\n     */\n    canEdit?: boolean;\n\n    /**\n     * Whether the comment can be deleted.\n     * If not provided, the comment provider's `deleteComment` method will be checked.\n     */\n    canDelete?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving VS Code Configuration JSON\nDESCRIPTION: Example URL for accessing the JSON file containing VS Code's configuration metadata, including setting names, descriptions, types, and default values. This file is generated during each build and uploaded to Azure Storage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/04/25/bing-settings-search.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://ticino.blob.core.windows.net/configuration/123000832/c1cd4378c5e5dc434ed959e13556d05240a8ca18/configuration.json\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Workspace Snippet in JSON\nDESCRIPTION: Example of creating a custom snippet that includes the workspace name variable for JavaScript and TypeScript files\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"header\": {\n  \"scope\": \"javascript,typescript\",\n  \"prefix\": \"workspace\",\n  \"body\": [\"// the ${WORKSPACE_NAME}-project\"],\n  \"description\": \"Log output to console\"\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Marketplace Presentation\nDESCRIPTION: Configuration for extension marketplace presentation including icon and banner settings for visual appeal.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"images/icon.png\",\n  \"galleryBanner\": {\n    \"color\": \"#C80000\",\n    \"theme\": \"dark\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Insiders as a Linux Snap Package\nDESCRIPTION: Command for installing the VS Code Insiders snap package on Linux. The Insiders version provides daily updates without any extra work required from the user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install code-insiders --classic\n```\n\n----------------------------------------\n\nTITLE: Handling Document Diagnostics in VS Code Extensions\nDESCRIPTION: TypeScript code showing how to clear diagnostics when a document is closed using the VS Code language server protocol.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndocuments.onDidClose((event) => {\n  connection.sendDiagnostics({ uri: event.document.uri, diagnostics: [] });\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Link and Anchor Elements\nDESCRIPTION: HTML code for a scroll-to-top button with accessibility attributes and a CSS stylesheet link.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Empty Editor Group Closing in VS Code\nDESCRIPTION: Custom keyboard shortcut configuration to navigate between editor history. Pressing Ctrl+Tab will show a list of all opened editors from history, regardless of the active editor group.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/userinterface.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"ctrl+tab\", \"command\": \"workbench.action.openPreviousEditorFromHistory\" },\n{ \"key\": \"ctrl+tab\", \"command\": \"workbench.action.quickOpenNavigateNext\", \"when\": \"inQuickOpen\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Inline Values in VS Code JSON Settings\nDESCRIPTION: JSON configuration for enabling the experimental feature to show variable values inline in the source code while debugging in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"debug.inlineValues\": true\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Pack Dependencies in package.json\nDESCRIPTION: JSON snippet showing how to include extensions in an Extension Pack's manifest file (package.json). The 'extensionPack' array lists the extensions to be included.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/03/07/extension-pack-roundup.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\"extensionPack\": [\n        \"publisherid.extensionName\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Displaying Codicon Icons in HTML\nDESCRIPTION: This snippet demonstrates how to use the 'codicon' class to display icons in HTML. Each row shows an icon with its corresponding class name and description.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-root-folder\"></i>\n```\n\n----------------------------------------\n\nTITLE: Chat Participant API TypeScript Definition Reference\nDESCRIPTION: Reference to the TypeScript definition file for VS Code's chat participant API, which allows extensions to contribute AI chat participants.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/11/13/vscode-copilot-smarter.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.proposed.chatParticipant.d.ts\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in VS Code Launch Files\nDESCRIPTION: Example showing how to reference environment variables in launch.json and tasks.json files using ${env:Name} syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vNovember.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n${env:PATH}\n```\n\n----------------------------------------\n\nTITLE: CSS Theme Rules Generation\nDESCRIPTION: Generated CSS rules for matching approximated scopes in VS Code 1.8.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n...\n/* Function name */\n.entity.name.function { color: #A6E22E; }\n...\n/* Class name */\n.entity.name.class { color: #A6E22E; text-decoration: underline; }\n...\n```\n\n----------------------------------------\n\nTITLE: HTML Encoding Example\nDESCRIPTION: Example of HTML document with embedded JavaScript that demonstrates encoding issues when handling embedded languages. Shows invalid HTML due to unescaped script content.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/embedded-languages.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<SCRIPT type=\"text/javascript\">\n  document.write (\"<EM>This won't work</EM>\")\n</SCRIPT>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Proxy Usage for Remote Extensions in VS Code\nDESCRIPTION: This setting key (`http.useLocalProxyConfiguration`) represents a VS Code configuration option that determines whether remote extensions should use the local machine's proxy settings. Its default behavior varies based on the type of remote connection (WSL, Dev Containers, Remote-SSH, Remote-Tunnels).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_97.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(http.useLocalProxyConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Additional Supported Tokens for All Command Templates\nDESCRIPTION: This table provides information on additional tokens supported in all command templates, including workspace folder, configuration settings, environment variables, and command return values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Token | Description |\n| -- | -- |\n| `${workspaceFolder}` | The selected workspace folder path. |\n| `${config:some.setting.identifier}` | The value of any configuration setting, as long as it is a string, number, or boolean. These setting identifiers can be arbitrarily defined and do not need to belong to Visual Studio Code or to any extension. |\n| `${env:Name}` | The value of an environment variable. |\n| `${command:commandID}` | The string return value of a command. |\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings URL Example - Bash\nDESCRIPTION: URL protocol format for directly opening specific settings in the VS Code Settings Editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/command-line.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvscode://settings/setting.name\n\nvscode://settings/editor.wordWrap\n```\n\n----------------------------------------\n\nTITLE: Extension Command for Installing vsce\nDESCRIPTION: NPM installation command for the renamed VS Code extension manager tool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_74.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @vscode/vsce\n```\n\n----------------------------------------\n\nTITLE: Configuring User in Docker Compose\nDESCRIPTION: YAML configuration for setting the default user in a Docker Compose service.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser: user-name-or-UID-goes-here\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Opening Settings in VS Code\nDESCRIPTION: This code snippet represents a keyboard shortcut for opening the Settings editor in Visual Studio Code. It's used within the markdown to provide a quick reference for users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`kb(workbench.action.openSettings)`\n```\n\n----------------------------------------\n\nTITLE: Simple Theme Definition JSON\nDESCRIPTION: Example of a simple theme definition with various scope rules and styling properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\ntheme = [\n  {                                  \"foreground\": \"#F8F8F2\"                           },\n  { \"scope\": \"var\",                  \"foreground\": \"#F8F8F2\"                           },\n  { \"scope\": \"var.identifier\",       \"foreground\": \"#00FF00\", \"fontStyle\": \"bold\"      },\n  { \"scope\": \"meta var.identifier\",  \"foreground\": \"#0000FF\"                           },\n  { \"scope\": \"constant\",             \"foreground\": \"#100000\", \"fontStyle\": \"italic\"    },\n  { \"scope\": \"constant.numeric\",     \"foreground\": \"#200000\"                           },\n  { \"scope\": \"constant.numeric.hex\",                          \"fontStyle\": \"bold\"      },\n  { \"scope\": \"constant.numeric.oct\",                          \"fontStyle\": \"underline\" },\n  { \"scope\": \"constant.numeric.dec\", \"foreground\": \"#300000\"                           },\n];\n```\n\n----------------------------------------\n\nTITLE: HTML Token Rendering\nDESCRIPTION: Shows how tokens are rendered to HTML with appropriate CSS classes for styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <span class=\"token keyword js\">function</span>\n  <span class=\"token\">&nbsp;</span>\n  <span class=\"token identifier js\">f1</span>\n  <span class=\"token delimiter paren js\">(</span>\n  <span class=\"token delimiter paren js\">)</span>\n  <span class=\"token\">&nbsp;</span>\n  <span class=\"token delimiter curly js\">{</span>\n```\n\n----------------------------------------\n\nTITLE: Modifier Key (macOS) for Conditional Editor Splitting\nDESCRIPTION: Represents the Shift key on macOS. Holding Shift during a drag-and-drop operation conditionally toggles the editor group splitting behavior defined by the `workbench.editor.splitOnDragAndDrop` setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nkbstyle(Shift)\n```\n\n----------------------------------------\n\nTITLE: Running Web Extension Tests with Test Data in JavaScript\nDESCRIPTION: Demonstrates how to use the @vscode/test-web module to run web extension tests with custom test data. The command specifies the browser type, extension development path, and test data location.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_4\n\nLANGUAGE: shellscript\nCODE:\n```\nvscode-test-web --browserType=chromium --extensionDevelopmentPath=$extensionLocation $testDataLocation\n```\n\n----------------------------------------\n\nTITLE: New VS Code Commands Table\nDESCRIPTION: Table showing new keyboard commands added for diff editor focus control, including primary side, secondary side, and other side focus commands.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                                               | Command                                       | Command ID                                    |\n| ------------------------------------------------- | --------------------------------------------- | --------------------------------------------- |\n| `kb(workbench.action.compareEditor.focusPrimarySide)`  | Focus Primary Side in Diff Editor | `workbench.action.compareEditor.focusPrimarySide`  |\n| `kb(workbench.action.compareEditor.focusSecondarySide)` | Focus Secondary Side in Diff Editor | `workbench.action.compareEditor.focusSecondarySide` |\n| `kb(workbench.action.compareEditor.focusOtherSide)` | Focus Other Side in Diff Editor | `workbench.action.compareEditor.focusOtherSide` |\n```\n\n----------------------------------------\n\nTITLE: Defining Default Monospace Fonts in CSS for Different Operating Systems\nDESCRIPTION: CSS snippet defining platform-specific monospace font stacks for VS Code UI. It sets different font preferences for macOS, Windows, and Linux platforms using CSS custom properties.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.mac { --monaco-monospace-font: \"SF Mono\", Monaco, Menlo, Courier, monospace; }\n.windows { --monaco-monospace-font: Consolas, \"Courier New\", monospace; }\n.linux { --monaco-monospace-font: \"Ubuntu Mono\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Courier New\", monospace; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor Style in VS Code Settings\nDESCRIPTION: This setting allows customization of the editor's cursor appearance. Setting `editor.cursorStyle` to `\"block\"` changes the cursor from the default line style to a block style. Other styles might also be available.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"editor.cursorStyle\": \"block\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure and Opening VS Code in Bash\nDESCRIPTION: Creates a standard project directory structure (`projects/helloworld`), navigates into the project folder, and then opens Visual Studio Code in the context of that folder, establishing it as the workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir projects\ncd projects\nmkdir helloworld\ncd helloworld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unbalanced Brackets Example 1\nDESCRIPTION: Shows an example text snippet used to explain bracket matching logic where `}` at [2] is an unopened bracket, and `(` at [1] matches `)` at [3]. This example, discussed in the context of anchor sets for error recovery, demonstrates a scenario before an insertion changes the pairings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/09/29/bracket-pair-colorization.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n( [1]\n} [2]\n) [3]\n```\n\n----------------------------------------\n\nTITLE: HTML Scroll-to-Top Button with CSS Link\nDESCRIPTION: HTML code for a scroll-to-top button with accessibility attributes and a linked CSS stylesheet for in-product release notes styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Workspace Configuration\nDESCRIPTION: Setting to specify a workspace-relative TypeScript version using the typescript.tsdk configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vNovember.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.tsdk\": \"path/to/typescript\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code Settings for Node.js and JavaScript Education\nDESCRIPTION: JSON configuration for Visual Studio Code settings recommended for teaching Node.js and JavaScript. Includes formatting, linting, and language-specific settings to ensure consistent code style and enhance the learning experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/learn/educators/nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"editor.formatOnPaste\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.tabCompletion\": \"on\",\n    \"editor.tabSize\": 2,\n    \"eslint.format.enable\": true,\n    \"eslint.workingDirectories\": [{ \"mode\": \"auto\" }],\n    \"files.autoSave\": \"onFocusChange\",\n    \"prettier.endOfLine\": \"auto\",\n    \"prettier.semi\": false,\n    \"prettier.singleQuote\": true,\n    \"prettier.trailingComma\": \"none\",\n    \"tabnine.experimentalAutoImports\": true,\n\n    \"javascript.format.insertSpaceBeforeFunctionParenthesis\": false,\n    \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n    \"typescript.format.insertSpaceBeforeFunctionParenthesis\": false,\n    \"typescript.updateImportsOnFileMove.enabled\": \"always\",\n    \"[javascript]\": {\n    \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"\n    },\n    \"[typescript]\": {\n    \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"\n    },\n    \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[css]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[scss]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    },\n    \"[markdown]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Architecture for macOS M1 in Visual Studio Code Debug Settings\nDESCRIPTION: This snippet demonstrates how to set the target architecture for debugging on macOS M1 machines, which can be necessary to match the debugger architecture with the process being debugged.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/csharp/debugger-settings.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n    \"targetArchitecture\": \"arm64\"\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Project Directory\nDESCRIPTION: Terminal commands to create a new directory for the Hello World project and launch VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir HelloWorld\ncd HelloWorld\ncode .\n```\n\n----------------------------------------\n\nTITLE: Installing Debugger for Edge Extension in Visual Studio Code\nDESCRIPTION: This snippet demonstrates how to install the Debugger for Edge extension using Visual Studio Code's Quick Open feature. It uses a keyboard shortcut to open Quick Open, then provides the extension installation command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/05/04/extension-roundup-may.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>**Install:** From within Visual Studio Code, you can use Quick Open (`kb(workbench.action.quickOpen)`) and paste `ext install debugger-for-edge` then press `kbstyle(Enter)`.\n```\n\n----------------------------------------\n\nTITLE: Implementing setKeysForSync for User State Preservation in VS Code Extensions\nDESCRIPTION: This code demonstrates how to preserve user state across different machines using the Settings Sync feature. It shows how to track version information globally, set keys for synchronization, and update state based on version comparisons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-capabilities/common-capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// on activate\nconst versionKey = 'shown.version';\ncontext.globalState.setKeysForSync([versionKey]);\n\n// later on show page\nconst currentVersion = context.extension.packageJSON.version;\nconst lastVersionShown = context.globalState.get(versionKey);\nif (isHigher(currentVersion, lastVersionShown)) {\n    context.globalState.update(versionKey, currentVersion);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Styling for Input Form in Django\nDESCRIPTION: Adds a CSS rule to make the input form wider by setting the width of the message input field to 80%.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\ninput[name=message] {\n    width: 80%;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Item Quantities with Redis in FastAPI\nDESCRIPTION: A FastAPI route that removes a specified quantity of an item. If the resulting quantity is zero or less, it deletes the item completely. Otherwise, it decrements the quantity and returns a success message.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-fastapi.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/items/{item_id}/{quantity}\")\ndef remove_quantity(item_id: int, quantity: int) -> dict[str, str]:\n    if not redis_client.hexists(f\"item_id:{item_id}\", \"item_id\"):\n        raise HTTPException(status_code=404, detail=\"Item not found.\")\n\n    item_quantity: str | None = redis_client.hget(f\"item_id:{item_id}\", \"quantity\")\n\n    # if quantity to be removed is higher or equal to item's quantity, delete the item\n    if item_quantity is None:\n        existing_quantity: int = 0\n    else:\n        existing_quantity: int = int(item_quantity)\n    if existing_quantity <= quantity:\n        item_name: str | None = redis_client.hget(f\"item_id:{item_id}\", \"item_name\")\n        redis_client.hdel(\"item_name_to_id\", f\"{item_name}\")\n        redis_client.delete(f\"item_id:{item_id}\")\n        return {\"result\": \"Item deleted.\"}\n    else:\n        redis_client.hincrby(f\"item_id:{item_id}\", \"quantity\", -quantity)\n        return {\"result\": f\"{quantity} items removed.\"}\n```\n\n----------------------------------------\n\nTITLE: RenameProvider2 Interface in TypeScript\nDESCRIPTION: Proposed extension to RenameProvider allowing extensions to provide additional rename information, including the range of the symbol to rename and the initial name shown when a user triggers rename.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenameInitialValue {\n  range: Range;\n  text?: string;\n}\n\nexport interface RenameProvider2 extends RenameProvider {\n  resolveInitialRenameValue?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<RenameInitialValue>;\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Debug Toolbar Commands in VS Code Extension\nDESCRIPTION: Example package.json configuration for an extension to contribute custom commands to the VS Code debug toolbar. This snippet shows how to add a 'Hot Reload' button for Dart debugging sessions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"contributes\": {\n  \"commands\": [\n    {\n      \"command\": \"dart.hotReload\",\n      \"title\": \"Hot Reload\",\n      \"icon\": {\n        \"dark\": \"./media/hot_reload_inverse.svg\",\n        \"light\": \"./media/hot_reload.svg\"\n      }\n    }\n  ],\n  \"menus\": {\n    \"debug/toolbar\": [\n      {\n        \"command\": \"dart.hotReload\",\n        \"when\": \"debugType == dart\",\n        \"group\": \"dart\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for VS Code Extensions\nDESCRIPTION: TSConfig settings for VS Code extension development using TypeScript 2.0.3, including module, target, and compiler options.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"target\": \"ES6\",\n        \"outDir\": \"out\",\n        \"lib\": [\n            \"ES6\"\n        ],\n        \"sourceMap\": true,\n        \"rootDir\": \".\"\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \".vscode-test\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Peek View Colors in VS Code\nDESCRIPTION: Color configuration options for peek view UI elements, including borders, backgrounds, and highlighting colors for the peek view editor and result list.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- `peekView.border`: Color of the peek view borders and arrow.\n- `peekViewEditor.background`: Background color of the peek view editor.\n- `peekViewEditorGutter.background`: Background color of the gutter in the peek view editor.\n- `peekViewEditor.matchHighlightBackground`: Match highlight color in the peek view editor.\n- `peekViewEditor.matchHighlightBorder`: Match highlight border color in the peek view editor.\n- `peekViewResult.background`: Background color of the peek view result list.\n- `peekViewResult.fileForeground`: Foreground color for file nodes in the peek view result list.\n- `peekViewResult.lineForeground`: Foreground color for line nodes in the peek view result list.\n- `peekViewResult.matchHighlightBackground`: Match highlight color in the peek view result list.\n- `peekViewResult.selectionBackground`: Background color of the selected entry in the peek view result list.\n- `peekViewResult.selectionForeground`: Foreground color of the selected entry in the peek view result list.\n- `peekViewTitle.background`: Background color of the peek view title area.\n- `peekViewTitleDescription.foreground`: Color of the peek view title info.\n- `peekViewTitleLabel.foreground`: Color of the peek view title.\n- `peekViewEditorStickyScroll.background`: Background color of sticky scroll in the peek view editor.\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Extension Download in VS Code\nDESCRIPTION: Setting to configure VS Code to always download extensions locally when installing in a remote window. This improves extension management in remote development scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_41.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.downloadExtensionsLocally\": true\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Sections in YAML for VS Code Documentation\nDESCRIPTION: This snippet shows how to structure a section in the table of contents YAML file for VS Code documentation. It demonstrates the format for defining a section with multiple topics, including the section name, area, and list of topics with their display titles and file paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    {\n      \"name\": \"Getting Started\",\n      \"area\": \"getstarted\",\n      \"topics\": [\n        [\"VS Code Tutorial\", \"/docs/getstarted/getting-started\"],\n        [\"Copilot Quickstart\", \"/docs/getstarted/copilot-quickstart\"]\n      ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Running Yeoman VS Code Extension Generator\nDESCRIPTION: Command to run the Yeoman VS Code extension generator for creating a new Extension Pack.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/03/07/extension-pack-roundup.md#2025-04-23_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyo code\n```\n\n----------------------------------------\n\nTITLE: Illustrating GitHub Copilot Chat Feature Suggestion in VS Code Dev Containers\nDESCRIPTION: This markdown snippet displays an image showing how GitHub Copilot Chat suggests features when configuring Dev Containers in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_87.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![GitHub Copilot Chat feature suggestion](images/1_87/devcontainer-copilot-features.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Smooth Scrolling\nDESCRIPTION: Configuration setting to enable smooth scrolling animation in the integrated terminal to help track location after scrolling, similar to editor and lists behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.smoothScrolling\": true\n```\n\n----------------------------------------\n\nTITLE: Handling Extension Host Messages\nDESCRIPTION: TypeScript code for handling messages from renderer in the extension host.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageChannel = notebooks.createRendererMessaging('output-editor-renderer');\nmessageChannel.onDidReceiveMessage((e) => {\n  if (e.message.request === 'showEditor'){\n    // Launch the editor for the output identified by `e.message.data`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Tasks for Web Extension Development in JSON\nDESCRIPTION: This task configuration is used to compile the web extension using webpack. It defines an npm script task that runs in the background and uses a problem matcher to parse webpack output.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"watch-web\",\n      \"group\": \"build\",\n      \"isBackground\": true,\n      \"problemMatcher\": [\n        \"$ts-webpack-watch\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Formatter as Separate Command in TypeScript (Not Recommended)\nDESCRIPTION: This snippet demonstrates an incorrect way to implement a formatter by creating a separate command. It uses the vscode.commands.registerCommand API to format a 'foo-lang' file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/11/15/formatters-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 👎 formatter implemented as separate command\nvscode.commands.registerCommand('extension.format-foo', () => {\n    const {activeTextEditor} = vscode.window;\n\n    if (activeTextEditor && activeTextEditor.document.languageId === 'foo-lang') {\n        const {document} = activeTextEditor;\n        const firstLine = document.lineAt(0);\n\n        if (firstLine.text !== '42') {\n            const edit = new vscode.WorkspaceEdit();\n            edit.insert(document.uri, firstLine.range.start, '42\\n');\n\n            return vscode.workspace.applyEdit(edit)\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Validation\nDESCRIPTION: JSON configuration to disable VS Code's default CSS validation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/css.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"css.validate\": false\n```\n\n----------------------------------------\n\nTITLE: Creating a Scroll-to-Top Button in HTML\nDESCRIPTION: This HTML snippet defines an anchor (`<a>`) tag styled as a button (`role=\"button\"`) to implement a \"scroll to top\" functionality. It has the ID `scroll-to-top`, an accessibility label `aria-label=\"scroll to top\"`, and likely uses JavaScript (not shown) triggered by the `href=\"#\"` or the ID to perform the scrolling action. It contains an empty `<span>` with the class `icon`, presumably styled via CSS to display a visual indicator.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_27.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a id=\\\"scroll-to-top\\\" role=\\\"button\\\" aria-label=\\\"scroll to top\\\" href=\\\"#\\\"><span class=\\\"icon\\\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Command Palette\nDESCRIPTION: VS Code keyboard shortcut command for opening the Command Palette\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/remote-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.showCommands)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Window Load in TypeScript\nDESCRIPTION: This snippet demonstrates adding an event listener to the window's 'load' event and logging a message to the console. It's used as an example to show data compression between VS Code and remote machines.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_53.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.addEventListener('load', function() {\n    console.log(`hello world!`);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactive Window Save Prompts\nDESCRIPTION: Setting to enable prompts for saving content in an Interactive Window when it is closed, to prevent data loss. Currently only supports .ipynb file format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ninteractiveWindow.promptToSaveOnClose\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Tag Definition\nDESCRIPTION: HTML markup defining anchor points for documentation navigation, creating a section header with specific IDs for automated test setup documentation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2 id=\"automated-test-setup-override\"><div id=\"_automated-test-setup-override\"/></h2>\n```\n\n----------------------------------------\n\nTITLE: Handling Error Output in VS Code Notebooks\nDESCRIPTION: Demonstrates error output handling in notebook cells using try-catch and the NotebookCellOutputItem API\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    /* Some code */\n} catch (error) {\n    vscode.NotebookCellOutputItem.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default External URI Opener in settings.json\nDESCRIPTION: Sets a default external URI opener for a specific localhost port using the workbench.externalUriOpeners setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_53.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.externalUriOpeners\": {\n  \"localhost:8081\": \"myExtension.opener\"\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Default Build Task Marker in tasks.json\nDESCRIPTION: Shows the JSON fragment within a `tasks.json` file that marks a task as the default build task. The `group` object with `kind: \"build\"` and `isDefault: true` signifies this.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-linux.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n    },\n```\n\n----------------------------------------\n\nTITLE: Optimized Token Encoding with Map\nDESCRIPTION: Demonstrates the memory-optimized token representation using a map for token types and numeric encoding for positions and types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//     0        1               2                  3                      4\nmap = ['', 'keyword.js', 'identifier.js', 'delimiter.paren.js', 'delimiter.curly.js'];\ntokens = [\n    { startIndex:  0, type: 1 },\n    { startIndex:  8, type: 0 },\n    { startIndex:  9, type: 2 },\n    { startIndex: 11, type: 3 },\n    { startIndex: 12, type: 3 },\n    { startIndex: 13, type: 0 },\n    { startIndex: 14, type: 4 },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining an Imported Host Function in WIT\nDESCRIPTION: This WIT snippet defines an imported function `log` within the `calculator` world. This signifies that the WebAssembly module expects the host environment (VS Code extension) to provide an implementation for this function, which takes a string message as input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_4\n\nLANGUAGE: wit\nCODE:\n```\n```wit\nworld calculator {\n\n\t/// ....\n\n\t/// A log function implemented on the host side.\n\timport log: func(msg: string);\n\n\t/// ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Watch Task in tasks.json\nDESCRIPTION: JSON configuration for setting up a TypeScript compiler task in watch mode. Defines a task that continuously monitors TypeScript files for changes and recompiles them automatically, using the standard TypeScript watch problem matcher.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_9_0.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"version\": \"0.1.0\",\n\t\"command\": \"tsc\",\n\t\"isShellCommand\": true,\n\t// define the task to be a watching task\n\t\"isWatching\": true,\n\t// use the standard tsc in watch mode problem matcher to find compile problems in the output.\n\t\"problemMatcher\": \"$tsc-watch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating File Extensions with Languages - VS Code JSON\nDESCRIPTION: This snippet demonstrates how to extend Visual Studio Code's file language associations by mapping specific file extensions (\\\".php4\\\", \\\".php5\\\") to the PHP language in the global or workspace settings. Requires knowledge of VS Code settings and JSON syntax. Key parameters include the glob matching patterns as property names and the target language as the value. It enables correct syntax highlighting for additional file extensions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files.associations\": {\n        \"*.php4\": \"php\",\n        \"*.php5\": \"php\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Dev Container\nDESCRIPTION: Example of running a Cargo command inside the dev container using the exec command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/05/18/dev-container-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer exec --workspace-folder <path-to-vscode-remote-try-rust> cargo run\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Folder Sort Order in VS Code Settings\nDESCRIPTION: This snippet shows the configuration for sorting SSH folders in the Remote Explorer. The new setting 'remote.SSH.foldersSortOrder' allows users to choose between alphabetical sorting or sorting by most recently opened.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_62.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![SSH Folder Sorting Setting in Settings Editor](images/1_62/ssh-folder-sorting-setting.png)\n```\n\n----------------------------------------\n\nTITLE: Contributing a View Container to the Panel - VS Code Extension Manifest - JSON\nDESCRIPTION: This snippet demonstrates how to contribute a new view container panel (named \\\"Package Explorer\\\") to Visual Studio Code via the extension manifest (package.json). It requires the extension to declare a \\\"contributes.viewsContainers.panel\\\" block, specifying attributes such as \\\"id\\\", \\\"title\\\", and \\\"icon\\\". The main parameter is the panel's ID, which is used for reference elsewhere. The input is the JSON block inserted into package.json; the output is a new panel icon and entry in the user interface. The icon path must resolve at runtime, and the feature is currently considered preview (APIs may change).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"viewsContainers\": {\n      \"panel\": [\n        {\n          \"id\": \"package-explorer\",\n          \"title\": \"Package Explorer\",\n          \"icon\": \"media/dep.svg\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Extensions Use Cases Table in Markdown\nDESCRIPTION: A markdown table showing different types of developers, descriptions of their roles, and recommended Azure extensions for their use cases.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type of Developer|Description|When to use|\n|----------------------|---------------------|-------------|\n|Fullstack developer|Developers who work on both frontend and backend aspects of apps.|If you're building a web app with both frontend and backend components, use these extensions to deploy and manage the entire stack on Azure.</br></br> **Azure Container Apps** creates or manages containerized apps that handle different parts of your stack.</br> **Azure Functions** creates serverless functions to handle backend tasks and integrate with frontend apps.</br> **Azure App Service** deploys complete web solutions, including dynamic backend services, APIs, and server-side logic.|\n|Backend developer|Developers who build microservices architectures and use containers to encapsulate/manage individual microservices.|When developing microservices, backend logic, or APIs for your application, these tools provide the ability to scale effortlessly without managing infrastructure.</br></br>**Azure Container Apps** handles server-side logic, APIs, and microservices.</br> **Azure Functions** handles server-side logic and APIs.</br> **Azure Container Apps** deploys and manages containerized backend services.</br> **Azure Functions** allows you to build scalable, event-driven backend services without the need to manage any infrastructure.</br> **Azure App Service** allows you to deploy RESTful APIs, microservices, and other backend components.|\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Resource Parameters for Fine-tuning in JSON\nDESCRIPTION: JSON file containing parameters for bicep templates used in provisioning Azure resources for fine-tuning AI models.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/finetune.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"infra/provision/finetuning.parameters.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family for Chinese Characters\nDESCRIPTION: JSON configuration to set font family settings for proper display of Chinese characters in Ubuntu.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n    \"editor.fontFamily\": \"Droid Sans Mono, Droid Sans Fallback\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Settings with Inline Code Blocks\nDESCRIPTION: Examples of Visual Studio Code settings used within the documentation as inline code blocks, including accessibility signals and workbench editor customization settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\naccessibility.signals.voiceRecordingStarted\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript workspaceSymbols Setting in VS Code\nDESCRIPTION: This setting controls whether symbols from node_modules are excluded from workspace symbol search. Setting to false reverts to including all symbols in the project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"typescript.workspaceSymbols.excludeLibrarySymbols\": false\n```\n\n----------------------------------------\n\nTITLE: JavaScript Template String Example\nDESCRIPTION: Example showing ES6 template string usage where autoclose behavior is disabled.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-configuration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6's Template String\n`ES6's Template String`;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Hosts via SSH Command - Bash\nDESCRIPTION: This snippet demonstrates how to initiate a Secure Shell (SSH) connection from a terminal or PowerShell window to a remote host using a username and hostname. The second command is specific to Windows domain or Azure Active Directory accounts. The SSH client must be installed on the local machine, and the target host should have an accessible SSH server. Replace 'user', 'domain', and 'hostname' with appropriate values. Successful authentication opens a remote shell session; authentication failures or misconfigured SSH may result in connection errors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh user@hostname\n# Or for Windows when using a domain / AAD account\nssh user@domain@hostname\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Express Application with Pug Template Engine in Bash\nDESCRIPTION: This snippet invokes the global 'express' command to generate a new Express.js application named 'myExpressApp', specifying the Pug view engine for server-side rendering of templates. Dependencies: Node.js, npm, and express-generator (installed globally), with the current working directory as the target for the new application folder. Inputs: Application name ('myExpressApp'), and '--view pug' for template configuration. Outputs: a directory populated with Express.js starter files and configuration. Limitations: Existing directories may be overwritten, and only a supported set of view engines may be specified.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexpress myExpressApp --view pug\n```\n\n----------------------------------------\n\nTITLE: Rendering Scroll-to-Top Button with Accessibility Attributes in HTML\nDESCRIPTION: This HTML snippet implements a scroll-to-top button using an anchor tag with accessibility features, such as role and aria-label. The button uses a class 'icon' for styling and is intended to improve user interface navigation, particularly in documentation pages with long content. There are no external dependencies for basic functionality, but custom CSS for the '.icon' class may be needed for proper display.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_34.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Alert Function Example\nDESCRIPTION: Sample JavaScript code demonstrating a fancy alert function with conditional logic.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({ div: foo });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tabs in Visual Studio Code Settings\nDESCRIPTION: Shows how to disable the new tabbed editor interface via a configuration setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editor.showTabs\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Save Delay in VS Code Settings\nDESCRIPTION: This setting (`files.autoSaveDelay`) specifies the delay in milliseconds before a dirty file is saved when `files.autoSave` is set to `afterDelay`. It must be configured in `settings.json`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"files.autoSaveDelay\": <milliseconds>\n```\n\n----------------------------------------\n\nTITLE: Docker File Generation Command Example\nDESCRIPTION: Example of using a Docker chat participant with a slash command to generate a Dockerfile.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/11/13/vscode-copilot-smarter.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@docker /generate a DOCKERFILE for workspace\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Watch Mode Output\nDESCRIPTION: Example output from TypeScript compiler (tsc) when running in watch mode, showing compilation status messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n> tsc --watch\n12:30:36 PM - Compilation complete. Watching for file changes.\n```\n\n----------------------------------------\n\nTITLE: Linking a Stylesheet in HTML for In-Product Release Notes\nDESCRIPTION: This HTML code snippet includes an external CSS file named 'inproduct_releasenotes.css' to style the current document. The link tag is configured to use the stylesheet when rendering in the browser. Dependencies include the browser's ability to resolve relative file paths and the existence of the specified CSS file. This construct is often used for theming or ensuring consistent presentation of release notes or related documentation across different deployments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_39.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/inproduct_releasenotes.css\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Updating Package Manager Lists\nDESCRIPTION: Commands for updating package manager lists on different Linux distributions to resolve installation issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# For .deb\nsudo apt-get update\n\n# For .rpm (Fedora 21 and below)\nsudo yum check-update\n\n# For .rpm (Fedora 22 and above)\nsudo dnf check-update\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Escaped Handlebar Syntax\nDESCRIPTION: Example HTML template showing proper escaping of handlebar syntax to prevent generation issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Hello, Flask</title>\n    </head>\n    <body>\n        <strong>Hello there, \\{{ name }}!</strong> It's \\{{ date.strftime(\"%A, %d %B, %Y at %X\") }}.\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: VS Code Engine Configuration for ArrayBuffer Support\nDESCRIPTION: Package.json configuration to enable improved typed array handling in webviews for VS Code 1.57+.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"engines\": {\n  \"vscode\": \"^1.57.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links in Notebook Cells\nDESCRIPTION: Demonstrates how to create clickable links between Markdown cells in notebooks using header slugs. The link format uses lowercase text with spaces and special characters replaced by hyphens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Link text](#header-slug)\n```\n\n----------------------------------------\n\nTITLE: Invoking Find Next Selection Action in VS Code\nDESCRIPTION: This VS Code action (`editor.action.nextSelectionMatchFindAction`) finds the next occurrence in the document that matches the currently selected text, without losing editor focus. It requires a corresponding keybinding to be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\neditor.action.nextSelectionMatchFindAction\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Button in HTML\nDESCRIPTION: This HTML snippet creates an anchor (`<a>`) tag styled as a button to allow users to scroll to the top of the page. It includes attributes for accessibility (`role`, `aria-label`) and identification (`id`). The actual scrolling functionality would typically be implemented with JavaScript, and the visual appearance (`<span class=\"icon\"></span>`) depends on associated CSS defined elsewhere, likely in the linked stylesheet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_56.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Mutator Options Configuration\nDESCRIPTION: TypeScript code demonstrating how to configure environment variable mutators with different application timing options for process creation and shell integration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_79.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = context.environmentVariableCollection;\n// Apply only when the process is created\ncollection.replace('FOO', 'bar');\n// Apply only during the shell integration script\ncollection.replace('FOO', 'bar', { applyAtProcessCreation: false, applyAtShellIntegration: true });\n// Apply twice, during process creation and the shell integration script\ncollection.replace('FOO', 'bar', { applyAtProcessCreation: true, applyAtShellIntegration: true });\n```\n\n----------------------------------------\n\nTITLE: Mounting Host KUBECONFIG in Docker via Makefile (Docker-outside-of-Docker)\nDESCRIPTION: This Makefile snippet demonstrates running a Docker container from within a dev container using the Docker-outside-of-Docker model. It maps ports and crucially mounts the host's `KUBECONFIG` file into the new container. It uses the `HOST_PROJECT_PATH` environment variable (previously set in `devcontainer.json`) and `sed` to translate the `KUBECONFIG` path from the dev container's perspective (`/workspace/...`) to the host's perspective before mounting it.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/use-docker-kubernetes.md#2025-04-23_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\ndocker run -p 8089:8089 -p 9090:9090 -v $(shell echo ${KUBECONFIG} | sed s#/workspace#${HOST_PROJECT_PATH}#):/kubeconfig.json -e KUBECONFIG=/kubeconfig.json ${IMG} -f behaviours/run_submit_locust.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Bypass Heat Check in Electron TypeScript\nDESCRIPTION: Code configuration to enable code caching in Chromium by bypassing heat check in VS Code's window implementation. This allows for optimized script loading on startup.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/11/28/vscode-sandbox.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbypassHeatCheck\n```\n\n----------------------------------------\n\nTITLE: Example telemetry.json Structure\nDESCRIPTION: Sample structure for a telemetry.json file that extension authors can include in their extension's root directory to enable CLI telemetry dumps.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"telemetry.telemetryLevel\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Keybinding for Opening Tree Items (Preview)\nDESCRIPTION: Represents the Space key used as a keyboard shortcut in VS Code custom trees. Pressing Space on a selected tree item opens it in preview mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nkbstyle(Space)\n```\n\n----------------------------------------\n\nTITLE: Property Name Mangling Breaking Example\nDESCRIPTION: Illustrates how naive property name mangling can break dynamic property lookups in JavaScript code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/07/20/mangling-vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { longPropertyName: 123 };\n\nfunction lookup(prop) { return obj[prop]; }\n\nconsole.log(lookup('longPropertyName'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { x: 123 };\n\nfunction lookup(prop) { return obj[prop]; }\n\nconsole.log(lookup('longPropertyName'));\n```\n\n----------------------------------------\n\nTITLE: Setting Base Docker Image for Node.js Application\nDESCRIPTION: Docker configuration showing the base image selection for a Node.js application, using the latest Node.js image.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:latest\n```\n\n----------------------------------------\n\nTITLE: Incorrect HoverProvider Implementation for TypeScript Files in VS Code Extension\nDESCRIPTION: This code shows an incorrect implementation of a HoverProvider that assumes all TypeScript documents are on disk, which can lead to errors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/document-selector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 👎 too lax\nvscode.languages.registerHoverProvider('typescript', {\n  provideHover(doc: vscode.TextDocument) {\n    const { size } = fs.statSync(doc.uri.fsPath); // ⚠️ what about 'untitled:/Untitled1.ts' or others?\n    return new vscode.Hover(`Size in bytes is ${size}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing the #codebase Chat Variable\nDESCRIPTION: Shows the `#codebase` chat variable, which is used within a Copilot Chat prompt to reference the entire current workspace, allowing Copilot to find relevant files automatically for context.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`#codebase`\n```\n\n----------------------------------------\n\nTITLE: Using compact property for CALLSTACK view in TypeScript\nDESCRIPTION: New API to reduce clutter in the CALLSTACK view. The compact property on DebugSessionOptions of the debug.startDebugging function allows hiding a parent debug session node if it only has a single child session.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndebug.startDebugging(undefined, {\n  type: 'node',\n  request: 'launch',\n  name: 'Launch Program',\n  program: '${file}'\n}, { compact: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints Support in VS Code Extension\nDESCRIPTION: JSON configuration for specifying which language file types will have support for setting breakpoints in a debugger extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"breakpoints\": [\n      {\n        \"language\": \"javascript\"\n      },\n      {\n        \"language\": \"javascriptreact\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Color to Default in VS Code\nDESCRIPTION: Example showing how to reset a custom theme color back to its default value using the 'default' keyword in workbench color customizations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_91.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n    \"diffEditor.removedTextBorder\": \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Pipelines Build Definition Reference\nDESCRIPTION: Reference to the YAML build definition file used for Azure Pipelines configuration\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/09/12/engineering-with-azure-pipelines.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild/tfs/product-build.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Smoothing for VS Code Helper on macOS using Bash\nDESCRIPTION: This terminal command adjusts font smoothing settings for the VS Code helper process on macOS Mojave by updating the relevant system defaults key. It must be run from a terminal and followed by a system restart, globally affecting all applications and not just VS Code. The command is designed to address blurry font rendering issues on non-high-DPI monitors and requires administrator privileges for modifying system settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_28.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndefaults write com.microsoft.VSCode.helper CGFontRenderingFontSmoothingDisabled -bool NO\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Workspace - Shell Command\nDESCRIPTION: Command to install TypeScript locally in the workspace for Salsa JavaScript support\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typescript@next\n```\n\n----------------------------------------\n\nTITLE: Defining Key Commands in Markdown Table\nDESCRIPTION: A markdown table displaying new commands added in VS Code 1.12, including keyboard shortcuts, command names, and command IDs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Command|Command id\n---|-------|----------\n`kb(workbench.action.openPreviousRecentlyUsedEditor)`|Open Previous Recently Used Editor|`workbench.action.openPreviousRecentlyUsedEditor`\n`kb(workbench.action.openNextRecentlyUsedEditor)`|Open Next Recently Used Editor|`workbench.action.openNextRecentlyUsedEditor`\n`kb(workbench.action.openGlobalKeybindingsFile)`|Open Keyboard Shortcuts File|`workbench.action.openGlobalKeybindingsFile`\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter as a Network Server - VS Code Extension API - TypeScript\nDESCRIPTION: This TypeScript snippet shows registering a debug adapter factory so that the debug adapter connects to a server over a network socket. It uses vscode.debug.registerDebugAdapterDescriptorFactory, returning a DebugAdapterServer for host 'localhost' and port 12345. Dependencies: 'vscode' module. Inputs: a debug session instance (unused here). Outputs: a DebugAdapterServer, which expects a compatible debug adapter running on the given host/port.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.debug.registerDebugAdapterDescriptorFactory('mock', {\n  createDebugAdapterDescriptor: (_session) => {\n    return new vscode.DebugAdapterServer(12345, 'localhost');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Formatting Configuration Options\nDESCRIPTION: Available TypeScript code formatting configuration options including spacing and brace placement settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Defines space handling after a comma delimiter\n\"typescript.format.insertSpaceAfterCommaDelimiter\": boolean,\n\n// Defines space handling after a semicolon in a for statement\n\"typescript.format.insertSpaceAfterSemicolonInForStatements\": boolean,\n\n// Defines space handling after a binary operator\n\"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\": boolean,\n\n// Defines space handling after keywords in control flow statement\n\"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\": boolean,\n\n// Defines space handling after function keyword for anonymous functions\n\"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": boolean,\n\n// Defines space handling after opening and before closing non empty parenthesis\n\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": boolean,\n\n// Defines space handling after opening and before closing non empty brackets\n\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": boolean,\n\n// Defines whether an open brace is put onto a new line for functions or not\n\"typescript.format.placeOpenBraceOnNewLineForFunctions\": boolean,\n\n// Defines whether an open brace is put onto a new line for control blocks or not\n\"typescript.format.placeOpenBraceOnNewLineForControlBlocks\": boolean,\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Anchor and Link Elements\nDESCRIPTION: HTML markup for a scroll-to-top button and CSS stylesheet link for VS Code release notes styling\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for JavaScript Type Checking\nDESCRIPTION: Shows how to configure a tsconfig.json file to enable TypeScript type checking for JavaScript files in a TypeScript project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"allowJs\": true,\n        \"checkJs\": true\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Host Messaging\nDESCRIPTION: JavaScript implementation of renderer-to-extension-host messaging with activation function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ActivationFunction } from 'vscode-notebook-renderer';\n\nexport const activate: ActivationFunction = (context) => ({\n  renderOutputItem(data, element) {\n    // Render the output using the output `data`\n    ....\n    // The availability of messaging depends on the value in `requiresMessaging`\n    if (!context.postMessage){\n      return;\n    }\n\n    // Upon some user action in the output (such as clicking a button),\n    // send a message to the extension host requesting the launch of the editor.\n    document.querySelector('#openEditor').addEventListener('click', () => {\n      context.postMessage({\n        request: 'showEditor',\n        data: '<custom data>'\n      })\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Quick Suggestions Behavior\nDESCRIPTION: Defines when automatic IntelliSense suggestions (quick suggestions) appear in the integrated terminal. This setting allows customization based on context, such as typing commands, arguments, or unknown input.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(terminal.integrated.suggest.quickSuggestions)\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for VS Code in WSL - Bash\nDESCRIPTION: This Bash snippet shows how to manually append the VS Code binary directory (as installed in Windows) to the WSL PATH environment variable in .bashrc. The substitution enables compatibility with different Windows install locations, using the WINDOWS_USERNAME variable for user-specific path construction. It ensures the 'code' command is available in WSL terminals. Commented alternatives support other install cases. No extra dependencies beyond standard Bash and configured Windows path mounts are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nWINDOWS_USERNAME=\"Your Windows Alias\"\n\nexport PATH=\"$PATH:/mnt/c/Windows/System32:/mnt/c/Users/${WINDOWS_USERNAME}/AppData/Local/Programs/Microsoft VS Code/bin\"\n# or...\n# export PATH=\"$PATH:/mnt/c/Program Files/Microsoft VS Code/bin\"\n# or...\n# export PATH=\"$PATH:/mnt/c/Program Files (x86)/Microsoft VS Code/bin\"\n\n```\n\n----------------------------------------\n\nTITLE: Markdown List of Issue Tracking Contributors\nDESCRIPTION: A markdown formatted list showing the GitHub usernames and profile links of contributors who help with VS Code documentation issue tracking.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [John Murray (@gjsjohnmurray)](https://github.com/gjsjohnmurray)\n* [Andrii Dieiev (@IllusionMH)](https://github.com/IllusionMH)\n* [ArturoDent (@ArturoDent)](https://github.com/ArturoDent)\n* [Simon Chan (@yume-chan)](https://github.com/yume-chan)\n* [heartacker (@heartacker)](https://github.com/heartacker)\n* [Lemmingh (@Lemmingh)](https://github.com/Lemmingh)\n```\n\n----------------------------------------\n\nTITLE: Generating and Adding an ECDSA SSH Key - OpenSSH (Shell)\nDESCRIPTION: These shell commands generate a new ECDSA key pair for SSH authentication and add the private key to the ssh-agent. This is used to work around Windows SSH-keygen compatibility issues with newer SSH daemons. Dependencies include OpenSSH client utilities. Key parameters: '-t ecdsa -b 521' for key type and bit length. Outputs a new private/public key file ('id_ecdsa') and adds it to the agent.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/ssh.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t ecdsa -b 521\nssh-add id_ecdsa\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Variables in devcontainer.json for VS Code Dev Containers\nDESCRIPTION: This snippet showcases new variables introduced for use in devcontainer.json configuration files. These variables provide more flexibility in container setup by allowing access to workspace folder names and paths both locally and within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_45.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"${localWorkspaceFolderBasename}\": \"Name of the local folder that was opened in VS Code (that contains .devcontainer/devcontainer.json).\",\n  \"${containerWorkspaceFolder}\": \"The path where the workspaces files can be found in the container.\",\n  \"${containerWorkspaceFolderBasename}\": \"Name of the folder where the workspace files can be found in the container.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sandboxed Electron Renderer with IPC\nDESCRIPTION: Example showing how to access system resources through IPC after sandboxing, using the vscode global API instead of direct Node.js access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/11/28/vscode-sandbox.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <h1>Hello World</h1>\n    <script>\n      await vscode.workspace.getConfiguration().update('some.setting', true);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Debugging Node.js Application in Container\nDESCRIPTION: JavaScript code snippet showing where to set a breakpoint in the Express application for debugging within the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/31/inspecting-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nres.render('index', { title: 'Express' });\n```\n\n----------------------------------------\n\nTITLE: Format on Save/Paste Settings\nDESCRIPTION: Settings to enable automatic code formatting on save and paste actions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnPaste\": true\n```\n\n----------------------------------------\n\nTITLE: Using Basic Icon in VS Code Label\nDESCRIPTION: Demonstrates the basic syntax for inserting a product icon in Markdown labels using the $(iconIdentifier) syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n$(alert);\n```\n\n----------------------------------------\n\nTITLE: Enabling References CodeLens for TypeScript in JSON Settings\nDESCRIPTION: This JSON setting enables the References CodeLens feature in VS Code for TypeScript files. When enabled (`true`), it displays an inline count of references above classes, interfaces, methods, properties, and exported objects. Clicking the count allows quick browsing of references.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.referencesCodeLens.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Copilot for Python Function Generation\nDESCRIPTION: Demonstrates how to use GitHub Copilot to generate a Python function and fix import errors. Shows the integration of Copilot suggestions in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef say_day_of_week(date)\n```\n\nLANGUAGE: python\nCODE:\n```\nsay_day_of_week(date.today())\n```\n\n----------------------------------------\n\nTITLE: Debugging keybinding diagnostics log output example\nDESCRIPTION: Example output from the \"Developer: Toggle Keyboard Shortcuts Troubleshooting\" command showing the detailed log of a cmd+/ keybinding being processed and resolved to the comment line action.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_49.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: MetaLeft, keyCode: 91, key: Meta\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: MetaLeft, keyCode: 57 ('Meta')\n[KeybindingService]: \\ Keyboard event cannot be dispatched.\n[KeybindingService]: / Received  keydown event - modifiers: [meta], code: Slash, keyCode: 191, key: /\n[KeybindingService]: | Converted keydown event - modifiers: [meta], code: Slash, keyCode: 85 ('/')\n[KeybindingService]: | Resolving meta+[Slash]\n[KeybindingService]: \\ From 2 keybinding entries, matched editor.action.commentLine, when: editorTextFocus && !editorReadonly, source: built-in.\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration Example - Double Click Icon\nDESCRIPTION: Setting to enable double-clicking the application icon to close the window on Windows and Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"window.doubleClickIconToClose\"\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Next Version - Shell Command\nDESCRIPTION: Command to install the nightly build of TypeScript globally for Salsa JavaScript support\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g typescript@next\n```\n\n----------------------------------------\n\nTITLE: Cloning VS Code Docs Repository Without Binary Files\nDESCRIPTION: Commands for cloning the repository without downloading the large binary files, using environment variables to skip LFS smudge operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# macOS / Linux:\nGIT_LFS_SKIP_SMUDGE=1 git clone git@github.com:microsoft/vscode-docs.git\n# or\nGIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/microsoft/vscode-docs.git\n```\n\n----------------------------------------\n\nTITLE: Invoking Find Previous Selection Action in VS Code\nDESCRIPTION: This VS Code action (`editor.action.previousSelectionMatchFindAction`) finds the previous occurrence in the document that matches the currently selected text, without losing editor focus. It requires a corresponding keybinding to be used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\neditor.action.previousSelectionMatchFindAction\n```\n\n----------------------------------------\n\nTITLE: New VS Code Commands Table\nDESCRIPTION: A table listing new VS Code commands with their key bindings and command IDs\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Command|Command id\n---|-------|----------\n`kb(workbench.action.quickOpenView)`|Quick Open View|`workbench.action.quickOpenView`\n`kb(workbench.action.nextEditorInGroup)`|Open Next Editor in Group|`workbench.action.nextEditorInGroup`\n`kb(workbench.action.previousEditorInGroup)`|Open Previous Editor in Group|`workbench.action.previousEditorInGroup`\n`kb(workbench.action.toggleZenMode)`|Enable Zen Mode|`workbench.action.toggleZenMode`\n`kb(workbench.action.exitZenMode)`|Leave Zen Mode|`workbench.action.exitZenMode`\n`kb(workbench.action.closePanel)`|Close active Panel|`workbench.action.closePanel`\n`kb(workbench.action.git.clone)`|Clone from a Git URL|`workbench.action.git.clone`\n`kb(workbench.action.toggleActivityBarVisibility)`|Toggle Visibility of Activity Bar|`workbench.action.toggleActivityBarVisibility`\n`kb(workbench.action.quit)`|Quit VS Code|`workbench.action.quit`\n`kb(editor.action.joinLines)`|Join Lines|`editor.action.joinLines`\n`kb(editor.action.transpose)`|Transpose characters around the cursor|`editor.action.transpose`\n`kb(editor.action.transformToUppercase)`|Transform to Uppercase|`editor.action.transformToUppercase`\n`kb(editor.action.transformToLowercase)`|Transform to Lowercase|`editor.action.transformToLowercase`\n```\n\n----------------------------------------\n\nTITLE: VS Code Editor Theme Color Properties - Errors and Warnings\nDESCRIPTION: Color configuration for error and warning indicators in the editor, including squiggles, boxes, and icon colors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\neditorError.foreground\neditorError.border\neditorError.background\neditorWarning.foreground\neditorWarning.border\neditorWarning.background\n```\n\n----------------------------------------\n\nTITLE: Deprecated Travis CI Setup for VS Code Extension Tests on Linux (Bash)\nDESCRIPTION: This Bash script shows a previously recommended configuration method for setting up a Travis CI Linux environment intended for VS Code extension integration tests. It sets specific C/C++ compiler versions using environment variables (`CXX`, `CC`), exports the `DISPLAY` variable for Xvfb (X virtual framebuffer), starts the Xvfb service using its init script, and includes a short pause. This configuration might be outdated and potentially non-functional on newer Travis CI Linux images.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nif [ $TRAVIS_OS_NAME == \"linux\" ]; then\n  export CXX=\"g++-4.9\" CC=\"gcc-4.9\" DISPLAY=:99.0;\n  sh -e /etc/init.d/xvfb start;\n  sleep 3;\nfi\n```\n\n----------------------------------------\n\nTITLE: Enabling Minimap in VS Code\nDESCRIPTION: This JSON setting enables the minimap feature in VS Code, which provides a high-level overview of the source code structure.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/04/10/sublime-text-roundup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.minimap.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Inverting Local Boolean Variable in Java\nDESCRIPTION: Example of the invert local variable refactoring, which transforms a boolean variable to its logical opposite by changing both its name and inverting the condition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic void method(int value) {\n  boolean valid = value > 5 && value < 15;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void method(int value) {\n  boolean notValid = value <= 5 || value >= 15;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Breakpoints in TypeScript\nDESCRIPTION: New API for adding and removing SourceBreakpoints and FunctionBreakpoints in VS Code's debug functionality. This is part of the proposed API and requires opting in.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_20.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Setting with Limits\nDESCRIPTION: Shows how to define a numeric setting with a default value and markdown description for pagination control.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitMagic.views.pageItemLimit\": {\n    \"type\": \"number\",\n    \"default\": 20,\n    \"markdownDescription\": \"Specifies the number of items to show in each page when paginating a view list. Use 0 to specify no limit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Settings Sync Configuration\nDESCRIPTION: JSON configuration for ignored settings in VS Code Settings Sync.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/settings-sync.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nsetting(settingsSync.ignoredSettings)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Base Template with Layout Structure in HTML\nDESCRIPTION: This HTML template serves as a base layout for a Django application. It defines a navigation bar and placeholders for content using Django template blocks. The template includes CSS references and uses Django URL template tags for navigation links.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>{% block title %}{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'hello/site.css' %}\"/>\n</head>\n\n<body>\n<div class=\"navbar\">\n    <a href=\"{% url 'home' %}\" class=\"navbar-brand\">Home</a>\n    <a href=\"{% url 'about' %}\" class=\"navbar-item\">About</a>\n    <a href=\"{% url 'contact' %}\" class=\"navbar-item\">Contact</a>\n</div>\n\n<div class=\"body-content\">\n    {% block content %}\n    {% endblock %}\n    <hr/>\n    <footer>\n        <p>&copy; 2018</p>\n    </footer>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Screen Reader Support in VS Code Settings\nDESCRIPTION: This setting enables an experimental mode in the VS Code editor designed for screen readers. When active, the editor places the current file's text into the input textarea. This requires setting the `editor.experimentalScreenReader` key to true in the user or workspace settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"editor.experimentalScreenReader\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension View Context Menu Command - VS Code - JSON\nDESCRIPTION: Demonstrates how to contribute a command to the Extension view's context menu by targeting a specific extension via the 'extension' and 'extensionStatus' when-clause context. The 'gitlens.showSettingsPage' command will appear in the configuration group when 'eamodio.gitlens' is installed. Prerequisites: Understanding of VS Code extension contribution points and editing JSON configuration (e.g., in package.json). Inputs include the extension's identifier and status; output is the menu command's conditional visibility. This snippet must be placed in an appropriate menu contributions section.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_44.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"extension/context\": [\n        {\n            \"command\": \"gitlens.showSettingsPage\",\n            \"group\": \"2_configure\",\n            \"when\": \"extension == eamodio.gitlens && extensionStatus == installed\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown List of VS Code Web Extensions\nDESCRIPTION: A markdown-formatted list of VS Code extensions that support web extension functionality, including marketplace links and author information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Web extensions\n\nExtension authors for enabling extensions that run code as [web extensions](https://code.visualstudio.com/api/extension-guides/web-extensions) (the list below is as of November 2):\n\n* [Search GitHub Users Extension](https://marketplace.visualstudio.com/items?itemName=adarshpandeyin.search-github-users-extension) ([Adarsh Pandey](https://marketplace.visualstudio.com/publishers/adarshpandeyin))\n* [Typescript Language Server - Multi Host mode](https://marketplace.visualstudio.com/items?itemName=asvetliakov.typescript-language-features-multi-host) ([Alexey Svetliakov](https://marketplace.visualstudio.com/publishers/asvetliakov))\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for AI Toolkit Models\nDESCRIPTION: Creates the required four-layer directory structure within the AI Toolkit's working directory for storing ONNX models.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir C:\\Users\\Administrator\\.aitk\\models\\microsoft\\Phi-3.5-vision-instruct-onnx\\cpu\\phi3.5-cpu-int4-rtn-block-32\n```\n\n----------------------------------------\n\nTITLE: Accessing All Integrated Terminals (VS Code Window API, TypeScript)\nDESCRIPTION: This TypeScript example logs the array of all currently available terminal instances using the VS Code `window.terminals` API. It allows extension authors to interact with and inspect terminals beyond just those created by the extension itself. No special dependencies are needed beyond the VS Code extension API. The expected output is the console logging of all terminal objects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_23.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(window.terminals);\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Dev Container Configuration\nDESCRIPTION: A simple devcontainer.json configuration that pulls a pre-configured Node image, sets up port forwarding for port 3000, and installs the eslint extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/07/27/containers-edu.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image\": \"node:latest\",\n  \"forwardPorts\": [3000],\n  \"extensions\": [\"dbaeumer.vscode-eslint\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onLanguage Activation in package.json\nDESCRIPTION: Declaration of onLanguage activation event for Python language. This causes the extension to be activated whenever a Python file is opened in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onLanguage:python\"\n]\n```\n\n----------------------------------------\n\nTITLE: Default Browser Configuration\nDESCRIPTION: Setting to configure the default external browser for opening links.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/getstarted/tips-and-tricks.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.externalBrowser\": \"edge\"\n```\n\n----------------------------------------\n\nTITLE: Available Slash Commands\nDESCRIPTION: List of slash commands for explicit control in GitHub Copilot for Azure\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/11/15/introducing-github-copilot-for-azure.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n/help\n/learn\n/resources\n/diagnose\n/changeTenant\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrapping Indent in Visual Studio Code Settings\nDESCRIPTION: Controls how long lines are wrapped and indented using the editor.wrappingIndent setting in settings.json. Available values are 'none', 'same', and 'indent'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_3_0.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.wrappingIndent\": \"none\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Node.js Docker Run Task in JSON\nDESCRIPTION: Defines a minimal `docker-run` task in `tasks.json` for launching a Node.js container. Setting `\"platform\": \"node\"` enables the extension to infer default values for `dockerRun.command` (from `package.json` start script or main property), `dockerRun.containerName`, and `dockerRun.image` (potentially from a dependent `docker-build` task or `package.json`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/reference.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run Node Image\",\n            \"node\": \"docker-run\",\n            \"platform\": \"node\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Keybinding for Opening Tree Items (Non-Preview)\nDESCRIPTION: Represents the Enter key used as a keyboard shortcut in VS Code custom trees. Pressing Enter on a selected tree item opens it in non-preview mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkbstyle(Enter)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Top Button in HTML\nDESCRIPTION: HTML code for a scroll-to-top button with accessibility attributes and an associated stylesheet link for VS Code's in-product release notes. The code includes a comment warning not to modify it without also updating the regex in gulpfile.common.js.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!-- In-product release notes styles.  Do not modify without also modifying regex in gulpfile.common.js -->\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: VS Code Web URL Examples in Markdown\nDESCRIPTION: Examples of vscode.dev URLs for accessing themes and features directly in the browser, including theme preview links and Live Share session URLs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/10/20/vscode-dev.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nvscode.dev/github\nvscode.dev/azurerepos\nvscode.dev/theme/sdras.night-owl\nvscode.dev/theme/wesbos.theme-cobalt2\nvscode.dev/liveshare\n```\n\n----------------------------------------\n\nTITLE: Revealing a Line at the Top of Editor Using VS Code Commands API - JavaScript\nDESCRIPTION: Executes the 'revealLine' VS Code command to scroll and position a specific line (here, line 10) at the top of the editor viewport. Designed for extension or custom script usage. Requires 'vscode.commands'. Key parameters: 'lineNumber' specifies which line (as string) to reveal; 'at' sets the logical placement. No direct output; visibly moves the viewport.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  commands.executeCommand('revealLine', {lineNumber: '10', at: 'top'})\n```\n\n----------------------------------------\n\nTITLE: Toggling Experimental Screen Reader Support via Keyboard Shortcut\nDESCRIPTION: This keyboard shortcut (`Ctrl+Shift+R`) toggles the experimental screen reader support mode for the current VS Code session without modifying the settings file. It activates or deactivates the mode where editor text is placed in the input textarea.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCtrl+Shift+R\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Mouse Wheel Zoom\nDESCRIPTION: JSON setting to enable zooming the terminal using the mouse wheel while holding Ctrl key.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_86.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.mouseWheelZoom\": true\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings Search Configuration\nDESCRIPTION: Example code snippet showing keyboard shortcut formatting used in the VSCode documentation using kbstyle format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Ctrl+Q)\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions Programmatically for VS Code Integration Tests (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates using the `vscode-test` library to automate extension installation before running integration tests. It asynchronously downloads and unzips a specified version of VS Code, resolves the path to its command-line interface (CLI), and then uses Node.js `child_process.spawnSync` to execute the CLI command (`--install-extension`) to install an extension specified by its ID or the path to its VSIX file. Requires the `child_process` module and the `vscode-test` npm package.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst cp = require('child_process');\nconst { downloadAndUnzipVSCode, resolveCliPathFromExecutablePath } = require('vscode-test');\n\n(async () => {\n  const vscodeExecutablePath = await downloadAndUnzipVSCode('1.36.0');\n  const cliPath = resolveCliPathFromExecutablePath(vscodeExecutablePath);\n\n  cp.spawnSync(cliPath, ['--install-extension', '<EXTENSION-ID-OR-PATH-TO-VSIX>'], {\n    encoding: 'utf-8',\n    stdio: 'inherit'\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Button in HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) functioning as a button to scroll the page to the top. It uses `id=\"scroll-to-top\"` for identification, accessibility attributes (`role`, `aria-label`), and `href=\"#\"` for same-page navigation. The nested `<span>` with class `icon` is likely styled via CSS to display an icon. A preceding comment indicates this is part of the in-product release notes styles.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Adding Page Styling HTML Elements\nDESCRIPTION: HTML code that adds a scroll-to-top button and links to a CSS stylesheet for in-product release notes styling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: HTML Icon Elements in VS Code\nDESCRIPTION: HTML elements that represent Codicon icons with their class identifiers and semantic meanings. Each icon uses the codicon class with specific icon identifiers for different UI elements like remote explorer, search, settings, and testing views.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-book\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-twitter\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-star\"></i>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Reference in Markdown\nDESCRIPTION: Example of VS Code's keyboard shortcut syntax used in documentation to reference the Show All Commands command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/03/07/Feb2016Release.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.showCommands)\n```\n\n----------------------------------------\n\nTITLE: HTML Script Block with Strict Null Checks\nDESCRIPTION: Example showing strict null checks enabled in JavaScript code within HTML script blocks using the js/ts.implicitProjectConfig.strictNullChecks setting. Demonstrates type checking for potentially null values.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\ndocument.getElementById('someId') // Returns HTMLElement | null\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing bash on Alpine for Older Windows Builds via apk\nDESCRIPTION: For Alpine WSL distributions running on Windows 10 version 1803 or earlier, installs the 'bash' shell prerequisite via apk. This is necessary as the VS Code server requires bash for proper operation in these versions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\napk update && apk add bash\n\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Reference in Markdown\nDESCRIPTION: Shows the keyboard shortcut reference syntax used in VS Code documentation for reopening closed editor command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/05/09/April2016Release.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.reopenClosedEditor)\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate TypeScript Syntax Server in VSCode\nDESCRIPTION: A configuration option to enable separate TypeScript servers in VSCode - one for simple syntax operations and another for complex language features. This setting requires TypeScript 3.4+ and helps improve responsiveness for simpler operations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"typescript.experimental.useSeparateSyntaxServer\": true\n```\n\n----------------------------------------\n\nTITLE: Dry Run Cache Configuration in Azure Pipelines\nDESCRIPTION: YAML configuration showing how to use the dryRun parameter to check for cache existence without restoration, optimizing build resubmissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/18/optimizing-ci.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1\n  inputs:\n    keyfile: commit\n    targetfolder: output\n    vstsFeed: \"$(ArtifactFeed)\"\n    dryRun: true\n\n- script: |\n    npm run compile install\n  displayName: Install Dependencies\n  condition: ne(variables['CacheExists'], 'true')\n```\n\n----------------------------------------\n\nTITLE: Manually Adding VS Code to PATH in Zsh (macOS)\nDESCRIPTION: Appends a command to the user's Zsh profile (`~/.zprofile`) using a heredoc to add the Visual Studio Code executable directory to the system's PATH environment variable. This allows launching VS Code from any Zsh terminal using the 'code' command after restarting the terminal. The escaped `\\$PATH` prevents premature expansion during the append operation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/mac.md#2025-04-23_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\ncat << EOF >> ~/.zprofile\n# Add Visual Studio Code (code)\nexport PATH=\"\\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data File in VS Code Settings\nDESCRIPTION: This JSON snippet shows how to configure the 'html.customData' setting in VS Code to point to a custom data file for HTML entities.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2020/02/24/custom-data-format.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"html.customData\": [\"./html.html-data.json\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Icons with Text in VS Code Label\nDESCRIPTION: Shows how to combine multiple icons with text in a single label using the $(iconIdentifier) syntax.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n$(eye) $(heart) $(mark-github) GitHub\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Echo Command in tasks.json\nDESCRIPTION: Setting to enable echoing of executed commands in the task output view. This is useful for debugging task configurations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_8_0.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"echoCommand\": true\n```\n\n----------------------------------------\n\nTITLE: Defining and Printing a String Variable in Python\nDESCRIPTION: This Python code snippet demonstrates a basic example intended for a Jupyter Notebook cell within VS Code. It assigns the string 'Hello world' to the variable `msg` and then prints the value of `msg` to the cell's output. This illustrates the fundamental process of adding executable Python code to a notebook cell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/jupyter-notebooks.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nmsg = \"Hello world\"\nprint(msg)\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Editor Visible Ranges with Proposed API in VS Code (TypeScript)\nDESCRIPTION: Presents interfaces and events for accessing visible ranges in a VS Code editor, part of the proposed extension API. Includes 'TextEditor.visibleRanges' for obtaining vertically visible ranges and the 'window.onDidChangeTextEditorVisibleRanges' event for subscribing to changes. Only accessible with 'enableProposedApi' enabled; depends on VS Code editor objects and event APIs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextEditor {\n    /**\n     * The current visible ranges in the editor (vertically).\n     * This accounts only for vertical scrolling, and not for horizontal scrolling.\n     */\n    readonly visibleRanges: Range[];\n}\n\nexport namespace window {\n    /**\n     * An [event](#Event) which fires when the selection in an editor has changed.\n     */\n    export const onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening New File from Command Line in Visual Studio Code\nDESCRIPTION: Creates a new file from the command line by appending the file path. VS Code will open it as a dirty (modified but not yet saved) file in the editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_3_0.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncode mynewfile.js\n```\n\n----------------------------------------\n\nTITLE: Adding postinstall Script for VS Code Extension Development\nDESCRIPTION: Adds a postinstall script to package.json that ensures the correct version of vscode.d.ts is downloaded based on the engine requirements. This script runs automatically after npm install.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group via CLI\nDESCRIPTION: Command to delete all provisioned Azure resources within a specific resource group to prevent unnecessary charges. This cleanup command removes all resources created during the DocumentDB setup process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naz group delete -n nina-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Extension Execution Location (Local vs. Remote) in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to override the default execution location for specific VS Code extensions within the `settings.json` file. By setting the `remote.extensionKind` property, extensions like Docker (`ms-azuretools.vscode-docker`) can be forced to run on the local UI side (`\"ui\"`), while others like Remote SSH Edit (`ms-vscode-remote.remote-ssh-edit`) can be forced to run on the remote workspace side (`\"workspace\"`). This can be useful for compatibility or testing but may break extensions if not used carefully.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"remote.extensionKind\": {\n    \"ms-azuretools.vscode-docker\": [ \"ui\" ],\n    \"ms-vscode-remote.remote-ssh-edit\": [ \"workspace\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Codicon Icon Definitions\nDESCRIPTION: HTML markup for VS Code's Codicon icons, including class names, identifiers, and usage descriptions for various UI elements like extensions, find/replace, notebooks, and panels.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-refresh\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-remote\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-star-empty\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-star-full\"></i>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"codicon codicon-star-half\"></i>\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed APIs in VS Code Extension (JSON)\nDESCRIPTION: Shows the required setting in an extension's `package.json` file to enable the use of proposed VS Code APIs. This is necessary for testing experimental features but prevents the extension from being published to the Marketplace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_50.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to include an external CSS file named `inproduct_releasenotes.css`, located in the relative `css` directory. The `rel=\"stylesheet\"` attribute specifies the relationship, and `type=\"text/css\"` defines the MIME type. This stylesheet provides the visual styling for the in-product release notes page.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting for Large File Confirmation\nDESCRIPTION: Setting to control the file size threshold for showing confirmation before opening large files.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.editorLargeFileConfirmation\"\n```\n\n----------------------------------------\n\nTITLE: Creating Search Settings Configuration in VS Code\nDESCRIPTION: Configuration settings for VS Code search functionality including multiline search, line numbers, replace preview and global gitignore integration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"search.usePCRE2\": true,\n\"search.showLineNumbers\": true,\n\"search.useReplacePreview\": false,\n\"search.useGlobalIgnoreFiles\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Path Overrides in VS Code Debug Settings\nDESCRIPTION: Default sourcemap path overrides configuration that maps webpack paths to local filesystem paths. Uses pattern matching to transform source map paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/nodejs-debugging.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'webpack:///./~/*': \"${workspaceFolder}/node_modules/*\",\n  'webpack:////*': '/*',\n  'webpack://@?:*/?:*/*': \"${workspaceFolder}/*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debounce Position Changes in Accessibility Settings\nDESCRIPTION: A setting that enables debouncing of position changes for accessibility signals to reduce rapid updates.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"accessibility.signalOptions.debouncePositionChanges\"\n```\n\n----------------------------------------\n\nTITLE: Menu Sequence Examples\nDESCRIPTION: Shows how to format menu navigation sequences using the '>' symbol.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**File** > **Preferences** > **Settings**\n**View** > **Command Palette**\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, including metadata like order, titles, descriptions, and author information.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/06/24/extensions-are-all-you-need.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nOrder: 88\nTOCTitle: Copilot extensions are all you need\nPageTitle: GitHub Copilot Extensions are all you need\nMetaDescription: Learn how to extend GitHub Copilot by using the Chat and Language Model APIs in your Visual Studio Code extension. Get inspired by early adopters and their extensions.\nMetaSocialImage: chat-extension-sample.png\nDate: 2024-06-24\nAuthor: Isidor Nikolic\n---\n```\n\n----------------------------------------\n\nTITLE: Setting COMPOSE_PROJECT_NAME Environment Variable in Bash for Docker Compose - Bash\nDESCRIPTION: This snippet demonstrates how to launch Visual Studio Code from a Bash terminal with the COMPOSE_PROJECT_NAME environment variable set, which determines the Docker Compose project name for the VS Code session. Ensure that you close all open VS Code windows before running this command for the setting to apply correctly. The \"foo\" value can be replaced by any desired project name, and the command assumes both Docker and VS Code are installed and available in the PATH.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/set-docker-compose-project-name.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# from bash\\nCOMPOSE_PROJECT_NAME=foo code .\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic onLanguage Activation in package.json\nDESCRIPTION: Declaration of a generic onLanguage activation event that activates the extension before any language is used. This is useful for extensions that need to be available for all language types.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onLanguage\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Keybinding for Scope Inspector\nDESCRIPTION: JSON configuration for creating a custom keybinding to trigger the scope inspector in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"cmd+alt+shift+i\",\n  \"command\": \"editor.action.inspectTMScopes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Binding for Quick Open on Mac OS\nDESCRIPTION: JSON configuration to restore the Cmd+E key binding for Quick Open functionality on Mac OS, which was removed in the August 2016 release. This setting can be added to your keybindings.json file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_5.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"key\": \"cmd+e\", \"command\": \"workbench.action.quickOpen\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Format on Paste in VS Code\nDESCRIPTION: This JSON setting enables automatic formatting of pasted code in VS Code, similar to Sublime Text's behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/04/10/sublime-text-roundup.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnPaste\": true\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS for In-Product Release Notes in HTML\nDESCRIPTION: This HTML `<link>` tag imports an external stylesheet located at `css/inproduct_releasenotes.css`. This CSS file contains styles specifically designed for formatting VS Code's in-product release notes content. The surrounding comment indicates these styles should not be modified without updating a corresponding regex in `gulpfile.common.js`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Local Lookup Paths for Repository Configurations (VS Code Settings)\nDESCRIPTION: This setting allows users to specify additional local paths for finding Dev Container configurations for repositories. The folder structure should follow the pattern '<host>/<owner>/<repository>'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_47.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dev.containers.repositoryConfigurationPaths\": [\n    \"local/path/to/configurations\"\n]\n```\n\n----------------------------------------\n\nTITLE: Scoping Keyboard Shortcuts to File Types in VS Code (JSON)\nDESCRIPTION: This JSON configuration sets a keyboard shortcut (Shift+Alt+A) to execute the 'editor.action.blockComment' command, but only when the editor is focused and the language is C#. It uses the 'editorLangId' context key within the 'when' clause to limit activation to C# files. This should be placed in 'keybindings.json'. The shortcut will only work if 'editorTextFocus' is true and the file type matches. Ensure that the 'command' is valid and that the file's language ID matches 'csharp'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/keybindings.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ \"key\": \"shift+alt+a\",           \"command\": \"editor.action.blockComment\",\n                                         \"when\": \"editorTextFocus && editorLangId == csharp\" },\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Accept Command\nDESCRIPTION: This TypeScript interface snippet shows how to define a command that gets triggered when the user accepts input in the Source Control Input Box using Ctrl+Enter or Cmd+Enter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceControl {\n  readonly acceptInputCommand?: Command;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Port Forwarding in VS Code Remote\nDESCRIPTION: This snippet shows how to disable automatic port forwarding in VS Code Remote using a configuration setting. This can be useful for setups that don't work well with automatic port forwarding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_51.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"remote.autoForwardPorts\": false\n```\n\n----------------------------------------\n\nTITLE: Specifying VS Code Engine Compatibility\nDESCRIPTION: JSON configuration showing how to specify VS Code version compatibility in package.json using the engines.vscode property.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"vscode\": \"^1.8.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Hello World Program - C++ Application - cpp\nDESCRIPTION: This C++ snippet provides a complete Hello World application using vectors and string streams. It demonstrates core features like vector initialization, iteration, and output using 'cout'. Dependencies are the C++ standard library with support for <iostream>, <vector>, and <string>. Inputs are none; the output prints each message word separated by spaces. Intended for use in the created 'helloworld.cpp' file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/config-clang-mac.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    vector<string> msg {\"Hello\", \"C++\", \"World\", \"from\", \"VS Code\", \"and the C++ extension!\"};\n\n    for (const string& word : msg)\n    {\n        cout << word << \" \";\n    }\n    cout << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Debugging in VS Code\nDESCRIPTION: Launch configuration JSON for setting up Ruby debugging in VS Code. Specifies debug settings including program path and entry point behavior.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/03/11/ExtensionsRoundup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"name\": \"Ruby Debug\",\n          \"type\": \"Ruby\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceFolder}/hello_world.rb\",\n          \"stopOnEntry\": false\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Syntax Profiles in JSON\nDESCRIPTION: JSON configuration for the 'emmet.syntaxProfiles' setting which customizes the output of HTML abbreviations. Examples show setting single quotes for HTML attributes and enabling self-closing tags for JSX.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"emmet.syntaxProfiles\": {\n    \"html\": {\n        \"attr_quotes\": \"single\"\n    },\n    \"jsx\": {\n        \"self_closing_tag\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Extensions in VS Code with JSON\nDESCRIPTION: This JSON snippet illustrates how to use the 'extensions.allowed' VS Code setting to specify which extensions or publishers are permitted or restricted in an enterprise environment. The configuration supports allowing or denying publishers, specific extensions, individual versions (with platform constraints), and stable releases. Publishers are identified by their ID if there is no period in the key. The list must be a valid JSON object, wildcards and version ranges are not supported, and duplicate keys are invalid. Inputs are extension and publisher identifiers with boolean or string/array values indicating status, and the output is a restrictive extension installation policy enforced by VS Code when the configuration is applied. Requires at least VS Code version 1.96.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/enterprise.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"extensions.allowed\": {\n    // Allow all extensions from the 'microsoft' publisher. If the key does not have a '.', it means it is a publisher ID.\n    \"microsoft\": true,\n\n    // Allow all extensions from the 'github' publisher\n    \"github\": true,\n\n    // Allow prettier extension\n    \"esbenp.prettier-vscode\": true,\n\n    // Do not allow docker extension\n    \"ms-azuretools.vscode-docker\": false,\n\n    // Allow only version 3.0.0 of the eslint extension\n    \"dbaeumer.vscode-eslint\": [\"3.0.0\"],\n\n    // Allow multiple versions of the figma extension\n    \"figma.figma-vscode-extension\": [\"3.0.0\", \"4.2.3\", \"4.1.2\"],\n\n    // Allow version 5.0.0 of the rust extension on Windows and macOS\n    \"rust-lang.rust-analyzer\": [\"5.0.0@win32-x64\", \"5.0.0@darwin-x64\"],\n\n    // Allow only stable versions of the GitHub Pull Requests extension\n    \"github.vscode-pull-request-github\": \"stable\",\n\n    // Allow only stable versions from redhat publisher\n    \"redhat\": \"stable\",\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Piece Table with Buffer List\nDESCRIPTION: Final optimization of the piece table structure using a list of buffers instead of concatenated strings to handle large files efficiently.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass PieceTable {\n    buffers: string[];\n    nodes: Node[];\n}\n\nclass Node {\n    bufferIndex: number;\n    start: number; // start offset in buffers[bufferIndex]\n    length: number;\n    lineStarts: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll-to-Top Button and Custom Stylesheet in HTML\nDESCRIPTION: This HTML snippet adds a scroll-to-top button with accessibility attributes and links a custom stylesheet for in-product release notes. It demonstrates how to include interactive elements and custom styles in an HTML document.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_38.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Linking In-Product Release Notes Stylesheet HTML\nDESCRIPTION: Specifies an HTML link tag (`<link>`) to include an external CSS file located at `css/inproduct_releasenotes.css`. This stylesheet is essential for applying the visual presentation and styles defined for the in-product release notes view within VS Code. The comment preceding it warns against modification due to dependencies in build scripts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_16.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache for Docker Image Building in devcontainer.json\nDESCRIPTION: This snippet shows how to use the new 'cacheFrom' option in devcontainer.json to specify images to use as cache when building a Docker image. This option is passed to the 'docker build' command with '--cache-from', potentially speeding up the build process.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_58.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"cacheFrom\": \"<image identifier>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Installing VS Code .rpm Package using DNF\nDESCRIPTION: Installs a downloaded `.rpm` package file using `sudo dnf install`. This method does not set up automatic updates unless the YUM/DNF repository is also configured separately. Requires the `.rpm` file to be present in the path specified.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install <file>.rpm\n```\n\n----------------------------------------\n\nTITLE: Settings and JSON Attributes Formatting\nDESCRIPTION: Demonstrates inline code formatting for VS Code settings and JSON attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`files.exclude`\n`tasks.json`\n`preLaunchTask`\n```\n\n----------------------------------------\n\nTITLE: Installing GPG in a Debian/Ubuntu Container (Dockerfile)\nDESCRIPTION: Dockerfile instruction to install the `gnupg2` package in a Debian-based (like Ubuntu) container using `apt-get`. This is necessary to enable GPG key sharing for commit signing within the Dev Container. Assumes execution as the root user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install gnupg2 -y\n```\n\n----------------------------------------\n\nTITLE: JSConfig JSON Configuration for React Native\nDESCRIPTION: Configuration for jsconfig.json to enable synthetic default imports for React Native development.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"allowSyntheticDefaultImports\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code View Configuration Metadata\nDESCRIPTION: YAML frontmatter configuration for the documentation page, including content ID, approval date, and meta description for SEO.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/ux-guidelines/views.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nContentId: 1e37b895-d0b3-45b8-a071-107bd665248e\nDateApproved: 04/03/2025\nMetaDescription: UX guidelines for views in a Visual Studio Code extension.\n---\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Typings via NPM\nDESCRIPTION: Demonstrates how to use NPM to install TypeScript type definitions for libraries using the @types parameter. This example shows installing type definitions for the lodash library.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/lodash\n```\n\n----------------------------------------\n\nTITLE: Configuring onCommand Activation in package.json\nDESCRIPTION: Declaration of onCommand activation event that activates the extension when a specific command is invoked. In this example, the extension activates when the 'extension.sayHello' command is called.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onCommand:extension.sayHello\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Contributions in VS Code Extensions\nDESCRIPTION: Configuration for adding custom menu items to the Explorer context menu, including command definitions with icons and conditional visibility rules.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\n    {\n      \"command\": \"markdown.showPreview\",\n      \"title\": \"Open Preview\",\n      \"icon\": {\n        \"light\": \"./media/Preview.svg\",\n        \"dark\": \"./media/Preview_inverse.svg\"\n      }\n    }\n  ],\n  \"menus\": {\n    \"explorer/context\": [\n      {\n        \"when\": \"resourceLangId == markdown\",\n        \"command\": \"markdown.showPreview\",\n        \"group\": \"navigation\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Package Repository with Bash\nDESCRIPTION: Command to update Ubuntu package lists before installing development tools. This ensures you get the latest available versions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/cmake-linux.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Panel YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration metadata for the Panel documentation page, including content ID, approval date, and meta description for SEO purposes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/ux-guidelines/panel.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nContentId: 06ce3b57-9fd5-428a-98aa-d730edbd2728\nDateApproved: 04/03/2025\nMetaDescription: UX guidelines for the Panel Bar in a Visual Studio Code extension.\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed APIs in package.json for Extension Development\nDESCRIPTION: To try a proposed VS Code API, extension authors need to add the proposal's name to the `enabledApiProposals` array within their extension's `package.json` file. This signals intent to use the experimental API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_85.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\npackage.json#enabledApiProposals\n```\n\n----------------------------------------\n\nTITLE: Importing Language Client for Browser VS Code Extensions\nDESCRIPTION: Shows how to import the Language Server Protocol (LSP) client for browser-based VS Code extensions. This client enables communication with language servers running in web workers using the postMessage protocol.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/web-extensions.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageClient } from `vscode-languageclient/browser`\n```\n\n----------------------------------------\n\nTITLE: Building Java Spring Boot App with Maven\nDESCRIPTION: This command uses Maven to clean the project directory and package the application into a JAR or WAR file. The resulting artifact will be placed in the 'target' directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-spring-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Providing Signature Help Context to Providers in VS Code (TypeScript)\nDESCRIPTION: Updates the `SignatureHelpProvider` interface, showing that the `provideSignatureHelp` method now receives a `SignatureHelpContext` object as its fourth argument. This context object gives the provider information about why signature help was invoked (e.g., trigger character, manual invocation). This is part of a proposed API.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SignatureHelpProvider {\n  provideSignatureHelp(document: TextDocument, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelp>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Annotation Command in TypeScript\nDESCRIPTION: Modifies the extension.ts file to register the annotation command for the Code Tutor extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = vscode.commands.registerCommand('code-tutor.annotate', () => {\n```\n\n----------------------------------------\n\nTITLE: Configuring Attached Containers with JSON in VS Code\nDESCRIPTION: This JSON structure demonstrates how to configure the VS Code environment when attaching to a specific Docker image or named container. It allows setting a default workspace folder, container-specific settings, extensions to install, ports to forward, the remote user, and environment variables. This configuration is stored in image-specific or name-specific files (supporting a subset of devcontainer.json properties) and applied automatically upon attaching.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/attach-container.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Default path to open when attaching to a new container.\n    \"workspaceFolder\": \"/path/to/code/in/container/here\",\n\n    // Set *default* container specific settings.json values on container create.\n    \"settings\": {\n        \"terminal.integrated.defaultProfile.linux\": \"bash\"\n    },\n\n    // Add the IDs of extensions you want installed when the container is created.\n    \"extensions\": [\n        \"dbaeumer.vscode-eslint\"\n    ],\n\n    // An array port numbers to forward\n    \"forwardPorts\": [8000],\n\n    // Container user VS Code should use when connecting\n    \"remoteUser\": \"vscode\",\n\n    // Set environment variables for VS Code and sub-processes\n    \"remoteEnv\": { \"MY_VARIABLE\": \"some-value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening File at Specific Line and Column in Visual Studio Code\nDESCRIPTION: Demonstrates how to use the new -g command-line option to open a file at a specific line and column number in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_5_0.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncode -g c:\\mycode\\HelloWorld.ts:10:17\n```\n\n----------------------------------------\n\nTITLE: Using VS Code Core File Watcher for TypeScript (JSON)\nDESCRIPTION: This setting key, `typescript.tsserver.experimental.useVsCodeWatcher`, when set (presumably to `true` in `settings.json`), configures the TypeScript extension to utilize VS Code's built-in file watcher. This experimental approach aims to improve file watching efficiency, reliability, and resource consumption compared to the default Node.js-based implementation used by the TypeScript server.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntypescript.tsserver.experimental.useVsCodeWatcher\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to associate an external CSS file (`css/inproduct_releasenotes.css`) with the HTML document. The `rel=\"stylesheet\"` attribute specifies that the linked file provides styling rules, and `type=\"text/css\"` indicates the MIME type. This stylesheet defines the visual appearance for the in-product release notes. A preceding comment warns against modifying the styles without also checking a related regex in `gulpfile.common.js`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Writing Debug Adapter Tests with the VS Code Debug Client\nDESCRIPTION: Sample Mocha tests for debug adapters using the Promise-based testing toolkit. These tests verify program execution, stop on entry functionality, and breakpoint handling through the debug protocol.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar dc: DebugClient = ...;\n\ntest('should run program to the end', () => {\n    return Promise.all([\n        dc.configurationSequence(),\n        dc.launch({ program: \"main.js\" }),\n        dc.waitForEvent('terminated')\n    ]);\n});\n\ntest('should stop on entry', () => {\n    return Promise.all([\n        dc.configurationSequence(),\n        dc.launch({ program: \"main.js\", stopOnEntry: true }),\n        dc.assertStoppedLocation('entry', 1)\n    ]);\n});\n\ntest('should set a breakpoint and stop on it', () => {\n    return dc.hitBreakpoint({ program: \"main.js\" }, \"test.js\", 15);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings via .gitattributes (YAML)\nDESCRIPTION: Defines Git line ending normalization rules within a repository using a `.gitattributes` file. This configuration ensures most files use LF endings, while Windows batch files (.cmd, .bat) retain CRLF endings, which is useful for cross-platform projects developed within containers. Requires Git v2.10+.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/tips-and-tricks.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n* text=auto eol=lf\n*.{cmd,[cC][mM][dD]} text eol=crlf\n*.{bat,[bB][aA][tT]} text eol=crlf\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut\nDESCRIPTION: Keyboard shortcut command to open the Extensions view in VS Code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2016/02/23/introducing-chrome-debugger-for-vs-code.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.view.extensions)\n```\n\n----------------------------------------\n\nTITLE: Opening Project in VS Code\nDESCRIPTION: Command to open the current directory in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/dotnet.md#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Formatting Keyboard Shortcuts in Markdown\nDESCRIPTION: Various markdown snippets used to format keyboard shortcut references in the documentation\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2023/03/30/vscode-copilot.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.view.extensions)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkb(inlineChat.start)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.quickchat.toggle)\n```\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(Ctrl+I)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Inlined vs Inlined Constant Usage in Java\nDESCRIPTION: Comparison showing a redundant PI constant declaration where the constant is first referenced by variable name, then directly inlined in the calculation. This demonstrates a scenario where inline constant refactoring could be applied.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/java/java-refactoring.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate static final double PI = 3.14;\n\npublic double getArea(double r) {\n  return PI * r * r;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate static final double PI = 3.14;\n\npublic double getArea(double r) {\n  return 3.14 * r * r;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring onTerminalProfile Activation Event for VS Code Extension\nDESCRIPTION: This snippet demonstrates how to declare the onTerminalProfile activation event in a VS Code extension's manifest. It's emitted when a specific terminal profile is launched.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onTerminalProfile:terminalTest.terminal-profile\"\n]\n```\n\n----------------------------------------\n\nTITLE: Fallback Function for Electron Modules in VS Code Extension\nDESCRIPTION: This snippet provides a function to require Electron modules with a fallback to standard Node.js modules. This is useful when the extension needs to run in both Electron-based VS Code and standard Node.js environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/advanced-topics/remote-extensions.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction requireWithFallback(electronModule: string, nodeModule: string) {\n    try {\n        return require(electronModule);\n    }\n    catch (err) { }\n    return require(nodeModule);\n}\n\nconst fs = requireWithFallback('original-fs', 'fs');\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Task Auto-Detection in VSCode\nDESCRIPTION: Configuration options for controlling how VSCode generates build and watch tasks for tsconfig.json files. Allows specifying whether to generate build tasks, watch tasks, both, or disable task generation entirely.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_18.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.tsc.autoDetect\": \"build\" // only generate build tasks\n\"typescript.tsc.autoDetect\": \"watch\" // only generate build+watch tasks\n\"typescript.tsc.autoDetect\": \"on\"    // Generate both (default)\n\"typescript.tsc.autoDetect\": \"off\"   // Don't generate tsconfig build tasks\n```\n\n----------------------------------------\n\nTITLE: Implementing Notebook Will-Save Event Handler in VS Code Extensions\nDESCRIPTION: Example of registering a listener for the onWillSaveNotebookDocument event in VS Code. This proposed API event fires before a notebook document is saved, allowing extensions to perform actions like cleaning up notebook cell outputs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_77.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.workspace.onWillSaveNotebookDocument(e => {\n    if (event.reason == vscode.NotebookDocumentSaveReason.Manual) {\n      event.waitUntil(new Promise((resolve) => {\n        const notebookEdit = new vscode.NotebookEdit(...);\n        const edit = new vscode.WorkspaceEdit();\n        edit.set(event.document.uri, [notebookEdit]);\n        resolve([edit]);\n      }));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @devcontainers/cli package in Node.js\nDESCRIPTION: Demonstrates the simplified installation of the @devcontainers/cli package using npm. This package allows users to build and manage development containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_81.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nnpm install -g @devcontainers/cli\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for SUID Helper in Linux\nDESCRIPTION: Bash commands to fix the permissions of the chrome-sandbox SUID helper binary in Linux. These commands allow the sandbox to work properly by setting the correct ownership and permissions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_59.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown root <path-to-vscode>/chrome-sandbox\nsudo chmod 4755 <path-to-vscode>/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Selection Keybindings - VS Code JSON\nDESCRIPTION: This JSON snippet customizes keyboard shortcuts in Visual Studio Code for column selection actions, assigning combinations like \\\"shift+alt+down\\\" to corresponding editor commands. To use, add or modify entries in your keybindings.json. The \\\"when\\\" clause ensures shortcuts only work in editor text focus. The array permits multiple bindings and conditional activation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vMarch.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"key\": \"shift+alt+down\",     \"command\": \"cursorColumnSelectDown\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"shift+alt+left\",     \"command\": \"cursorColumnSelectLeft\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"shift+alt+pagedown\", \"command\": \"cursorColumnSelectPageDown\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"shift+alt+pageup\",   \"command\": \"cursorColumnSelectPageUp\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"shift+alt+right\",    \"command\": \"cursorColumnSelectRight\",\n                                        \"when\": \"editorTextFocus\" },\n    { \"key\": \"shift+alt+up\",       \"command\": \"cursorColumnSelectUp\",\n                                        \"when\": \"editorTextFocus\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Resolving Webview Content Issues in Remote Extensions\nDESCRIPTION: Extensions can use the webview.asWebviewUri method to resolve issues with vscode-resource:// URIs and ensure content appears correctly in remote environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nwebview.asWebviewUri(localResourceUri)\n```\n\n----------------------------------------\n\nTITLE: ControlMaster Configuration for Connection Reuse\nDESCRIPTION: SSH configuration for enabling ControlMaster to reuse existing connections and reduce authentication prompts.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/10/03/remote-ssh-tips-and-tricks.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nHost *\n    ControlMaster auto\n    ControlPath ~/.ssh/sockets/%r@%h-%p\n    ControlPersist 600\n```\n\n----------------------------------------\n\nTITLE: Defining Methods for LogOutputChannel in TypeScript\nDESCRIPTION: This TypeScript interface snippet defines the methods available on a `LogOutputChannel` object, obtained by calling `createOutputChannel` with `{ log: true }`. It provides standard logging level methods (`trace`, `debug`, `info`, `warn`, `error`) that accept a message string and optional arguments for formatting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ntrace(message: string, ...args: any[]): void;\ndebug(message: string, ...args: any[]): void;\ninfo(message: string, ...args: any[]): void;\nwarn(message: string, ...args: any[]): void;\nerror(error: string | Error, ...args: any[]): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Strikethrough Syntax Example\nDESCRIPTION: Demonstrates the syntax for creating strikethrough text in Markdown using double tildes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n~~strikethrough~~\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Renderer in package.json\nDESCRIPTION: JSON configuration for declaring a notebook renderer in extension's package.json\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\"....\"],\n  \"contributes\": {\n    \"notebookRenderer\": [\n      {\n        \"id\": \"github-issue-renderer\",\n        \"displayName\": \"GitHub Issue Renderer\",\n        \"entrypoint\": \"./out/renderer.js\",\n        \"mimeTypes\": [\n          \"ms-vscode.github-issue-notebook/github-issue\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Editor Widget Color Configuration\nDESCRIPTION: Color settings for editor widgets like Find/Replace dialog, suggestion widget, and editor hover\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editorWidget.foreground\": \"#color\",\n  \"editorWidget.background\": \"#color\",\n  \"editorWidget.border\": \"#color\",\n  \"editorSuggestWidget.background\": \"#color\",\n  \"editorHoverWidget.foreground\": \"#color\",\n  \"editorGhostText.border\": \"#color\",\n  \"editorStickyScroll.background\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies from requirements.txt - PowerShell\nDESCRIPTION: This snippet installs Python packages listed in requirements.txt into the currently active environment using pip. Dependencies: Python, pip, and a requirements.txt file must be present. Output is the installation of all specified packages, ensuring environment consistency.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/python-tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Keyboard Shortcuts in VSCode\nDESCRIPTION: JSON configuration showing how to set different keyboard shortcuts based on operating system using conditional 'when' clauses with isLinux, isMac and isWindows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_27.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"key\": \"ctrl+o\",\n    \"command\": \"workbench.action.files.openFolder\",\n    \"when\": \"!isMac\"\n  },\n  {\n    \"key\": \"cmd+o\",\n    \"command\": \"workbench.action.files.openFolder\",\n    \"when\": \"isMac\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Pack Dependencies in package.json\nDESCRIPTION: Shows how to create an Extension Pack by specifying extension dependencies in a package.json file. This example creates a PHP development pack that includes a debugger and language service extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n  \"extensionDependencies\": [\n      \"xdebug.php-debug\",\n      \"zobo.php-intellisense\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Link in HTML\nDESCRIPTION: This HTML snippet defines an anchor tag (`<a>`) styled as a button (`role=\"button\"`) to allow users to scroll back to the top of the page. It includes an `id` for targeting (`scroll-to-top`), an `aria-label` for accessibility, a `href=\"#\"` to target the top of the page, and an empty `span` likely used for displaying an icon via CSS styling defined in the linked stylesheet.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_9.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Word-Based Suggestions in Visual Studio Code Settings (JSON)\nDESCRIPTION: JSON snippet showing how to disable word-based suggestions in Visual Studio Code using the editor.wordBasedSuggestions setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/May_2016.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"editor.wordBasedSuggestions\": false\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom SSH Key in SSH Config (YAML)\nDESCRIPTION: Demonstrates how to configure the SSH config file to use a custom IdentityFile (private key) and specific user/host for a targeted SSH connection. Useful when managing multiple SSH keys for different hosts in VS Code, and ensures the correct credentials are always used for particular remote environments. Windows users may use forward slashes in paths or double-backslash with Windows-style paths.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nHost name-of-ssh-host-here\n    User your-user-name-on-host\n    HostName host-fqdn-or-ip-goes-here\n    IdentityFile ~/.ssh/id_ed25519-remote-ssh\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript/C++ Bridge Performance Example\nDESCRIPTION: Example explaining the performance implications of crossing JavaScript/C++ boundaries in VS Code's text buffer implementation, specifically in the context of the Toggle Line Comment command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nTextBuffer.getLineContent\n```\n\n----------------------------------------\n\nTITLE: Deleting VS Code User Data on macOS\nDESCRIPTION: Specifies the default locations of Visual Studio Code user data folders on macOS. Deleting these folders (`$HOME/Library/Application Support/Code` and `~/.vscode`) ensures a clean uninstall or reset of VS Code settings and data. These paths utilize standard macOS/Unix shell conventions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/setup-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/Library/Application Support/Code\n```\n\nLANGUAGE: shell\nCODE:\n```\n~/.vscode\n```\n\n----------------------------------------\n\nTITLE: Controlling Webview Access to Local Resources - Webview.resourceRoot Proposal - TypeScript\nDESCRIPTION: Demonstrates the use of the proposed resourceRoot property for webview panels. By extracting the root from which local resources are loaded, this pattern secures webview content to only load from allowed folders. The snippet incorporates resourceRoot for setting a strict Content Security Policy in the generated HTML. This method is essential for extensions needing to serve bundled media in webviews securely and portably across environments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {\n    // Restrict the webview to only loading local content from our extension's `media` directory.\n    localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]\n});\n\nconst resourceRoot = await panel.resourceRoot;\npanel.html = `<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; img-src ${resourceRoot} https:;\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Cat Coding</title>\n</head>\n<body>\n    <img src=\\\"${resourceRoot}/${path.join(extensionPath, 'media')}/cat.gif\\\" width=\\\"300\\\" />\n</body>\n</html>`\n```\n\n----------------------------------------\n\nTITLE: Using Tab Key for Navigation in VS Code\nDESCRIPTION: The `Tab` key is used for keyboard navigation. Its behavior has been improved so that it is no longer trapped by read-only editors, allowing focus to move out of them.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/vJanuary.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nTab\n```\n\n----------------------------------------\n\nTITLE: Defining a 2x2 Grid Editor Layout in JSON\nDESCRIPTION: This JSON object structure represents an argument for the `vscode.setEditorLayout` command. It defines a 2x2 grid layout by specifying an initial horizontal orientation (`0`) and nesting groups. The outer groups define two rows (each taking `0.5` or 50% of the height), and the inner groups define two columns within each row.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n orientation: 0, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}, {}], size: 0.5 }] \n}\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code in WSL from Terminal - Visual Studio Code - Shell\nDESCRIPTION: This snippet demonstrates how to open the current directory as a project in VS Code from within a WSL (Linux) terminal by running the 'code .' command. It relies on the VS Code executable being present in the system's PATH. Upon execution, VS Code will connect to WSL and initialize remote development features. Parameters include the dot (.) for the current directory as the path. The output is the VS Code window opened to the target folder running in the WSL environment. If VS Code is not in the PATH, this command will fail.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML snippet uses a `<link>` tag to include an external CSS stylesheet located at 'css/inproduct_releasenotes.css'. The `rel='stylesheet'` attribute indicates the relationship, and `type='text/css'` specifies the MIME type. This applies the styles defined in the CSS file to the current HTML document, specifically for styling in-product release notes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Bold Text Color Settings in JSON\nDESCRIPTION: This JSON configuration disables the automatic conversion of bold text to bright colors in the integrated terminal, allowing for more consistent color rendering across terminal emulators.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_25.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.drawBoldTextInBrightColors\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild Build Script\nDESCRIPTION: JavaScript build script that configures esbuild for bundling VS Code extensions. Includes production and watch mode support, with error reporting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst esbuild = require(\"esbuild\");\n\nconst production = process.argv.includes('--production');\nconst watch = process.argv.includes('--watch');\n\nasync function main() {\n\tconst ctx = await esbuild.context({\n\t\tentryPoints: [\n\t\t\t'src/extension.ts'\n\t\t],\n\t\tbundle: true,\n\t\tformat: 'cjs',\n\t\tminify: production,\n\t\tsourcemap: !production,\n\t\tsourcesContent: false,\n\t\tplatform: 'node',\n\t\toutfile: 'dist/extension.js',\n\t\texternal: ['vscode'],\n\t\tlogLevel: 'warning',\n\t\tplugins: [\n\t\t\t/* add to the end of plugins array */\n\t\t\tesbuildProblemMatcherPlugin,\n\t\t],\n\t});\n\tif (watch) {\n\t\tawait ctx.watch();\n\t} else {\n\t\tawait ctx.rebuild();\n\t\tawait ctx.dispose();\n\t}\n}\n\n/**\n * @type {import('esbuild').Plugin}\n */\nconst esbuildProblemMatcherPlugin = {\n\tname: 'esbuild-problem-matcher',\n\n\tsetup(build) {\n\t\tbuild.onStart(() => {\n\t\t\tconsole.log('[watch] build started');\n\t\t});\n\t\tbuild.onEnd((result) => {\n\t\t\tresult.errors.forEach(({ text, location }) => {\n\t\t\t\tconsole.error(`✘ [ERROR] ${text}`);\n                if (location == null) return;\n\t\t\t\tconsole.error(`    ${location.file}:${location.line}:${location.column}:`);\n\t\t\t});\n\t\t\tconsole.log('[watch] build finished');\n\t\t});\n\t}\n};\n\nmain().catch(e => {\n\tconsole.error(e);\n\tprocess.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter New Cell Creation in VS Code\nDESCRIPTION: This snippet demonstrates how to configure automatic cell creation when running the last cells in a Jupyter Interactive Window using Shift+Enter. It uses the 'jupyter.newCellOnRunLast' setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"jupyter.netCellOnRunLast\": false\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Find Widget Sash Border Color\nDESCRIPTION: Provides the configuration key for setting the border color of the sash within the VS Code Simple Find Widget. This identifier is used in theme files or `workbench.colorCustomizations`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n- `simpleFindWidget.sashBorder`: Border color of the sash border.\n```\n\n----------------------------------------\n\nTITLE: Always True Condition Example in TypeScript\nDESCRIPTION: Example showing a common programming mistake where a regular expression is used directly in a conditional without .test(), causing it to always evaluate to true\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_94.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst str = '...'\nif (/\\d+(\\.\\d+)?/) {\n  ...\n} else {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Context Key Usage for Webview Panel in JSON\nDESCRIPTION: Example of using the new activeWebviewPanelId context key in a when clause to enable commands or menu items when a specific webview is focused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_71.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"when\": \"activeWebviewPanelId == 'markdown.preview'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Indentation for Wrapped Lines in VS Code Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates a VS Code setting configuration contributed by user @h-h-h-h (PR #50542). It sets the `editor.wrappingIndent` property to `deepIndent`, which causes wrapped lines to receive an extra two levels of indentation (equivalent to two tabs or the configured tab size * 2 spaces) compared to the line they continue from, enhancing readability for continuation lines. This setting is typically placed in the user or workspace `settings.json` file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_24.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"editor.wrappingIndent\": \"deepIndent\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying Editor Group Locking Commands in Visual Studio Code (plaintext)\nDESCRIPTION: This code lists the available commands for locking, unlocking, or toggling the lock state of editor groups within the Visual Studio Code UI. These command IDs are used for mapping custom shortcuts, referencing in extension code, or running from the command palette. Use these to control group behavior programmatically or manually; no external dependencies are needed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nworkbench.action.lockEditorGroup\nworkbench.action.unlockEditorGroup\nworkbench.action.toggleEditorGroupLock\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Terminal Sessions in VS Code (JSON)\nDESCRIPTION: Illustrates how to enable or disable the restoration of terminal sessions in VS Code by setting the \"terminal.integrated.enablePersistentSessions\" property in the user or workspace settings. This JSON configuration controls whether local terminal state (processes, tabs, splits) is restored after a window reload. The key parameter is a boolean that toggles session persistence, impacting user workflow and terminal continuity.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal.integrated.enablePersistentSessions\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Content to VS Code in Remote Terminal (Bash)\nDESCRIPTION: Demonstrates how to pipe content to the 'code' command in the Integrated Terminal of remote windows. This allows for easy opening of command output directly in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_42.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps aux | code -\n```\n\n----------------------------------------\n\nTITLE: Contributing Commands to macOS Touch Bar in package.json\nDESCRIPTION: Provides a JSON snippet demonstrating how to contribute a command to the macOS Touch Bar from a VS Code extension's `package.json` file. It uses the `contributes.menus.touchBar` property to specify the command (`markdown.showPreview`), a condition for its visibility (`when: \"editorLangId == markdown\"`), and its grouping (`group: \"navigation\"`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"contributes\": {\n    \"menus\": {\n      \"touchBar\": [\n        {\n          \"command\": \"markdown.showPreview\",\n          \"when\": \"editorLangId == markdown\",\n          \"group\": \"navigation\"\n        }\n      ]\n     }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Languages in package.json\nDESCRIPTION: JSON configuration in package.json for an injection grammar that highlights SQL queries in JavaScript strings and sets up proper language scoping.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"grammars\": [\n      {\n        \"path\": \"./syntaxes/injection.json\",\n        \"scopeName\": \"sql-string.injection\",\n        \"injectTo\": [\"source.js\"],\n        \"embeddedLanguages\": {\n          \"meta.embedded.inline.sql\": \"sql\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Persistence Options in TypeScript\nDESCRIPTION: Interface definition for terminal options that allows disabling terminal persistence on restart and reload through the disablePersistence flag.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TerminalOptions {\n  disablePersistence?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Reference Link Example\nDESCRIPTION: An example of reference links in Markdown, which are now detected as links in the VS Code editor. Clicking on 'link definition' in the text will jump to the corresponding reference link definition.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSome text with a [link][link definition] in it\n\n[link definition]: /path/to/link\n```\n\n----------------------------------------\n\nTITLE: Identifier for TypeScript SDK Path Setting (JSON)\nDESCRIPTION: This setting identifier, `typescript.tsdk`, refers to a VS Code Workspace setting. It allows specifying the path to a specific TypeScript SDK (Software Development Kit) installation to be used by VS Code for language services within that workspace, overriding the version bundled with VS Code. This setting is typically configured automatically when choosing to use a workspace's TypeScript version.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ntypescript.tsdk\n```\n\n----------------------------------------\n\nTITLE: Authorizing macOS/Linux Host with ssh-copy-id (Bash)\nDESCRIPTION: Copies the local public SSH key to a remote macOS or Linux host to authorize password-less login. Uses `ssh-copy-id`, which appends the public key to the remote user's authorized_keys file, provided both USER_AT_HOST and PUBKEYPATH are defined. Useful for automating secure SSH setup for VS Code Remote connections.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport USER_AT_HOST=\"your-user-name-on-host@hostname\"\nexport PUBKEYPATH=\"$HOME/.ssh/id_ed25519.pub\"\n\nssh-copy-id -i \"$PUBKEYPATH\" \"$USER_AT_HOST\"\n\n```\n\n----------------------------------------\n\nTITLE: Specifying a PuTTY-Generated Key in SSH Config (YAML)\nDESCRIPTION: Shows how to reference a PuTTYGen-exported OpenSSH private key file in your SSH configuration for connecting to remote hosts via VS Code or OpenSSH client. Ensures compatibility when migrating from PuTTY to OpenSSH-based workflows, specifying host, user, hostname, and location of the newly converted key file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nHost name-of-ssh-host-here\n    User your-user-name-on-host\n    HostName host-fqdn-or-ip-goes-here\n    IdentityFile ~/.ssh/exported-keyfile-from-putty\n\n```\n\n----------------------------------------\n\nTITLE: Configuring $EDITOR for VS Code on Windows Hosts (PowerShell)\nDESCRIPTION: Assigns the EDITOR environment variable in PowerShell to launch VS Code or VS Code Insiders when called by terminal-based commands while inside a VS Code remote environment on Windows. Detects if the VSCODE_INJECTION environment variable is set and ensures EDITOR is updated accordingly so command-line operations like `git commit` invoke VS Code for editing tasks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\nif ($env:VSCODE_INJECTION -eq \"1\") {\n    $env:EDITOR = \"code --wait\"  # or 'code-insiders' for VS Code Insiders\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Text and File Search Providers - VS Code Proposed API - TypeScript\nDESCRIPTION: This group of interfaces and functions enables extension authors to implement custom text and file search behaviors in VS Code. By providing implementations for 'TextSearchProvider', 'FileIndexProvider', or 'FileSearchProvider', an extension can participate in search queries made by users or programmatically via the VS Code API. Registration functions associate providers with workspace schemes. Dependencies include the relevant types from the VS Code extension API and the 'vscode.proposed.d.ts' file when using proposed APIs. Key parameters manage queries, options, asynchronous results, and cancellation tokens.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_26.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextSearchProvider {\n    provideTextSearchResults(query: TextSearchQuery, options: TextSearchOptions, progress: Progress<TextSearchResult>, token: CancellationToken): Thenable<void>;\n}\n\nexport interface FileIndexProvider {\n    provideFileIndex(options: FileIndexOptions, token: CancellationToken): Thenable<Uri[]>;\n}\n\nexport interface FileSearchProvider {\n    provideFileSearchResults(query: FileSearchQuery, options: FileSearchOptions, token: CancellationToken): Thenable<Uri[]>;\n}\n\nexport namespace workspace {\n    export function registerTextSearchProvider(scheme: string, provider: TextSearchProvider): Disposable;\n    export function registerFileIndexProvider(scheme: string, provider: FileIndexProvider): Disposable;\n    export function registerFileSearchProvider(scheme: string, provider: FileSearchProvider): Disposable;\n}\n```\n\n----------------------------------------\n\nTITLE: Authoring Snippets with Multi-line Descriptions in JSON\nDESCRIPTION: Shows how to write long snippet descriptions using string arrays in JSON format rather than a single long string. This allows more readable and maintainable snippets definitions.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prefix\": \"happy\",\n    \"body\": \"#Happy Coding!\",\n    \"description\": [\n      \"First Line\",\n      \"Second Line\",\n      \"Third Line\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding QuickPickItem Separators in VS Code Extensions\nDESCRIPTION: Demonstrates how to add separator items to Quick Pick menus using QuickPickItemKind.Separator.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    label: 'APIs',\n    kind: QuickPickItemKind.Separator\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Preferences with Simplified Format in JSON\nDESCRIPTION: An example of the newer, simpler format for configuring Emmet preferences in VS Code. This example shows how to set the 'filter.commentAfter' preference using the simplified syntax in Emmet 2.0.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_17.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"emmet.preferences\": {\n    \"filter.commentAfter\": \"\\n<!-- /[#ID][.CLASS] -->\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dev Container ID Variable in Feature JSON Configuration\nDESCRIPTION: This code snippet demonstrates how to use the ${devcontainerId} variable in a devcontainer-feature.json file. It's used to create a unique volume mount for a Docker-in-Docker feature, ensuring each Dev Container has its own isolated Docker storage.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_73.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"docker-in-docker\",\n    \"version\": \"1.0.4\",\n    // ...\n    \"mounts\": [\n        {\n            \"source\": \"dind-var-lib-docker-${devcontainerId}\",\n            \"target\": \"/var/lib/docker\",\n            \"type\": \"volume\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Hidden Terminals - VS Code TerminalOptions API - TypeScript\nDESCRIPTION: Illustrates the creation of a hidden terminal in VS Code extensions, leveraging the 'hideFromUser' property in TerminalOptions. This allows background operations to be performed in a terminal without showing it to the user until explicitly requested. The terminal can be interacted with via sendText and monitored for write events, making it ideal for background connection setups.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_36.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst term = window.createTerminal({ hideFromUser: true });\nterm.sendText('do something')\n```\n\n----------------------------------------\n\nTITLE: Authorizing Windows Host with OpenSSH Server (Bash)\nDESCRIPTION: Copies a public SSH key to a Windows remote host running OpenSSH Server, where the user is an administrator. Uses Bash to invoke a PowerShell command on the host to append the public key to administrators_authorized_keys. Automates the process for allowing password-less SSH access from VS Code or similar tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport USER_AT_HOST=\"your-user-name-on-host@hostname\"\nexport PUBKEYPATH=\"$HOME/.ssh/id_ed25519.pub\"\n\nssh $USER_AT_HOST \"powershell Add-Content -Force -Path \\\"$Env:PROGRAMDATA\\\\ssh\\\\administrators_authorized_keys\\\" -Value '$(tr -d '\\n\\r' < \\\"$PUBKEYPATH\\\")'\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Update Mode Policy in macOS Configuration Profile (XML)\nDESCRIPTION: This XML snippet shows how to configure the `UpdateMode` policy in a VS Code `.mobileconfig` file on macOS. This policy accepts one of a set of predefined string values (like 'start', 'manual', 'none'). Here, it's set to 'start', illustrating how simple string values are assigned to policies.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/enterprise.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>UpdateMode</key>\n<string>start</string>\n```\n\n----------------------------------------\n\nTITLE: Defining Problem Matcher Pattern Interface in TypeScript\nDESCRIPTION: This interface specifies the structure for configuring problem matcher patterns in VS Code. It includes properties for capturing various aspects of a problem, such as file location, severity, and message.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/reference/tasks-appendix.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RunOptions {\n    /**\n     * Controls how variables are evaluated when a task is executed through\n     * the Rerun Last Task command.\n     * The default is `true`, meaning that variables will be re-evaluated when\n     * a task is rerun. When set to `false`, the resolved variable values from\n     * the previous run of the task will be used.\n     */\n    reevaluateOnRerun?: boolean;\n\n    /**\n     * Specifies when a task is run.\n     *\n     * Valid values are:\n     *   \"default\": The task will only be run when executed through the Run Task command.\n     *   \"folderOpen\": The task will be run when the containing folder is opened.\n     */\n    runOn?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Dedicated SSH Key for Remote Development (Bash)\nDESCRIPTION: Generates a separate Ed25519 SSH key pair specifically for development hosts to limit risk if a private key is ever compromised. The key is stored in a user-defined file path, enabling logical separation of credentials for different types of SSH access. This approach is encouraged for enhanced security in remote workflows with VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519 -f ~/.ssh/id_ed25519-remote-ssh\n\n```\n\n----------------------------------------\n\nTITLE: Generating JSDoc Template with @returns Tag in JavaScript - JavaScript\nDESCRIPTION: This snippet shows how VS Code's JSDoc generation templates can automatically include the '@returns' tag when annotating a function that has a return statement. The example annotates the 'getViz' function, which returns a property from the input object. To use, place the JSDoc above the function definition in a JavaScript file. The input is a function with a return value; the output is a JSDoc comment including '@param' and '@returns'. Feature depends on JavaScript language tooling in VS Code; can be disabled via configuration settings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_54.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n *\n * @param {*} el\n * @returns\n */\nfunction getViz(el){\n    return el?.viz;\n}\n```\n\n----------------------------------------\n\nTITLE: Revealing an Item Without Selection in Custom Tree Views (JavaScript)\nDESCRIPTION: Shows calling the 'reveal' method with an options object to reveal an item in a custom VS Code view without selecting it. The 'select' property in the options argument is set to 'false' to prevent item selection. This usage assumes the view was registered as shown in the TypeScript snippet and is suitable for custom extension user interfaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_21.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  customView.reveal('element', {select: false});\n```\n\n----------------------------------------\n\nTITLE: Setting Poetry Executable Path in VS Code Python\nDESCRIPTION: Defines the location of the Poetry dependency manager executable. The default value `\"poetry\"` assumes the executable is in the current PATH. This setting is used by the extension to install packages when Poetry is detected (via a `poetry.lock` file).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/settings-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"poetry\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Navigation Mode Commands in VS Code\nDESCRIPTION: JSON configuration for customizing terminal accessibility keybindings in VS Code. These commands enable line navigation mode for screen readers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nworkbench.action.terminal.navigationModeExit\nworkbench.action.terminal.navigationModeFocusNext\nworkbench.action.terminal.navigationModeFocusPrevious\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript SDK in Visual Studio Code\nDESCRIPTION: Setting to specify a custom TypeScript SDK location in Visual Studio Code. This allows using newer versions of TypeScript, such as TypeScript 1.6.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_8_0.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"typescript.tsdk\": \"<path_to_typescript_lib_folder>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Extension Contributions in package.json for VS Code\nDESCRIPTION: This snippet demonstrates how to configure a package.json file for a VS Code extension that combines multiple contributions including language support, grammar, and snippets for LaTeX.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/extension-manifest.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"language-latex\",\n  \"description\": \"LaTex Language Support\",\n  \"version\": \"0.0.1\",\n  \"publisher\": \"someone\",\n  \"engines\": {\n    \"vscode\": \"0.10.x\"\n  },\n  \"categories\": [\"Programming Languages\", \"Snippets\"],\n  \"contributes\": {\n    \"languages\": [\n      {\n        \"id\": \"latex\",\n        \"aliases\": [\"LaTeX\", \"latex\"],\n        \"extensions\": [\".tex\"]\n      }\n    ],\n    \"grammars\": [\n      {\n        \"language\": \"latex\",\n        \"scopeName\": \"text.tex.latex\",\n        \"path\": \"./syntaxes/latex.tmLanguage.json\"\n      }\n    ],\n    \"snippets\": [\n      {\n        \"language\": \"latex\",\n        \"path\": \"./snippets/snippets.json\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Attributes with Regex in VS Code Remote\nDESCRIPTION: This JSON snippet demonstrates how to use the 'remote.portsAttributes' setting with a regular expression to match against command lines of forwarded ports. It configures VS Code to open a preview when a port with '/server.js' in its command line is forwarded.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_55.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remote.portsAttributes\": {\n        \".+/server.js\": {\n            \"onAutoForward\": \"openPreview\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty String Policy in macOS Configuration Profile (XML)\nDESCRIPTION: This XML snippet shows the basic structure for defining a string-based policy key, specifically `AllowedExtensions`, within a macOS `.mobileconfig` file for VS Code. The empty `<string></string>` tags indicate that initially, no value is set for this policy in the sample file provided with VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/enterprise.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>AllowedExtensions</key>\n<string></string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Git User Name and Email Locally (Bash)\nDESCRIPTION: Sets the global Git user name and email address on the local machine. This configuration is automatically copied into the Dev Container by the extension, so it doesn't need to be run inside the container.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/sharing-git-credentials.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@address\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Type Checking in JavaScript File\nDESCRIPTION: Demonstrates how to enable TypeScript type checking in a JavaScript file using a comment directive. This allows catching type-related errors in JavaScript code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_12.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\nlet easy = 'abc'\neasy = 123 // Error: Type '123' is not assignable to type 'string'\n```\n\n----------------------------------------\n\nTITLE: Registering a Language Model Tool in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a custom language model tool with VS Code on extension activation. It uses the vscode.lm.registerTool method to register a TabCountTool.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/tools.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function registerChatTools(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.lm.registerTool('chat-tools-sample_tabCount', new TabCountTool()));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Watcher Limit\nDESCRIPTION: Command to view the current system limit for file watchers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/sys/fs/inotify/max_user_watches\n```\n\n----------------------------------------\n\nTITLE: Defining User Snippets in VS Code\nDESCRIPTION: Example of defining a custom Node.js require statement snippet in VS Code. The snippet includes a prefix for IntelliSense filtering, a body template with placeholders, and a description field.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_5_0.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Node Require\" : {\n\t\t\"prefix\": \"require\",\n\t\t\"body\": [\n\t\t\t\"var ${module} = require('${module}');\",\n\t\t\t\"$0\"\n\t\t],\n\t\t\"description\": \"Node require statement\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Git line-ending conversion globally - Bash\nDESCRIPTION: This Bash command disables Git's automatic line-ending conversion for all repositories on the system by setting core.autocrlf to false in the global configuration. This allows files to retain their line endings as committed without normalization. Git must be installed; no further dependencies are required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf false\n\n```\n\n----------------------------------------\n\nTITLE: Manual Fine-tuning Configuration Example\nDESCRIPTION: JSON configuration for manual setup of Azure resources for fine-tuning. Includes subscription details, resource names, and custom commands for model downloading and training.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/finetune.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SUBSCRIPTION_ID\": \"<your-subscription-id>\",\n  \"RESOURCE_GROUP_NAME\": \"<your-resource-group-name>\",\n  \"STORAGE_ACCOUNT_NAME\": \"<your-storage-account-name>\",\n  \"FILE_SHARE_NAME\": \"<your-file-share-name>\",\n  \"ACA_JOB_NAME\": \"<your-aca-job-name>\",\n  \"COMMANDS\": [\n    \"cd /mount\",\n    \"pip install huggingface-hub==0.22.2\",\n    \"huggingface-cli download <your-model-name> --local-dir ./model-cache/<your-model-name> --local-dir-use-symlinks False\",\n    \"pip install -r ./setup/requirements.txt\",\n    \"python3 ./finetuning/invoke_olive.py && find models/ -print | grep adapter/adapter\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Type Checking via jsconfig.json\nDESCRIPTION: This JSON snippet shows a `jsconfig.json` configuration file. Setting the `checkJs` property within `compilerOptions` to `true` enables TypeScript type checking for all JavaScript files within the project context defined by this file, excluding specified directories like `node_modules`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/nodejs/working-with-javascript.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"checkJs\": true\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/node_modules/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Cleaning Up VS Code Server Processes and Files on Remote (Bash)\nDESCRIPTION: Script to forcibly kill all VS Code Server processes for the current user and remove server data directories on a remote host. Requires shell access and permissions to run kill and rm -rf. Intended for troubleshooting or manual cleanup scenarios.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# Kill server processes\nkill -9 $(ps aux | grep vscode-server | grep $USER | grep -v grep | awk '{print $2}')\n# Delete related files and folder\nrm -rf $HOME/.vscode-server # Or ~/.vscode-server-insiders\n\n```\n\n----------------------------------------\n\nTITLE: Disabling apt-key Warning via Environment Variable in Dockerfile\nDESCRIPTION: Sets the `APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE` environment variable within the Docker build context to completely suppress the 'stdout is not a terminal' warning issued by `apt-key`. Use comments to explain why this is considered safe in your specific context, as it hides a potentially useful warning.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\n# Suppress an apt-key warning about standard out not being a terminal. Use in this script is safe.\nENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn\n```\n\n----------------------------------------\n\nTITLE: Restructuring Dev Container Configuration in VS Code\nDESCRIPTION: This snippet demonstrates the new structure for VS Code-specific properties in the devcontainer.json file. Settings and extensions are now nested under a 'vscode' property within the 'customizations' object, preparing for an open specification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_67.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"customizations\": {\n        \"vscode\": {\n            \"settings\": { /*...*/ },\n            \"extensions\": [ /*...*/ ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dev Containers Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to create a badge in Markdown that allows users to open a GitHub repository in Dev Containers. It includes an image shield and a link to clone the repository in a container volume.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_66.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20-%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)\n```\n\n----------------------------------------\n\nTITLE: Updating Visual Studio Code Package via APT on Raspberry Pi OS (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to refresh the package index and upgrade an existing VS Code ('code') installation to the latest available version via APT. Requires 'sudo' privileges and assumes 'code' is already installed. Input: none; Output: VS Code updated to the latest version supported by the repository.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/raspberry-pi.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\\nsudo apt upgrade code\n```\n\n----------------------------------------\n\nTITLE: Illustrating Problematic Map Access Suppressed by `suppressImplicitAnyIndexErrors` (TypeScript)\nDESCRIPTION: This TypeScript snippet highlights a potential coding error previously masked by the `\"suppressImplicitAnyIndexErrors\": true` TypeScript compiler option. It creates a standard JavaScript `Map`, adds an entry, and then attempts to check for the key's existence using bracket notation (`map['property']`). This is incorrect for `Map` objects (the correct method is `map.has('property')` or `map.get('property')`) and would normally be flagged as a type error, but was suppressed, potentially leading to runtime bugs where `doImportantStuff()` might execute unexpectedly or fail to execute when intended.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_37.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map()\nmap.set('property', true);\n\n...\n\nif (map['property']) { // This is not an TS error but it does not do what you want!\n    doImportantStuff();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Function Example\nDESCRIPTION: A simple TypeScript function declaration used to demonstrate LSIF hover functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/02/19/lsif.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar(): void {\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Build Context Argument in Dockerfile (Bash)\nDESCRIPTION: A Bash script snippet, used within a Dockerfile `RUN` instruction after declaring `ARG vscode` (or similar), to check if a specific build argument (`devcontainercli` in this example) was passed during the `docker build` command. If the argument is not present or empty (`-z \"$devcontainercli\"`), it prints an error and exits with code 1, ensuring the Dockerfile is built using the intended environment (e.g., VS Code Dev Containers).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/reduce-docker-warnings.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nARG vscode\nRUN if [[ -z \"$devcontainercli\" ]] ; then printf \"\\nERROR: This Dockerfile needs to be built with VS Code !\" && exit 1; else printf \"VS Code is detected: $devcontainercli\"; fi\n```\n\n----------------------------------------\n\nTITLE: Legacy Accessibility Signal Configuration\nDESCRIPTION: Shows the previous configuration format for audio cues and accessibility alerts in VS Code\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_87.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"audioCues.clear\": \"on | auto | off\",\n\"accessibility.alert.clear\": true | false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Import Updates on Paste in TypeScript JSON Settings\nDESCRIPTION: This JSON setting enables or disables the feature where VS Code automatically adds necessary imports when pasting TypeScript or JavaScript code containing undefined symbols. Setting it to `false` disables this behavior. It is enabled by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ntypescript.updateImportsOnPaste.enabled\n```\n\n----------------------------------------\n\nTITLE: Referencing the Python Terminal Environment Activation Experiment\nDESCRIPTION: This identifier (`pythonTerminalEnvVarActivation`) refers to an experimental feature in the VS Code Python extension related to environment variable activation within the integrated terminal. Opting into this experiment resolves issues with incorrect working directory prompts when using Git Bash on Windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_98.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\npythonTerminalEnvVarActivation\n```\n\n----------------------------------------\n\nTITLE: Adding MCP Server via VS Code CLI (Bash)\nDESCRIPTION: Demonstrates using the VS Code command-line interface (`code`) with the `--add-mcp` option to register an MCP server configuration directly to the user profile. The command takes a JSON string defining the server's name, command, and arguments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/mcp-servers.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode --add-mcp \"{\\\"name\\\":\\\"my-server\\\",\\\"command\\\": \\\"uvx\\\",\\\"args\\\": [\\\"mcp-server-fetch\\\"]}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed APIs in package.json\nDESCRIPTION: Specifies the necessary entry in an extension's `package.json` file to enable the use of proposed VS Code APIs. Setting `enableProposedApi` to `true` is required for testing experimental features, but extensions using proposed APIs cannot be published to the Marketplace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"enableProposedApi\": true\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose YAML for Remote Development\nDESCRIPTION: This YAML snippet demonstrates how to modify a docker-compose.yml file for remote development. It shows configurations for both volume mounts and bind mounts, depending on whether the user has login access to the remote host.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/develop-remote-host.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n        - remote-workspace:/workspace\n    # ...\n\nvolumes:\n  remote-workspace:\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n    volumes:\n      - /absolute/path/on/remote/machine:/workspace:cached\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Container User and Environment in devcontainer.json\nDESCRIPTION: New configuration options in devcontainer.json for single containers to specify the user for starting the container, environment variables, and additional mount points. These settings provide finer control over container configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_41.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"containerUser\": \"string\",\n  \"containerEnv\": {\n    \"key\": \"value\"\n  },\n  \"mounts\": [\n    \"source:target\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Next Edit Suggestions in VS Code Settings (JSON)\nDESCRIPTION: JSON setting to enable Next Edit Suggestions (NES) feature in Visual Studio Code. This feature suggests edits based on recent changes made by the user.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"github.copilot.nextEditSuggestions.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Creating Scroll-to-Top Link in HTML\nDESCRIPTION: Defines an HTML anchor (`<a>`) tag acting as a 'Scroll to top' button. It uses `id=\"scroll-to-top\"`, accessibility attributes (`role`, `title`, `aria-label`), and an empty `<span>` with class `icon` for visual representation, likely styled via CSS. It links to '#' to navigate to the top of the current page. A comment above warns against modifying it without updating a related regex in gulpfile.common.js.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n```\n\n----------------------------------------\n\nTITLE: Defining CustomListSizeType for Collection Size Specification\nDESCRIPTION: XML schema complex type that specifies the total number of items in a collection. This information is used by the debugger to optimize visualization and navigation of the collection.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<xs:complexType name=\"CustomListSizeType\">\n    <xs:annotation>\n      <xs:documentation>Specifies the total number of items in the collection.</xs:documentation>\n    </xs:annotation>\n    <xs:simpleContent>\n      <xs:extension base=\"StringType\">\n        <xs:attribute name=\"Condition\" type=\"ConditionType\" use=\"optional\" />\n      </xs:extension>\n    </xs:simpleContent>\n  </xs:complexType>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Piece Tree Classes for Reduced Object Allocation in TypeScript\nDESCRIPTION: This snippet shows an optimized version of the piece tree classes, introducing Buffer and BufferPosition classes to reduce object allocation and improve performance for line break handling.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2018/03/23/text-buffer-reimplementation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Buffer {\n    value: string;\n    lineStarts: number[];\n}\n\nclass BufferPosition {\n    index: number; // index in Buffer.lineStarts\n    remainder: number;\n}\n\nclass PieceTable {\n    buffers: Buffer[];\n    rootNode: Node;\n}\n\nclass Node {\n    bufferIndex: number;\n    start: BufferPosition;\n    end: BufferPosition;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Print Hyperlink in Terminal - C++\nDESCRIPTION: Example showing how to create a hyperlink in the terminal with a custom label pointing to a URL using printf and VT escape sequences.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_72.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nprintf '\\e]8;;https://code.visualstudio.com\\e\\\\VS Code\\e]8;;\\e\\\\'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Remote-SSH Extensions in VS Code\nDESCRIPTION: This setting key (`remote.SSH.defaultExtensionsIfInstalledLocally`) defines a list of extensions that, if installed locally, should be automatically installed into a remote SSH environment when connecting. This feature mirrors existing functionality in the Dev Containers extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_97.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(remote.SSH.defaultExtensionsIfInstalledLocally)\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental IntelliSense for PowerShell in VS Code Terminal\nDESCRIPTION: This JSON snippet shows how to enable experimental IntelliSense for PowerShell in the VS Code integrated terminal. It allows for context-aware completions similar to the editor experience.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/terminal/shell-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.suggest.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Reporting Hit Breakpoints in Debug Adapter Protocol\nDESCRIPTION: Specifies the optional `hitBreakpointIds` attribute added to the Debug Adapter Protocol's `stopped` event. This attribute contains an array of numeric IDs corresponding to the breakpoints that caused the debugger to stop.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n// In the 'stopped' event payload\n{\n  ...\n  \"hitBreakpointIds\": [1, 3]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Selection Keyboard Shortcut in VS Code\nDESCRIPTION: JSON configuration for adding a keyboard shortcut to select an item from a list while keeping focus in that list. This is useful for selecting multiple files without focus moving to the file editor.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_47.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"ctrl+o\",\n    \"command\": \"list.selectAndPreserveFocus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default TensorBoard Log Directory in VS Code Settings\nDESCRIPTION: Specifies the Visual Studio Code setting key (`python.tensorboard.logDirectory`) used to define a default directory path for TensorBoard log files for the current folder or workspace. Setting this avoids the prompt to select a log directory each time the 'Python: Launch TensorBoard' command is executed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/datascience/pytorch-support.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npython.tensorboard.logDirectory\n```\n\n----------------------------------------\n\nTITLE: Setting the Default WSL Distribution using Batch\nDESCRIPTION: This batch command uses the `wslconfig.exe` utility to set the specified Linux distribution (in this case, 'Ubuntu') as the default for WSL. This is sometimes necessary when working with older versions of WSL that require operations to run on the default distribution.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_3\n\nLANGUAGE: bat\nCODE:\n```\nwslconfig /setdefault Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Installing Python and Pip using Apt in Bash (WSL)\nDESCRIPTION: These Bash commands update the package list and install Python 3 along with its package installer, pip, within the WSL Linux distribution (like Ubuntu). Requires 'sudo' privileges to execute.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3 python3-pip\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Release Notes\nDESCRIPTION: HTML elements for the in-product release notes, including a scroll-to-top button and a stylesheet link. These elements are used to format the release notes within the VS Code product interface.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"scroll-to-top\" role=\"button\" title=\"Scroll to top\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy File Watcher in VS Code\nDESCRIPTION: This snippet demonstrates how to configure the legacy file watcher behavior in VS Code. It uses the 'files.legacyWatcher' setting with options for always using the new watcher, never using it, or using it only for multi-root workspaces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_62.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"files.legacyWatcher\": \"default\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Python REPL Configuration\nDESCRIPTION: Settings to use in-terminal Python REPL and modify execution behavior with Shift+Enter\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_90.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"python.REPL.sendToNativeREPL\": false,\n\"interactiveWindow.executeWithShiftEnter\": false\n```\n\n----------------------------------------\n\nTITLE: Setting onRenderer Activation Event in VS Code Extension\nDESCRIPTION: This code example shows how to specify the onRenderer activation event in a VS Code extension's manifest. It's emitted when a notebook output renderer with the specified ID is used.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onRenderer:ms-toolsai.jupyter-renderers\"\n]\n```\n\n----------------------------------------\n\nTITLE: Auto-Lock Editor Groups Configuration\nDESCRIPTION: Example configuration to auto-lock Markdown preview in editor groups using the experimental setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_60.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"mainThreadWebview-markdown.preview: true\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Commands Configuration Table\nDESCRIPTION: Table defining new VS Code keyboard commands and their corresponding command IDs for panel positioning and editor navigation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nKey|Command|Command ID\n---|-------|----------\n`kb(workbench.action.positionPanelLeft)`|Move Panel Left|`workbench.action.positionPanelLeft`\n`kb(workbench.action.positionPanelRight)`|Move Panel Right|`workbench.action.positionPanelRight`\n`kb(workbench.action.positionPanelBottom)`|Move Panel To Bottom|`workbench.action.positionPanelBottom`\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed UNC Hosts via VS Code Setting\nDESCRIPTION: This VS Code setting key, `security.allowedUNCHosts`, is used to specify a list of hostnames from which UNC paths (like \\\\server-a\\path) are allowed to be accessed. This is a security measure introduced in VS Code 1.78.1. The setting needs to be configured within VS Code's settings (settings.json). For remote workspaces (like SSH), this setting must be configured on the remote machine.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/windows.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsetting(security.allowedUNCHosts)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nserver-a\n```\n\n----------------------------------------\n\nTITLE: Deployment Options Reference Table in Markdown\nDESCRIPTION: A markdown table showing available deployment tutorials with their descriptions and supported frameworks/languages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/azure/deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTutorial(s) | Description | Framework / Language\n--- | --- | ---\n[Deploy a static website](https://learn.microsoft.com/azure/static-web-apps/getting-started) | Create, deploy, and update a static website | Angular, Blazor, React, or Vue\n[Deploy Node.js apps](/docs/nodejs/nodejs-deployment.md) | Deploy web apps, containerized apps, or serverless code | Node.js\n[Deploy Python apps](/docs/python/python-on-azure.md) | Deploy web apps, containerized apps, or serverless code | Python\n[Deploy Java apps](/docs/java/java-on-azure.md) | Deploy web apps, Spring Boot apps, or serverless code | Java\n```\n\n----------------------------------------\n\nTITLE: Setting VS Code Log Level via Command Line\nDESCRIPTION: Command line argument to configure VS Code's logging level. Supports levels from critical to trace, with info as default. Can disable logging completely with 'off' option.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--log <level>\n    Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.\n```\n\n----------------------------------------\n\nTITLE: Listing Installed WSL Distributions using Batch\nDESCRIPTION: This batch command utilizes `wslconfig.exe` with the `/l` flag to list all the Linux distributions currently installed under WSL on the Windows machine. This helps identify available distributions that can be set as default or used with VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl.md#2025-04-23_snippet_4\n\nLANGUAGE: bat\nCODE:\n```\nwslconfig /l\n```\n\n----------------------------------------\n\nTITLE: Native Window Handle API Declaration - TypeScript\nDESCRIPTION: Type declaration for the proposed native window handle API that provides access to the OS-level window handle. Used for native integrations like rendering dialogs on top of VS Code windows.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_96.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'vscode' {\n\n\texport namespace window {\n\t\t/**\n\t\t * Retrieves the native window handle of the current active window.\n\t\t * This will be updated when the active window changes.\n\t\t */\n\t\texport const nativeHandle: Uint8Array | undefined;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WSL Feature via PowerShell\nDESCRIPTION: This PowerShell command enables the Windows Subsystem for Linux optional feature on the Windows system. It requires running PowerShell with Administrator privileges. After execution, a system restart is typically required.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n```\n\n----------------------------------------\n\nTITLE: Setting Remote SSH Connect Timeout (JSON)\nDESCRIPTION: Configuration for setting the connection timeout for Remote SSH. The ConnectTimeout option is now preferred per host, followed by the existing remote.SSH.connectTimeout setting. A value of 0 indicates a maximum timeout interval.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_94.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.connectTimeout\": 15\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Flask Application in Python\nDESCRIPTION: Imports the `Flask` class from the `flask` library and creates an instance of the Flask application, typically stored in a variable named `app`. The `__name__` argument helps Flask determine the root path for the application to locate resources.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables with Default Values in Dev Container JSON\nDESCRIPTION: This snippet demonstrates how to set environment variables with default values in a devcontainer.json file. It shows the syntax for both local and container environment variables.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_71.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"ubuntu:latest\",\n    \"remoteEnv\": {\n        \"MY_LOCAL_VAR\": \"${localEnv:MY_VAR:my_local_default}\",\n        \"MY_CONTAINER_VAR\": \"${containerEnv:MY_VAR:my_container_default}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Change Handler in TypeScript Language Server\nDESCRIPTION: Handles configuration changes in the language server by clearing cached settings and revalidating all open documents. Supports both configuration capability modes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconnection.onDidChangeConfiguration(change => {\n  if (hasConfigurationCapability) {\n    // Reset all cached document settings\n    documentSettings.clear();\n  } else {\n    globalSettings = <ExampleSettings>(\n      (change.settings.languageServerExample || defaultSettings)\n    );\n  }\n\n  // Revalidate all open text documents\n  documents.all().forEach(validateTextDocument);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SSHFS-Win Using Chocolatey on Windows\nDESCRIPTION: Installs the SSHFS-Win utility on Windows via the Chocolatey package manager. This command requires administrative permissions and assumes Chocolatey is already installed. SSHFS-Win enables Windows users to access remote filesystems via SSHFS.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install sshfs\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GitHub Copilot Chat Template Suggestion in VS Code Dev Containers\nDESCRIPTION: This markdown snippet shows an image demonstrating how GitHub Copilot Chat suggests templates when adding Dev Container configuration files to a workspace folder in VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_87.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![GitHub Copilot Chat template suggestion](images/1_87/devcontainer-copilot-template.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing VS Code Setting in Markdown\nDESCRIPTION: This snippet demonstrates how to create a clickable link to a VS Code setting within markdown documentation. It uses a custom URI scheme to open the settings panel directly to the specified setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_93.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"vscode://settings/remote.SSH.useExecServer\" codesetting=\"true\">`remote.SSH.useExecServer`</a>\n```\n\n----------------------------------------\n\nTITLE: Changing Default WSL Distro Using wslconfig in Windows Command Prompt\nDESCRIPTION: Switches the default WSL Linux distribution on Windows systems using wslconfig.exe. This is necessary for older Windows builds or when running VS Code remote sessions. Requires administrative access.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_36\n\nLANGUAGE: bat\nCODE:\n```\nwslconfig /setdefault Ubuntu\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal SendSequence Command with Variables in VS Code\nDESCRIPTION: This snippet demonstrates how to use variables in the sendSequence terminal command. The example binds Ctrl+Shift+T to execute the current file in the terminal using the ${file} variable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_32.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+shift+t\",\n  \"command\": \"workbench.action.terminal.sendSequence\",\n  \"args\": { \"text\": \". ${file}\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Startup Behavior\nDESCRIPTION: Setting to control terminal visibility on application startup with options for never hiding, hiding when empty, or always hiding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.hideOnStartup\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Configuring onAuthenticationRequest Activation Event in VS Code Extension\nDESCRIPTION: This snippet demonstrates how to declare the onAuthenticationRequest activation event in a VS Code extension's manifest. It specifies that the extension should be activated when VS Code needs to retrieve an AuthenticationSession of type 'github'.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onAuthenticationRequest:github\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator in Rust for WebAssembly\nDESCRIPTION: Complete Rust implementation of the calculator component with arithmetic operations and WebAssembly export.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2024/05/08/wasm.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Use a procedural macro to generate bindings for the world we specified in\n// `calculator.wit`\nwit_bindgen::generate!({\n\t// the name of the world in the `*.wit` input file\n\tworld: \"calculator\",\n});\n\nstruct Calculator;\n\nimpl Guest for Calculator {\n\n    fn calc(op: Operation) -> u32 {\n\t\tmatch op {\n\t\t\tOperation::Add(operands) => operands.left + operands.right,\n\t\t\tOperation::Sub(operands) => operands.left - operands.right,\n\t\t\tOperation::Mul(operands) => operands.left * operands.right,\n\t\t\tOperation::Div(operands) => operands.left / operands.right,\n\t\t}\n\t}\n}\n\n// Export the Calculator to the extension code.\nexport!(Calculator);\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility with Orca via Environment Variable - Bash\nDESCRIPTION: This Bash command sets the ACCESSIBILITY_ENABLED environment variable to '1', which can be required for the Orca screen reader to function with Visual Studio Code on Linux. It should be executed in the terminal before launching VS Code, and is generally used as a troubleshooting step when accessibility support is otherwise not functioning. The key requirement is that the terminal session exports this variable, and it is typically set with export or as an inline variable in the launch command.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/configure/accessibility/accessibility.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nACCESSIBILITY_ENABLED=1\n```\n\n----------------------------------------\n\nTITLE: Defining CommonAttributes Attribute Groups in XML Schema\nDESCRIPTION: Defines several attribute groups for common attributes used in the visualizer configuration, including module name, version constraints, and view filters.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/natvis.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<xs:attributeGroup name=\"CommonAttributes_NoCondition_NoView\">\n  <xs:attribute name=\"ModuleName\" type=\"ModuleNameStringType\" use=\"optional\" />\n  <xs:attribute name=\"ModuleVersionMin\" type=\"VersionStringType\" use=\"optional\" />\n  <xs:attribute name=\"ModuleVersionMax\" type=\"VersionStringType\" use=\"optional\" />\n  <xs:attribute name=\"Optional\" type=\"OptionalType\" use=\"optional\" />\n</xs:attributeGroup>\n\n<xs:attributeGroup name=\"CommonAttributes_NoCondition\">\n  <xs:attributeGroup ref=\"CommonAttributes_NoCondition_NoView\" />\n  <xs:attributeGroup ref=\"ViewConstraints\" />\n</xs:attributeGroup>\n\n<xs:attributeGroup name=\"CommonAttributes\">\n  <xs:attributeGroup ref=\"CommonAttributes_NoCondition\" />\n  <xs:attribute name=\"Condition\" type=\"ConditionType\" use=\"optional\" />\n</xs:attributeGroup>\n```\n\n----------------------------------------\n\nTITLE: Removed WSL Connection Method Settings\nDESCRIPTION: Documents the removal of the `remote.WSL1.connectionMethod` and `remote.WSL2.connectionMethod` settings in WSL extension version 0.77.x. The extension now exclusively uses the `wslExeProxy` method, which was the previous default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_77.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nremote.WSL1.connectionMethod\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nremote.WSL2.connectionMethod\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nwslExeProxy\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code using YUM on Older RHEL/CentOS\nDESCRIPTION: Checks for updates using `yum check-update` and installs the stable (`code`) or insiders (`code-insiders`) version of VS Code using `sudo yum install`. Intended for older RHEL/CentOS distributions where `dnf` is not available. Assumes the Microsoft YUM/DNF repository has been previously added.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/setup/linux.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyum check-update\nsudo yum install code # or code-insiders\n```\n\n----------------------------------------\n\nTITLE: Configuring Services to Start/Stop in Docker Compose\nDESCRIPTION: Adds a 'runServices' configuration option in devcontainer.json for specifying which services should be started and stopped when opening/closing a DevContainer using Docker Compose.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_38.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runServices\": [\"service1\", \"service2\"],\n  \"shutdownAction\": \"stopCompose\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Open Editors Sort Order\nDESCRIPTION: The VS Code setting `explorer.openEditors.sortOrder` controls how editors are sorted within the 'OPEN EDITORS' list in the File Explorer view. It accepts values like `editorOrder` or `alphabetical`.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\nexplorer.openEditors.sortOrder\n```\n\n----------------------------------------\n\nTITLE: Using Problem Matchers in Tasks Configuration\nDESCRIPTION: JSON configuration showing how to reference a contributed problem matcher in a tasks.json file. This example uses the $gcc matcher with a GCC build task.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"build\",\n      \"command\": \"gcc\",\n      \"args\": [\"-Wall\", \"helloWorld.c\", \"-o\", \"helloWorld\"],\n      \"problemMatcher\": \"$gcc\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up the LSP Sample Project\nDESCRIPTION: Commands to clone the vscode-extension-samples repository, navigate to the lsp-sample directory, install dependencies, compile the project, and open it in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/language-server-extension-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> git clone https://github.com/microsoft/vscode-extension-samples.git\n> cd vscode-extension-samples/lsp-sample\n> npm install\n> npm run compile\n> code .\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Formatting Options in JSON Settings\nDESCRIPTION: This represents a group of VS Code settings, prefixed with `typescript.format.*`, used to configure the behavior of the built-in TypeScript code formatter. These settings allow customization of formatting rules, such as brace placement and spacing.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\ntypescript.format.*\n```\n\n----------------------------------------\n\nTITLE: Showing WSL Version in Distro Picker\nDESCRIPTION: This image illustrates how the distro pickers and Remote Explorer now label WSL 1 distributions with a 'wsl1' tag for easier identification.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_62.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Distro picker](images/1_62/distro-picker.png)\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts for Copilot Chat Actions\nDESCRIPTION: Lists keyboard shortcut references (`kb(...)`) for various actions within VS Code Copilot Chat, such as opening the chat view, submitting input, running commands in the terminal, and navigating between code blocks.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/chat/chat-ask-mode.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.chat.open)`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.edits.submit)`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.chat.runInTerminal)`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.chat.nextCodeBlock)`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.chat.previousCodeBlock)`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`kb(workbench.action.openQuickChat)`\n```\n\n----------------------------------------\n\nTITLE: Creating a Django ModelForm in Python\nDESCRIPTION: Defines a LogMessageForm class using Django's ModelForm, which is based on the LogMessage model and includes only the 'message' field.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-django.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom hello.models import LogMessage\n\nclass LogMessageForm(forms.ModelForm):\n    class Meta:\n        model = LogMessage\n        fields = (\"message\",)   # NOTE: the trailing comma is required\n```\n\n----------------------------------------\n\nTITLE: Installing libstdc++ on Alpine via apk\nDESCRIPTION: Updates Alpine's package index and installs the libstdc++ library required for the VS Code server in WSL. Must be executed in an Alpine shell with root privileges.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\napk update && apk add libstdc++\n\n```\n\n----------------------------------------\n\nTITLE: Terminal File Path Quoted Formats\nDESCRIPTION: Various quoted file path formats supported in the terminal, including line and column number specifications with different quote styles and descriptive text.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_75.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"<file>\",<line>\n\"<file>\",<line>:<column>\n\"<file>\", line <line>\n\"<file>\", line <line>, col <column>\n\"<file>\", line <line>, column <column>\n\"<file>\":line <line>\n\"<file>\":line <line>, col <column>\n\"<file>\":line <line>, column <column>\n\"<file>\": line <line>\n\"<file>\": line <line>, col <column>\n\"<file>\": line <line>, column <column>\n\"<file>\" on line <line>\n\"<file>\" on line <line>, col <column>\n\"<file>\" on line <line>, column <column>\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Action Provider in Language Server Protocol\nDESCRIPTION: Shows how to announce Code Action provider capabilities in the LSP initialize method response. This allows the language server to provide corrective actions for errors or warnings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/programmatic-language-features.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"capabilities\" : {\n        \"codeActionProvider\" : \"true\"\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Quick Actions Status Bar Item in VS Code\nDESCRIPTION: This snippet shows how to include an image of the Quick Actions Status bar item in Markdown, which is used to access Dev Containers commands in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/containers.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Quick actions Status bar item](images/containers/remote-dev-status-bar.png)\n```\n\n----------------------------------------\n\nTITLE: Microsoft Security Policy Documentation in Markdown\nDESCRIPTION: Standard security documentation block used across Microsoft repositories that outlines vulnerability reporting procedures, preferred communication methods, and security policy details. This template includes contact information for MSRC and specific instructions for security issue reporting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Mapping Icon Definitions to Font Characters\nDESCRIPTION: Configuration for mapping VS Code icon IDs to specific font characters, allowing custom icons to replace default ones. References font definitions and specifies Unicode character codes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/product-icon-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iconDefinitions\": {\n    \"dialog-close\": {\n      \"fontCharacter\": \"\\\\43\",\n      \"fontId\": \"alien-font\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static JSON Data File\nDESCRIPTION: Sample JSON data file demonstrating static file serving capabilities in Flask.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/python/tutorial-flask.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"01\": {\n        \"note\" : \"This data is very simple because we're demonstrating only the mechanism.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote SSH Socket Mode in VS Code Settings\nDESCRIPTION: This JSON snippet shows how to enable the Remote.SSH: Remote Server Listen On Socket setting in VS Code's User settings to switch Remote SSH into socket mode.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.showLoginTerminal\": true,\n\"remote.SSH.useLocalServer\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Attributes in devcontainer.json\nDESCRIPTION: This JSON snippet demonstrates how to set port attributes in a devcontainer.json file. It allows developers to specify custom configurations for forwarded ports in development containers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_54.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"portsAttributes\": {\n    \"3000\": {\n      \"label\": \"Application\",\n      \"onAutoForward\": \"notify\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling PTY Allocation for SSH Connections in VS Code\nDESCRIPTION: Setting to permit PTY allocation by omitting the '-T' flag from the SSH connection command. This can be a workaround for various connection issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_92.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remote.SSH.permitPtyAllocation\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Diff Algorithm Setting\nDESCRIPTION: Setting to override the default diff algorithm in VS Code. Users can choose between 'advanced' (new algorithm) or 'legacy' (default algorithm) via the diffEditor.diffAlgorithm setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_78.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"diffEditor.diffAlgorithm\": \"advanced\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Model Builder Environment with Conda and Python\nDESCRIPTION: Creates a dedicated conda environment for Model Builder and installs necessary dependencies including ONNX, PyTorch, ONNX Runtime, and Transformers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/modelconversion.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nconda create -n model_builder python==3.11 -y\nconda activate model_builder\npip install onnx torch onnxruntime_genai==0.6.0 transformers\n```\n\n----------------------------------------\n\nTITLE: Configuring onCustomEditor Activation in package.json\nDESCRIPTION: Declaration of onCustomEditor activation event that activates the extension when VS Code needs to create a custom editor with the matching viewType. This example activates for 'catCustoms.pawDraw' custom editors.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/activation-events.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"activationEvents\": [\n    \"onCustomEditor:catCustoms.pawDraw\"\n]\n```\n\n----------------------------------------\n\nTITLE: Checking glibc Version in Bash\nDESCRIPTION: This command checks the installed version of the glibc library on a Linux system. It is used to verify if the system meets the minimum glibc requirement (>=2.28) for VS Code Remote Development as specified in the prerequisites table.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/linux.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nldd --version\n```\n\n----------------------------------------\n\nTITLE: Persisting Extension Data in Remote Environments\nDESCRIPTION: Extensions can use the context.globalStorageUri or context.storageUri properties to properly store global data in remote environments, avoiding issues with non-existent directories.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.globalStorageUri\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.storageUri\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Participants in package.json\nDESCRIPTION: This code snippet shows how to configure chat participants and commands in the package.json file of a VS Code extension. It includes metadata for automatic detection of participants.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_93.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"chatParticipants\": {\n  // Configuration details\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Editor Split and Navigation Commands in Visual Studio Code (plaintext)\nDESCRIPTION: This snippet enumerates the command identifiers for splitting editors within the same group in the VS Code workbench. It highlights the available palette commands for split operations and navigation within the split, enabling users to assign custom keybindings or invoke actions programmatically. No dependencies beyond Visual Studio Code are required, and these are to be used with the keyboard shortcut system or command palette. Inputs are VS Code actions or settings; outputs are split editor layouts and focused editor panes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_61.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nworkbench.action.splitEditorInGroup\nworkbench.action.toggleSplitEditorInGroup\nworkbench.action.joinEditorInGroup\nworkbench.action.toggleSplitEditorInGroupLayout\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nworkbench.action.focusFirstSideEditor\nworkbench.action.focusSecondSideEditor\nworkbench.action.focusOtherSideEditor\n```\n\n----------------------------------------\n\nTITLE: Defining 'Copy As' Submenu Contribution Points\nDESCRIPTION: Specifies the menu contribution points for adding commands to the 'Copy As' submenu. `menuBar/edit/copy` targets the main Edit menu, while `editor/context/copy` targets the editor's right-click context menu. Extensions can contribute commands to these locations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_55.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmenuBar/edit/copy\n```\n\nLANGUAGE: plaintext\nCODE:\n```\neditor/context/copy\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Buffer Implementation\nDESCRIPTION: VSBuffer utility class implementation that provides buffer functionality across Node.js and web environments by using appropriate platform-specific implementations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/11/28/vscode-sandbox.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class VSBuffer {\n\tprivate buffer: Buffer | Uint8Array;\n\n\tconstructor(buffer: Buffer | Uint8Array) {\n\t\tthis.buffer = buffer;\n\t}\n\n\t// ... additional implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminal Inline Chat\nDESCRIPTION: Experimental setting to enable Terminal Inline Chat, which provides access to Copilot's capabilities directly in the terminal for command suggestions and explanations.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_88.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nterminal.integrated.experimentalInlineChat:true\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Types for Embedded Languages\nDESCRIPTION: JSON configuration in package.json for an injection grammar that sets up proper token typing for embedded SQL in JavaScript strings.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"grammars\": [\n      {\n        \"path\": \"./syntaxes/injection.json\",\n        \"scopeName\": \"sql-string.injection\",\n        \"injectTo\": [\"source.js\"],\n        \"embeddedLanguages\": {\n          \"my.sql.template.string\": \"sql\"\n        },\n        \"tokenTypes\": {\n          \"my.sql.template.string\": \"other\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Palette Keyboard Shortcuts - VS Code\nDESCRIPTION: Keyboard shortcuts used for accessing various Git and VS Code commands mentioned in the tutorial.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/introvideos/versioncontrol.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.files.openFolder)\nkb(workbench.view.scm)\nkb(workbench.action.showCommands)\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation in Bash (WSL)\nDESCRIPTION: This Bash command checks the installed version of Python 3 in the WSL environment. It's used to confirm that Python was installed successfully.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/wsl-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Opening External Resources in Remote Extensions\nDESCRIPTION: Extensions can use the vscode.env.openExternal or vscode.env.asExternalUri APIs to automatically forward localhost ports and open resources in local browsers or applications.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.env.openExternal(uri)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvscode.env.asExternalUri(uri)\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Tasks in VS Code (Before)\nDESCRIPTION: JSON configuration showing the old format for referencing a build task in launch.json version 0.1.0.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.1.0\",\n    \"configurations\": [\n        {\n            \"preLaunchTask\": \"build\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Validation in Visual Studio Code Settings\nDESCRIPTION: Allows turning off semantic and syntax checks for JavaScript. Useful if preferring JSHint over VS Code's JavaScript validator.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v0_3_0.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"javascript.validate.semanticValidation\": false,\n\"javascript.validate.syntaxValidation\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Arguments in VS Code\nDESCRIPTION: JSON configuration for disabling Chromium sandbox in VS Code through argv.json file. This allows persisting sandbox settings across application launches.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disable-chromium-sandbox\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CodeLens Font Settings in VS Code\nDESCRIPTION: This snippet demonstrates how to customize the font family and size of CodeLens items in VS Code. It shows settings for changing the font to 'Comic Sans MS' and setting the font size to 12px.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"editor.codeLensFontFamily\": \"Comic Sans MS\",\n\"editor.codeLensFontSize\": 12,\n```\n\n----------------------------------------\n\nTITLE: Opening Keyboard Shortcuts Editor with Query Filter in VSCode Extension\nDESCRIPTION: Code snippet showing how to programmatically open the Keyboard Shortcuts editor with a pre-filled query filter using the VSCode API from an extension.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nvscode.commands.executeCommand('workbench.action.openGlobalKeybindings', 'query')\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Renderer in package.json\nDESCRIPTION: JSON configuration for notebook renderer including script dependencies and activation events.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\"....\"],\n  \"contributes\": {\n    \"notebookRenderer\": [\n      {\n        \"id\": \"github-issue-renderer\",\n        \"displayName\": \"GitHub Issue Renderer\",\n        \"entrypoint\": \"./out/renderer.js\",\n        \"mimeTypes\": [...],\n        \"dependencies\": [\n            \"my-renderer-script\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote SSH Settings in VS Code\nDESCRIPTION: This snippet demonstrates the keyboard shortcut to open the Command Palette and access remote SSH settings in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/ssh.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`kbstyle(F1)`, `kb(workbench.action.showCommands)`\n```\n\n----------------------------------------\n\nTITLE: Displaying Octicon Icons in VS Code UI\nDESCRIPTION: Examples of Octicon icon syntax for displaying various icons in the VS Code interface. Shows the syntax for error, info, info-outline, smiley, smiley-outline, and warning icons.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_35.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$(error) $(info) $(info-outline) $(smiley) $(smiley-outline) $(warning)\n```\n\n----------------------------------------\n\nTITLE: Enabling Proposed API in package.json\nDESCRIPTION: Configuration required to use proposed API features in VS Code extensions during development. Note that extensions using proposed APIs cannot be published to the marketplace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableProposedApi\": true,\n  // Other package.json properties\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Hugging Face CLI in Bash\nDESCRIPTION: Command to log into Hugging Face CLI before using a Hugging Face dataset for fine-tuning.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli login\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Container CLI via npm\nDESCRIPTION: Command to install the development container CLI globally using npm package manager. Requires Python, Node.js (v14+), and C/C++ build tools.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/05/18/dev-container-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring .vscodeignore File\nDESCRIPTION: Example of .vscodeignore file configuration using glob patterns to exclude TypeScript source files while keeping one specific file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/publishing-extension.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n**/*.ts\n**/tsconfig.json\n!file.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Integration Settings in VS Code\nDESCRIPTION: JSON configuration to disable VS Code's shell integration feature by setting the terminal.integrated.shellIntegration.enabled property to false in settings.json.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_70.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.shellIntegration.enabled\": \"false\"\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code from Windows Command Prompt using WSL 2\nDESCRIPTION: This command switches to the WSL 2 environment, launches Visual Studio Code, and then returns to the Windows shell.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2019/09/03/wsl2.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwsl code .\n```\n\n----------------------------------------\n\nTITLE: Opening PowerShell Examples in VS Code\nDESCRIPTION: PowerShell command to open the examples folder included with the PowerShell extension in Visual Studio Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/powershell.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncode (Get-ChildItem ~\\.vscode\\extensions\\ms-vscode.PowerShell-*\\examples)[-1]\n```\n\n----------------------------------------\n\nTITLE: Setting custom context for in/not in operators using TypeScript\nDESCRIPTION: Examples of setting custom context values using the setContext command with arrays or objects to be used with the 'in' operator in when clauses.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/when-clause-contexts.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nvscode.commands.executeCommand('setContext', 'ext.supportedFolders', [ 'test', 'foo', 'bar' ]);\n\n// or\n\n// Note in this case (using an object), the value doesn't matter, it is based on the existence of the key in the object\n// The value must be of a simple type\nvscode.commands.executeCommand('setContext', 'ext.supportedFolders', { 'test': true, 'foo': 'anything', 'bar': false });\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Formatter in JSON\nDESCRIPTION: JSON configuration example showing how to set a default formatter for JavaScript files using settings.json\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_33.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[javascript]\": {\n  \"editor.defaultFormatter\": \"HookyQR.beautify\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task with User Input Variable\nDESCRIPTION: Example of using user input variables in task configuration with promptString input type.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_30.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"label\": \"Echo input\",\n            \"type\": \"shell\",\n            \"command\": \"echo ${input:echoPrompt}\"\n        }\n    ],\n    \"inputs\": [\n        {\n            \"id\": \"echoPrompt\",\n            \"description\": \"Please enter a value\",\n            \"default\": \"default echo text\",\n            \"type\": \"promptString\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Problem Matcher for GCC Output (JSON)\nDESCRIPTION: JSON configuration for a problem matcher that captures GCC compiler warnings and errors, including file location, line, column, severity, and message.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/tasks.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"owner\": \"cpp\",\n    \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n    \"source\": \"gcc\",\n    \"pattern\": {\n        \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n        \"file\": 1,\n        \"line\": 2,\n        \"column\": 3,\n        \"severity\": 4,\n        \"message\": 5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Sail Environment\nDESCRIPTION: Command to start the Laravel Sail development environment, which launches the configured containers for the application.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2022/03/08/the-tutorial-problem.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/sail up\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Mode Setting in VS Code\nDESCRIPTION: Setting to enable agent mode functionality in VS Code Stable version. This setting will be required until agent mode becomes enabled by default.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_99.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"chat.agent.enabled:true\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Remote Filesystem with SSHFS\nDESCRIPTION: Bash commands to mount a remote filesystem using SSHFS on macOS or Linux.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nexport USER_AT_HOST=user@hostname\n# Make the directory where the remote filesystem will be mounted\nmkdir -p \"$HOME/sshfs/$USER_AT_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Escaping Icon Syntax in VS Code Label\nDESCRIPTION: Demonstrates how to escape the icon syntax to display literal $(eye) text using a backslash.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/icons-in-labels.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\\$(eye)\n```\n\n----------------------------------------\n\nTITLE: Remote Extension Host Log Access Command\nDESCRIPTION: Command syntax for accessing the VS Code Remote Extension Host log using keyboard shortcut\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/remote/troubleshooting.md#2025-04-23_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\nkbstyle(F1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Diff Editor Collapsed Code\nDESCRIPTION: Setting to enable collapsing of unchanged code blocks in diff editor with breadcrumb navigation.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_82.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"diffEditor.hideUnchangedRegions.enabled\": true\n```\n\n----------------------------------------\n\nTITLE: Creating a Snippet with Escaped Variable in PowerShell\nDESCRIPTION: This JSON snippet definition demonstrates how to include a variable in a PowerShell script by escaping the '$' character. This prevents the variable from being parsed during snippet expansion.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/userdefinedsnippets.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"VariableSnippet\":{\n    \"prefix\": \"_Var\",\n    \"body\": \"\\\\$MyVar = 2\",\n    \"description\": \"A basic snippet that places a variable into script with the $ prefix\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GitHub Copilot Command Usage in Markdown\nDESCRIPTION: Examples of using GitHub Copilot commands in various contexts, such as generating tests, creating new projects, and interacting with GitHub issues.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/copilot/reference/copilot-vscode-features.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n/tests\n/setupTests\n/fixTestFailure\n/new Express app using typescript and svelte\n/newNotebook get census data and preview key insights with Seaborn\n@github What are all of the open PRs assigned to me?\n@github Show me the recent merged pr's from @dancing-mona\n```\n\n----------------------------------------\n\nTITLE: Remote Hub Configuration Setting\nDESCRIPTION: Configuration for controlling automatic repository content downloading in VS Code for Web.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_64.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"remoteHub.experimental.fs.maxAutoDownloadSize\"\n```\n\n----------------------------------------\n\nTITLE: Defining NPM Debug Script in package.json\nDESCRIPTION: Example of a debug script defined in package.json that sets up Node.js debugging with specific debug parameters. This script can be referenced from a VS Code launch configuration.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"debug\": \"node --nolazy --debug-brk=5858 myProgram.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Modifier Key (Windows/Linux) for Conditional Editor Splitting\nDESCRIPTION: Represents the Alt key on Windows and Linux. Holding Alt during a drag-and-drop operation conditionally toggles the editor group splitting behavior defined by the `workbench.editor.splitOnDragAndDrop` setting.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_52.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nkbstyle(Alt)\n```\n\n----------------------------------------\n\nTITLE: Running NVIDIA-SMI Command in Bash\nDESCRIPTION: Command to verify NVIDIA GPU driver installation and detection in the system path.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/intelligentapps/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Starting a Sample Web Server with npx serve (Bash)\nDESCRIPTION: This Bash command utilizes `npx` to run the `serve` package, launching a simple static file server, typically on port 3000 by default. This serves as a convenient example local service for demonstrating the port forwarding capabilities within Visual Studio Code. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/debugtest/port-forwarding.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx serve\n```\n\n----------------------------------------\n\nTITLE: Installing Shadow Package on Alpine Linux\nDESCRIPTION: Dockerfile command for installing the shadow package on Alpine Linux, required for user management.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/remote/advancedcontainers/add-nonroot-user.md#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache shadow\n```\n\n----------------------------------------\n\nTITLE: VS Code Extensions Recommendations\nDESCRIPTION: Configuration file for recommending the esbuild problem matchers extension to VS Code users.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/working-with-extensions/bundling-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"recommendations\": [\"connor4312.esbuild-problem-matchers\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Generator Dependencies\nDESCRIPTION: Command to install Yeoman and VS Code Generators for notebook renderer development\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/notebook.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yo generator-code\n```\n\n----------------------------------------\n\nTITLE: Declaring the VS Code Extensions Change Event (TypeScript)\nDESCRIPTION: TypeScript type declaration for the `vscode.extensions.onDidChange` event. This event notifies extensions when the set of installed, uninstalled, enabled, or disabled extensions changes, allowing them to update their state accordingly, particularly if they introduce contribution points.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * An event which fires when `extensions.all` changes. This can happen when extensions are\n * installed, uninstalled, enabled or disabled.\n */\nexport const onDidChange: Event<void>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Test Debug Settings in VS Code\nDESCRIPTION: Example showing simplified configuration for running Mocha tests in the VS Code debugger, demonstrating automatic binary resolution from node_modules/.bin directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_89.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n\t\"name\": \"Run Tests\",\n\t\"type\": \"node\",\n\t\"request\": \"launch\",\n-\t\"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/mocha\",\n-\t\"windows\": {\n-\t\t\"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/mocha.cmd\"\n-\t},\n+\t\"runtimeExecutable\": \"mocha\",\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Reference\nDESCRIPTION: Reference to keyboard shortcuts used in the documentation\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/08/07/emmet-2.0.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(editor.action.triggerSuggest)\n```\n\n----------------------------------------\n\nTITLE: Migrating Terminal Shell Configuration\nDESCRIPTION: Example showing migration from legacy shell/shellArgs settings to the new terminal profiles configuration format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_80.md#2025-04-23_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n// Before\n{\n  \"terminal.integrated.shell.windows\": \"pwsh.exe\",\n  \"terminal.integrated.shellArgs.windows\": [\"-Login\"],\n\n  \"terminal.integrated.shell.osx\": \"bash\",\n  \"terminal.integrated.shellArgs.osx\": [\"-l\"],\n}\n\n// After\n{\n  \"terminal.integrated.profiles.windows\": {\n    \"PowerShell Login\": {\n      // Source is a special property that will use VS Code's logic to detect\n      // the PowerShell or Git Bash executable.\n      \"source\": \"PowerShell\",\n      \"args\": [\"-Login\"],\n      \"icon\": \"terminal-powershell\"\n    },\n  },\n\n  \"terminal.integrated.profiles.osx\": {\n    // This will override the builtin bash profile\n    \"bash\": {\n      \"path\": \"bash\",\n      \"args\": [\"-l\"],\n      \"icon\": \"terminal-bash\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C/C++ IntelliSense on macOS using Clang (JSON)\nDESCRIPTION: This JSON snippet provides a sample `c_cpp_properties.json` configuration for a C/C++ project on macOS using the Clang compiler. It defines a configuration named 'Mac', sets include paths, specifies macOS framework paths, defines the compiler path to `/usr/bin/clang`, sets C/C++ standards, and explicitly sets the IntelliSense mode to `macos-clang-arm64` suitable for Apple Silicon Macs.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/cpp/configure-intellisense.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Mac\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [],\n            \"macFrameworkPath\": [\n                \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks\"\n            ],\n            \"compilerPath\": \"/usr/bin/clang\",\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"macos-clang-arm64\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Workspace Trust Command via Command Palette\nDESCRIPTION: Command to access Workspace Trust management through VS Code's Command Palette.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/07/06/workspace-trust.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkbstyle(F1)\n```\n\n----------------------------------------\n\nTITLE: VSCode Keyboard Commands\nDESCRIPTION: Example keyboard command syntax used in VSCode documentation using kb format.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_8.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkb(workbench.action.toggleZenMode)\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration Example - Keyboard Navigation\nDESCRIPTION: Configuration setting for keyboard navigation in VS Code lists and trees, with options for simple, highlight, and filter modes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_31.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.list.keyboardNavigation\"\n```\n\n----------------------------------------\n\nTITLE: Providing Download Links for Java Coding Pack with Event Tracking in HTML/JavaScript\nDESCRIPTION: This HTML snippet provides download links for the VS Code Java Coding Pack for Windows and macOS. Each link uses an 'onclick' event handler to call the 'pushCodingPackEvent' JavaScript function, likely for tracking download events, passing the language ('java') and platform ('win' or 'mac') as arguments. It depends on the existence of the 'pushCodingPackEvent' JavaScript function.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/learn/educators/installers.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"install-extension-btn\" onclick=\"pushCodingPackEvent('java', 'win')\" href=\"https://aka.ms/vscode-java-installer-win\">Download - Windows</a>\n<a class=\"install-extension-btn\" onclick=\"pushCodingPackEvent('java', 'mac')\" href=\"https://aka.ms/vscode-java-installer-mac\">Download - macOS</a>\n```\n\n----------------------------------------\n\nTITLE: URI Schema Example for Virtual File System\nDESCRIPTION: Example URI format used by the virtual file system provider to represent resources in the virtual workspace.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2021/06/10/remote-repositories.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvscode-vfs://github/microsoft/vscode/package.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Name Inlay Hints in TypeScript JSON Settings\nDESCRIPTION: This JSON setting controls the display of parameter name inlay hints for function calls in TypeScript files within VS Code. Possible values are `\"none\"` (disabled), `\"literals\"` (show only for literal arguments), and `\"all\"` (show for all arguments). This helps clarify the meaning of arguments, especially for boolean flags or parameters that are easily confused.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/typescript/typescript-editing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ntypescript.inlayHints.parameterNames.enabled\n```\n\n----------------------------------------\n\nTITLE: Comparing Token Arrays Before and After Refactoring in vscode-textmate (JavaScript)\nDESCRIPTION: This JavaScript snippet contrasts the previous and new compact binary encoding of tokens generated by the TextMate tokenizer. The older approach emits objects per token with startIndex and scopes; the new design emits a flat array of pairs (startIndex, packed metadata), using numbers instead of objects for memory efficiency. These arrays are later consumed/rendered in the editor. Prerequisites include the Monokai theme for test data. The inputs are tokenized lines/scopes; outputs are JavaScript arrays. Requires readers to understand how numeric metadata is mapped back to token visual attributes.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// These are generated using the Monokai theme.\ntokens_before = [\n  { startIndex:  0, scopes: ['source.js','meta.function.js','storage.type.function.js'] },\n  { startIndex:  8, scopes: ['source.js','meta.function.js'] },\n  { startIndex:  9, scopes: ['source.js','meta.function.js','meta.definition.function.js',\n                             'entity.name.function.js'] },\n  { startIndex: 11, scopes: ['source.js','meta.function.js','meta.parameters.js',\n                             'punctuation.definition.parameters.js'] },\n  { startIndex: 13, scopes: ['source.js','meta.function.js'] },\n  { startIndex: 14, scopes: ['source.js','meta.function.js','meta.block.js',\n                             'punctuation.definition.block.js'] },\n]\n\n// Every even index is the token start index, every odd index is the token metadata.\n// We get fewer tokens because tokens with the same metadata get collapsed\ntokens_now = [\n                 // bbbbbbbbb fffffffff FFF TTT LLLLLLLL\n    0, 16926743, // 000000010 000001001 001 000 00010111\n    8, 16793623, // 000000010 000000001 000 000 00010111\n    9, 16859159, // 000000010 000000101 000 000 00010111\n    11, 16793623 // 000000010 000000001 000 000 00010111\n]\n```\n\n----------------------------------------\n\nTITLE: Opening an Office Add-in Project in Visual Studio Code\nDESCRIPTION: Command to open the current directory as a project in Visual Studio Code. This should be run from the root directory of your Office Add-in project.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/other/office.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Defining an Injection Grammar in package.json\nDESCRIPTION: JSON configuration in package.json for defining an injection grammar that highlights 'TODO' keywords in JavaScript comments.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/language-extensions/syntax-highlight-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"grammars\": [\n      {\n        \"path\": \"./syntaxes/injection.json\",\n        \"scopeName\": \"todo-comment.injection\",\n        \"injectTo\": [\"source.js\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Type Signature for executeCommand Method in VS Code\nDESCRIPTION: The improved type signature for vscode.commands.executeCommand that makes the return type more explicit. This allows for better type checking as commands that can return undefined must now explicitly include it in the type parameter.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_63.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport function executeCommand<T = unknown>(command: string, ...rest: any[]): Thenable<T>;\n```\n\n----------------------------------------\n\nTITLE: Highlighting TreeItem Labels in Custom Views in VS Code (TypeScript)\nDESCRIPTION: Introduces the `TreeItemLabel` interface, which allows specifying `highlights` as an array of `[start, end]` tuples to mark ranges within the `label` string. The `TreeItem2` class constructor is updated to accept `TreeItemLabel`, enabling text highlighting in custom tree views. Note: This utilizes a proposed API (`TreeItem2`).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_29.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Label describing the [Tree item](#TreeItem)\n */\nexport interface TreeItemLabel {\n\n    /**\n     * A human-readable string describing the [Tree item](#TreeItem).\n     */\n    label: string;\n\n    /**\n     * Ranges in the label to highlight. A range is defined as a tuple of two number where the\n     * first is the inclusive start index and the second the exclusive end index\n     */\n    highlights?: [number, number][];\n\n}\n\nexport class TreeItem2 extends TreeItem {\n    /**\n     * Label describing this item. When `falsy`, it is derived from [resourceUri](#TreeItem.resourceUri).\n     */\n    label?: string | TreeItemLabel | /* for compilation */ any;\n\n    /**\n     * @param label Label describing this item\n     * @param collapsibleState [TreeItemCollapsibleState](#TreeItemCollapsibleState) of the tree item. Default is [TreeItemCollapsibleState.None](#TreeItemCollapsibleState.None)\n     */\n    constructor(label: TreeItemLabel, collapsibleState?: TreeItemCollapsibleState);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch Settings for Node.js and Chrome Debugging\nDESCRIPTION: This JSON configuration sets up VS Code for debugging both Node.js backend and Chrome frontend. It includes individual configurations for Node.js and Chrome, as well as a compound configuration for full-stack debugging.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"compounds\": [\n        {\n            \"name\": \"Full-Stack\",\n            \"configurations\": [\"Node\", \"Chrome\"]\n        }\n    ],\n    \"configurations\": [\n        {\n            \"name\": \"Chrome\",\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"url\": \"http://localhost:8080\",\n            \"port\": 9222,\n            \"userDataDir\": \"${workspaceFolder}/.vscode/chrome\",\n            \"webRoot\": \"${workspaceFolder}/public\"\n        },\n        {\n            \"name\": \"Node\",\n            \"type\": \"node2\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/server.js\",\n            \"cwd\": \"${workspaceFolder}\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Menu Items with Group Sorting in VSCode Extensions\nDESCRIPTION: JSON configuration demonstrating how to specify the order of menu items within a group. This example positions a command in a custom group with a specific ordering index.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor/title\": [\n    {\n      \"when\": \"editorHasSelection\",\n      \"command\": \"extension.Command\",\n      \"group\": \"myGroup@1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated Setting\nDESCRIPTION: Shows how to mark a setting as deprecated with both markdown and plain text deprecation messages.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/contribution-points.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.colorDecorators.enable\": {\n    \"type\": \"boolean\",\n    \"description\": \"Enables or disables color decorators\",\n    \"markdownDeprecationMessage\": \"**Deprecated**: Please use `#editor.colorDecorators#` instead.\",\n    \"deprecationMessage\": \"Deprecated: Please use editor.colorDecorators instead.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Approximating Token Scopes in JavaScript\nDESCRIPTION: This snippet shows how VS Code 1.8 approximated the array of scopes into a single string for each token, using a specific strategy to combine and deduplicate scope pieces.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/02/08/syntax-highlighting-optimizations.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntokens = [\n    { startIndex:  0, type: 'meta.function.js.storage.type' },\n    { startIndex:  9, type: 'meta.function.js' },\n    { startIndex:  9, type: 'meta.function.js.definition.entity.name' },\n    { startIndex: 11, type: 'meta.function.js.definition.parameters.punctuation' },\n    { startIndex: 13, type: 'meta.function.js' },\n    { startIndex: 14, type: 'meta.function.js.definition.punctuation.block' },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Format on Save\nDESCRIPTION: Setting to enable automatic code formatting when saving Ruby files\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/languages/ruby.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSave\": true\n```\n\n----------------------------------------\n\nTITLE: VS Code Theme Color Properties\nDESCRIPTION: Comprehensive list of theme color properties for customizing the appearance of editor groups and tabs in Visual Studio Code. Includes properties for active/inactive states, borders, backgrounds, and hover effects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\neditorGroup.border\neditorGroup.dropBackground\neditorGroupHeader.noTabsBackground\neditorGroupHeader.tabsBackground\neditorGroupHeader.tabsBorder\neditorGroupHeader.border\neditorGroup.emptyBackground\neditorGroup.focusedEmptyBorder\neditorGroup.dropIntoPromptForeground\neditorGroup.dropIntoPromptBackground\neditorGroup.dropIntoPromptBorder\ntab.activeBackground\ntab.unfocusedActiveBackground\ntab.activeForeground\ntab.border\ntab.activeBorder\ntab.selectedBorderTop\ntab.selectedBackground\ntab.selectedForeground\ntab.dragAndDropBorder\ntab.unfocusedActiveBorder\ntab.activeBorderTop\ntab.unfocusedActiveBorderTop\ntab.lastPinnedBorder\ntab.inactiveBackground\ntab.unfocusedInactiveBackground\ntab.inactiveForeground\ntab.unfocusedActiveForeground\ntab.unfocusedInactiveForeground\ntab.hoverBackground\ntab.unfocusedHoverBackground\ntab.hoverForeground\ntab.unfocusedHoverForeground\ntab.hoverBorder\ntab.unfocusedHoverBorder\ntab.activeModifiedBorder\ntab.inactiveModifiedBorder\ntab.unfocusedActiveModifiedBorder\ntab.unfocusedInactiveModifiedBorder\neditorPane.background\nsideBySideEditor.horizontalBorder\nsideBySideEditor.verticalBorder\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code Process View Extension\nDESCRIPTION: Commands to clone, install dependencies, and package the vscode-processes extension that shows child processes of VS Code.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  git clone https://github.com/weinand/vscode-processes\n  cd vscode-processes\n  npm install\n  npm run package\n```\n\n----------------------------------------\n\nTITLE: VS Code Editor Theme Color Properties - Overview Ruler\nDESCRIPTION: Color configuration for the editor overview ruler, including markers for find matches, selections, and various content states.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\neditorOverviewRuler.background\neditorOverviewRuler.border\neditorOverviewRuler.findMatchForeground\neditorOverviewRuler.rangeHighlightForeground\n```\n\n----------------------------------------\n\nTITLE: Configuring Whitespace Rendering Options in VS Code Settings (JSON)\nDESCRIPTION: These string values represent the options for the `editor.renderWhitespace` setting in VS Code's `settings.json`. The setting controls how whitespace characters are displayed in the editor. Version 1.6 updated the possible values to `\"all\"` (render all whitespace), `\"boundary\"` (render whitespace except for single spaces between words), and `\"none\"` (render no whitespace).\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_6.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"all\", \"boundary\" and \"none\"\n```\n\n----------------------------------------\n\nTITLE: Hiding the Open Editors View in VS Code Explorer\nDESCRIPTION: Shows how to hide the new Open Editors view by setting the number of visible items to 0.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"explorer.openEditors.visible\": 0\n```\n\n----------------------------------------\n\nTITLE: Lists and Trees Theme Colors\nDESCRIPTION: Color tokens for customizing the appearance of lists and trees in VS Code, including selection states, focus indicators, and hover effects.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/theme-color.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlist.activeSelectionBackground\nlist.activeSelectionForeground\nlist.activeSelectionIconForeground\nlist.dropBackground\nlist.focusBackground\nlist.focusForeground\nlist.focusHighlightForeground\nlist.focusOutline\nlist.focusAndSelectionOutline\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemon Debug in VS Code\nDESCRIPTION: JSON configuration for setting up Node.js debugging with nodemon, including automatic restart functionality.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_14.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Launch server.js via nodemon\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"runtimeExecutable\": \"nodemon\",\n    \"program\": \"${workspaceRoot}/server.js\",\n    \"restart\": true,\n    \"console\": \"integratedTerminal\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Indentation Strategy for HTML Files\nDESCRIPTION: JSON configuration to switch HTML folding strategy to indentation-based instead of syntax-aware folding.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/editing/codebasics.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"[html]\": {\n    \"editor.foldingStrategy\": \"indentation\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Migrating to the New Breakpoints Contribution Point - VS Code Contribution Point - JSON\nDESCRIPTION: This JSON snippet demonstrates the recommended way to contribute supported breakpoint languages and debugger definitions using package.json. It uses a separate contributes.breakpoints array for each supported language and keeps the 'type' field in the debuggers array. This is the approach required after the deprecation of 'enableBreakpointsFor'; backward compatibility not needed. Inputs: none. Outputs: structure for VS Code extension manifest.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_42.md#2025-04-23_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"contributes\": {\n    \"breakpoints\": [\n      { \"language\": \"csharp\" },\n      { \"language\": \"razor\" }\n    ],\n    \"debuggers\": [{\n      \"type\": \"csharp\",\n      // ...\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Azure CLI command to create a resource group for organizing Azure resources in the Western US region.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/blogs/2017/01/15/connect-nina-e2e.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz group create -n nina-demo -l westus\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Messages for GitHub Copilot in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize chat messages for the GitHub Copilot model. It includes the annotation prompt and the user's code with line numbers.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/language-model-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {\n\n  // Get the code with line numbers from the current editor\n  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);\n\n  // select the 4o chat model\n  let [model] = await vscode.lm.selectChatModels({\n    vendor: 'copilot',\n    family: 'gpt-4o',\n  });\n\n  // init the chat message\n  const messages = [\n    vscode.LanguageModelChatMessage.User(ANNOTATION_PROMPT),\n    vscode.LanguageModelChatMessage.User(codeWithLineNumbers),\n  ];\n});\n```\n\n----------------------------------------\n\nTITLE: Git stageChange Method for Quick Diff\nDESCRIPTION: This TypeScript method signature shows the Git stageChange command implementation for the quick diff feature. It receives the document URI, line changes, and the index of the currently focused change.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/extension-guides/scm-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync stageChange(uri: Uri, changes: LineChange[], index: number): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Process Attachment in VS Code\nDESCRIPTION: Launch configuration for attaching to a running Node.js process using an interactive process picker UI via the ${command:PickProcess} variable.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/June_2016.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"Attach to Process\",\n   \"type\": \"node\",\n   \"request\": \"attach\",\n   \"processId\": \"${command:PickProcess}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using MarkdownString.baseUri with Directory Path in TypeScript\nDESCRIPTION: Example of using the MarkdownString.baseUri property to resolve relative links in Markdown against a directory path. When baseUri ends with a slash, it's treated as a directory, and relative paths are resolved relative to that directory.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_65.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst md = new vscode.MarkdownString(`[link](./file.js)`);\nmd.baseUri = vscode.Uri.file('/path/to/dir/');\n// Here 'link' in the rendered Markdown resolves to '/path/to/dir/file.js'\n```\n\n----------------------------------------\n\nTITLE: Docker Run Debug Task Configuration\nDESCRIPTION: VS Code task configuration for running Docker container in debug mode with specific port mapping.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/containers/quickstart-aspnet-core.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"docker-run\",\n   \"label\": \"docker-run: debug\",\n   \"dependsOn\": [\n       \"docker-build: debug\"\n   ],\n   \"dockerRun\": {\n       \"ports\": [\n           { \"hostPort\": 5000, \"containerPort\": 5000 }\n       ]\n   },\n   \"netCore\": {\n       \"appProject\": \"${workspaceFolder}/netcorerest.csproj\",\n       \"enableDebugging\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dockerfile and Context in Docker Compose for Dev Containers - YAML\nDESCRIPTION: This YAML snippet illustrates how to override the build context and Dockerfile in a Compose override file for development purposes. It specifies a custom Dockerfile path for the target service, mapping the workspace and providing a persistent command to keep the container running. The paths for 'dockerfile' and 'context' are resolved relative to the primary Compose file listed in the devcontainer configuration. This approach facilitates development-specific Docker images without altering the base Compose file.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/docs/devcontainers/create-dev-container.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  your-service-name-here:\n      # Note that the path of the Dockerfile and context is relative to the *primary*\n      # docker-compose.yml file (the first in the devcontainer.json \"dockerComposeFile\"\n      # array). The sample below assumes your primary file is in the root of your project.\n      build:\n        context: .\n        dockerfile: .devcontainer/Dockerfile\n      volumes:\n        - .:/workspace:cached\n      command: /bin/sh -c \"while sleep 1000; do :; done\"\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheet in HTML\nDESCRIPTION: This HTML `<link>` tag includes an external Cascading Style Sheet (CSS) file located at `css/inproduct_releasenotes.css`. It specifies the relationship as `stylesheet` and the type as `text/css`. This is used to apply specific visual styles defined in the CSS file to the HTML document, likely for formatting the in-product release notes display, as suggested by the surrounding context and comment.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/release-notes/v1_19.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/inproduct_releasenotes.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Line Reveal Positions in VS Code\nDESCRIPTION: Position options for revealing lines in the editor viewport.\nSOURCE: https://github.com/microsoft/vscode-docs/blob/main/api/references/commands.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'top', 'center', 'bottom'\n```"
  }
]