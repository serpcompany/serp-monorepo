[
  {
    "owner": "pingcap",
    "repo": "tidb",
    "content": "TITLE: Example of Multi-Schema Change SQL in MySQL\nDESCRIPTION: An example showing how multiple schema changes can be combined in a single ALTER TABLE statement, including adding columns, modifying columns, adding indexes and setting table properties.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t (a INT, c INT);\nALTER TABLE t ADD COLUMN b INT, \n MODIFY COLUMN c CHAR(5),\n ADD INDEX idx(a),\n ADD PRIMARY KEY (c),\n COMMENT = \"comments for t\";\n```\n\n----------------------------------------\n\nTITLE: Example Job Structure for Multi-Schema Change in Go\nDESCRIPTION: An example showing how a multi-schema change DDL statement is modeled as a Job with SubJobs. Each SubJob represents a single schema change operation with its specific type and arguments.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\njob := &Job {\n    Type: ActionMultiSchemaChange,\n    MultiSchemaInfo: &MultiSchemaInfo {\n        SubJobs: []*SubJob {\n            &SubJob {\n                Type: ActionAddColumn,\n                Args: ...\n            },\n            &SubJob {\n                Type: ActionModifyColumn,\n                Args: ...\n            },\n        }\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Multi-valued Index in SQL\nDESCRIPTION: Example of creating a table with JSON data, defining a multi-valued index on a JSON array, inserting data, and querying using the MEMBER OF function.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-03-14-multi-valued-index.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t1 (data JSON);\nCREATE INDEX zips ON t1((CAST(data->'$.zip' AS UNSIGNED ARRAY)));\n\nINSERT INTO t1 VALUES\n('{\"id\":1, \"zip\": [0,111,333]}'),('{\"id\":2, \"zip\": [123,456,0]}'),\n('{\"id\":3, \"zip\": [123,123,111]}'),('{\"id\":4, \"zip\": [456,567,222]}'),\n('{\"id\":5, \"zip\": []}');\n\nSELECT * FROM t1 WHERE 123 MEMBER OF (data->'$.zip');\n```\n\n----------------------------------------\n\nTITLE: Creating and Altering Resource Groups with Query Limits in TiDB\nDESCRIPTION: SQL syntax for creating or altering resource groups with runaway query management settings. Allows specification of resource units, priority, query execution limits, and watch behavior.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-16-runaway-queries-management.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE/ALTER RESOURCE GROUP rg1\n  RU_PER_SEC = 100000 [ PRIORITY = (HIGH|MEDIUM|LOW) ] [BURSTABLE]\n  [ QUERY_LIMIT = (\n         EXEC_ELAPSED = <#>,\n         ACTION = (DRYRUN|COOLDOWN|KILL),\n         [ WATCH = (EXACT|SIMILAR) DURATION <#> ])\n  ];\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Flow in TiDB Diagnostic Framework Architecture\nDESCRIPTION: This diagram illustrates the four-layer architecture of the proposed diagnostic system, showing the data flow from information collection components through gRPC/HTTP interfaces to TiDB, which then makes the data available through infoschema to the diagnosis framework.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-L1--------------+             +-L3-----+\n| +-------------+ |             |        |\n| |   Metrics   | |             |        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| |   Disk IO   | +---L2:gRPC-->+        |\n| +-------------+ |             |        |\n| +-------------+ |             |  TiDB  |\n| |  Network IO | |             |        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| |   Hardware  | +---L2:HTTP-->+        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| | System Info | |             |        |\n| +-------------+ |             |        |\n+-----------------+             +---+----+\n                                    | \n                   +---infoschema---+ \n                   |                  \n                   v                  \n+-L4---------------+---------------------+\n|                                        |\n|          Diagnosis Framework           |\n|                                        |\n| +---------+ +---------+  +---------+   |\n| | rule1   | |  rule2  |  |  rule3  |   |\n| +---------+ +---------+  +---------+   |\n+----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index After Table Creation in SQL\nDESCRIPTION: SQL syntax for adding a vector index to an existing table using different approaches, including CREATE VECTOR INDEX and ALTER TABLE statements.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VECTOR INDEX idx_name USING HNSW ON foo ((VEC_COSINE_DISTANCE(data)))\n-- Proposal 1, \"WITH OPTION\" is not supported in Phase 1\n    [WITH OPTION \"m=16, ef_construction=64\"];\n-- Proposal 2ï¼Œ \"VECTOR_INDEX_PARAM\" is not supported in Phase 1\n    [VECTOR_INDEX_PARAM \"m=16, ef_construction=64\"];\n\nALTER TABLE foo ADD VECTOR INDEX idx_name USING HNSW ((VEC_COSINE_DISTANCE(data)))\n-- \"WITH OPTION\" is not supported in Phase 1\n [WITH OPTION \"m=16, ef_construction=64\"];\n```\n\n----------------------------------------\n\nTITLE: Legacy Mode System Variable for Backward Compatibility\nDESCRIPTION: SQL example of the proposed legacy mode system variable that would allow backward compatibility with existing configurations that set INSTANCE-scoped variables using SESSION scope.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL tidb_enable_legacy_instance_scope = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index with Table Creation in SQL\nDESCRIPTION: SQL syntax for creating a table with a vector index using the HNSW method. This shows how to define vector columns and create a vector index with the VEC_COSINE_DISTANCE function.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo (\n    id       INT PRIMARY KEY,\n    data     VECTOR(5),\n    data64   VECTOR64(10),\n    -- \"WITH OPTION\" is not supported in Phase 1\n    VECTOR INDEX idx_name USING HNSW ((VEC_COSINE_DISTANCE(data))) [WITH OPTION \"m=16, ef_construction=64\"]\n);\n```\n\n----------------------------------------\n\nTITLE: Data Structures for Multi-Schema Change Implementation in Go\nDESCRIPTION: Definition of Job and SubJob data structures that represent DDL operations, with MultiSchemaInfo containing information for multi-schema changes. The Job represents an entire DDL statement while SubJobs represent individual schema changes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Job represents a DDL action.\ntype Job struct {\n    Type       ActionType    `json:\"type\"`\n    State      JobState      `json:\"state\"`\n    // ...\n    MultiSchemaInfo *MultiSchemaInfo `json:\"multi_schema_info\"`\n}\n\n// MultiSchemaInfo contains information for multi-schema change.\ntype MultiSchemaInfo struct {\n   // ...\n   SubJobs  []SubJob `json:\"sub_jobs\"`\n}\n\n// SubJob represents one schema change in a multi-schema change DDL.\ntype SubJob struct {\n   Type    ActionType      `json:\"type\"`\n   State   JobState        `json:\"state\"`\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Example Table Schema with Multiple Indexes in SQL\nDESCRIPTION: SQL code showing the definition of an example table with multiple indexes that could benefit from the proposed multi-index access capability.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (a int, b int, c int);\nCREATE INDEX t1a on t1(a);\nCREATE INDEX t1b on t1(b);\nCREATE INDEX t1c on t1(c);\n```\n\n----------------------------------------\n\nTITLE: Defining Row Key Format for TiDB Tables\nDESCRIPTION: Specification of the binary format used for row keys in TiDB. The format includes table ID and handle components, with a total fixed length of 19 bytes for traditional integer handles.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nt | {table_id} | _r | {handle} // component\n1 | 8          | 2  | 8        // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policies for Different Storage Types in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create placement policies for different storage types (SSD and HDD) and apply them to a partitioned table based on date ranges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY storeonfastssd CONSTRAINTS=\"[+disk=ssd]\";\nCREATE PLACEMENT POLICY storeonhdd CONSTRAINTS=\"[+disk=hdd]\";\n\nCREATE TABLE t1 (id INT, name VARCHAR(50), purchased DATE)\n PLACEMENT POLICY='companystandardpolicy'\n PARTITION BY RANGE( YEAR(purchased) ) (\n  PARTITION p0 VALUES LESS THAN (2000) PLACEMENT POLICY='storeonhdd',\n  PARTITION p1 VALUES LESS THAN (2005),\n  PARTITION p2 VALUES LESS THAN (2010),\n  PARTITION p3 VALUES LESS THAN (2015),\n  PARTITION p4 VALUES LESS THAN MAXVALUE PLACEMENT POLICY='storeonfastssd'\n )\n;\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Handler for Connection Logging in TiDB Extension\nDESCRIPTION: This snippet demonstrates how to create an extension that logs information when a new connection is established. It implements a session handler with connection event handling and registers it with the extension framework.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// pkg/extension/example/example.go\n\npackage example\n\nimport (\n\t\"github.com/pingcap/tidb/pkg/extension\"\n\t\"github.com/pingcap/tidb/pkg/parser/terror\"\n\t\"github.com/pingcap/tidb/pkg/util/logutil\"\n\t\"go.uber.org/zap\"\n)\n\nfunc createSessionHandler() *extension.SessionHandler {\n\treturn &extension.SessionHandler{\n\t\tOnConnectionEvent: func(tp extension.ConnEventTp, info *extension.ConnEventInfo) {\n\t\t\tif tp == extension.ConnConnected {\n\t\t\t\tlogutil.BgLogger().Info(\"new connection connected\", zap.String(\"client IP\", info.ClientIP))\n\t\t\t}\n\t\t},\n\t}\n}\n\nfunc init() {\n\terr := extension.Register(\n\t\t\"example\",\n\t\textension.WithSessionHandlerFactory(createSessionHandler),\n\t)\n\tterror.MustNil(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using AS OF TIMESTAMP Syntax in TiDB\nDESCRIPTION: Demonstrates how to query data using the AS OF TIMESTAMP syntax to perform stale reads at specific timestamps or relative time intervals.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM t AS OF TIMESTAMP '2021-09-22 15:04:05' WHERE id = 1;\nSELECT * FROM t AS OF TIMESTAMP NOW() - INTERVAL 20 SECOND WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating a TTL Table in TiDB\nDESCRIPTION: SQL syntax for creating a new table with TTL functionality. The example creates a table where rows will be automatically deleted 3 months after their creation date.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (\n    id int PRIMARY KEY,\n    created_at TIMESTAMP\n) TTL = `created_at` + INTERVAL 3 MONTH;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Index Selection Use Case in SQL\nDESCRIPTION: SQL example showing a table schema with multiple indexes and a query that could benefit from skyline pruning to select the optimal index without relying on statistics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-01-25-skyline-pruning.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t(a int, b int, c int, index idx1(b, a), index idx2(a));\nselect * from t where a = 1 and b = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Unique Index Key Format in TiDB\nDESCRIPTION: Specification of the binary format used for non-unique index keys in TiDB. The format includes table ID, index ID, column values, and an encoded handle as the suffix.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nt | {table_id} | _i | {index_id} | {index_column_values} | encoded_handle // component\n1 | 8          | 2  | 8          | size of the values    | 9              // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Foreign Key Constraints When Adding via ALTER TABLE\nDESCRIPTION: This snippet shows SQL code for validating foreign key constraints when adding a foreign key via ALTER TABLE. It performs a check to ensure all existing rows in the child table have corresponding entries in the parent table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect 1 from t2 where t2.a is not null and t2.a not in (select id from t1) limit 1;\n```\n\n----------------------------------------\n\nTITLE: Basic Backup/Restore/Import/Export SQL Syntax in TiDB\nDESCRIPTION: Demonstrates the basic SQL syntax for backup, restore, import and export operations in TiDB. These statements allow operating on all databases or specific databases/tables.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nBACKUP DATABASE * TO 's3://storage/url';\nRESTORE DATABASE * FROM 's3://storage/url';\nIMPORT DATABASE * FROM 'file:///data/dump/';\nEXPORT DATABASE * TO 's3://storage/url';\n```\n\n----------------------------------------\n\nTITLE: TiDB Basic Foreign Key Setup and Execution Plan\nDESCRIPTION: Creates two tables with foreign key relationship and demonstrates execution plan for delete operation with cascade effect.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ninsert into t1 values (1, 1);\ninsert into t2 values (1, 1);\n```\n\n----------------------------------------\n\nTITLE: Creating a VIEW in SQL\nDESCRIPTION: Example of creating a PopularBooks view that selects books with the IsPopular field set to 1. This demonstrates the basic CREATE VIEW syntax that will be implemented.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-24-view-support.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR replace VIEW popularbooks \nAS \n  SELECT isbn, \n         title, \n         author, \n         publishdate \n  FROM   books \n  WHERE  ispopular = 1 \n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Privileges and SQL Roles in TiDB\nDESCRIPTION: This SQL snippet shows how dynamic privileges and SQL roles work together in TiDB. It creates users and roles, grants privileges, and tests various privilege-based operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmustExec(c, rootSe, \"CREATE USER notsuper\")\nmustExec(c, rootSe, \"CREATE USER otheruser\")\nmustExec(c, rootSe, \"CREATE ROLE anyrolename\")\nmustExec(c, rootSe, \"SET tidb_enable_dynamic_privileges=1\")\n\nse := newSession(c, s.store, s.dbName)\nc.Assert(se.Auth(&auth.UserIdentity{Username: \"notsuper\", Hostname: \"%\"}, nil, nil), IsTrue)\nmustExec(c, se, \"SET tidb_enable_dynamic_privileges=1\")\n\n// test SYSTEM_VARIABLES_ADMIN\n_, err := se.ExecuteInternal(context.Background(), \"SET GLOBAL wait_timeout = 86400\")\nc.Assert(err.Error(), Equals, \"[planner:1227]Access denied; you need (at least one of) the SUPER or SYSTEM_VARIABLES_ADMIN privilege(s) for this operation\")\nmustExec(c, rootSe, \"GRANT SYSTEM_VARIABLES_admin ON *.* TO notsuper\")\nmustExec(c, se, \"SET GLOBAL wait_timeout = 86400\")\n\n// test ROLE_ADMIN\n_, err = se.ExecuteInternal(context.Background(), \"GRANT anyrolename TO otheruser\")\nc.Assert(err.Error(), Equals, \"[planner:1227]Access denied; you need (at least one of) the SUPER or ROLE_ADMIN privilege(s) for this operation\")\nmustExec(c, rootSe, \"GRANT ROLE_ADMIN ON *.* TO notsuper\")\nmustExec(c, se, \"GRANT anyrolename TO otheruser\")\n\n// revoke SYSTEM_VARIABLES_ADMIN, confirm it is dropped\nmustExec(c, rootSe, \"REVOKE SYSTEM_VARIABLES_AdmIn ON *.* FROM notsuper\")\n_, err = se.ExecuteInternal(context.Background(), \"SET GLOBAL wait_timeout = 86000\")\nc.Assert(err.Error(), Equals, \"[planner:1227]Access denied; you need (at least one of) the SUPER or SYSTEM_VARIABLES_ADMIN privilege(s) for this operation\")\n\n// grant super, confirm that it is also a substitute for SYSTEM_VARIABLES_ADMIN\nmustExec(c, rootSe, \"GRANT SUPER ON *.* TO notsuper\")\nmustExec(c, se, \"SET GLOBAL wait_timeout = 86400\")\n\n// revoke SUPER, assign SYSTEM_VARIABLES_ADMIN to anyrolename.\n// confirm that a dynamic privilege can be inherited from a role.\nmustExec(c, rootSe, \"REVOKE SUPER ON *.* FROM notsuper\")\nmustExec(c, rootSe, \"GRANT SYSTEM_VARIABLES_AdmIn ON *.* TO anyrolename\")\nmustExec(c, rootSe, \"GRANT anyrolename TO notsuper\")\n\n// It's not a default role, this should initially fail:\n_, err = se.ExecuteInternal(context.Background(), \"SET GLOBAL wait_timeout = 86400\")\nc.Assert(err.Error(), Equals, \"[planner:1227]Access denied; you need (at least one of) the SUPER or SYSTEM_VARIABLES_ADMIN privilege(s) for this operation\")\nmustExec(c, se, \"SET ROLE anyrolename\")\nmustExec(c, se, \"SET GLOBAL wait_timeout = 87000\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Shard Index Solution in SQL\nDESCRIPTION: SQL for creating the same table but with a shard index implementation to scatter the hot index while maintaining unique constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test(id1 INT PRIMARY, id2 INT, id3 INT, UNIQUE KEY hotIndex((tidb_shard(id2)),id2));\n```\n\n----------------------------------------\n\nTITLE: Altering an Existing Table to Enable TTL\nDESCRIPTION: SQL command to add TTL functionality to an existing table. This will configure the table to delete rows 3 months after their creation date.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t1 TTL = `created_at` + INTERVAL 3 MONTH;\n```\n\n----------------------------------------\n\nTITLE: Selective Backup SQL Syntax in TiDB\nDESCRIPTION: Shows how to perform backup operations on specific databases or tables in TiDB using SQL syntax.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nBACKUP DATABASE db1, db2, db3 TO 's3://storage/url';\nBACKUP TABLE db1.tbl1, db2.tbl2, db3.tbl3 TO 's3://storage/url';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Current TiDB Collation Behavior with SQL\nDESCRIPTION: SQL example showing how TiDB currently handles collations incorrectly by treating case-insensitive collation as binary collation, allowing duplicate keys that should be considered identical.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntidb> create table t(a varchar(20) charset utf8mb4 collate utf8mb4_general_ci key);\nQuery OK, 0 rows affected\ntidb> show create table t;\n+-------+-------------------------------------------------------------+\n| Table | Create Table                                                |\n+-------+-------------------------------------------------------------+\n| t     | CREATE TABLE `t` (                                          |\n|       |   `a` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,      |\n|       |   PRIMARY KEY (`a`)                                         |\n|       | ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin |\n+-------+-------------------------------------------------------------+\n1 row in set\ntidb> insert into t values ('A');\nQuery OK, 1 row affected\ntidb> insert into t values ('a');\nQuery OK, 1 row affected\n```\n\n----------------------------------------\n\nTITLE: Partitioned Users Table with Geographic Placement\nDESCRIPTION: Enhanced table creation with list partitioning based on country and placement policies for geographic data separation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n\tid INT NOT NULL auto_increment,\n\tusername VARCHAR(64) NOT NULL,\n\temail VARCHAR(64) NOT NULL,\n\tdateofbirth DATE NOT NULL,\n\tcountry VARCHAR(10) NOT NULL,\n\tPRIMARY KEY (id),\n\tUNIQUE (username)\n) PARTITION BY LIST COLUMNS (country) (\n\tPARTITION pEurope VALUES IN ('DE', 'FR', 'GB') PLACEMENT POLICY='europe',\n\tPARTITION pOther VALUES IN ('US', 'CA', 'MX')\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing TTL Job Interval\nDESCRIPTION: SQL command to change how frequently the TTL job runs for a specific table. The example sets the job to run every day instead of the default 1 hour.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t1 TTL_JOB_INTERVAL='1d';\n```\n\n----------------------------------------\n\nTITLE: Example DML Operations Using Temporary Tables in Transactions\nDESCRIPTION: Examples showing how DML operations on normal tables might depend on temporary tables within a transaction. These operations need to be retried if the transaction commit fails to ensure data consistency.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-20-temporary-table.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO normal_table SELECT * FROM temp_table\nUPDATE normal_table, temp_table SET â€¦ WHERE normal_table.id=temp_table.id\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Partitioned Table in TiDB SQL\nDESCRIPTION: Example of creating a table partitioned by range on the 'id' column, with three partitions: p1 for values less than 10, p2 for values less than 20, and p3 for values less than 30.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-19-table-partition.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t (id int) partition by range (id)\n(partition p1 values less than (10),\npartition p2 values less than (20),\npartition p3 values less than (30))\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Plugin for TiDB\nDESCRIPTION: A complete example of implementing a custom authentication plugin for TiDB using the extension framework. This plugin validates users based on password presence and registers itself with the system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"errors\"\n\n\t\"github.com/pingcap/tidb/pkg/extension\"\n\t\"github.com/pingcap/tidb/pkg/parser/mysql\"\n\t\"github.com/pingcap/tidb/pkg/parser/terror\"\n\t\"github.com/pingcap/tidb/pkg/sessionctx/variable\"\n)\n\nfunc createAuthPlugin() *extension.AuthPlugin {\n\treturn &extension.AuthPlugin{\n\t\t// Name of the plugin: `CREATE USER <username> IDENTIFIED WITH my_auth_plugin AS <pwd>`\n\t\tName: \"my_auth_plugin\",\n\t\t// MySQL clients will use the `mysql_native_password` plugin\n\t\tRequiredClientSidePlugin: \"mysql_native_password\",\n\t\tAuthenticateUser: func(request extension.AuthenticateRequest) error {\n\t\t\t// Allow login as long as there is an input password\n\t\t\tif len(request.InputAuthString) > 0 {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn errors.New(\"no password\")\n\t\t},\n\t\tGenerateAuthString: func(pwd string) (string, bool) {\n\t\t\t// As long as password is not empty, allow it\n\t\t\treturn pwd, pwd != \"\"\n\t\t},\n\t\tValidateAuthString: func(pwdHash string) bool {\n\t\t\t// As long as password is not empty, allow it\n\t\t\treturn pwdHash != \"\"\n\t\t},\n\t}\n}\n\nfunc init() {\n\tplugin := createAuthPlugin()\n\t// Can load a list of auth plugins\n\tauthPlugins := []*extension.AuthPlugin{plugin}\n\terr := extension.Register(\n\t\t\"extension_authentication_plugin\",\n\t\textension.WithCustomAuthPlugins(authPlugins),\n\t\t// Register the plugin name as a system variable\n\t\textension.WithCustomSysVariables([]*variable.SysVar{\n\t\t\t{\n\t\t\t\tScope: variable.ScopeGlobal,\n\t\t\t\tName:  \"extension_authentication_plugin\",\n\t\t\t\tValue: mysql.AuthNativePassword,\n\t\t\t\tType:  variable.TypeEnum,\n\t\t\t\t// Add `my_auth_plugin` and the names of other auth plugins here\n\t\t\t\tPossibleValues: []string{plugin.Name},\n\t\t\t},\n\t\t}),\n\t)\n\tterror.MustNil(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Foreign Key Creation with Variable Controls in SQL\nDESCRIPTION: This snippet demonstrates how foreign keys can be created with the foreign_key_checks variable turned off, allowing a child table to reference a parent table that doesn't yet exist.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n>set @@foreign_key_checks=0;\nQuery OK, 0 rows affected\n>create table t2 (a int key, foreign key fk(a) references t1(id));\nQuery OK, 0 rows affected\n>create table t1 (id int key);\nQuery OK, 0 rows affected\n>set @@foreign_key_checks=1;\nQuery OK, 0 rows affected\n>insert into t2 values (1);\n(1452, 'Cannot add or update a child row: a foreign key constraint fails (`test`.`t2`, CONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t1` (`id`))')\n```\n\n----------------------------------------\n\nTITLE: Cascade Modification Test Case\nDESCRIPTION: Demonstrates cascading delete behavior across three linked tables with foreign key constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ndrop table if exists t3,t2,t1;\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ncreate table t3 (id int key,a int, foreign key fk(a) references t2(id) ON DELETE CASCADE);\ninsert into t1 values (1,1);\ninsert into t2 values (2,1);\ninsert into t3 values (3,2);\ndelete from t1 where id = 1;\n```\n\n----------------------------------------\n\nTITLE: Show DDL Jobs Command - SQL\nDESCRIPTION: SQL command to display recent DDL jobs, allowing administrators to identify job IDs for pause/resume operations. The number parameter can be adjusted to show more jobs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-15-ddl-pause-resume.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nadmin show ddl jobs 15;\n```\n\n----------------------------------------\n\nTITLE: Quick Start Guide Using TiUP for BR\nDESCRIPTION: A tutorial demonstrating how to use BR with a TiDB cluster deployed via TiUP. It covers starting a cluster, generating test data with the TPCC benchmark, and performing backup and restore operations on a specific table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Using tiup to start a TiDB cluster\ntiup playground --db 2 --pd 3 --kv 3 --monitor\n\n# Using tiup bench to generater test data.\ntiup bench tpcc --warehouses 1 prepare\n\n# How many row do we get? 300242 rows.\nmysql --host 127.0.0.1 --port 4000 -E -e \"SELECT COUNT(*) FROM test.order_line\" -u root -p\n\n# Build br.\nmake build_br\n\n# Backup TPC-C test data.\nbin/br backup table --db test \\\n\t--table order_line \\\n\t-s local:///tmp/backup_test/ \\\n\t--pd ${PD_ADDR}:2379 \\\n\t--log-file backup_test.log \\\n\n# Let's drop the table.\nmysql -uroot --host 127.0.0.1 -P4000 -E -e \"USE test; DROP TABLE order_line; show tables\" -u root -p\n\n# Restore from the backup.\nbin/br restore table --db test \\\n\t--table order_line \\\n\t-s local:///tmp/backup_test/ \\\n\t--pd ${PD_ADDR}:2379 \\\n\t--log-file restore_test.log\n\n# How many rows do we get after restore? Expected to be 300242 rows.\nmysql --host 127.0.0.1 -P4000 -E -e \"SELECT COUNT(*) FROM test.order_line\" -uroot -p\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Creation SQL with Vector Indexes\nDESCRIPTION: SQL command to show the CREATE TABLE statement including vector index definitions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: Creating a TTL Table with Disabled Job\nDESCRIPTION: Example of creating a TTL table with the TTL job initially disabled. The TTL_ENABLE option can be set to 'OFF' to prevent automatic deletion until manually enabled.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (\n    id int PRIMARY KEY,\n    created_at TIMESTAMP\n) TTL = `created_at` + INTERVAL 3 MONTH TTL_ENABLE = 'OFF';\n```\n\n----------------------------------------\n\nTITLE: Setting Table Attributes in TiDB\nDESCRIPTION: SQL syntax for setting and resetting attributes on a table level. Allows specifying key-value pairs as attributes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-10-20-table-attributes.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ATTRIBUTES[=]'key=value[, key1=value1...]';\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ATTRIBUTES[=]DEFAULT;\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence in SQL\nDESCRIPTION: SQL syntax for creating a sequence with various options like increment, min/max values, start value, cache size, and cycle behavior.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE [IF NOT EXISTS] sequence_name\n[ INCREMENT [ BY | = ] increment ]\n[ MINVALUE [=] minvalue | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] maxvalue | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] start ] \n[ CACHE [=] cache | NOCACHE | NO CACHE ]\n[ CYCLE | NOCYCLE | NO CYCLE]\n```\n\n----------------------------------------\n\nTITLE: Altering Index Visibility in SQL\nDESCRIPTION: SQL syntax for changing an existing index's visibility using ALTER TABLE statement. This allows toggling between visible and invisible states without recreating the index.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-03-12-invisible-index.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name ALTER INDEX index_name { INVISIBLE | VISIBLE };\n```\n\n----------------------------------------\n\nTITLE: Advanced Placement Policy Configuration in SQL\nDESCRIPTION: Demonstrates advanced placement policy configuration using constraints for custom labels and specific follower allocation across regions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nALTER PLACEMENT POLICY `standardplacement` CONSTRAINTS=\"[+disk=ssd]\";\n```\n\nLANGUAGE: SQL\nCODE:\n```\nALTER PLACEMENT POLICY `standardplacement3` LEADER_CONSTRAINTS=\"[+region=us-east-1]\" FOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 1,+region=us-east-2: 1,+region=us-west-1: 1}\";\n```\n\n----------------------------------------\n\nTITLE: TiFlash Tablescan Execution Process with Late Materialization\nDESCRIPTION: This snippet outlines the new process for executing a tablescan in TiFlash with late materialization. It describes a 5-step process involving MVCC filtering, condition filtering, bitmap operations, and data pack reading.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-06-support-late-materialization.md#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n1. read <handle, delmark, version>, and do MVCC filtering. Return an MVCC bitmap, which represents the availability of each tuple.\n2. read columns which pushed down filter conditions need, and do filtering, return a filtering bitmap.\n3. do a bitwise AND operation on the two bitmaps, and return the final bitmap.\n4. With final bitmap, just read the necessary data packs of the rest columns which are needed.\n5. Apply the final bitmap to the data packs, and return the final result.\n```\n\n----------------------------------------\n\nTITLE: Alternative Vector Index Creation Syntax in SQL\nDESCRIPTION: Various syntax options for creating vector indexes showing different variations including conditional creation (IF NOT EXISTS) and different ways to specify index type.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VECTOR INDEX idx ON t ((VEC_COSINE_DISTANCE(a))) USING HNSW;\nCREATE VECTOR INDEX IF NOT EXISTS idx ON t ((VEC_COSINE_DISTANCE(a))) TYPE HNSW;\nCREATE VECTOR INDEX ident ON db.t (ident, ident ASC ) TYPE HNSW;\n\nALTER TABLE t ADD VECTOR ((VEC_COSINE_DISTANCE(a))) USING HNSW COMMENT 'a';\nALTER TABLE t ADD VECTOR INDEX ((VEC_COSINE_DISTANCE(a))) USING HNSW COMMENT 'a';\nALTER TABLE t ADD VECTOR INDEX IF NOT EXISTS ((VEC_COSINE_DISTANCE(a))) USING HNSW COMMENT 'a';\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Visibility Option in SQL\nDESCRIPTION: SQL syntax for creating an index with the VISIBLE or INVISIBLE option. This allows specifying whether an index should be used by the optimizer.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-03-12-invisible-index.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [...] INDEX index_name\n    [index_type]\n    ON tbl_name (key_part,...)\n    [index_option]\n\nindex_option:\n    {VISIBLE | INVISIBLE}\n```\n\n----------------------------------------\n\nTITLE: Implementing Privilege Verification Logic in TiDB Authentication Plugin\nDESCRIPTION: This code snippet demonstrates the overall logic for verifying privileges in TiDB's authentication plugin. It combines the existing MySQL privilege check with the custom plugin's verification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc VerifyPrivilege(mysqlPriv *MySQLPrivilege, user string) bool {\n\treturn mysqlPriv.RequestVerification(...) && getPluginForUser(user).RequestVerification(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Sequence Value in SQL\nDESCRIPTION: SQL expressions to get the next value from a sequence.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nNEXT VALUE FOR sequence_name / NEXTVAL(sequence_name)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Table with Chinese Characters in UTF8MB4\nDESCRIPTION: Example demonstrating the current behavior of Chinese character ordering using utf8mb4_zh_0900_as_cs collation. Shows table creation, data insertion, and ordering query.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-12-utf8mb4-pinyin-order.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t(\n\ta varchar(100)\n)\ncharset = 'utf8mb4' collate = 'utf8mb4_zh_0900_as_cs';\n\n# insert some data:\ninsert into t values (\"ä¸­æ–‡\"), (\"å•Šä¸­æ–‡\");\n\n# a query requires to order by column a in its pinyin order:\nselect * from t order by a;\n+-----------+\n| a         |\n+-----------+\n| å•Šä¸­æ–‡    |\n| ä¸­æ–‡      |\n+-----------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: SQL Definition for ANALYZE PREDICATE COLUMNS Syntax\nDESCRIPTION: SQL syntax for analyzing only predicate columns in a table, which helps reduce the cost of ANALYZE operations for large tables by focusing only on columns used in query predicates.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE TABLE tbl_name PREDICATE COLUMNS;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Uniqueness Check in Pessimistic Transactions\nDESCRIPTION: This SQL snippet shows the proposed behavior for lazy uniqueness check in pessimistic transactions when tidb_constraint_check_in_place_pessimistic is off. It demonstrates that constraint violations are detected at commit time, similar to optimistic transactions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-08-04-pessimistic-lazy-constraint-check.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t1 (id INT NOT NULL PRIMARY KEY);\nINSERT INTO t1 VALUES (1), (2);\n\nset tidb_constraint_check_in_place_pessimistic = off;\nBEGIN PESSIMISTIC;\nSELECT * FROM t1 WHERE id = 1 FOR UPDATE; -- SELECT FOR UPDATE locks key as usual.\nINSERT INTO t1 VALUES (2); -- Skip acquiring the lock and return success.\nCOMMIT; -- ERROR 1062 (23000): Duplicate entry '2' for key 'PRIMARY'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Window Functions in SQL Query\nDESCRIPTION: This SQL example shows the usage of window functions with both partition by and frame clause specifications. It demonstrates sum() over partition and avg() with a frame specification of rows between 1 preceding and 1 following.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-31-window-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect a, b, sum(b) over(partition by a) as 'sum', avg(b) over(partition by a order by b rows between 1 preceding and 1 following) as 'avg' from t;\n```\n\n----------------------------------------\n\nTITLE: Using Log Redaction in TiDB SQL\nDESCRIPTION: Example showing how the log redaction feature works in TiDB. When enabled with the session variable 'tidb_redact_log', sensitive information in error messages is replaced with question marks, protecting information like unique key values in both client-facing error messages and server logs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/errno/logredaction.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create table t (a int, unique key (a));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t values (1),(1);\nERROR 1062 (23000): Duplicate entry '1' for key 'a'\nmysql> set @@session.tidb_redact_log=1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t values (1),(1);\nERROR 1062 (23000): Duplicate entry '?' for key '?'\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Parsing Implementation in Go\nDESCRIPTION: Initial implementation showing how to parse SQL text into AST nodes using TiDB parser.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/parser/docs/quickstart.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pingcap/tidb/pkg/parser\"\n\t\"github.com/pingcap/tidb/pkg/parser/ast\"\n\t_ \"github.com/pingcap/tidb/pkg/parser/test_driver\"\n)\n\nfunc parse(sql string) (*ast.StmtNode, error) {\n\tp := parser.New()\n\n\tstmtNodes, _, err := p.ParseSQL(sql)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &stmtNodes[0], nil\n}\n\nfunc main() {\n\tastNode, err := parse(\"SELECT a, b FROM t\")\n\tif err != nil {\n\t\tfmt.Printf(\"parse error: %v\\n\", err.Error())\n\t\treturn\n\t}\n\tfmt.Printf(\"%v\\n\", *astNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Read-Only Transaction with Timestamp in TiDB\nDESCRIPTION: Shows how to initiate a read-only transaction with a specific timestamp for stale reads.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION READ ONLY AS OF TIMESTAMP '2021-09-22 15:04:05';\nSELECT * FROM t WHERE id = 1;\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ALTER TABLE Add Foreign Key with Cascade Delete in SQL\nDESCRIPTION: This example shows how to add a foreign key with ON DELETE CASCADE option using ALTER TABLE. It illustrates the process of creating tables, inserting data, and then establishing the foreign key relationship.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, index(a));\ninsert into t1 values (1,1);\ninsert into t2 values (1,1);\nalter  table t2 add constraint fk_1 foreign key (a) references t1(id) ON DELETE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Uniqueness Check in Optimistic Transactions\nDESCRIPTION: This SQL snippet demonstrates how lazy uniqueness check works in optimistic transactions when tidb_constraint_check_in_place is off. It shows that constraint violations are detected at commit time rather than during statement execution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-08-04-pessimistic-lazy-constraint-check.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t1 (id INT NOT NULL PRIMARY KEY);\nINSERT INTO t1 VALUES (1), (2);\nBEGIN OPTIMISTIC;\nINSERT INTO t1 VALUES (1); -- MySQL returns an error here; TiDB returns success.\nINSERT INTO t1 VALUES (2);\nCOMMIT; -- ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n```\n\n----------------------------------------\n\nTITLE: Show Backup Status SQL in TiDB\nDESCRIPTION: Illustrates how to query the status of backup operations using the SHOW BACKUPS statement in TiDB. This can be filtered using LIKE and WHERE clauses.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW BACKUPS;\nSHOW BACKUP LIKE 'local:%';\nSHOW BACKUP WHERE `State` = 'Wait';\n```\n\n----------------------------------------\n\nTITLE: Creating Table with MySQL-Compatible AUTO_INCREMENT\nDESCRIPTION: SQL syntax example showing how to create a table with AUTO_INCREMENT using the AUTO_ID_CACHE option set to 1 for MySQL compatibility.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-10-13-mysql-compatible-auto-increment.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t (id int key AUTO_INCREMENT) AUTO_ID_CACHE 1;\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT Query for TTL Scan in SQL\nDESCRIPTION: This SQL query is used to select expired rows from a table within a specific ID range. It's part of the TTL scan process in TiDB, limiting the number of returned rows for efficient processing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT LOW_PRIORITY id FROM t1\nWHERE create_time < '2022-01-01 00:00:00' AND id >= 12345 AND id < 45678\nORDER BY id ASC\nLIMIT 500;\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned Table with Unique Key in SQL\nDESCRIPTION: SQL example of creating a partitioned table with a unique key constraint. This structure is currently not allowed in TiDB due to index uniqueness issues across partitions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t (\n    A int,\n    B int,\n    UNIQUE KEY (B)\n)\nPARTITION BY RANGE (A) (\n PARTITION p0 VALUES LESS THAN (10),\n PARTITION p1 VALUES LESS THAN (20),\n PARTITION p2 VALUES LESS THAN (maxvalue)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Encoding Interface for Character Set Support in TiDB\nDESCRIPTION: Definition of the Encoding interface that needs to be implemented to add GBK character set support in TiDB. This interface provides methods for encoding/decoding characters, handling character transformations, and supporting case conversion.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-08-18-charsets.md#2025-04-18_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// Encoding provide encode/decode functions for a string with a specific charset.\ntype Encoding interface {\n\t// Name is the name of the encoding.\n\tName() string\n\t// Tp is the type of the encoding.\n\tTp() EncodingTp\n\t// Peek returns the next char.\n\tPeek(src []byte) []byte\n\t// MbLen returns multiple byte length, if the next character is single byte, return 0.\n\tMbLen(string) int\n\t// IsValid checks whether the utf-8 bytes can be convert to valid string in current encoding.\n\tIsValid(src []byte) bool\n\t// Foreach iterates the characters in in current encoding.\n\tForeach(src []byte, op Op, fn func(from, to []byte, ok bool) bool)\n\t// Transform map the bytes in src to dest according to Op.\n\t// **the caller should initialize the dest if it wants to avoid memory alloc every time, or else it will always make a new one**\n\t// **the returned array may be the alias of `src`, edit the returned array on your own risk**\n\tTransform(dest *bytes.Buffer, src []byte, op Op) ([]byte, error)\n\t// ToUpper change a string to uppercase.\n\tToUpper(src string) string\n\t// ToLower change a string to lowercase.\n\tToLower(src string) string\n}\n```\n\n----------------------------------------\n\nTITLE: TiDB Data Storage Format in TiKV\nDESCRIPTION: Representation of how TiDB stores table data in TiKV. Keys are encoded with table ID and row ID for records, or table ID, index ID and indexed column values for indexes. Values contain either column data or row IDs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/docs/cn/2019-08-05-new-design-of-backup-restore.md#2025-04-18_snippet_1\n\nLANGUAGE: code\nCODE:\n```\nKey: tablePrefix{tableID}_recordPrefixSep{rowID}\nValue: [col1, col2, col3, col4]\n\nKey: tablePrefix{tableID}_indexPrefixSep{indexID}_indexedColumnsValue\nValue: rowID\n```\n\n----------------------------------------\n\nTITLE: Vector Index Metadata Structures in Go\nDESCRIPTION: Go structs defining the metadata for vector indexes in TiDB. Includes VectorIndexInfo for vector-specific properties and modifications to IndexInfo to support vector indexes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// VectorIndexInfo is the information on the vector index of a column.\ntype VectorIndexInfo struct {\n    // Kind is the kind of vector index. Currently, only HNSW is supported.\n    Kind           VectorIndexKind  `json:\"kind\"`\n    // Dimension is the dimension of the vector.\n    Dimension      uint64           `json:\"dimension\"` // Set to 0 when initially parsed from comment. Will be assigned to flen later.\n    // DistanceMetric is the distance metric used by the index.\n    DistanceMetric DistanceMetric   `json:\"distance_metric\"`\n}\n\n// IndexInfo provides meta data describing a DB index.\ntype IndexInfo struct {\n    ID            int64                     `json:\"id\"`\n    Name          CIStr                     `json:\"idx_name\"`      // Index name.\n    ...\n    // VectorInfo is the vector index information.\n    VectorInfo    *VectorIndexInfo           `json:\"is_vector\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sequence Value in SQL\nDESCRIPTION: SQL function to manually set the current value of a sequence.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSETVAL(sequence_name, num)\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing Foreign Key Example\nDESCRIPTION: Shows implementation of self-referencing foreign keys using an employee-manager relationship example.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate table employee (id int key,manager_id int, foreign key fk(manager_id) references employee(id) ON DELETE CASCADE);\ninsert into employee values (1,1);\ninsert into employee values (2,1);\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policy for Local Stale Reads in SQL\nDESCRIPTION: This SQL snippet shows how to create a placement policy for local stale reads and apply it to a table. It specifies follower constraints across multiple regions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY local_stale_reads FOLLOWER_CONSTRAINTS=\"{+us-east-1: 1,+us-east-2: 1,+us-west-1: 1,+us-west-2: 1}\";\nCREATE TABLE t (a int, b int) PLACEMENT POLICY=`local_stale_reads`;\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policy and Assigning to Table in SQL\nDESCRIPTION: Demonstrates how to create a placement policy and assign it to a table using SQL statements. The policy defines primary region and regions for data placement.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY policyName [placementOptions];\nCREATE TABLE t1 (a INT) PLACEMENT POLICY=policyName;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY `standardplacement` PRIMARY_REGION=\"us-east-1\" REGIONS=\"us-east-1,us-east-2\"\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t1 (\n\tid INT NOT NULL PRIMARY KEY,\n\tb VARCHAR(100)\n) PLACEMENT POLICY=`standardplacement`;\n```\n\n----------------------------------------\n\nTITLE: Non-recursive CTE Example - SQL\nDESCRIPTION: Example showing basic non-recursive CTE syntax with multiple CTE definitions and joins\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nWITH\n    cte1 AS (SELECT c1 FROM t1)\n    cte2 AS (SELECT c2 FROM t2)\nSELECT cte1.c1, cte2.c2 FROM cte1, cte2 WHERE cte1.c1 = cte2.c2 AND cte1.c1 = 100;\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Users After Secure Bootstrap in TiDB\nDESCRIPTION: Bash and SQL commands showing how to connect to TiDB via socket after secure initialization and create additional users with password authentication.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-29-secure-bootstrap.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -S /tmp/tidb.sock\n..\nmysql> CREATE USER 'root'@'%' IDENTIFIED BY 'securePassword';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n```\n\n----------------------------------------\n\nTITLE: SQL Syntax for Column Type Modification in TiDB\nDESCRIPTION: The SQL syntax that supports modifying column types in TiDB using the ALTER TABLE statement with CHANGE or MODIFY COLUMN clauses. It allows specifying the new column definition and optionally repositioning the column within the table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-07-07-change-column-types.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE tbl_name\n    [alter_specification]\n\nalter_specification:\nCHANGE [COLUMN] old_col_name new_col_name column_definition\n        [FIRST | AFTER col_name]\n| MODIFY [COLUMN] col_name column_definition\n        [FIRST | AFTER col_name]\n```\n\n----------------------------------------\n\nTITLE: Recursive CTE Example - SQL\nDESCRIPTION: Example demonstrating recursive CTE syntax for hierarchical queries with seed and recursive parts\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nWITH RECURSIVE cte1 AS (\n    SELECT part, sub_part FROM t WHERE part = 'human'\n    UNION ALL\n    SELECT t.part, t.sub_part FROM t, cte1 WHERE cte1.sub_part = t.part\n)\nSELECT * FROM cte1;\n```\n\n----------------------------------------\n\nTITLE: Creating or Altering Resource Group with Background Task Settings in SQL\nDESCRIPTION: SQL syntax for creating or altering a resource group with background task control settings. It allows specifying RU_PER_SEC, priority, and background task types.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE/ALTER RESOURCE GROUP rg1\n    RU_PER_SEC = 100000 [ PRIORITY = (HIGH|MEDIUM|LOW) ] [BURSTABLE]\n    [ BACKGROUND = ( TASK_TYPES = \"br,analyze\" ) ];\n```\n\n----------------------------------------\n\nTITLE: Querying a VIEW in SQL\nDESCRIPTION: Example of querying the previously created PopularBooks view, demonstrating how views can be used like regular tables in SELECT statements.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-24-view-support.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Author, Title FROM PopularBooks ORDER BY Author\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding Resource Groups in SQL\nDESCRIPTION: SQL commands to create resource groups with specified RU limits and priorities, and bind them to users or sessions. This allows controlling resource allocation at different levels.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-25-global-resource-control.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE RESOURCE GROUP resource_group_name RU_PER_SEC=20000 [PRIORITY=HIGH|MEDIUM|LOW] [BURSTABLE]\n/*eg:*/\nCREATE RESOURCE GROUP oltp_applicaton RU_PER_SEC=20000, PRIORITY=HIGH, burstable;\nCREATE RESOURCE GROUP small_applicatoin RU_PER_SEC=5000;\nCREATE RESOURCE GROUP olap_application RU_PER_SEC = 50000 PRIORITY=LOW, BURSTABLE;\n/* bind resource group via DCL */\nALTER USER user_name RESOURCE GROUP resource_group_name;\nCREATE USER user_name IDENTIFIED BY 'password' RESOURCE GROUP resource_group_name;\n\n/* bind resource group to the current session */\nSET RESOURCE GROUP resource_group_name\n\n/* bind resource group to sql via optimizer hint */\nSELECT /*+ RESOURCE_GROUP(resource_group_name) */ * from table_name;\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for Debugging TiDB in JSON\nDESCRIPTION: This snippet provides a sample configuration for Visual Studio Code's launch.json file. It sets up a debug configuration for running TiDB server with a default configuration file, allowing developers to debug the TiDB server within VS Code.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest2/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug TiDB With Default Config\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileWorkspaceFolder}/cmd/tidb-server\",\n            \"args\": [\"--config=${fileWorkspaceFolder}/pkg/config/config.toml.example\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Example for Setting Instance-Scoped Variables\nDESCRIPTION: Example of how users would set an instance-scoped system variable, which looks identical to setting a GLOBAL variable. The key difference is that INSTANCE scope changes are not persisted or propagated to other TiDB servers.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL max_connections=1234;\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Bindings Syntax in TiDB\nDESCRIPTION: Syntax for creating global or session-level SQL bindings in TiDB. A binding associates a SQL query with a hinted version that forces a specific execution plan.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-11-sql-plan-management.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [GLOBAL|SESSION] BINDING_NAME BINDING FOR `SQL` USING `HINTED SQL`\n```\n\n----------------------------------------\n\nTITLE: Querying TiDB Cluster Topology Information using SQL\nDESCRIPTION: Example of querying the CLUSTER_INFO system table in the information_schema database to retrieve topology information about a TiDB cluster, including component types, addresses, and versions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nmysql> use information_schema;\nDatabase changed\n\nmysql> desc CLUSTER_INFO;\n+----------------+---------------------+------+------+---------+-------+\n| Field          | Type                | Null | Key  | Default | Extra |\n+----------------+---------------------+------+------+---------+-------+\n| TYPE           | varchar(64)         | YES  |      | NULL    |       |\n| ADDRESS        | varchar(64)         | YES  |      | NULL    |       |\n| STATUS_ADDRESS | varchar(64)         | YES  |      | NULL    |       |\n| VERSION        | varchar(64)         | YES  |      | NULL    |       |\n| GIT_HASH       | varchar(64)         | YES  |      | NULL    |       |\n+----------------+---------------------+------+------+---------+-------+\n5 rows in set (0.00 sec)\n\nmysql> select TYPE, ADDRESS, STATUS_ADDRESS,VERSION from CLUSTER_INFO;\n+------+-----------------+-----------------+-----------------------------------------------+\n| TYPE | ADDRESS         | STATUS_ADDRESS  | VERSION                                       |\n+------+-----------------+-----------------+-----------------------------------------------+\n| tidb | 127.0.0.1:4000  | 127.0.0.1:10080 | 5.7.25-TiDB-v4.0.0-alpha-793-g79eef48a3-dirty |\n| pd   | 127.0.0.1:2379  | 127.0.0.1:2379  | 4.0.0-alpha                                   |\n| tikv | 127.0.0.1:20160 | 127.0.0.1:20180 | 4.0.0-alpha                                   |\n+------+-----------------+-----------------+-----------------------------------------------+\n3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Collation Interface in Go\nDESCRIPTION: Go interface definition for collation implementation, providing methods for string comparison and generating sort keys for collation-aware sorting.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype CharsetCollation interface {\n    // Compare returns an integer comparing the two byte slices. The result will be 0 if a == b, -1 if a < b, and +1 if a > b.\n    Compare(a, b []byte) (int, error)\n    // Key returns the collation key for str, the returned slice will point to an allocation in Buffer.\n    Key(buf *Buffer, str []byte) ([]byte, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TiDB System Variables in SQL\nDESCRIPTION: Examples of SQL statements to set TiDB system variables at different scopes (session, global). This demonstrates the syntax for configuring variables dynamically.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n# These two identical statements change a session variable\nSET tidb_distsql_scan_concurrency = 10;\nSET SESSION tidb_distsql_scan_concurrency = 10;\n\n# These two identical statements change a global variable\nSET @@global.tidb_distsql_scan_concurrency = 10;\nSET  GLOBAL tidb_distsql_scan_concurrency = 10;\n```\n\n----------------------------------------\n\nTITLE: Complex Placement Policy Management for Partitioned Tables in SQL\nDESCRIPTION: A series of SQL commands demonstrating how placement policies are applied and modified for partitioned tables, including inheritance of policies from table to partition level.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t1 PARTITION p0 PLACEMENT POLICY=\"acdc\";\n--> \nCREATE TABLE t1 (id INT, name VARCHAR(50), purchased DATE)\n PARTITION BY RANGE( YEAR(purchased) ) (\n  PARTITION p0 VALUES LESS THAN (2000) PLACEMENT POLICY=\"acdc\",\n  PARTITION p1 VALUES LESS THAN (2005)\n );\n\nALTER TABLE t1 PLACEMENT POLICY=\"xyz\";\n--> \nCREATE TABLE t1 (id INT, name VARCHAR(50), purchased DATE)\n PLACEMENT POLICY=\"xyz\"\n PARTITION BY RANGE( YEAR(purchased) ) (\n  PARTITION p0 VALUES LESS THAN (2000) PLACEMENT POLICY=\"acdc\",\n  PARTITION p1 VALUES LESS THAN (2005)\n );\n\nALTER TABLE t1 PARTITION p0 PLACEMENT POLICY=DEFAULT;\n--> \nCREATE TABLE t1 (id INT, name VARCHAR(50), purchased DATE)\n PLACEMENT POLICY=\"xyz\"\n PARTITION BY RANGE( YEAR(purchased) ) (\n  PARTITION p0 VALUES LESS THAN (2000),\n  PARTITION p1 VALUES LESS THAN (2005)\n );\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Cases with LLMTest CLI Command\nDESCRIPTION: Command line instruction for verifying generated test cases by executing them against both TiDB and MySQL instances for result comparison.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/llmtest/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./llmtest verify --mysql_dsn \"root:123456@tcp(127.0.0.1:3306)/test\" --tidb_dsn \"root@tcp(127.0.0.1:4000)/test\" --prompt_generator expression\n```\n\n----------------------------------------\n\nTITLE: TTL Table Status System Table Definition\nDESCRIPTION: SQL definition for the system table that tracks TTL job status. This table stores metadata about TTL jobs including their execution history and current state.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tidb_ttl_table_status` (\n  `table_id` bigint(64) PRIMARY KEY,\n  `parent_table_id` bigint(64),\n  `table_statistics` TEXT DEFAULT NULL,\n  `last_job_id` varchar(64) DEFAULT NULL,\n  `last_job_start_time` timestamp NULL DEFAULT NULL,\n  `last_job_finish_time` timestamp NULL DEFAULT NULL,\n  `last_job_ttl_expire` timestamp NULL DEFAULT NULL,\n  `last_job_summary` text DEFAULT NULL,\n  `current_job_id` varchar(64) DEFAULT NULL,\n  `current_job_owner_id` varchar(64) DEFAULT NULL,\n  `current_job_owner_addr` varchar(256) DEFAULT NULL,\n  `current_job_owner_hb_time` timestamp,\n  `current_job_start_time` timestamp NULL DEFAULT NULL,\n  `current_job_ttl_expire` timestamp NULL DEFAULT NULL,\n  `current_job_state` text DEFAULT NULL,\n  `current_job_status` varchar(64) DEFAULT NULL,\n  `current_job_status_update_time` timestamp NULL DEFAULT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Show Placement Basic Syntax\nDESCRIPTION: Basic syntax for showing placement rules for databases, schemas, tables and partitions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW PLACEMENT FOR [{DATABASE | SCHEMA} schema_name] [TABLE table_name [PARTITION partition_name]];\n```\n\n----------------------------------------\n\nTITLE: Example SQL for Multi-Schema Change Processing\nDESCRIPTION: A SQL example that demonstrates the combination of adding a column and modifying an existing column in a single ALTER TABLE statement, which will be processed as a multi-schema change job.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t ADD COLUMN b INT, MODIFY COLUMN a CHAR(10);\n```\n\n----------------------------------------\n\nTITLE: Pause DDL Job Command - SQL\nDESCRIPTION: SQL command to pause a running DDL job using its job ID. Only jobs in Running or Queueing state can be paused.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-15-ddl-pause-resume.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nadmin pause ddl jobs $job_id\n```\n\n----------------------------------------\n\nTITLE: Database Creation with Placement Policy\nDESCRIPTION: Examples of creating databases and tables with placement policies, showing inheritance behavior.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE mydb [DEFAULT] PLACEMENT POLICY=`companystandardpolicy`;\nCREATE TABLE mydb.t1 (a INT);\nALTER DATABASE mydb [DEFAULT] PLACEMENT POLICY=`companynewpolicy`;\nCREATE TABLE mydb.t2 (a INT);\nCREATE TABLE mydb.t3 (a INT) PLACEMENT POLICY=`companystandardpolicy`;\n```\n\n----------------------------------------\n\nTITLE: Sample Plugin Manifest Configuration in TOML\nDESCRIPTION: This TOML configuration file example shows how to define a plugin's metadata, including name, kind, version, system variables, and callback functions. This manifest is used by the pluginpkg tool to generate the plugin code.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md#2025-04-18_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nname = \"conn_ip_example\"\nkind = \"Audit\"\ndescription = \"just a test\"\nversion = \"2\"\nlicense = \"\"\nsysVars = [\n    {name=\"conn_ip_example_test_variable\", scope=\"Global\", value=\"2\"},\n    {name=\"conn_ip_example_test_variable2\", scope=\"Session\", value=\"2\"},\n]\nvalidate = \"Validate\"\nonInit = \"OnInit\"\nonShutdown = \"OnShutdown\"\nexport = [\n    {extPoint=\"OnGeneralEvent\", impl=\"OnGeneralEvent\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Showing SQL Bindings Syntax in TiDB\nDESCRIPTION: Syntax for displaying existing SQL bindings at global or session level in TiDB, with optional filtering capabilities.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-11-sql-plan-management.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [GLOBAL|SESSION] BINDINGS [SHOW_LIKE_OR_WHERE]\n```\n\n----------------------------------------\n\nTITLE: Removing TTL from a Table\nDESCRIPTION: SQL command to remove TTL functionality from a table, similar to MySQL's syntax for removing partitioning. This will stop automatic deletion of rows.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t1 REMOVE TTL;\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Query for Range Scan Preference\nDESCRIPTION: Example showing a scenario where range scan should be preferred over full table scan, particularly with ORDER BY and LIMIT clauses.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-07-rule-based-index-selection.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t(a INT PRIMARY KEY, b INT, c INT, INDEX idx_b(b));\nSELECT * FROM t WHERE b = 2 ORDER BY a LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Implementing infoSchema Structure for Foreign Key Management in TiDB\nDESCRIPTION: This snippet shows how the infoSchema structure is extended to maintain a map of all ReferredFKInfo records. This map organizes the references by schema/table name and is used during schema loading and updates.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype infoSchema struct {\n    // referredForeignKeyMap records all table's ReferredFKInfo.\n    // referredSchemaAndTableName => child SchemaAndTableAndForeignKeyName => *model.ReferredFKInfo\n    referredForeignKeyMap map[SchemaAndTableName]map[SchemaAndTableAndForeignKeyName]*model.ReferredFKInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DP-SUB Join Reordering Algorithm in Go\nDESCRIPTION: Core implementation of the DP-SUB (Dynamic Programming with Subproblems) algorithm for join reordering. The algorithm uses bit manipulation to enumerate all possible join combinations and selects the lowest cost plan for each state.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-20-join-reorder-dp-v1.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc dp(int nodeCnt) {\n\tfor i := 0; i < nodeCnt; i++ {\n\t\tbestPlan[1 << i] = planByNodeID[i]\n\t\tbestCost[1 << i] = 0\n\t}\n\t// Iterate the sub from small to big.\n\t// This can make sure that node set S1 is visited earlier than S2 if S1 belongs to S2.\n\tfor state := 1; state < (1 << nodeCnt); state++ {\n\t\tif bits.OnesCount(i) == 1 || (nodeCnt not connected) {\n\t\t\tcontinue // It's a single node or not connected, skip it;\n\t\t}\n\t\t// This loop can enumerate all its subset.\n\t\tfor sub := (state - 1) & stateï¼› sub > 0; sub = (sub - 1) & state {\n\t\t\t// Inner join's left and right have no difference, so we only consider it once.\n\t\t\tif sub > remain {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// That the dp result is nil means the subset is not connected.\n\t\t\tif bestPlan[sub] == nil || bestPlan[state ^ sub] == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tjoin := buildJoin(bestPlan[sub], bestPlan[state^sub], edges between them)\n\t\t\tif bestCost[state] > join.Cost {\n\t\t\t\tbestPlan[state] = join\n\t\t\t\tbestCost[state] = join.Cost\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout with SQL Session Variables and Hints\nDESCRIPTION: Example of using session variables and query hints to configure timeout values for stale read operations. This demonstrates setting a staleness value and configuring a 500ms timeout using both session variables and statement-level hints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nset @@tidb_read_staleness=-5;\n# The unit is miliseconds. The session variable usage.\nset @@tidb_tikv_tidb_timeout=500;\nselect * from t where id = 1;\n# The unit is miliseconds. The query hint usage.\nselect /*+ set_var(tikv_client_read_timeout=500) */ * FROM t where id = 1;\n```\n\n----------------------------------------\n\nTITLE: Querying TiDB Cluster Topology Information\nDESCRIPTION: Example SQL queries demonstrating how to retrieve cluster topology information from the new CLUSTER_INFO system table in the information_schema database.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> use information_schema;\nDatabase changed\n\nmysql> desc CLUSTER_INFO;\n+----------------+---------------------+------+------+---------+-------+\n| Field          | Type                | Null | Key  | Default | Extra |\n+----------------+---------------------+------+------+---------+-------+\n| TYPE           | varchar(64)         | YES  |      | NULL    |       |\n| ADDRESS        | varchar(64)         | YES  |      | NULL    |       |\n| STATUS_ADDRESS | varchar(64)         | YES  |      | NULL    |       |\n| VERSION        | varchar(64)         | YES  |      | NULL    |       |\n| GIT_HASH       | varchar(64)         | YES  |      | NULL    |       |\n+----------------+---------------------+------+------+---------+-------+\n5 rows in set (0.00 sec)\n\nmysql> select TYPE, ADDRESS, STATUS_ADDRESS,VERSION from CLUSTER_INFO;\n+------+-----------------+-----------------+-----------------------------------------------+\n| TYPE | ADDRESS         | STATUS_ADDRESS  | VERSION                                       |\n+------+-----------------+-----------------+-----------------------------------------------+\n| tidb | 127.0.0.1:4000  | 127.0.0.1:10080 | 5.7.25-TiDB-v4.0.0-alpha-793-g79eef48a3-dirty |\n| pd   | 127.0.0.1:2379  | 127.0.0.1:2379  | 4.0.0-alpha                                   |\n| tikv | 127.0.0.1:20160 | 127.0.0.1:20180 | 4.0.0-alpha                                   |\n+------+-----------------+-----------------+-----------------------------------------------+\n3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Executing CTEExec for Common Table Expressions in Go\nDESCRIPTION: Pseudo-code implementation of the CTEExec.Next method that manages CTE execution. It handles filling the storage for recursive and non-recursive CTEs, and implements termination conditions for recursive CTEs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc (e *CTEExec) Next(req *Chunk) {\n    // 1. The first executed CTEExec will be responsible for filling storage.\n    e.storage.Lock()\n    defer e.storage.Unlock()\n    if !e.storage.Done() {\n        // 1.1 Compute seed part and store data into e.iterInTbl.\n        for {\n            // 1.2 Compute recursive part iteratively and break if reaches termination conditions.\n        }\n        e.storage.SetDone()\n    }\n    // 2. Return chunk in e.resTbl.\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Rollup Query with Grouping Function in TiDB SQL\nDESCRIPTION: This snippet shows a SQL query using GROUP BY with ROLLUP and the GROUPING function, demonstrating how the GROUPING function indicates the grouping dimensions for each output row in the result set.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [test]>  SELECT count(1),grouping(a),grouping(b) FROM t GROUP BY a, b With Rollup;\n+----------+-------------+-------------+\n| count(1) | grouping(a) | grouping(b) |\n+----------+-------------+-------------+\n|        1 |           0 |           0 |\n|        1 |           0 |           1 |\n|        1 |           1 |           1 |\n+----------+-------------+-------------+\n3 rows in set (0.027 sec)\n```\n\n----------------------------------------\n\nTITLE: Partitioned Table Placement Policy\nDESCRIPTION: Example of creating a partitioned table with different placement policies for different partitions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (id INT, name VARCHAR(50), purchased DATE)\n PLACEMENT POLICY='companystandardpolicy'\n PARTITION BY RANGE( YEAR(purchased) ) (\n  PARTITION p0 VALUES LESS THAN (2000) PLACEMENT POLICY='storeonhdd',\n  PARTITION p1 VALUES LESS THAN (2005),\n  PARTITION p2 VALUES LESS THAN (2010),\n  PARTITION p3 VALUES LESS THAN (2015),\n  PARTITION p4 VALUES LESS THAN MAXVALUE PLACEMENT POLICY='storeonfastssd'\n );\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Running TTL Job\nDESCRIPTION: Admin command to cancel a specific running TTL job. This allows administrators to stop a job if it's causing performance issues or other problems.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nADMIN CANCEL TTL JOB 123456789\n```\n\n----------------------------------------\n\nTITLE: Creating Secure User with Socket Authentication in TiDB\nDESCRIPTION: SQL statements for the proposed secure initialization option that creates a user based on the OS username (ubuntu in this example) and authenticates via socket authentication.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-29-secure-bootstrap.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'ubuntu'@'localhost' IDENTIFIED WITH 'auth_socket' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\nGRANT ALL PRIVILEGES ON *.* TO 'ubuntu'@'localhost' WITH GRANT OPTION;\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source Using JSON Configuration in SQL\nDESCRIPTION: SQL syntax for configuring a restore operation using a JSON string to encapsulate storage parameters. This approach uses a single CONFIG parameter containing a JSON object with nested configuration options.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nRESTORE DATABASE * FROM 's3://storage/url'\n    CONFIG = '{\"s3\":{\"access-key\":\"AAAAA\", \"secret-access-key\":\"SSSSS\", \"force-path-style\":true, \"endpoint\":\"http://10.0.1.55:8888\"}}'\n    RATE_LIMIT = 512 MB/SECOND;\n```\n\n----------------------------------------\n\nTITLE: Show Create Table with Placement Policies\nDESCRIPTION: Examples showing how placement policies are represented in SHOW CREATE TABLE output.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nuse test;\nCREATE TABLE t1 (a int);\nSHOW CREATE TABLE t1;\nCREATE TABLE t2 (a int) PLACEMENT POLICY='acdc';\nSHOW CREATE TABLE t2;\nALTER DATABASE test DEFAULT PLACEMENT POLICY=`acdc`;\nCREATE TABLE t3 (a int);\nSHOW CREATE TABLE t3;\n```\n\n----------------------------------------\n\nTITLE: Updating SCHEMA_INDEX_USAGE Table in SQL\nDESCRIPTION: SQL statement for inserting or updating index usage statistics with handling for duplicate keys by incrementing counts and updating timestamps.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-30-index-usage-information.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into mysql.SCHEMA_INDEX_USAGE values (schemaA, tableA, indexA, count, row, used_at) \non duplicate key update query_count=query_count+count, rows_selected=rows_selected+row, last_used_at=greatest(last_used_at, used_at)\n```\n\n----------------------------------------\n\nTITLE: Encoding Partitioned Table Index Key-Value Pairs in TiDB\nDESCRIPTION: Shows how index key-value pairs are currently encoded for partitioned tables in TiDB. The partition ID is used instead of the table ID in the key prefix.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nKey: tablePrefix{partitionID}_indexPrefixSep{indexID}_indexedColumnsValue\nValue: rowID\n```\n\n----------------------------------------\n\nTITLE: Implementing Swap and Re-evaluate Algorithm in Golang\nDESCRIPTION: Core algorithm that evaluates and optimizes the recommended index set by swapping indexes between recommended and remaining sets to find optimal combinations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-05-index-advisor.md#2025-04-18_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// GCIS stands for Global Candidate Index Set\nsort(GCIS, GCIS.Score, Descend_Order)\nrecommend_set = GCIS[:N]\nremaining_set = GCIS[N:]\nmin_cost = EvaluateWorkload(workload, recommend_set)\n\nfor {\n    v_recommend_set, v_remaining_set = SwapElements(recommend_set, remaining_set, swap_size)\n    variant_cost = EvaluateWorkload(workload, v_recommend_set)\n    if variant_cost < min_cost {\n        min_cost = variant_cost\n        recommend_set = v_recommend_set\n        remaining_set = v_remaining_set\n    }\n    ......\n    // loop until specific rounds or timeout, break\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Analysis Priority for Partitioned Tables in Go\nDESCRIPTION: Functions for calculating the average change percentage across table partitions to determine analysis priority. Handles both static and dynamic pruning modes, considering partition statistics and auto-analyze thresholds.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunction calculateAvgChangeForPartitions(partitionStats, defs, autoAnalyzeRatio):\n    totalChangePercent = 0\n    count = 0\n    partitionNames = []\n\n    for each def in defs:\n        tblStats = partitionStats[def.ID]\n        changePercent = calculateChangePercentage(tblStats, autoAnalyzeRatio)\n        if changePercent is 0:\n            continue\n\n        totalChangePercent += changePercent\n        append def.Name.O to partitionNames\n        count += 1\n\n    avgChange = totalChangePercent / count\n    return avgChange, partitionNames\n\nfunction calculateChangePercentage(tblStats, autoAnalyzeRatio):\n    if tblStats.Pseudo or tblStats.RealtimeCount < AutoAnalyzeMinCnt:\n        return 0\n\n    if not TableAnalyzed(tblStats):\n        return 1\n\n    tblCnt = tblStats.RealtimeCount\n    if histCnt = tblStats.GetAnalyzeRowCount() > 0:\n        tblCnt = histCnt\n\n    res = tblStats.ModifyCount / tblCnt\n    if res > autoAnalyzeRatio:\n        return res\n\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cyclical Foreign Key Dependencies in MySQL\nDESCRIPTION: Shows how attempting to create cyclical foreign key dependencies between tables results in an error. Includes example of creating tables t1 and t2 with circular references.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ninsert into t1 values (1,1);\nALTER TABLE t1 ADD foreign key fk(a) references t2(id) ON DELETE CASCADE;\n(1452, 'Cannot add or update a child row: a foreign key constraint fails (`test`.`#sql-298_8`, CONSTRAINT `t1_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t2` (`id`) ON DELETE CASCADE)')\n```\n\n----------------------------------------\n\nTITLE: Stopping a Log-based Backup Task in TiDB\nDESCRIPTION: Commands for stopping an active log-based backup task in TiDB, showing both successful stop operation with final backup timestamps and the error case when the task is already stopped.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ br stream stop task_name -u 10.0.0.1:2379\n\nStopping task <task_name>...\n\nStore 1: error, task completed or not found.\nStore 2: ok (next_backup_ts =987654321).\nStore 3: ok (next_backup_ts =989898989).\nStore 8: ok (next_backup_ts =987987987).\n\nStopped at --lastbackupts=987654321.\n\n$ br stream stop task_name -u 10.0.0.1:2379\n\nStopping task <task_name>...\n\nStore 1: error, task completed or not found.\nStore 2: error, task completed or not found.\nStore 3: error, task completed or not found.\nStore 8: error, task completed or not found.\n\nFailed to stop the task, maybe it is already stopped. Check the TiKV logs for details.\n```\n\n----------------------------------------\n\nTITLE: Working with Cyclical Foreign Keys Using foreign_key_checks\nDESCRIPTION: Demonstrates how to create cyclical foreign key dependencies by temporarily disabling foreign key checks. Shows cascade delete behavior across linked tables.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nset @@foreign_key_checks=0;\ncreate table t1 (id int key,a int, foreign key fk(a) references t2(id) ON DELETE CASCADE);\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ninsert into t1 values (1, 2);\ninsert into t2 values (2, 1);\nset @@foreign_key_checks=1;   -- add test case without this.\ndelete from t1 where id=1;\ntest> select * from t2;\n+----+---+\n| id | a |\n+----+---+\n0 rows in set\nTime: 0.004s\ntest> select * from t1;\n+----+---+\n| id | a |\n+----+---+\n0 rows in set\n```\n\n----------------------------------------\n\nTITLE: Altering Table Placement Policy\nDESCRIPTION: Shows how to alter placement policy for a partitioned table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t1 PLACEMENT POLICY=`companynewpolicy`;\n```\n\n----------------------------------------\n\nTITLE: SQL Operation for RenewLease Function\nDESCRIPTION: SQL update statement for the RenewLease operation that refreshes the lease timestamp for a table that has a read lock.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-30-small-table-caching.md#2025-04-18_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nupdate table_cache_meta set lease = %? where tid = %? and lock ='READ'\n```\n\n----------------------------------------\n\nTITLE: Internal Table Structure for Advisory Locks\nDESCRIPTION: Defines the mysql.advisory_locks table structure with lockName as PRIMARY KEY to manage advisory locks in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-24-get-lock.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql.advisory_locks (lockName PRIMARY KEY)\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Load Information in TiDB\nDESCRIPTION: Example SQL query demonstrating how to use the proposed cluster_load system table to retrieve load information for all nodes in a TiDB cluster. The query shows various load-related metrics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from cluster_load\n+------+-----------------+----------+-------------+--------+\n| TYPE | ADDRESS         | MODULE   | KEY         | VALUE  |\n+------+-----------------+----------+-------------+--------+\n| tikv | 127.0.0.1:20160 | network  | rsec/s      | 1000Kb |\n| ...                                                      |\n+------+-----------------+----------+-------------+--------+\n100 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policies for Multi-tenancy Resource Control in SQL\nDESCRIPTION: This SQL snippet shows how to create placement policies for different resource pools and apply them to databases to implement multi-tenancy and control shared resources in a large TiDB cluster.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY poola CONSTRAINTS=\"[+pool=poola]\";\nCREATE PLACEMENT POLICY poolb CONSTRAINTS=\"[+pool=poolb]\";\nCREATE PLACEMENT POLICY poolc CONSTRAINTS=\"[+pool=poolc]\";\n\nALTER DATABASE workload1 PLACEMENT POLICY=`poola`;\n/* for each existing table (new ones will not require this) */\nALTER TABLE workload1.t1 PLACEMENT POLICY=`poola`;\n\nCREATE DATABASE workload2 PLACEMENT POLICY=`poolb`;\nCREATE DATABASE workload3 PLACEMENT POLICY=`poolb`;\nCREATE DATABASE workload4 PLACEMENT POLICY=`poolb`;\nCREATE DATABASE workload5 PLACEMENT POLICY=`poolb`;\nCREATE DATABASE workload6 PLACEMENT POLICY=`poolc`;\n```\n\n----------------------------------------\n\nTITLE: Validating Table Analysis Eligibility in Go\nDESCRIPTION: Function to determine if a table is valid for analysis based on its previous failed analysis history and average analysis duration. Implements a backoff mechanism to avoid repeated failed analyses.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunction IsValidToAnalyze(j):\n    if j.Weight is 0:\n        return false\n\n    lastFailedAnalysisDuration, err1 = getLastFailedAnalysisDuration(j.DBName, j.TableName, \"\")\n    if err1 is not nil:\n        return false\n\n    averageAnalysisDuration, err2 = getAverageAnalysisDuration(j.DBName, j.TableName, \"\")\n    if err2 is not nil:\n        return false\n\n    // Failed analysis duration is less than 2 times the average analysis duration.\n    // Skip this table to avoid too many failed analysis.\n    if lastFailedAnalysisDuration < 2 * averageAnalysisDuration:\n        return false\n\n    return true\n```\n\n----------------------------------------\n\nTITLE: Defining TRANSACTION_SUMMARY Table Schema in Markdown\nDESCRIPTION: Markdown table defining the schema for the TRANSACTION_SUMMARY and CLUSTER_TRANSACTION_SUMMARY tables, which provide summary information about transactions in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type       | Comment |\n|------------|------------|--------|\n| `DIGEST` | `varchar(16)` | Digest of a transaction, calculated with `ALL_SQL_DIGEST` |\n| `ALL_SQL_DIGEST`  | `text` | A json array which contains all SQLs' digest executed in this kind of transaction |\n```\n\n----------------------------------------\n\nTITLE: Preparing TiDB Cluster Restore with BR\nDESCRIPTION: This command uses BR to prepare for restoring a TiDB cluster from an AWS EBS backup. It reads backup information from S3, retrieves snapshot IDs, and sets PD to recovery mode.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbr restore full  --type=aws-ebs --prepare --pd \"172.16.2.1:2379\" -s \"s3:///us-west-2/meta/&sk=xx...\" --output=topology.json\n```\n\n----------------------------------------\n\nTITLE: Creating Global Grants Table for Dynamic Privileges in TiDB\nDESCRIPTION: SQL definition for the global_grants table used to store dynamic privileges in TiDB. This table structure is similar to MySQL's implementation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `global_grants` (\n  `USER` char(32) NOT NULL DEFAULT '',\n  `HOST` char(255) NOT NULL DEFAULT '',\n  `PRIV` char(32) NOT NULL DEFAULT '',\n  `WITH_GRANT_OPTION` enum('N','Y') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`USER`,`HOST`,`PRIV`)\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Full Restore with AWS EBS in TiDB\nDESCRIPTION: This command initiates a full restore of a TiDB cluster using AWS EBS volumes. It specifies the PD address and S3 bucket containing the backup metadata for restoration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbr restore full --type=aws-ebs --pd \"172.16.2.1:2379\" -s \"s3:///us-west-2/meta/&sk=xx...\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global System Variable for Distributed Task Framework in SQL\nDESCRIPTION: SQL command to enable or disable the unified distributed parallel execution framework using a system variable.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-11-dist-task.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> set global tidb_enable_dist_task = ON|OFF;\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Usage Monitoring Loop in Go\nDESCRIPTION: Creates a goroutine that periodically checks memory usage and sets kill flags for high-memory SQLs when usage exceeds the defined limit.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-22-global-memory-control.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo func() {\n    for {\n        time.Sleep(100 * time.Millisecond)\n        memStats := runtime.MemStats{}\n        runtime.ReadMemStats(&memStats)\n        if memStats.HeapInuse > tidb_server_memory_limit {\n            topTracker := MemUsageTop1Tracker.Load()\n            if topTracker != nil {\n                topTracker.NeedKill.Store(true)\n            }\n        }\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Implementing Codec Interface for Keyspace Support in Go\nDESCRIPTION: Defines the Codec interface in Go for encoding and decoding requests with Keyspace support. This interface includes methods for handling API versions, keyspace IDs, and various encoding/decoding operations for keys and ranges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-07-keyspace.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Codec is responsible for encode/decode requests.\ntype Codec interface {\n\t// GetAPIVersion returns the api version of the codec.\n\tGetAPIVersion() kvrpcpb.APIVersion\n\t// GetKeyspace return the keyspace id of the codec in bytes.\n\tGetKeyspace() []byte\n\t// GetKeyspaceID return the keyspace id of the codec.\n\tGetKeyspaceID() KeyspaceID\n\t// EncodeRequest encodes with the given Codec.\n\t// NOTE: req is reused on retry. MUST encode on cloned request, other than overwrite the original.\n\tEncodeRequest(req *tikvrpc.Request) (*tikvrpc.Request, error)\n\t// DecodeResponse decode the resp with the given codec.\n\tDecodeResponse(req *tikvrpc.Request, resp *tikvrpc.Response) (*tikvrpc.Response, error)\n\t// EncodeRegionKey encode region's key.\n\tEncodeRegionKey(key []byte) []byte\n\t// DecodeRegionKey decode region's key\n\tDecodeRegionKey(encodedKey []byte) ([]byte, error)\n\t// DecodeBucketKeys decode region bucket's key\n\tDecodeBucketKeys(keys [][]byte) ([][]byte, error)\n\t// EncodeRegionRange encode region's start and end.\n\tEncodeRegionRange(start, end []byte) ([]byte, []byte)\n\t// DecodeRegionRange decode region's start and end.\n\tDecodeRegionRange(encodedStart, encodedEnd []byte) ([]byte, []byte, error)\n\t// EncodeRange encode a key range.\n\tEncodeRange(start, end []byte) ([]byte, []byte)\n\t// DecodeRange decode a key range.\n\tDecodeRange(encodedStart, encodedEnd []byte) ([]byte, []byte, error)\n\t// EncodeKey encode a key.\n\tEncodeKey(key []byte) []byte\n\t// DecodeKey decode a key.\n\tDecodeKey(encoded []byte) ([]byte, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Handle Row Key Format for Clustered Indexes\nDESCRIPTION: Specification of the binary format used for row keys with non-integer (common) handles in TiDB. Unlike integer handles, these keys have variable length depending on the primary key values.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```\nt | {table_id} | _r | {common_handle}     // component\n1 | 8          | 2  | len(common_handle)  // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Foreign Key Creation with Automatic Index Generation in SQL\nDESCRIPTION: This snippet shows an example of creating a table with a foreign key constraint, where TiDB automatically creates an index for the foreign key column when one doesn't already exist.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create table t (id int key, a int, foreign key fk(a) references t(id));\nQuery OK, 0 rows affected\nmysql> show create table t\\G\n***************************[ 1. row ]***************************\nTable        | t\nCreate Table | CREATE TABLE `t` (\n  `id` int NOT NULL,\n  `a` int DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `fk` (`a`),\n  CONSTRAINT `t_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set\n```\n\n----------------------------------------\n\nTITLE: Querying TiDB DDL Logs\nDESCRIPTION: SQL query to retrieve DDL-related logs from TiDB nodes using the cluster_log system table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cluster_log where type='tidb' and content like '%ddl%';\n```\n\n----------------------------------------\n\nTITLE: GET_LOCK Function Implementation\nDESCRIPTION: Implementation of GET_LOCK() function that uses pessimistic transactions to manage advisory locks with timeout support through innodb_lock_wait_timeout.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-24-get-lock.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGET_LOCK(lockName, timeout)\n```\n\n----------------------------------------\n\nTITLE: Resource Control Context Protocol Buffer Definition\nDESCRIPTION: Protobuf message definition for resource control context, specifically for overriding priority settings in runaway query management.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-16-runaway-queries-management.md#2025-04-18_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ResourceControlContext {\n    ...\n    // Override the priority of resource group for the request.\n    uint64 override_priority = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Plugin Status with SQL\nDESCRIPTION: Shows how to query and display all loaded plugins in TiDB using the SHOW PLUGINS SQL command. This displays information including plugin name, status, type, library path, license, and version.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show plugins;\n+-----------------+--------+-------+----------------------------------------------------+---------+---------+\n| Name            | Status | Type  | Library                                            | License | Version |\n+-----------------+--------+-------+----------------------------------------------------+---------+---------+\n| conn_limit-1    | Ready  | Audit | /data/deploy/tidb/plugin/conn_limit-1.so           |         | 1       |\n+-----------------+--------+-------+----------------------------------------------------+---------+---------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scan Task in Go for TiDB TTL\nDESCRIPTION: This function performs a scan task for a given table range, executing SELECT queries in a loop to retrieve expired rows. It sends delete tasks to a channel for further processing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc doScanTask(tbl, range, expire, ch) {\n    var lastRow\n    for {\n        selectSQL := buildSelect(tbl, range lastRow, expire, LIMIT)\n        rows := execute(selectSQL)\n        ch <- deleteTask{tbl, expire, rows}\n        if len(rows) < LIMIT {\n            break\n        }\n        lastRow := rows[len(rows)-1]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Multi-Distinct-Aggregate Query Execution Plan in TiDB\nDESCRIPTION: This SQL query and its execution plan demonstrate the current implementation of multi-distinct aggregates in TiDB, highlighting the need for optimization using Grouping Sets.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nMySQL [test]> explain select count(distinct a), count(distinct b) from t;\n```\n\n----------------------------------------\n\nTITLE: Querying Session States in MySQL\nDESCRIPTION: Shows how to query and set session states in MySQL using JSON format. This is used when migrating a session from one TiDB instance to another.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-20-session-manager.md#2025-04-18_snippet_0\n\nLANGUAGE: MySQL\nCODE:\n```\nSHOW SESSION_STATES\n```\n\nLANGUAGE: MySQL\nCODE:\n```\nSET SESSION_STATES '{...}'\n```\n\n----------------------------------------\n\nTITLE: Defining Column Mapping Rule Structure in Go\nDESCRIPTION: Defines a 'Rule' struct that represents a column mapping rule. It includes fields for schema and table patterns, source and target columns, expression type, arguments, and a create table query.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/util/column-mapping/README.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Rule struct {\n\tPatternSchema    string   `yaml:\"schema-pattern\" json:\"schema-pattern\" toml:\"schema-pattern\"`\n\tPatternTable     string   `yaml:\"table-pattern\" json:\"table-pattern\" toml:\"table-pattern\"`\n\tSourceColumn     string   `yaml:\"source-column\" json:\"source-column\" toml:\"source-column\"` // modify, add refer column, ignore\n\tTargetColumn     string   `yaml:\"target-column\" json:\"target-column\" toml:\"target-column\"` // add column, modify\n\tExpression       Expr     `yaml:\"expression\" json:\"expression\" toml:\"expression\"`\n\tArguments        []string `yaml:\"arguments\" json:\"arguments\" toml:\"arguments\"`\n\tCreateTableQuery string   `yaml:\"create-table-query\" json:\"create-table-query\" toml:\"create-table-query\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler Interfaces in Go\nDESCRIPTION: Go interface definitions for the Scheduler component, including both internal and user-implementable interfaces for task scheduling and execution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-11-dist-task.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// InternalScheduler defines the interface of an internal scheduler.\ntype InternalScheduler interface {\n\tStart()\n\tStop()\n\tRun(context.Context, *proto.Task) error\n\tRollback(context.Context, *proto.Task) error\n}\n\n// Scheduler defines the interface of a scheduler.\n// User should implement this interface to define their own scheduler.\ntype Scheduler interface {\n\tInitSubtaskExecEnv(context.Context) error\n\tSplitSubtask(subtask []byte) []proto.MinimalTask\n\tCleanupSubtaskExecEnv(context.Context) error\n\tRollback(context.Context) error\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Instance Scope to System Variables in Go\nDESCRIPTION: Code changes in the sysvar.go file to add INSTANCE scope as a new scope type alongside GLOBAL and SESSION. Includes a function to check if a system variable has INSTANCE scope.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n+++ b/sessionctx/variable/sysvar.go\n@@ -56,6 +56,8 @@ const (\n        ScopeGlobal ScopeFlag = 1 << 0\n        // ScopeSession means the system variable can only be changed in current session.\n        ScopeSession ScopeFlag = 1 << 1\n+       // ScopeInstance means it is similar to global but doesn't propagate to other TiDB servers.\n+       ScopeInstance ScopeFlag = 1 << 2\n\n        // TypeStr is the default\n        TypeStr TypeFlag = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Table Cache Metadata Schema in SQL\nDESCRIPTION: SQL definition for a metadata table that tracks the caching state of tables, including the table ID, lock type, lease information, and previous read lease data.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-30-small-table-caching.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE mysql.table_cache_meta (\n   tid int primary key,\n   lock_type enum('NONE','READ','INTEND','WRITE'),\n   lease uint64,\n   oldReadLease uint64,\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Query for Primary Key and Unique Index Selection\nDESCRIPTION: Example demonstrating index selection rules for primary key and unique indexes, showing how the system chooses between single scan and double scan scenarios.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-07-rule-based-index-selection.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t(a INT PRIMARY KEY, b INT, c INT, UNIQUE INDEX idx_b(b), UNIQUE INDEX idx_b_c(b, c));\nSELECT * FROM t WHERE a = 2 OR a = 5;\nSELECT b, c FROM t WHERE b = 5 AND c > 10;\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Constraint Check Order in MySQL\nDESCRIPTION: Illustrates that unique/primary key constraints are checked before foreign key constraints when inserting data. Shows how duplicate key errors take precedence.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ntest> create table t1 (id int key,a int, index(a));\ntest> create table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ntest> insert into t1 values (1, 1);\ntest> insert into t2 values (1, 1);\ntest> insert into t2 values (1, 2);\n(1062, \"Duplicate entry '1' for key 't2.PRIMARY'\")\ntest> insert ignore into t2 values (1, 2);\nQuery OK, 0 rows affected\n```\n\n----------------------------------------\n\nTITLE: Creating Analyze Options Table in MySQL for TiDB\nDESCRIPTION: SQL code to create the mysql.analyze_options table in TiDB. This table stores analyze options including sample size, rate, bucket count, and column choices for statistics collection.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS mysql.analyze_options (\n    table_id BIGINT(64) NOT NULL,\n    sample_num BIGINT(64) NOT NULL DEFAULT 0,\n    sample_rate DOUBLE NOT NULL DEFAULT -1,\n    buckets BIGINT(64) NOT NULL DEFAULT 0,\n    topn BIGINT(64) NOT NULL DEFAULT -1,\n    column_choice enum('DEFAULT','ALL','PREDICATE','LIST') NOT NULL DEFAULT 'DEFAULT',\n    column_ids TEXT(19372),\n    PRIMARY KEY (table_id) CLUSTERED\n);\n```\n\n----------------------------------------\n\nTITLE: Query Transformation by Optimizer for Shard Indexes in SQL\nDESCRIPTION: SQL showing how the optimizer automatically transforms original queries to use the shard index by adding the tidb_shard function to the WHERE clause.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE test SET id3 = val3 WHERE tidb_shard(id2) = 8 AND id2 = 100;\nSELECT * FROM test WHERE tidb_shard(id2) = 8 AND id2 = 100;\n```\n\n----------------------------------------\n\nTITLE: MySQL Multiple Schema Changes Example\nDESCRIPTION: Demonstrates how MySQL handles multiple schema changes in a single ALTER TABLE statement, including dropping columns, renaming columns, and managing indexes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t (b INT, a INT, INDEX i(b));\nALTER TABLE t DROP COLUMN b, RENAME COLUMN a TO b, ADD INDEX i(b), DROP INDEX i;\n```\n\n----------------------------------------\n\nTITLE: RELEASE_LOCK Function Implementation\nDESCRIPTION: Implementation of RELEASE_LOCK() function that rolls back the pessimistic transaction to release the advisory lock.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-24-get-lock.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nRELEASE_LOCK(lockName)\n```\n\n----------------------------------------\n\nTITLE: Modifying deadlockpb Protocol with Additional Fields for Lock Tracking\nDESCRIPTION: Changes to the deadlockpb protocol to include key information and resource group tags in WaitForEntry, and to add wait chain information to DeadlockResponse for better deadlock analysis.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  message WaitForEntry {\n    ...\n+   bytes key = ...;\n+   bytes resource_group_tag = ...;\n  }\n\n  message DeadlockResponse {\n    ...\n+   repeated WaitiForEntry wait_chain = ...;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Management in New Transaction Context in Go\nDESCRIPTION: Implementation of RunInNewTxn function that manages internal transaction execution with proper start timestamp tracking for GC purposes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-09-optimize-gc-for-internal-transaction.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc RunInNewTxn(ctx context.Context, store Storage, retryable bool, f func(ctx context.Context, txn Transaction) error) error {\n\tdefer func() {\n\t\twrapDeleteInterTxnTS(originalTxnTS)\n\t}()\n\tfor i := uint(0); i < maxRetryCnt; i++ {\n\t\ttxn, err = store.Begin()\n\t\tif i == 0 {\n\t\t\toriginalTxnTS = txn.StartTS()\n\t\t\twrapStoreInterTxnTS(originalTxnTS)\n\t\t}\n\t\terr = txn.Commit(ctx)\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SavepointRecord and TxnCtxNeedToRestore Structs in Go\nDESCRIPTION: Data structures that store transaction savepoint information, including the savepoint name, MemDB checkpoint, and transaction context data that needs to be restored during rollback operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-22-transaction-savepoint.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// SavepointRecord indicates a transaction's savepoint record.\ntype SavepointRecord struct {\n    // name is the name of the savepoint\n    Name string\n    // MemDBCheckpoint is the transaction's memdb checkpoint.\n    MemDBCheckpoint *tikv.MemDBCheckpoint\n    // TxnCtxSavepoint is the savepoint of TransactionContext\n    TxnCtxSavepoint TxnCtxNeedToRestore\n}\n\n// TxnCtxNeedToRestore stores transaction variables which need to be restored when rolling back to a savepoint.\ntype TxnCtxNeedToRestore struct {\n    // TableDeltaMap is used in the schema validator for DDL changes in one table not to block others.\n    // It's also used in the statistics updating.\n    // Note: for the partitioned table, it stores all the partition IDs.\n    TableDeltaMap map[int64]TableDelta\n    \n    // pessimisticLockCache is the cache for pessimistic locked keys,\n    // The value never changes during the transaction.\n    pessimisticLockCache map[string][]byte\n    \n    // CachedTables is not nil if the transaction write on cached table.\n    CachedTables map[int64]interface{}\n}\n\n// Transaction Savepoints will be stored in TransactionContext.\ntype TransactionContext struct {\n\t...\n    Savepoints []SavepointRecord\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Rollup Query with Grouping in TiDB SQL\nDESCRIPTION: This snippet demonstrates the execution plan for a SQL query using GROUP BY with ROLLUP and the GROUPING function in TiDB. It showcases the complex operator tree including TableReader, ExchangeSender, Projection, HashAgg, and TableFullScan operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [test]> explain SELECT a, b, grouping(a), sum(a) FROM t GROUP BY a, b With Rollup;\n+------------------------------------------+----------+--------------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| id                                       | estRows  | task         | access object | operator info                                                                                                                                                                                        |\n+------------------------------------------+----------+--------------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TableReader_43                           | 8000.00  | root         |               | MppVersion: 2, data:ExchangeSender_42                                                                                                                                                                |\n| â””â”€ExchangeSender_42                      | 8000.00  | mpp[tiflash] |               | ExchangeType: PassThrough                                                                                                                                                                            |\n|   â””â”€Projection_7                         | 8000.00  | mpp[tiflash] |               | Column#4, Column#5, grouping(gid)->Column#8, Column#7                                                                                                                                                |\n|     â””â”€Projection_37                      | 8000.00  | mpp[tiflash] |               | Column#7, Column#4, Column#5, gid                                                                                                                                                                    |\n|       â””â”€HashAgg_35                       | 8000.00  | mpp[tiflash] |               | group by:Column#26, Column#27, Column#28, funcs:sum(Column#22)->Column#7, funcs:firstrow(Column#23)->Column#4, funcs:firstrow(Column#24)->Column#5, funcs:firstrow(Column#25)->gid, stream_count: 10 |\n|         â””â”€Projection_44                  | 10000.00 | mpp[tiflash] |               | cast(test.t.a, decimal(10,0) BINARY)->Column#22, Column#4->Column#23, Column#5->Column#24, gid->Column#25, Column#4->Column#26, Column#5->Column#27, gid->Column#28, stream_count: 10                |\n|           â””â”€ExchangeReceiver_21          | 10000.00 | mpp[tiflash] |               | stream_count: 10                                                                                                                                                                                     |\n|             â””â”€ExchangeSender_20          | 10000.00 | mpp[tiflash] |               | ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#4, collate: binary], [name: Column#5, collate: binary], [name: gid, collate: binary], stream_count: 10                      |\n|               â””â”€Expand_19                | 10000.00 | mpp[tiflash] |               | level-projection:[test.t.a, <nil>->Column#4, <nil>->Column#5, 0->gid],[test.t.a, Column#4, <nil>->Column#5, 1->gid],[test.t.a, Column#4, Column#5, 3->gid]; schema: [test.t.a,Column#4,Column#5,gid] |\n|                 â””â”€Projection_15          | 10000.00 | mpp[tiflash] |               | test.t.a, test.t.a->Column#4, test.t.b->Column#5                                                                                                                                                     |\n|                   â””â”€TableFullScan_16     | 10000.00 | mpp[tiflash] | table:t       | keep order:false, stats:pseudo                                                                                                                                                                       |\n+------------------------------------------+----------+--------------+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Global Experimental Features in TiDB\nDESCRIPTION: Example of enabling specific experimental features globally using tidb_experimental_feature_switch. Demonstrates enabling alter_placement and cascades_planner features.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-29-hidden-sysvars.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL tidb_experimental_feature_switch = 'alter_placement=ON,cascades_planner=ON';\n```\n\n----------------------------------------\n\nTITLE: Updating SetGlobalSysVarOnly for Instance Variables in Go\nDESCRIPTION: Modification to the SetGlobalSysVarOnly function to handle INSTANCE scoped variables by skipping global variable table updates for them, as they're instance-specific.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n@@ -1148,6 +1156,9 @@ func (s *session) SetGlobalSysVarOnly(name, value string) (err error) {\n        if err = sv.SetGlobalFromHook(s.sessionVars, value, true); err != nil {\n                return err\n        }\n+       if !sv.HasInstanceScope() { // skip for INSTANCE scope\n+               return nil\n+       }\n        return s.replaceGlobalVariablesTableValue(context.TODO(), sv.Name, value)\n```\n\n----------------------------------------\n\nTITLE: Defining Distributed Token Bucket Protocol in ProtoBuf for TiDB Admission Control\nDESCRIPTION: ProtoBuf message definitions for the distributed token bucket system used in TiDB's admission control. This protocol enables communication between local TiDB nodes and the centralized token bucket server, handling resource group consumption tracking, token requests and grants.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-25-global-resource-control.md#2025-04-18_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TokenBucketRequest {\n  message RequestRU {\n    repeated RequestUnitItem request_r_u = 1;\n  }\n\n  string resource_group_name = 1;\n  RequestRU ru_items = 2;\n  // Aggregate statistics in group level.\n  Consumption consumption_since_last_request = 3;\n  uint64 target_request_period_ms = 2;\n  uint64 client_unique_id = 3;\n}\nmessage TokenBucketResponse {\n  string resource_group_name = 1;\n  repeated GrantedRUTokenBucket granted_r_u_tokens = 2;\n}\nmessage GrantedRUTokenBucket {\n  RequestUnitType type = 1;\n  TokenBucket granted_tokens = 2;\n  int64 trickle_time_ms = 3;\n}\nenum RequestUnitType {\n  RU = 0;\n}\nmessage TokenBucket {\n  TokenLimitSettings settings = 1;\n  // Once used to reconfigure, the tokens is delta tokens.\n  double tokens = 2;\n}\nmessage TokenLimitSettings {\n  uint64 fill_rate = 1;\n  int64 burst_limit = 2;\n  double max_tokens = 3;\n}\nmessage Error {\n    string message = 1;\n}\nmessage Consumption {\n  double r_r_u = 1;\n  double w_r_u = 2;\n  double read_bytes = 3;\n  double write_bytes = 4;\n  double total_cpu_time_ms = 5;\n  double sql_layer_cpu_time_ms = 6;\n  double kv_read_rpc_count = 7;\n  double kv_write_rpc_count = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Session Handler Type Definition in TiDB Extension Framework\nDESCRIPTION: Type declaration for the SessionHandler in the extension framework, showing the available event handling functions that can be customized. This defines handlers for connection and statement events.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// SessionHandler is used to listen session events\ntype SessionHandler struct {\n\tOnConnectionEvent func(ConnEventTp, *ConnEventInfo)\n\tOnStmtEvent       func(StmtEventTp, StmtEventInfo)\n}\n```\n\n----------------------------------------\n\nTITLE: PD API Endpoint Calls for Snapshot Recovery\nDESCRIPTION: Collection of curl commands for interacting with PD API endpoints to manage snapshot recovery, including enabling recovery markers and setting cluster parameters.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"172.16.5.31:3279/pd/api/v1/admin/snapshot-recovering\" -XPOST\n\ncurl \"172.16.5.31:3279/pd/api/v1/min-resolved-ts\"\n\ncurl \"172.16.5.31:3279/pd/api/v1/admin/base-alloc-id\" -XPOST -d \"10000\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Proactive GC in Go\nDESCRIPTION: Implements logic to proactively trigger Golang's garbage collection when memory usage reaches a certain threshold, using the SetMemoryLimit feature.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-22-global-memory-control.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndebug.SetMemoryLimit(int64(tidb_server_memory_limit * tidb_server_memory_limit_gc_trigger))\n// After each GC\nif causedByMemoryLimit {\n    debug.SetMemoryLimit(math.MaxInt64)\n    time.AfterFunc(time.Minute, func() {\n        debug.SetMemoryLimit(int64(tidb_server_memory_limit * tidb_server_memory_limit_gc_trigger))\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Predicate Columns System Table\nDESCRIPTION: SQL table definition for mysql.column_stats_usage which stores information about predicate columns, including table ID, column ID, and timestamps for last usage and analysis.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS mysql.column_stats_usage (\n        table_id BIGINT(64) NOT NULL,\n        column_id BIGINT(64) NOT NULL,\n        last_used_at TIMESTAMP,\n        last_analyzed_at TIMESTAMP,\n        PRIMARY KEY (table_id, column_id) CLUSTERED\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DDL Event Notifier in Go\nDESCRIPTION: Core implementation of DDLNotifier that handles DDL event subscriptions and processing. The notifier fetches events from mysql.ddl_notifier table, processes them through registered handlers, and manages event lifecycle including cleanup of processed events.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// schemaChangeEvent is the Golang representation of a record\n// in mysql.ddl_notifier table.\ntype schemaChangeEvent struct {\n    ddlJobID            int64\n    multiSchemaChangeID int\n    schemaChange        SchemaChange\n    processedByFlag     uint64\n}\n\ntype DDLNotifier struct {\n    sctx         sessionctx.Context\n    handlers     map[int]SchemaChangeHandler\n    pollInterval time.Duration\n}\n\nfunc NewDDLNotifier(sctx sessionctx.Context, pollInterval time.Duration) *DDLNotifier {\n    return &DDLNotifier{\n        sctx:         sctx,\n        handlers:     make(map[int]SchemaChangeHandler),\n        pollInterval: pollInterval,\n    }\n}\n\nfunc (n *DDLNotifier) Start(ctx context.Context) error {\n    ticker := time.NewTicker(n.pollInterval)\n    defer ticker.Stop()\n    for {\n        select {\n        case <-ctx.Done():\n            return ctx.Err()\n        case <-ticker.C:\n            if err := n.processEvents(ctx); err != nil {\n                log.Printf(\"Error processing events: %v\", err)\n            }\n        }\n    }\n}\n\nfunc (n *DDLNotifier) processEvents(ctx context.Context) error {\n    events, err := n.fetchEvents()\n    if err != nil {\n        return err\n    }\n\n    for _, event := range events {\n        for handlerID, handler := range n.handlers {\n            if err := n.processEventForHandler(ctx, event, handlerID, handler); err != nil {\n                if err != ErrNotReadyRetryLater {\n                    log.Printf(\"Error processing event %d for handler %d: %v\", event.JobID, handlerID, err)\n                }\n                continue\n            }\n        }\n        if n.allHandlersProcessed(event) {\n            if err := n.deleteProcessedEvent(event.JobID); err != nil {\n                log.Printf(\"Error deleting processed event %d: %v\", event.JobID, err)\n            }\n        }\n    }\n\n    return nil\n}\n\nfunc (n *DDLNotifier) processEventForHandler(ctx context.Context, event DDLEvent, handlerID int, handler SchemaChangeHandler) (err error) {\n    if n.hasProcessed(event, handlerID) {\n        return nil\n    }\n\n    if _, _, err = ExecRows(n.sctx, \"BEGIN PESSIMISTIC\"); err != nil {\n        return err\n    }\n    defer func() {\n        err = finishTransaction(n.sctx, err)\n    }()\n\n    // TODO: Should we attach a timeout to this ctx?\n    if err := handler(ctx, n.sctx, event.Event); err != nil {\n        return err\n    }\n    if err := n.markProcessed(n.sctx, event.JobID, handlerID); err != nil {\n        return err\n    }\n\n    event.ProcessedBy |= 1 << uint(handlerID)\n\n    return nil\n}\nfunc (n *DDLNotifier) fetchEvents() ([]DDLEvent, error) {\n    // ...\n    return nil, nil\n}\n\nfunc (n *DDLNotifier) hasProcessed(event DDLEvent, handlerID int) bool {\n    return (event.ProcessedBy & (1 << handlerID)) != 0\n}\n\nfunc (n *DDLNotifier) markProcessed(sctx sessionctx.Context, eventID int, handlerID int) error {\n    _, err := ExecRows(sctx, \"UPDATE mysql.ddl_notifier SET processed_by = processed_by | (1 << ?) WHERE id = ?\", handlerID, eventID)\n    return err\n}\n\nfunc (n *DDLNotifier) allHandlersProcessed(event DDLEvent) bool {\n    return event.ProcessedBy == (1<<len(n.handlers))-1\n}\n\nfunc (n *DDLNotifier) deleteProcessedEvent(sctx sessionctx.Context, eventID int) error {\n    _, err := ExecRows(sctx, \"DELETE FROM mysql.ddl_notifier WHERE job_id = ?\", eventID)\n    return err\n}\n\nfunc (n *DDLNotifier) RegisterHandler(id int, handler SchemaChangeHandler) {\n    n.handlers[id] = handler\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Privilege Commands for TiDB Restricted Read Only\nDESCRIPTION: SQL commands that showcase how privilege management works with TIDB_RESTRICTED_READ_ONLY. This includes RESTRICTED_VARIABLES_ADMIN and RESTRICTED_REPLICA_WRITER_ADMIN privileges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-06-23-restricted-read-only.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntidb_restricted_read_only\n```\n\n----------------------------------------\n\nTITLE: Displaying DDL Jobs for Table ID Retrieval in TiDB\nDESCRIPTION: Example output of the 'admin show ddl jobs' command that displays table ID and other metadata for dropped tables. This information is used to identify the table_id parameter needed for the restore command.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-10-restore-dropped-table.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+\n| JOBS                                                                                                                                                                                                                          | STATE     |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+\n| ID:44, Type:drop table, State:synced, SchemaState:none, SchemaID:1, TableID:39, RowCount:0, ArgLen:0, start time: 2018-08-11 11:23:53.308 +0800 CST, Err:<nil>, ErrCount:0, SnapshotVersion:0                                 | synced    |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Creating a TTL Table with Comment Format\nDESCRIPTION: Alternative syntax for creating a TTL table using MySQL-compatible comment format. This approach maintains compatibility with MySQL clients.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (\n    id int PRIMARY KEY,\n    created_at TIMESTAMP\n) /*T![ttl] TTL = `created_at` + INTERVAL 3 MONTH TTL_ENABLE = 'OFF'*/;\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Configuration in TiDB\nDESCRIPTION: Example SQL queries demonstrating how to use the proposed cluster_config system table to retrieve configuration information across all nodes in a TiDB cluster. The queries show filtering log-related configurations and TiKV-specific RaftDB WAL settings.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> use information_schema;\nDatabase changed\n\nmysql> select * from cluster_config where `key` like 'log%';\n+------+-----------------+-----------------------------+---------------+\n| TYPE | ADDRESS         | KEY                         | VALUE         |\n+------+-----------------+-----------------------------+---------------+\n| pd   | 127.0.0.1:2379  | log-file                    |               |\n| pd   | 127.0.0.1:2379  | log-level                   |               |\n| pd   | 127.0.0.1:2379  | log.development             | false         |\n| pd   | 127.0.0.1:2379  | log.disable-caller          | false         |\n| pd   | 127.0.0.1:2379  | log.disable-error-verbose   | true          |\n| pd   | 127.0.0.1:2379  | log.disable-stacktrace      | false         |\n| pd   | 127.0.0.1:2379  | log.disable-timestamp       | false         |\n| pd   | 127.0.0.1:2379  | log.file.filename           |               |\n| pd   | 127.0.0.1:2379  | log.file.log-rotate         | true          |\n| pd   | 127.0.0.1:2379  | log.file.max-backups        | 0             |\n| pd   | 127.0.0.1:2379  | log.file.max-days           | 0             |\n| pd   | 127.0.0.1:2379  | log.file.max-size           | 0             |\n| pd   | 127.0.0.1:2379  | log.format                  | text          |\n| pd   | 127.0.0.1:2379  | log.level                   |               |\n| pd   | 127.0.0.1:2379  | log.sampling                | <nil>         |\n| tidb | 127.0.0.1:4000  | log.disable-error-stack     | <nil>         |\n| tidb | 127.0.0.1:4000  | log.disable-timestamp       | <nil>         |\n| tidb | 127.0.0.1:4000  | log.enable-error-stack      | <nil>         |\n| tidb | 127.0.0.1:4000  | log.enable-timestamp        | <nil>         |\n| tidb | 127.0.0.1:4000  | log.expensive-threshold     | 10000         |\n| tidb | 127.0.0.1:4000  | log.file.filename           |               |\n| tidb | 127.0.0.1:4000  | log.file.max-backups        | 0             |\n| tidb | 127.0.0.1:4000  | log.file.max-days           | 0             |\n| tidb | 127.0.0.1:4000  | log.file.max-size           | 300           |\n| tidb | 127.0.0.1:4000  | log.format                  | text          |\n| tidb | 127.0.0.1:4000  | log.level                   | info          |\n| tidb | 127.0.0.1:4000  | log.query-log-max-len       | 4096          |\n| tidb | 127.0.0.1:4000  | log.record-plan-in-slow-log | 1             |\n| tidb | 127.0.0.1:4000  | log.slow-query-file         | tidb-slow.log |\n| tidb | 127.0.0.1:4000  | log.slow-threshold          | 300           |\n| tikv | 127.0.0.1:20160 | log-file                    |               |\n| tikv | 127.0.0.1:20160 | log-level                   | info          |\n| tikv | 127.0.0.1:20160 | log-rotation-timespan       | 1d            |\n+------+-----------------+-----------------------------+---------------+\n33 rows in set (0.00 sec)\n\nmysql> select * from cluster_config where type='tikv' and `key` like 'raftdb.wal%';\n+------+-----------------+---------------------------+--------+\n| TYPE | ADDRESS         | KEY                       | VALUE  |\n+------+-----------------+---------------------------+--------+\n| tikv | 127.0.0.1:20160 | raftdb.wal-bytes-per-sync | 512KiB |\n| tikv | 127.0.0.1:20160 | raftdb.wal-dir            |        |\n| tikv | 127.0.0.1:20160 | raftdb.wal-recovery-mode  | 2      |\n| tikv | 127.0.0.1:20160 | raftdb.wal-size-limit     | 0KiB   |\n| tikv | 127.0.0.1:20160 | raftdb.wal-ttl-seconds    | 0      |\n+------+-----------------+---------------------------+--------+\n5 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring TiKV Volume Information for Backup in TiDB\nDESCRIPTION: This JSON configuration specifies the TiKV store and volume information for a TiDB cluster backup. It includes details such as store IDs, volume IDs, types, and mount paths for each TiKV replica.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"tikv\" : {\n   \"replicas\": 3,\n   \"stores\": [\n   {\n     \"store_id\" : 1,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6244\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6245\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\"\n       }\n     ]\n   },\n   {\n     \"store_id\" : 2,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6246\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6247\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n       }\n     ]\n   },\n    {\n     \"store_id\" : 3,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6248\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6249\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n       }\n     ]\n   }\n ], \n },\n \"pd\" : {\n   \"replicas\" : 3\n },\n \"tidb\": {\n   \"replicas\" : 3\n }, \n \"kubernetes\" : {\n   \"pvs\" : [],\n   \"pvcs\" : [],\n   \"crd_tidb_cluster\" : {},\n   \"options\" : {}\n }\n \"options\" : {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DDL Reorg Metadata Structure in Go\nDESCRIPTION: Golang struct definition for DDL reorganization metadata that includes a flag to determine if distributed reorg should be used.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DDLReorgMeta struct {\n    ...                    // Some of the original fields\n    \n    IsDistReorg   bool     // Determine whether do dist-reorg\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TIDB_TRX Table Schema in Markdown\nDESCRIPTION: Markdown table defining the schema for the TIDB_TRX and CLUSTER_TIDB_TRX tables, which provide information about active transactions in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type       | Comment |\n|------------|------------|--------|\n| `TRX_ID`    | `unsigned bigint`   | The transaction ID (aka. start ts) |\n| `TRX_STARTED`|`time`| Human readable start time of the transaction |\n| `CURRENT_SQL_DIGEST`|`varchar(64)`| The digest of the current executing SQL statement |\n| `ALL_SQL_DIGESTS` | `text` | A list of all executed SQL statements' digests |\n| `STATE`| `enum('Running', 'Lock waiting', 'Committing', 'RollingBack')`| The state of the transaction |\n| `WAITING_START_TIME` | `time` | The elapsed time since the start of the current lock waiting (if any) |\n| `SCOPE` | `enum('Global', 'Local')` | The scope of the transaction |\n| `ISOLATION_LEVEL` | `enum('REPEATABLE-READ', 'READ-COMMITTED')` | |\n| `AUTOCOMMIT` | `bool` |  |\n| `SESSION_ID` | `unsigned bigint` | | \n| `USER` | `varchar` | |\n| `DB` | `varchar` | |\n| `SET_COUNT` | `int` | Modified keys of the current transaction |\n| `LOCKED_COUNT` | `int` | Locked keys of the current transaction |\n| `MEM_BUFFER_KEYS` | `int` | Entries in transaction's membuffer |\n| `MEM_BUFFER_BYTES` | `int` | Size occupied by the transaction's membuffer |\n```\n\n----------------------------------------\n\nTITLE: Example Execution Plan for DNF Query\nDESCRIPTION: Example execution plan showing how the proposed multi-index access handles disjunctive normal form (DNF) queries by performing union operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPhysicalIndexMergeLookUpReader(IndexMergeUnion)\n\tIndexScan(t1a)\n\tIndexScan(t1b)\n\tTableScan\n```\n\n----------------------------------------\n\nTITLE: Analysis Job Interface Definition in Go\nDESCRIPTION: Defines the core data structures and interfaces for analysis jobs including indicators and job management operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Indicators struct {\n        ChangePercentage float64\n        TableSize float64\n        LastAnalysisDuration time.Duration\n}\n\ntype AnalysisJob interface {\n        SetWeight(weight float64)\n        GetWeight() float64\n        HasNewlyAddedIndex() bool\n        GetIndicators() Indicators\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Time Range for Incremental Backup in TiDB\nDESCRIPTION: Code snippet showing the time range format used for incremental backups in TiDB. The range is defined from backup_ts to current_ts, exclusive of backup_ts and inclusive of current_ts.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/docs/cn/2019-08-05-new-design-of-backup-restore.md#2025-04-18_snippet_0\n\nLANGUAGE: code\nCODE:\n```\n(backup_ts, current_ts]\n```\n\n----------------------------------------\n\nTITLE: GetIndexMergeUnionPaths Function in Go\nDESCRIPTION: Golang function that generates all possible index merge union paths for disjunctive (OR) conditions, helping the optimizer find the best execution plan.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nGetIndexMergeUnionPaths(IndexInfos, PushdownConditions){\n\tvar results = nil\n\tforeach cond in PushdownConditions {\n\t\tif !isOrCondition(cond) {\n\t\t\tcontinue\n\t\t}\n\t\targs = flatten(cond,'or')\n\t\tforeach arg in args {\n\t\t\tvar indexAccessPaths, imPaths\n                       // Common index paths will be merged later in `CreateIndexMergeUnionPath`\n\t\t\tif isAndCondition(arg) {\n\t\t\t\tandArgs = flatten(arg,'and')\n\t\t\t\tindexAccessPaths = buildAccessPath(andArgs, IndexInfos)\n\t\t\t} else {\n\t\t\t\ttempArgs = []{arg}\n\t\t\t\tindexAccessPaths = buildAccessPath(tempArgs, IndexInfos)\n\t\t\t}\n\t\t\tif indexAccessPaths == nil {\n\t\t\t\timPaths = nil\n\t\t\t\tbreak\n\t\t\t}\n\t\t\timPartialPath = GetIndexMergePartialPath(IndexInfos, indexAccessPaths)\n\t\t\timPaths = append(imPaths, imPartialPath)\n\t\t}\n\t\tif imPaths != nil {\n\t\t\tpossiblePath = CreateIndexMergeUnionPath(imPaths,PushdownConditions,con,IndexInfos)\n\t\t\tresults = append(results, possiblePath)\n\t\t}\n\t}\n\treturn results\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StoreBatchTask Protocol Buffer Message for TiKV Batch Coprocessor\nDESCRIPTION: Protocol buffer definition for StoreBatchTask which contains information about a batch task including region ID, epoch, peer, ranges, and task ID. This structure enables sending multiple region tasks to a single store in one request.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage StoreBatchTask {\n    uint64 region_id = 1;\n    metapb.RegionEpoch region_epoch = 2;\n    metapb.Peer peer = 3;\n    repeated KeyRange ranges = 4;\n    uint64 task_id = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GetGlobalSysVar to Handle Instance Variables in Go\nDESCRIPTION: Changes to the session.go file to handle INSTANCE scoped variables differently from GLOBAL scoped ones when retrieving values, ensuring they don't use the global variable persistence system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n+++ b/session/session.go\n@@ -1103,6 +1103,10 @@ func (s *session) GetGlobalSysVar(name string) (string, error) {\n                return \"\", variable.ErrUnknownSystemVar.GenWithStackByArgs(name)\n        }\n\n+       if sv.HasInstanceScope() { // has INSTANCE scope only, not pure global\n+               return \"\", errors.New(\"variable has only instance scope and no GetGlobal func. Not sure how to handle yet.\")\n+       }\n+\n        sysVar, err := domain.GetDomain(s).GetGlobalVar(name)\n        if err != nil {\n                // The sysvar exists, but there is no cache entry yet.\n```\n\n----------------------------------------\n\nTITLE: Comparing Oracle vs TiDB View Hint Syntax in SQL\nDESCRIPTION: Direct comparison between Oracle's approach for view hints and the proposed TiDB implementation. Shows how TiDB's approach relies on explicit query block naming with the qb_name hint.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-22-view-hint.md#2025-04-18_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE VIEW v AS\nSELECT * from e1 join (select count(*) from e3) e2 on e1.a = e2.a;\n\n\n/* In Oracle */\nA1. SELECT /*+ INDEX(v.e2.e3 idx) */  * FROM v;\n\nA2. SELECT /*+ INDEX(@SEL$1 v.e2.e3 idx) */ * FROM v;\n\nB. SELECT /*+ INDEX(@SEL$2 e2.e3 idx) */ * FROM v;\n\nC. SELECT /*+ INDEX(@SEL$3 e3 idx) */ * FROM v;\n\n/* In TiDB */\nSELECT /*+ qb_name(viewSub, v@sel_1 . @sel_2) use_index(e3@viewSub, idx) hash_agg(viewSub) */ * FROM v;\n```\n\n----------------------------------------\n\nTITLE: Complex Example of View Hint Implementation in SQL\nDESCRIPTION: Comprehensive example showing how query block naming would work for complex nested views. The example demonstrates how different parts of nested views can be uniquely identified and targeted with hints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-22-view-hint.md#2025-04-18_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ncreate table t(a int, b int);\ncreate table t1(a int, b int);\ncreate table t2(a int, b int);\n\ncreate view v as select {@SEL_1}{5} t.a, t.b from t join (select {@SEL_2}{6} t1.a from t1 join t2 on t1.b=t2.b) tt on t.a = tt.a;\n\ncreate view v1 as select {@SEL_1}{3} t.a, t.b from t join (select {@SEL_2}{4} from t1 join v on t1.b=v.b) tt on t.a = tt.a;\n\ncreate view v2 as select {@SEL_1}{1} t.a, t.b from t join (select {@SEL_2}{2} t1.a from t1 join v1 join v3 on t1.b=v1.b) tt on t.a = tt.a;\n\nselect {@SEL_1} * from v2;\n\n/* We can use the following part to represent the {1} - {6} */\n1: qb_name(v2_sel1, v2@sel_1 . @sel_1)\n2: qb_name(v2_sel2, v2@sel_1 . @sel_2)\n3: qb_name(v1_sel1, v2@sel_1 . v1@sel_2 . @sel_1)\n4: qb_name(v1_sel2, v2@sel_1 . v1@sel_2 . @sel_2)\n5: qb_name(v_sel1, v2@sel_1 . v1@sel_2 . v@sel_2 . @sel_1)\n6: qb_name(v_sel2, v2@sel_1 . v1@sel_2 . v@sel_2 . @sel_2)\n```\n\n----------------------------------------\n\nTITLE: Implementing WithSession Method for Automatic Session Management in Go\nDESCRIPTION: Implementation of the WithSession method that manages the session lifecycle automatically. It retrieves a session from the pool, executes the provided function with the session, and ensures the session is either returned to the pool or closed based on execution success.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Pool) WithSession(fn func(*Session) error) error {\n    se, err := p.get()\n    if err != nil {\n        return err\n    }\n\n    success := false\n    defer func() {\n        if success {\n            p.put(se)\n        } else {\n            se.Close()\n        }\n    }()\n\n    if err = fn(se); err != nil {\n        return err\n    }\n    success = true\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Non-Native Instance Variable to Native in Go\nDESCRIPTION: Example of converting a non-native INSTANCE variable (TiDBGeneralLog) to use the new native INSTANCE scope, changing GetSession to GetGlobal to reflect the proper semantics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n+       {Scope: ScopeInstance, Name: TiDBGeneralLog, Value: BoolToOnOff(DefTiDBGeneralLog), Type: TypeBool, skipInit: true, SetGlobal: func(s *SessionVars, val string) error {\n                ProcessGeneralLog.Store(TiDBOptOn(val))\n                return nil\n-       }, GetSession: func(s *SessionVars) (string, error) {\n+       }, GetGlobal: func(s *SessionVars) (string, error) {\n                return BoolToOnOff(ProcessGeneralLog.Load()), nil\n        }},\n```\n\n----------------------------------------\n\nTITLE: Implementing Collator Interface for New Character Set Collations in TiDB\nDESCRIPTION: Definition of the Collator interface that needs to be implemented for supporting GBK character set collations in TiDB. This interface provides methods for string comparison, key generation, and pattern matching according to collation rules.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-08-18-charsets.md#2025-04-18_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Collator provides functionality for comparing strings for a given\n// collation order.\ntype Collator interface {\n\t// Compare returns an integer comparing the two strings. The result will be 0 if a == b, -1 if a < b, and +1 if a > b.\n\tCompare(a, b string) int\n\t// Key returns the collate key for str. If the collation is padding, make sure the PadLen >= len(rune[]str) in opt.\n\tKey(str string) []byte\n\t// Pattern get a collation-aware WildcardPattern.\n\tPattern() WildcardPattern\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backfill Metadata Structure in Go\nDESCRIPTION: Golang struct definition for backfill metadata containing keys, reorganization type and job metadata information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BackfillMeta struct {\n    CurrKey         kv.Key\n    StartKey        kv.Key\n    EndKey          kv.Key\n    EndInclude      bool    \n    ReorgTp         ReorgType\n    ...\n    \n    *JobMeta // parent job meta\n}\n```\n\n----------------------------------------\n\nTITLE: TiDB Log Redaction Example Output\nDESCRIPTION: Example log output demonstrating the effect of the log redaction feature. The comparison shows logs before and after enabling the 'tidb_redact_log' setting, where sensitive values and SQL parameters are replaced with question marks in the redacted version.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/errno/logredaction.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[2020/10/20 11:45:37.796 +08:00] [INFO] [conn.go:800] [\"command dispatched failed\"] [conn=5] [connInfo=\"id:5, addr:127.0.0.1:57222 status:10, collation:utf8_general_ci, user:root\"] [command=Query] [status=\"inTxn:0, autocommit:1\"] [sql=\"insert into t values (1),(1)\"] [txn_mode=OPTIMISTIC] [err=\"[kv:1062]Duplicate entry '1' for key 'a'\"]\n\n[2020/10/20 11:45:49.539 +08:00] [INFO] [conn.go:800] [\"command dispatched failed\"] [conn=5] [connInfo=\"id:5, addr:127.0.0.1:57222 status:10, collation:utf8_general_ci, user:root\"] [command=Query] [status=\"inTxn:0, autocommit:1\"] [sql=\"insert into t values ( ? ) , ( ? )\"] [txn_mode=OPTIMISTIC] [err=\"[kv:1062]Duplicate entry '?' for key '?'\"]\n```\n\n----------------------------------------\n\nTITLE: Mixed Stale Read Operations with Different Timestamps in TiDB\nDESCRIPTION: Shows how different stale read methods can be combined with varying timestamp specifications.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET @@tidb_read_staleness='-5';\n// query data with max tolerant 5 seconds ago\nselect * from t where id = 1;\n// query data with exact 10 seconds ago timestamp for this statement\nselect * from t as of timestamp now(10) where id = 1;\n// query data with exact 10 seconds ago timestamp for next statement\nset transaction read only as of timestamp now(10);\nselect * from t where id = 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Expressions with Implementation Rules in Go\nDESCRIPTION: Function to enumerate all applicable implementation rules for a group expression, calculating self-cost for each physical implementation generated.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc implGroupExpr(cur *GroupExpr, reqPhysProp *PhysicalProperty) (impls []PhysicalPlan) {\n\tfor _, rule := range GetImplementationRules(cur.exprNode) {\n\t\tif !rule.match(cur, reqPhysProp) {\n\t\t\tcontinue\n\t\t}\n\t\timpl := rule.onImplement(cur)\n\t\timpl.calcSelfCost(cur.children)\n\t\timpls = append(impls, impl)\n\t}\n\treturn impls\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Filtering in Go using TiDB's filter package\nDESCRIPTION: This snippet demonstrates how to use the TiDB table filter package to parse and apply filtering rules to a list of database tables. It includes setting up command-line flags, parsing filter rules, and applying them to sample table names.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/util/table-filter/README.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/pingcap/tidb/util/table-filter\"\n    \"github.com/spf13/pflag\"\n)\n\nfunc main() {\n    args := pflag.StringArrayP(\"filter\", \"f\", []string{\"*.*\"}, \"table filter\")\n    pflag.Parse()\n\n    f, err := filter.Parse(*args)\n    if err != nil {\n            panic(err)\n    }\n    f = filter.CaseInsensitive(f)\n\n    tables := []filter.Table{\n        {Schema: \"employees\", Name: \"employees\"},\n        {Schema: \"employees\", Name: \"departments\"},\n        {Schema: \"employees\", Name: \"dept_manager\"},\n        {Schema: \"employees\", Name: \"dept_emp\"},\n        {Schema: \"employees\", Name: \"titles\"},\n        {Schema: \"employees\", Name: \"salaries\"},\n        {Schema: \"AdventureWorks.Person\", Name: \"Person\"},\n        {Schema: \"AdventureWorks.Person\", Name: \"Password\"},\n        {Schema: \"AdventureWorks.Sales\", Name: \"SalesOrderDetail\"},\n        {Schema: \"AdventureWorks.Sales\", Name: \"SalesOrderHeader\"},\n        {Schema: \"AdventureWorks.Production\", Name: \"WorkOrder\"},\n        {Schema: \"AdventureWorks.Production\", Name: \"WorkOrderRouting\"},\n        {Schema: \"AdventureWorks.Production\", Name: \"ProductPhoto\"},\n        {Schema: \"AdventureWorks.Production\", Name: \"TransactionHistory\"},\n        {Schema: \"AdventureWorks.Production\", Name: \"TransactionHistoryArchive\"},\n    }\n\n    for _, table := range tables {\n        fmt.Printf(\"%5v: %v\\n\", f.MatchTable(table.Schema, table.Name), table)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Stats Usage Background Worker\nDESCRIPTION: Go code that implements a background worker to periodically flush predicate column statistics from memory to the system table in TiKV.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (do *Domain) updateStatsWorker() {\n    dumpColStatsUsageTicker := time.NewTicker(100 * lease)\n    for {\n        select {\n            case <-dumpColStatsUsageTicker.C:\n                statsHandle.DumpColStatsUsageToKV()\n        }\n    }\n}\n\nfunc (s *statsUsageImpl) DumpColStatsUsageToKV() error {\n    colMap := getAllPredicateColumns\n    for col, time := range colMap {\n        StoreToSystemTable(col, time)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying SetGlobalSysVar to Skip Persistence for Instance Variables in Go\nDESCRIPTION: Updates to the SetGlobalSysVar function to skip persistence operations for INSTANCE scoped variables, as they only apply to the current server instance.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n@@ -1121,6 +1125,7 @@ func (s *session) GetGlobalSysVar(name string) (string, error) {\n}\n\n// SetGlobalSysVar implements GlobalVarAccessor.SetGlobalSysVar interface.\n+// it is used for setting instance scope as well.\nfunc (s *session) SetGlobalSysVar(name, value string) (err error) {\n        sv := variable.GetSysVar(name)\n        if sv == nil {\n@@ -1132,6 +1137,9 @@ func (s *session) SetGlobalSysVar(name, value string) (err error) {\n        if err = sv.SetGlobalFromHook(s.sessionVars, value, false); err != nil {\n                return err\n        }\n+       if sv.HasInstanceScope() { // skip for INSTANCE scope\n+               return nil\n+       }\n```\n\n----------------------------------------\n\nTITLE: Defining StateRemote Interface for Cache Management in Go\nDESCRIPTION: Interface definition for managing the remote state of a cached table, including operations for loading data, locking for read/write operations, lease renewal, and unlocking after writes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-30-small-table-caching.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype StateRemote interface {\n    Load()\n    LockForRead()\n    LockForWrite()\n    RenewLease()\n    WriteAndUnlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Current qb_name Hint Usage in SQL\nDESCRIPTION: Demonstrates the current usage of qb_name hint in TiDB where a query block is named and then referenced in other hints like stream_agg and merge_join.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-22-view-hint.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect /*+ stream_agg(@qb) merge_join(t1@qb)*/ * from (select /*+ qb_name(qb) */ count(*) from t1 join t2 on t1.a = t2.a) tt;\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Index Information in SQL\nDESCRIPTION: SQL command to display vector index information from the information_schema database.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM information_schema.tiflash_indexes\n```\n\n----------------------------------------\n\nTITLE: Implementing Restore for DropDatabaseStmt in Go\nDESCRIPTION: Example implementation of the Restore method for the DropDatabaseStmt AST node. It generates SQL text for a DROP DATABASE statement, handling the IF EXISTS option if present.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-11-29-ast-to-sql-text.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Restore implements Node interface.\nfunc (n *DropDatabaseStmt) Restore(ctx *RestoreCtx) error {\n\tctx.WriteKeyWord(\"DROP DATABASE \")\n\tif n.IfExists {\n\t\tctx.WriteKeyWord(\"IF EXISTS \")\n\t}\n\tctx.WriteName(n.Name)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Load Data with Foreign Key Checks in SQL\nDESCRIPTION: Demonstrates loading data into a table with foreign key constraints, showing warnings instead of errors for violations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\n\ntest> load data local infile 'data.csv' into table t2 FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n';\nQuery OK, 0 rows affected\ntest> show warnings;\n+---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                                                                                                           |\n+---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Warning | 1452 | Cannot add or update a child row: a foreign key constraint fails (`test`.`t2`, CONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t1` (`id`) ON DELETE CASCADE) |\n| Warning | 1452 | Cannot add or update a child row: a foreign key constraint fails (`test`.`t2`, CONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t1` (`id`) ON DELETE CASCADE) |\n+---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing ROLLBACK TO SAVEPOINT Operation in Go\nDESCRIPTION: Pseudocode demonstrating how to roll back a transaction to a specified savepoint. It restores both the transaction context and MemDB state, then removes any savepoints created after the target savepoint.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-22-transaction-savepoint.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc RollbackToSavepoint(savepointName string){\n\tfor idx, sp := range TxnCtx.Savepoints {\n\t\tif savepointName == sp.Name {\n            TxnCtx.RollbackToSavepoint(sp.TxnCtxSavepoint)\n            txn.RollbackMemDBToCheckpoint(sp.MemDBCheckpoint)\n\t\t\t// Delete the later savepoint.\n\t\t\tTxnCtx.Savepoints = sessVars.TxnCtx.Savepoints[:idx+1]\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errSavepointNotExists\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Session Structure with Ownership Control in Go\nDESCRIPTION: Defines the internal session structure that includes mutex protection for concurrent access control and an owner field to track session ownership. This ensures that only the current owner can use the session.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// session is private and can only be accessed by the `Pool` and `Session`.\ntype session struct {\n    mu sync.Mutex\n    owner any\n    sctx sessionctx.Context\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Timer Runtime in Go\nDESCRIPTION: Shows how to create and configure a timer runtime for scheduling timers, including hook registration and condition setting.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/pingcap/tidb/timer/api\"\n\nfunc main() {\n    ctx := ... // some go context\n    store := ... // Create a timer store.\n    rt := runtime.NewTimerRuntimeBuilder(\"myGroup\", store).\n        RegisterHookFactory(\"your.hook.class.name\", MyTimerHookFactory).\n        SetCond(&api.TimerCond{\n            Key: api.NewOptionalVal(\"/\"), KeyPrefix: true,\n        }).\n        Build()\n\t\n    rt.Start()\n    defer rt.Stop()\n\n    <-ctx.Done()\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Partitioned Table in SQL\nDESCRIPTION: SQL example of inserting data into the partitioned table, demonstrating how records are distributed across partitions and how this can break index uniqueness.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t (A, B) VALUES (1, 23);\nINSERT INTO t (A, B) VALUES (11, 23);\n```\n\n----------------------------------------\n\nTITLE: Backfiller Interface Definition in Go\nDESCRIPTION: Interface definitions for the backfiller component including methods for task management and metrics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// backfiller existing interfaces:\nfunc BackfillDataInTxn(handleRange reorgBackfillTask) (taskCtx backfillTaskContext, errInTxn error)\nfunc AddMetricInfo(float64)\n\n// backfiller new interfaces:\n// get batch tasks\nfunc GetTasks() ([]*BackfillJob, error){}\n// update task\nfunc UpdateTask(bfJob *BackfillJob) error{}\nfunc FinishTask(bfJob *BackfillJob) error{}\n// get the backfill context\nfunc GetCtx() *backfillCtx{}\nfunc String() string{}\n```\n\n----------------------------------------\n\nTITLE: SQL Operations for LockForWrite Function\nDESCRIPTION: SQL update statements for the LockForWrite operation that first sets an intent lock and then a write lock after waiting for any read lease to expire.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-30-small-table-caching.md#2025-04-18_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nupdate table_cache_meta set lock ='INTEND' and oldLease = %? and lease = %?' where tid = %?\nsleep() // wait read lease gone\nupdate table_cache_meta set lock ='WRITE' and lease = %?' where tid = %?\n```\n\n----------------------------------------\n\nTITLE: Loading Metrics Schema Mappings from External File\nDESCRIPTION: Example of loading PromQL expressions from an external file to create system tables in the metrics_schema database, showing both the SQL command and the file content format.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nmysql> admin metrics_schema load external_metrics.txt\n#external_metrics.txt\nexecution_duration = `histogram_quantile(0.95, sum(rate(tidb_session_execute_duration_seconds_bucket[$INTERVAL] offset $OFFSET_TIME)) by (le, sql_type))`\npd_client_cmd_ops = `sum(rate(pd_client_cmd_handle_cmds_duration_seconds_count{type!=\"tso\"}[$INTERVAL] offset $OFFSET_TIME)) by (type)`\n```\n\n----------------------------------------\n\nTITLE: Updating the Golden Test File for Auto-Analyze Priority Calculator\nDESCRIPTION: Command to run the test with the update flag, which regenerates the golden file containing expected test output. This is used when intentionally changing the priority calculator's behavior.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/statistics/handle/autoanalyze/priorityqueue/calculatoranalysis/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v ./pkg/statistics/handle/autoanalyze/priorityqueue/calculatoranalysis -update\n```\n\n----------------------------------------\n\nTITLE: Extending Coprocessor Request Protocol Buffer Message with Batch Tasks\nDESCRIPTION: Modification to the existing Coprocessor Request protocol buffer message to include batched tasks. This enables sending batched tasks belonging to different regions but the same store in a single request.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Request {\n    â€¦\n\n    // Store the batched tasks belonging to other regions.\n    repeated StoreBatchTask tasks = 11;\n}\n```\n\n----------------------------------------\n\nTITLE: TiDB MPP Execution Plan with Multi Distinct Aggregation\nDESCRIPTION: Execution plan showing three-stage hash aggregation for processing Multi Distinct Aggregation (MDA) in TiDB's MPP mode. The plan demonstrates data flow through ExchangeReceiver, HashAgg, and Expand operators.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n+--------------------------------------------+---------+--------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|       â””â”€ExchangeReceiver_33                | 1.00    | mpp[tiflash] |               |                                                                                                                                                                                      |\n|         â””â”€ExchangeSender_32                | 1.00    | mpp[tiflash] |               | ExchangeType: PassThrough, Compression: FAST                                                                                                                                         |\n|           â””â”€HashAgg_28                     | 1.00    | mpp[tiflash] |               | funcs:count(distinct test.t.a)->Column#10, funcs:count(distinct test.t.b)->Column#11, stream_count: 10                                                                               |\n|             â””â”€ExchangeReceiver_31          | 2.00    | mpp[tiflash] |               | stream_count: 10                                                                                                                                                                     |\n|               â””â”€ExchangeSender_30          | 2.00    | mpp[tiflash] |               | ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary], [name: test.t.b, collate: binary], [name: Column#9, collate: binary], stream_count: 10 |\n|                 â””â”€HashAgg_24               | 2.00    | mpp[tiflash] |               | group by:gid(Column#9), test.t.a, test.t.b,                                                                                                                                               |\n|                   â””â”€Expand_27              | 2.00    | mpp[tiflash] |               | level-projection:[test.t.a, <nil>->test.t.b],[<nil>->test.t.a, test.t.b]; schema: [test.t.a,test.t.b,gid]                                                                                                                    |\n|                     â””â”€TableFullScan_12     | 1.00    | mpp[tiflash] | table:t       | keep order:false, stats:pseudo                                                                                                                                                       |\n+--------------------------------------------+---------+--------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Read Lock in Go\nDESCRIPTION: Implements read lock functionality that allows multiple concurrent readers but prevents write access. Uses random suffixes to avoid conflicts between readers.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TryLockRemoteRead(ctx context.Context, storage ExternalStorage, path string) error\n\treadID := rand.Int63()\n\ttarget := fmt.Sprintf(\"%s.READ.%016x\", path, readID)\n\twriteLock := fmt.Sprintf(\"%s.WRIT\", target)\n\twriter := ExclusiveWrite{\n\t\tTarget: target,\n\t\tContent: func(txnID uuid.UUID) []byte {\n\t\t\treturn []byte(\"Guess what we will find today =D\")\n\t\t},\n\t\tVerify: func(ctx VerifyWriteContext) error {\n\t\t\t// Make sure that the write lock doesn't exist.\n\t\t\treturn ctx.assertNoOtherOfPrefixExpect(writeLock, \"\")\n\t\t},\n\t}\n\n\t_, err = writer.CommitTo(ctx, storage)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Searching TiDB Cluster Logs by TSO\nDESCRIPTION: Demonstrates querying the cluster_log table to retrieve logs related to a specific TSO (Timestamp Oracle) value across the cluster, showing coprocessor processing details from multiple nodes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from cluster_log where content like '%412134239937495042%';\nn| TYPE | ADDRESS                | LEVEL ||\n+------+------------------------+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:501.60574ms txnStartTS:412134239937495042 region_id:180 store_addr:10.9.82.29:20160 kv_process_ms:416 scan_total_write:340807 scan_processed_write:340806 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                             |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:698.095216ms txnStartTS:412134239937495042 region_id:88 store_addr:10.9.1.128:20160 kv_process_ms:583 scan_total_write:491123 scan_processed_write:491122 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                             |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.529574387s txnStartTS:412134239937495042 region_id:112 store_addr:10.9.1.128:20160 kv_process_ms:945 scan_total_write:831931 scan_processed_write:831930 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                            |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.55722114s txnStartTS:412134239937495042 region_id:100 store_addr:10.9.82.29:20160 kv_process_ms:1000 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                            |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.608597018s txnStartTS:412134239937495042 region_id:96 store_addr:10.9.137.171:20160 kv_process_ms:1048 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                          |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.614233631s txnStartTS:412134239937495042 region_id:92 store_addr:10.9.137.171:20160 kv_process_ms:1000 scan_total_write:831931 scan_processed_write:831930 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                          |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.67587146s txnStartTS:412134239937495042 region_id:116 store_addr:10.9.137.171:20160 kv_process_ms:950 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                           |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.693188495s txnStartTS:412134239937495042 region_id:108 store_addr:10.9.1.128:20160 kv_process_ms:949 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                            |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.693383633s txnStartTS:412134239937495042 region_id:120 store_addr:10.9.1.128:20160 kv_process_ms:951 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                            |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.731990066s txnStartTS:412134239937495042 region_id:128 store_addr:10.9.82.29:20160 kv_process_ms:1035 scan_total_write:831931 scan_processed_write:831930 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                           |\n| tidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.744524732s txnStartTS:412134239937495042 region_id:104 store_addr:10.9.137.171:20160 kv_process_ms:1030 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]                                                                                                                                                                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Batch System Poll Loop in Rust\nDESCRIPTION: Core polling loop implementation for the store batch system with async IO enabled. Handles message processing, FSM (Finite State Machine) management, and write operations through async IO pool. Includes priority-based scheduling for high-priority messages and raft operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-25-global-resource-control.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn poll() {\n    loop {\n        let fsms = fetch_fsms();\n        let readies = vec![];\n        for fsm in fsms {\n            for msg in fsm.mail_box.recv() {\n                handle_message(msg);\n            }  \n        let write = fsm.collect_ready();\n        async_io_pool_sender.send(write); \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Oracle's Three View Hint Approaches in SQL\nDESCRIPTION: Example showing Oracle's three different approaches for using global hints with views. The {SEL$n} tags are included for explanation to indicate query block numbers.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-22-view-hint.md#2025-04-18_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE VIEW v AS\nSELECT {SEL$2} * from e1 join (select {SEL$3} * from e3) e2 on e1.a = e2.a;\n\nSELECT {SEL$1} * FROM v;\n\nA. SELECT /*+ INDEX(v.e2.e3 idx) */  * FROM v; // /*+ INDEX(@SEL$1 v.e2.e3 idx) */\n\nB. SELECT /*+ INDEX(@SEL$2 e2.e3 idx) */ * FROM v;\n\nC. SELECT /*+ INDEX(@SEL$3 e3 idx) */ * FROM v;\n```\n\n----------------------------------------\n\nTITLE: Renaming Column with Foreign Keys in SQL\nDESCRIPTION: Demonstrates renaming a column that has foreign keys or references, updating related child/parent table info.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\nrename table t1 to t11;\nalter table t11 change column id id1 int;\nshow create table t2\\G\n***************************[ 1. row ]***************************\n    Table        | t2\nCreate Table | CREATE TABLE `t2` (\n                                     `id` int NOT NULL,\n                                     `a` int DEFAULT NULL,\n                                     PRIMARY KEY (`id`),\n    KEY `fk` (`a`),\n    CONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t11` (`id1`) ON DELETE CASCADE\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Auto ID Allocation gRPC Protocol Definition\nDESCRIPTION: Protocol buffer definitions for the Auto ID allocation service, including request/response messages and service interface. Defines the communication protocol between TiDB components for ID allocation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-10-13-mysql-compatible-auto-increment.md#2025-04-18_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AutoIDRequest {\n    int64 dbID = 1;\n    int64 tblID = 2;\n    uint64 n = 3;\n    int64 increment = 4;\n    int64 offset = 5;\n}\n\nmessage AutoIDResponse {\n    int64 min = 1;\n    int64 max = 2;\n}\n\nservice AutoIDAlloc {\n    rpc AllocAutoID(AutoIDRequest) returns (AutoIDResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading TiDB Plugins with Admin Command\nDESCRIPTION: Demonstrates how to reload a plugin in TiDB using the ADMIN PLUGINS RELOAD command. This allows for hot-patching plugin bugs without server restart.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nmysql> admin plugins reload conn_limit-2;\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Logger in TiDB\nDESCRIPTION: Code showing gRPC logger initialization in TiDB main.go that creates a native logger handler for gRPC usage.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-21-unify-log-library.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Reference to code at: tidb-server/main.go#L591\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Prefix for DNF Conditions in Go\nDESCRIPTION: Function that adds tidb_shard prefix expressions to DNF (OR) conditions. Transforms conditions like 'WHERE a = 1 OR a = 10' to include tidb_shard calculations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (adder *exprPrefixAdder) addExprPrefix4DNFCond(condition *expression.ScalarFunction) ([]expression.Expression, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Global Temporary Table in TiDB SQL\nDESCRIPTION: SQL syntax for creating a global temporary table with optional engine specification and mandatory ON COMMIT DELETE ROWS clause. The table schema is visible to all sessions but data changes are only available within the current transaction.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-20-temporary-table.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE GLOBAL TEMPORARY TABLE tbl_name (create_definition) \n[ENGINE=engine_name]\nON COMMIT DELETE ROWS;\n\nDROP TABLE tbl_name;\n```\n\n----------------------------------------\n\nTITLE: Injecting Metrics Schema Mappings via HTTP API\nDESCRIPTION: Example of using curl to inject a PromQL expression into the metrics_schema system via the HTTP API, mapping a PromQL query to a system table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST http://host:port/metrics_schema?name=distsql_duration&expr=`histogram_quantile(0.999,\nsum(rate(tidb_distsql_handle_query_duration_seconds_bucket[$INTERVAL] offset $OFFSET_TIME)) by (le, type))`\n```\n\n----------------------------------------\n\nTITLE: Defining DEADLOCKS Table Schema in Markdown\nDESCRIPTION: Markdown table defining the schema for the DEADLOCKS and CLUSTER_DEADLOCKS tables, which provide information about deadlock events in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type       | Comment |\n|------------|------------|--------|\n| `DEADLOCK_ID` | `int` | There needs multiple rows to represent information of a single deadlock event. This field is used to distinguish different events. |\n| `OCCUR_TIME`  | `time` | The physical time when the deadlock occurs |\n| `RETRYABLE` | `bool` | Is the deadlock retryable. TiDB tries to determine if the current statement is (indirectly) waiting for a lock locked by the current statement. |\n| `TRY_LOCK_TRX_ID` | `unsigned bigint` | The transaction ID (start ts) of the transaction that's trying to acquire the lock |\n| `CURRENT_SQL_DIGEST` | `text` | The SQL that's being blocked |\n| `KEY` | `varchar` | The key that's being locked, but locked by another transaction in the deadlock event |\n| `ALL_SQL_DIGESTS` | `text` | A list of the digest of SQL statements that the transaction has executed |\n| `TRX_HOLDING_LOCK` | `unsigned bigint` | The transaction that's currently holding the lock. There will be another record in the table with the same `DEADLOCK_ID` for that transaction. |\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of TableItemID and StatsUsage Structs\nDESCRIPTION: Go structures for tracking predicate column usage in memory. TableItemID identifies a table column or index, and StatsUsage maps these IDs to timestamps of their last usage.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype TableItemID struct {\n        TableID          int64\n        ID               int64\n        IsIndex          bool\n        IsSyncLoadFailed bool\n}\n\n// StatsUsage maps (tableID, columnID) to the last time when the column stats are used(needed).\n// All methods of it are thread-safe.\ntype StatsUsage struct {\n        usage map[model.TableItemID]time.Time\n        lock  sync.RWMutex\n}\n```\n\n----------------------------------------\n\nTITLE: ANN Query Protocol Buffer Definition in Go\nDESCRIPTION: Definition of ANNQueryInfo struct for TiDB to interact with TiFlash for vector similarity searches. This structure contains fields for query type, distance metric, parameters, and the added indexId field.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ANNQueryInfo struct {\n        QueryType        ANNQueryType         `protobuf:\"varint,1,opt,name=query_type,json=queryType,enum=tipb.ANNQueryType\" json:\"query_type\"`\n        DistanceMetric   VectorDistanceMetric `protobuf:\"varint,2,opt,name=distance_metric,json=distanceMetric,enum=tipb.VectorDistanceMetric\" json:\"distance_metric\"`\n        TopK             uint32               `protobuf:\"varint,3,opt,name=top_k,json=topK\" json:\"top_k\"`\n        ColumnName       string               `protobuf:\"bytes,4,opt,name=column_name,json=columnName\" json:\"column_name\"`\n        ColumnId         int64                `protobuf:\"varint,5,opt,name=column_id,json=columnId\" json:\"column_id\"`\n        RefVecF32        []byte               `protobuf:\"bytes,6,opt,name=ref_vec_f32,json=refVecF32\" json:\"ref_vec_f32,omitempty\"`\n        MaxDistance      float64              `protobuf:\"fixed64,10,opt,name=max_distance,json=maxDistance\" json:\"max_distance\"`\n        HnswEfSearch     uint32               `protobuf:\"varint,20,opt,name=hnsw_ef_search,json=hnswEfSearch\" json:\"hnsw_ef_search\"`\n\n        // new fields\n        IndexId          int64                `protobuf:\"varint,5,opt,name=column_id,json=columnId\" json:\"column_id\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Coprocessor Response Protocol Buffer Message with Batch Responses\nDESCRIPTION: Modification to the existing Coprocessor Response protocol buffer message to include batch task responses. This allows TiKV to return results for multiple batched tasks in a single response.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Response {\n   â€¦\n   repeated StoreBatchTaskResponse batch_responses = 13;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckPendingAdminOp RPC Interface in Go\nDESCRIPTION: Protocol buffer definition for checking pending admin operations during snapshot backup. Includes request/response messages and RPC declaration for verifying region status.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n    message CheckAdminRequest {\n    }\n\n    message CheckAdminResponse {\n        Error error = 1;\n        metapb.Region region = 2;\n        bool has_pending_admin = 3;\n    }\n\n    // CheckPendingAdminOp used for snapshot backup. before we start snapshot for a TiKV. \n    // we need stop all schedule first and make sure all in-flight schedule has finished.  \n    // this rpc check all pending conf change for leader.\n    rpc CheckPendingAdminOp(CheckAdminRequest) returns (stream CheckAdminResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Showing Grants Including Dynamic Privileges in MySQL\nDESCRIPTION: Displays the result of SHOW GRANTS command in MySQL, including both static and dynamic privileges granted to a user.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nmysql [localhost:8023] {root} (test) > show grants for u1;\nn| Grants for u|\nn| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON *.* TO `u1`@`%`                                                                                                                                                                                                       |\n| GRANT APPLICATION_PASSWORD_ADMIN,AUDIT_ADMIN,BINLOG_ADMIN,BINLOG_ENCRYPTION_ADMIN,CLONE_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN,FLUSH_OPTIMIZER_COSTS,FLUSH_STATUS,FLUSH_TABLES,FLUSH_USER_RESOURCES,GROUP_REPLICATION_ADMIN,INNODB_REDO_LOG_ARCHIVE,INNODB_REDO_LOG_ENABLE,PERSIST_RO_VARIABLES_ADMIN,REPLICATION_APPLIER,REPLICATION_SLAVE_ADMIN,RESOURCE_GROUP_ADMIN,RESOURCE_GROUP_USER,ROLE_ADMIN,SERVICE_CONNECTION_ADMIN,SESSION_VARIABLES_ADMIN,SET_USER_ID,SHOW_ROUTINE,SYSTEM_USER,SYSTEM_VARIABLES_ADMIN,TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN ON *.* TO `u1`@`%` |\n| GRANT BACKUP_ADMIN ON *.* TO `u1`@`%`|\nn3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Privilege in TiDB Plugin\nDESCRIPTION: Go code snippet demonstrating how a plugin can register a new dynamic privilege in TiDB using the proposed API.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/pingcap/tidb/privilege/privileges\"\n)\n\nerr = privileges.RegisterDynamicPrivilege(\"AUDIT_ADMIN\")\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Vector Index Progress in SQL\nDESCRIPTION: SQL command to show the progress of DDL operations for vector indexes, compatible with existing DDL display.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nadmin show ddl\n```\n\n----------------------------------------\n\nTITLE: Disabling Late Materialization and Explaining Query in TiDB SQL\nDESCRIPTION: This SQL snippet demonstrates how to disable late materialization in TiDB and then explains a SELECT query execution plan. It showcases the operator tree and estimated rows for each step.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-06-support-late-materialization.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET @@tidb_enable_late_materialization=OFF;\nEXPLAIN SELECT RegionID, CounterID, TraficSourceID, SearchEngineID, AdvEngineID FROM hits WHERE URL LIKE \"%google%\"  AND FUNC(SearchPhrase) > 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables for Memory Control in Go\nDESCRIPTION: Defines new global variables for tracking and controlling memory usage in TiDB. Includes an atomic pointer for the highest memory usage tracker and flags for kill signals.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-22-global-memory-control.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nMemUsageTop1Tracker atomic.Pointer[Tracker]\ntype Tracker struct {\n    NeedKill atomic.Bool\n    SessionID int64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Write Lock in Go\nDESCRIPTION: Implements write lock functionality using put-and-verify transactions. Includes verification to ensure no other locks exist before acquiring the write lock.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TryLockRemoteWrite(ctx context.Context, storage ExternalStorage, path string) error {\n\ttarget := fmt.Sprintf(\"%s.WRIT\", path)\n\twriter := ExclusiveWrite{\n\t\tTarget: target,\n\t\tContent: func(txnID uuid.UUID) []byte {\n\t\t\treturn []byte(\"I'm going to write something down :<\")\n\t\t},\n\t\tVerify: func(ctx VerifyWriteContext) error {\n\t\t\treturn ctx.assertNoOtherOfPrefixExpect(path, ctx.IntentFileName())\n\t\t},\n\t}\n\n\t_, err = writer.CommitTo(ctx, storage)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index DDL Example - SQL\nDESCRIPTION: Example SQL command for creating an index on a user table, which represents a long-running DDL operation that could be paused.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-15-ddl-pause-resume.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_usr on t_user(name);\n```\n\n----------------------------------------\n\nTITLE: Defining RegionMeta Protocol Interface in Go\nDESCRIPTION: Protocol buffer definitions for region metadata reporting and recovery operations. Includes structures for region information and recovery requests.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n    message RegionMeta {\n        uint64 region_id = 1;\n        uint64 peer_id = 2;\n        uint64 last_log_term = 3;\n        uint64 last_index = 4;\n        uint64 commit_index = 5;\n        uint64 version = 6;\n        bool tombstone = 7; //reserved, it may be used in late phase for peer check\n        bytes start_key = 8;\n        bytes end_key = 9;\n    }\n\n    // command to store for recover region\n    message RecoverRegionRequest {\n        uint64 region_id = 1;\n        bool as_leader = 2; // force region_id as leader\n        bool tombstone = 3; // set Peer to tombstoned in late phase\n    }\n    // read region meta to ready region meta\n    rpc ReadRegionMeta(ReadRegionMetaRequest) returns (stream RegionMeta) {}\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Prefix for CNF Conditions in Go\nDESCRIPTION: Processes CNF (AND) conditions by calling ranger.AddExpr4EqAndInCondition to add tidb_shard prefixes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (adder *exprPrefixAdder) addExprPrefix4CNFCond(conds []expression.Expression) ([]expression.Expression, error) {\n\tnewCondtionds, err := ranger.AddExpr4EqAndInCondition(adder.sctx,\n\t\tconds, adder.cols)\n\n\treturn newCondtionds, err\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Sequence Value in SQL\nDESCRIPTION: SQL function to get the previously generated value from a sequence.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nLASTVAL(sequence_name)\n```\n\n----------------------------------------\n\nTITLE: Browsing Available Metrics Tables in the metrics_schema Database\nDESCRIPTION: Example of showing the available tables in the metrics_schema database after defining various PromQL expression mappings through different methods.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nmysql> use metrics_schema;\nDatabase changed\n\nmysql> show tables;\n+-------------------------------------+\n| Tables_in_metrics_schema            |\n+-------------------------------------+\n| qps                                 |\n| memory_usage                        |\n| goroutines                          |\n| distsql_duration                    |\n| parse_duration                      |\n| execution_duration                  |\n| pd_client_cmd_ops                   |\n+-------------------------------------+\n7 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Getter and Setter Methods for KVSnapshot\nDESCRIPTION: Implementation of SetKVReadTimeout and GetKVReadTimeout interfaces for the KVSnapshot struct. These methods allow setting and retrieving the timeout value from both client-go and tidb repositories.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *KVSnapshot) SetKVReadTimeout(KVTimeout Duration) {\n\ts.KVReadTimeout = KVTimeout\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Comparison Table - TiDB Temporary Tables\nDESCRIPTION: Markdown table comparing features between Unistore and UnionScan storage options for temporary tables, including execution, indexes, disk spilling, and MVCC support.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-20-temporary-table.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                  | Unistore        | UnionScan |\n| -------------    | :-------------: | -----:    |\n| execution        | Y               | Y         |\n| indexes          | Y               | Y         |\n| spilling to disk | Y               | N         |\n| MVCC             | Y               | N         |\n```\n\n----------------------------------------\n\nTITLE: buildAccessPath Function in Go\nDESCRIPTION: Golang function that creates index access paths for given conditions, used as part of the index merge path generation process.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbuildAccessPath(Conditions, IndexInfos){\n\tvar results\n\tfor index in IndexInfos {\n\t\tres = detachCNFCondAndBuildRangeForIndex(Conditions, index, considerDNF = true)\n\t\tif res.accessCondition = nil {\n\t\t\tcontinue \n\t\t}\n\t\tindexPath = CreateIndexAccessPath(index, res)\n\t\tresults = append(results, indexPath)\n\t}\n\treturn results\n}\n```\n\n----------------------------------------\n\nTITLE: TableMeta Structure Definition in Go for Hash Join V2\nDESCRIPTION: Go struct definition for tableMeta which stores metadata used in the build phase, including information about row length, join keys, null map, and column organization.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-11-hash-join-v2.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype TableMeta struct {\n    // if the row has fixed length\n    isFixedLength bool\n    // the row length if the row is fixed length\n    rowLength int\n    // if the join keys has fixed length\n    isJoinKeysFixedLength bool\n    // the join keys length if it is fixed length\n    joinKeysLength int\n    // is the join key inlined in the row data\n    isJoinKeysInlined bool\n    // the length of null map, the null map include null bit for each column in the row and the used flag for right semi/outer join\n    nullMapLength int\n    // the column order in row layout, as described above, the save column order maybe different from the column order in build schema\n    // for example, the build schema maybe [col1, col2, col3], and the column order in row maybe [col2, col1, col3], then this array\n    // is [1, 0, 2]\n    rowColumnsOrder []int\n    // the column size of each column, -1 mean variable column, the order is the same as rowColumnsOrder\n    columnsSize []int\n    // the serialize mode for each key\n    serializeModes []codec.SerializeMode\n    // the first n columns in row is used for other condition, if a join has other condition, we only need to extract\n    // first n columns from the RowTable to evaluate other condition\n    columnCountNeededForOtherCondition int\n    // total column numbers for build side chunk, this is used to construct the chunk if there is join other condition\n    totalColumnNumber int\n    // column index offset in null map, will be 1 when if there is usedFlag and 0 if there is no usedFlag\n    colOffsetInNullMap int\n    // keyMode is the key mode, it can be OneInt/FixedSerializedKey/VariableSerializedKey\n    keyMode keyMode\n    // offset to rowData, -1 for variable length, non-inlined key\n    rowDataOffset int\n    // the mask of usedFlag in nullmap\n    usedFlagMask uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Keyspace Key Encoding Format in TiKV\nDESCRIPTION: This snippet describes the key encoding format used for keyspace in TiKV. It shows how the keyspace ID is incorporated into the key prefix to isolate data between different keyspaces.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-07-keyspace.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nx<3-byte keyspace ID><user key>\n```\n\n----------------------------------------\n\nTITLE: Split Table Design for Compliance\nDESCRIPTION: Alternative table design that separates public and private user data into different tables to handle placement restrictions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n\tid INT NOT NULL auto_increment PRIMARY KEY,\n\t/* public details */\n);\n\nCREATE TABLE user_details (\n\tuser_id INT NOT NULL,\n\t/* private columns */\n\t/* partition this table */\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User with Custom Authentication Plugin in TiDB\nDESCRIPTION: SQL statement for creating a user that uses a custom authentication plugin. The optional authentication string parameter can be used to pass configuration to the plugin.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'my_user'@'%' IDENTIFIED WITH 'authentication_my_plugin' AS 'optional_authentication_pwd';\n```\n\n----------------------------------------\n\nTITLE: SQL Table Definition for Background Subtasks\nDESCRIPTION: SQL table structure definition for storing DDL subtask information including task status, metadata, and execution details.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n+---------------+------------+------+-------------+\n| Field              | Type         | Null | Key  |\n+---------------+------------+------+-------------+\n| id                 | bigint(20)   | NO   | PK   | auto\n| Namespace string   | varchar(256) | NO   | MUL  |\n| Key string         | varchar(256) | NO   | MUL  | // ele_key, ele_id, ddl_job_id, sub_id\n| ddl_physical_tid   | bigint(20)   | NO   |      |\n| type               | int          | NO   |      | // e.g.ddl_addIndex type\n| exec_id            | varchar(256) | YES  |      |\n| exec_expired       | Timestamp    | YES  |      | // TSO\n| state              | varchar(64)  | YES  |      |\n| checkpoint         | longblob     | YES  |      |\n| start_time         | bigint(20)   | YES  |      |\n| state_update_time  | bigint(20)   | YES  |      |\n| meta               | longblob     | YES  |      |\n+---------------+------------+------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Transaction Commit Implementation in Go\nDESCRIPTION: Implements the commit logic for put-and-verify transactions. Handles intention file creation, conflict checking, and final write operations with proper cleanup.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (w ExclusiveWrite) CommitTo(ctx context.Context, s ExternalStorage) (uuid.UUID, error) {\n\ttxnID := uuid.New()\n\tcx := VerifyWriteContext{\n\t\tContext: ctx,\n\t\tTarget:  w.Target,\n\t\tStorage: s,\n\t\tTxnID:   txnID,\n\t}\n\tintentFileName := cx.IntentFileName() // Should be \"{Target}.INTENT.{UUID}\"\n\tcheckConflict := func() error {\n\t\tvar err error\n\t\tif w.Verify != nil {\n\t\t\terr = multierr.Append(err, w.Verify(cx))\n\t\t}\n\t\treturn multierr.Append(err, cx.assertOnlyMyIntent())\n\t}\n\n\tif err := checkConflict(); err != nil {\n\t\treturn uuid.UUID{}, errors.Annotate(err, \"during initial check\")\n\t}\n\tif err := s.WriteFile(cx, intentFileName, []byte{}); err != nil {\n\t\treturn uuid.UUID{}, errors.Annotate(err, \"during writing intention file\")\n\t}\n\tdefer s.DeleteFile(cx, intentFileName)\n\tif err := checkConflict(); err != nil {\n\t\treturn uuid.UUID{}, errors.Annotate(err, \"during checking whether there are other intentions\")\n\t}\n\n\treturn txnID, s.WriteFile(cx, w.Target, w.Content(txnID))\n}\n```\n\n----------------------------------------\n\nTITLE: CreateIndexMergeUnionPath Function in Go\nDESCRIPTION: Golang function that creates the final index merge union path, potentially merging similar index paths and managing table filters.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// (1) Maybe we will merge some indexPaths\n//    for example: index1(a) index2(b)\n//    condition : a < 1 or a > 2 or b < 1 or b > 10 \n//    imPaths will be [a<1,a>2,b<1,b>10] and we can merge it and get [a<1 or a >2 , b < 1 or b > 10] \n// (2)IndexMergePath.tableFilters: \n//    <1> Remove a condition from PushdownConditions and the rest will be added to tableFilter.\n//    <2> After the merge operation, if any indexPath's tableFilter is not nil, we should add it into tableFilters\n\t\nCreateIndexMergeUnionPath(imPaths,PushdownConditions,cond,IndexInfos) {\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Priority Queue Heap Interface in Go\nDESCRIPTION: Defines a generic thread-safe heap implementation with core operations for managing analysis jobs with O(log n) complexity for most operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Heap[K comparable, T any] interface {\n    Add(obj T) error\n    BulkAdd(list []T) error\n    AddIfNotPresent(obj T) error\n    Update(obj T) error\n    Delete(obj T) error\n    DeleteByKey(key K) error\n    Peek() (T, error)\n    Pop() (T, error)\n    List() []T\n    ListKeys() []K\n    Get(obj T) (T, bool, error)\n    GetByKey(key K) (T, bool, error)\n    Close()\n    IsClosed() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Rewrite Data Structure in Protobuf\nDESCRIPTION: A Protobuf message definition for the RewriteRule structure that supports key prefix replacement and a RestoreRequest that contains multiple rewrite rules.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/docs/cn/2019-09-09-BR-key-rewrite-disscussion.md#2025-04-18_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage RewriteRule {\n\tbytes old_prefix = 1;  // this can be empty for universal prefix insertion!\n\tbytes new_prefix = 2;  // these are _not_ just an integer!\n}\n\nmessage RestoreRequest {\n\t...\n\trepeated RewriteRule rewrite_rules = N;\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Non-Equivalent Condition in SQL\nDESCRIPTION: This snippet demonstrates a query that uses a non-equivalent condition (greater than) which would no longer use the index after the shard index implementation. The original index uk(a) would be changed to uk(tidb_shard(a), a), making it ineffective for this query.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM A WHERE a > 100\n```\n\n----------------------------------------\n\nTITLE: Querying Monitoring Metrics in TiDB\nDESCRIPTION: Example SQL queries demonstrating how to retrieve monitoring metrics from the new metrics_schema database in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> use metrics_schema;\nDatabase changed\n\nmysql> show tables;\n+-------------------------------------+\n| Tables_in_metrics_schema            |\n+-------------------------------------+\n| qps                                 |\n| memory_usage                        |\n| goroutines                          |\n| distsql_duration                    |\n| parse_duration                      |\n| execution_duration                  |\n| pd_client_cmd_ops                   |\n+-------------------------------------+\n7 rows in set (0.00 sec)\n\nmysql> desc pd_client_cmd_ops;\n+------------+-------------+------+-----+-------------------+-------+\n| Field      | Type        | Null | Key | Default           | Extra |\n+------------+-------------+------+-----+-------------------+-------+\n| address    | varchar(32) | YES  |     | NULL              |       |\n| type       | varchar(32) | YES  |     | NULL              |       |\n| value      | float       | YES  |     | NULL              |       |\n| interval   | int         | YES  |     | 60                |       |\n| start_time | int         | YES  |     | CURRENT_TIMESTAMP |       |\n| end_time   | int         | YES  |     |                   |       |\n| end_time   | int         | YES  |     |                   |       |\n| step       | int         | YES  |     |                   |       |\n+------------+-------------+------+-----+-------------------+-------+\n3 rows in set (0.02 sec)\n\nmysql> select address, type, value from pd_client_cmd_ops;\n+------------------+----------------------+---------+\n| address          | type                 | value   |\n+------------------+----------------------+---------+\n| 172.16.5.33:2379 | update_gc_safe_point |       0 |\n| 172.16.5.33:2379 | wait                 | 2.91052 |\n| 172.16.5.33:2379 | get_all_stores       |       0 |\n| 172.16.5.33:2379 | get_prev_region      |       0 |\n| 172.16.5.33:2379 | get_region           |       0 |\n| 172.16.5.33:2379 | get_region_byid      |       0 |\n| 172.16.5.33:2379 | scan_regions         |       0 |\n| 172.16.5.33:2379 | tso_async_wait       | 2.91052 |\n| 172.16.5.33:2379 | get_operator         |       0 |\n| 172.16.5.33:2379 | get_store            |       0 |\n| 172.16.5.33:2379 | scatter_region       |       0 |\n+------------------+----------------------+---------+\n11 rows in set (0.00 sec)\n\nmysql> select address, type, value from pd_client_cmd_ops where start_time='2019-11-14 10:00:00' and end_time='2019-11-14 10:05:00';\n+------------------+----------------------+---------+\n| address          | type                 | value   |\n+------------------+----------------------+---------+\n| 172.16.5.33:2379 | update_gc_safe_point |       0 |\n| 172.16.5.33:2379 | wait                 | 0.82052 |\n| 172.16.5.33:2379 | get_all_stores       |       0 |\n| 172.16.5.33:2379 | get_prev_region      |       0 |\n| 172.16.5.33:2379 | get_region           |       0 |\n| 172.16.5.33:2379 | get_region_byid      |       0 |\n| 172.16.5.33:2379 | scan_regions         |       0 |\n| 172.16.5.33:2379 | tso_async_wait       | 0.82052 |\n| 172.16.5.33:2379 | get_operator         |       0 |\n| 172.16.5.33:2379 | get_store            |       0 |\n| 172.16.5.33:2379 | scatter_region       |       0 |\n+------------------+----------------------+---------+\n11 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark Setting in Timer Hook\nDESCRIPTION: Example showing how to manually set the watermark when closing a timer event using WithSetWatermark option.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *MyTimerHook) OnSchedEvent(ctx context.Context, event api.TimerShedEvent) error {\n    // do some things ...\n\t\n\t// close the timer event so that the next event can be scheduled\n    return h.cli.CloseTimerEvent(\n        ctx, \n        event.Timer().ID, \n        event.EventID(),  \n        api.WithSetWatermark(time.Now()), // use the current time as the next watermark instead of the event start time\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Git Operations for Merging Dumpling Repository into TiDB\nDESCRIPTION: A series of git commands to merge the Dumpling repository into TiDB as a subdirectory. This includes creating branches, using git subtree to add the Dumpling repo, and setting up a branch for necessary code modifications.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-29-merge-dumpling-into-tidb.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b clone-dumpling && git subtree add --prefix=dumpling https://github.com/pingcap/dumpling.git master --squash\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b merge-dumpling\n```\n\n----------------------------------------\n\nTITLE: Priority Score Calculation in Code Format\nDESCRIPTION: Simplified code representation of the priority score calculation using weights and multipliers for different factors.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npriority_score = (change_percentage[size] * last_failed_time_weight[interval] * special_event[event])\n```\n\n----------------------------------------\n\nTITLE: Running BR Unit Tests with Specific Test Flags\nDESCRIPTION: Command to run a specific unit test for the BR component with additional test flags that specify the package and test parameters.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/tests/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake br_unit_test ARGS='github.com/pingcap/tidb/br/pkg/cdclog --test.v --check.v --check.f TestColumn'\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Incremental Stats Meta Updates in TiDB\nDESCRIPTION: SQL query used to fetch incremental updates from the stats_meta table. This query retrieves version, table_id, modify_count, and count for tables that have been modified since the last check, ordered by version.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT version, table_id, modify_count, count from mysql.stats_meta where version > %? order by version\n```\n\n----------------------------------------\n\nTITLE: Using Custom Authentication Plugin in SQL Commands\nDESCRIPTION: SQL statements that utilize a custom authentication plugin for user creation. These commands create users with authentication handled by the custom plugin.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER u1 IDENTIFIED WITH my_auth_plugin AS <pwd>;\nCREATE USER u2 IDENTIFIED WITH my_auth_plugin BY <pwd>;\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Constraint Formats\nDESCRIPTION: Illustrates the difference between list and dictionary formats for follower constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLACEMENT POLICY p1 FOLLOWER_CONSTRAINTS=\"[+region=us-east-1,+region=us-east-2]\" FOLLOWERS=2;\nCREATE PLACEMENT POLICY p2 FOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 1,-region=us-east-2: 1}\";\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Explicit Visibility Option in SQL\nDESCRIPTION: SQL syntax for creating a new index with explicit visibility specification. This demonstrates how to create an index as visible or invisible from the beginning.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-03-12-invisible-index.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX index_name ON table_name(key) [ INVISIBLE | VISIBLE ];\n```\n\n----------------------------------------\n\nTITLE: Proposed Batch Table Creation API in TiDB\nDESCRIPTION: The new design introduces a BatchCreateTableWithInfo API that collects multiple table creation operations and executes them as a single DDL job, reducing the number of schema version changes and improving performance significantly.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-10-backup-with-batch-create-table.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfor _, info := range tableInfo {\n  job, err := d.createTableWithInfoJob(ctx, dbName, info, onExist, true)\n  if err != nil {\n  return errors.Trace(err)\n  }\n\n  // if jobs.Type == model.ActionCreateTables, it is initialized\n  // if not, initialize jobs by job.XXXX\n  if jobs.Type != model.ActionCreateTables {\n    jobs.Type = model.ActionCreateTables\n    jobs.SchemaID = job.SchemaID\n    jobs.SchemaName = job.SchemaName\n  }\n\n  // append table job args\n  info, ok := job.Args[0].(*model.TableInfo)\n  if !ok {\n    return errors.Trace(fmt.Errorf(\"except table info\"))\n  }\n    args = append(args, info)\n  }\n\n  jobs.Args = append(jobs.Args, args)\n\n  err = d.doDDLJob(ctx, jobs)\n\n  for j := range args {\n  if err = d.createTableWithInfoPost(ctx, args[j], jobs.SchemaID); err != nil {\n    return errors.Trace(d.callHookOnChanged(job, err))\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Ownership Verification in Go\nDESCRIPTION: Implements the owner checking mechanism to ensure that only the current owner can use the session. The ExecuteInternal method demonstrates how each session operation verifies ownership before proceeding, preventing unauthorized access after a session is returned to the pool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *session) checkOwner(owner any) error {\n    s.mu.Lock()\n    defer s.mu.Unlock()\n    if s.owner == nil || s.owner != owner {\n        return errors.New(\"invalid owner\")\n    }\n    return nil\n}\n\nfunc (s *Session) ExecuteInternal(ctx context.Context, sql string, args ...any) (sqlexec.RecordSet, error) {\n    if err := s.internal.checkOwner(s); err != nil {\n        return nil, err\n    }\n    return s.internal.sctx.ExecuteInternal(ctx, sql, args...)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Placement Rule with Region Label in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a placement rule using region labels. It specifies the group ID, rule ID, region label key and value, role, and label constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"group_id\": \"group_id\",\n    \"id\": \"id\",\n    \"region_label_key\": \"schema/table-name\",\n    \"region_label_value\": \"db1/tb1\",\n    \"role\": \"leader\",\n    \"label_constraints\": [\n        {\"key\": \"region\", \"op\": \"in\", \"values\": [\"us-east-1\", \"us-east-2\"]}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Key Rewriting in Rust\nDESCRIPTION: A Rust function that undoes rewrite rules to transform keys from their new format back to their original format by replacing the new prefix with the old prefix.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/docs/cn/2019-09-09-BR-key-rewrite-disscussion.md#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn undo_rewrite_key(rules: &[RewriteRule], key: &[u8]) -> Cow<[u8]> {\n    for rule in rules {\n        if key.starts_with(rule.new_prefix) {\n            return Cow::Owned(rule.old_prefix + key[rule.new_prefix.len()..])\n        }\n    }\n    Cow::Borrowed(key)\n}\n```\n\n----------------------------------------\n\nTITLE: ViewInfo Structure Definition in Go\nDESCRIPTION: Definition of the ViewInfo structure that will store metadata for views in TiDB. This structure will be added as an attribute to TableInfo to distinguish views from base tables.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-24-view-support.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ViewInfo struct {\n\tAlgorithm   ViewAlgorithm    `json:\"view_algorithm\"`\n\tDefiner     UserIdentity     `json:\"view_definer\"`  \n\tSecurity    ViewSecurity     `json:\"view_security\"`\n\tSelectStmt  string           `json:\"view_select\"`\n\tCheckOption ViewCheckOption  `json:\"view_checkoption\"`\n\tCols        []model.CIStr    `json:\"view_cols\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Condition Types for Shard Index in Go\nDESCRIPTION: Go function that differentiates between OR expressions and other condition types, routing them to the appropriate handler for adding shard index expressions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// if original condition is a LogicOr expression, such as `WHERE a = 1 OR a = 10`,\n// call the function AddExprPrefix4DNFCond to add prefix expression tidb_shard(a) = xxx for shard index.\n// Otherwise, if the condition is  `WHERE a = 1`, `WHERE a = 1 AND b = 10`, `WHERE a IN (1, 2, 3)`......,\n// call the function AddExprPrefix4CNFCond to add prefix expression for shard index.\nfunc (adder *exprPrefixAdder) addExprPrefix4ShardIndex() ([]expression.Expression, error) {\n\tif len(adder.OrigConds) == 1 {\n\t\tif sf, ok := adder.OrigConds[0].(*expression.ScalarFunction); ok && sf.FuncName.L == ast.LogicOr {\n\t\t\treturn adder.addExprPrefix4DNFCond(sf)\n\t\t}\n\t}\n\treturn adder.addExprPrefix4CNFCond(adder.OrigConds)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring Metrics in TiDB\nDESCRIPTION: Examples of how to configure monitoring metrics in TiDB using different methods, including configuration files, HTTP API, SQL commands, and external files.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n# tidb.toml\n[metrics_schema]\nqps = `sum(rate(tidb_server_query_total[$STEP])) by (result)`\nmemory_usage = `process_resident_memory_bytes{job=\"tidb\"}`\ngoroutines = `rate(go_gc_duration_seconds_sum{job=\"tidb\"}[$STEP])`\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST http://host:port/metrics_schema?name=distsql_duration&expr=`histogram_quantile(0.999, \nsum(rate(tidb_distsql_handle_query_duration_seconds_bucket[$STEP])) by (le, type))`\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> admin metrics_schema add parse_duration `histogram_quantile(0.95, sum(rate(tidb_session_parse_duration_seconds_bucket[$STEP])) by (le, sql_type))`\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> admin metrics_schema load external_metrics.txt\n#external_metrics.txt\nexecution_duration = `histogram_quantile(0.95, sum(rate(tidb_session_execute_duration_seconds_bucket[$STEP])) by (le, sql_type))`\npd_client_cmd_ops = `sum(rate(pd_client_cmd_handle_cmds_duration_seconds_count{type!=\"tso\"}[$STEP])) by (type)`\n```\n\n----------------------------------------\n\nTITLE: Implementing the tidb_shard Function in Go\nDESCRIPTION: Go code implementing the tidb_shard function that transforms an integer to a value in the range [0, 255] by calculating a hash value and taking the modulo by 256.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (b *builtinTidbShardSig) evalInt(row chunk.Row) (int64, bool, error) {\n\tshardKeyInt, isNull, err := b.args[0].EvalInt(b.ctx, row)\n\tif isNull || err != nil {\n\t\treturn 0, true, err\n\t}\n\tvar hashed uint64\n\tif hashed, err = vitess.HashUint64(uint64(shardKeyInt)); err != nil {\n\t\treturn 0, true, err\n\t}\n\thashed = hashed % tidbShardBucketCount\n\treturn int64(hashed), false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source Using Options in SQL\nDESCRIPTION: SQL syntax for configuring a restore operation with explicit storage parameters using key-value pairs. This approach explicitly defines each storage parameter as a separate option in the SQL statement.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nRESTORE DATABASE * FROM 's3://storage/url'\n    S3_ACCESS_KEY = 'AAAAA'\n    S3_SECRET_ACCESS_KEY = 'SSSSS'\n    S3_FORCE_PATH_STYLE = 1\n    S3_ENDPOINT = 'http://10.0.1.55:8888'\n    RATE_LIMIT = 512 MB/SECOND;\n```\n\n----------------------------------------\n\nTITLE: Parsing Request and Setting Timeout in Rust Coprocessor Handler\nDESCRIPTION: Implementation of parse_request_and_check_memory_locks in TiKV, which shows where the timeout value should be used to set the deadline for request processing in the coprocessor component.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn parse_request_and_check_memory_locks(\n    &self,\n    mut req: coppb::Request,\n    peer: Option<String>,\n    is_streaming: bool,\n) -> Result<(RequestHandlerBuilder<E::Snap>, ReqContext)> {\n    ...\n     req_ctx = ReqContext::new(\n        tag,\n        context,\n        ranges,\n        self.max_handle_duration, // Here use the specified timeout value.\n        peer,\n        Some(is_desc_scan),\n        start_ts.into(),\n        cache_match_version,\n        self.perf_level,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation Phase Group Search Algorithm in Go\nDESCRIPTION: Top-level algorithm for the implementation phase that finds the best physical plan for a group under given cost constraints and physical property requirements.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc implGroup(g *Group, reqPhysProp *PhysicalProperty, costLimit float64) (groupImpl PhysicalPlan) {\n\tif g.implemented(reqPhysProp) {\n\t\treturn g.getImplementation(reqPhysProp)\n\t}\n\n\t// Handle implementation rules for each equivalent expression.\n    ...\n\n\t// Handle enforcing rules for the required physical property.\n    ...\n\n\tg.insertImpl(reqPhysProp, groupImpl)\n\treturn groupImpl\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Users Table Schema\nDESCRIPTION: Initial SQL schema for creating a users table with basic fields and constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n\tid INT NOT NULL auto_increment,\n\tusername VARCHAR(64) NOT NULL,\n\temail VARCHAR(64) NOT NULL,\n\tdateofbirth DATE NOT NULL,\n\tcountry VARCHAR(10) NOT NULL,\n\tPRIMARY KEY (id),\n\tUNIQUE (username)\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to TiDB Server for Testing in Bash\nDESCRIPTION: This snippet demonstrates how to connect to a running TiDB server using the mysql client for running SQL queries during integration testing. It specifies the host, port, and user credentials for connecting to the default TiDB server configuration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest2/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmysql --comments --host 127.0.0.1 --port 4000 -u root\n```\n\n----------------------------------------\n\nTITLE: Adding max_execution_duration_ms Field to Context Protobuf Message\nDESCRIPTION: Definition of the max_execution_duration_ms field in the Context protobuf message. This field is used to pass timeout values for RPC requests and is already being used for write requests like Prewrite and Commit.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Context {\n  ...\n  uint64 max_execution_duration_ms = 14;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Hot Index Problem in SQL\nDESCRIPTION: SQL for creating a table with a hot index that suffers from performance issues when data is monotonically increasing on the 'id2' field.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test(id1 INT PRIMARY, id2 INT, id3 INT, UNIQUE KEY hotIndex(id2));\n\nINSERT INTO test values(val1,val2,val3);\nUPDATE test SET id3 = val3 WHERE id2 = val2;\nSELECT * FROM test WHERE id2 = val2;\n```\n\n----------------------------------------\n\nTITLE: Defining Group and GroupExpr Data Structures in Go\nDESCRIPTION: Core data structures for the Volcano planner where Group represents a set of logically equivalent expressions and GroupExpr represents a specific logical expression with children groups.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype StringSet = map[string]struct{}\n\ntype Group struct {\n\tequivalents  []*GroupExpr\n\tfingerprints StringSet\n\texplored     bool\n    ...\n}\n\ntype GroupExpr struct {\n\texprNode LogicalPlan\n\tchildren []*Group\n\texplored bool\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Change Event Structures in Go\nDESCRIPTION: Defines the data structures for handling schema change events with JSON marshaling support and proper encapsulation of implementation details.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype SchemaChange struct {\n    Type      model.ActionType\n    inner *schemaChange4Persist\n}\n\ntype schemaChange4Persist struct {\n    Type      model.ActionType\n    TableInfo    *model.TableInfo `json:omitempty`\n    PartInfo     *model.PartitionInfo `json:omitempty`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shard Expressions for Equality Conditions in Go\nDESCRIPTION: Adds tidb_shard expressions specifically for equality conditions by calculating shard values.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc AddGcColumn4EqCond(sctx sessionctx.Context,\n\tcols []*expression.Column,\n\taccessesCond []expression.Expression,\n\tcolumnValues []*valueInfo) ([]expression.Expression, error)\n```\n\n----------------------------------------\n\nTITLE: Querying PD Scheduler Logs in TiDB\nDESCRIPTION: SQL query to retrieve scheduler-related logs from the PD component in a TiDB cluster using the cluster_log system table.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cluster_log where type='pd' and content like '%scheduler%';\n```\n\n----------------------------------------\n\nTITLE: Implementing Region Recovery RPC Interface in Go\nDESCRIPTION: Protocol buffer definition for region recovery operations including request/response structures and RPC declaration for executing recovery commands.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n    // command to store for recover region\n    message RecoverRegionRequest {\n        uint64 region_id = 1;\n        bool as_leader = 2; // force region_id as leader\n        bool tombstone = 3; // set Peer to tombstoned in late phase\n    }\n\n    message RecoverRegionResponse {\n        Error error = 1;\n        uint64 store_id = 2;\n    }\n\n    // execute the recovery command\n    rpc RecoverRegion(stream RecoverRegionRequest) returns (RecoverRegionResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Partition Attributes in TiDB\nDESCRIPTION: SQL syntax for setting and resetting attributes on a partition level. Similar to table attributes but with partition specification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-10-20-table-attributes.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t PARTITION p ATTRIBUTES[=]'key=value[, key1=value1...]';\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t PARTITION p ATTRIBUTES[=]DEFAULT;\n```\n\n----------------------------------------\n\nTITLE: Adding EnableStoreBatch Flag in TiDB kv.Request Struct\nDESCRIPTION: Adding a boolean flag to the kv.Request struct in TiDB to indicate whether store batching is enabled. This flag controls whether tasks should be batched by store during execution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\ntype Request struct {\n    â€¦\n    // EnableStoreBatch indicates if the tasks are batched.\n    EnableStoreBatch bool\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation Rules for Group Expressions in Go\nDESCRIPTION: Algorithm to handle implementation rules for each equivalent expression in a group, computing costs recursively for child groups and finding the implementation with lowest cumulative cost.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Handle implementation rules for each equivalent expression.\nfor _, curExpr := range g.equivalents {\n\tfor _, impl := range implGroupExpr(curExpr) {\n\t\timpl.setCumCost(impl.getSelfCost())\n\t\tfor i, childGroup := range curExpr.children {\n\t\t\tchildImpl := implGroup(childGroup, impl.getChildReqProp(i), costLimit-impl.getCumCost())\n\t\t\tif childImpl == nil {\n\t\t\t\tcumCost = math.MaxFloat64\n\t\t\t\tbreak\n\t\t\t}\n\t\t\timpl.setChild(i, childImpl)\n\t\t\timpl.setCumCost(impl.getCumCost() + childImpl.getCumCost())\n\t\t}\n\t\tif groupImpl.getCumCost() > impl.getCumCost() {\n\t\t\tgroupImpl = impl\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Put-and-Verify Transaction Structure in Go\nDESCRIPTION: Defines core structures for implementing exclusive write transactions with verification capabilities. Includes VerifyWriteContext for managing transaction context and ExclusiveWrite for handling atomic write operations with verification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype VerifyWriteContext struct {\n\tcontext.Context\n\tTarget  string\n\tStorage ExternalStorage\n\tTxnID   uuid.UUID\n}\n \ntype ExclusiveWrite struct {\n\t// Target is the target file of this txn.\n\t// There shouldn't be other files shares this prefix with this file, or the txn will fail.\n\tTarget string\n\t// Content is the content that needed to be written to that file.\n\tContent func(txnID uuid.UUID) []byte\n\t// Verify allows you add other preconditions to the write.\n\t// This will be called when the write is allowed and about to be performed.\n\t// If `Verify()` returns an error, the write will be aborted.\n\t// \n\t// With this, you may add extra preconditions of committing in usecases like RWLock.\n\tVerify func(ctx VerifyWriteContext) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyspace Name in TiDB\nDESCRIPTION: This snippet demonstrates how to configure the keyspace name in the TiDB configuration file. Setting this parameter enables TiDB to use the specified keyspace.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-07-keyspace.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkeyspace-name: \"your_keyspace_name\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Table with Foreign Key References in SQL\nDESCRIPTION: Demonstrates the rejection of a DROP TABLE command when foreign_key_checks is ON and the table has foreign key references.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n> drop table t1;\n(3730, \"Cannot drop table 't1' referenced by a foreign key constraint 't2_ibfk_1' on table 't2'.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Schedule in Timer Hook\nDESCRIPTION: Example showing how to implement delayed scheduling in OnPreSchedEvent by returning a PreSchedEventResult with a delay value.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc shouldDelaySchedule() bool {\n\t// your function to check whether to delay a timer's schedule\n}\n\nfunc (h *MyTimerHook) OnPreSchedEvent(ctx context.Context, event api.TimerShedEvent) (api.PreSchedEventResult, error) {\n    if shouldDelaySchedule() {\n        return api.PreSchedEventResult{\n            Delay: time.Minute,\n        }, nil\n    }   \n    return api.PreSchedEventResult{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Cases with LLMTest CLI Command\nDESCRIPTION: Command line instruction for generating test cases using LLMTest. It requires OpenAI API credentials, base URL, model selection, and specific prompt generator configuration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/llmtest/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./llmtest generate --openai_base_url https://openai.base.url --openai_model deepseek/deepseek-r1 --openai_token XXXXX --parallel 20 --prompt_generator expression --test_count 10\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Prefix for Shard Indexes in Go\nDESCRIPTION: Go function that adds expression prefixes for shard indexes, transforming queries like 'WHERE a = 10' to 'WHERE tidb_shard(a) = val AND a = 10'.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// AddPrefix4ShardIndexes Add expression prefix for shard index. e.g. an index is test.uk(tidb_shard(a), a).\n// It transforms the sql \"SELECT * FROM test WHERE a = 10\" to\n// \"SELECT * FROM test WHERE tidb_shard(a) = val AND a = 10\", val is the value of tidb_shard(10).\n// It also transforms the sql \"SELECT * FROM test WHERE a IN (10, 20, 30)\" to\n// \"SELECT * FROM test WHERE tidb_shard(a) = val1 AND a = 10 OR tidb_shard(a) = val2 AND a = 20\"\n// @param[in] conds            the original condtion of this datasource\n// @retval - the new condition after adding expression prefix\nfunc (ds *DataSource) AddPrefix4ShardIndexes(sc sessionctx.Context, conds []expression.Expression) []expression.Expression {\n\tif !ds.containExprPrefixUk {\n\t\treturn conds\n\t}\n\n\tvar err error\n\tnewConds := make([]expression.Expression, 0, len(conds))\n\tnewConds = append(newConds, conds...)\n\n\tfor _, path := range ds.possibleAccessPaths {\n\t\tif path.IsTablePath() || !path.IsUkShardIndex() {\n\t\t\tcontinue\n\t\t}\n\t\tnewConds, err = ds.addExprPrefixCond(sc, path, newConds)\n\t\tif err != nil {\n\t\t\tlogutil.BgLogger().Error(\"Add tidb_shard expression failed\", zap.Error(err))\n\t\t\treturn conds\n\t\t}\n\t}\n\n\treturn newConds\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes in TOML\nDESCRIPTION: Example of error code definitions using TOML format, showing structure for error codes with error message, description, and workaround fields.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-standardize-error-codes-and-messages.md#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[8005]\nerror = '''Write Conflict, txnStartTS is stale'''\ndescription = '''Transactions in TiDB encounter write conflicts.'''\nworkaround = '''\nCheck whether `tidb_disable_txn_auto_retry` is set to `on`. If so, set it to `off`; if it is already `off`, increase the value of `tidb_retry_limit` until the error no longer occurs.\n'''\n\n[9005]\nerror = '''Region is unavailable'''\ndescription = '''\nA certain Raft Group is not available, such as the number of replicas is not enough.\nThis error usually occurs when the TiKV server is busy or the TiKV node is down.\n'''\nworkaround = '''Check the status, monitoring data and log of the TiKV server.'''\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics from a Mapped System Table\nDESCRIPTION: Example of querying data from the pd_client_cmd_ops table in the metrics_schema database, showing the table schema and how to query the metrics data, including filtering by timestamp.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nmysql> desc pd_client_cmd_ops;\n+------------+-------------+------+-----+-------------------+-------+\n| Field      | Type        | Null | Key | Default           | Extra |\n+------------+-------------+------+-----+-------------------+-------+\n| address    | varchar(32) | YES  |     | NULL              |       |\n| type       | varchar(32) | YES  |     | NULL              |       |\n| value      | float       | YES  |     | NULL              |       |\n| interval   | int         | YES  |     | 60                |       |\n| start_time | int         | YES  |     | CURRENT_TIMESTAMP |       |\n+------------+-------------+------+-----+-------------------+-------+\n3 rows in set (0.02 sec)\n\nmysql> select address, type, value from pd_client_cmd_ops;\n+------------------+----------------------+---------+\n| address          | type                 | value   |\n+------------------+----------------------+---------+\n| 172.16.5.33:2379 | update_gc_safe_point |       0 |\n| 172.16.5.33:2379 | wait                 | 2.91052 |\n| 172.16.5.33:2379 | get_all_stores       |       0 |\n| 172.16.5.33:2379 | get_prev_region      |       0 |\n| 172.16.5.33:2379 | get_region           |       0 |\n| 172.16.5.33:2379 | get_region_byid      |       0 |\n| 172.16.5.33:2379 | scan_regions         |       0 |\n| 172.16.5.33:2379 | tso_async_wait       | 2.91052 |\n| 172.16.5.33:2379 | get_operator         |       0 |\n| 172.16.5.33:2379 | get_store            |       0 |\n| 172.16.5.33:2379 | scatter_region       |       0 |\n+------------------+----------------------+---------+\n11 rows in set (0.00 sec)\n\nmysql> select address, type, value from pd_client_cmd_ops where start_time='2019-11-14 10:00:00';\n+------------------+----------------------+---------+\n| address          | type                 | value   |\n+------------------+----------------------+---------+\n| 172.16.5.33:2379 | update_gc_safe_point |       0 |\n| 172.16.5.33:2379 | wait                 | 0.82052 |\n| 172.16.5.33:2379 | get_all_stores       |       0 |\n| 172.16.5.33:2379 | get_prev_region      |       0 |\n| 172.16.5.33:2379 | get_region           |       0 |\n| 172.16.5.33:2379 | get_region_byid      |       0 |\n| 172.16.5.33:2379 | scan_regions         |       0 |\n| 172.16.5.33:2379 | tso_async_wait       | 0.82052 |\n| 172.16.5.33:2379 | get_operator         |       0 |\n| 172.16.5.33:2379 | get_store            |       0 |\n| 172.16.5.33:2379 | scatter_region       |       0 |\n+------------------+----------------------+---------+\n11 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Finding Equivalent Expressions with Transformation Rules in Go\nDESCRIPTION: Algorithm to find and apply matched transformation rules to discover more equivalent expressions. It creates iterators based on patterns and applies rules when matches are found.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Find and apply the matched transformation rules.\nfunc findMoreEquiv(cur *GroupExpr, curGroup *Group) (eraseCur bool) {\n\tfor _, rule := range GetTransformationRules(cur.exprNode) {\n\t\t// Create a binding of the current group expression and the pattern of\n\t\t// the transformation rule to enumerate all the possible expressions.\n\t\texprIter := NewExprIter(cur, rule.getPattern())\n\t\tfor exprIter.Next() {\n\t\t\tif !rule.match(exprIter) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tnewExpr, erase, err := rule.onTransform(exprIter)\n\t\t\teraseCur = eraseCur || erase\n\t\t\tif !curGroup.insert(newExpr) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// If the new group expression is successfully inserted into the\n\t\t\t// current group, we mark the group expression and the group as\n\t\t\t// unexplored to enable the exploration on the new group expression\n\t\t\t// and all the antecedent groups.\n\t\t\tnewExpr.explored = false\n\t\t\tcurGroup.explored = false\n\t\t}\n\t}\n\treturn eraseCur\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PD Scheduler Limits in Go\nDESCRIPTION: Defines scheduler limit parameters for PD operator configuration during backup operations, including hot region, leader, merge, region, and replica scheduling limits.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\tconst enableTiKVSplitRegion = \"enable-tikv-split-region\"\n\tscheduleLimitParams := []string{\n\t\t\"hot-region-schedule-limit\",\n\t\t\"leader-schedule-limit\",\n\t\t\"merge-schedule-limit\",\n\t\t\"region-schedule-limit\",\n\t\t\"replica-schedule-limit\",\n\t\tenableTiKVSplitRegion,\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Task in Go for TiDB TTL\nDESCRIPTION: This function processes delete tasks received from the scan phase. It splits the rows into batches and executes delete operations for each batch of expired rows.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc doDelTask(ch) {\n\tfor _, task := range ch {\n\t\tbatches := splitRowsToDeleteBatches(task.rows)\n\t\tfor _, batch := range batches {\n\t\t\tdeleteBatch(task.tbl, task.batch, task.expire)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enhanced statsInfo Structure in Go\nDESCRIPTION: Proposed structure for maintaining detailed statistics in the plan, adding histogram collection to the existing count and NDV attributes. This structure will be used across various plan operators to make better optimization decisions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-09-04-histograms-in-plan.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype statsInfo struct {\n\t// This two attributes are already used in current statsInfo.\n\tcount float64\n\t// The number of distinct value of each column.\n\tndv []float64\n\n\t// HistColl collects histograms of columns.\n\thistColl statistics.HistColl\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Index Key Format in TiDB\nDESCRIPTION: Specification of the binary format used for unique index keys in TiDB. The format includes table ID, index ID, and column values, with the handle stored in the value of the index entry.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nt | {table_id} | _i | {index_id} | {index_column_values} // component\n1 | 8          | 2  | 8          | size of the values    // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FuncCastExpr Structure in Golang\nDESCRIPTION: Definition of the FuncCastExpr structure in Golang, adding an Array field to indicate the use of the CAST AS ARRAY syntax.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-03-14-multi-valued-index.md#2025-04-18_snippet_1\n\nLANGUAGE: Golang\nCODE:\n```\ntype FuncCastExpr struct {\n    //...\n    Array bool\n}\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Foreign Key Update Example\nDESCRIPTION: Demonstrates CockroachDB's execution plan for updating a primary key with cascading foreign key references.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE customers_2 (\n    id INT PRIMARY KEY\n);\nCREATE TABLE orders_2 (\n    id INT PRIMARY KEY,\n    customer_id INT REFERENCES customers_2(id) ON UPDATE CASCADE ON DELETE CASCADE\n);\nINSERT INTO customers_2 VALUES (1), (2), (3);\nINSERT INTO orders_2 VALUES (100,1), (101,2), (102,3), (103,1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Future for Async Task Control in Rust\nDESCRIPTION: Rust code defining the LimitedFuture struct and its implementation for wrapping async tasks with resource control in TiKV.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nstruct LimitedFuture<F> {\n    f: F,\n    limiter: Arc<ResourceLimiter>,\n}\n\nimpl LimitedFuture {\n    pub fn new(f: F, limiter: Arc<ResourceLimiter>) -> Self;\n}\n\nimpl Future for LimitedFuture {\n    fn poll() -> F::Output {\n        let start = Instant::now();\n        let io_bytes_before = get_thread_io_bytes_total();\n        let res = self.f.pool();\n        let dur = start.elapsed();\n        let io_bytes_delta = get_thread_io_bytes_total() - io_bytes_before;\n        let wait_dur = self.limiter.consume(dur, io_bytes_delta);\n        AsyncSleep(wait_dur);\n        return res;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Backup Metadata Schema Definition\nDESCRIPTION: JSON schema defining the structure of backup metadata including cluster info, TiKV store details, volume information, and Kubernetes configurations\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"cluster_info\": {\n   \"cluster_version\": \"v6.3.0\",\n   \"max_alloc_id\": \"6000\",\n   \"resolved_ts\": \"456745777823347\",\n },\n \"tikv\" : {\n   \"replicas\": 3,\n   \"stores\": [\n   {\n     \"store_id\" : 1,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6244\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0001\",\n         \"snapshot_id\" : \"snap-1234567890abcdef0\",\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6245\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0002\",\n         \"snapshot_id\" : \"snap-1234567890abcdef1\",\n       }\n     ]\n   },\n   {\n     \"store_id\" : 2,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6246\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0003\",\n         \"snapshot_id\" : \"snap-1234567890abcdef2\",\n         \"fsr-enabled\": \"false\",\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6247\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0004\",\n         \"snapshot_id\" : \"snap-1234567890abcdef3\",\n         \"fsr-enabled\": \"false\",\n       }\n     ]\n   },\n    {\n     \"store_id\" : 3,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6248\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0005\",\n         \"snapshot_id\" : \"snap-1234567890abcdef4\",\n         \"fsr-enabled\": \"false\",\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6249\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0006\",\n         \"snapshot_id\" : \"snap-1234567890abcdef5\",\n         \"fsr-enabled\": \"false\",\n       }\n     ]\n   }\n ],\n },\n \"pd\" : {\n   \"replicas\" : 3\n },\n \"tidb\": {\n   \"replicas\" : 3\n },\n \"kubernetes\" : {\n   \"pvs\" : [],\n   \"pvcs\" : [],\n   \"crd_tidb_cluster\" : {},\n   \"options\" : {}\n }\n \"options\" : {} \n}\n```\n\n----------------------------------------\n\nTITLE: Adding HasInstanceScope Helper Function in Go\nDESCRIPTION: Implementation of a helper function that checks if a system variable has INSTANCE scope, similar to the existing HasGlobalScope function.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n@@ -257,6 +259,11 @@ func (sv *SysVar) HasGlobalScope() bool {\n        return sv.Scope&ScopeGlobal != 0\n}\n\n+// HasInstanceScope returns true if the scope for the sysVar includes global or instance\n+func (sv *SysVar) HasInstanceScope() bool {\n+       return sv.Scope&ScopeInstance != 0\n+}\n+\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Read-Only Timestamp in TiDB\nDESCRIPTION: Demonstrates setting transaction-level timestamp constraints for stale reads that affect subsequent queries.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET TRANSACTION READ ONLY AS OF TIMESTAMP '2021-09-22 15:04:05';\nBEGIN;\nSELECT * FROM t  WHERE id = 1;\nCOMMIT;\n// it also affects next query statement \nSET TRANSACTION READ ONLY AS OF TIMESTAMP '2021-09-22 15:04:05';\nSELECT * FROM t  WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Index Value Format with Common Handles\nDESCRIPTION: Specification of the binary format for unique index values using common handles in TiDB. The format includes a flag indicating common handle usage, the handle length, and the handle itself.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{tailLen} | {common_handle_flag} | {common_handle_len} | {common_handle}    // component\n1         | 1                    | 2                   | len(common_handle) // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Timer Hook Class in Go\nDESCRIPTION: Example implementation of a custom timer hook class that implements the api.HookClass interface. Includes basic hook methods like Start, Stop, OnPreSchedEvent, and OnSchedEvent.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc MyTimerHookFactory(hookClass string, cli api.TimerClient) api.Hook {\n    return &MyTimerHook{\n        cli: cli,\n    }\n}\n\ntype MyTimerHook struct {\n\tcli api.TimerClient\n}\n\nfunc (h *MyTimerHook) Start() {\n\t// You should do some init works here.\n}\n\nfunc (h *MyTimerHook) Stop() {\n\t// You should do some clear works here.\n}\n\nfunc (h *MyTimerHook) OnPreSchedEvent(ctx context.Context, event api.TimerShedEvent) (api.PreSchedEventResult, error) {\n\tfmt.Printf(\"OnPreSchedEvent: %s\\n\", event.EventID())\n\treturn api.PreSchedEventResult{}, nil\n}\n\nfunc (h *MyTimerHook) OnSchedEvent(ctx context.Context, event api.TimerShedEvent) error {\n    fmt.Printf(\"OnSchedEvent: %s, event start: %s\\n\", event.EventID(), event.Timer().EventStart)\n\treturn h.cli.CloseTimerEvent(ctx, event.Timer().ID, event.EventID())\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Enforcing Rules in Implementation Phase in Go\nDESCRIPTION: Algorithm to handle enforcing rules that satisfy physical property requirements, generating new physical operators to enforce properties when direct implementations cannot meet requirements.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Handle enforcing rules for the required physical property.\nfor _, rule := range getEnforcerRules(reqPhysProp) {\n\timpl, newReqPhysProp := rule.onEnforce(reqPhysProp)\n\timpl.calcSelfCost(g)\n\timpl.setCumCost(impl.getSelfCost())\n\tchildImpl := implGroup(g, newReqPhysProp, costLimit-impl.getCumCost())\n\timpl.setChild(0, childImpl)\n\timpl.setCumCost(impl.getCumCost() + childImpl.getCumCost())\n\tif groupImpl.getCumCost() > impl.getCumCost() {\n\t\tgroupImpl = impl\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: CTE Storage Interface - Go\nDESCRIPTION: Interface definition for CTE storage implementation with reference counting and concurrency support\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntype Storage interface {\n    OpenAndRef() bool\n    DerefAndClose() error\n    Add(chk *chunk.Chunk) error\n    GetChunk(chkdIdx int) (*chunk.Chunk, error)\n    Lock()\n    Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: RowTableSegment Structure Definition in Go for Hash Join V2\nDESCRIPTION: Go struct definition for rowTableSegment which stores the actual row data, hash values, row locations, and valid join key positions for hash table building.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-11-hash-join-v2.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype rowTableSegment struct {\n    rawData         []byte           // the chunk of memory to save the row data\n    hashValues      []uint64         // the hash value of each rows\n    rowLocations    []unsafe.Pointer // the start address of each row\n    validJoinKeyPos []int            // the pos of rows that need to be inserted into hash table, used in hash table build\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Session Management Methods in Go\nDESCRIPTION: Implementation of methods to handle internal session lifecycle, including storing and deleting sessions from the session manager during pool operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-09-optimize-gc-for-internal-transaction.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *session) getInternalSession(execOption sqlexec.ExecOption) (*session, func(), error) {\n\ttmp, err := s.sysSessionPool().Get()\n\tse := tmp.(*session)\n\t// Put the internal session to the map of SessionManager\n\tinfosync.StoreInternalSession(se)\n\treturn se, func() {\n\t\t// Delete the internal session to the map of SessionManager\n\t\tinfosync.DeleteInternalSession(se)\n\t\ts.sysSessionPool().Put(tmp)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with TTL in CockroachDB\nDESCRIPTION: This SQL snippet demonstrates how to create a table with TTL (Time-to-Live) feature in CockroachDB. It creates an 'events' table with an auto-generated UUID as the primary key, a description field, and an inserted_at timestamp. The TTL is set to expire after 3 months.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE events (\n  id UUID PRIMARY KEY default gen_random_uuid(),\n  description TEXT,\n  inserted_at TIMESTAMP default current_timestamp()\n) WITH (ttl_expire_after = '3 months');\n```\n\n----------------------------------------\n\nTITLE: Deleting from Reference Table with Foreign Key in SQL\nDESCRIPTION: Shows the behavior of deleting from a reference table with a foreign key constraint, demonstrating the affected rows count.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (id int key,a int, index(a));\ncreate table t2 (id int key,a int, foreign key fk(a) references t1(id) ON DELETE CASCADE);\ninsert into t1 values (1, 1);\ninsert into t2 values (1, 1);\n\n> delete from t1 where id=1;\nQuery OK, 1 row affected\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward Key Rewriting in Rust\nDESCRIPTION: A Rust function that applies rewrite rules to transform keys from their original format to their new format by replacing the old prefix with a new prefix.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/docs/cn/2019-09-09-BR-key-rewrite-disscussion.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn rewrite_key(rules: &[RewriteRule], key: &[u8]) -> Cow<[u8]> {\n    for rule in rules {\n        if key.starts_with(rule.old_prefix) {\n            return Cow::Owned(rule.new_prefix + key[rule.old_prefix.len()..])\n        }\n    }\n    Cow::Borrowed(key)\n}\n```\n\n----------------------------------------\n\nTITLE: ExprIter and Pattern Data Structures in Go\nDESCRIPTION: ExprIter is used to enumerate all equivalent expressions in a group according to a pattern, while Pattern defines a tree-like structure for matching transformation rules.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// ExprIter enumerates all the equivalent expressions in the group according to\n// the expression pattern.\ntype ExprIter struct {\n\t// The group and ordinal field solely identify a group expression.\n\tgroup   *Group\n\tordinal int\n\n\t// operand is the node of the pattern tree. The operand type of the group\n\t// expression must be matched with it, otherwise the group expression is\n\t// ignored during the iteration.\n\toperand int\n\n\t// children is used to iterate the child expressions.\n\tchildren *ExprIter\n}\n\ntype Pattern struct {\n\toperand  int\n\tchildren []*Pattern\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Statistics in CockroachDB (Go)\nDESCRIPTION: This snippet shows how CockroachDB triggers a statistics refresh. It calculates target rows based on stale row fraction and minimum stale rows, then generates a random number to determine if a refresh is needed. If so, it executes a CREATE STATISTICS command.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntargetRows := int64(rowCount*statsFractionStaleRows) + statsMinStaleRows\nif rand.Int63n(targetRows) == 0 {\n    sqlQuery := fmt.Sprintf(\"CREATE STATISTICS %s FROM [%d] WITH OPTIONS THROTTLING %% AS OF SYSTEM TIME '-%s'\", ...)\n    // Execute SQL through CRDB job framework\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Query Block Counting in SQL Views vs Subqueries\nDESCRIPTION: Example demonstrating how query block counting in views differs from subqueries, which creates compatibility challenges if adopting Oracle's approach directly.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-22-view-hint.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE VIEW v AS\nSELECT {SEL$2} * FROM t;\n\nSELECT {SEL$1} * FROM v JOIN (select {SEL$3} a from t1) t2 on v.a = t2.a;\n```\n\n----------------------------------------\n\nTITLE: Defining AggFunc Interface for New Aggregate Function Framework in Go\nDESCRIPTION: Interface definition for the new aggregate function framework that uses unsafe.Pointer for flexible partial result storage and provides batch processing capabilities for improved performance.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-07-01-refactor-aggregate-framework.md#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype AggFunc interface {\n    AllocPartialResult() PartialResult\n    ResetPartialResult(pr PartialResult)\n    UpdatePartialResult(pr PartialResult)\n    AppendFinalResult2Chunk(pr PartialResult, chk *Chunk)\n    MergePartialResult(dst, src PartialResult)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Handle Interface in Go for TiDB\nDESCRIPTION: Definition of the Handle interface to abstract row identification in TiDB. The interface provides methods for handling both integer and non-integer primary keys, with two concrete implementations: IntHandle and CommonHandle.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage kv\n// Handle is the ID of a row.\ntype Handle interface {\n   // IsInt returns if the handle type is int64.\n   IsInt() bool\n   // IntValue returns the int64 value if IsInt is true, it panics if IsInt returns false.\n   IntValue() int64\n   // Next returns the minimum handle that is greater than this handle.\n   Next() Handle\n   // Equal returns if the handle equals to another handle, it panics if the types are different.\n   Equal(h Handle) bool\n   // Compare returns the comparison result of the two handles, it panics if the types are different.\n   Compare(h Handle) int\n   // Encoded returns the encoded bytes.\n   Encoded() []byte\n   // Len returns the length of the encoded bytes.\n   Len() int\n   // NumCols returns the number of columns of the handle,\n   NumCols() int\n   // EncodedCol returns the encoded column value at the given column index.\n   EncodedCol(idx int) []byte\n   // String implements the fmt.Stringer interface.\n   String() string\n}\n\n// IntHandle implements the Handle interface for the int64 type handle.\ntype IntHandle int64\n\n// CommonHandle implements the Handle interface for non-int64 type handle.\ntype CommonHandle struct {\n   encoded       []byte\n   colEndOffsets []uint16\n}\n\n// HandleMap is the map for Handle.\ntype HandleMap struct {\n   ints map[int64]interface{}\n   strs map[string]strHandleVal\n}\n\ntype strHandleVal struct {\n   h   Handle\n   val interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Test Schema and SQL for DNF Performance Evaluation\nDESCRIPTION: Test setup with table schema and SQL queries used to evaluate the performance of the proposed multi-index access for disjunctive normal form (DNF) conditions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nTable Schema:\n\tCREATE TABLE T200(a int, b int, c int); \n\tCREATE INDEX T200a on T2OO(a);\n\tCREATE INDEX T200b on T200(b);\n\nTest SQL Form:\n\tSELECT * FROM T200 WHERE a < $1 OR b > $2;\n```\n\n----------------------------------------\n\nTITLE: Creating Timer Client with Memory Store in Go\nDESCRIPTION: Demonstrates how to create a basic timer client using an in-memory store implementation. This example shows the minimal setup required for testing purposes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/pingcap/tidb/timer/api\"\n)\n\nfunc main() {\n\tstore := api.NewMemoryTimerStore()\n\tclient := api.NewDefaultTimerClient(store)\n\tfmt.Println(client.GetDefaultNamespace())\n}\n```\n\n----------------------------------------\n\nTITLE: Store Label Configuration Example\nDESCRIPTION: Example of store label configuration for placement constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n[server]\nlabels = \"region=us-east-1,rack=rack0,disk=hdd\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Column Pool Structure in Markdown\nDESCRIPTION: A markdown image reference showing the structure of the proposed column pool, including fixed-length and variable-length columns organized into shards.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-22-the-column-pool.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![the column pool](./imgs/the-column-pool.png)\n```\n\n----------------------------------------\n\nTITLE: Proposed PhysicalIndexMergeLookUpReader Execution Plan Structure\nDESCRIPTION: Example execution plan showing how the new operator would handle multiple index access for a query with multiple conditions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPhysicalIndexMergeLookUpReader(IndexMergeIntersect)\n\tIndexScan(t1a)\n\tIndexScan(t1b)\n\tIndexScan(t1c)\n\tTableScan\n```\n\n----------------------------------------\n\nTITLE: Defining Session Wrapper Structure in Go\nDESCRIPTION: Defines the Session structure that wraps the internal session. This wrapper provides controlled access to the internal session and allows for additional checks to prevent misuse after the session has been returned to the pool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Session is public to callers.\ntype Session struct {\n    internal *session\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Pool Get and Put Methods in Go\nDESCRIPTION: Implementation of the get and put methods that handle session registration and unregistration. The get method retrieves a session from the pool and registers it, while the put method resets the session state and unregisters it before returning it to the pool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Pool) get() (*Session, error) {\n    // get a session from the pool\n    se, err := getFromPool()\n    if err != nil {\n        return nil, err\n    }\n    // register the internal session to the map\n    infosync.StoreInternalSession(se.GetSessionContext())\n    return se, nil\n}\n\nfunc (p *Pool) put(s *Session) {\n    // rollback the session first to reset the internal state.\n    s.Rollback()\n    // unregister the internal session from the map\n    infosync.DeleteInternalSession(s.GetSessionContext())\n    // put the session back to the pool\n    p.putToPool(s)\n}\n```\n\n----------------------------------------\n\nTITLE: Show Placement Examples\nDESCRIPTION: Examples demonstrating various uses of SHOW PLACEMENT command including filtering policies and database-specific placement information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW PLACEMENT;\nSHOW PLACEMENT LIKE 'POLICY%';\nSHOW PLACEMENT FOR DATABASE test;\n```\n\n----------------------------------------\n\nTITLE: Setting Request Source Type Session Variable in SQL\nDESCRIPTION: SQL command to set the tidb_request_source_type session variable, which is used to tag SQL-based tasks for background task control.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET @@tidb_request_source_type = \"lightning\";\n```\n\n----------------------------------------\n\nTITLE: Querying PD Scheduler Logs in SQL\nDESCRIPTION: This SQL query retrieves scheduler-related logs from the PD (Placement Driver) component of a TiDB cluster.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cluster_log where type='pd' and content like '%scheduler%';\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links in TiDB Design Document\nDESCRIPTION: Demonstrates how to create markdown links to various TiDB-related resources, including issue creation, tracking issues, pull requests, and design documents.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[creating an issue for discussion](https://github.com/pingcap/tidb/issues/new/choose)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[create a tracking issue](https://github.com/pingcap/tidb/issues/new/choose)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Its tracking issue: https://github.com/pingcap/tidb/issues/18032\n- Its pull request: https://github.com/pingcap/tidb/pull/18982\n- Its design document: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md\n```\n\n----------------------------------------\n\nTITLE: Building Executable Aggregate Functions in TiDB\nDESCRIPTION: The Build() function creates an executable aggregate function based on function description and output column position, optimizing for specific input types and states.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-07-01-refactor-aggregate-framework.md#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nBuild(aggFuncDesc *aggregation.AggFuncDesc, ordinal int) AggFunc\n```\n\n----------------------------------------\n\nTITLE: Defining TableInfo and FKInfo Structures in Go for TiDB Foreign Key Implementation\nDESCRIPTION: This snippet shows the modifications to the TableInfo structure to support foreign key constraints, including the addition of a ForeignKeys field and MaxForeignKeyID for ID allocation. The FKInfo structure stores metadata about foreign key constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// TableInfo provides meta data describing a DB table.\ntype TableInfo struct {\n    ...\n    ForeignKeys         []*FKInfo            `json:\"fk_info\"`\n    // MaxFKIndexID uses to allocate foreign key ID.\n    MaxForeignKeyID     int64                `json:\"max_fk_id\"`\n    ...\n}\n\n// FKInfo provides meta data describing a foreign key constraint.\ntype FKInfo struct {\n    ID          int64       `json:\"id\"`\n    Name        CIStr       `json:\"fk_name\"`\n    RefSchema   CIStr       `json:\"ref_schema\"`\n    RefTable    CIStr       `json:\"ref_table\"`\n    RefCols     []CIStr     `json:\"ref_cols\"`\n    Cols        []CIStr     `json:\"cols\"`\n    OnDelete    int         `json:\"on_delete\"`\n    OnUpdate    int         `json:\"on_update\"`\n    State       SchemaState `json:\"state\"`\n    Version     int         `json:\"version\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search Query Syntax in SQL\nDESCRIPTION: SQL syntax for querying using vector similarity search with the VEC_COSINE_DISTANCE function. The query demonstrates how to retrieve the top 5 most similar vectors.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM foo\nORDER BY VEC_COSINE_DISTANCE(data, '[3,1,2]')\nLIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Example Test Schema and SQL for CNF Performance Evaluation\nDESCRIPTION: Test setup with table schema and SQL queries used to evaluate the performance of the proposed multi-index access for conjunctive normal form (CNF) conditions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nTable Schema:\n\tCREATE TABLE T200M(c1 int, c2 int, c3 int, c4 int, c5 int, c6 int, c7 int, c8 int);\n\tCREATE INDEX T200Ma on T200M(a);\n\tCREATE INDEX T200Mb on T200M(b);\n\nTest SQL Form:\t\n\tCNF-1\n\t\tSELECT * FROM T200M WHERE C1 < $1 AND C2 > $2;\n\tCNF-2 \n\t\tSELECT * FROM T200M WHERE C1 < $3 AND C2 < $4;\n```\n\n----------------------------------------\n\nTITLE: Adding KVReadTimeout Field to copTask Struct in Go\nDESCRIPTION: Modification to the copTask struct to include a KVReadTimeout field. This enables configurable timeouts for coprocessor tasks in addition to the Get and BatchGet operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype copTask struct {\n\t...\n\tKVReadTimeout: Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Manifest Struct in Go for TiDB Plugins\nDESCRIPTION: This code snippet defines the base Manifest struct that contains common metadata and lifecycle methods for all TiDB plugins. It includes fields for plugin identification, versioning, dependencies, configuration, and lifecycle hooks.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Manifest struct {\n    Kind           Kind\n    Name           string\n    Description    string\n    Version        uint16\n    RequireVersion map[string]uint16\n    License        string\n    BuildTime      string\n    SysVars        map[string]*variable.SysVar\n    Validate       func(ctx context.Context, manifest *Manifest) error\n    OnInit         func(ctx context.Context) error\n    OnShutdown     func(ctx context.Context) error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Pool Structure and Interface in Go\nDESCRIPTION: Defines the basic structure of the enhanced session pool and its core methods including get, put, and WithSession. These methods help manage the lifecycle of internal system sessions, ensuring they are properly handled and returned to the pool after use.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2025-03-17-sys-session-manage-enhancement.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Pool struct {\n    ...\n}\n\nfunc (p *Pool) get() (*Session, error) {\n    ...\n}\n\nfunc (p *Pool) put(s *Session) {\n    ...\n}\n\nfunc (p *Pool) WithSession(func(*Session) error) error {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Database with Foreign Key References in SQL\nDESCRIPTION: Shows the rejection of a DROP DATABASE command when foreign_key_checks is ON and tables in the database have foreign key references.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n> drop database test;\n(3730, \"Cannot drop table 't1' referenced by a foreign key constraint 't2_ibfk_1' on table 't2'.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Session-Level Stale Read in TiDB\nDESCRIPTION: Shows how to enable stale read at session level with a maximum staleness tolerance setting.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n// enable stale read with max tolerant 5 seconds ago in session\nSET @@tidb_read_staleness='-5';\nselect * from t where id = 1;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Late Materialization in MySQL\nDESCRIPTION: This MySQL example demonstrates how late materialization is applied in a query execution plan. It shows the push-down of a lightweight filter condition (LIKE) while keeping a heavier condition (FUNC) at a higher level.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-06-support-late-materialization.md#2025-04-18_snippet_1\n\nLANGUAGE: mysql\nCODE:\n```\nSET @@tidb_enable_late_materialization=ON;\nEXPLAIN SELECT RegionID, CounterID, TraficSourceID, SearchEngineID, AdvEngineID FROM hits WHERE URL LIKE \"%google%\"  AND FUNC(SearchPhrase) > 0;\n```\n\n----------------------------------------\n\nTITLE: MySQL Foreign Key MATCH Behavior Example\nDESCRIPTION: Demonstrates MySQL's handling of composite foreign keys and NULL values in foreign key columns. Shows that MySQL allows partial NULL values in foreign key columns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1 (i int, a int,b int, index(a,b)) ;\ncreate table t (a int, b int, foreign key fk_a(a,b) references test.t1(a,b));\n\ntest> insert into t values (null,1);\nQuery OK, 1 row affected\ntest> insert into t values (null,null);\nQuery OK, 1 row affected\ntest> insert into t values (1,null);\nQuery OK, 1 row affected\n```\n\n----------------------------------------\n\nTITLE: SQL Query Plan Comparison - Before Optimization\nDESCRIPTION: Example showing the execution plan of a left join query before applying the proposed constraint propagation optimizations. The plan shows a basic left join operation between tables t1 and t2.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-07-22-enhance-propagations.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTiDB(localhost:4000) > desc select * from t1 left join t2 on t1.a=t2.a where t1.a in (12, 13);\n+-------------------------+----------+------+-------------------------------------------------------------------------+\n| id                      | count    | task | operator info                                                           |\n+-------------------------+----------+------+-------------------------------------------------------------------------+\n| HashLeftJoin_7          | 25.00    | root | left outer join, inner:TableReader_12, equal:[eq(test.t1.a, test.t2.a)] |\n| â”œâ”€TableReader_10        | 20.00    | root | data:Selection_9                                                        |\n| â”‚ â””â”€Selection_9         | 20.00    | cop  | in(test.t1.a, 12, 13)                                                   |\n| â”‚   â””â”€TableScan_8       | 10000.00 | cop  | table:t1, range:[-inf,+inf], keep order:false, stats:pseudo             |\n| â””â”€TableReader_12        | 10000.00 | root | data:TableScan_11                                                       |\n|   â””â”€TableScan_11        | 10000.00 | cop  | table:t2, range:[-inf,+inf], keep order:false, stats:pseudo             |\n+-------------------------+----------+------+-------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining ReferredFKInfo Structure for Managing References in TiDB\nDESCRIPTION: This snippet defines the ReferredFKInfo structure which is used to track foreign key references from child tables. This information is needed when executing UPDATE/DELETE operations on referenced tables.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ReferredFKInfo provides the referred foreign key in the child table.\ntype ReferredFKInfo struct {\n    Cols          []CIStr `json:\"cols\"`\n    ChildSchema   CIStr   `json:\"child_schema\"`\n    ChildTable    CIStr   `json:\"child_table\"`\n    ChildFKName   CIStr   `json:\"child_fk\"`\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for Constraint Propagation\nDESCRIPTION: Example SQL query demonstrating how constraint propagation works with table joins and where clauses, showing potential overhead scenarios.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-07-22-enhance-propagations.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t0, t1 on t0.a = t1.a where t1.a < 5\n```\n\n----------------------------------------\n\nTITLE: SQL Query Execution Plan with Functional Dependency Analysis\nDESCRIPTION: The execution plan result for the example query showing how the query is processed. It displays the operator tree that will be analyzed for functional dependencies, including projections, aggregations, joins, and table scans.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-16-functional-dependency.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> explain  select t1.a, count(t2.b), t1.c  from t1 join t2 on t2.a=t1.a where t1.c=1 group by t2.a;\n+----------------------------------+----------+-----------+---------------+----------------------------------------------------------------------------------------------------------------------------------+\n| id                               | estRows  | task      | access object | operator info                                                                                                                    |\n+----------------------------------+----------+-----------+---------------+----------------------------------------------------------------------------------------------------------------------------------+\n| Projection_9                     | 12.49    | root      |               | test.t1.a, Column#7, test.t1.c                                                                                                   |\n| â””â”€HashAgg_10                     | 12.49    | root      |               | group by:test.t2.a, funcs:count(test.t2.b)->Column#7, funcs:firstrow(test.t1.a)->test.t1.a, funcs:firstrow(test.t1.c)->test.t1.c |\n|   â””â”€HashJoin_12                  | 12.49    | root      |               | inner join, equal:[eq(test.t1.a, test.t2.a)]                                                                                     |\n|     â”œâ”€TableReader_15(Build)      | 9.99     | root      |               | data:Selection_14                                                                                                                |\n|     â”‚ â””â”€Selection_14             | 9.99     | cop[tikv] |               | eq(test.t1.c, 1), not(isnull(test.t1.a))                                                                                         |\n|     â”‚   â””â”€TableFullScan_13       | 10000.00 | cop[tikv] | table:t1      | keep order:false, stats:pseudo                                                                                                   |\n|     â””â”€TableReader_18(Probe)      | 9990.00  | root      |               | data:Selection_17                                                                                                                |\n|       â””â”€Selection_17             | 9990.00  | cop[tikv] |               | not(isnull(test.t2.a))                                                                                                           |\n|         â””â”€TableFullScan_16       | 10000.00 | cop[tikv] | table:t2      | keep order:false, stats:pseudo                                                                                                   |\n+----------------------------------+----------+-----------+---------------+----------------------------------------------------------------------------------------------------------------------------------+\n9 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Query for Physical Property Matching\nDESCRIPTION: Demonstrates how index matching with physical properties can be improved when handling constant equality conditions in ORDER BY clauses.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-07-rule-based-index-selection.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t(a INT, b INT, c INT, d INT, INDEX idx_a_b_c(a, b, c))\nSELECT * FROM t WHERE b = 4 ORDER BY a, c;\n```\n\n----------------------------------------\n\nTITLE: Explaining Rollup Query Execution Plan in TiDB\nDESCRIPTION: This SQL query and its execution plan show how TiDB currently handles ROLLUP queries, illustrating the use of the Expand operator for data replication and multi-dimensional aggregation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nMySQL [test]> explain SELECT a, b, sum(1) FROM t GROUP BY a, b With Rollup;\n```\n\n----------------------------------------\n\nTITLE: Priority Score Calculation Formula in Mathematical Notation\nDESCRIPTION: Mathematical formula for calculating priority score based on change ratio (60%), table size (10%), and analysis interval (30%), plus special event modifiers. Uses logarithmic transformations to normalize values.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n0.6 \\times \\log_{10}(1 + \\text{Change Ratio}) + 0.1 \\times (1 - \\log_{10}(1 + \\text{Table Size})) + 0.3 \\times \\log_{10}(1 + \\sqrt{\\text{Analysis Interval}}) + special\\_event[event]\n```\n\n----------------------------------------\n\nTITLE: Implementing GC Safepoint Calculation Function Signature in Go\nDESCRIPTION: Function signature for ReportMinStartTS that calculates the minimum start timestamp for ongoing transactions used in garbage collection safepoint determination.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-09-optimize-gc-for-internal-transaction.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (is *InfoSyncer) ReportMinStartTS(store kv.Storage) {}\n```\n\n----------------------------------------\n\nTITLE: Updating Prewrite Protocol for Pessimistic Actions\nDESCRIPTION: This Protobuf snippet shows the updated PrewriteRequest message with a new PessimisticAction enum. It extends the existing is_pessimistic_lock field to support constraint checks during prewrite for keys that don't get locked ahead of time in pessimistic transactions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-08-04-pessimistic-lazy-constraint-check.md#2025-04-18_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nmessage PrewriteRequest {\n\tenum PessimisticAction {\n\t\t// The key needn't be locked and no extra write conflict checks are needed.\n\t\tSKIP_PESSIMISTIC_CHECK = 0;\n\t\t// The key should have been locked at the time of prewrite.\n\t\tDO_PESSIMISTIC_CHECK = 1;\n\t\t// The key doesn't need a pessimistic lock. But we need to do data constraint checks.\n\t\tDO_CONSTRAINT_CHECK = 2;\n\t}\n    // For pessimistic transaction, some mutations don't need to be locked, for example, non-unique index key.\n    repeated PessimisticAction pessimistic_actions = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to Column Info Version in Go\nDESCRIPTION: Code reference showing the existing ColumnInfoVersion implementation in TiDB parser model.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nColumnInfoVersion\n```\n\n----------------------------------------\n\nTITLE: Modifying TiDB Planner for Dynamic Privilege Logging\nDESCRIPTION: A patch to TiDB's planner that adds logging for dynamic privilege grant attempts. This helps confirm parser support for dynamic privileges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ndiff --git a/planner/core/planbuilder.go b/planner/core/planbuilder.go\nindex 90d5b9e82..d1644ee83 100644\n--- a/planner/core/planbuilder.go\n+++ b/planner/core/planbuilder.go\n@@ -2298,6 +2298,11 @@ func collectVisitInfoFromGrantStmt(sctx sessionctx.Context, vi []visitInfo, stmt\n \n        var allPrivs []mysql.PrivilegeType\n        for _, item := range stmt.Privs {\n+\n+               if item.Priv == mysql.ExtendedPriv {\n+                       fmt.Printf(\"### Attempting to set DYNAMIC privilege: %s\\n\", item.Name)\n+               }\n+\n                if item.Priv == mysql.AllPriv {\n                        switch stmt.Level.Level {\n                        case ast.GrantLevelGlobal:\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Shell Script Usage\nDESCRIPTION: Command-line usage instructions for run-tests.sh script that executes TiDB integration tests with various options for building, running specific tests, and configuring paths.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ./run-tests.sh [options]\n\n    -h: Print this help message.\n\n    -s <tidb-server-path>: Use tidb-server in <tidb-server-path> for testing.\n                           eg. \"./run-tests.sh -s ./integrationtest_tidb-server\"\n\n    -b <y|Y|n|N>: \"y\" or \"Y\" for building test binaries [default \"y\" if this option is not specified].\n                  \"n\" or \"N\" for not to build.\n                  The building of tidb-server will be skiped if \"-s <tidb-server-path>\" is provided.\n\n    -r <test-name>|all: Run tests in file \"t/<test-name>.test\" and record result to file \"r/<test-name>.result\".\n                        \"all\" for running all tests and record their results.\n\n    -t <test-name>: Run tests in file \"t/<test-name>.test\".\n                    This option will be ignored if \"-r <test-name>\" is provided.\n                    Run all tests if this option is not provided.\n\n    -v <vendor-path>: Add <vendor-path> to $GOPATH.\n\n    -p <portgenerator-path>: Use port generator in <portgenerator-path> for generating port numbers.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Statistics Recompilation Threshold in SQL Server (SQL)\nDESCRIPTION: SQL Server uses a dynamic threshold for statistics recompilation based on table cardinality. This snippet shows the SQL representation of the threshold calculation logic for tables with more than 500 rows.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT MIN(500 + (0.20 * n), SQRT(1000 * n)) AS recompilation_threshold\nFROM (\n    SELECT 2000000 AS n\n) AS table_cardinality;\n```\n\n----------------------------------------\n\nTITLE: Executing Full Backup with AWS EBS in TiDB\nDESCRIPTION: This command initiates a full backup of a TiDB cluster using AWS EBS volumes. It specifies the PD address, S3 bucket for backup storage, and a JSON file containing volume information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbackup full --type=aws-ebs --pd \"172.16.2.1:2379\" -s \"s3:/bucket/backup_folder\" --volumes-file=backup.json\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policies with Role Count\nDESCRIPTION: Examples of creating placement policies with specified follower counts in list format. Shows how to define primary regions and follower constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLACEMENT POLICY `standardplacement1` PRIMARY_REGION=\"us-east-1\" REGIONS=\"us-east-1,us-east-2\" FOLLOWERS=4;\nCREATE PLACEMENT POLICY `standardplacement2` LEADER_CONSTRAINTS=\"[+region=us-east-1]\"  FOLLOWER_CONSTRAINTS=\"[+region=us-east-2]\" FOLLOWERS=4;\n```\n\n----------------------------------------\n\nTITLE: Building BR from Source for TiDB\nDESCRIPTION: Commands to build BR binary and run tests. This requires navigating to the tidb directory and using make commands. BR supports Go version 1.16 or higher.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../tidb\n$ make build_br\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Privilege Verification in TiDB Authentication Plugin\nDESCRIPTION: This code snippet shows the logic for verifying dynamic privileges in TiDB's authentication plugin. It combines the existing MySQL dynamic privilege check with the custom plugin's verification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc VerifyDynamicPrivilege(mysqlPriv *MySQLPrivilege, user string) bool {\n\treturn mysqlPriv.RequestDynamicVerification(...) && getPluginForUser(user).RequestDynamicVerification(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Log-based Backup Task Status in TiDB\nDESCRIPTION: Command for checking the status of an ongoing log-based backup task across different TiKV stores. It displays the next backup timestamp for each store or error conditions if applicable.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ br stream status task_name -u 10.0.0.1:2379\n\nChecking status of <task_name>...\n\nStore 1: error, task completed or not found.\nStore 2: ok (next_backup_ts =900000000).\nStore 3: ok (next_backup_ts =911111111).\nStore 8: ok (next_backup_ts =922222222).\n```\n\n----------------------------------------\n\nTITLE: Initializing Backup Task in TiKV for Rust\nDESCRIPTION: This snippet demonstrates how TiKV initializes a new backup task. It iterates through regions, checks for leadership, and sets the NextBackupTS key for each region where the current node is the leader.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfor region in self.regions {\n    if self.is_leader(region.id) {\n        put!(\n            \"NextBackupTS:({task.name}, {self.store_id}, {region_id})\",\n            task.start_ts,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Insecure Root User with MySQL Native Password Authentication in TiDB\nDESCRIPTION: SQL statements that create a root user with no password and grant all privileges during insecure initialization. This represents the current default behavior.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-29-secure-bootstrap.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'root'@'%' IDENTIFIED WITH 'mysql_native_password' AS '' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Mutex Lock in Go\nDESCRIPTION: Simple implementation of a mutex lock using the put-and-verify transaction system. Demonstrates basic locking functionality without additional verification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TryLockRemote(ctx context.Context, storage ExternalStorage, path) error {\n\twriter := ExclusiveWrite{\n\t\tTarget: path,\n\t\tContent: func(_ uuid.UUID) []byte {\n\t\t\treturn []byte(\"I got the lock :D\")\n\t\t},\n\t}\n\n\t_, err = writer.CommitTo(ctx, storage)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TiDB Cluster Log Table Structure\nDESCRIPTION: Shows the structure of the cluster_log system table in the information_schema database, displaying field definitions including type, address, time, level, and message columns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nmysql> use information_schema;\nDatabase changed\n\nmysql> desc cluster_log;\n+---------+-------------+------+------+---------+-------+\n| Field   | Type        | Null | Key  | Default | Extra |\n+---------+-------------+------+------+---------+-------+\n| type    | varchar(16) | YES  |      | NULL    |       |\n| address | varchar(32) | YES  |      | NULL    |       |\n| time    | varchar(32) | YES  |      | NULL    |       |\n| level   | varchar(8)  | YES  |      | NULL    |       |\n| message | text        | YES  |      | NULL    |       |\n+---------+-------------+------+------+---------+-------+\n5 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Dropping Index Used by Foreign Key in SQL\nDESCRIPTION: Illustrates that dropping an index used by a foreign key constraint is rejected, even when foreign_key_checks is disabled.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n> set @@foreign_key_checks=0; -- Even disable foreign_key_checks, you still can't drop the index used for foreign key constrain.\nQuery OK, 0 rows affected\n> alter table t2 drop index fk;\n(1553, \"Cannot drop index 'fk': needed in a foreign key constraint\")\n```\n\n----------------------------------------\n\nTITLE: Creating Timer with Interval Schedule in Go\nDESCRIPTION: Shows how to create a timer with an hourly interval schedule, including specification of key, schedule policy, hook class, and additional metadata.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntimer, err := client.CreateTimer(ctx, api.TimerSpec{\n    Key:             \"/your/timer/key\",\n    SchedPolicyType: api.SchedEventInterval,\n    SchedPolicyExpr: \"1h\",\n    HookClass:       \"your.hook.class.name\",\n    Watermark:       time.Now(),\n    Data:            []byte(\"yourdata\"),\n    Enable:          true,\n})\n\nif err != nil {\n    // handle err\n}\n\nfmt.Printf(\"created timer id: %s\\n\", timer.ID)\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Hardware Information in TiDB\nDESCRIPTION: Example SQL query demonstrating how to use the proposed cluster_hardware system table to retrieve hardware information for all nodes in a TiDB cluster. The query shows various hardware details such as CPU, memory, network, and disk information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> use information_schema;\nDatabase changed\n\nmysql> select * from cluster_hardware\n+------+-----------------+----------+----------+-------------+--------+\n| TYPE | ADDRESS         | HW_TYPE  | HW_NAME  | KEY         | VALUE  |\n+------+-----------------+----------+----------+-------------+--------+\n| tikv | 127.0.0.1:20160 | cpu      | cpu-1    | frequency   | 3.3GHz |\n| tikv | 127.0.0.1:20160 | cpu      | cpu-2    | frequency   | 3.6GHz |\n| tikv | 127.0.0.1:20160 | cpu      | cpu-1    | core        | 40     |\n| tikv | 127.0.0.1:20160 | cpu      | cpu-2    | core        | 48     |\n| tikv | 127.0.0.1:20160 | cpu      | cpu-1    | vcore       | 80     |\n| tikv | 127.0.0.1:20160 | cpu      | cpu-2    | vcore       | 96     |\n| tikv | 127.0.0.1:20160 | network  | memory   | capacity    | 256GB  |\n| tikv | 127.0.0.1:20160 | network  | lo0      | bandwidth   | 10000M |\n| tikv | 127.0.0.1:20160 | network  | eth0     | bandwidth   | 1000M  |\n| tikv | 127.0.0.1:20160 | disk     | /dev/sda | capacity    | 4096GB |\n+------+-----------------+----------+----------+-------------+--------+\n10 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining AuthPlugin Struct for TiDB Authentication Plugins in Go\nDESCRIPTION: This code snippet defines the AuthPlugin struct, which contains attributes and functions required for implementing a custom authentication plugin in TiDB. It includes methods for user authentication, password handling, and privilege verification.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// AuthPlugin contains attributes needed for an authentication plugin.\ntype AuthPlugin struct {\n    // Name is the name of the auth plugin. It will be registered as a system variable in TiDB which can be used inside the `CREATE USER ... IDENTIFIED WITH 'plugin_name'` statement.\n    Name string\n\t\n    // RequiredClientSidePlugin is the name of the client-side plugin required by the server-side plugin. It will be used to check if the client has the required plugin installed and require the client to use it if installed.\n    // The user can require default MySQL plugins such as 'caching_sha2_password' or 'mysql_native_password'. \n    RequiredClientSidePlugin string\n    \n    // AuthenticateUser is called when a client connects to the server as a user and the server authenticates the user.\n    // If an error is returned, the login attempt fails, otherwise it succeeds.\n    // authUser: the username in the connect attempt\n    // storedPwd: the user's password stored in mysql.user table\n    // inputPwd (authentication): the user's password passed in from the connection attempt in bytes\n    // salt: randomly generated salt for the current connection\n    // connState: the TLS connection state (contains the TLS certificate) if client is using TLS. It will be nil if the client is not using TLS\n    // authConn: interface for the plugin to communicate with the client\n    AuthenticateUser func(authUser string, storedPwd string, inputPwd []byte, salt []byte, connState *tls.ConnectionState, authConn conn.AuthConn) error\n    \n    // GenerateAuthString is a function for user to implement customized ways to encode the password (e.g. hash/salt/clear-text). The returned string will be stored as the encoded password in the mysql.user table.\n    // If the input password is considered as invalid, this should return an error.\n    // pwd: User's input password in CREATE/ALTER USER statements in clear-text\n    GenerateAuthString func(pwd string) (string, bool)\n    \n    // ValidateAuthString checks if the password hash stored in the mysql.user table or passed in from `IDENTIFIED AS` is valid.\n    // This is called when retrieving an existing user to make sure the password stored is valid and not modified and make sure user is passing a valid password hash in `IDENTIFIED AS`.\n    // pwdHash: hash of the password stored in the internal user table\n    ValidateAuthString func(pwdHash string) bool\n    \n    // VerifyPrivilege is called for each user queries, and serves as an extra check for privileges for the user.\n    // It will only be executed if the user has already been granted the privilege in SQL layer.\n    // Returns true if user has the requested privilege.\n    // activeRoles: list of active MySQL roles for the current user\n    // user: current user's name\n    // host: the host that the user is connecting from\n    // db: the database to check for privilege\n    // table: the table to check for privilege\n    // column: the column to check for privilege (currently just a placeholder in TiDB as column-level privilege is not supported by TiDB yet)\n    // priv: the privilege type of the SQL statement that will be executed\n    // connState: the TLS connection state (contains the TLS certificate) if client is using TLS. It will be nil if the client is not using TLS\n    VerifyPrivilege func(activeRoles []*auth.RoleIdentity, user, host, db, table, column string, priv mysql.PrivilegeType, connState *tls.ConnectionState) bool\n    \n    // VerifyDynamicPrivilege is called for each user queries, and serves as an extra check for dynamic privileges for the user.\n    // It will only be executed if the user has already been granted the dynamic privilege in SQL layer.\n    // Returns true if user has the requested privilege.\n    // activeRoles: list of active MySQL roles for the current user\n    // user: current user's name\n    // host: current user's host\n    // priv: the dynamic privilege required by the user's SQL statement\n    // withGrant: whether the statement to be executed is granting the user privilege for executing GRANT statements\n    // connState: the TLS connection state (contains the TLS certificate) if client is using TLS. It will be nil if the client is not using TLS\n    VerifyDynamicPrivilege func(activeRoles []*auth.RoleIdentity, user, host, privName string, withGrant bool, connState *tls.ConnectionState) bool\n}\n```\n\n----------------------------------------\n\nTITLE: DDL Notifier Table Definition in SQL\nDESCRIPTION: Creates a system table for storing DDL events with support for multi-schema changes and processed status tracking.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mysql.ddl_notifier (\n    ddl_job_id BIGINT,\n    multi_schema_change_id BIGINT COMMENT '-1 if the schema change does not belong to a multi-schema change DDL. 0 or positive numbers representing the sub-job index of a multi-schema change DDL',\n    schema_change JSON COMMENT 'SchemaChange at rest',\n    processed_by_flag BIGINT UNSIGNED DEFAULT 0 COMMENT 'flag to mark which subscriber has processed the event',\n    PRIMARY KEY(ddl_job_id, multi_schema_change_id)\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Need for Shard Column Addition in Go\nDESCRIPTION: Validates whether tidb_shard expressions should be added by checking index structure and conditions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc NeedAddGcColumn4ShardIndex(\n\tcols []*expression.Column,\n\taccessCond []expression.Expression,\n\tcolumnValues []*valueInfo) bool\n```\n\n----------------------------------------\n\nTITLE: BR Restore CLI Commands\nDESCRIPTION: Command-line examples showing how to restore full backups and stream backups using the BR (Backup & Restore) tool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ br restore full -s 's3://bucket/snapshot-path' -u 10.0.5.1:2379\n\n$ br stream restore -u 10.0.5.1:2379 \\\n   -s 's3://bucket/path' \\\n   [--startts 123456789] \\\n   [--endts 987654321] \\\n   [--checksum] \\\n   [-f 'db3.*']\n```\n\n----------------------------------------\n\nTITLE: Initializing Loggers in BR\nDESCRIPTION: Code showing logger initialization in BR's lightning package that calls both TiDB's InitLogger and pingcap/log's InitLogger.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-21-unify-log-library.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Reference to code at: pkg/lightning/log/log.go#L77\n```\n\n----------------------------------------\n\nTITLE: Defining Diagnostic gRPC Service Protocol for TiDB Cluster\nDESCRIPTION: Protocol buffer definition for a gRPC Diagnostics service that provides log searching and server information retrieval capabilities for TiDB cluster components. Includes message types for log levels, search requests/responses, and server information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Diagnostics service for TiDB cluster components.\nservice Diagnostics {\n\t// Searches log in the target node\n\trpc search_log(SearchLogRequest) returns (SearchLogResponse) {};\n\t// Retrieves server info in the target node\n\trpc server_info(ServerInfoRequest) returns (ServerInfoResponse) {};\n}\n\nenum LogLevel {\n\tDebug = 0;\n\tInfo = 1;\n\tWarn = 2;\n\tTrace = 3;\n\tCritical = 4;\n\tError = 5;\n}\n\nmessage SearchLogRequest {\n\tint64 start_time = 1;\n\tint64 end_time = 2;\n\tLogLevel level = 3;\n\tstring pattern = 4;\n\tint64 limit = 5;\n}\n\nmessage SearchLogResponse {\n\trepeated LogMessage messages = 1;\n}\n\nmessage LogMessage {\n\tint64 time = 1;\n\tLogLevel level = 2;\n\tstring message = 3;\n}\n\nenum ServerInfoType {\n\tAll = 0;\n\tHardwareInfo = 1;\n\tSystemInfo = 2;\n\tLoadInfo = 3;\n}\n\nmessage ServerInfoRequest {\n\tServerInfoType tp = 1;\n}\n\nmessage ServerInfoItem {\n\t// cpu, memory, disk, network ...\n    string tp = 1;\n    // eg. network: lo1/eth0, cpu: core1/core2, disk: sda1/sda2\n\tstring name = 1;\n\tstring key = 2;\n\tstring value = 3;\n}\n\nmessage ServerInfoResponse {\n\trepeated ServerInfoItem items = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TiDB Extensions with Multiple Options\nDESCRIPTION: An example of registering an extension with multiple options, including session handler factory and bootstrap SQL. This demonstrates how to configure an extension with various capabilities.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\terr := extension.Register(\n\t\t\"example\",\n\t\textension.WithSessionHandlerFactory(createSessionHandler),\n\t\textension.WithBootstrapSQL(\"CREATE TABLE IF NOT EXISTS mysql.example(a int)\"),\n\t\t// ...\n\t)\n\tterror.MustNil(err)\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Query for Skyline Pruning Improvement\nDESCRIPTION: Example showing how skyline pruning can be improved by considering IndexFilters when comparing indices that both require double scan.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-07-rule-based-index-selection.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t(a INT, b INT, c INT, INDEX idx_b(b), INDEX idx_b_c(b, c));\nSELECT * FROM t WHERE b > 5 and c > 5;\n```\n\n----------------------------------------\n\nTITLE: Placement Policy with Schedule Property\nDESCRIPTION: Example showing how to create a placement policy with a specified schedule strategy for controlling follower distribution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLACEMENT POLICY `standardplacement1` PRIMARY_REGION=\"us-east-1\" REGIONS=\"us-east-1,us-east-2\" FOLLOWERS=4 SCHEDULE=\"EVEN\";\n```\n\n----------------------------------------\n\nTITLE: Example Collation Names\nDESCRIPTION: Examples of collation naming patterns in TiDB and MySQL.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nutf8mb4_general_ci\nutf8mb4_0900_ai_ci\nutf8mb4_np_bin\ntidb_utf8_mb4_general_ci\n```\n\n----------------------------------------\n\nTITLE: Running Manual Tests\nDESCRIPTION: Example commands for running a single test case manually, using TestMultipleTiDB as an example.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/globalkilltest/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd tests/globalkilltest\nmake\ngo test -check.f TestMultipleTiDB -args --pd=<pd client path>\n```\n\n----------------------------------------\n\nTITLE: Detailed Index Value Layout in TiDB\nDESCRIPTION: Comprehensive description of the proposed index value layout in TiDB, including support for various features like common handles, new collations, and global indexes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n// Value layout:\n//\t\t+--New Encoding (with restore data, or common handle, or index is global)\n//\t\t|\n//\t\t|  Layout: TailLen | Options      | Padding      | [IntHandle] | [UntouchedFlag]\n//\t\t|  Length:   1     | len(options) | len(padding) |    8        |     1\n//\t\t|\n//\t\t|  TailLen:       len(padding) + len(IntHandle) + len(UntouchedFlag)\n//\t\t|  Options:       Encode some value for new features, such as common handle, new collations or global index.\n//\t\t|                 See below for more information.\n//\t\t|  Padding:       Ensure length of value always >= 10. (or >= 11 if UntouchedFlag exists.)\n//\t\t|  IntHandle:     Only exists when table use int handles and index is unique.\n//\t\t|  UntouchedFlag: Only exists when index is untouched.\n//\t\t|\n//\t\t|  Layout of Options:\n//\t\t|\n//\t\t|     Segment:             Common Handle                 |     Global Index      | New Collation\n//\t\t|     Layout:  CHandle Flag | CHandle Len | CHandle      | PidFlag | PartitionID | restoreData\n//\t\t|     Length:     1         | 2           | len(CHandle) |    1    |    8        | len(restoreData)\n//\t\t|\n//\t\t|     Common Handle Segment: Exists when unique index used common handles.\n//\t\t|     Global Index Segment:  Exists when index is global.\n//\t\t|     New Collation Segment: Exists when new collation is used and index contains non-binary string.\n//\t\t|\n//\t\t+--Old Encoding (without restore data, integer handle, local)\n//\n//\t\t   Layout: [Handle] | [UntouchedFlag]\n//\t\t   Length:   8      |     1\n//\n//\t\t   Handle:        Only exists in unique index.\n//\t\t   UntouchedFlag: Only exists when index is untouched.\n//\n//\t\t   If neither Handle nor UntouchedFlag exists, value will be one single byte '0' (i.e. []byte{'0'}).\n//\t\t   Length of value <= 9, use to distinguish from the new encoding.\n//\n```\n\n----------------------------------------\n\nTITLE: Creating SCHEMA_UNUSED_INDEXES View in SQL\nDESCRIPTION: SQL statement to create a view that identifies unused indexes by joining index information with usage statistics and filtering for zero or null query counts.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-30-index-usage-information.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate view information_schema.schema_unused_indexes \nas select i.table_schema as table_schema, i.table_name as table_name, i.index_name as index_name \nfrom mysql.tidb_indexes as i left join mysql.schema_index_usage as u \non i.table_schema=u.table_schema and i.table_name=u.table_name and i.index_name=u.index_name\nwhere u.query_count=0 or u.query_count is null;\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Policy and Table with Follower Constraints in SQL\nDESCRIPTION: This snippet demonstrates how to create a placement policy with follower constraints and apply it to a table. It specifies the number of followers in different regions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PLACEMENT POLICY p1\n\tFOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 2,+region=us-east-2: 1}\";\nCREATE TABLE t1 (a int) PLACEMENT POLICY p1;\n```\n\n----------------------------------------\n\nTITLE: Starting a Log-based Backup Task in TiDB using BR CLI\nDESCRIPTION: Command for initiating a log-based incremental backup task using the BR (Backup & Restore) CLI tool. It specifies a task name, TiDB endpoint, storage location, and optional starting timestamp.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ br stream start [task_name] -u 10.0.0.1:2379 -s 's3://bucket/path' [--start-ts 123456789] ...\n\nStarting task <task_name> from ts=123456789...\n\nStore 1: ok (next_backup_ts =222222222).\nStore 2: ok (next_backup_ts =333333333).\nStore 3: ok (next_backup_ts =444444444).\nStore 8: ok (next_backup_ts =123456789).\n\nStarted!\n```\n\n----------------------------------------\n\nTITLE: Proposed Global Index Key-Value Layout in TiDB\nDESCRIPTION: Describes the proposed encoding scheme for global index key-value pairs in TiDB. The key uses the table ID instead of partition ID, and the value includes both handle and partition ID.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nKey: tableID_indexID_ColumnValues\nValue: handle_partitionID\n```\n\n----------------------------------------\n\nTITLE: Schema Change Handler Interface in Go\nDESCRIPTION: Defines the subscription API for handling schema changes with exactly-once delivery guarantees and error handling.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype SchemaChangeHandler func(ctx context.Context, sctx sessionctx.Context, change SchemaChange) error\n\nvar ErrNotReadyRetryLater = errors.New(...)\n\nfunc RegisterHandler(id int, handler SchemaChangeHandler) {...}\n```\n\n----------------------------------------\n\nTITLE: PredicatePushDown for Shard Index in Go\nDESCRIPTION: Go function that serves as the entry point for adding the tidb_shard expression to query conditions before access conditions are pushed down.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (ds *DataSource) PredicatePushDown(predicates []expression.Expression, opt *logicalOptimizeOp) ([]expression.Expression, LogicalPlan) {\n\tpredicates = expression.PropagateConstant(ds.ctx, predicates)\n\tpredicates = constraint.DeleteTrueExprs(ds, predicates)\n\t// Add tidb_shard() prefix to the condtion for shard index in some scenarios\n\t// TODO: remove it to the place building logical plan\n\tpredicates = ds.AddPrefix4ShardIndexes(ds.ctx, predicates)\n\tds.allConds = predicates\n\tds.pushedDownConds, predicates = expression.PushDownExprs(ds.ctx.GetSessionVars().StmtCtx, predicates, ds.ctx.GetClient(), kv.UnSpecified)\n\tappendDataSourcePredicatePushDownTraceStep(ds, opt)\n\treturn predicates, ds\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Placement Policy from Database or Table in SQL\nDESCRIPTION: SQL commands to remove placement policies from databases, tables, or partitions. This resets the placement to default rules and clears associated table options.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE test [DEFAULT] PLACEMENT POLICY SET DEFAULT; -- standard syntax for ALTER DATABASE\nALTER DATABASE test [DEFAULT] PLACEMENT POLICY=default; -- alternative\nALTER TABLE t1 PLACEMENT POLICY=default;\nALTER TABLE t1 PARTITION partition_name PLACEMENT POLICY=default;\n```\n\n----------------------------------------\n\nTITLE: Allowed SQL Operations in Read-Only Mode\nDESCRIPTION: List of SQL operations that are still allowed when TIDB_RESTRICTED_READ_ONLY is enabled, including variable settings, analyze table, show commands, SQL bindings, and transaction controls.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-06-23-restricted-read-only.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nset variables\nanalyze table\nshow\ncreate sql binding\ndrop sql binding\nprepare\nbegin\nrollback\ncommit\n```\n\n----------------------------------------\n\nTITLE: Development Build Commands\nDESCRIPTION: Shell commands for building and running integration tests during development to verify execution plan changes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake integrationtest\n```\n\n----------------------------------------\n\nTITLE: Granting Static and Dynamic Privileges in MySQL\nDESCRIPTION: Demonstrates the syntax for granting static and dynamic privileges in MySQL. Shows that dynamic privileges only support global level (*.*).\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-09-dynamic-privileges.md#2025-04-18_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nmysql [localhost:8023] {root} (information_schema) > grant select on *.* to 'u1';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql [localhost:8023] {root} (information_schema) > grant binlog_admin on test.* to 'u1';\nERROR 3619 (HY000): Illegal privilege level specified for BINLOG_ADMIN\nmysql [localhost:8023] {root} (information_schema) > grant binlog_admin on *.* to 'u1';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Resume DDL Job Command - SQL\nDESCRIPTION: SQL command to resume a previously paused DDL job using its job ID. Only jobs in Paused state can be resumed.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-15-ddl-pause-resume.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nadmin resume ddl jobs $job_id\n```\n\n----------------------------------------\n\nTITLE: Integrating Resource Control in Backup Function\nDESCRIPTION: This snippet demonstrates how to integrate resource control into the backup function using ResourceGroupManager and LimitedFuture. It shows how to get a resource limiter and wrap tasks with it.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nasync fn backup(req) {\n    // `resource_manager` should be inited when build the br endpoint.\n    let resource_limiter = resource_manager.get_resource_group(req.get_resource_group_name());\n    // backup all the region ranges\n    for r in req.ranges {\n        let task = r.backup();\n        if let Some(ref limiter) = resource_limiter {\n            LimitedFuture(task, limiter.clone()).await;\n        } else {\n            task.await;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multi Distinct Aggregate Query in TiDB SQL\nDESCRIPTION: This snippet illustrates the execution plan for a SQL query using multiple DISTINCT aggregations in TiDB. It shows the use of TableReader, ExchangeSender, Projection, and HashAgg operators to efficiently compute distinct counts on multiple columns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-09-12-grouping-sets.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [test]> explain select count(distinct a), count(distinct b) from t;\n+--------------------------------------------+---------+--------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| id                                         | estRows | task         | access object | operator info                                                                                                                                                                        |\n+--------------------------------------------+---------+--------------+---------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TableReader_35                             | 1.00    | root         |               | MppVersion: 2, data:ExchangeSender_34                                                                                                                                                |\n| â””â”€ExchangeSender_34                        | 1.00    | mpp[tiflash] |               | ExchangeType: PassThrough                                                                                                                                                            |\n|   â””â”€Projection_25                          | 1.00    | mpp[tiflash] |               | Column#4, Column#5                                                                                                                                                                   |\n|     â””â”€HashAgg_26                           | 1.00    | mpp[tiflash] |               | funcs:sum(Column#10)->Column#4, funcs:sum(Column#11)->Column#5                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: ImportSST Service Definition in Go\nDESCRIPTION: Protocol buffer service definition for the ImportSST service that handles SST file operations and duplicate detection in TiDB. This interface is used to write SST files and detect duplicate keys during index creation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-07-adding-index-acceleration.md#2025-04-18_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nservice ImportSST {\n   ...\n   // Open a write stream to generate sst files\n   rpc Write(stream WriteRequest) returns (WriteResponse) {}\n   rpc RawWrite(stream RawWriteRequest) returns (RawWriteResponse) {}\n   ...\n \n   // Collect duplicate data from TiKV.\n   rpc DuplicateDetect(DuplicateDetectRequest) returns (stream DuplicateDetectResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Index Advisor SQL Grammar Definition\nDESCRIPTION: SQL syntax specification for the new index advisor feature, including options for file input, time limits, and index number constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-05-index-advisor.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINDEX ADVISE\n  [LOCAL]\n  INFILE 'file_name'\n  [MAX_MINUTES number]\n  [MAX_IDXNUM\n     [PER_TABLE number] \n     [PER_DB number]\n  ]\n  [LINES \n    [STARTING BY 'string'] \n    [TERMINATED BY 'string']\n  ]\n```\n\n----------------------------------------\n\nTITLE: TiKV Get Method with Timeout Check Placeholders in Rust\nDESCRIPTION: Implementation of the get method in TiKV with placeholders for timeout checks. This shows where timeout verification should be added to cancel operations that exceed their deadline, particularly before expensive operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn get(\n    &self,\n    mut ctx: Context,\n    key: Key,\n    start_ts: TimeStamp,\n) -> impl Future<Output = Result<(Option<Value>, KvGetStatistics)>> {\n    ...\n     let res = self.read_pool.spawn_handle(\n            async move {\n                // TODO: Add timeout check here.\n                let snapshot =\n                    Self::with_tls_engine(|engine| Self::snapshot(engine, snap_ctx)).await?;\n\n                {\n                    // TODO: Add timeout check here.\n                    ...\n                    let result = Self::with_perf_context(CMD, || {\n                        let _guard = sample.observe_cpu();\n                        let snap_store = SnapshotStore::new(\n                            snapshot,\n                            start_ts,\n                            ctx.get_isolation_level(),\n                            !ctx.get_not_fill_cache(),\n                            bypass_locks,\n                            access_locks,\n                            false,\n                        );\n                        // TODO: Add timeout check here.\n                        snap_store\n                        .get(&key, &mut statistics)\n                    });\n                 ...   \n            ...        \n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Generated Column Conditions in Go\nDESCRIPTION: Wrapper function that routes to specific handlers for adding tidb_shard expressions based on condition type (EQ or IN).\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc AddGcColumnCond(sctx sessionctx.Context,\n\tcols []*expression.Column,\n\taccessesCond []expression.Expression,\n\tcolumnValues []*valueInfo) ([]expression.Expression, error) {\n\n\tif cond := accessesCond[1]; cond != nil {\n\t\tif f, ok := cond.(*expression.ScalarFunction); ok {\n\t\t\tswitch f.FuncName.L {\n\t\t\tcase ast.EQ:\n\t\t\t\treturn AddGcColumn4EqCond(sctx, cols, accessesCond, columnValues)\n\t\t\tcase ast.In:\n\t\t\t\treturn AddGcColumn4InCond(sctx, cols, accessesCond)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn accessesCond, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shard Expressions for Equality and IN Conditions in Go\nDESCRIPTION: Core function that adds tidb_shard(x) = xxx expressions to equality and IN conditions, transforming simple conditions into sharded versions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc AddExpr4EqAndInCondition(sctx sessionctx.Context, conditions []expression.Expression,\n\tcols []*expression.Column) ([]expression.Expression, error)\n```\n\n----------------------------------------\n\nTITLE: Building TiDB Lightning Web Interface with npm\nDESCRIPTION: Commands to build the TiDB Lightning web interface from source using npm. This builds the React application from the web directory and generates the necessary distribution files.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/web/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# from `lightning/web/src/*` produces `lightning/web/dist/*`\ncd web/\nexport NODE_OPTIONS=\"--openssl-legacy-provider\"\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding KVReadTimeout Field to KVSnapshot Struct in Go\nDESCRIPTION: Modification to the KVSnapshot struct to include a KVReadTimeout field for storing the configurable timeout duration. This change would be implemented in the client-go repository.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-06-30-configurable-kv-timeout.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype KVSnapshot struct {\n\t...\n\tKVReadTimeout: Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KV Data Resolution Interface in Go\nDESCRIPTION: Protocol buffer definition for resolving and deleting KV data based on timestamp, including request/response structures and RPC interface.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n    // resolve data by resolved_ts\n    message ResolveKvDataRequest {\n        uint64 resolved_ts = 1;\n    }\n\n    message ResolveKvDataResponse {\n        Error error = 1;\n        uint64 store_id = 2;\n        uint64 resolved_key_count = 3; // reserved for summary of restore \n        // cursor of delete key.commit_ts, reserved for progress of restore\n        // progress is (current_commit_ts - resolved_ts) / (backup_ts - resolved_ts) x 100%\n        uint64 current_commit_ts = 4;\n    }\n\n    // execute delete data from kv db\n    rpc ResolveKvData(ResolveKvDataRequest) returns (stream ResolveKvDataResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Group Exploration Algorithm in Go\nDESCRIPTION: Recursive algorithm to explore a group and all its equivalent expressions. It marks groups as explored when no more transformations can be applied and ensures all child groups are explored.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc exploreGroup(g *Group) {\n\tif g.explored { return }\n\n\tg.explored = true\n\tfor _, curExpr := range g.equivalents {\n\t\tif curExpr.explored { continue }\n\n\t\t// Explore child groups firstly.\n\t\tcurExpr.explored = true\n\t\tfor _, childGroup := range curExpr.children {\n\t\t\texploreGroup(childGroup)\n\t\t\tcurExpr.explored = curExpr.explored && childGroup.explored\n\t\t}\n\n\t\teraseCur := findMoreEquiv(curExpr, g)\n\t\tif eraseCur {\n\t\t\tcurGroup.erase(cur)\n\t\t} else {\n\t\t\tg.explored = g.explored && curExpr.explored\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GetIndexMergeIntersectionPaths Function in Go\nDESCRIPTION: Golang function that generates all possible index merge intersection paths for conjunctive (AND) conditions, helping find optimal plans for complex queries.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nGetIndexMergeIntersectionPaths(pushDownConditions, usedConditionsInOr, indexInfos) {\n\tvar partialPaths\n\n\tif len(pushDownConditions) - len(usedConditionsInOr) < 2 {\n\t\treturn nil\n\t}\n\ttableFilters := append(tableFilters, usedConditionsInOr...)\n\tnewConsiderConditions := remove(pushDownConditions, usedConditionsInOr)\n\tfor cond in newConsiderConditions {\n\t\tindexPaths = buildAccessPath([]{cond}, indexInfos)\n\t\tif indexPaths == nil {\n\t\t\ttableFilters = append(tableFilters,cond)\n\t\t\tcontinue\n\t\t}\n\t\tindexPath := GetIndexMergePartialPath(indexPaths,indexInfos)\n\t\tpartialPaths = append(partialPaths, indexPath)\n\t}\n\tif len(partialPaths) < 2 {\n\t\treturn nil\n\t}\n\treturn CreateIndexMergeIntersectionPath(partialPaths, tableFilters)\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Index Key-Value Pairs in TiDB\nDESCRIPTION: Demonstrates the current encoding scheme for index key-value pairs in TiDB. The key contains the table ID, index ID, and indexed column values, while the value contains the row ID.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-08-04-global-index.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nKey: tablePrefix{tableID}_indexPrefixSep{indexID}_indexedColumnsValue\nValue: rowID\n```\n\n----------------------------------------\n\nTITLE: 32-bit Connection ID Structure\nDESCRIPTION: Defines the bit layout for 32-bit connection IDs, including serverID (11 bits), local connID (20 bits), and markup bit.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-01-global-kill.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                      31    21 20               1    0\n                                     +--------+------------------+------+\n                                     |serverID|   local connID   |markup|\n                                     | (11b)  |       (20b)      |  =0  |\n                                     +--------+------------------+------+\n```\n\n----------------------------------------\n\nTITLE: Running BenchDB Performance Test in Bash\nDESCRIPTION: This command demonstrates how to run BenchDB with multiple operations including create, truncate, insert, update-random, and select. It assumes PD and TiKV are already started.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/benchdb/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./benchdb -run=\"create|truncate|insert:0_10000|update-random:0_10000:100000|select:0_10000:10\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TiDB Space Padding Behavior with SQL\nDESCRIPTION: SQL example showing how TiDB's current utf8mb4_bin collation incorrectly handles space padding by not treating trailing spaces as identical characters.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntidb> create table t1(a varchar(20) charset utf8mb4 collate utf8mb4_bin key);\nQuery OK, 0 rows affected\ntidb> insert into t1 values ('a')\nQuery OK, 1 row affected\ntidb> insert into t1 values ('a ');\nQuery OK, 1 row affected\n```\n\n----------------------------------------\n\nTITLE: Extending kvrpcpb Protocol for Enhanced Lock and Transaction Monitoring\nDESCRIPTION: Changes to the kvrpcpb protocol to include resource group tags for SQL digest information, extend Deadlock message with wait chain data, and add new request/response messages for retrieving lock wait information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  message Context {\n    ...\n+   bytes resource_group_tag = ...;\n  }\n\n  message Deadlock {\n    ...\n+   repeated deadlock.WaitForEntry wait_chain = ...;\n  }\n\n+ message GetLockWaitInfoRequest {\n+     Context context = 1;\n+ }\n+ \n+ message GetLockWaitInfoResponse {\n+     errorpb.Error region_error = 1;\n+     string error = 2;\n+     repeated deadlock.WaitForEntry entries = 3;\n+ }\n```\n\n----------------------------------------\n\nTITLE: Querying with GROUP BY Clause in SQL\nDESCRIPTION: This query demonstrates the use of GROUP BY, which would no longer be able to utilize the index after the shard index implementation. The optimizer would not choose the index, resulting in grouping being performed in the tidb-server.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(a) FROM A GROUP BY a\n```\n\n----------------------------------------\n\nTITLE: Loading Timezone in Go using LoadLocation\nDESCRIPTION: This snippet references the LoadLocation function from Go's time package, which is used to read timezone data and build a time.Location object. It's mentioned in the context of explaining why the proposal focuses on specific TZ variable formats.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-09-10-adding-tz-env.md#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nLoadLocation\n```\n\n----------------------------------------\n\nTITLE: Modifying Column Used by Foreign Key in SQL\nDESCRIPTION: Shows that modifying a column used by a foreign key constraint is rejected due to incompatibility.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-06-22-foreign-key.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n> alter table t1 change column id id1 bigint;\n(3780, \"Referencing column 'a' and referenced column 'id1' in foreign key constraint 't2_ibfk_1' are incompatible.\")\n```\n\n----------------------------------------\n\nTITLE: TiDB Cluster Restore Configuration Output\nDESCRIPTION: This JSON output from the BR restore preparation command contains detailed information about the cluster to be restored, including TiKV store and volume details, snapshot IDs, and new volume IDs for restoration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n \"cluster_info\": {\n   \"cluster_version\": \"v6.3.0\",\n   \"max_alloc_id\": \"6000\",\n   \"resolved_ts\": \"456745777823347\",\n },\n \"tikv\" : {\n   \"replicas\": 3,\n   \"stores\": [\n   {\n     \"store_id\" : 1,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6244\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0001\",\n         \"snapshot_id\" : \"snap-1234567890abcdef0\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6245\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0002\",\n         \"snapshot_id\" : \"snap-1234567890abcdef1\"\n       }\n     ]\n   },\n   {\n     \"store_id\" : 2,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6246\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0003\",\n         \"snapshot_id\" : \"snap-1234567890abcdef2\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6247\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0004\",\n         \"snapshot_id\" : \"snap-1234567890abcdef3\"\n       }\n     ]\n   },\n    {\n     \"store_id\" : 3,\n     \"volumes\" : [\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6248\",\n         \"type\" : \"raft-engine.dir\",\n         \"mount_path\" : \"/var/lib/tikv/raft-engine\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0005\",\n         \"snapshot_id\" : \"snap-1234567890abcdef4\"\n       },\n       {\n         \"volume_id\" : \"vol-0e65f40961a9f6249\",\n         \"type\" : \"storage.data-dir\",\n         \"mount_path\" : \"/var/lib/tikv/data-dir\",\n         \"restore_volume_id\" : \"vol-0e65f40961a9f0006\",\n         \"snapshot_id\" : \"snap-1234567890abcdef5\"\n       }\n     ]\n   }\n ],\n },\n \"pd\" : {\n   \"replicas\" : 3\n },\n \"tidb\": {\n   \"replicas\" : 3\n },\n \"kubernetes\" : {\n   \"pvs\" : [],\n   \"pvcs\" : [],\n   \"crd_tidb_cluster\" : {},\n   \"options\" : {}\n }\n \"options\" : {} \n}\n```\n\n----------------------------------------\n\nTITLE: IndexMerge Cost Model Type 2 Calculations\nDESCRIPTION: Cost model calculations for IndexMergeType 2, factoring in only totalRowCount for IO, Network, and CPU Memory costs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nIO Cost = (totalRowCount) * scanFactor\nNetwork Cost = totalRowCount * networkFactor\nCpu Memory Cost = totalRowCount * cpuFactor + totalRowCount * memoryFactor\n```\n\n----------------------------------------\n\nTITLE: Setting All Experimental Features in TiDB\nDESCRIPTION: Example of using a wildcard to disable all experimental features globally using tidb_experimental_feature_switch.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-07-29-hidden-sysvars.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL tidb_experimental_feature_switch = '%=OFF';\n```\n\n----------------------------------------\n\nTITLE: Defining TRANSACTION_ID_DIGEST Table Schema in Markdown\nDESCRIPTION: Markdown table defining the schema for the TRANSACTION_ID_DIGEST and CLUSTER_TRANSACTION_ID_DIGEST tables, which map transaction IDs to their digests in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type       | Comment |\n|------------|------------|--------|\n| `DIGEST` | `varchar(16)` | Digest of a transaction, calculated with `ALL_SQL_DIGEST` |\n| `TRX_ID`  | `bigint` | The transaction ID (aka. start ts) |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flame Graph for TiDB using pprof\nDESCRIPTION: Commands for collecting performance profile data from TiDB via HTTP API and generating an SVG flame graph. This utilizes Go's built-in profiling capabilities to create a visualization of CPU usage.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:10080/debug/pprof/profile > cpu.pprof\ngo tool pprof -svg cpu.svn cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Configuring TiDB Instance Variables in TOML\nDESCRIPTION: Example of setting instance variables in the TiDB configuration file (tidb.toml). This shows how to set max_connections and tidb_general_log.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n# tidb.toml\n[instance]\nmax_connections = 1234\ntidb_general_log = \"/path/to/file\"\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Unique Index Key Format with Common Handles\nDESCRIPTION: Specification of the binary format for non-unique index keys using common handles in TiDB. The format stores the common handle at the end of the key after the index column values.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```\nt | {table_id} | _i | {index_id} | {idx_col_vals}     | {common_handle}    // component\n1 | 8          | 2  | 8          | len(idx_col_vals)  | len(common_handle) // byte size\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics Schema Mappings via SQL Command\nDESCRIPTION: Example of using a special SQL admin command to add a PromQL expression mapping to create a parse_duration system table in the metrics_schema database.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmysql> admin metrics_schema add parse_duration `histogram_quantile(0.95, sum(rate(tidb_session_parse_duration_seconds_bucket[$INTERVAL] offset $OFFSET_TIME)) by (le, sql_type))`\n```\n\n----------------------------------------\n\nTITLE: SQL Query Plan Comparison - After Optimization\nDESCRIPTION: Example showing the execution plan after applying the proposed constraint propagation optimizations. The plan demonstrates improved filter push-down and more efficient join processing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-07-22-enhance-propagations.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTiDB(localhost:4000) > desc select * from t1 left join t2 on t1.a=t2.a and t2.a in (12, 13) where t1.a in (12, 13);\n+-------------------------+-------+------+-------------------------------------------------------------------------+\n| id                      | count | task | operator info                                                           |\n+-------------------------+-------+------+-------------------------------------------------------------------------+\n| HashLeftJoin_7          | 0.00  | root | left outer join, inner:TableReader_13, equal:[eq(test.t1.a, test.t2.a)] |\n| â”œâ”€TableReader_10        | 0.00  | root | data:Selection_9                                                        |\n| â”‚ â””â”€Selection_9         | 0.00  | cop  | in(test.t1.a, 12, 13)                                                   |\n| â”‚   â””â”€TableScan_8       | 2.00  | cop  | table:t1, range:[-inf,+inf], keep order:false, stats:pseudo             |\n| â””â”€TableReader_13        | 0.00  | root | data:Selection_12                                                       |\n|   â””â”€Selection_12        | 0.00  | cop  | in(test.t2.a, 12, 13)                                                   |\n|     â””â”€TableScan_11      | 2.00  | cop  | table:t2, range:[-inf,+inf], keep order:false, stats:pseudo             |\n+-------------------------+-------+------+-------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: IndexMergePath Structure Definition in Go\nDESCRIPTION: Golang struct definition for the IndexMergePath used in the path generation process for the optimizer.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype IndexMergePath struct {\n\tIndexPath[]\n\ttableFilters\n\tIndexMergeType\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Format Constraints with Error Cases\nDESCRIPTION: Examples showing invalid placement policy configurations using dictionary format constraints with follower counts.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nFOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 1,-region=us-east-2: 2}\" FOLLOWERS=3; -- technically accurate, but an error\nFOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 1,-region=us-east-2: 2}\" FOLLOWERS=2; -- an error\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Report Template in Markdown\nDESCRIPTION: A template for reporting security vulnerabilities to the TiDB security team. It includes fields for issue title, overview, affected components and versions, CVE number, verification process, and contact information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/SECURITY.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Issue title*:\n\n- Overview*:\n\n- Affected components and version number*:\n\n- CVE number (if any):\n\n- Vulnerability verification process*:\n\n- Contact information*:\n\nThe asterisk (*) indicates the required field.\n```\n\n----------------------------------------\n\nTITLE: Implementing Restore for DatabaseOption in Go\nDESCRIPTION: Example implementation of the Restore method for the DatabaseOption AST node. It handles different database option types like character set and collation, writing the appropriate SQL text to the context.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-11-29-ast-to-sql-text.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Restore implements Node interface.\nfunc (n *DatabaseOption) Restore(ctx *RestoreCtx) error {\n\tswitch n.Tp {\n\tcase DatabaseOptionCharset:\n\t\tctx.WriteKeyWord(\"CHARACTER SET\")\n\t\tctx.WritePlain(\" = \")\n\t\tctx.WritePlain(n.Value)\n\tcase DatabaseOptionCollate:\n\t\tctx.WriteKeyWord(\"COLLATE\")\n\t\tctx.WritePlain(\" = \")\n\t\tctx.WritePlain(n.Value)\n\tdefault:\n\t\treturn errors.Errorf(\"invalid DatabaseOptionType: %d\", n.Tp)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Restore Method for AST Nodes in Go\nDESCRIPTION: Defines the Restore method interface that will be added to all AST nodes to enable reconstructing SQL text from the node. The method appends SQL text to a RestoreCtx and returns errors for invalid ASTs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-11-29-ast-to-sql-text.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Node interface {\n\t// Restore AST to SQL text and append them to `ctx`.\n\t// return error when the AST is invalid.\n\tRestore(ctx *RestoreCtx) error\n\t\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Importer Table Creation Example\nDESCRIPTION: Example command showing how to create a table with multiple column types and a unique index using the Importer tool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./importer -t \"create table t(a int primary key, b double, c varchar(10), d date unique, e time unique, f timestamp unique, g date unique, h datetime unique, i year unique);\" -i \"create unique index u_b on t(b);\" -c 1 -n 10 -P 4000\n```\n\n----------------------------------------\n\nTITLE: Importer CLI Usage Options\nDESCRIPTION: Command line interface options for the Importer tool showing available parameters for database connection, batch operations, and SQL configuration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage of importer:\n  -D string\n      set the database name (default \"test\")\n  -L string\n      log level: debug, info, warn, error, fatal (default \"info\")\n  -P int\n      set the database host port (default 3306)\n  -b int\n      insert batch commit count (default 1)\n  -c int\n      parallel worker count (default 1)\n  -config string\n      Config file\n  -h string\n      set the database host ip (default \"127.0.0.1\")\n  -i string\n      create index sql\n  -n int\n      total job count (default 1)\n  -p string\n      set the database password\n  -t string\n      create table sql\n  -u string\n      set the database user (default \"root\")\n```\n\n----------------------------------------\n\nTITLE: Adding Batch Task List to copTask Struct in TiDB\nDESCRIPTION: Extending the copTask struct in TiDB with a field to store batch task information. This field holds the list of batched tasks that will be collected during task preparation when store batching is enabled.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\ntype copTask struct {\n    â€¦\n    //\n    batchTaskList []kvproto.Coprocessor.RegionInfo\n}\n```\n\n----------------------------------------\n\nTITLE: IndexMerge Cost Model Type 1 Calculations\nDESCRIPTION: Cost model calculations for IndexMergeType 1, including IO, Network, and CPU Memory costs based on total row count and merged row count.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nIO Cost = (totalRowCount + mergedRowCount) * scanFactor\nNetwork Cost = (totalRowCount + mergedRowCount) * networkFactor\nCpu Memory Cost = totalRowCount * cpuFactor + totalRowCount * memoryFactor\n```\n\n----------------------------------------\n\nTITLE: Flushing Index Usage Statistics in SQL\nDESCRIPTION: SQL statement to clear all index usage statistics from the system table, requiring RELOAD privilege.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-30-index-usage-information.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndelete from mysql.schema_index_usage;\n```\n\n----------------------------------------\n\nTITLE: Running Regression Tests for TiDB Execute Plan in Bash\nDESCRIPTION: This snippet demonstrates how to run regression tests for TiDB execute plan modifications. It shows two equivalent commands that can be used to identify changes in the execute plan after modifying the code and before committing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake integrationtest\n```\n\n----------------------------------------\n\nTITLE: Importer Config File Usage\nDESCRIPTION: Example showing how to use a configuration file with the Importer tool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./importer --config=config.toml\n```\n\n----------------------------------------\n\nTITLE: Exploration Phase Main Loop Implementation in Go\nDESCRIPTION: The main loop for the exploration phase that continues until the root group has been fully explored, applying transformation rules to find all equivalent expressions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OnPhaseExploration(rootGroup *Group) error {\n\tfor !rootGroup.explored {\n\t\terr := exploreGroup(rootGroup)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Column Extractor Implementation in Go\nDESCRIPTION: Implementation of a custom visitor to extract column names from AST nodes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/parser/docs/quickstart.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype colX struct{\n\tcolNames []string\n}\n\nfunc (v *colX) Enter(in ast.Node) (ast.Node, bool) {\n\tif name, ok := in.(*ast.ColumnName); ok {\n\t\tv.colNames = append(v.colNames, name.Name.O)\n\t}\n\treturn in, false\n}\n\nfunc (v *colX) Leave(in ast.Node) (ast.Node, bool) {\n\treturn in, true\n}\n\nfunc extract(rootNode *ast.StmtNode) []string {\n\tv := &colX{}\n\t(*rootNode).Accept(v)\n\treturn v.colNames\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Test Results for TiDB in Bash\nDESCRIPTION: This snippet shows how to generate new test results based on the last execution of TiDB integration tests. It involves running the run-tests.sh script with the -r option, specifying the case name for which to generate results.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/integrationtest\n./run-tests.sh -r [casename]\n```\n\n----------------------------------------\n\nTITLE: Defining Diagnostics gRPC Service for TiDB Cluster Components\nDESCRIPTION: A protocol buffer definition for TiDB diagnostics service with methods for log searching and server information retrieval. Includes message types for request/response parameters and enumerations for log levels and server information types.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\n// Diagnostics service for TiDB cluster components.\nservice Diagnostics {\n\t// Searchs log in the target node\n\trpc search_log(SearchLogRequest) returns (SearchLogResponse) {};\n\t// Retrieves server info in the target node\n\trpc server_info(ServerInfoRequest) returns (ServerInfoResponse) {};\n}\n\nenum LogLevel {\n\tDebug = 0;\n\tInfo = 1;\n\tWarn = 2;\n\tTrace = 3;\n\tCritical = 4;\n\tError = 5;\n}\n\nmessage SearchLogRequest {\n\tint64 start_time = 1;\n\tint64 end_time = 2;\n\tLogLevel level = 3;\n\tstring pattern = 4;\n\tint64 limit = 5;\n}\n\nmessage SearchLogResponse {\n\trepeated LogMessage messages = 1;\n}\n\nmessage LogMessage {\n\tint64 time = 1;\n\tLogLevel level = 2;\n\tstring message = 3;\n}\n\nenum ServerInfoType {\n\tAll = 0;\n\tHardwareInfo = 1;\n\tSystemInfo = 2;\n\tLoadInfo = 3;\n}\n\nmessage ServerInfoRequest {\n\tServerInfoType tp = 1;\n}\n\nmessage ServerInfoItem {\n\t// cpu, memory, disk, network ...\n\tstring tp = 1;\n\t// eg. network: lo1/eth0, cpu: core1/core2, disk: sda1/sda2 \n\tstring name = 2;\n\tstring key = 3;\n\tstring value = 4;\n}\n\nmessage ServerInfoResponse {\n\trepeated ServerInfoItem items = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: BR Stream Merge CLI Command\nDESCRIPTION: Command-line example demonstrating how to merge backup streams with existing snapshots using the BR tool.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ br stream merge \\\n   -s 's3://bucket/path/' \\\n   [--read-snapshot-storage 's3://bucket/snapshot-path'] \\\n   --write-snapshot-storage 's3://bucket/snapshot-path-new' \\\n   [--startts 123456789] \\\n   [--endts 987654321]\n```\n\n----------------------------------------\n\nTITLE: Example Placement Policy Creation\nDESCRIPTION: SQL statement showing how to create a placement policy with regional constraints and restrictions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLACEMENT POLICY europe CONSTRAINTS=\"+region=eu-west-1\" RESTRICTED;\n```\n\n----------------------------------------\n\nTITLE: Incremental Rule Example\nDESCRIPTION: Shows how to use the incremental rule to generate repeating sequences of incrementing values with specified probability.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./importer -t \"create table t(a date comment '[[incremental=1;repeats=3;probability=100]]');\" -P 4000 -c 1 -n 10\n```\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [test]> select * from t;\n+------------+\n| a          |\n+------------+\n| 2019-05-13 |\n| 2019-05-13 |\n| 2019-05-13 |\n| 2019-05-14 |\n| 2019-05-14 |\n| 2019-05-14 |\n| 2019-05-15 |\n| 2019-05-15 |\n| 2019-05-15 |\n| 2019-05-16 |\n+------------+\n10 rows in set (0.002 sec)\n```\n\n----------------------------------------\n\nTITLE: New DDL Job Type Implementation for Batch Table Creation\nDESCRIPTION: Implementation of a new DDL job type 'ActionCreateTables' that processes multiple table creation operations in a single schema change. This allows for batch creation of tables with a single schema version increment.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-10-backup-with-batch-create-table.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n case model.ActionCreateTables:\n tableInfos := []*model.TableInfo{}\n err = job.DecodeArgs(&tableInfos)\n\n diff.AffectedOpts = make([]*model.AffectedOption, len(tableInfos))\n for i := range tableInfos {\n  diff.AffectedOpts[i] = &model.AffectedOption{\n  SchemaID: job.SchemaID,\n  OldSchemaID: job.SchemaID,\n  TableID: tableInfos[i].ID,\n  OldTableID: tableInfos[i].ID,\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: PromptGenerator Interface Definition in Go\nDESCRIPTION: Interface definition for creating new prompt generators. Includes methods for naming, grouping, prompt generation, and response unmarshaling.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/llmtest/README.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// PromptGenerator is the interface for prompt generator.\ntype PromptGenerator interface {\n\tName() string\n\tGroups() []string\n\n\tGeneratePrompt(group string, count int, existCases []*testcase.Case) []openai.ChatCompletionMessageParamUnion\n\tUnmarshal(response string) []testcase.Case\n}\n```\n\n----------------------------------------\n\nTITLE: CTE Table Logical Operator - Go\nDESCRIPTION: Definition of logical table operator structure for reading CTE results\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype LogicalCTETable struct {\n    logicalSchemaProducer\n\n    name         string\n    idForStorage int\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TiDB Extension Module\nDESCRIPTION: A simple import file that ensures the extension module is loaded when TiDB starts. This imports the example extension package so its init() function will be called.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// pkg/extension/_import/import_example.go\n\npackage extensionimport\n\nimport (\n\t_ \"github.com/pingcap/tidb/pkg/extension/example\"\n)\n```\n\n----------------------------------------\n\nTITLE: Dropping a Sequence in SQL\nDESCRIPTION: SQL syntax for removing one or more sequences from the database.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP SEQUENCE [IF EXISTS] sequence_name_list\n```\n\n----------------------------------------\n\nTITLE: Defining StoreBatchTaskResponse Protocol Buffer Message for TiKV Batch Coprocessor\nDESCRIPTION: Protocol buffer definition for StoreBatchTaskResponse which contains response data, region errors, lock information, other errors, task ID, and execution details for a batch task. This structure enables TiKV to return batch processing results.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-23-batch-cop.md#2025-04-18_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage StoreBatchTaskResponse {\n    bytes data = 1 [(gogoproto.customtype) = \"github.com/pingcap/kvproto/pkg/sharedbytes.SharedBytes\", (gogoproto.nullable) = false];\n    errorpb.Error region_error = 2;\n    kvrpcpb.LockInfo locked = 3;\n    string other_error = 4;\n    uint64 task_id = 5;\n    kvrpcpb.ExecDetailsV2 exec_details_v2 = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potential Anomaly with Multiple Flushing MemDBs\nDESCRIPTION: This code snippet illustrates a sequence of operations that could lead to an anomaly if multiple MemDBs are allowed to flush concurrently. It emphasizes the need to limit flushing to one MemDB at a time to maintain consistency.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-01-09-pipelined-DML.md#2025-04-18_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nput(x, 1)\ndel(x)\nput(x, 2)\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure Output\nDESCRIPTION: Shows the resulting table structure after MySQL processes multiple schema changes, displayed using SHOW CREATE TABLE command.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n+-------+-------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                  |\n+-------+-------------------------------------------------------------------------------------------------------------------------------+\n| t     | CREATE TABLE `t` (\n `b` int DEFAULT NULL,\n KEY `i` (`b`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |\n+-------+-------------------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure Using Bash Commands\nDESCRIPTION: Commands to create initial project structure with necessary files and Go module initialization.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/parser/docs/quickstart.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir colx\ncd colx\ngo mod init colx\ntouch main.go\n```\n\n----------------------------------------\n\nTITLE: Implementing SAVEPOINT Operation in Go\nDESCRIPTION: Pseudocode showing how to create a new savepoint in a transaction. It first removes any existing savepoint with the same name, then creates a checkpoint of the transaction's MemDB and context state.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-22-transaction-savepoint.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc executeSavepoint(savepointName string){\n\t// If a savepoint with the same name already exists, it will be deleted.\n\tdeleteSavepoint(savepointName)\n\tmemDBCheckpoint := txn.GetMemDBCheckpoint()\n\ttxnCtxSavepoint := txnCtx.GetCurrentSavepoint()\n\ttxnCtx.Savepoints = append(txnCtx.Savepoints, SavepointRecord\n\t    Name: savepointName, \n\t    MemDBCheckpoint: memDBCheckpoint, \n\t    TxnCtxSavepoint: txnCtxSavepoint}\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Package Import Example in Go\nDESCRIPTION: Example showing how to import the parser package using the proposed wrapper approach for backward compatibility\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-13-parser-as-submodule-of-tidb.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport ( . \"github.com/pingcap/tidb/parser/xxx\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing SimpleLRUCache.Put Method in Go\nDESCRIPTION: This code snippet shows the Put method of SimpleLRUCache with heap usage annotations. The flat memory consumption is 2.55MB, with the main allocations occurring when creating hash strings (1.50MB) and storing elements in the map (1.05MB). This confirms that heap profiling accurately reflects the memory usage of SimpleLRUCache.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-11-heap-profile-record.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n(pprof) list Put\nTotal: 52.23MB\nROUTINE ======================== github.com/pingcap/tidb/util/kvcache.(*SimpleLRUCache).Put in /Users/yisa/Downloads/Github/GoProject/src/github.com/pingcap/tidb/util/kvcache/simple_lru.go\n    2.55MB     3.05MB (flat, cum)  5.85% of Total\n         .          .     91:   return element.Value.(*cacheEntry).value, true\n         .          .     92:}\n         .          .     93:\n         .          .     94:// Put puts the (key, value) pair into the LRU Cache.\n         .          .     95:func (l *SimpleLRUCache) Put(key Key, value Value) {\n    1.50MB     1.50MB     96:   hash := string(key.Hash())\n         .          .     97:   element, exists := l.elements[hash]\n         .          .     98:   if exists {\n         .          .     99:           l.cache.MoveToFront(element)\n         .          .    100:           return\n         .          .    101:   }\n         .          .    102:\n         .          .    103:   newCacheEntry := &cacheEntry{\n         .          .    104:           key:   key,\n         .          .    105:           value: value,\n         .          .    106:   }\n         .          .    107:   hashSize := SizeOf(hash)\n         .          .    108:   singleSize := SizeOf(newCacheEntry)\n         .   512.02kB    109:   element = l.cache.PushFront(newCacheEntry)\n    1.05MB     1.05MB    110:   l.elements[hash] = element\n         .          .    111:   l.size++\n         .          .    112:   l.capacity = 200000\n         .          .    113:   // Getting used memory is expensive and can be avoided by setting quota to 0.\n         .          .    114:   if l.quota == 0 {\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus in PD\nDESCRIPTION: Code showing Logrus logger initialization in PD's logutil package used by etcd, gRPC and draft components.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-21-unify-log-library.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Reference to code at: pkg/logutil/log.go#L260\n```\n\n----------------------------------------\n\nTITLE: Showing Created Sequence in SQL\nDESCRIPTION: SQL command to display the creation statement for an existing sequence.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-17-sql-sequence.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE SEQUENCE sequence_name\n```\n\n----------------------------------------\n\nTITLE: SQL Operation for LockForRead Function\nDESCRIPTION: SQL update statement for the LockForRead operation that sets a read lock on a table in the cache metadata if the table is not already write-locked.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-03-30-small-table-caching.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nupdate table_cache_meta set lock ='READ', lease = %? where  tid = %? and lock !='WRITE'\n```\n\n----------------------------------------\n\nTITLE: Dropping SQL Bindings Syntax in TiDB\nDESCRIPTION: Syntax for dropping all SQL bindings or a specific binding at global or session level in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-11-sql-plan-management.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP [GLOBAL|SESSION] BINDINGS\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP [GLOBAL|SESSION] BINDING BINDING_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining Keyspace Metadata Structure in Protocol Buffers\nDESCRIPTION: This snippet shows the structure of Keyspace metadata as defined in the protocol buffer file. It includes fields for the keyspace ID, name, state, and creation timestamp.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-07-keyspace.md#2025-04-18_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage KeyspaceMeta {\n  uint32 id = 1;\n  string name = 2;\n  KeyspaceState state = 3;\n  uint64 create_timestamp = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-adjusting Background Resource Quota in Rust\nDESCRIPTION: This function adjusts the background resource quota based on foreground task consumption. It calculates available quota, distributes it among background groups, and sets limits for each group based on their estimated consumption and expected quota.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nenum ResourceType {\n    Cpu,\n    Io,\n}\n\nfn adjust_background_resource_quota(resurce_type: ResourceType) {\n  let mut available__quota = get_instance_total_resource(resurce_type)\n  for group in get_all_foreground_resource_groups():\n    available_resource_quota -= group.get_resource_cost_rate()\n  \n  // reserve 10% free resource for potential foreground traffic increment.\n  available_resource_quota *= 0.9\n  let bg_groups = get_all_background_resource_groups();\n  bg_groups.sort_by(|g| estimated_ru_consuming_rate(g) / g.ru_per_sec())\n  let total_background_quota = get_all_background_resource_groups().ru_per_sec().sum()\n  \n  for g in bg_groups {\n    let expect_quota = group.ru_per_sec() / total_background_quota * available_ru_quota;\n    let estimated_cost_rate = estimated_ru_consuming_rate(g);\n    if estimated_cost_rate <= expect_quota {\n      group.SetRULimit(estimated_cost_rate)\n      available_ru_quota -= estimated_cost_rate\n    } else {\n      group.SetRULimit(expect_quota)\n      available_ru_quota -= expect_quota\n    } \n    total_background_quota -= g.ru_per_sec()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation Plan for Clustered Index Feature in TiDB\nDESCRIPTION: A hierarchical implementation plan outlining the steps to integrate the clustered index feature across TiDB components, including refactoring handle usage, codec implementation, and support in various subsystems.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-cluster-index.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```\nimplement the Handle interface for IntHandle and CommonHandle.\n  |\n  + refactor int64 handle to the Handle interface in all tidb packages.\n  |\n  +-+ implement the codec.\n    |\n    |-+ support codec in tikv.\n    | |\n    | +- support coprocessor indexScan \n    | |\n    | +- support coprocessor fastAnalyze \n    | |\n    | +- support coprocessor analyzeColumn \n    |\n    +-+ support common handle in planner.\n    |\n    |-+ support common handle in executors.\n    |\n    |-+ support common handle in ddl.\n    |\n    +-+ support common handle in other packages thats need minor change.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Integration Test Dependencies\nDESCRIPTION: Script to download and install all required binaries for BR integration tests, cleaning existing directories and building TiDB with failpoint support.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/tests/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd ${WORKSPACE}/tidb\nrm -rf third_bin/\nrm -rf bin/\nbr/tests/download_integration_test_binaries.sh\nmkdir -p bin && mv third_bin/* bin/\nrm -rf third_bin/\nmake failpoint-enable && make && make failpoint-disable #make tidb\n```\n\n----------------------------------------\n\nTITLE: Querying with Point Get in SQL\nDESCRIPTION: This example illustrates a query that would typically use the FastPlan process for a PointGet plan. After the shard index implementation, FastPlan would be unable to recognize the shard index field in the WHERE clause, potentially leading to less efficient query execution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM A WHERE A.a = 100\n```\n\n----------------------------------------\n\nTITLE: Module Replacement Directive in Go\nDESCRIPTION: Go module directive to replace the parser import path with local directory\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-13-parser-as-submodule-of-tidb.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/pingcap/parser => ./parser\n```\n\n----------------------------------------\n\nTITLE: Partition Exchange Syntax\nDESCRIPTION: Example of partition exchange syntax for managing placement rules.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE pt\n    EXCHANGE PARTITION p\n    WITH TABLE nt;\n```\n\n----------------------------------------\n\nTITLE: Collation Syntax Comment Example\nDESCRIPTION: Example of syntax comment used to mark old collations in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-01-24-collations.md#2025-04-18_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/* AS_BINARY_COLLATION */\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Attributes in TiDB\nDESCRIPTION: SQL queries to display table and partition attributes using INFORMATION_SCHEMA or SHOW commands.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-10-20-table-attributes.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ATTRIBUTES FOR [{DATABASE|SCHEMA} s][TABLE t][PARTITION p];\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE t;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM INFORMATION_SCHEMA.ATTRIBUTES;\n```\n\n----------------------------------------\n\nTITLE: Defining FieldType Structure in Golang\nDESCRIPTION: Definition of the FieldType structure in Golang, adding an array field to indicate whether the type is an array, with tp representing the type of elements in the array.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-03-14-multi-valued-index.md#2025-04-18_snippet_2\n\nLANGUAGE: Golang\nCODE:\n```\ntype FieldType struct {\n   // tp is type of the array elements\n   tp byte\n   // array indicates whether the type is an array\n   array bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JoinProbe Interface in Go for TiDB Hash Join\nDESCRIPTION: This code snippet defines the JoinProbe interface used in TiDB's hash join implementation. It includes methods for setting up probing, performing the probe operation, checking probe status, and handling row table scanning for special join types.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-11-hash-join-v2.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype JoinProbe interface {\n    // SetChunkForProbe will do some pre-work when start probing a chunk \n    SetChunkForProbe(chunk *chunk.Chunk) error\n    // Probe is to probe current chunk, the result chunk is set in result.chk, and Probe need to make sure result.chk.NumRows() <= result.chk.RequiredRows()\n    Probe(joinResult *hashjoinWorkerResult, sqlKiller sqlkiller.SQLKiller) (ok bool, result *hashjoinWorkerResult)\n    // IsCurrentChunkProbeDone returns true if current probe chunk is all probed \n    IsCurrentChunkProbeDone() bool \n    // ScanRowTable is called after all the probe chunks are probed. It is used in some special joins, like left outer join with left side to build, after all \n    // the probe side chunks are handled, it needs to scan the row table to return the un-matched rows \n    ScanRowTable(joinResult *hashjoinWorkerResult, sqlKiller sqlkiller.SQLKiller) (result *hashjoinWorkerResult) \n    // IsScanRowTableDone returns true after scan row table is done \n    IsScanRowTableDone() bool \n    // NeedScanRowTable returns true if current join need to scan row table after all the probe side chunks are handled \n    NeedScanRowTable() bool \n    // InitForScanRowTable do some pre-work before ScanRowTable, it must be called before ScanRowTable \n    InitForScanRowTable()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stats Cache Interface in Go\nDESCRIPTION: Interface definition for stats cache management that can be implemented by either LRU Cache or Map Cache. Includes methods for getting, putting, deleting stats, and managing cache capacity.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-08-02-stats-lru-cache.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// statsCacheInner is the interface to manage the statsCache, it can be implemented by map, lru cache or other structures.\ntype statsCacheInner interface {\n\tGet(int64) (*statistics.Table, bool)\n\tPut(int64, *statistics.Table)\n\tDel(int64)\n\tCost() int64\n\tLen() int\n\tSetCapacity(int64)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster System Information in TiDB\nDESCRIPTION: Example SQL query demonstrating how to use the proposed cluster_systeminfo system table to retrieve system information for all nodes in a TiDB cluster. The query shows various system-level details.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from cluster_systeminfo\n+------+-----------------+----------+--------------+--------+\n| TYPE | ADDRESS         | MODULE   | KEY          | VALUE  |\n+------+-----------------+----------+--------------+--------+\n| tikv | 127.0.0.1:20160 | sysctl   | ktrace.state | 0      |\n| tikv | 127.0.0.1:20160 | sysctl   | hw.byteorder | 1234   |\n| ...                                                       |\n+------+-----------------+----------+--------------+--------+\n20 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for TiDB Background Task Management\nDESCRIPTION: Comprehensive documentation covering breakpoint resume functionality, owner change handling, failure scenarios, cancellation procedures, cleanup operations, and progress monitoring for TiDB's background task system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Breakpoints Resume\n\nWhen the network partition or abnormal exit occurs in the TiDB where the current backfill worker is located, the corresponding subtask may not be handled by the worker. In the current scheme, it is tentatively planned to mark whether the executor owner of the current subtask is valid by lease. There are more suitable schemes that can be discussed later. The specific operation of this scheme:\n\n1. When the backfill worker handles a subtask, it will record the current DDL_ID (may need worker_type_worker_id suffix) in the tidb_background_subtask table as the exec_id, and regularly update the exec_expired value and curr_key.\n2. Non-DDL owner TiDB encountered this problem:\n    1. When there is a network problem in the TiDB where the backfill worker who is processing the subtask is located, and another TiDB obtains the current subtask and finds that its exec_expired expired (for example, the exec_expired + lease value is earlier than now () ), the exec_id and exec_expired values of this subtask are updated, and the subtask is processed from curr_key.\n3. DDL Owner TiDB may encounter this problem refer to the following changing owner description.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variable for Analyze Column Options in TiDB\nDESCRIPTION: SQL commands to set the global variable tidb_analyze_column_options. This variable controls whether to use predicate columns or all columns in the analyze process.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-23-predicate-columns.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL tidb_analyze_column_options = 'PREDICATE';\n\nSET GLOBAL tidb_analyze_column_options = 'ALL';\n```\n\n----------------------------------------\n\nTITLE: Configuring Zap Logger in PD\nDESCRIPTION: Code showing Zap logger initialization in PD's main function that creates and sets the global logger handler.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-21-unify-log-library.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Reference to code at: cmd/pd-server/main.go#L66\n```\n\n----------------------------------------\n\nTITLE: Dictionary Format Constraint Example\nDESCRIPTION: Valid example of using dictionary format constraints to specify follower placement.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nFOLLOWER_CONSTRAINTS=\"{+region=us-east-1: 1,-region=us-east-2: 2}\"\n```\n\n----------------------------------------\n\nTITLE: Checking and Repairing Tables with Vector Indexes in SQL\nDESCRIPTION: SQL commands for checking and repairing tables, noting that vector indexes are not currently processed.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-07-12-support-vector-index.md#2025-04-18_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nADMIN CHECK TABLE table_name;\nADMIN REPAIR TABLE table_name\n```\n\n----------------------------------------\n\nTITLE: Creating SCHEMA_INDEX_USAGE View in SQL\nDESCRIPTION: SQL statement to create a user-friendly view of index usage statistics by joining multiple system tables to display schema names instead of IDs.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-30-index-usage-information.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate view information_schema.schema_index_usage\nas select idx.table_schema as table_schema, idx.table_name as table_name, idx.key_name as index_name, stats.query_count as query_count, stats.rows_selected as rows_selected\nfrom mysql.schema_index_usage as stats, information_schema.tidb_indexes as idx, information_schema.tables as tables\nwhere tables.table_name = idx.table_schema\n\tAND tables.table_name = idx.table_name\n\tAND tables.tidb_table_id = stats.table_id\n\tAND idx.index_id = stats.index_id\n```\n\n----------------------------------------\n\nTITLE: SQL Command Examples in Documentation\nDESCRIPTION: Example SQL commands showing user management statements that need to be compatible with the auth plugin system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER\nALTER USER\nSET PASSWORD\nCREATE VIEW SQL SECURITY DEFINER u1\nSELECT\n```\n\n----------------------------------------\n\nTITLE: CTE Logical Operator Structs - Go\nDESCRIPTION: Definition of logical operator structures for CTE implementation including LogicalCTE and CTEClass\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype LogicalCTE struct {\n\tlogicalSchemaProducer\n\n\tcte       *CTEClass\n\tcteAsName model.CIStr\n}\n\ntype CTEClass struct {\n\tIsDistinct bool\n\tseedPartLogicalPlan      LogicalPlan\n\trecursivePartLogicalPlan LogicalPlan\n\tIDForStorage int\n\tLimitBeg uint64\n\tLimitEnd uint64\n}\n```\n\n----------------------------------------\n\nTITLE: GetIndexMergePartialPath Function in Go\nDESCRIPTION: Golang function that selects the best index path for a condition from multiple alternatives, currently choosing indexes with more columns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// This function will get a best indexPath for a condition from some alternative paths.\n// Now we just take the index which has more columns.\n// For exmple: \n// (1)\n// index1(a,b,c) index2(a,b) index3(a)\n// condition: a = 1 will choose index1; a = 1 and b = 2 will also choose index1\n// (2)\n// index1(a) index2(b)\n// condition: a = 1 and b = 1\n// random choose???\nGetIndexMergePartialPath(IndexInfos, indexAccessPaths) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Transaction Timestamp Management Structure in Go\nDESCRIPTION: Definition of a global structure to manage start timestamps for internal transactions executed via RunInNewTxn, including thread-safe operations through mutex synchronization.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-09-optimize-gc-for-internal-transaction.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar globalInnerTxnTsBox = innerTxnStartTsBox{\n\tinnerTSLock:\t\tsync.Mutex{},\n\tinnerTxnStartTsMap: make(map[uint64]struct{}, 256),\n}\n\ntype innerTxnStartTsBox struct {\n\tinnerTSLock\t\t   sync.Mutex\n\tinnerTxnStartTsMap map[uint64]struct{}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Backup Functionality in Rust\nDESCRIPTION: This snippet shows the basic structure for implementing a backup function in Rust, including a BackupRange struct and an async backup function that iterates over ranges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct BackupRange {\n    start_key: Key,\n    end_key: Key,\n    region: RegionInfo,\n    ...\n}\n\nimpl BackupRange {\n    async fn backup(req) -> Result<..>;\n}\n\nasync fn backup(req) {\n    // backup all the region ranges\n    for r in req.ranges {\n        r.backup().await;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TiDB DDL Logs in SQL\nDESCRIPTION: This SQL query retrieves DDL (Data Definition Language) related logs from the TiDB component of a TiDB cluster.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cluster_log where type='tidb' and content like '%ddl%';\n```\n\n----------------------------------------\n\nTITLE: Linearizability Example Sequence\nDESCRIPTION: Demonstrates a sequence of operations that could lead to linearizability violations without proper generation numbers.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-01-09-pipelined-DML.md#2025-04-18_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nwrite(x, 1)\nflush (retry happened)\nTiKV write (x, 1)\nclientReceiveResponse (x, 1)\nwrite(x, 2)\nflush\nTiKV write (x, 2)\nclientReceiveResponse (x, 2)\nretrying request (x, 1) arrived late\nTiKV write (x, 1)\n```\n\n----------------------------------------\n\nTITLE: Modifying Scope Validation for Instance Variables in Go\nDESCRIPTION: Updates the validateScope function to permit setting GLOBAL-scoped variables if they have INSTANCE scope, ensuring compatibility with the new scope system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n@@ -313,7 +320,7 @@ func (sv *SysVar) validateScope(scope ScopeFlag) error {\n        if sv.ReadOnly || sv.Scope == ScopeNone {\n                return ErrIncorrectScope.FastGenByArgs(sv.Name, \"read only\")\n        }\n-       if scope == ScopeGlobal && !sv.HasGlobalScope() {\n+       if scope == ScopeGlobal && !(sv.HasGlobalScope() || sv.HasInstanceScope()) {\n```\n\n----------------------------------------\n\nTITLE: Survival Preferences Configuration\nDESCRIPTION: Shows how to configure placement policy with survival preferences for cross-region and cross-zone data isolation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLACEMENT POLICY multiregion\n    follower=4\n    PRIMARY_REGION=\"region1\"\n    SURVIVAL_PREFERENCES=\"[region, zone]\";\n```\n\n----------------------------------------\n\nTITLE: Installing TiDB Parser Dependencies\nDESCRIPTION: Command to fetch TiDB parser dependency using specific git hash version.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/parser/docs/quickstart.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get -v github.com/pingcap/tidb/pkg/parser@069631e\n```\n\n----------------------------------------\n\nTITLE: Defining an Audit Plugin Manifest in Go for TiDB\nDESCRIPTION: This code snippet shows how to extend the base Manifest struct to create a specialized manifest for audit plugins. It embeds the base Manifest and adds a NotifyEvent function specific to audit functionality.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AuditManifest struct {\n    Manifest\n    NotifyEvent func(ctx context.Context) error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Label Rule for Database and Table in JSON\nDESCRIPTION: This JSON snippet shows how to define a label rule that connects a table name with its key range. It specifies the database and table names as labels.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"db1/tb1\",\n    \"labels\": [\n        {\n            \"key\": \"database-name\",\n            \"value\": \"db1\"\n        },\n        {\n            \"key\": \"table-name\",\n            \"value\": \"db1/tb1\"\n        }\n    ],\n    \"match-type\": \"key-range\",\n    \"match\": {\n        \"start-key\": \"7480000000000000ff0a00000000000000f8\",\n        \"end-key\": \"7480000000000000ff0b00000000000000f8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dumpling in Go\nDESCRIPTION: Instructions for compiling Dumpling, running unit tests, and performing integration tests. Includes steps for setting up the necessary environment and dependencies.\nSOURCE: https://github.com/pingcap/tidb/blob/master/dumpling/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n0. Under directory `tidb`\n1. Install Go 1.23.8 or above\n2. Run `make build_dumpling` to compile. The output is in `bin/dumpling`.\n3. Run `make dumpling_unit_test` to run the unit tests.\n4. Run `make dumpling_integration_test` to run integration tests. For integration test:\n  - The following executables must be copied or generated or linked into these locations:\n    * `bin/sync_diff_inspector` (download from [tidb-enterprise-tools-latest-linux-amd64](http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.tar.gz))\n    * `bin/tidb-server` (download from [tidb-master-linux-amd64](https://download.pingcap.org/tidb-master-linux-amd64.tar.gz))\n    * `bin/tidb-lightning` (download from [tidb-toolkit-latest-linux-amd64](https://download.pingcap.org/tidb-toolkit-latest-linux-amd64.tar.gz))\n    * `bin/minio` (download from <https://min.io/download>)\n    * Now, you can run `sh ./dumpling/install.sh` to get the above binary files.\n  - The following programs must be installed:\n    * `mysql` (the CLI client)\n  - There must be a local mysql server listening on `127.0.0.1:3306`, and an active user with no password that can be connected through this TCP address.\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Schema Mappings in TOML Configuration\nDESCRIPTION: Example of defining metric expressions in the TiDB configuration file (tidb.toml) to map PromQL expressions to system tables in the metrics_schema database.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# tidb.toml\n[metrics_schema]\nqps = `sum(rate(tidb_server_query_total[$INTERVAL] offset $OFFSET_TIME)) by (result)`\nmemory_usage = `process_resident_memory_bytes{job=\"tidb\"}`\ngoroutines = `rate(go_gc_duration_seconds_sum{job=\"tidb\"}[$INTERVAL] offset $OFFSET_TIME)`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Write Conflict in Pessimistic Transactions with Lazy Constraint Checking\nDESCRIPTION: This SQL example shows a potential issue where success rate may drop due to write conflict checks when using lazy constraint checking. It demonstrates how a transaction that would succeed with immediate constraint checking fails with lazy checking due to snapshot isolation requirements.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-08-04-pessimistic-lazy-constraint-check.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/* init */ CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY);\n/* init */ INSERT INTO t1 VALUES (1);\n\n/* s1 */ BEGIN PESSIMISTIC;\n/* s2 */ DELETE FROM t1 WHERE id = 1;\n/* s1 */ INSERT INTO t1 VALUES (1);\n/* s1 */ COMMIT;\n```\n\n----------------------------------------\n\nTITLE: Quick Start Guide Using Docker Compose for BR\nDESCRIPTION: A comprehensive tutorial showing how to set up a TiDB cluster using docker-compose, load test data, back up and restore data using BR, and test with S3 compatible storage (MinIO).\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Start TiDB cluster\ndocker-compose -f docker-compose.yaml rm -s -v && \\\ndocker-compose -f docker-compose.yaml build && \\\ndocker-compose -f docker-compose.yaml up --remove-orphans\n\n# Attach to control container to run BR\ndocker exec -it br_control_1 bash\n\n# Load testing data to TiDB\ngo-ycsb load mysql -p workload=core \\\n    -p mysql.host=tidb -p mysql.port=4000 -p mysql.user=root \\\n    -p recordcount=100000 -p threadcount=100\n\n# How many rows do we get? 100000 rows.\nmysql -uroot -htidb -P4000 -E -e \"SELECT COUNT(*) FROM test.usertable\"\n\n# Build BR and backup!\nmake build && \\\nbin/br backup full --pd pd0:2379 --storage \"local:///data/backup/full\" \\\n    --log-file \"/logs/br_backup.log\"\n\n# Let's drop database.\nmysql -uroot -htidb -P4000 -E -e \"DROP DATABASE test; SHOW DATABASES;\"\n\n# Restore!\nbin/br restore full --pd pd0:2379 --storage \"local:///data/backup/full\" \\\n    --log-file \"/logs/br_restore.log\"\n\n# How many rows do we get again? Expected to be 100000 rows.\nmysql -uroot -htidb -P4000 -E -e \"SELECT COUNT(*) FROM test.usertable\"\n\n# Test S3 compatible storage (MinIO).\n# Create a bucket to save backup by mc (a MinIO Client).\nmc config host add minio $S3_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY && \\\nmc mb minio/mybucket\n\n# Backup to S3 compatible storage.\nbin/br backup full --pd pd0:2379 --storage \"s3://mybucket/full\" \\\n    --s3.endpoint=\"$S3_ENDPOINT\"\n\n# Drop database and restore!\nmysql -uroot -htidb -P4000 -E -e \"DROP DATABASE test; SHOW DATABASES;\" && \\\nbin/br restore full --pd pd0:2379 --storage \"s3://mybucket/full\" \\\n    --s3.endpoint=\"$S3_ENDPOINT\"\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for EBS Backup\nDESCRIPTION: JSON policy definition for AWS IAM role permissions required for EBS backup and restore operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\",\n                \"s3-object-lambda:*\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AttachVolume\",\n                \"ec2:CreateSnapshot\",\n                \"ec2:CreateTags\",\n                \"ec2:CreateVolume\",\n                \"ec2:DeleteSnapshot\",\n                \"ec2:DeleteTags\",\n                \"ec2:DeleteVolume\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeSnapshots\",\n                \"ec2:DescribeTags\",\n                \"ec2:DescribeVolumes\",\n                \"ec2:DetachVolume\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RestoreCtx and Default Flags in Go\nDESCRIPTION: Defines the RestoreCtx struct and DefaultRestoreFlags constant used to control SQL text restoration format. The context includes flags for string quotes, keyword case, name case, and name quoting styles.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-11-29-ast-to-sql-text.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// RestoreCtx is Restore context to hold flags and writer\ntype RestoreCtx struct {\n\tFlags RestoreFlags\n\tIn    io.Writer\n}\n\nconst DefaultRestoreFlags = RestoreStringSingleQuotes | RestoreKeyWordUppercase | RestoreNameBackQuotes\n```\n\n----------------------------------------\n\nTITLE: Defining PhysicalIndexMergeLookUpReader Structure in Go\nDESCRIPTION: Golang struct definition for the proposed IndexMergeLookUpReader operator that will handle different types of index merge operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// PhysicalIndexMergeLookUpReader\ntype PhysicalIndexMergeLookUpReader struct {\n\tphysicalSchemaProducer\n\n\t//Follow two plans flat to construct executor pb.\n\tIndexPlans []PhysicalPlan\n\tTablePlans []PhysicalPlan\n\n\tindexPlans []PhysicalPlan\n\ttablePlan PhysicalPlan\n\t\t\n\tIndexMergeType int\n}\n```\n\n----------------------------------------\n\nTITLE: Flush Operation Implementation\nDESCRIPTION: Shows the implementation of the flush operation for handling immutable memdb and creating new mutable memdb instances.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-01-09-pipelined-DML.md#2025-04-18_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nif there is no ongoing flush {\n    mark current active mutable memdb as immutable\n    go withRetry(flush(immutable memdb)())\n    new a memdb as current active mutable memdb (or reuse the other one)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TiDB Cluster with Docker Compose\nDESCRIPTION: Commands to clean up existing containers, rebuild, and start a fresh TiDB cluster using docker-compose for compatibility testing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/COMPATIBILITY_TEST.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose -f docker-compose.yaml rm -s -v && \\\ndocker-compose -f docker-compose.yaml build && \\\ndocker-compose -f docker-compose.yaml up --remove-orphans\n```\n\n----------------------------------------\n\nTITLE: Calculating Priority Score in TiDB's Auto-Statistics Queue in Go\nDESCRIPTION: Formula for calculating the priority score of a table for statistics updates. The score is a weighted sum of change ratio, table size, analysis interval, and special events like new indexes without statistics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-09-06-maintain-priority-queue-in-memory.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npriority_score = (0.6 * math.Log10(1 + ChangeRatio) +\n                  0.1 * (1 - math.Log10(1 + TableSize)) +\n                  0.3 * math.Log10(1 + math.Sqrt(AnalysisInterval)) +\n                  special_event[event])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Event Data to Timer Hook\nDESCRIPTION: Example demonstrating how to add custom event data to PreSchedEventResult for use in trigger actions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *MyTimerHook) OnPreSchedEvent(ctx context.Context, event api.TimerShedEvent) (api.PreSchedEventResult, error) {\n    if shouldDelaySchedule() {\n        return api.PreSchedEventResult{\n            EventData: []byte(\"mycustomeventdata\"),\n        }, nil\n    }   \n    return api.PreSchedEventResult{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: AST Visitor Interface Definition in Go\nDESCRIPTION: Definition of the Visitor interface used for traversing AST nodes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/parser/docs/quickstart.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Visitor interface {\n\tEnter(n Node) (node Node, skipChildren bool)\n\tLeave(n Node) (node Node, ok bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Function for File Prefix Verification in Go\nDESCRIPTION: Implements a helper function to verify file existence with specific prefixes. Used in implementing read-write lock patterns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-10-11-put-and-verify-transactions-for-external-storages.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (cx VerifyWriteContext) assertNoOtherOfPrefixExpect(pfx string, expect string) error {\n\tfileName := path.Base(pfx)\n\tdirName := path.Dir(pfx)\n\treturn cx.Storage.WalkDir(cx, &WalkOption{\n\t\tSubDir:    dirName,\n\t\tObjPrefix: fileName,\n\t}, func(path string, size int64) error {\n\t\tif path != expect {\n\t\t\treturn fmt.Errorf(\"there is conflict file %s\", path)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Row Storage Memory Layout Structure for Hash Join V2\nDESCRIPTION: Diagram showing the memory layout structure for row storage in the hash join implementation, including next_row_ptr, null_map, serialized_key/key_length, and row_data components.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-11-hash-join-v2.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|---------------------|-----------------|----------------------|-------------------------------|\n            |                   |                   |                           |\n            V                   V                   V                           V\n       next_row_ptr          null_map     serialized_key/key_length           row_data\n```\n\n----------------------------------------\n\nTITLE: Detecting Dual-Scoped System Variables in Go\nDESCRIPTION: Go script to detect system variables that are currently both instance and global scoped in TiDB. This helps identify variables that will require behavior changes.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-08-instance-scope.md#2025-04-18_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/pingcap/tidb/sessionctx/variable\"\n)\n\nfunc main() {\n\tfor _, v := range variable.GetSysVars() {\n\t\tif v.HasGlobalScope() && v.HasSessionScope() && (v.GetSession != nil || v.SetSession != nil) && (v.GetGlobal != nil || v.SetGlobal != nil) {\n\t\t\tfmt.Printf(\"%s\\n\", v.Name)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running IntegrationTest with Command-Line Options in Bash\nDESCRIPTION: This snippet shows the usage instructions for the run-tests.sh script, which is used to execute integration tests for TiDB. It includes various command-line options for specifying the TiDB server path, building test binaries, running specific tests, and setting paths for vendor and port generator.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ./run-tests.sh [options]\n\n    -h: Print this help message.\n\n    -s <tidb-server-path>: Use tidb-server in <tidb-server-path> for testing.\n                           eg. \"./run-tests.sh -s ./integrationtest_tidb-server\"\n\n    -b <y|Y|n|N>: \"y\" or \"Y\" for building test binaries [default \"y\" if this option is not specified].\n                  \"n\" or \"N\" for not to build.\n                  The building of tidb-server will be skiped if \"-s <tidb-server-path>\" is provided.\n\n    -r <test-name>|all: Run tests in file \"t/<test-name>.test\" and record result to file \"r/<test-name>.result\".\n                        \"all\" for running all tests and record their results.\n\n    -t <test-name>: Run tests in file \"t/<test-name>.test\".\n                    This option will be ignored if \"-r <test-name>\" is provided.\n                    Run all tests if this option is not provided.\n\n    -v <vendor-path>: Add <vendor-path> to $GOPATH.\n\n    -p <portgenerator-path>: Use port generator in <portgenerator-path> for generating port numbers.\n```\n\n----------------------------------------\n\nTITLE: Adding Shard Expressions for IN Conditions in Go\nDESCRIPTION: Adds tidb_shard expressions for IN conditions by processing each value in the IN list and creating combined conditions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc AddGcColumn4InCond(sctx sessionctx.Context,\n\tcols []*expression.Column,\n\taccessesCond []expression.Expression) ([]expression.Expression, error)\n```\n\n----------------------------------------\n\nTITLE: Querying with Mixed AND/OR Expressions in SQL\nDESCRIPTION: This example shows a complex WHERE clause with mixed AND and OR conditions. After implementing the shard index, such queries would no longer be able to use the index effectively, as the tidb_shard() expression is only added for all AND, all OR, or no expressions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM A WHERE ((a=100 and b = 100) or a = 200) and b = 300\n```\n\n----------------------------------------\n\nTITLE: BR Backup Command Examples in Bash\nDESCRIPTION: Command line examples for executing BR backup operations with AWS EBS integration and PD connectivity specifications.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbackup full --type=aws-ebs --pd \"172.16.2.1:2379\" -s \"s3:/bucket/backup_folder\" --volumes-file=backup.json\n```\n\n----------------------------------------\n\nTITLE: Current Table Creation Implementation in TiDB BR\nDESCRIPTION: The current implementation creates tables one-by-one, with each table creation triggering a schema version change. This approach becomes inefficient when restoring a large number of tables.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-10-backup-with-batch-create-table.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfor _, t := range tables {\n  RunInTxn(func(txn) {\n  m := meta.New(txn)\n  schemaVesrion := m.CreateTable(t)\n  m.UpdateSchema(schemaVersion)\n })\n```\n\n----------------------------------------\n\nTITLE: Defining Repertoire Types for Character Set Handling in Go\nDESCRIPTION: Defines constants and types for handling different character repertoires in TiDB's charset implementation. Includes ASCII, Extended, and Unicode repertoire types to classify character ranges.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-08-18-charsets.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Repertoire int\n\nconst (\n  // RepertoireASCII is pure ASCII and it's Unicode range: U+0000..U+007F\n  RepertoireASCII     Repertoire = 1\n  // RepertoireExtended is Extended characters and it's Unicode range: U+0080..U+FFFF\n  RepertoireExtended  Repertoire = 1 << 1\n  // RepertoireUnicode consists ASCII and EXTENDED, and it's Unicode range: U+0000..U+FFFF\n  RepertoireUnicode   Repertoire = ASCII | EXTENDED\n)\n```\n\n----------------------------------------\n\nTITLE: Supported Column Mapping Expressions in Go\nDESCRIPTION: Describes the supported expressions for column mapping, including adding prefixes and suffixes to string columns, and generating partition IDs for int64 columns. It details the structure of partition IDs and how schema and table names are constructed.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/util/column-mapping/README.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nadd prefix, with arguments[prefix]\n\nadd suffix, with arguments[suffix]\n\npartition id, with arguments [instance_id, prefix of schema, prefix of table, separator]\n[1:1 bit][2:9 bits][3:10 bits][4:44 bits] int64  (using default bits length)\n- 1: useless, no reason\n- 2: schema ID (schema suffix)\n- 3: table ID (table suffix)\n- 4: origin ID (>= 0, <= 17592186044415)\nAnd\n- schema = arguments[1] + arguments[3] + schema suffix    or    arguments[1]\n- table  = arguments[2] + arguments[3] + table suffix     or    arguments[2]\nThe separator argument defaults to an empty string if omitted.\n```\n\n----------------------------------------\n\nTITLE: SQL Example of REORGANIZE PARTITION Operation in TiDB\nDESCRIPTION: Example SQL demonstrating how to create a partitioned table and reorganize a partition. This shows splitting partition p0 (with values 1-5) into two new partitions p0a and p0b.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-29-reorganize-partition.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- table:\nCREATE TABLE t (a int) PARTITION BY LIST (a) (PARTITION p0 VALUES IN (1,2,3,4,5), PARTITION p1 VALUES IN (6,7,8,9,10));\n-- during alter operation:\nALTER TABLE t REORGANIZE PARTITION p0 INTO (PARTITION p0a VALUES IN (1,2,3), PARTITION p0b VALUES IN (4,5));\n```\n\n----------------------------------------\n\nTITLE: Wrapper Function for Adding Expression Prefix in Go\nDESCRIPTION: Go function that serves as a wrapper for adding expression prefix for shard indexes by preparing the necessary column information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (ds *DataSource) addExprPrefixCond(sc sessionctx.Context, path *util.AccessPath,\n\tconds []expression.Expression) ([]expression.Expression, error) {\n\tIdxCols, IdxColLens :=\n\t\texpression.IndexInfo2PrefixCols(ds.Columns, ds.schema.Columns, path.Index)\n\tif len(IdxCols) == 0 {\n\t\treturn conds, nil\n\t}\n\n\tadder := &exprPrefixAdder{\n\t\tsctx:      sc,\n\t\tOrigConds: conds,\n\t\tcols:      IdxCols,\n\t\tlengths:   IdxColLens,\n\t}\n\n\treturn adder.addExprPrefix4ShardIndex()\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Subquery in WHERE Clause in SQL\nDESCRIPTION: This example demonstrates a query with a subquery in the WHERE clause. After the shard index implementation, such queries would no longer be able to use the index effectively, as the tidb_shard() expression is not added to subquery clauses.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM A WHERE A.a IN (SELECT B.a FROM B WHERE B.a > 100)\n```\n\n----------------------------------------\n\nTITLE: String Builder Methods in Go\nDESCRIPTION: Methods from strings.Builder for efficiently building strings. These methods provide various ways to append data to a string builder, which is more efficient than string concatenation for building large strings.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/linter/errcheck/errcheck_excludes.txt#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n(*strings.Builder).WriteByte\n(*strings.Builder).WriteRune\n(*strings.Builder).WriteString\n(*strings.Builder).Write\n```\n\n----------------------------------------\n\nTITLE: Generating Go Embedded Files for TiDB Lightning Web Interface\nDESCRIPTION: Command to convert the built web app into Go code using vfsgen. This embeds the web interface files into the Go codebase for distribution.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/web/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# from `web/dist/*` produces `lightning/web/res_vfsdata.go`\nmake data_parsers\n```\n\n----------------------------------------\n\nTITLE: Disabling PD Scheduler Commands\nDESCRIPTION: Bash commands to disable various PD scheduling limits including merge, region, replica and hot-region scheduling to prevent peer replication during backup\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./pd-ctl --pd=http://127.0.0.1:2379 config set merge-schedule-limit 0\n./pd-ctl --pd=http://127.0.0.1:2379 config set region-schedule-limit 0\n./pd-ctl --pd=http://127.0.0.1:2379 config set replica-schedule-limit 0\n./pd-ctl --pd=http://127.0.0.1:2379 config set hot-region-schedule-limit 0\n```\n\n----------------------------------------\n\nTITLE: Setting up TiDB Prerequisites\nDESCRIPTION: Commands for preparing the test environment by downloading and setting up pd-server and tikv-server using TiUP.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/globalkilltest/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/globalkilltest\nmkdir -p bin\ntiup install pd:nightly tikv:nightly\ncp ~/.tiup/components/pd/$(ls ~/.tiup/components/pd | tail -1)/pd-server bin/\ncp ~/.tiup/components/tikv/$(ls ~/.tiup/components/tikv | tail -1)/tikv-server bin/\n```\n\n----------------------------------------\n\nTITLE: RowTable Structure Definition in Go for Hash Join V2\nDESCRIPTION: Go struct definition for the rowTable which stores data converted to row storage, containing meta information and segments of row data.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-11-hash-join-v2.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype rowTable struct {\n    meta     *tableMeta\n    segments []*rowTableSegment\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Process Flow\nDESCRIPTION: Outlines the commit process for handling remaining secondary keys and primary key operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-01-09-pipelined-DML.md#2025-04-18_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nfor remaining secondary keys in membuffer, make a group and flush. Wait until flush finishes.\nprewrite(update) PK, and get minCommitTS in PK\nget commit ts\ncommit PK\n// txn is considered committed now\nfor all SPK in membuffer,\n    commit SPK to TiKV\n    get SKs in this group, commit them\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionManager Interface for Internal Transaction Management in Go\nDESCRIPTION: Interface definition for managing internal sessions in TiDB, including methods to store, delete, and retrieve transaction start timestamps for internal sessions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-09-optimize-gc-for-internal-transaction.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype SessionManager interface {\n\t// Put the internal session pointer to the map in the SessionManager\n\tStoreInternalSession(se interface{})\n\t// Delete the internal session pointer from the map in the SessionManager\n\tDeleteInternalSession(se interface{})\n\t// Get all startTS of every transactions running in the current internal sessions\n\tGetInternalSessionStartTSList() []uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Generating DELETE Query for TTL in SQL\nDESCRIPTION: This SQL query is used to delete multiple expired rows in a single operation. It's part of the TTL delete process in TiDB, using a batch approach for efficient deletion.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-11-17-ttl-table.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nDELETE LOW_PRIORITY FROM t\nWHERE id in (1, 2, 3, ...) AND create_time < '2022-01-01 00:00:00';\n```\n\n----------------------------------------\n\nTITLE: Resource Closing Methods in Go\nDESCRIPTION: Various Close() methods from different packages for properly releasing resources. These methods are used to close files, network connections, database connections, and other resources that need proper cleanup.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/linter/errcheck/errcheck_excludes.txt#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n(*os.File).Close\n(io.Closer).Close\n(net.Conn).Close\n(*cloud.google.com/go/storage.Reader).Close\n(*google.golang.org/grpc.ClientConn).Close\n(*github.com/pingcap/tidb/util/sqlexec.RecordSet).Close\n(*github.com/pingcap/tidb/pkg/lightning/mydump.blockParser).Close\n(*github.com/pingcap/tidb/kv.Storage).Close\n(*database/sql.DB).Close\n(*database/sql.Rows).Close\n(*database/sql.Stmt).Close\n```\n\n----------------------------------------\n\nTITLE: Deleting a Timer in Go\nDESCRIPTION: Demonstrates how to delete a timer using its ID and handle the response indicating whether the timer existed.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nexist, err := client.DeleteTimer(ctx, timer.ID)\nif err != nil {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: 64-bit Connection ID Structure\nDESCRIPTION: Defines the bit layout for 64-bit connection IDs, including zero bit, serverID (22 bits), local connID (40 bits), and markup bit.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-01-global-kill.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  63 62                 41 40                                   1    0    \n +--+---------------------+--------------------------------------+------+\n |  |      serverID       |             local connID             |markup|\n |=0|       (22b)         |                 (40b)                |  =1  |\n +--+---------------------+--------------------------------------+------+\n```\n\n----------------------------------------\n\nTITLE: Backfill Worker Interface Definition in Go\nDESCRIPTION: Interface definitions for the backfill worker component including methods for task execution and lease management.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-09-19-distributed-ddl-reorg.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (w *backfillWorker) runTask(task *reorgBackfillTask) (result *backfillResult) {}\n// updatet reorg substask exec_id and exec_lease\nfunc (w *backfillWorker) updateLease(bfJob *BackfillJob) error{}\nfunc (w *backfillWorker) releaseLease() {}\n// return backfiller related info\nfunc (w *backfillWorker) String() string {}\n```\n\n----------------------------------------\n\nTITLE: Defining DATA_LOCK_WAITS Table Schema in Markdown\nDESCRIPTION: Markdown table defining the schema for the DATA_LOCK_WAITS table, which provides information about lock waits in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-26-lock-view.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      | Type       | Comment |\n|------------|------------|--------|\n| `KEY`      | `varchar`  | The key that's being waiting on |\n| `TRX_ID`   | `unsigned bigint` | The current transaction that's waiting for the lock |\n| `SQL_DIGEST` | `varchar(64)` | The digest of the SQL that's trying to acquire the lock |\n| `CURRENT_HOLDING_TRX_ID` | `unsigned bigint` | The transaction that's holding the lock and blocks the current transaction |\n```\n\n----------------------------------------\n\nTITLE: Defining File Info Protocol Buffer Schema\nDESCRIPTION: Protobuf message definition for DataFileInfo that stores metadata about backed up files including checksums, paths, timestamps, and region information.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-12-09-TiDB-log-based-incremental-backup.md#2025-04-18_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nenum FileType {\n    Delete = 0;\n    Put = 1;\n}\n\nmessage DataFileInfo {\n    // SHA256 of the file.\n    bytes sha_256 = 1;\n    // Path of the file.\n    string path = 2;\n    int64 number_of_entries = 3;\n    \n    /// Below are extra information of the file, for better filtering files.\n    // The min ts of the keys in the file.\n    uint64 min_ts = 4;\n    // The max ts of the keys in the file.\n    uint64 max_ts = 5;\n    // The resolved ts of the region when saving the file.\n    uint64 resolved_ts = 6;\n    // The region of the file.\n    int64 region_id = 7;\n    // The key range of the file.\n    // Encoded.\n    bytes start_key = 8;\n    bytes end_key = 9;\n    // The column family of the file.\n    string cf = 10;\n    // The operation type of the file.\n    FileType type = 11;\n\n    // Whether the data file contains meta keys(m prefixed keys) only.\n    bool is_meta = 12;\n    // The table ID of the file contains, when `is_meta` is true, would be ignored.\n    int64 table_id = 13;\n    \n    // It may support encrypting at future.\n    reserved \"iv\";\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Partial Use of Joint Index in SQL\nDESCRIPTION: This query shows a scenario where only part of a joint index is used in the WHERE clause. After implementing the shard index, such queries may become less efficient as the index might not be used at all.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM A WHERE A.a = 10\n```\n\n----------------------------------------\n\nTITLE: Querying Timers in Go\nDESCRIPTION: Demonstrates different methods to query timers including by key prefix, specific key, or timer ID.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// query timers with the specified key prefix\ntimers, err := client.GetTimers(context.TODO(), api.WithKeyPrefix(\"/your/timer/\"))\nif err != nil {\n\t// handle err ...\n}\n\n// query timer with the specified key\ntimer, err := client.GetTimerByKey(ctx, \"/your/timer/key\")\nif err != nil {\n    // handle err ...\n}\n\n// query timer with the specified id\ntimer, err := client.GetTimerByID(ctx, \"123\")\nif err != nil {\n    // handle err ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Timer Properties in Go\nDESCRIPTION: Shows how to update timer properties such as schedule policy and watermark using the client's UpdateTimer method.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/timer/README.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// update the schedule policy\nif err := client.UpdateTimer(ctx, timer.ID, api.WithSetSchedExpr(api.SchedEventCron, \"0 0 * * * *\")); err != nil {\n    // handle error\n}\n\n// update the watermark\nif err := client.UpdateTimer(ctx, timer.ID, api.WithSetWatermark(time.Now())); err != nil {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Logger in TiDB\nDESCRIPTION: Code reference showing the initialization of Logrus logger in TiDB's logutil package.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-21-unify-log-library.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Reference to code at: util/logutil/log.go#L261\n```\n\n----------------------------------------\n\nTITLE: Defining Dispatcher Interface in Go\nDESCRIPTION: Go interface definition for the Dispatcher component, which handles task runtime operations, monitoring, and execution flow.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-04-11-dist-task.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Dispatch defines the interface for operations inside a dispatcher.\ntype Dispatch interface {\n\t// Start enables dispatching and monitoring mechanisms.\n\tStart()\n\t// GetAllSchedulerIDs gets handles the task's all available instances.\n\tGetAllSchedulerIDs(ctx context.Context, gTaskID int64) ([]string, error)\n\t// Stop stops the dispatcher.\n\tStop()\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Placement Options Example\nDESCRIPTION: Demonstrates how to bypass placement policy validation using placement mode settings.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSET tidb_placement_mode='IGNORE';\nCREATE TABLE t3 (a int) PLACEMENT POLICY `mycompanypolicy`;\n```\n\n----------------------------------------\n\nTITLE: Analyzing TiDB Coprocessor Query Processing Logs\nDESCRIPTION: These log entries show coprocessor query processing times and metrics for different regions and stores in a TiDB cluster. They include information such as response time, transaction start timestamp, region ID, store address, and various scanning metrics.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_5\n\nLANGUAGE: log\nCODE:\n```\ntidb | 10.9.120.251:10080     | INFO  | [coprocessor.go:725] [\"[TIME_COP_PROCESS] resp_time:1.786978732s txnStartTS:412134239937495042 region_id:124 store_addr:10.9.82.29:20160 kv_process_ms:1002 scan_total_write:831929 scan_processed_write:831928 scan_total_data:0 scan_processed_data:0 scan_total_lock:1 scan_processed_lock:0\"]\n```\n\n----------------------------------------\n\nTITLE: Altering Existing Table to Use Placement Policy in SQL\nDESCRIPTION: Shows how to add a placement policy to an existing table using an ALTER TABLE statement.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-06-24-placement-rules-in-sql.md#2025-04-18_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t2 (\n\tid INT NOT NULL PRIMARY KEY,\n\tb VARCHAR(100)\n);\nALTER TABLE t2 PLACEMENT POLICY=`standardplacement`;\n```\n\n----------------------------------------\n\nTITLE: Step Rule Example\nDESCRIPTION: Shows how to use the step rule to generate incrementing values with a fixed step size.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./importer -t \"create table t(a int unique comment '[[step=2]]');\" -P 4000 -c 1 -n 10\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from t;\n+------+\n| a    |\n+------+\n|    0 |\n|    2 |\n|    4 |\n|    6 |\n|    8 |\n|   10 |\n|   12 |\n|   14 |\n|   16 |\n|   18 |\n+------+\n10 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Running BR Unit Tests Directly with Go Test Command\nDESCRIPTION: Complete sequence of commands to run BR unit tests directly using go test, including enabling and disabling failpoints which is required for proper testing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/tests/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake failpoint-enable\n\ngo test github.com/pingcap/tidb/br/pkg/cdclog --test.v --check.v --check.f TestColumn\n\nmake failpoint-disable\n```\n\n----------------------------------------\n\nTITLE: Running the Auto-Analyze Priority Calculator Test in Go\nDESCRIPTION: Command to run the test for the priority calculator in TiDB's auto-analyze feature. This executes the test in verbose mode and targets the specific package containing the calculator analysis test.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/statistics/handle/autoanalyze/priorityqueue/calculatoranalysis/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v ./pkg/statistics/handle/autoanalyze/priorityqueue/calculatoranalysis\n```\n\n----------------------------------------\n\nTITLE: Docker Setup Alternative\nDESCRIPTION: Alternative setup command using Docker environment to prepare binaries and run make automatically.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/globalkilltest/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tests/globalkilltest\n./up.sh\n```\n\n----------------------------------------\n\nTITLE: CreateIndexMergeIntersectionPath Function in Go\nDESCRIPTION: Golang function that creates the final index merge intersection path, handling the merging of partial paths and management of table filters.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Now, we just use all paths in partialPaths to generate a IndexMergeIntersection.\n// We also need to merge possible paths. \n// For example: \n//   index:  ix1(a)\n//   conditionï¼š a > 1 and a < 10\n//   we will get two partial paths and they all use index ix1. \n// IndexMergePath.tableFilters: \n//   <1> tableFilters\n//   <2> after merge operation, if any indexPath's tableFilter is not nil, we \n//       should add indexPath's tableFilter into IndexMergePath.tableFilters\nCreateIndexMergeIntersectionPath(partialPaths, tableFilters) {\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Forbidden Stale Read Behavior in TiDB\nDESCRIPTION: Illustrates an invalid combination of stale read commands that is not allowed by the system.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-22-stale-read.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nmysql> set transaction read only as of timestamp now(1);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from t as of timestamp now(2);\nERROR 8135 (HY000): invalid as of timestamp: can't use select as of while already set transaction as of\n```\n\n----------------------------------------\n\nTITLE: Creating SCHEMA_INDEX_USAGE Table in SQL\nDESCRIPTION: SQL statement to create the main system table for storing index usage statistics. The table tracks table ID, index ID, query count, rows selected, and last used timestamp.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-09-30-index-usage-information.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table SCHEMA_INDEX_USAGE (\n\tTABLE_ID bigint(21),\n\tINDEX_ID bigint(21),\n\tQUERY_COUNT BIGINT,\n\tROUWS_SELECTED BIGINT,\n\tLAST_USED_AT timestamp,\n\tPRIMARY KEY (SCHEMA_NAME, TABLE_NAME, INDEX_NAME)\n);\n```\n\n----------------------------------------\n\nTITLE: Example Query Workload SQL Statements\nDESCRIPTION: Sample SQL queries used to demonstrate the index recommendation process for a table with multiple columns.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-05-index-advisor.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n- Query1: SELECT COUNT(*) FROM t1 where a = 1 and b = 5\n- Query2: SELECT a FROM t1 ORDER BY c limit 10 \n- Query3: DELETE FROM t1 WHERE a = 1 AND d = 1\n```\n\n----------------------------------------\n\nTITLE: TiDB SQL Execution Function for Test Environments\nDESCRIPTION: Go function that executes SQL statements in TiDB's test environment. This method can be adapted for browser use to provide an interface between the SQL terminal and the TiDB kernel.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-18-tidb-with-wasm.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Exec executes a sql statement.\nfunc (tk *TestKit) Exec(sql string, args ...interface{}) (sqlexec.RecordSet, error) {\n    var err error\n    if tk.Se == nil {\n        tk.Se, err = session.CreateSession4Test(tk.store)\n        tk.c.Assert(err, check.IsNil)\n        id := atomic.AddUint64(&connectionID, 1)\n        tk.Se.SetConnectionID(id)\n    }\n    ctx := context.Background()\n    if len(args) == 0 {\n        var rss []sqlexec.RecordSet\n        rss, err = tk.Se.Execute(ctx, sql)\n        if err == nil && len(rss) > 0 {\n            return rss[0], nil\n        }\n        return nil, errors.Trace(err)\n    }\n    stmtID, _, _, err := tk.Se.PrepareStmt(sql)\n    if err != nil {\n        return nil, errors.Trace(err)\n    }\n    params := make([]types.Datum, len(args))\n    for i := 0; i < len(params); i++ {\n        params[i] = types.NewDatum(args[i])\n    }\n    rs, err := tk.Se.ExecutePreparedStmt(ctx, stmtID, params)\n    if err != nil {\n        return nil, errors.Trace(err)\n    }\n    err = tk.Se.DropPreparedStmt(stmtID)\n    if err != nil {\n        return nil, errors.Trace(err)\n    }\n    return rs, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TiDB Components with tiup in Bash\nDESCRIPTION: This snippet demonstrates how to use tiup to download and install TiDB cluster components, then link them to the bin directory for integration testing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/tests/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster_version=v8.1.0 # change to the version you need\ntiup install tidb:$cluster_version tikv:$cluster_version pd:$cluster_version tiflash:$cluster_version\nln -s ~/.tiup/components/tidb/$cluster_version/tidb-server bin/tidb-server\nln -s ~/.tiup/components/tikv/$cluster_version/tikv-server bin/tikv-server\nln -s ~/.tiup/components/pd/$cluster_version/pd-server bin/pd-server\nln -s ~/.tiup/components/tiflash/$cluster_version/tiflash/tiflash bin/tiflash\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Security Context Configuration\nDESCRIPTION: Example of how to configure the security context in Kubernetes to add SYS_NICE capability for the parser test container.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/image/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  capabilities:\n    add: [\"SYS_NICE\"]\n```\n\n----------------------------------------\n\nTITLE: TiKV-PD Protocol Definition\nDESCRIPTION: Protobuf message definitions for snapshot recovery communication between TiKV and PD, including request and response structures.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    message IsSnapshotRecoveringRequest {\n        RequestHeader header = 1;\n    }\n\n    message IsSnapshotRecoveringResponse {\n        ResponseHeader header = 1;\n        bool marked = 2;\n    }\n    rpc IsSnapshotRecovering(IsSnapshotRecoveringRequest) returns (IsSnapshotRecoveringResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Restore SQL Syntax with Options in TiDB\nDESCRIPTION: Demonstrates a restore operation with additional options like rate limiting and data source parameters in TiDB.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-04-20-brie.md#2025-04-18_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRESTORE DATABASE *\n    FROM 's3://storage/url?access-key=AAAAA&secret-access-key=SSSSS&force-path-style=1&endpoint=http://10.0.1.55:8888'\n    RATE_LIMIT = 512 MB/SECOND;\n```\n\n----------------------------------------\n\nTITLE: Query Transformation for Partitioned Tables in TiDB\nDESCRIPTION: Example showing how a simple query on a partitioned table is logically transformed into a UNION ALL of queries against individual partitions with their respective constraints.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-10-19-table-partition.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from (union all\nselect * from p1 where id < 10\nselect * from p2 where id < 20\nselect * from p3 where id < 30)\n```\n\n----------------------------------------\n\nTITLE: Querying with ORDER BY Clause in SQL\nDESCRIPTION: This example shows an ORDER BY query that would lose its ability to use the index after the shard index implementation. The result would be that ordering needs to be performed in the tidb-server, potentially impacting performance.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a FROM A ORDER BY a\n```\n\n----------------------------------------\n\nTITLE: Transformation Rule Interface in Go\nDESCRIPTION: Interface definition for transformation rules that can be applied during the exploration phase, including methods to get patterns, match expressions, and transform expressions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-08-29-new-planner.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype transformation interface {\n\tgetpattern() *Pattern\n\tmatch(expr *ExprIter) (matched bool, err error)\n\tonTransform(old *ExprIter) (new *GroupExpr, eraseOld bool, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Test Container Capabilities\nDESCRIPTION: Command example for running the parser_test container with required SYS_NICE capability. The container needs special permissions to execute MySQL 8.x parser tests.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/image/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker --cap-add=sys_nice\n```\n\n----------------------------------------\n\nTITLE: Running Regression Tests\nDESCRIPTION: Commands for executing regression tests in the Integration Test environment.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/globalkilltest/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tests/globalkilltest\nmake\n./run-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Group Manager and Limiter in Rust\nDESCRIPTION: Rust code defining the ResourceGroupManager, ResourceGroup, and ResourceLimiter structs for managing background task resource control in TiKV.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-08-24-background-tasks-control.md#2025-04-18_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nstruct ResourceGroupManager {\n    groups: Map<String, ResourceGroup>,\n}\n\nstruct ResourceGroup {\n    settings: PbResourceGroupSetting,\n    limiter: Option<Arc<ResourceLimiter>>,\n}\n\nimpl ResourceGroupManager {\n    pub fn get_resource_limiter(&self, group_name: &str, task_type: &str) -> Option<Arc<ResourceLimiter>> {\n        ...\n    }\n}\n\nstruct ResourceLimiter {\n    cpu_limiter: AsyncRateLimiter,\n    io_limiter: AsyncRateLimiter,\n}\n\nimpl ResourceLimiter {\n    pub fn consume(&self, cpu_time: Duration, io_bytes: u64) -> Duration {\n        let cpu_dur = self.cpu_limiter.consume(cpu_time.as_micros());\n        let io_dur = self.io_limiter.consume(io_bytes);\n        cpu_dur.max(io_dur)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BR Restore Command Examples in Bash\nDESCRIPTION: Command line examples for BR restore operations including volume preparation and recovery phases.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-07-03-block-storage-snapshot-based-backup-restore.md#2025-04-18_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbr restore full --type=aws-ebs --prepare --pd \"172.16.2.1:2379\" -s \"s3:///us-west-2/meta/&sk=xx...\" --output=topology.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nbr restore full --type=aws-ebs --pd \"172.16.2.1:2379\" -s \"s3:///us-west-2/meta/&sk=xx...\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration\nDESCRIPTION: JSON configuration for setting up TiDB server debugging in Visual Studio Code, including program path and config file arguments.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug TiDB With Default Config\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileWorkspaceFolder}/cmd/tidb-server\",\n            \"args\": [\"--config=${fileWorkspaceFolder}/pkg/config/config.toml.example\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with JOIN Condition in SQL\nDESCRIPTION: This snippet illustrates a JOIN query where the index would no longer be used after implementing the shard index. The tidb_shard() expression is not added to the ON clause, making the index ineffective for such join operations.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-01-04-integer-shard-index.md#2025-04-18_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM B JOIN A ON B.a = A.a\n```\n\n----------------------------------------\n\nTITLE: Automatic Statistics Recalculation in MySQL (C++)\nDESCRIPTION: This snippet demonstrates how MySQL handles automatic statistics recalculation. It checks if the number of modified rows exceeds 10% of the total rows, and if so, adds the table to a recalculation pool for background processing.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2023-11-29-priority-queue-for-auto-analyze.md#2025-04-18_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nif (counter > n_rows / 10) {\n    dict_stats_recalc_pool_add(table);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flame Graph for TiKV using command-line tools\nDESCRIPTION: Commands for collecting performance data from TiKV processes and generating a flame graph using perf and FlameGraph tools. This involves recording performance data, converting it to the appropriate format, and generating an SVG visualization.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nperf record -F 99 -p proc_pid -g -- sleep 60\nperf script > out.perf\n/opt/FlameGraph/stackcollapse-perf.pl out.perf > out.folded\n/opt/FlameGraph/flamegraph.pl out.folded > cpu.svg\n```\n\n----------------------------------------\n\nTITLE: Analyzing TiKV Slow Query Logs\nDESCRIPTION: These log entries from TiKV stores provide detailed metrics for slow queries, including internal key and delete counts, block cache hits, read counts and bytes, scan ranges and operations, and processing times for different regions.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_6\n\nLANGUAGE: log\nCODE:\n```\ntikv | 10.9.82.29:20180       | WARN  | [tracker.rs:150] [slow-query] [internal_key_skipped_count=831928] [internal_delete_skipped_count=0] [block_cache_hit_count=17] [block_read_count=1810] [block_read_byte=114945337] [scan_first_range=\"Some(start: 74800000000000002B5F728000000000130A96 end: 74800000000000002B5F728000000000196372)\"] [scan_ranges=1] [scan_iter_processed=831928] [scan_iter_ops=831930] [scan_is_desc=false] [tag=select] [table_id=43] [txn_start_ts=412134239937495042] [wait_time=1ms] [total_process_time=1.001s] [peer_id=ipv4:10.9.120.251:47968] [region_id=100]\n```\n\n----------------------------------------\n\nTITLE: IndexMerge Cost Model Type 3 Calculations\nDESCRIPTION: Cost model calculations for IndexMergeType 3, using both totalRowCount and mergedRowCount for various cost components.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-04-11-indexmerge.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nIO Cost = (totalRowCount + mergedRowCount) * scanFactor\nNetwork Cost = (totalRowCount + mergedRowCount) * networkFactor\nCpu Memory Cost = totalRowCount * cpuFactor + mergedRowCount * memoryFactor\n```\n\n----------------------------------------\n\nTITLE: Triggering TiDB CI Pipelines with PR Comments\nDESCRIPTION: Command examples for triggering different CI pipelines in TiDB via PR comments. The table shows pipeline names, trigger commands, test descriptions, and whether they run automatically.\nSOURCE: https://github.com/pingcap/tidb/blob/master/ci.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ci pipeline                     | Commands                                | Tests                                                        | Auto Trigger |\n| ------------------------------- | --------------------------------------- | ------------------------------------------------------------ | ------------ |\n| build                           | `/test build`                           | Build binaries.                                              | Yes          |\n| check-dev                       | `/test check-dev`                       | Some common check tasks including `lint`, `tidy` etc         | Yes          |\n| check-dev2                      | `/test check-dev2`                      | All realtikv tests in `tests/realtikvtest`                   | Yes          |\n| mysql-test                      | `/test mysql-test`                      | All mysql tests in PingCAP-QE/tidb-test `ddl_test`           | Yes          |\n| unit-test                       | `/test unit-test`                       | All unit tests                                               | Yes          |\n| pull-integration-ddl-test       | `/test pull-integration-ddl-test`       | All ddl tests in PingCAP-QE/tidb-test `ddl_test`             | Yes          |\n| pull-mysql-client-test          | `/test pull-mysql-client-test`          | MySQL client tests in PingCAP-QE/tidb-test                   | Yes          |\n| pull-br-integration-test        | `/test pull-br-integration-test`        | All br integration test in `br/tests`                        | No           |\n| pull-lightning-integration-test | `/test pull-lightning-integration-test` | All lightning integration tests in `br/tests`                | No           |\n| pull-common-test                | `/test pull-common-test`                | Some ORM tests performed through the unistore.               | No           |\n| pull-e2e-test                   | `/test pull-e2e-test`                   | E2e tests in `tests/globalkilltest` and `tests/graceshutdown` | No           |\n| pull-integration-common-test    | `/test pull-integration-common-test`    | Some ORM tests performed through the tikv                    | No           |\n| pull-integration-copr-test      | `/test pull-integration-copr-test`      | Coprocessor tests in [tikv/copr-test](https://github.com/tikv/copr-test) | No           |\n| pull-integration-nodejs-test    | `/test pull-integration-nodejs-test`    | Node.js ORM tests in PingCAP-QE/tidb-test                    | No           |\n| pull-integration-jdbc-test      | `/test pull-integration-jdbc-test`      | All JDBC tests in PingCAP-QE/tidb-test                       | No           |\n| pull-integration-mysql-test     | `/test pull-integration-mysql-test`     | All mysql tests in PingCAP-QE/tidb-test performed through the tikv | No           |\n| pull-sqllogic-test              | `/test pull-sqllogic-test`              | SQL logic tests in PingCAP-QE/tidb-test                      | No           |\n| pull-tiflash-test               | `/test pull-tiflash-test`               | TiFlash tests in pingcap/tiflash `tests/docker/`             | No           |\n```\n\n----------------------------------------\n\nTITLE: Go Standard Library Formatting and Scanning Functions\nDESCRIPTION: Functions from the fmt package for formatted printing to writers and scanning formatted text. These handle writing formatted output to io.Writers and extracting formatted values from strings.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/linter/errcheck/errcheck_excludes.txt#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Fprint\nfmt.Fprintf\nfmt.Fprintln\nfmt.Sscanf\n```\n\n----------------------------------------\n\nTITLE: Building BR Component - Make Command\nDESCRIPTION: Command to build the BR binary using make\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake build_br\n```\n\n----------------------------------------\n\nTITLE: Cherry-pick Process for Maintaining Dumpling in Both Repositories\nDESCRIPTION: Git operations to cherry-pick commits from the TiDB repository to the separate Dumpling repository during the transition period. This allows for maintaining both repositories while migrating to the monorepo structure.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-09-29-merge-dumpling-into-tidb.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit subtree split --prefix=dumpling -b <SPLIT_BRANCH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <SPLIT_BRANCH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push <DUMPLING_REPO_REMOTE> <COMMIT_SHA>:refs/heads/<SPLIT_BRANCH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch origin <SPLIT_BRANCH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <pick_from_tidb>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick <COMMIT_SHA>\n```\n\n----------------------------------------\n\nTITLE: Set Rule Example\nDESCRIPTION: Demonstrates using the set rule to generate values from a predefined set of options.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./importer -t \"create table t(a int comment '[[set=1,2,3]]');\" -P 4000 -c 1 -n 10\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from t;\n+------+\n| a    |\n+------+\n|    3 |\n|    3 |\n|    3 |\n|    2 |\n|    1 |\n|    3 |\n|    3 |\n|    2 |\n|    1 |\n|    1 |\n+------+\n10 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using RegisterFactory for Dynamic TiDB Extension Registration\nDESCRIPTION: Using RegisterFactory to dynamically determine extension options based on global configuration. This approach allows for flexible extension behavior based on runtime configuration.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/extension/README.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\terr := extension.RegisterFactory(\"example\", func() ([]extension.Option, error) {\n\t\tcfg := config.GetGlobalConfig()\n\t\tvar factory func() *extension.SessionHandler\n\t\tif cfg.SomeFlag {\n\t\t\tfactory = createSessionHandler1\n\t\t} else {\n\t\t\tfactory = createSessionHandler2\n\t\t}\n\n\t\treturn []extension.Option{\n\t\t\textension.WithSessionHandlerFactory(factory),\n\t\t}, nil\n\t})\n\tterror.MustNil(err)\n```\n\n----------------------------------------\n\nTITLE: Building TiDB Lightning Web Interface with make\nDESCRIPTION: Alternative command to build the TiDB Lightning web interface using make from the parent directory. Achieves the same result as the npm commands.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/web/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# from `lightning/web/src/*` produces `lightning/web/dist/*`\nmake lightning_web\n```\n\n----------------------------------------\n\nTITLE: Buffer Flushing in Go\nDESCRIPTION: Method to flush buffered data from a bufio.Writer to its underlying writer. This ensures that any buffered data is written to the underlying io.Writer.\nSOURCE: https://github.com/pingcap/tidb/blob/master/build/linter/errcheck/errcheck_excludes.txt#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n(*bufio.Writer).Flush\n```\n\n----------------------------------------\n\nTITLE: Privilege Constants in Documentation\nDESCRIPTION: Privilege constants referenced in the documentation for user management.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2024-05-10-extension-authentication-plugin.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSUPER_USER\nRESTRICTED_USER_ADMIN\n```\n\n----------------------------------------\n\nTITLE: Error Codes in Markdown Format\nDESCRIPTION: Example showing error code definitions in Markdown format with hierarchical structure using headers.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-standardize-error-codes-and-messages.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Code: 8005\n### Error\nWrite Conflict, txnStartTS is stale\n### Description\nA certain Raft Group is not available, such as the number of replicas is not enough.\nThis error usually occurs when the TiKV server is busy or the TiKV node is down.\n### Workaround\nCheck whether `tidb_disable_txn_auto_retry` is set to `on`. If so, set it to `off`; if it is already `off`, increase the value of `tidb_retry_limit` until the error no longer occurs.\n\n## Code: 9005\n### Error\nRegion is unavailable\n### Description\nA certain Raft Group is not available, such as the number of replicas is not enough.\nThis error usually occurs when the TiKV server is busy or the TiKV node is down.\n### Workaround\nCheck the status, monitoring data and log of the TiKV server.\n```\n\n----------------------------------------\n\nTITLE: Setting TZ Environment Variable in Shell\nDESCRIPTION: This command demonstrates how to set the TZ environment variable in a shell environment. It's provided as an example of how users can set the timezone manually if needed.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2018-09-10-adding-tz-env.md#2025-04-18_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport TZ=\"Asia/Shanghai\"\n```\n\n----------------------------------------\n\nTITLE: CTE Executor Structs - Go\nDESCRIPTION: Definition of executor structures for CTE implementation including main executor and table reader\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-18-common-table-expression.md#2025-04-18_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype CTEExec struct {\n\texec.BaseExecutor\n\n\tseedExec      Executor\n\trecursiveExec Executor\n\n\tresTbl     cteutil.Storage\n\titerInTbl  cteutil.Storage\n\titerOutTbl cteutil.Storage\n\n\thashTbl baseHashTable\n}\n\ntype CTETableReaderExec struct {\n\texec.BaseExecutor\n\n\titerInTbl cteutil.Storage\n\tchkIdx    int\n\tcurIter   int\n}\n```\n\n----------------------------------------\n\nTITLE: Building TiDB Lightning for Web Development\nDESCRIPTION: Command to build a development version of TiDB Lightning that reads directly from the dist folder, useful for web development without recompiling Go code.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/web/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake build_lightning_for_web\n```\n\n----------------------------------------\n\nTITLE: Mounting Missing File System Functions for WebAssembly in Browser\nDESCRIPTION: Implementation of unimplemented file system functions to prevent crashes when running WebAssembly in a browser environment. This code mounts necessary fs functions before running the WebAssembly instance.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-18-tidb-with-wasm.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction unimplemented(callback) {\n    const err = new Error(\"not implemented\");\n    err.code = \"ENOSYS\";\n    callback(err);\n}\nfunction unimplemented1(_1, callback) { unimplemented(callback); }\nfunction unimplemented2(_1, _2, callback) { unimplemented(callback); }\n\nfs.stat = unimplemented1;\nfs.lstat = unimplemented1;\nfs.unlink = unimplemented1;\nfs.rmdir = unimplemented1;\nfs.mkdir = unimplemented2;\ngo.run(result.instance);\n```\n\n----------------------------------------\n\nTITLE: Error Codes in JSON Format\nDESCRIPTION: Alternative format showing error code definitions using JSON, demonstrating the same error information structured as a JSON array.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2020-05-08-standardize-error-codes-and-messages.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"code\": 8005,\n        \"error\": \"Write Conflict, txnStartTS is stale\",\n        \"description\": \"Transactions in TiDB encounter write conflicts.\",\n        \"workaround\": \"Check whether `tidb_disable_txn_auto_retry` is set to `on`. If so, set it to `off`; if it is already `off`, increase the value of `tidb_retry_limit` until the error no longer occurs.\"\n    },\n    {\n        \"code\": 9005,\n        \"error\": \"Region is unavailable\",\n        \"description\": \"A certain Raft Group is not available, such as the number of replicas is not enough.\\nThis error usually occurs when the TiKV server is busy or the TiKV node is down.\",\n        \"workaround\": \"Check the status, monitoring data and log of the TiKV server.\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Diagnostic Data Flow in TiDB System\nDESCRIPTION: A diagram showing the four-layer architecture for TiDB diagnostics, including L1 (metrics collection), L2 (service interfaces), L3 (TiDB aggregation), and L4 (diagnosis framework with rules).\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2019-11-14-tidb-builtin-diagnostics-zh_CN.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+-L1--------------+             +-L3-----+\n| +-------------+ |             |        |\n| |   Metrics   | |             |        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| |   Disk IO   | +---L2:gRPC-->+        |\n| +-------------+ |             |        |\n| +-------------+ |             |  TiDB  |\n| |  Network IO | |             |        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| |   Hardware  | +---L2:HTTP-->+        |\n| +-------------+ |             |        |\n| +-------------+ |             |        |\n| | System Info | |             |        |\n| +-------------+ |             |        |\n+-----------------+             +---+----+\n                                    | \n                   +---infoschema---+ \n                   |                  \n                   v                  \n+-L4---------------+---------------------+\n|                                        |\n|          Diagnosis Framework           |\n|                                        |\n| +---------+ +---------+  +---------+   |\n| | rule1   | |  rule2  |  |  rule3  |   |\n| +---------+ +---------+  +---------+   |\n+----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Example - Feature Addition\nDESCRIPTION: Example showing the proper format for commit messages when adding a new feature or comment\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrestore: add comment for variable declaration\n\nImprove documentation.\n```\n\n----------------------------------------\n\nTITLE: Building TiDB-Lightning Binary\nDESCRIPTION: Commands to build the TiDB-Lightning binary from source code. Requires Go version 1.16 or higher. The resulting binary will be placed in the bin directory.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../tidb\n$ make build_lightning\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format - Template\nDESCRIPTION: Formal template for structuring git commit messages with subsystem, change description, and rationale\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>(optional)\n```\n\n----------------------------------------\n\nTITLE: GlobalKillTest Usage Commands and Options\nDESCRIPTION: Command-line options and parameters for running the GlobalKillTest tool, including configuration for log levels, server ports, and timeout settings.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/globalkilltest/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ./run-tests.sh [options]\n\n    -h: Print this help message.\n\n    -L <info|warn|error>: Log level of testing. Defaults to \"info\".\n\n    --server_log_level <info|warn|error>: Log level of TiDB server. Defaults to \"info\".\n    \n    --tmp <temporary path>: Temporary files path. Defaults to \"/tmp/tidb_globalkilltest\".\n\n    -s <tidb-server-path>: Use tidb-server in <tidb-server-path> for testing.\n                           Defaults to \"bin/globalkilltest_tidb-server\".\n\n    --tidb_start_port <port>: First TiDB server listening port. port ~ port+2 will be used.\n                              Defaults to \"5000\".\n\n    --tidb_status_port <port>: First TiDB server status listening port. port ~ port+2 will be used.\n                               Defaults to \"8000\".\n\n    --pd <pd-client-path>: PD client path, ip:port list separated by comma.\n                           Defaults to \"127.0.0.1:2379\".\n\n    --pd_proxy_port <port>: PD proxy port. PD proxy is used to simulate lost connection between TiDB and PD.\n                            Defaults to \"3379\".\n\n    --conn_lost <timeout in seconds>: Lost connection to PD timeout,\n                                      should be the same as TiDB ldflag <ldflagLostConnectionToPDTimeout>.\n                                      See tidb/Makefile for detail.\n                                      Defaults to \"5\".\n\n    --conn_restored <timeout in seconds>: Time to check PD connection restored,\n                                          should be the same as TiDB ldflag \n                                          <ldflagServerIDTimeToCheckPDConnectionRestored>.\n                                          See tidb/Makefile for detail.\n                                          Defaults to \"1\".\n```\n\n----------------------------------------\n\nTITLE: Running TiDB Read-Only Tests\nDESCRIPTION: Command line output showing successful execution of read-only tests with 2 passing tests, taking approximately 2.15 seconds to complete.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/readonlytest/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go test\nOK: 2 passed\nPASS\nok      github.com/pingcap/tidb/tests/readonlytest      2.150s\n```\n\n----------------------------------------\n\nTITLE: Selecting Push Down Conditions in Go\nDESCRIPTION: This function determines which filter conditions should be pushed down to the table scan in TiFlash. It considers factors like selectivity, computational cost, and column coverage to optimize query performance.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-12-06-support-late-materialization.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc selectPushDownConditions(conditions []expression.Expression) []expression.Expression {\n    selectedConds := make([]expression.Expression, 0, len(conditions))\n    selectedColumnCount = 0\n    selectedSelectivity := 1.0\n    selectedIncome := 0.0\n\n    sortedConds = groupByColumnSortBySelectivity(conditions)\n    for _, condGroup := range sorted_conds {\n        mergedConds := append(selectedConds, condGroup...)\n        if withHeavyCostFunction(condGroup) {\n            continue\n        }\n        if isTooManyColumns(condGroup) {\n            continue\n        }\n        selectivity := physicalTableScan.tblColHists.Selectivity(mergedConds)\n        colCnt := columnCount(mergedConds)\n        income := (1 - selectivity) * (float64(totalColumnCount) - float64(colCnt))\n        if colCnt == selectedColumnCount || income > selectedIncome {\n            selectedConds = mergedConds\n            selectedColumnCount = colCnt\n            selectedIncome = income\n            selectedSelectivity = selectivity\n        }\n        if selectedSelectivity-selectivity < selectivityImproveThreshold {\n            break\n        }\n    }\n    return selectedConds\n}\n```\n\n----------------------------------------\n\nTITLE: Range Rule Example\nDESCRIPTION: Demonstrates using the range rule to generate random values within a specified range for a column.\nSOURCE: https://github.com/pingcap/tidb/blob/master/cmd/importer/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./importer -t \"create table t(a int comment '[[range=1,10]]');\" -P 4000 -c 1 -n 10\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from t;\n+------+\n| a    |\n+------+\n|    5 |\n|    6 |\n|    9 |\n|    5 |\n|    3 |\n|    3 |\n|   10 |\n|    9 |\n|    3 |\n|   10 |\n+------+\n10 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Generate Test Results Command\nDESCRIPTION: Shell command for generating new test results based on execution of specific test cases.\nSOURCE: https://github.com/pingcap/tidb/blob/master/tests/integrationtest/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/integrationtest\n./run-tests.sh -r [casename]\n```\n\n----------------------------------------\n\nTITLE: Plugin Framework Documentation Link\nDESCRIPTION: Markdown link to the TiDB plugin framework design documentation in the official repository.\nSOURCE: https://github.com/pingcap/tidb/blob/master/pkg/plugin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/pingcap/tidb/blob/master/docs/design/2018-12-10-plugin-framework.md\n```\n\n----------------------------------------\n\nTITLE: Building BR Component - Directory Navigation\nDESCRIPTION: Command to navigate to the TiDB directory before building BR\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ../tidb\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Query for Functional Dependency Example in TiDB\nDESCRIPTION: An example SQL query showing tables and a join operation that will be analyzed for functional dependencies. It creates two tables with related columns and performs a join with grouping, which demonstrates how functional dependencies are identified and utilized.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-03-16-functional-dependency.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t1(a int, c int)\ncreate table t2(a int, b int)\nexplain select t1.a, count(t2.b), t1.c from t1 join t2 on t2.a=t1.a where t1.c=1 group by t2.a;\n```\n\n----------------------------------------\n\nTITLE: Creating Local Temporary Table in TiDB SQL\nDESCRIPTION: SQL syntax for creating a local/session temporary table with optional engine specification. The table is only visible within the current session and is automatically dropped when the session ends.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2021-04-20-temporary-table.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMPORARY TABLE tbl_name (create_definition) \n[ENGINE=engine_name];\n\nDROP [TEMPORARY] TABLE tbl_name;\n```\n\n----------------------------------------\n\nTITLE: TiDB Schema Change Error Example\nDESCRIPTION: Shows how TiDB handles the same schema changes differently from MySQL, resulting in an error due to duplicate column name validation.\nSOURCE: https://github.com/pingcap/tidb/blob/master/docs/design/2022-04-15-multi-schema-change.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE t DROP COLUMN b, RENAME COLUMN a TO b, ADD INDEX i(b), DROP INDEX i;\nERROR 1060 (42S21): Duplicate column name 'b'\n```\n\n----------------------------------------\n\nTITLE: Running Specific Lightning Integration Tests in Shell\nDESCRIPTION: This snippet shows how to run specific integration tests for TiDB Lightning by setting the TEST_NAME environment variable before executing the run script.\nSOURCE: https://github.com/pingcap/tidb/blob/master/lightning/tests/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTEST_NAME=\"lightning_gcs lightning_view\" lightning/tests/run.sh\n```\n\n----------------------------------------\n\nTITLE: Running BR Compatibility Tests\nDESCRIPTION: Command to execute the compatibility test suite using the control container in the docker-compose setup.\nSOURCE: https://github.com/pingcap/tidb/blob/master/br/COMPATIBILITY_TEST.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose -f docker-compose.yaml control make compatibility_test\n```"
  }
]