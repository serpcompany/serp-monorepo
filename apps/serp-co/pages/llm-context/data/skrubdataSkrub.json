[
  {
    "owner": "skrub-data",
    "repo": "skrub",
    "content": "TITLE: Cleaning Tabular Data with Skrub in Python\nDESCRIPTION: This example shows how to use Skrub for cleaning tabular data. It demonstrates creating a TableCleaner object, fitting it to a pandas DataFrame, and then applying the cleaner to transform the data.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/examples/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom skrub import TableCleaner\n\n# Create a sample DataFrame\ndf = pd.DataFrame({\n    'Name': ['John doe', 'JANE  DOE', 'john Doe'],\n    'Age': ['25', '30', '35'],\n    'City': ['New York', 'Los Angeles', 'Chicago']\n})\n\n# Create a TableCleaner object\ncleaner = TableCleaner()\n\n# Fit the cleaner to the DataFrame\ncleaner.fit(df)\n\n# Use the fitted cleaner to transform the DataFrame\ncleaned_df = cleaner.transform(df)\nprint(cleaned_df)\n```\n\n----------------------------------------\n\nTITLE: Using skrub's tabular_learner for regression on employee salary data\nDESCRIPTION: This code snippet demonstrates how to use skrub to load a dataset of employee salaries, display a sample row, and use the tabular_learner with cross-validation to build a regression model. The high cross-validation scores show the effectiveness of skrub's automated pipeline.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom skrub.datasets import fetch_employee_salaries\ndataset = fetch_employee_salaries()\ndf = dataset.X\ny = dataset.y\ndf.iloc[0]\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.model_selection import cross_val_score\nfrom skrub import tabular_learner\ncross_val_score(tabular_learner('regressor'), df, y)\n```\n\n----------------------------------------\n\nTITLE: Importing Skrub TableVectorizer and tabular_learner\nDESCRIPTION: Shows how to import the TableVectorizer class and tabular_learner function from the skrub module. These are the main components discussed in the documentation for creating end-to-end predictive models on heterogeneous datasets.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/end_to_end_pipeline.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom skrub import TableVectorizer, tabular_learner\n```\n\n----------------------------------------\n\nTITLE: Cleaning Dirty Text with Skrub in Python\nDESCRIPTION: This snippet demonstrates how to use Skrub to clean dirty text data. It shows the process of creating a TextCleaner object, fitting it to sample data, and then transforming new data using the fitted cleaner.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/examples/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom skrub import TextCleaner\n\n# Create a TextCleaner object\ncleaner = TextCleaner()\n\n# Fit the cleaner to some sample data\ncleaner.fit([\"John doe\", \"JANE  DOE\", \"john Doe\"])\n\n# Use the fitted cleaner to transform new data\ncleaned_data = cleaner.transform([\"JOhn   doE\", \"Jane Doe\"])\nprint(cleaned_data)\n```\n\n----------------------------------------\n\nTITLE: Documentation Sections Template\nDESCRIPTION: Template showing standard sections used in comprehensive documentation including summaries, parameters, returns, examples and other metadata sections.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/_templates/numpydoc_docstring.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{index}}\n{{summary}}\n{{extended_summary}}\n{{parameters}}\n{{returns}}\n{{yields}}\n{{other_parameters}}\n{{attributes}}\n{{raises}}\n{{warns}}\n{{warnings}}\n{{see_also}}\n{{notes}}\n{{references}}\n{{examples}}\n{{methods}}\n```\n\n----------------------------------------\n\nTITLE: Installing skrub using pip\nDESCRIPTION: Simple command to install or update the skrub package using pip package manager. The -U flag ensures the latest version is installed.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install skrub -U\n```\n\n----------------------------------------\n\nTITLE: Installing skrub using conda\nDESCRIPTION: Command to install the skrub package using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nconda install -c conda-forge skrub\n```\n\n----------------------------------------\n\nTITLE: Installing skrub using mamba\nDESCRIPTION: Command to install the skrub package using mamba package manager from the conda-forge channel. Mamba is a faster alternative to conda.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmamba install -c conda-forge skrub\n```\n\n----------------------------------------\n\nTITLE: Installing skrub with deep learning dependencies using pip\nDESCRIPTION: Command to install skrub with optional deep learning dependencies (torch, transformers, sentence-transformers) needed for TextEncoder and similar functionality.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install skrub[transformers] -U\n```\n\n----------------------------------------\n\nTITLE: Installing skrub with deep learning dependencies using conda\nDESCRIPTION: Command to install skrub with optional deep learning dependencies (torch, transformers, sentence-transformers) using conda from the conda-forge channel.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ conda install -c conda-forge skrub[transformers]\n```\n\n----------------------------------------\n\nTITLE: Installing skrub with deep learning dependencies using mamba\nDESCRIPTION: Command to install skrub with optional deep learning dependencies (torch, transformers, sentence-transformers) using mamba from the conda-forge channel.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ mamba install -c conda-forge skrub[transformers]\n```\n\n----------------------------------------\n\nTITLE: Installing deep learning dependencies for skrub development\nDESCRIPTION: Command to install optional deep learning dependencies (torch, transformers, sentence-transformers) in development mode for TextEncoder functionality.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -e \".[transformers]\"\n```\n\n----------------------------------------\n\nTITLE: Creating conda environment for skrub development\nDESCRIPTION: Commands to create and activate a conda virtual environment for skrub development using Python 3.10 or later.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nconda create -n skrub python=3.10 # or any later python version\nconda activate skrub\n```\n\n----------------------------------------\n\nTITLE: Cloning skrub repository for development\nDESCRIPTION: Command to clone a forked skrub repository for local development. This is part of the contributor workflow.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/<YOUR_USERNAME>/skrub\ncd skrub\n```\n\n----------------------------------------\n\nTITLE: Performing Entity Resolution with Skrub in Python\nDESCRIPTION: This snippet illustrates how to use Skrub for entity resolution tasks. It shows the process of creating an EntityResolver object, fitting it to sample data, and then using it to resolve entities in new data.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/examples/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom skrub import EntityResolver\n\n# Create an EntityResolver object\nresolver = EntityResolver()\n\n# Fit the resolver to some sample data\nresolver.fit([\"John Doe\", \"John D.\", \"J. Doe\", \"Jane Doe\"])\n\n# Use the fitted resolver to resolve entities in new data\nresolved_entities = resolver.transform([\"John Doe\", \"John D\", \"Jane D.\"])\nprint(resolved_entities)\n```\n\n----------------------------------------\n\nTITLE: Adding upstream remote to skrub fork\nDESCRIPTION: Command to add the official skrub repository as an upstream remote to your fork, allowing you to pull the latest changes from the main repository.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ngit remote add upstream https://github.com/skrub-data/skrub.git\n```\n\n----------------------------------------\n\nTITLE: Running skrub test suite\nDESCRIPTION: Command to run the skrub test suite to ensure the development environment is correctly set up. The -s flag allows print statements to be displayed in terminal output.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\npytest -s skrub/tests\n```\n\n----------------------------------------\n\nTITLE: Setting up pre-commit hooks for skrub development\nDESCRIPTION: Command to install pre-commit hooks that automatically check code style consistency before commits are made.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_11\n\nLANGUAGE: console\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Configuring git blame to ignore specific revisions\nDESCRIPTION: Command to configure Git to ignore certain revisions in git blame, which helps when looking at historical changes in the codebase.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Table of Contents for Skrub User Guide in RST\nDESCRIPTION: A reStructuredText table of contents directive that outlines the main sections of the Skrub user guide, including the end-to-end pipeline, encoding, assembling, and cleaning functionalities.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/documentation.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   end_to_end_pipeline\n   encoding\n   assembling\n   cleaning\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: Sets up the documentation structure using Sphinx directives. Includes a main table of contents and a hidden navigation menu with links to installation, documentation, reference materials, examples, changelog, development guide, and contribution guidelines.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. title:: Home\n\n.. toctree::\n   :maxdepth: 2\n\n.. currentmodule:: skrub\n\n.. toctree::\n   :hidden:\n\n   install\n   documentation\n   reference/index\n   auto_examples/index\n   CHANGES\n   development\n   CONTRIBUTING\n```\n\n----------------------------------------\n\nTITLE: Including RST Directives for Documentation\nDESCRIPTION: ReStructuredText directives used to include CSS styling and create a table of contents with links to vision, about, and contributing documentation pages.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/development.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: includes/big_toc_css.rst\n\n.. toctree::\n\n    vision\n    about\n    CONTRIBUTING\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch in Git for skrub\nDESCRIPTION: Command to create a new branch for a minor version release of skrub. This creates a branch named after the version series (e.g., 0.2.X) from which release versions will be published.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 0.<version>.X\n```\n\n----------------------------------------\n\nTITLE: Committing and Tagging Version Changes in skrub\nDESCRIPTION: Commands to commit version changes and create a version tag in Git. This example commits the version bump to 0.2.0 and pushes the tag to the remote repository.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Bump to version 0.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Tag for skrub Release\nDESCRIPTION: Command to push a version tag to the remote Git repository. This creates a reference point for the specific release version.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing skrub in development mode\nDESCRIPTION: Command to install the local skrub package in editable mode with development dependencies, which allows changes to the source code to be immediately available without reinstallation.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\npip install -e \".[dev, lint, test]\"\n```\n\n----------------------------------------\n\nTITLE: Managing Documentation Symlinks for skrub\nDESCRIPTION: Commands for updating the 'stable' symlink in the documentation repository to point to the latest stable version. This involves unlinking the current symlink and creating a new one.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nunlink stable\n```\n\n----------------------------------------\n\nTITLE: Creating New Documentation Symlink for skrub\nDESCRIPTION: Command to create a new symlink named 'stable' pointing to the latest version of documentation. This ensures users are directed to the most recent stable documentation by default.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nln -s 0.2 stable\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packaging Tools for skrub\nDESCRIPTION: Command to install or upgrade the Python packages needed for building and publishing skrub. Twine is used for uploading packages to PyPI and setuptools is needed for building the distribution packages.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade twine setuptools\n```\n\n----------------------------------------\n\nTITLE: Building Distribution Packages for skrub\nDESCRIPTION: Command to build the source distribution and wheel packages for skrub. This creates the files that will be uploaded to PyPI in the dist directory.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py bdist_wheel sdist\n```\n\n----------------------------------------\n\nTITLE: Uploading skrub to Test PyPI\nDESCRIPTION: Command to upload the built distribution packages to the Test PyPI repository. This allows testing the package installation process before releasing to the official PyPI.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntwine upload dist/* --repository-url https://test.pypi.org/legacy/\n```\n\n----------------------------------------\n\nTITLE: Installing skrub from Test PyPI\nDESCRIPTION: Command to install the skrub package from the Test PyPI repository. This allows verification that the package can be successfully installed from PyPI before the official release.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install --index-url https://test.pypi.org/simple/ --extra-index-url https://test.pypi.org/simple/skrub\n```\n\n----------------------------------------\n\nTITLE: Installing Specific skrub Version for Testing\nDESCRIPTION: Command to install a specific version of skrub for testing. This ensures you're testing the newly released version rather than using a cached version.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install skrub==<version>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Skrub Benchmarks\nDESCRIPTION: This command installs the necessary packages for running skrub benchmarks, including the latest versions. It uses pip to install the benchmarks extra requirements.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/benchmarks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e --upgrade .[benchmarks]\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Commit for Benchmark Reproduction\nDESCRIPTION: This command allows users to checkout a specific commit hash to reproduce benchmark results from a particular point in time. It uses git to switch to the specified commit.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/benchmarks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <commit_hash>\n```\n\n----------------------------------------\n\nTITLE: Running a Skrub Benchmark\nDESCRIPTION: This command demonstrates how to run a specific benchmark in the skrub project. It executes a Python script with the '--run' argument to start the benchmark process.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/benchmarks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython bench_tablevectorizer_tuning.py --run\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js for JavaScript Testing in Ubuntu\nDESCRIPTION: Command to install Node.js on Ubuntu, which is required for running the Cypress JavaScript tests for table reports.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/skrub/_reporting/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Testing\nDESCRIPTION: Commands to navigate to the js_tests directory and install the required dependencies (mainly Cypress) using npm.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/skrub/_reporting/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd js_tests/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Interactively\nDESCRIPTION: Command to start Cypress in interactive mode, allowing tests to be run with a visual browser interface.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/skrub/_reporting/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cypress open\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Non-interactively\nDESCRIPTION: Command to run all Cypress tests in headless mode, which is suitable for CI environments and automated testing.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/skrub/_reporting/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cypress run\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation with Jinja2 Template\nDESCRIPTION: This Jinja2 template is used to generate Sphinx documentation for different Python object types. It includes conditional blocks for modules, functions, classes, and other types, applying appropriate Sphinx directives for each.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/_templates/base.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ objname | escape | underline(line=\"=\") }}\n\n{% if objtype == \"module\" -%}\n\n.. automodule:: {{ fullname }}\n\n{%- elif objtype == \"function\" -%}\n\n.. currentmodule:: {{ module }}\n\n.. autofunction:: {{ objname }}\n\n.. minigallery:: {{ module }}.{{ objname }}\n   :add-heading: Gallery examples\n   :heading-level: -\n\n{%- elif objtype == \"class\" -%}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :inherited-members:\n   :special-members: __call__\n   :exclude-members: get_metadata_routing, set_fit_request\n\n.. minigallery:: {{ module }}.{{ objname }} {% for meth in methods %}{{ module }}.{{ objname }}.{{ meth }} {% endfor %}\n   :add-heading: Gallery examples\n   :heading-level: -\n\n{%- else -%}\n\n.. currentmodule:: {{ module }}\n\n.. auto{{ objtype }}:: {{ objname }}\n\n{%- endif -%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass documentation template in reStructuredText\nDESCRIPTION: This template configures how a Python class should be documented in Sphinx. It uses variables for module and object names, creates underlined headers with the class name, and specifies that certain members ('skb' and '__call__') should be excluded from the documentation.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/_templates/expr_class.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{{ objname | escape | underline(line=\"=\") }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :exclude-members: skb, __call__\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Table of Contents in JavaScript\nDESCRIPTION: This JavaScript code adds interactivity to the table of contents, making it collapsible and providing visual cues for expandable sections. It uses jQuery to handle DOM manipulation and event listeners.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/includes/big_toc_css.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', function() {\n     (function($) {\n//Function to make the index toctree collapsible\n$(function () {\n    $('main .toctree-l2')\n        .click(function(event){\n            if (event.target.tagName.toLowerCase() != \"a\") {\n                if ($(this).children('ul').length > 0) {\n                     $(this).attr('data-content',\n                         (!$(this).children('ul').is(':hidden')) ? '\\u25ba' : '\\u25bc');\n                    $(this).children('ul').toggle();\n                }\n                return true; //Makes links clickable\n            }\n        })\n        .mousedown(function(event){ return false; }) //Firefox highlighting fix\n        .children('ul').hide();\n    // Initialize the values\n    $('main li.toctree-l2:not(:has(ul))').attr('data-content', '-');\n    $('main li.toctree-l2:has(ul)').attr('data-content', '\\u25ba');\n    $('main li.toctree-l2:has(ul)').css('cursor', 'pointer');\n\n    $('main .toctree-l2').hover(\n        function () {\n            if ($(this).children('ul').length > 0) {\n                $(this).css('background-color', '#88888844');\n                $(this).attr('data-content',\n                    (!$(this).children('ul').is(':hidden')) ? '\\u25bc' : '\\u25ba');\n            }\n            else {\n                $(this).css('background-color', '#88888844');\n            }\n        },\n        function () {\n            $(this).css('background-color', '#88888800');\n            if ($(this).children('ul').length > 0) {\n                $(this).attr('data-content',\n                    (!$(this).children('ul').is(':hidden')) ? '\\u25bc' : '\\u25ba');\n            }\n        }\n    );\n});\n     })(jQuery);\n });\n```\n\n----------------------------------------\n\nTITLE: Styling Table of Contents with CSS\nDESCRIPTION: This CSS code defines the visual appearance of the table of contents elements, including font sizes, padding, margins, and colors. It also includes styles for different levels of the table of contents hierarchy.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/includes/big_toc_css.rst#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmain li, div.body ul {\n    transition-duration: 0.2s;\n}\n\nmain li.toctree-l1 {\n    padding: 5px 0 0;\n    list-style-type: none;\n    font-size: 150%;\n    font-weight: normal;\n    margin-left: 0;\n    margin-bottom: 1.2em;\n    font-weight: bold;\n    }\n\nmain li.toctree-l1 > a {\n    margin-left: 0px;\n}\n\nmain li.toctree-l1 ul {\n    padding-inline-start: 0em;\n}\n\nmain li.toctree-l2 {\n    padding: 0.25em 0 0.25em 0 ;\n    list-style-type: none;\n    font-size: 85% ;\n    font-weight: normal;\n    margin-left: 0;\n}\n\nmain li.toctree-l2 ul {\n    padding-left: 30px ;\n}\n\nmain li.toctree-l2:before {\n    content: attr(data-content);\n    font-size: 1rem;\n    color: #777;\n    display: inline-block;\n    width: 1.5rem;\n    margin-left: -1.5rem;\n}\n\nmain li.toctree-l3 {\n    font-size: 88% ;\n    font-weight: normal;\n    margin-left: 0;\n}\n\nmain li.toctree-l4 {\n    font-size: 93% ;\n    font-weight: normal;\n    margin-left: 0;\n}\n\nmain div.topic li.toctree-l1 {\n    font-size: 100% ;\n    font-weight: bold;\n    background-color: transparent;\n    margin-bottom: 0;\n    margin-left: 1.5em;\n    display:inline;\n}\n\nmain div.topic p {\n    font-size: 90% ;\n    margin: 0.4ex;\n}\n\nmain div.topic p.topic-title {\n    display:inline;\n    font-size: 100% ;\n    margin-bottom: 0;\n}\n\nmin li {\n    list-style-type: none;\n}\n\nmain div.toctree-wrapper ul {\n    padding-left: 0;\n}\n\nmain li.toctree-l1 {\n    padding: 0 0 0.5em 0;\n    font-size: 150%;\n    font-weight: bold;\n}\n\nmain li.toctree-l2 {\n    font-size: 70%;\n    font-weight: normal;\n    margin-left: 30px;\n}\n\nmain li.toctree-l3 {\n    font-size: 85%;\n    font-weight: normal;\n    margin-left: 30px;\n}\n\nmain li.toctree-l4 {\n    margin-left: 30px;\n}\n```\n\n----------------------------------------\n\nTITLE: RST Module Declaration\nDESCRIPTION: Declares the current module namespace for the documentation\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/reference/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: skrub\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Header for Skrub Expressions\nDESCRIPTION: ReStructuredText markup defining a reference label and section header for Skrub expressions documentation.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/examples/expressions/GALLERY_HEADER.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _expressions_examples_ref:\n\nSkrub expressions\n=================\n```\n\n----------------------------------------\n\nTITLE: Results File Naming Format\nDESCRIPTION: The naming convention used for results files, using a name prefix followed by date in YYYYMMDD format and .parquet extension\nSOURCE: https://github.com/skrub-data/skrub/blob/main/benchmarks/results/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<name>-<YYYYMMDD>.parquet\n```\n\n----------------------------------------\n\nTITLE: Importing Skrub Module\nDESCRIPTION: Imports the skrub module to make its classes and functions available.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/CHANGES.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: skrub\n```\n\n----------------------------------------\n\nTITLE: Installing Dirty-cat Pre-release\nDESCRIPTION: Command for installing pre-release version 0.2.0a1 of Dirty-cat library manually.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/CHANGES.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install\n```\n\n----------------------------------------\n\nTITLE: Installing dirty-cat from PyPI\nDESCRIPTION: Command to install the pre-release version 0.2.0a1 of dirty-cat package using pip.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/CHANGES.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre dirty_cat==0.2.0a1\n```\n\n----------------------------------------\n\nTITLE: Installing dirty-cat from GitHub\nDESCRIPTION: Command to install the latest version of dirty-cat directly from its GitHub repository using pip.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/CHANGES.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/dirty-cat/dirty_cat.git\n```\n\n----------------------------------------\n\nTITLE: Uploading skrub to Official PyPI\nDESCRIPTION: Command to upload the built distribution packages to the official PyPI repository. This makes the new version of skrub available for installation via pip.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/RELEASE_PROCESS.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Verifying git remotes for skrub repository\nDESCRIPTION: Command to verify that both origin (your fork) and upstream (official repo) remotes are correctly set up in your local git repository.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/install.rst#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Version Specification\nDESCRIPTION: Specifies the development version number 0.6.dev0 for the skrub-data project. This indicates it is a pre-release development version of the 0.6 release.\nSOURCE: https://github.com/skrub-data/skrub/blob/main/skrub/VERSION.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.6.dev0\n```\n\n----------------------------------------\n\nTITLE: RST Dataset Module Declaration\nDESCRIPTION: Changes the current module context to skrub.datasets for the dataset documentation section\nSOURCE: https://github.com/skrub-data/skrub/blob/main/doc/reference/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: skrub.datasets\n```"
  }
]