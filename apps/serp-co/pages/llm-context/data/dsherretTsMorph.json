[
  {
    "owner": "dsherret",
    "repo": "ts-morph",
    "content": "TITLE: Setting up ts-morph Project\nDESCRIPTION: Initializes a ts-morph Project instance and adds all TypeScript source files to it for processing.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/example.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\nconst project = new Project();\nproject.addSourceFilesAtPaths(\"**/*.ts\");\n```\n\n----------------------------------------\n\nTITLE: Transforming Numeric Literals using ts-morph in TypeScript\nDESCRIPTION: This code snippet demonstrates transforming numeric literals in the AST using the ts-morph library. It increments each numeric literal by 1. The example starts by creating a project and a source file, then transforms the nodes by checking if they are numeric literals. The TypeScript compiler API is used directly, meaning type checking and symbols are not available.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/transforms.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { ts } from \"ts-morph\";\n\nconst project = new Project();\nconst sourceFile = project.createSourceFile(\"Example.ts\", \"1; 2; 3;\");\n\n// this can be done starting on any node and not just the root node\nsourceFile.transform(traversal => {\n  const node = traversal.visitChildren(); // return type is `ts.Node`\n\n  if (ts.isNumericLiteral(node)) {\n    const incrementedValue = parseInt(node.text, 10) + 1;\n    return traversal.factory.createNumericLiteral(incrementedValue.toString());\n  }\n\n  return node;\n});\n\n// outputs: 2; 3; 4;\nconsole.log(sourceFile.getFullText());\n```\n\n----------------------------------------\n\nTITLE: Creating a source file using a writer function in ts-morph\nDESCRIPTION: Creates a new source file using a writer function that programmatically builds the file content.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.createSourceFile(\"path/to/myOtherNewFile.ts\", writer => {\n  writer\n    .writeLine(\"import * as ts from 'typescript';\").blankLine()\n    .writeLine(\"export class MyClass {}\");\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming with Comments and Strings Options\nDESCRIPTION: Example of renaming with options to include changes in comments and string literals.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmyEnum.rename(\"SomeOtherName\", {\n  renameInComments: true,\n  renameInStrings: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Node Text in ts-morph\nDESCRIPTION: Demonstrates how to replace a node with new text using the replaceWithText() method. This example replaces a property access expression with a simple reference, returning the new node created by the replacement.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst originalInitializer = sourceFile.getVariableDeclarations()[0].getInitializerOrThrow();\nconst newInitializer = originalInitializer.replaceWithText(\"MyReference\");\n```\n\n----------------------------------------\n\nTITLE: Initializing and Manipulating TypeScript Project with ts-morph\nDESCRIPTION: Demonstrates the basic usage of ts-morph including project initialization, file creation, class manipulation, and saving changes. Shows how to add source files, create new files with structures, modify existing code, and save changes asynchronously.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project, StructureKind } from \"ts-morph\";\n\n// initialize\nconst project = new Project({\n    // Optionally specify compiler options, tsconfig.json, in-memory file system, and more here.\n    // If you initialize with a tsconfig.json, then it will automatically populate the project\n    // with the associated source files.\n    // Read more: https://ts-morph.com/setup/\n});\n\n// add source files\nproject.addSourceFilesAtPaths(\"src/**/*.ts\");\nconst myClassFile = project.createSourceFile(\"src/MyClass.ts\", \"export class MyClass {}\");\nconst myEnumFile = project.createSourceFile(\"src/MyEnum.ts\", {\n    statements: [{\n        kind: StructureKind.Enum,\n        name: \"MyEnum\",\n        isExported: true,\n        members: [{ name: \"member\" }],\n    }],\n});\n\n// get information\nconst myClass = myClassFile.getClassOrThrow(\"MyClass\");\nmyClass.getName();          // returns: \"MyClass\"\nmyClass.hasExportKeyword(); // returns: true\nmyClass.isDefaultExport();  // returns: false\n\n// manipulate\nconst myInterface = myClassFile.addInterface({\n    name: \"IMyInterface\",\n    isExported: true,\n    properties: [{\n        name: \"myProp\",\n        type: \"number\",\n    }],\n});\n\nmyClass.rename(\"NewName\");\nmyClass.addImplements(myInterface.getName());\nmyClass.addProperty({\n    name: \"myProp\",\n    initializer: \"5\",\n});\n\nproject.getSourceFileOrThrow(\"src/ExistingFile.ts\").delete();\n\n// asynchronously save all the changes above\nawait project.save();\n\n// get underlying compiler node from the typescript AST from any node\nconst compilerNode = myClassFile.compilerNode;\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Custom tsconfig Path\nDESCRIPTION: Shows how to create a new Project instance with a specific tsconfig.json file path.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  tsConfigFilePath: `/someDirectory/notCurrent/tsconfig.json`,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Construct Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve construct signatures from a TypeScript interface declaration using ts-morph. Construct signatures specify function-like types within interfaces. This snippet includes retrieval of all construct signatures and filtering based on parameter count.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst constructSignatures = interfaceDeclaration.getConstructSignatures();\nconst constructSignature = interfaceDeclaration.getConstructSignature(c => c.getParameters().length > 2);\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory File System with ts-morph\nDESCRIPTION: The in-memory file system is created by configuring the Project instance with useInMemoryFileSystem set to true. This set-up is particularly useful for testing purposes. The main dependency is the ts-morph library. The snippet demonstrates file creation, saving, and reading operations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/file-system.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\nconst project = new Project({ useInMemoryFileSystem: true });\nconst fs = project.getFileSystem();\n\nconst sourceFile = project.createSourceFile(\"file.ts\", \"console.log(5);\");\nsourceFile.saveSync();\nconsole.log(fs.readFileSync(\"file.ts\")); // outputs: \"console.log(5);\"\n```\n\n----------------------------------------\n\nTITLE: Adding, Inserting, and Removing Statements in ts-morph\nDESCRIPTION: Demonstrates how to add statements at the end, insert statements at a specific position, and remove statements from nodes with bodies (like source files, functions, or methods).\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// add statements\nconst statements = sourceFile.addStatements(\"console.log(5);\\nconsole.log(6);\");\n// insert statements (index is the child index to insert at)\nconst statements = sourceFile.insertStatements(3, \"console.log(5);\\nconsole.log(6);\");\n// remove statements\nsourceFile.removeStatements([1, 3]); // removes statements from index 1 to 3\nsourceFile.removeStatement(1); // removes statement at index 1\n```\n\n----------------------------------------\n\nTITLE: Working with Existing TypeScript Compiler Nodes using ts-morph\nDESCRIPTION: Shows how to work with existing TypeScript compiler nodes by wrapping them with ts-morph's API. Demonstrates creating wrapped nodes from existing compiler nodes for easier manipulation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWrappedNode, ClassDeclaration, ts } from \"ts-morph\";\n\n// some code that creates a class declaration using the ts object\nconst classNode: ts.ClassDeclaration = ...;\n\n// create and use a wrapped node\nconst classDec = createWrappedNode(classNode) as ClassDeclaration;\nconst firstProperty = classDec.getProperties()[0];\n\n// ... do more stuff here ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing TypeScript Projects with ts-morph\nDESCRIPTION: Demonstrates basic project setup with the @ts-morph/bootstrap library, including project creation, source file creation, and program setup. Key dependencies include @ts-morph/bootstrap and TypeScript. The snippet highlights asynchronous project creation and interaction with the TypeScript API, such as obtaining a TypeChecker and LanguageService from a project.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createProject, ts } from \"@ts-morph/bootstrap\";\n\nconst project = await createProject(); // or createProjectSync\n\n// these are typed as ts.SourceFile\nconst myClassFile = project.createSourceFile(\n  \"MyClass.ts\",\n  \"export class MyClass { prop: string; }\",\n);\nconst mainFile = project.createSourceFile(\n  \"main.ts\",\n  \"import { MyClass } from './MyClass'\",\n);\n\n// ts.Program\nconst program = project.createProgram();\n// ts.TypeChecker\nconst typeChecker = program.getTypeChecker();\n// ts.LanguageService\nconst languageService = project.getLanguageService();\n// ts.ModuleResolutionHost\nconst moduleResolutionHost = project.getModuleResolutionHost();\n```\n\n----------------------------------------\n\nTITLE: Adding Statements with Code Writer in ts-morph\nDESCRIPTION: Shows how to add statements to a node using a code writer for more complex code generation scenarios that may involve conditional blocks or other structured code.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.addStatements(writer => {\n  writer.write(\"if (true)\").block(() => {\n    writer.write(\"something;\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Finding References in TypeScript\nDESCRIPTION: This snippet demonstrates how to find all references of a class or named declaration in TypeScript using ts-morph. The `findReferences` method on a declaration returns referenced symbols, and further iteration over these symbols provides details of each reference, such as file path, start position, and more.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/finding-references.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst classDeclaration = ...; // get a class or some other declaration somehow\nconst referencedSymbols = classDeclaration.findReferences();\n\nfor (const referencedSymbol of referencedSymbols) {\n    for (const reference of referencedSymbol.getReferences()) {\n        console.log(\"---------\")\n        console.log(\"REFERENCE\")\n        console.log(\"---------\")\n        console.log(\"File path: \" + reference.getSourceFile().getFilePath());\n        console.log(\"Start: \" + reference.getTextSpan().getStart());\n        console.log(\"Length: \" + reference.getTextSpan().getLength());\n        console.log(\"Parent kind: \" + reference.getNode().getParentOrThrow().getKindName());\n        console.log(\"\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ts-morph via npm\nDESCRIPTION: Command to install ts-morph as a development dependency using npm package manager.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev ts-morph\n```\n\n----------------------------------------\n\nTITLE: Traversing Structure Children in TypeScript\nDESCRIPTION: Demonstrates how to traverse structure children using forEachStructureChild and work with SourceFileStructure.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { forEachStructureChild, SourceFileStructure, Structure } from \"ts-morph\";\n\nconst structure: SourceFileStructure = {\n  kind: StructureKind.SourceFile,\n  statements: [{\n    kind: StructureKind.Function,\n    name: \"myFunction\",\n    parameters: [{ name: \"myParam\" }],\n  }],\n};\n\nforEachStructureChild(structure, child => {\n  if (Structure.hasName(child))\n    console.log(child.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Arguments in TypeScript\nDESCRIPTION: Gets the type arguments array from an expression with type arguments node. Returns an array of TypeNode objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/expressions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeArgs = expressionWithTypeArgs.getTypeArguments();\n```\n\n----------------------------------------\n\nTITLE: Import Fixes in TypeScript\nDESCRIPTION: Methods to fix missing imports and unused identifiers\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.fixMissingImports();\n\nsourceFile.fixUnusedIdentifiers();\n```\n\n----------------------------------------\n\nTITLE: Adding Import Declarations in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to add or insert import declarations into a source file using ts-morph. The example shows adding an import with a default import and a module specifier.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst importDeclaration = sourceFile.addImportDeclaration({\n  defaultImport: \"MyClass\",\n  moduleSpecifier: \"./file\",\n});\n```\n\n----------------------------------------\n\nTITLE: Source File Management in Directories\nDESCRIPTION: Methods for managing source files within directories, including retrieval, creation, and manipulation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFiles = directory.getSourceFiles();\nconst sourceFile = directory.getSourceFile(\"someFile.ts\"); // or getSourceFileOrThrow\nconst indexFile = directory.addSourceFileAtPath(\"index.ts\"); // or addSourceFileAtPathIfExists\nconst descendantSourceFiles = directory.getDescendantSourceFiles();\n\ndirectory.createSourceFile(\"someFile.ts\");\ndirectory.createSourceFile(\"someFile2.ts\", \"// some text\");\ndirectory.createSourceFile(\"someFile3.ts\", writer => writer.writeLine(\"// some text\"));\ndirectory.createSourceFile(\"someFile4.ts\", { statements: [{ kind: StructureKind.Enum, name: \"MyEnum\" }] });\n```\n\n----------------------------------------\n\nTITLE: File Information Checks in TypeScript\nDESCRIPTION: Methods to check various file properties like declaration status and external library source\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.isDeclarationFile(); // returns: boolean\n\nsourceFile.isFromExternalLibrary();\n\nsourceFile.isInNodeModules();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Before Manipulating in ts-morph\nDESCRIPTION: This code snippet suggests analyzing code prior to manipulation to enhance performance when using ts-morph. By collecting nodes that meet certain criteria before performing changes, the need for re-parsing is minimized. Dependencies include the ts-morph library. The function `getClassesToRemove` gathers classes to be removed based on a check, which are then batch removed, reducing parsing overhead. Inputs are source files and a symbol check function; output is the updated AST with specified classes removed.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sourceFiles: SourceFile[]; const someCheckOnSymbol: any;\nfor (const classDec of getClassesToRemove())\n  classDec.remove();\n\nfunction getClassesToRemove() {\n  const classesToRemove: ClassDeclaration[] = [];\n\n  for (const sourceFile of sourceFiles) {\n    for (const classDec of sourceFile.getClasses()) {\n      if (someCheckOnSymbol(classDec.getSymbolOrThrow()))\n        classesToRemove.push(classDec);\n    }\n  }\n\n  return classesToRemove;\n}\n```\n\n----------------------------------------\n\nTITLE: File Save Operations in TypeScript\nDESCRIPTION: Methods to save source files to the file system\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait sourceFile.save();\nsourceFile.saveSync();\n```\n\n----------------------------------------\n\nTITLE: Improving Performance with Structures in ts-morph\nDESCRIPTION: This snippet demonstrates using structures to improve performance in ts-morph by minimizing the manipulation of the entire AST. The example imports necessary structures from ts-morph, retrieves the structure of a source file, removes exports, and creates a new file with transformed content. Dependencies include ts-morph library, and the code requires a TypeScript project setup with tsconfig.json. The main input is the source file structure, and the output is a new source file without exports.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { forEachStructureChild, SourceFileStructure, StructureKind, Structures, Structures } from \"ts-morph\";\n\nconst project = new Project({ tsConfigFilePath: \"tsconfig.json\" });\nconst classesFile = project.getSourceFileOrThrow(\"declarations.ts\");\nconst classesFileStructure = classesFile.getStructure();\n\nremoveExports(classesFileStructure);\n\nproject.createSourceFile(\"private.ts\", classesFileStructure);\n\nfunction removeExports(structure: Structures) {\n  forEachStructureChild(structure, removeExports);\n\n  if (Structure.isExportable(structure))\n    structure.isExported = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Object Literal Expression Example\nDESCRIPTION: Demonstrates the structure of an object literal expression in TypeScript, including property assignments, shorthand property assignments, spread assignments, accessors (get and set), and methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst obj = {\n  propertyAssignment: 5,\n  shorthandPropertyAssignment,\n  ...spreadAssignment,\n  get getAccessor() {\n    return 5;\n  },\n  set setAccessor(value: number) {\n    // do something\n  },\n  method() {\n    return \"some string\";\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Interface Declarations to TypeScript Source Files with ts-morph\nDESCRIPTION: Add a new interface declaration to a TypeScript source file using ts-morph by specifying the interface name. The `addInterface` method is used in this operation. The primary input is the name of the interface to be added, and the operation modifies the source file by adding the interface.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst interfaceDeclaration = sourceFile.addInterface({\n  name: \"InterfaceName\",\n});\n```\n\n----------------------------------------\n\nTITLE: File Move Operations in TypeScript\nDESCRIPTION: Methods for moving source files to new locations\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.move(\"newFileName.ts\");\n// this won't throw if a file exists at the specified path\nsourceFile.move(\"other.ts\", { overwrite: true });\n// or specify directory to move to\nsourceFile.moveToDirectory(\"/some/dir\");\nsourceFile.moveToDirectory(someDirectoryObject);\n```\n\n----------------------------------------\n\nTITLE: Remove Variable Declaration\nDESCRIPTION: Illustrates how to remove a variable declaration using the `remove()` method. This removes the individual declaration from its parent variable statement.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvariableDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface Declarations with ts-morph in TypeScript\nDESCRIPTION: Retrieve interface declarations from a TypeScript source file using ts-morph. This snippet demonstrates how to get all interfaces, a specific named interface, or the first interface with a specific number of properties. No additional dependencies are required. The function accepts search parameters and returns matching interface declarations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst interfaces = sourceFile.getInterfaces();\nconst interface1 = sourceFile.getInterface(\"Interface1\");\nconst firstInterfaceWith5Properties = sourceFile.getInterface(i => i.getProperties().length === 5);\n```\n\n----------------------------------------\n\nTITLE: Creating a source file from structure in ts-morph\nDESCRIPTION: Creates a new source file using a structure object that represents the AST of the file, defining enums and classes programmatically.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.createSourceFile(\"path/to/myStructureFile.ts\", {\n  statements: [{\n    kind: StructureKind.Enum,\n    name: \"MyEnum\",\n    members: [{\n      name: \"member\",\n    }],\n  }, {\n    kind: StructureKind.Class,\n    name: \"MyClass\",\n    // etc...\n  }],\n  // etc...\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current File System with ts-morph\nDESCRIPTION: This snippet demonstrates how to obtain the current file system object using the ts-morph Project class. No special dependencies are required other than ts-morph. This object allows interaction with the file system, supporting operations like read and write. The code returns an instance of FileSystemHost.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/file-system.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Project } from \"ts-morph\";\nconst project = new Project();\n\nconst fs = project.getFileSystem(); // returns: FileSystemHost\n```\n\n----------------------------------------\n\nTITLE: Formatting Specific TypeScript Method Node\nDESCRIPTION: This snippet provides functionality to format a specific method statement within a TypeScript class. It demonstrates how to access a particular class and method to format just the first statement in the method. Dependencies include access to the project object that manages source files. This allows for fine-grained control over what gets formatted.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nproject.getSourceFileOrThrow(\"file.ts\")\n  .getClassOrThrow(\"MyClass\")\n  .getInstanceMethodOrThrow(\"myMethod\")\n  .getStatements()[0]\n  .formatText();\n// file.ts\nexport class MyClass {\n    prop  !  : string   ;\n\n    myMethod(    example: string    ) {\n        console.log(example);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referenced Files Operations in TypeScript\nDESCRIPTION: Methods for retrieving referenced files and related nodes\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst referencedSourceFiles = sourceFile.getReferencedSourceFiles();\n\nconst nodesReferencingOtherSourceFiles = sourceFile.getNodesReferencingOtherSourceFiles();\n\nconst literalsReferencingOtherSourceFiles = sourceFile.getLiteralsReferencingOtherSourceFiles();\n// or to get all the literals that reference a module (and may not have been resolved to a source file)\nconst importLiterals = sourceFile.getImportStringLiterals();\n```\n\n----------------------------------------\n\nTITLE: Adding Named Imports to Import Declaration in ts-morph\nDESCRIPTION: Demonstrates different methods to add named imports to an import declaration, including with optional aliases. You can add single imports or multiple imports at once.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst namedImport = importDeclaration.addNamedImport({\n  name: \"MyClass\",\n  alias: \"MyAliasName\", // alias is optional\n});\n// or\nimportDeclaration.addNamedImports([\"MyClass\", \"SomeInterface\"]);\n```\n\n----------------------------------------\n\nTITLE: Getting Source File by Relative Path\nDESCRIPTION: Retrieves a source file by matching the end of its file path.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst personFile = project.getSourceFile(\"Models/Person.ts\");\n```\n\n----------------------------------------\n\nTITLE: Example of Renaming Default Import with ts-morph\nDESCRIPTION: A complete example showing how to rename a default import and update all its references in the file. This demonstrates the refactoring capabilities of ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyClass from \"./file\";\n\nconst instance = new MyClass();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst importDeclaration = sourceFile.getImportDeclarations()[0];\nimportDeclaration.renameDefaultImport(\"NewName\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport NewName from \"./file\";\n\nconst instance = new NewName();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Emitted TypeScript Code with ts-morph\nDESCRIPTION: Demonstrates how to manipulate TypeScript code after emitting it to memory using ts-morph. It involves loading the emitted result into a new project for further manipulation and saving.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({ compilerOptions: { outDir: \"dist\" } });\nproject.createSourceFile(\"MyFile.ts\", \"const num = 1;\");\nconst result = project.emitToMemory();\n\n// load the javascript files into a new project\nconst newProject = new Project();\nfor (const file of result.getFiles())\n  newProject.createSourceFile(file.filePath, file.text, { overwrite: true });\n\n// ...manipulate the javascript files here...\n\n// save the new files to the file system\nawait newProject.save();\n```\n\n----------------------------------------\n\nTITLE: Adding a Class Declaration\nDESCRIPTION: Example of adding a new class to a source file with basic configuration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst classDeclaration = sourceFile.addClass({\n  name: \"ClassName\",\n});\n```\n\n----------------------------------------\n\nTITLE: Project Setup with tsConfig and Synchronous API\nDESCRIPTION: Illustrates project setup using a tsconfig.json file and both asynchronous and synchronous APIs for project creation. It requires a valid tsconfig.json file and optionally allows varying file system types. Outputs the created project based on tsconfig.json settings.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = await createProject({ tsConfigFilePath: \"tsconfig.json\" });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = createProjectSync({ tsConfigFilePath: \"tsconfig.json\" });\n```\n\n----------------------------------------\n\nTITLE: Get Compiler Options from tsconfig.json - TS-Morph\nDESCRIPTION: This snippet demonstrates how to use the `getCompilerOptionsFromTsConfig` function from the ts-morph library to retrieve compiler options from a tsconfig.json file. It returns an object containing the compiler options and any diagnostic errors encountered during parsing.  The function takes the path to the tsconfig.json file as a string argument.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/utilities.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCompilerOptionsFromTsConfig } from \"ts-morph\";\n\nconst result = getCompilerOptionsFromTsConfig(\"file/path/to/tsconfig.json\");\n\nresult.options; // compiler options\nresult.errors; // diagnostics\n```\n\n----------------------------------------\n\nTITLE: Retrieving Diagnostics in TypeScript with ts-morph\nDESCRIPTION: This code snippet demonstrates how to retrieve pre-emit diagnostics (compile errors) from a ts-morph project and a source file. The diagnostics include syntactic, semantic, global, options, config file parsing, and declaration diagnostics.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnostics = project.getPreEmitDiagnostics();\n\n// or on a source file\nconst sourceFileDiagnostics = sourceFile.getPreEmitDiagnostics();\n```\n\n----------------------------------------\n\nTITLE: Adding source files using globs and file paths in ts-morph\nDESCRIPTION: Shows how to add source files using glob patterns and explicit file paths, including how to use exclusion patterns.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nproject.addSourceFilesAtPaths(\"folder/**/*{.d.ts,.ts}\");\nproject.addSourceFilesAtPaths([\"folder/file.ts\", \"folder/otherFile.ts\"]);\nproject.addSourceFilesAtPaths([\"**/*.ts\", \"!**/*.d.ts\"]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Compiler Options for In-Memory File System\nDESCRIPTION: To avoid defaulting to 'any' type for some standard types, this snippet shows how to specify compiler options when using an in-memory file system. The presented options include setting the 'lib' to 'lib.es2015.d.ts' or setting the 'target' to 'ES2015'. These configurations help in making the TypeScript features available.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/file-system.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst project = new Project({\n  useInMemoryFileSystem: true,\n  compilerOptions: {\n    lib: [\"lib.es2015.d.ts\"],\n  },\n});\n/// ...omitted... same as above...\nconsole.log(mySetDecl.getType().getText()); // Set<string>, good\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Project, ts } from \"ts-morph\";\n\nconst project = new Project({\n  useInMemoryFileSystem: true,\n  compilerOptions: {\n    target: ts.ScriptTarget.ES2015,\n  },\n});\n/// ...omitted... same as above...\nconsole.log(mySetDecl.getType().getText()); // Set<string>, good\n```\n\n----------------------------------------\n\nTITLE: Working with Namespace Imports in ts-morph\nDESCRIPTION: Shows how to get, set, and remove namespace imports. When setting a namespace import for an existing one, ts-morph will rename all references in the current file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst namespaceImport = importDeclaration.getNamespaceImport(); // returns: Identifier | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.setNamespaceImport(\"newName\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.removeNamespaceImport();\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Types in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to access types from parameters and function declarations using ts-morph's getType() and getReturnType() methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst type = parameter.getType();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst returnType = functionDeclaration.getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Retrieving JS Doc Tags with ts-morph\nDESCRIPTION: This snippet shows how to use ts-morph to obtain JS Doc tags from a function signature. The `getJsDocTags` method is called to retrieve an array of objects representing the JS doc tags associated with the signature.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = signature.getJsDocTags();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Visiting Children using ts-morph in TypeScript\nDESCRIPTION: The snippet demonstrates selectively skipping certain nodes' children while transforming an AST in TypeScript using ts-morph. It conditionally visits nodes and updates function declarations by changing their names. The code skips class declarations' children and focuses on transforming function declarations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/transforms.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { ts } from \"ts-morph\";\n\nconst project = new Project();\nconst sourceFile = project.createSourceFile(\n  \"Example.ts\",\n  `\nclass C1 {\n    myMethod() {\n        function nestedFunction() {\n        }\n    }\n}\n\nclass C2 {\n    prop1: string;\n}\n\nfunction f1() {\n    console.log(\"1\");\n\n    function nestedFunction() {\n    }\n}`,\n);\n\nsourceFile.transform(traversal => {\n  // this will skip visiting the children of the classes\n  if (ts.isClassDeclaration(traversal.currentNode))\n    return traversal.currentNode;\n\n  const node = traversal.visitChildren();\n  if (ts.isFunctionDeclaration(node)) {\n    return traversal.factory.updateFunctionDeclaration(\n      node,\n      [],\n      [],\n      undefined,\n      traversal.factory.createIdentifier(\"newName\"),\n      [],\n      [],\n      undefined,\n      traversal.factory.createBlock([]),\n    );\n  }\n  return node;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Default Manipulation Settings in TypeScript\nDESCRIPTION: Shows how to create a new Project instance with default manipulation settings including indentation, newline characters, quote types, and other formatting options.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IndentationText, NewLineKind, Project, QuoteKind } from \"ts-morph\";\n\nconst project = new Project({\n  // these are the defaults\n  manipulationSettings: {\n    // TwoSpaces, FourSpaces, EightSpaces, or Tab\n    indentationText: IndentationText.FourSpaces,\n    // LineFeed or CarriageReturnLineFeed\n    newLineKind: NewLineKind.LineFeed,\n    // Single or Double\n    quoteKind: QuoteKind.Double,\n    // Whether to change shorthand property assignments to property assignments\n    // and add aliases to import & export specifiers (see more information in\n    // the renaming section of the documentation).\n    usePrefixAndSuffixTextForRename: false,\n    // Whether to use trailing commas in multi-line scenarios where trailing\n    // commas would be used.\n    useTrailingCommas: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting a Single TypeScript File\nDESCRIPTION: Shows how to emit a single TypeScript file using ts-morph. It includes both asynchronous and synchronous methods, as well as how to get the emit output for further processing.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.getSourceFileOrThrow(\"MyFile.ts\");\nsourceFile.emit(); // async, fast\n\n// or\nsourceFile.emitSync(); // slow\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst emitOutput = sourceFile.getEmitOutput();\nemitOutput.getEmitSkipped(); // returns: boolean\nfor (const outputFile of emitOutput.getOutputFiles()) {\n  outputFile.getFilePath();\n  outputFile.getWriteByteOrderMark();\n  outputFile.getText();\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Project Changes in ts-morph\nDESCRIPTION: Demonstrates how to save all accumulated file system changes (manipulations, copies, moves, deletes) to the underlying file system at once using the project.save() method. This approach prevents files from being left in a halfway state if code execution errors out.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\nconst project = new Project();\n\n// ...lots of code here that manipulates, copies, moves, and deletes files...\n\n// when you're all done, call this and it will save everything to the file system\nawait project.save();\n```\n\n----------------------------------------\n\nTITLE: Emitting TypeScript Project to JavaScript and Declaration Files\nDESCRIPTION: Demonstrates how to emit a TypeScript project to JavaScript (.js) and declaration (.d.ts) files using ts-morph. It shows both asynchronous and synchronous emission methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({ compilerOptions: { outDir: \"dist\", declaration: true } });\nproject.createSourceFile(\"MyFile.ts\", \"const num = 1;\");\nproject.emit(); // async\n\n// or\nproject.emitSync(); // slow\n```\n\n----------------------------------------\n\nTITLE: Retrieving Class Declarations in TypeScript\nDESCRIPTION: Examples of retrieving class declarations from source files using different methods including direct name lookup and conditional filtering.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst classes = sourceFile.getClasses();\nconst class1 = sourceFile.getClass(\"Class1\");\nconst firstClassWithConstructor = sourceFile.getClass(c => c.getConstructors().length > 0);\n```\n\n----------------------------------------\n\nTITLE: Managing Import Specifier Aliases in ts-morph\nDESCRIPTION: Demonstrates how to get, set and rename import aliases. The renameAlias method will update all references to the import in the current file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnamedImport.getAliasNode(); // returns: Identifier | undefined\nnamedImport.setAlias(\"NewAliasName\");\nnamedImport.renameAlias(\"NewAliasName\");\n```\n\n----------------------------------------\n\nTITLE: Using forEachDescendant for Deep AST Traversal in ts-morph\nDESCRIPTION: Shows how to iterate through all descendant nodes of an AST node using forEachDescendant. This method traverses the entire subtree of a node.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnode.forEachDescendant(node => console.log(node.getText()));\n```\n\n----------------------------------------\n\nTITLE: Type Information and Flags\nDESCRIPTION: Methods for accessing type flags, object flags, symbols, and type checks in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst flags = type.getFlags();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst objectFlags = type.getObjectFlags();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeSymbol = type.getSymbol();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst aliasSymbol = type.getAliasSymbol();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst aliasTypeArgs = type.getAliasTypeArguments();\n```\n\n----------------------------------------\n\nTITLE: Managing Class Implements\nDESCRIPTION: Examples of working with interface implementations including adding, inserting, and removing implements expressions.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst implementsExpressions = classDeclaration.getImplements();\n\nclassDeclaration.addImplements(\"Named\");\nclassDeclaration.addImplements([\"Named\", \"Aged\"]);\nclassDeclaration.insertImplements(1, \"Named\");\nclassDeclaration.insertImplements(1, [\"Named\", \"Aged\"]);\n\nclassDeclaration.removeImplements(0);\nclassDeclaration.removeImplements(classDeclaration.getImplements()[0]);\n```\n\n----------------------------------------\n\nTITLE: Inspecting Source File Contents with ts-morph\nDESCRIPTION: Demonstrates various ways to inspect the contents of a TypeScript source file, including checking for classes, getting interfaces, and examining properties of the Person interface.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/example.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasClasses = sourceFile.getClasses().length > 0;\nconst interfaces = sourceFile.getInterfaces();\n\n// person interface\nconst personInterface = sourceFile.getInterface(\"Person\")!;\npersonInterface.isDefaultExport(); // returns true\npersonInterface.getName(); // returns \"Person\"\npersonInterface.getProperties(); // returns the properties\n```\n\n----------------------------------------\n\nTITLE: Immediate File Copy Operations in TypeScript\nDESCRIPTION: Methods for immediate file copy operations\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait sourceFile.copyImmediately(\"NewFile.ts\");\nsourceFile.copyImmediatelySync(\"NewFile2.ts\");\n```\n\n----------------------------------------\n\nTITLE: Accessing the Type Checker in ts-morph\nDESCRIPTION: Gets the type checker from a project instance. This is the main entry point for type checking functionality in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/type-checker.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeChecker = project.getTypeChecker();\n```\n\n----------------------------------------\n\nTITLE: Formatting Entire TypeScript File\nDESCRIPTION: This snippet shows how to format an entire TypeScript source file using the TypeScript compiler's formatting API. It includes an example of calling the formatText method with optional formatting settings. The goal is to make badly formatted code adhere to standard formatting rules. Dependencies include the TypeScript compiler.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// BadlyFormattedFile.ts\nvar myVariable     :      string |    number;\nfunction myFunction(param    : string){\nreturn \"\";\n}\nsourceFile.formatText();\n// or provide optional formatting settings\nsourceFile.formatText({\n  placeOpenBraceOnNewLineForFunctions: true,\n});\n// BadlyFormattedFile.ts (not anymore!)\nvar myVariable: string | number;\nfunction myFunction(param: string) {\n  return \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting TypeScript to Memory using ts-morph\nDESCRIPTION: Shows how to emit TypeScript code to memory instead of the file system using ts-morph. It includes examples of outputting the emitted files to the console and saving them to the file system.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({ compilerOptions: { outDir: \"dist\" } });\nproject.createSourceFile(\"MyFile.ts\", \"const num = 1;\");\nconst result = project.emitToMemory();\n\n// output the emitted files to the console\nfor (const file of result.getFiles()) {\n  console.log(\"----\");\n  console.log(file.filePath);\n  console.log(\"----\");\n  console.log(file.text);\n  console.log(\"\\n\");\n}\n\n// or finally save this result to the underlying file system (or use `saveFilesSync()`)\nresult.saveFiles().then(() => console.log(\"written\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Module Specifier for Import Declaration in ts-morph\nDESCRIPTION: Demonstrates how to set the module specifier of an import declaration, either by providing a string path or by referencing another source file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.setModuleSpecifier(\"./new-file\");\n// or set by source file\nimportDeclaration.setModuleSpecifier(sourceFile);\n```\n\n----------------------------------------\n\nTITLE: Setting Type Parameter Default Values in TypeScript with ts-morph\nDESCRIPTION: Shows how to set a default value for a type parameter using the setDefault() method. This example sets the default to 'string'.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntypeParameter.setDefault(\"string\");\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Functions in ts-morph\nDESCRIPTION: Describes the unwrapping process of a function declaration which replaces the function with its body content, effectively flattening its contents into its parent scope.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction someFunction() {\n  function innerFunction() {\n  }\n\n  const someDeclaration = 5;\n}\n\n// After unwrapping\nfunction innerFunction() {\n}\n\nconst someDeclaration = 5;\n```\n\n----------------------------------------\n\nTITLE: Adding JSDoc Comments to a Class Declaration in ts-morph\nDESCRIPTION: Shows various ways to add JSDoc comments to a class declaration, including simple descriptions, forcing multi-line format, and adding JSDoc tags.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// adds /** Some description... */\nconst docNode = classDeclaration.addJsDoc({\n  description: \"Some description...\",\n});\n// or to force it to be multi-line, add a newline to the front of the string\nclassDeclaration.addJsDoc({\n  description: \"\\nSome description...\",\n});\n// or with tags\nclassDeclaration.addJsDoc({\n  description: \"Some description...\",\n  tags: [{\n    tagName: \"param\",\n    text: \"value - My value.\",\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Functions using ts-morph\nDESCRIPTION: Showcases methods to retrieve functions from source files using ts-morph, allowing filtering based on criteria. No external dependencies are required beyond ts-morph itself.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst functions = sourceFile.getFunctions();\nconst function1 = sourceFile.getFunction(\"Function1\");\nconst firstFunctionWithChildFunction = sourceFile.getFunction(f => f.getFunctions().length > 0);\n```\n\n----------------------------------------\n\nTITLE: Formatting Diagnostics Output in TypeScript with ts-morph\nDESCRIPTION: This code snippet shows how to format the diagnostics retrieved from a ts-morph project using `project.formatDiagnosticsWithColorAndContext` for a nicely formatted output with color and context in the console.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnostics = project.getPreEmitDiagnostics();\n\nconsole.log(project.formatDiagnosticsWithColorAndContext(diagnostics));\n```\n\n----------------------------------------\n\nTITLE: Relative Path Operations in TypeScript\nDESCRIPTION: Methods for working with relative paths between source files\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst relativePath = sourceFileFrom.getRelativePathTo(sourceFileTo);\n\nconst moduleSpecifier = sourceFileFrom.getRelativePathAsModuleSpecifierTo(sourceFileTo);\n```\n\n----------------------------------------\n\nTITLE: Renaming an Identifier\nDESCRIPTION: Demonstrates how to rename an identifier to a new name using the rename method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nidentifier.rename(\"someNewName\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Import Declarations in TypeScript with ts-morph\nDESCRIPTION: Methods to get all imports or find specific imports that match certain conditions in a source file. These functions return ImportDeclaration objects that can be further manipulated.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// get them all\nconst imports = sourceFile.getImportDeclarations();\n// or get the first one that matches a condition\nconst importWithDefaultImport = sourceFile.getImportDeclaration(i => i.getDefaultImport() != null);\nconst someModuleImport = sourceFile.getImportDeclaration(\"module-specifier-text\");\n```\n\n----------------------------------------\n\nTITLE: Extracting Interfaces from Classes\nDESCRIPTION: Examples of extracting interface declarations from classes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst interfaceStructure = classDeclaration.extractInterface(`I${classDeclaration.getName()}`);\nconst interfaceStructure = classDeclaration.extractStaticInterface(`${classDeclaration.getName()}Static`);\n```\n\n----------------------------------------\n\nTITLE: Import Organization in TypeScript\nDESCRIPTION: Method to organize imports in a source file\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.organizeImports();\n```\n\n----------------------------------------\n\nTITLE: Managing Class Constructors\nDESCRIPTION: Examples of retrieving and adding constructors to a class.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst constructors = classDeclaration.getConstructors();\n\nconst ctor = classDeclaration.addConstructor({\n  /* options like parameters may go here */\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Default Import in ts-morph\nDESCRIPTION: Shows methods for setting, renaming, or removing a default import. These operations modify the import declaration's structure.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.setDefaultImport(\"MyClass\");\nimportDeclaration.renameDefaultImport(\"MyClass2\");\nimportDeclaration.removeDefaultImport();\n```\n\n----------------------------------------\n\nTITLE: Checking Export Status in TypeScript\nDESCRIPTION: Methods to check if a node is exported, named export, or default export using ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.isExported(); // returns: boolean\nfunctionDeclaration.isNamedExport(); // returns: boolean\nfunctionDeclaration.isDefaultExport(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Low-Level Text Manipulation in ts-morph\nDESCRIPTION: Demonstrates low-level text manipulation methods for inserting, replacing, and removing text directly. These methods should be used cautiously as they can invalidate previously navigated nodes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// insert text\nsourceFile.insertText(0, writer => writer.writeLine(\"// some comment\")); // or provide a string\n// replace text\nsourceFile.replaceText([3, 7], \"a\"); // \"// a comment\\n\"\n// remove text\nsourceFile.removeText(sourceFile.getPos(), sourceFile.getEnd());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Property Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve properties from a TypeScript interface using ts-morph. This includes getting all properties, a specific named property, or filtering properties by type.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst properties = interfaceDeclaration.getProperties();\nconst myProperty = interfaceDeclaration.getProperty(\"myProperty\");\nconst firstStringProperty = interfaceDeclaration.getProperty(p => p.getType().getText() === \"string\");\n```\n\n----------------------------------------\n\nTITLE: Directory Save and Emit Operations\nDESCRIPTION: Methods for saving directories to disk and emitting compiled output with various options.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait directory.save();\ndirectory.saveSync(); // slow\n\nconst result = await directory.emit();\ndirectory.emitSync(); // slow\n\ndirectory.emit({\n  outDir: \"out\",\n  declarationDir: \"declarations\",\n});\n\ndirectory.emit({ emitOnlyDtsFiles: true });\n```\n\n----------------------------------------\n\nTITLE: Creating a source file from string in ts-morph\nDESCRIPTION: Creates a new source file by providing the file path and its content as a string.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileText = \"enum MyEnum {\\n}\\n\";\nconst sourceFile = project.createSourceFile(\"path/to/myNewFile.ts\", fileText);\n```\n\n----------------------------------------\n\nTITLE: Matching Source Files with Absolute Path\nDESCRIPTION: Demonstrates how to match source files using absolute paths when working with projects in different directories.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.getSourceFiles(`/someDirectory/notCurrent/**/config/index.ts`);\n```\n\n----------------------------------------\n\nTITLE: Managing Class Methods\nDESCRIPTION: Examples of working with instance and static methods, including retrieval and manipulation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst instanceMethods = classDeclaration.getInstanceMethods();\nconst myMethod = classDeclaration.getInstanceMethod(\"myMethod\");\nconst firstMethodWith2Params = classDeclaration.getInstanceMethod(m => m.getParameters().length === 2);\n\nconst staticMethods = classDeclaration.getStaticMethods();\nconst myStaticMethod = classDeclaration.getStaticMethod(\"myMethod\");\nconst firstStaticMethodWith2Params = classDeclaration.getStaticMethod(m => m.getParameters().length === 2);\n\nconst method = classDeclaration.addMethod({ isStatic: true, name: \"myMethod\", returnType: \"string\" });\n\nmethod.remove();\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Interface Example\nDESCRIPTION: Example TypeScript file (Person.ts) that defines a Person interface with name and age properties and exports it as default.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/example.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Person.ts\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\nexport default Person;\n```\n\n----------------------------------------\n\nTITLE: Managing Function Overloads in TypeScript using ts-morph\nDESCRIPTION: Covers retrieval and identification of overloads in function declarations. It shows how to fetch all overloads or determine if a function is an overload or implementation in different contexts.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst overloads = functionDeclaration.getOverloads(); // returns: FunctionDeclaration[]\nfunctionDeclaration.isOverload();\nfunctionDeclaration.isImplementation();\nconst implementation = functionOverload.getImplementation();\n```\n\n----------------------------------------\n\nTITLE: Setting Export Status\nDESCRIPTION: Method to set a node as named export in source file or namespace export in namespace context.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.setIsExported(true); // be one\nfunctionDeclaration.setIsExported(false); // don't be one\n```\n\n----------------------------------------\n\nTITLE: Getting Module Specifier from Import Declaration in ts-morph\nDESCRIPTION: Demonstrates retrieving the module specifier from an import declaration. Returns a StringLiteral object representing the module path.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst moduleSpecifier = importDeclaration.getModuleSpecifier(); // returns: StringLiteral\n```\n\n----------------------------------------\n\nTITLE: Adding Class with Structure in TypeScript\nDESCRIPTION: Demonstrates how to add a new class to a source file using an existing class structure.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.addClass({ name: \"NewClass\", ...classDeclaration.getStructure() });\n```\n\n----------------------------------------\n\nTITLE: Working with Class Members\nDESCRIPTION: Examples of retrieving different types of class members.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst allMembers = classDeclaration.getMembers();\nconst instanceMembers = classDeclaration.getInstanceMembers();\nconst staticMembers = classDeclaration.getStaticMembers();\n```\n\n----------------------------------------\n\nTITLE: Accessing Implementations of TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve implementation details of a TypeScript interface using ts-morph. This mimics the \"go to implementation\" feature in IDEs, providing direct connections to implementations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst implementations = interfaceDeclaration.getImplementations();\n```\n\n----------------------------------------\n\nTITLE: Saving a source file to disk in ts-morph\nDESCRIPTION: Demonstrates how to save an in-memory source file to disk using async or sync methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// save it to the disk if you wish:\nawait sourceFile.save(); // or saveSync();\n```\n\n----------------------------------------\n\nTITLE: Getting Call Expression Return Type in TypeScript\nDESCRIPTION: Retrieves the return type of a call expression using ts-morph's type system.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/expressions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst returnType = callExpression.getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Removing Interface Declarations in TypeScript with ts-morph\nDESCRIPTION: Remove an existing interface declaration from a TypeScript source file using the `.remove()` method provided by ts-morph. This operation requires a previously retrieved or added interface declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterfaceDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Handling Decorator Type Arguments in TypeScript\nDESCRIPTION: Illustrates how to work with decorator type arguments, including retrieval, addition, insertion, and removal using ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeArgs = decorator.getTypeArguments(); // returns: TypeNode[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeArgs = decorator.insertTypeArguments(1, [\"string\", \"number\"]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// specify the index\ndecorator.removeTypeArgument(0);\n// or specify the type argument node\ndecorator.removeTypeArgument(typeArgs[0]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSDoc Nodes from a Node in ts-morph\nDESCRIPTION: Demonstrates how to retrieve all JSDoc nodes associated with a declaration using the getJsDocs() method, which returns an array of JSDoc objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getJsDocs(); // returns: JSDoc[]\n```\n\n----------------------------------------\n\nTITLE: Adding a Shorthand Property Assignment\nDESCRIPTION: Shows how to add a shorthand property assignment to an object literal expression using the `addShorthandPropertyAssignment` method. Only the name of the property needs to be specified.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst shorthandPropertyAssignment = objectLiteralExpression.addShorthandPropertyAssignment({\n  name: \"shorthandPropertyAssignment\",\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Object Literal Properties\nDESCRIPTION: Shows how to retrieve properties from an object literal expression using various methods such as `getProperties`, `getProperty`, and `getPropertyOrThrow`. Each example demonstrates a different way to target specific properties.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst properties = objectLiteralExpression.getProperties();\n// or\nconst property = objectLiteralExpression.getProperty(\"propertyAssignment\");\n// or\nconst spreadAssignment = objectLiteralExpression.getProperty(\n  p => p.getText() === \"...spreadAssignment\",\n);\n// or\nconst method = objectLiteralExpression.getPropertyOrThrow(\"method\");\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Emit Diagnostics in TypeScript with ts-morph\nDESCRIPTION: Shows how to retrieve and process diagnostic information after emitting TypeScript code using ts-morph. This is useful for checking if the emission process was successful.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst emitResult = await project.emit();\nfor (const diagnostic of emitResult.getDiagnostics())\n  console.log(diagnostic.getMessageText());\n```\n\n----------------------------------------\n\nTITLE: Type Removal Operations\nDESCRIPTION: Methods for removing types and return types from nodes in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npropertyDeclaration.removeType();\nfunctionDeclaration.removeReturnType();\n```\n\n----------------------------------------\n\nTITLE: Filtering Source Files by Glob Pattern\nDESCRIPTION: Demonstrates how to filter source files using single or multiple glob patterns. Supports excluding files using negative patterns.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// single\nconst testSourceFiles = project.getSourceFiles(\"src/test/**/*.ts\");\n// or multiple\nconst nonTestSourceFiles = project.getSourceFiles([\n  \"src/**/*.ts\",\n  \"!src/test/**/*.ts\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Get Variable Declarations from SourceFile\nDESCRIPTION: Demonstrates how to get variable declarations from a source file using `getVariableDeclarations()` and `getVariableDeclaration()`. The first retrieves all declarations, while the second retrieves a specific declaration by name or based on a condition.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst variableDeclarations = sourceFile.getVariableDeclarations();\nconst variableDeclaration = sourceFile.getVariableDeclaration(\"myVar\");\nconst firstStringTypedVariableDeclaration = sourceFile.getVariableDeclaration(v => v.getType().getText() === \"string\");\n```\n\n----------------------------------------\n\nTITLE: Removing Extends Expressions in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove an extends expression from a TypeScript interface declaration using ts-morph. The removal can be done by index or by node reference using the `removeExtends` method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterfaceDeclaration.removeExtends(0); // index\ninterfaceDeclaration.removeExtends(interfaceDeclaration.getExtends()[0]); // node\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to retrieve parameters from function declarations using the getParameters() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst parameters = functionDeclaration.getParameters();\n```\n\n----------------------------------------\n\nTITLE: Checking for a Specific Modifier in TypeScript using ts-morph\nDESCRIPTION: Checks if a function declaration has a specific modifier using the hasModifier() method. This example checks for the AsyncKeyword modifier.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modifiers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.hasModifier(SyntaxKind.AsyncKeyword); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Removing a Property\nDESCRIPTION: Shows how to remove a property from an object literal expression using the `remove` method. The property must first be selected using one of the getter methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts setup: const obj: ObjectLiteralExpression;\nobj.getPropertyOrThrow(\"prop1\").remove();\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modules from Source Files\nDESCRIPTION: This snippet shows how to retrieve modules from a source file or namespace, returning specific modules based on criteria such as the presence of classes. This is useful for accessing and manipulating existing modules within TypeScript files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst modules = sourceFile.getModules();\nconst namespace1 = sourceFile.getModule(\"Namespace1\");\nconst firstNamespaceWithClass = sourceFile.getModule(n => n.getClasses().length > 0);\n```\n```\n\n----------------------------------------\n\nTITLE: Batching Operations in ts-morph\nDESCRIPTION: This example illustrates how to batch operations in ts-morph to reduce parsing overhead. Instead of adding classes one by one, this approach batches them into a single operation. The code requires a list of class structures and a source file. The key parameter is the list of class declarations, and the output is an updated source file with all specified classes added. This reduces parsing time and increases performance.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst classStructures: ClassDeclarationStructure[];\nsourceFile.addClasses(classStructures);\n```\n\n----------------------------------------\n\nTITLE: Checking Rest Parameter Status in TypeScript using ts-morph\nDESCRIPTION: Shows how to check if a parameter is a rest parameter using isRestParameter() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isRestParameter = parameter.isRestParameter(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing Visitor Pattern with forEachDescendant in ts-morph\nDESCRIPTION: Demonstrates implementing a visitor pattern using forEachDescendant to apply multiple visitors to each node in the AST. This allows for modular AST processing.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Visitor {\n    visit(node: Node): void;\n}\n\nconst myVisitors: Visitor[] = ...;\n\nfor (const sourceFile of sourceFiles)\n    sourceFile.forEachDescendant(node => myVisitors.forEach(v => v.visit(node)));\n```\n\n----------------------------------------\n\nTITLE: Working with Source Files in a TypeScript Project\nDESCRIPTION: Details methods for adding, creating, updating, and removing source files within a TypeScript project using the @ts-morph/bootstrap library's API. Requires valid file paths and, optionally, tsconfig.json files. Outputs new or modified SourceFile objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFiles = await project.addSourceFilesByPaths(\"**/*.ts\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = await project.addSourceFileAtPath(\"src/my-file.ts\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFiles = await project.addSourceFilesFromTsConfig(\"path/to/tsconfig.json\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.createSourceFile(\"MyClass.ts\", \"class MyClass {}\");\n\nconst newSourceFile = project.updateSourceFile(\"MyClass.ts\", \"class MyClass {}\");\n// or\nproject.updateSourceFile(newSourceFileObj);\n\nproject.removeSourceFile(\"MyClass.ts\");\n// or\nproject.removeSourceFile(sourceFile);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Parameters in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to retrieve type parameters from a class declaration using the getTypeParameters() method. This returns an array of TypeParameterDeclaration objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeParameters = classDeclaration.getTypeParameters();\n```\n\n----------------------------------------\n\nTITLE: Type Assignability Checking in TypeScript\nDESCRIPTION: Shows how to check if one type is assignable to another using the isAssignableTo method. Requires ts-morph version 22 or higher.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (stringLitType.isAssignableTo(stringType)) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Ambient Modules by Name in ts-morph\nDESCRIPTION: Retrieves specific ambient module symbols by their name. Shows both the regular method that returns undefined if not found and the throw version that raises an error.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/ambient-modules.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst jQuerySymbol = project.getAmbientModule(\"jquery\"); // returns: Symbol | undefined\nconst momentSymbol = project.getAmbientModuleOrThrow(\"moment\"); // returns: Symbol\n```\n\n----------------------------------------\n\nTITLE: Checking Parameter Property Status in TypeScript using ts-morph\nDESCRIPTION: Shows how to check if a constructor parameter is a property using isParameterProperty() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isParameterProperty = parameter.isParameterProperty(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Inserting Parameters in TypeScript using ts-morph\nDESCRIPTION: Shows how to insert a new parameter at a specific position with type definition using insertParameter() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst parameter = functionDeclaration.insertParameter(1, {\n  name: \"param1\",\n  type: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving source file dependencies after adding files in ts-morph\nDESCRIPTION: Demonstrates adding multiple source files to a Project then explicitly resolving dependencies afterward to ensure all dependent files are included.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project();\n\n// add everything to the project\nproject.addSourceFilesFromTsConfig(\"dir1/tsconfig.json\");\nproject.addSourceFilesFromTsConfig(\"dir2/tsconfig.json\");\nproject.addSourceFilesAtPaths(\"dir3/**/*{.d.ts,.ts}\");\n\n// optionally call this when complete to resolve and\n// add the dependent source files to the project\nproject.resolveSourceFileDependencies();\n```\n\n----------------------------------------\n\nTITLE: Finding Referencing Nodes with ts-morph\nDESCRIPTION: This snippet provides a streamlined method to get only the nodes that reference a named or nameable declaration using ts-morph's `findReferencesAsNodes` method. It reduces unnecessary information, focusing only on the referencing nodes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/finding-references.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst nodes = classDeclaration.findReferencesAsNodes();\n```\n\n----------------------------------------\n\nTITLE: Accessing Decorator Call Expressions in TypeScript\nDESCRIPTION: Shows how to retrieve the call expression of a decorator factory using ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst callExpression = decorator.getCallExpression(); // returns: CallExpression | undefined\n```\n\n----------------------------------------\n\nTITLE: Retrieving Method Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve method signatures from a TypeScript interface using ts-morph. The snippet retrieves all methods, a specific named method, or filters methods based on parameter count.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst methodSignatures = interfaceDeclaration.getMethods();\nconst myMethod = interfaceDeclaration.getMethod(\"myMethod\");\nconst firstMethodWith4Params = interfaceDeclaration.getMethod(m => m.getParameters().length === 4);\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Renaming Operation\nDESCRIPTION: Demonstrates how to rename an enum using ts-morph, which affects all references across all files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myEnum = sourceFile.getEnum(\"MyEnum\")!;\nmyEnum.rename(\"NewEnum\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve index signatures from a TypeScript interface declaration using ts-morph. This snippet shows how to get all index signatures and filter specific ones based on a key name using ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst indexSignatures = interfaceDeclaration.getIndexSignatures();\nconst indexSignature = interfaceDeclaration.getIndexSignature(s => s.getKeyName() === \"keyName\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Compiler and Apparent Types\nDESCRIPTION: Examples of accessing the underlying compiler type and apparent type of variables in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst compilerType = type.compilerType;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst myVar = 4;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst apparentType = type.getApparentType();\n```\n\n----------------------------------------\n\nTITLE: Using Structure Type Guards in TypeScript\nDESCRIPTION: Shows how to use Structure type guards to check and modify structure properties.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Structure } from \"ts-morph\";\n\n// ...etc...\n\nif (Structure.isExportable(structure))\n  structure.isExported = false;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decorators from Class Declarations in TypeScript\nDESCRIPTION: Demonstrates how to get decorators from a class declaration using the getDecorators() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst decorators = classDeclaration.getDecorators();\n```\n\n----------------------------------------\n\nTITLE: Checking Optional Parameter Status in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to check if a parameter is optional using isOptional() method. This covers parameters with question marks, rest parameters, or those with initializers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOptional = parameter.isOptional(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Import Organization in TypeScript\nDESCRIPTION: Added UserPreferences parameter to sourceFile.organizeImports() for customizing import organization.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsourceFile.organizeImports()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Types in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve base types from a TypeScript interface using ts-morph. This operation fetches the list of base types associated with the interface declaration. It requires no parameters and returns an array of base types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseTypes = interfaceDeclaration.getBaseTypes();\n```\n\n----------------------------------------\n\nTITLE: Adding Property Signatures to TypeScript Interfaces with ts-morph\nDESCRIPTION: Insert a property signature into a TypeScript interface by specifying attributes such as name and type using ts-morph. The `insertProperty` method allows addition at a particular index.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst propertySignature = interfaceDeclaration.insertProperty(1, { name: \"newProperty\", type: \"string\" });\n```\n\n----------------------------------------\n\nTITLE: Removing Enum Member using ts-morph\nDESCRIPTION: Code demonstrating how to remove an enum member using ts-morph's remove() method. The code gets a reference to the enum member and calls remove() on it.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/removing.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst member = sourceFile.getEnum(\"MyEnum\")!.getMember(\"myMember\")!;\nmember.remove();\n```\n\n----------------------------------------\n\nTITLE: Using Custom File System with ts-morph\nDESCRIPTION: This snippet outlines how to implement a custom file system by extending the FileSystemHost interface. The customized implementation can then be used with a Project instance. This allows for more tailored file system interactions.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/file-system.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FileSystemHost, Project } from \"ts-morph\";\n\nclass MyCustomFileSystem implements FileSystemHost {\n  // implement it\n}\n\nconst fs = new MyCustomFileSystem();\nconst project = new Project({ fileSystem: fs });\n```\n\n----------------------------------------\n\nTITLE: Getting Definitions of an Identifier\nDESCRIPTION: Demonstrates how to get the definitions of an identifier, similar to IDE \"go to definition\" functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst definitions = identifier.getDefinitions();\n```\n\n----------------------------------------\n\nTITLE: Working with Base Types and Signatures\nDESCRIPTION: Accessing base types, literal types, call signatures, and construct signatures in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseTypes = type.getBaseTypes();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst numberType = numberLiteralType.getBaseTypeOfLiteralType();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst callSignatures = type.getCallSignatures();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst constructSignatures = type.getConstructSignatures();\n```\n\n----------------------------------------\n\nTITLE: Add Variable Declaration\nDESCRIPTION: Shows how to add a variable declaration to a variable statement using `addDeclaration()`. It specifies the name and type of the new declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst declaration = variableStatement.addDeclaration({ name: \"num\", type: \"number\" });\n```\n\n----------------------------------------\n\nTITLE: Setting Function Body Text with Code Writer in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the code-block-writer to set the body text of a function declaration. It shows how to write lines, create blocks, and maintain proper indentation automatically.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/code-writer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.setBodyText(writer =>\n  writer.writeLine(\"let myNumber = 5;\")\n    .write(\"if (myNumber === 5)\").block(() => {\n      writer.writeLine(\"console.log('yes')\");\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Structure in TypeScript\nDESCRIPTION: Shows how to modify a node's structure using the set() method with different property configurations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.set(classStructure);\n// sets the name\nclassDeclaration.set({ name: \"NewName\" });\n// sets the properties\nclassDeclaration.set({ properties: [{ name: \"newProperty\" }] });\n```\n\n----------------------------------------\n\nTITLE: Getting Initializers in ts-morph\nDESCRIPTION: Demonstrates different methods to retrieve initializers from a variable declaration, including type-safe and conditional retrieval based on syntax kind.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/initializers.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvariableDeclaration.getInitializer(); // returns: Expression | undefined\nvariableDeclaration.getInitializerOrThrow(); // returns: Expression\nvariableDeclaration.getInitializerIfKind(SyntaxKind.FunctionExpression); // returns: Expression | undefined\nvariableDeclaration.getInitializerIfKindOrThrow(SyntaxKind.FunctionExpression); // returns: Expression\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters with ts-morph\nDESCRIPTION: This code snippet shows the usage of ts-morph to get parameters from a function signature. The method `getParameters` extracts symbols representing the parameters, returning an array of Symbol objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = signature.getParameters(); // returns: Symbol[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Declarations in TypeScript Interfaces with ts-morph\nDESCRIPTION: Fetch the base declarations such as interfaces, type aliases, or classes from a TypeScript interface using ts-morph. This operation does not require parameters and provides connections to related types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseDeclarations = interfaceDeclaration.getBaseDeclarations();\n```\n\n----------------------------------------\n\nTITLE: Advanced AST Traversal with Multiple Control Options in TypeScript\nDESCRIPTION: Comprehensive example showing the various traversal control options available in forEachDescendant, including skip(), up(), and stop() for finer control over node traversal.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnode.forEachDescendant((node, traversal) => {\n  switch (node.getKind()) {\n    case SyntaxKind.ClassDeclaration:\n      // skips traversal of the current node's descendants\n      traversal.skip();\n      break;\n    case SyntaxKind.ParameterDeclaration:\n      // skips traversal of the current node, siblings, and all their descendants\n      traversal.up();\n      break;\n    case SyntaxKind.FunctionDeclaration:\n      // stop traversal completely\n      traversal.stop();\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Module Specifier Value from Import Declaration in ts-morph\nDESCRIPTION: Shows how to get the string value of a module specifier from an import declaration. For example, with 'import settings from \"./settings\";', this would return './settings'.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst moduleSpecifierValue = importDeclaration.getModuleSpecifierValue(); // returns: string\n```\n\n----------------------------------------\n\nTITLE: Getting the Type of an Identifier\nDESCRIPTION: Shows how to retrieve the TypeScript type information for an identifier.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst identifierType = identifier.getType();\n```\n\n----------------------------------------\n\nTITLE: Working with Index and Tuple Types\nDESCRIPTION: Methods for working with index types and tuple element types in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringIndexType = type.getStringIndexType();\nconst numberIndexType = type.getNumberIndexType();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tupleElements = type.getTupleElements();\n```\n\n----------------------------------------\n\nTITLE: Reference Comments Retrieval in TypeScript\nDESCRIPTION: Methods to get different types of reference comments from source files\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// gets `/// <reference path=\"...\" />` comments\nconst pathReferenceDirectives = sourceFile.getPathReferenceDirectives();\n// gets `/// <reference types=\"...\" />` comments\nconst typeReferenceDirectives = sourceFile.getTypeReferenceDirectives();\n// gets `/// <reference lib=\"...\" />` comments\nconst libReferenceDirectives = sourceFile.getLibReferenceDirectives();\n```\n\n----------------------------------------\n\nTITLE: Add Variable Statement\nDESCRIPTION: Shows how to add a variable statement to a source file using `addVariableStatement()`. It specifies the declaration kind (e.g., `const`) and provides an array of declarations with names, types, and initializers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project, VariableDeclarationKind } from \"ts-morph\";\n\nconst variableStatement = sourceFile.addVariableStatement({\n  declarationKind: VariableDeclarationKind.Const, // defaults to \"let\"\n  declarations: [{\n    name: \"myNumber\",\n    initializer: \"5\",\n  }, {\n    name: \"myString\",\n    type: \"string\",\n    initializer: `'my string'`,\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Child Structure in TypeScript\nDESCRIPTION: Shows how to find a specific child structure using forEachStructureChild with a conditional return.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstClassDecStructure = forEachStructureChild(structure, child => Structure.isClass(child) ? child : undefined);\n```\n\n----------------------------------------\n\nTITLE: Accessing Interface Members in TypeScript with ts-morph\nDESCRIPTION: Retrieve all the members of a TypeScript interface using ts-morph. Members can include methods, properties, index signatures, etc. This method requires no parameters and returns a collection of interface members.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst members = interfaceDeclaration.getMembers();\n```\n\n----------------------------------------\n\nTITLE: Working with Class Types and Inheritance\nDESCRIPTION: Examples of retrieving base types, base class, and derived classes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseTypes = classDeclaration.getBaseTypes();\nconst baseClass = classDeclaration.getBaseClass();\nconst derivedClasses = classDeclaration.getDerivedClasses();\n```\n\n----------------------------------------\n\nTITLE: Immediate File Deletion in TypeScript\nDESCRIPTION: Methods for immediate file deletion operations\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait sourceFile.deleteImmediately();\nsourceFile.deleteImmediatelySync();\n```\n\n----------------------------------------\n\nTITLE: Adding and Inserting Extends Expressions in TypeScript with ts-morph\nDESCRIPTION: Add or insert extends expressions into a TypeScript interface declaration using ts-morph. The operations utilize `addExtends` and `insertExtends` methods to add expressions both as single strings and as arrays. The index parameter is used for insertion operations to specify location.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterfaceDeclaration.addExtends(\"Named\");\ninterfaceDeclaration.addExtends([\"Named\", \"Aged\"]);\ninterfaceDeclaration.insertExtends(1, \"Named\");\ninterfaceDeclaration.insertExtends(2, [\"Named\", \"Aged\"]);\n```\n\n----------------------------------------\n\nTITLE: Type Guards - TS-Morph\nDESCRIPTION: This snippet shows how to use type guard functions from the ts-morph library to determine the type of a node. The `Node.isClassDeclaration` function checks if a given node is a class declaration, allowing for type-safe operations within the conditional block. This requires importing the `Node` class from the ts-morph library.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/utilities.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Node } from \"ts-morph\";\n\n// ... some code here that gets a node ...\n\nif (Node.isClassDeclaration(node)) {\n  // node is of type ClassDeclaration in here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modules to a Source File in TypeScript\nDESCRIPTION: This snippet illustrates how to add or insert modules into a TypeScript source file using the `addModule()` method. The added module is constructed with a name, facilitating structured code organization.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst moduleDeclaration = sourceFile.addModule({\n  name: \"ModuleName\",\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Function Overloads with ts-morph\nDESCRIPTION: Demonstrates how to remove function overloads from a source file by calling the .remove() method on the overload object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunctionOverload.remove();\n```\n\n----------------------------------------\n\nTITLE: Using the `.statements` property\nDESCRIPTION: The way to define structures with statements has been updated. Instead of using properties like `.classes`, `.enums`, and `.bodyText`, you should now use the `.statements` property with a `StructureKind` to differentiate between the different structure types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFileStructure: SourceFileStructure = {\n  classes: [{\n    name: \"MyClass\",\n  }],\n  enums: [{\n    name: \"MyEnum\",\n    members: [{ name: \"value\" }],\n  }],\n  bodyText: \"console.log(5);\",\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFileStructure: SourceFileStructure = {\n  statements: [{\n    kind: StructureKind.Class,\n    name: \"MyClass\",\n  }, {\n    kind: StructureKind.Enum,\n    name: \"MyEnum\",\n    members: [{ name: \"value\" }],\n  }, \"console.log(5);\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Abstract Members\nDESCRIPTION: Examples of working with abstract class members.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nmethod.isAbstract();\nmethod.getAbstractKeyword();\nmethod.setIsAbstract(true);\nmethod.setIsAbstract(false);\n```\n\n----------------------------------------\n\nTITLE: Removing Initializers in ts-morph\nDESCRIPTION: Shows how to remove an initializer from a variable declaration using the removeInitializer() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/initializers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvariableDeclaration.removeInitializer();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Node is Async in ts-morph\nDESCRIPTION: Tests whether a function declaration has the async modifier. Returns a boolean value indicating whether the node is asynchronous.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/async.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.isAsync(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Referenced Source File from Import Declaration in ts-morph\nDESCRIPTION: Shows how to retrieve the source file referenced by an import declaration's module specifier. Returns undefined if the referenced file cannot be found.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = importDeclaration.getModuleSpecifierSourceFile(); // returns: SourceFile | undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for TypeScript Projects\nDESCRIPTION: Demonstrates how to set compiler options during project creation. It supports providing specific TypeScript compiler configurations, like setting the target script version. Outputs the project configured with the specified options.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = await createProject({\n  compilerOptions: {\n    target: ts.ScriptTarget.ES3,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Enums in TypeScript using ts-morph\nDESCRIPTION: Shows how to add an enum to a source file, namespace, or function-like declaration using ts-morph. The example demonstrates adding an enum with a name and a single member.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst enumDeclaration = sourceFile.addEnum({\n  name: \"EnumName\",\n  members: [{\n    name: \"member\",\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Named Imports in ts-morph\nDESCRIPTION: Shows how to remove a single named import using the remove() method or all named imports from an import declaration using removeNamedImports().\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nnamedImport.remove();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.removeNamedImports();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comment Ranges in TypeScript with ts-morph\nDESCRIPTION: Shows how to get leading and trailing comment ranges from any node in ts-morph. These methods return comments that precede or follow a node.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst leadingComments = node.getLeadingCommentRanges();\nconst trailingComments = node.getTrailingCommentRanges();\n```\n\n----------------------------------------\n\nTITLE: Getting Function Body Text with ts-morph\nDESCRIPTION: Explains how to retrieve the body text of a function declaration, returning it without any leading or trailing whitespace or indentation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconsole.log(functionDeclaration.getBodyText());\n```\n\n----------------------------------------\n\nTITLE: Removing a Class Declaration\nDESCRIPTION: Example showing how to remove a class declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Immediate File Move Operations in TypeScript\nDESCRIPTION: Methods for immediate file move operations\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait sourceFile.moveImmediately(\"NewFile.ts\");\nsourceFile.moveImmediatelySync(\"NewFile2.ts\");\n```\n\n----------------------------------------\n\nTITLE: Setting Initializers in ts-morph\nDESCRIPTION: Demonstrates how to set a new initializer value for a variable declaration using the setInitializer() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/initializers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvariableDeclaration.setInitializer(\"2 + 2\");\n```\n\n----------------------------------------\n\nTITLE: Adding Functions in a Source File using ts-morph\nDESCRIPTION: Demonstrates the addition of function declarations to a source file using addFunction method. It highlights setting a name as a key parameter.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst functionDeclaration = sourceFile.addFunction({\n  name: \"FunctionName\",\n});\n```\n\n----------------------------------------\n\nTITLE: Export Declaration Operations\nDESCRIPTION: Methods for working with export declarations including checking named exports and module specifiers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst exportDeclaration = sourceFile.addExportDeclaration({\n  namedExports: [\"MyClass\"],\n  moduleSpecifier: \"./file\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Type Parameter Constraints in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to set a constraint on a type parameter using the setConstraint() method. This example sets the constraint to 'string'.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntypeParameter.setConstraint(\"string\");\n```\n\n----------------------------------------\n\nTITLE: Getting All Modifiers in TypeScript using ts-morph\nDESCRIPTION: Retrieves all modifiers for a function declaration using the getModifiers() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modifiers.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getModifiers();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documentation Comments with ts-morph\nDESCRIPTION: The snippet demonstrates extracting documentation comments from a function signature using ts-morph's `getDocumentationComments` method. This method provides an array of documentation comment strings associated with the signature.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst docs = signature.getDocumentationComments();\n```\n\n----------------------------------------\n\nTITLE: Declaring Modules and Namespaces in TypeScript\nDESCRIPTION: This snippet demonstrates various forms of module and namespace declarations, including empty namespaces and module declarations with specific string identifiers. These declarations serve as containers for organizing code in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts ignore-error: 2664\nnamespace MyNamespace {\n}\n\nmodule MyModule {\n}\n\ndeclare module \"some-module\" {\n}\n\ndeclare module \"other-module\";\n```\n```\n\n----------------------------------------\n\nTITLE: Adding and Inserting Decorators in TypeScript\nDESCRIPTION: Demonstrates how to add or insert decorators to a class declaration using ts-morph methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.addDecorator({\n  name: \"MyDecorator\",\n  arguments: [\"3\", `\"some string\"`],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a source file with overwrite option in ts-morph\nDESCRIPTION: Creates a source file with the overwrite option set to true to prevent errors when the file already exists.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.createSourceFile(\"path/to/myNewFile.ts\", \"\", { overwrite: true });\n```\n\n----------------------------------------\n\nTITLE: Inserting Type Parameters in TypeScript with ts-morph\nDESCRIPTION: Shows how to insert a type parameter at a specific position in a class declaration. This example inserts a type parameter named 'T' at index 1 with an optional string constraint.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeParameter = classDeclaration.insertTypeParameter(1, {\n  name: \"T\",\n  constraint: \"string\", // optional\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Properties\nDESCRIPTION: Methods for accessing regular and apparent properties of types in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst properties = type.getProperties();\nconst prop1 = type.getProperty(\"prop1\");\nconst prop2 = type.getProperty(p => p.getName() === \"prop2\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst apparentProperties = type.getApparentProperties();\nconst prop1 = type.getApparentProperty(\"prop1\");\nconst prop2 = type.getApparentProperty(p => p.getName() === \"prop2\");\n```\n\n----------------------------------------\n\nTITLE: Managing Class Properties\nDESCRIPTION: Examples of working with instance and static properties, including getters and setters.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst instanceProperties = classDeclaration.getInstanceProperties();\nconst myProperty = classDeclaration.getInstanceProperty(\"myProperty\");\nconst myStringProperty = classDeclaration.getInstanceProperty(p =>\n    Node.isPropertyDeclaration(p) && p.getType().getText() === \"string\");\n\nconst staticProperties = classDeclaration.getStaticProperties();\nconst myStaticProperty = classDeclaration.getStaticProperty(\"myStaticProperty\");\nconst myStaticStringProperty = classDeclaration.getStaticProperty(p =>\n    Node.isPropertyDeclaration(p) && p.getType().getText() === \"string\");\n\nconst property = classDeclaration.addProperty({\n  isStatic: true,\n  name: \"prop\",\n  type: \"string\",\n});\n\nconst getAccessor = classDeclaration.addGetAccessor({\n  name: \"someNumber\",\n  returnType: \"number\",\n  statements: [\"return 5;\"]\n});\n\nconst setAccessor = classDeclaration.addSetAccessor({\n  name: \"someNumber\",\n  parameters: [{ name: \"value\", type: \"number\" }],\n  statements: [\"_someNumber = value;\"]\n});\n\npropertyDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with JSDoc Comments in TypeScript\nDESCRIPTION: An example showing a TypeScript function declaration with JSDoc comments that include a description and a parameter tag.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the name.\n * @param person - Person to get the name from.\n */\nfunction getName(person: Person) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extends Expressions in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve extends expressions from a TypeScript interface declaration using ts-morph. The function returns an array of expressions representing extended interfaces. Extends expressions can be added or inserted using appropriate methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendsExpressions = interfaceDeclaration.getExtends();\n```\n\n----------------------------------------\n\nTITLE: Adding Accessors (Get and Set)\nDESCRIPTION: Illustrates how to add get and set accessors to an object literal expression using the `addGetAccessor` and `addSetAccessor` methods, respectively. The example includes specifying the return type for the getter, and parameters for the setter.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst getAccessor = objectLiteralExpression.addGetAccessor({\n  name: \"someNumber\",\n  returnType: \"number\",\n  statements: [\"return someNumber;\"],\n});\nconst setAccessor = objectLiteralExpression.addSetAccessor({\n  name: \"someNumber\",\n  parameters: [{ name: \"value\", type: \"number\" }],\n  statements: [\"someNumber = value;\"],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Type Aliases in ts-morph\nDESCRIPTION: Shows how to add a new type alias to a source file. The example creates a type alias named 'TypeAliasName' with a string type.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-aliases.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeAliasDeclaration = sourceFile.addTypeAlias({\n  name: \"TypeAliasName\",\n  type: \"string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Module Declaration in TypeScript\nDESCRIPTION: This snippet details the method to remove a module declaration using the `.remove()` function. This is essential for managing code and removing unnecessary modules or namespaces.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nmoduleDeclaration.remove();\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Property Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove a property signature from a TypeScript interface using ts-morph by invoking the `.remove()` method on the property signature object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\npropertySignature.remove();\n```\n\n----------------------------------------\n\nTITLE: Example Variable Declaration in ts-morph\nDESCRIPTION: Sample code showing a variable declaration with a property access expression, which is used in the next snippet to demonstrate node replacement.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet myVariable = Some.Property.Access.Expression;\n```\n\n----------------------------------------\n\nTITLE: Getting Type Parameter Constraints in TypeScript with ts-morph\nDESCRIPTION: Shows how to retrieve the constraint of a type parameter. The getConstraint() method returns the constraint as a TypeNode or undefined if no constraint exists.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst constraint = typeParameter.getConstraint(); // returns: TypeNode | undefined\n```\n\n----------------------------------------\n\nTITLE: Renaming with Prefix/Suffix Option\nDESCRIPTION: Example of using the usePrefixAndSuffixText option when renaming.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvarA.rename(\"SomeOtherName\", {\n  usePrefixAndSuffixText: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing TypeScript Compiler Node\nDESCRIPTION: Shows how to access the underlying TypeScript compiler node from a ts-morph node object using the .compilerNode property.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/compiler-nodes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst compilerNode = interfaceDeclaration.compilerNode;\n```\n\n----------------------------------------\n\nTITLE: Adding Method Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Insert a method signature into a TypeScript interface using ts-morph by specifying attributes like name and return type. The `insertMethod` method allows adding at a specific index position.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst methodSignature = interfaceDeclaration.insertMethod(1, { name: \"newMethod\", returnType: \"boolean\" });\n```\n\n----------------------------------------\n\nTITLE: Printing a Compiler Node - TS-Morph\nDESCRIPTION: This snippet demonstrates how to use the `printNode` utility function from ts-morph to print a compiler node (`ts.Node`). This is useful when you need to print a node that is part of the TypeScript compiler's internal representation. It requires importing `printNode` and `ts` from ts-morph. Optionally, a source file can be provided to the function.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/utilities.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { printNode, ts } from \"ts-morph\";\n\n// get a compiler node from somewhere\nconst compilerNode: ts.Node = ...;\n// optionally provide a source file and there is some printing options on this\nconst functionText = printNode(compilerNode);\n\nconsole.log(functionText);\n```\n\n----------------------------------------\n\nTITLE: Getting Exported Declarations\nDESCRIPTION: Example of retrieving and logging exported declarations from a TypeScript file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExportedDeclarations, Project } from \"ts-morph\";\n\nconst project = new Project();\nproject.addSourceFilesAtPaths(\"**/*.ts\");\nconst mainFile = project.getSourceFileOrThrow(\"main.ts\");\n\nfor (const [name, declarations] of mainFile.getExportedDeclarations())\n  console.log(`${name}: ${declarations.map(d => d.getText()).join(\", \")}`);\n```\n\n----------------------------------------\n\nTITLE: Adding Call Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Add a call signature to an interface declaration in TypeScript using ts-morph by specifying attributes such as return type. The `addCallSignature` method takes an object describing the signature.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst callSignature = interfaceDeclaration.addCallSignature({ returnType: \"SomeClass\" });\n```\n\n----------------------------------------\n\nTITLE: Checking Declaration Kind in TypeScript\nDESCRIPTION: The snippet shows how to check the type of a module declaration using methods to get the declaration kind and keyword. This helps in determining whether it's a namespace, module, or global declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nmoduleDeclaration.getDeclarationKind(); // returns: ModuleDeclarationKind\n// or\nmoduleDeclaration.hasModuleKeyword(); // returns: boolean\nmoduleDeclaration.hasNamespaceKeyword(); // returns: boolean\n```\n```\n\n----------------------------------------\n\nTITLE: Immediately Saving Individual Files and Directories in ts-morph\nDESCRIPTION: Shows how to immediately save, delete, copy, or move files and directories using methods that propagate changes to the file system immediately, rather than waiting for a project-wide save operation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// or use the synchronous alternatives (ex. saveSync())\nawait sourceFile.save();\nawait sourceFile.deleteImmediately();\nawait sourceFile.copyImmediately(\"copiedFile.ts\");\nawait sourceFile.moveImmediately(\"movedFile.ts\");\n\nawait directory.save();\nawait directory.deleteImmediately();\nawait directory.copyImmediately(\"CopiedDir\");\nawait directory.moveImmediately(\"MovedDir\");\n```\n\n----------------------------------------\n\nTITLE: Using forEachDescendant with Traversal Options in TypeScript\nDESCRIPTION: Example showing the updated syntax for stopping traversal in forEachDescendant method. The traversal parameter now provides stop(), skip(), and up() methods for advanced traversal control.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nnode.forEachDescendant((node, traversal) => {\n  if (node.getKind() === SyntaxKind.FunctionDeclaration)\n    traversal.stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Type Parameters in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to remove a type parameter by calling the remove() method on the type parameter instance.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntypeParameter.remove();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Directory References in TypeScript\nDESCRIPTION: Methods to retrieve directory objects from source files, other directories, or the main project object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst directory = sourceFile.getDirectory();\n\ndirectory.getDirectory(\"childDir\");\ndirectory.getDirectoryOrThrow(\"childDir\");\n// child directories\ndirectory.getDirectories();\n// parent directory, if it exists\ndirectory.getParent();\n\nproject.getRootDirectories(); // gets directories without a parent\nproject.getDirectories(); // gets all the directories\nproject.getDirectory(\"path/to/directory\");\nproject.getDirectoryOrThrow(\"path/to/directory\");\n```\n\n----------------------------------------\n\nTITLE: Formatting Diagnostic Messages in TypeScript Projects\nDESCRIPTION: Explains how to format and display diagnostic messages from the TypeScript compiler using the @ts-morph/bootstrap library. This snippet assumes an in-memory file system and outputs formatted diagnostics to the console.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createProject, ts } from \"@ts-morph/bootstrap\";\n\nconst project = await createProject({ useInMemoryFileSystem: true });\nproject.createSourceFile(\"test.ts\", \"const t: string = 5;\");\n\nconst program = project.createProgram();\nconst diagnostics = ts.getPreEmitDiagnostics(project.createProgram());\n\nconsole.log(project.formatDiagnosticsWithColorAndContext(diagnostics));\n```\n\n----------------------------------------\n\nTITLE: Resulting Enum After Removal\nDESCRIPTION: The resulting enum structure after the member has been removed, showing an empty enum declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/removing.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyEnum {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a single source file by path in ts-morph\nDESCRIPTION: Adds a single source file to the project by specifying its file path.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.addSourceFileAtPath(\"path/to/file.ts\"); // or addSourceFileAtPathIfExists\n```\n\n----------------------------------------\n\nTITLE: Working with Import Specifier Names in ts-morph\nDESCRIPTION: Shows how to get and set the name of an import specifier. The getNameNode method returns the Identifier node for the import name.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnamedImport.getNameNode(); // returns: Identifier\nnamedImport.setName(\"NewName\");\n```\n\n----------------------------------------\n\nTITLE: Getting Source File from Diagnostic in TypeScript with ts-morph\nDESCRIPTION: This snippet demonstrates how to get the source file associated with a specific diagnostic. The return value is a SourceFile object or undefined if no source file is associated.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = diagnostic.getSourceFile(); // returns: SourceFile | undefined\n```\n\n----------------------------------------\n\nTITLE: Setting Declaration Kind in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the declaration kind of a module to either a namespace, module, or global using the `setDeclarationKind()` method. This is crucial for defining the context in which the module operates.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nmoduleDeclaration.setDeclarationKind(ModuleDeclarationKind.Namespace);\nmoduleDeclaration.setDeclarationKind(ModuleDeclarationKind.Module);\nmoduleDeclaration.setDeclarationKind(ModuleDeclarationKind.Global);\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Named Imports from Import Declaration in ts-morph\nDESCRIPTION: Shows how to retrieve all named imports (import specifiers) from an import declaration. Returns an array of ImportSpecifier objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst namedImports = importDeclaration.getNamedImports(); // returns: ImportSpecifier\n```\n\n----------------------------------------\n\nTITLE: Atom TypeScript AST Viewer Setup Workflow\nDESCRIPTION: Step-by-step guide for installing and using the Atom TypeScript package to view Abstract Syntax Trees, enabling developers to inspect code structure directly within the Atom editor.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/ast-viewers.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n1. Install Atom\n2. Install atom-typescript package\n3. Create TypeScript file\n4. Open command palette\n5. Run 'TypeScript: Ast Full'\n```\n\n----------------------------------------\n\nTITLE: Changing Node Order with ts-morph\nDESCRIPTION: Shows how to reposition an interface declaration within a source file using the setOrder() method. Takes a numeric index parameter to specify the new position. Note that this functionality is not currently supported for comma separated nodes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/order.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst interfaceDeclaration = sourceFile.getInterfaceOrThrow(\"MyInterface\");\ninterfaceDeclaration.setOrder(2);\n```\n\n----------------------------------------\n\nTITLE: Export Assignment Operations\nDESCRIPTION: Methods for working with export assignments including export equals and default exports.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst exportAssignment = sourceFile.addExportAssignment({\n  isExportEquals: true, // defaults to true\n  expression: \"5\",\n});\n```\n\n----------------------------------------\n\nTITLE: Indentation Operations in TypeScript\nDESCRIPTION: Methods for indenting and unindenting code in source files\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.indent(5);        // indent line containing position 5\nsourceFile.indent([5, 10]);  // indent line or lines within position range [5-10]\nsourceFile.indent(10, 3);    // indent line containing position 10, 3 times\n\nsourceFile.unindent(10);     // unindent line containing position 10\n\nsourceFile.indent(10, -1);   // unindent line containing position 10 (specify negative times)\nsourceFile.unindent(10, -1); // indent line containing position 10 (specify negative times)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ts-morph Development Environment\nDESCRIPTION: Command for installing, setting up, and building all packages for development in the ts-morph project.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/DEVELOPMENT.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# installs, sets up, and builds all the packages for development\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Retrieve call signatures from a TypeScript interface using ts-morph. This demonstrates how to get all call signatures and filter specific ones based on the number of parameters using ts-morph API.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst callSignatures = interfaceDeclaration.getCallSignatures();\nconst callSignature = interfaceDeclaration.getCallSignature(c => c.getParameters().length > 2);\n```\n\n----------------------------------------\n\nTITLE: Set Variable Declaration Kind\nDESCRIPTION: Demonstrates how to set the declaration kind of a variable statement using `setDeclarationKind()`. This allows changing the declaration kind, such as from `let` to `const`.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvariableStatement.setDeclarationKind(VariableDeclarationKind.Const);\n```\n\n----------------------------------------\n\nTITLE: Emitting Only Declaration Files (.d.ts) in TypeScript\nDESCRIPTION: Demonstrates how to emit only declaration files (.d.ts) from a TypeScript project using ts-morph by specifying the emitOnlyDtsFiles flag.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nproject.emit({ emitOnlyDtsFiles: true });\n```\n\n----------------------------------------\n\nTITLE: Unwrapping a Module Declaration in TypeScript\nDESCRIPTION: This snippet shows how to use the `.unwrap()` method on a module declaration to replace it with its body. This transformation simplifies the structure by removing the enclosing module or namespace.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nnamespace MyNamespace {\n  function someFunction() {\n  }\n\n  class SomeClass {\n  }\n}\n\n// After unwrapping\n// Changing code to:\nfunction someFunction() {\n}\n\nclass SomeClass {\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving 'declare' Keyword from TypeScript Declaration using ts-morph\nDESCRIPTION: This snippet illustrates how to get the 'declare' keyword from a class declaration if it exists, using the getDeclareKeyword() method from ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/ambient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.getDeclareKeyword();\n```\n\n----------------------------------------\n\nTITLE: Adding Program Methods in TypeScript\nDESCRIPTION: Adds new method to Program class for getting emit module resolution kind.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nProgram.getEmitModuleResolutionKind()\n```\n\n----------------------------------------\n\nTITLE: Removing Default Export\nDESCRIPTION: Method to remove default export from a source file. Safe to call even when no default export exists.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.removeDefaultExport();\n```\n\n----------------------------------------\n\nTITLE: New Type Parameter Methods in TypeScript\nDESCRIPTION: Added new methods for working with type parameters including adding, inserting, removing, and modifying constraints and defaults.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nTypeParameterDeclaration.removeDefault()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nTypeParameterDeclaration.removeConstraint()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nTypeParameterDeclaration.setDefault(text)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nTypeParameterDeclaration.setConstraint(text)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Enum Member Values in TypeScript using ts-morph\nDESCRIPTION: Shows how to retrieve and set enum member values using ts-morph. It demonstrates getting the value (which can be a string or number) and setting it to either a number or a string.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenumMember.getValue(); // returns: string | number\n\nenumMember.setValue(5);\n\nenumMember.setValue(\"string value\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Enum Members in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to get a specific enum member by name or by a custom condition using the getMember() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst member1 = enumDeclaration.getMember(\"member1\");\nconst member2 = enumDeclaration.getMember(m => m.getValue() === 1);\n```\n\n----------------------------------------\n\nTITLE: Resolving Call Signature in ts-morph\nDESCRIPTION: Gets the resolved signature of a call-like expression node (such as a call expression). This helps with analyzing function calls and their parameter types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/type-checker.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvedSignature = typeChecker.getResolvedSignature(callLikeExpression);\n```\n\n----------------------------------------\n\nTITLE: Removing Enums in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to remove an enum declaration using the remove() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenumDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Basic File Path Operations in TypeScript\nDESCRIPTION: Methods to retrieve file path information from source files using ts-morph\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// returns the file path (ex. /home/david/file.ts)\nsourceFile.getFilePath();\n\n// returns only the file name (ex. file.ts)\nsourceFile.getBaseName();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enums in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to retrieve enums from source files, namespaces, or function bodies using ts-morph. It shows different methods of getting enums, including by name and by a custom condition.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst enums = sourceFile.getEnums();\nconst enum1 = sourceFile.getEnum(\"Enum1\");\nconst enum2 = sourceFile.getEnum(e => e.getMembers().length === 5);\n```\n\n----------------------------------------\n\nTITLE: Using Forget Blocks in ts-morph\nDESCRIPTION: This snippet highlights the use of forget blocks in ts-morph to manage memory more efficiently during node creation, particularly with nested operations. Forget blocks ensure nodes are forgotten when out of scope, minimizing memory usage and maintaining performance. Requires ts-morph library and project setup. Key inputs are source files and nodes to be forgotten, while outputs are optimized memory usage and performance enhancements.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ClassDeclaration, InterfaceDeclaration, ModuleDeclaration, Project } from \"ts-morph\";\n\nconst project = new Project();\nconst text = \"namespace Namespace { interface Interface {} class Class {} }\";\nconst sourceFile = project.createSourceFile(\"file.ts\", text);\n\nlet moduleDeclaration: ModuleDeclaration;\nlet interfaceDeclaration: InterfaceDeclaration;\nlet classDeclaration: ClassDeclaration;\n\nproject.forgetNodesCreatedInBlock(remember => {\n  moduleDeclaration = sourceFile.getModuleOrThrow(\"Namespace\");\n  interfaceDeclaration = moduleDeclaration.getInterfaceOrThrow(\"Interface\");\n  classDeclaration = moduleDeclaration.getClassOrThrow(\"Class\");\n\n  // you can mark nodes to remember outside the scope of this block...\n  // this will remember the specified node and all its ancestors\n  remember(interfaceDeclaration); // or pass in multiple nodes\n});\n\nmoduleDeclaration.getText(); // ok, child was implicitly marked to remember\ninterfaceDeclaration.getText(); // ok, was explicitly marked to remember\nclassDeclaration.getText(); // throws, was forgotten\n\n// alternatively, return the node to remember it\nconst node = project.forgetNodesCreatedInBlock(() => {\n  const classDec = sourceFile.getClassOrThrow(\"MyClass\");\n  // ...do a lot of stuff...\n  return classDec;\n});\n\nnode.getText(); // ok\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nproject.forgetNodesCreatedInBlock(() => {\n  moduleDeclaration = sourceFile.getModuleOrThrow(\"Namespace\");\n  interfaceDeclaration = moduleDeclaration.getInterfaceOrThrow(\"Interface\");\n\n  project.forgetNodesCreatedInBlock(remember => {\n    classDeclaration = moduleDeclaration.getClassOrThrow(\"Class\");\n    remember(moduleDeclaration);\n  });\n\n  classDeclaration.getText(); // throws, was forgotten outside the block above\n  interfaceDeclaration.getText(); // ok, hasn't been forgotten yet\n});\n\nmoduleDeclaration.getText(); // ok, was marked to remember in one of the blocks\ninterfaceDeclaration.getText(); // throws, was forgotten\nclassDeclaration.getText(); // throws, was forgotten\n```\n\n----------------------------------------\n\nTITLE: Declaring a Variable Statement\nDESCRIPTION: Illustrates how to declare a variable statement in TypeScript using `export const` keyword. This shows a simple declaration with string values.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const var1 = \"5\", var2 = \"6\";\n```\n\n----------------------------------------\n\nTITLE: Testing if a Node is Ambient in TypeScript using ts-morph\nDESCRIPTION: This snippet demonstrates how to check if a class declaration is ambient using the isAmbient() method from ts-morph. It returns a boolean value indicating whether the declaration is ambient.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/ambient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.isAmbient(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Default Export Symbol\nDESCRIPTION: Method to retrieve the default export symbol from a source file or module.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultExportSymbol = sourceFile.getDefaultExportSymbol(); // returns: Symbol | undefined\n```\n\n----------------------------------------\n\nTITLE: Go to Definition in TypeScript\nDESCRIPTION: This snippet shows how to retrieve definitions of an identifier using `getDefinitions` in ts-morph. It can return detailed information about the identifier's definitions, which can be useful for navigation purposes in a codebase. For only retrieving node information, `getDefinitionNodes` can be used.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/finding-references.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst definitions = identifier.getDefinitions();\n```\n\n----------------------------------------\n\nTITLE: Getting Enum Members in TypeScript using ts-morph\nDESCRIPTION: Shows how to retrieve all members of an enum using the getMembers() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst members = enumDeclaration.getMembers();\n```\n\n----------------------------------------\n\nTITLE: Getting Node Structure in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a structure from a class declaration node using getStructure() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst classStructure = classDeclaration.getStructure(); // returns: ClassDeclarationStructure\n```\n\n----------------------------------------\n\nTITLE: Removing Index Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove an index signature from a TypeScript interface using ts-morph by invoking the `.remove()` method on the index signature object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nindexSignature.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting the Description from a JSDoc Node in ts-morph\nDESCRIPTION: Demonstrates how to retrieve the description text from a JSDoc node using the getDescription() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Getting the node from the example at the top of this file.\nconst jsDoc = functionDeclaration.getJsDocs()[0];\njsDoc.getDescription(); // returns string: \"Gets the name.\"\n```\n\n----------------------------------------\n\nTITLE: Checking and Modifying Const Enums in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to check if an enum is a const enum, get the const keyword, and set or unset the const property of an enum using ts-morph methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenumDeclaration.isConstEnum(); // returns: boolean\n\nenumDeclaration.getConstKeyword(); // returns: Node | undefined\n\nenumDeclaration.setIsConstEnum(true);\nenumDeclaration.setIsConstEnum(false);\n```\n\n----------------------------------------\n\nTITLE: Traversing Diagnostic Message Chain in TypeScript with ts-morph\nDESCRIPTION: This code demonstrates how to access the next DiagnosticMessageChain in a linked list of diagnostic messages.  This allows traversing through the different parts of a multiline error message.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst next = dmc.getNext(); // returns: DiagnosticMessageChain | undefined\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compiler Options in ts-morph Project\nDESCRIPTION: This snippet shows how to set the target compiler option in a ts-morph Project to ES2015, allowing access to modern TypeScript features.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project, ts } from \"ts-morph\";\n\nconst project = new Project({\n  useInMemoryFileSystem: true,\n  compilerOptions: {\n    target: ts.ScriptTarget.ES2015,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting 'declare' Keyword in TypeScript Declaration using ts-morph\nDESCRIPTION: This code demonstrates how to set or remove the 'declare' keyword from a class declaration using the setHasDeclareKeyword() method from ts-morph. It takes a boolean parameter to add or remove the keyword.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/ambient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.setHasDeclareKeyword(true);\nclassDeclaration.setHasDeclareKeyword(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Function Body Text using ts-morph\nDESCRIPTION: Shows how to set the body text of a function declaration using setBodyText. It also provides an alternative using code-block-writer for efficient code generation with correct indentation and settings.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunctionDeclaration.setBodyText(\"const myNumber = 5;\");\nfunctionDeclaration.setBodyText(writer =>\n  writer.writeLine(\"const myNumber = 5;\")\n    .write(\"if (myNumber === 5)\").block(() => {\n      writer.writeLine(\"console.log('yes')\");\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Aliases in ts-morph\nDESCRIPTION: Demonstrates how to retrieve type aliases from a source file using different methods. This includes getting all type aliases, finding one by name, or finding the first one that matches a certain condition.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-aliases.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeAliases = sourceFile.getTypeAliases();\nconst typeAlias = sourceFile.getTypeAlias(\"TypeAlias\");\nconst firstExportedTypeAlias = sourceFile.getTypeAlias(a => a.hasExportKeyword());\n```\n\n----------------------------------------\n\nTITLE: Fixing Node Manipulation in TypeScript\nDESCRIPTION: Fix for problems when manipulating nodes within forEachChild or forEachDescendant methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nforEachChild\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nforEachDescendant\n```\n\n----------------------------------------\n\nTITLE: Get Variable Declarations from Statement\nDESCRIPTION: Shows how to retrieve the variable declarations within a variable statement using `getDeclarations()`. This returns an array of variable declarations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst variableDeclarations = variableStatement.getDeclarations();\n```\n\n----------------------------------------\n\nTITLE: Warning Example for Text Manipulation in ts-morph\nDESCRIPTION: Illustrates how text manipulation methods can invalidate previously navigated node references, requiring renavigatation to access the nodes again after text changes are made.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet classDeclaration = sourceFile.addClass({ name: \"MyClass\" });\nsourceFile.insertText(0, \"// some comment\\n\");\n\n// this will throw...\nclassDeclaration.getInstanceProperties();\n\n// you'll need to get the reference again:\nclassDeclaration = sourceFile.getClass(\"MyClass\")!;\n```\n\n----------------------------------------\n\nTITLE: Handling Function Declarations without Names in TypeScript\nDESCRIPTION: Illustrates how unnamed function declarations can be exported as default and highlights that methods like getName() are nullable in these cases. The example shows a simple unnamed function export.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function() {\n  // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Decorator Names in TypeScript\nDESCRIPTION: Shows how to retrieve the name and fully qualified name of a decorator using getName() and getFullName() methods in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@obj.decorator\nclass Identifier {\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndecorator.getName(); // \"decorator\"\ndecorator.getFullName(); // \"obj.decorator\"\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Nodes from Compiler Nodes\nDESCRIPTION: Shows how to create and use wrapped nodes from existing TypeScript compiler nodes using createWrappedNode function.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/compiler-nodes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWrappedNode, ClassDeclaration, ts, SyntaxKind } from \"ts-morph\";\n\n// some code that creates a class declaration using the ts object\nconst classNode: ts.ClassDeclaration = ...;\n\n// create and use a wrapped node\nconst classDec = createWrappedNode(classNode).asKindOrThrow(SyntaxKind.ClassDeclaration);\nconst firstProperty = classDec.getProperties()[0];\n\n// ... do more stuff here ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Binding Elements from a Variable Declaration in TypeScript\nDESCRIPTION: Example showing how to access and work with binding elements from a variable declaration, demonstrating the corrected behavior introduced in version 14.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = sourceFile.getVariableStatements()[0];\nconst declaration = statement.getDeclarations();\n\nconst name = declaration.getNameNode();\nif (TypeGuards.isBindingElement(name))\n  console.log(name.getElements().map(e => e.getName())); // outputs: [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Source Files in ts-morph\nDESCRIPTION: Gets all source files from the project without any filtering.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFiles = project.getSourceFiles();\n```\n\n----------------------------------------\n\nTITLE: Adding a Property Assignment\nDESCRIPTION: Demonstrates how to add a property assignment to an object literal expression using the `addPropertyAssignment` method. It sets both the name and the initializer for the new property.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst propertyAssignment = objectLiteralExpression.addPropertyAssignment({\n  name: \"propertyAssignment\",\n  initializer: \"5\",\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Get Variable Statements\nDESCRIPTION: Demonstrates how to retrieve variable statements from a source file using `getVariableStatements()` and `getVariableStatement()`. The first retrieves all variable statements, while the second retrieves the first statement matching a condition.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst variableStatements = sourceFile.getVariableStatements();\nconst firstExportedVariableStatement = sourceFile.getVariableStatement(s => s.hasExportKeyword());\n```\n\n----------------------------------------\n\nTITLE: Template Literal Example in TypeScript\nDESCRIPTION: Example of a no-substitution template literal in TypeScript\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`some string`\n```\n\n----------------------------------------\n\nTITLE: Adding Enum Members in TypeScript using ts-morph\nDESCRIPTION: Shows how to add a new member to an existing enum using the addMember() method in ts-morph. The example demonstrates adding a member with a name and a numeric value.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst member = enumDeclaration.addMember({\n  name: \"newMember\",\n  value: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Projects with Custom Module Resolution\nDESCRIPTION: Illustrates setting up a TypeScript project with custom module resolution logic, allowing for specialized import paths and resolution strategies. Requires the use of a resolution host factory function to specify module name resolution logic.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createProject, ts } from \"@ts-morph/bootstrap\";\n\n// This is deno style module resolution.\n// Ex. `import { MyClass } from \"./MyClass.ts\"`;\nconst project = await createProject({\n  resolutionHost: (moduleResolutionHost, getCompilerOptions) => {\n    return {\n      resolveModuleNames: (moduleNames, containingFile) => {\n        const compilerOptions = getCompilerOptions();\n        const resolvedModules: ts.ResolvedModule[] = [];\n\n        for (const moduleName of moduleNames.map(removeTsExtension)) {\n          const result = ts.resolveModuleName(\n            moduleName,\n            containingFile,\n            compilerOptions,\n            moduleResolutionHost,\n          );\n\n          if (result.resolvedModule)\n            resolvedModules.push(result.resolvedModule);\n        }\n\n        return resolvedModules;\n      },\n    };\n\n    function removeTsExtension(moduleName: string) {\n      if (moduleName.slice(-3).toLowerCase() === \".ts\")\n        return moduleName.slice(0, -3);\n      return moduleName;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Async State of a Declaration in ts-morph\nDESCRIPTION: Sets whether a function declaration is asynchronous. Accepts a boolean parameter to enable or disable the async modifier on the function.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/async.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.setIsAsync(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Decorator Arguments in TypeScript\nDESCRIPTION: Shows how to retrieve, add, insert, and remove decorator arguments using various ts-morph methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst args = decorator.getArguments(); // returns: Expression[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst args = decorator.insertArguments(1, [\"5\", \"6\"]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// specify the index\ndecorator.removeArgument(0);\n// or specify the argument node\ndecorator.removeArgument(args[0]);\n```\n\n----------------------------------------\n\nTITLE: Accessing JSDoc Tags in ts-morph\nDESCRIPTION: Shows how to retrieve and access JSDoc tags from a JSDoc node, including getting the full text of a specific tag.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = jsDoc.getTags();\ntags[0].getText(); // \"@param person - Person to get the name from.\"\n```\n\n----------------------------------------\n\nTITLE: Fixing SyntaxList Insertion in TypeScript\nDESCRIPTION: Fix for SyntaxList.insertChildText(...) which was throwing when not inserting to the child syntax list.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nSyntaxList.insertChildText(...)\n```\n\n----------------------------------------\n\nTITLE: Finding Source File by Condition\nDESCRIPTION: Retrieves the first source file that matches a specified condition using a callback function.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/getting-source-files.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileWithFiveClasses = project.getSourceFile(f => f.getClasses().length === 5);\n```\n\n----------------------------------------\n\nTITLE: Adding Index Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Add an index signature to a TypeScript interface using ts-morph by specifying key name, key type, and return type. The `addIndexSignature` method is utilized for this operation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst indexSignature = interfaceDeclaration.addIndexSignature({\n  keyName: \"someKey\", // defaults to key\n  keyType: \"string\", // defaults to string\n  returnType: \"SomeClass\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Method\nDESCRIPTION: Demonstrates how to add a method to an object literal expression using the `addMethod` method.  The example includes the method name and statements within the method body.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst method = objectLiteralExpression.addMethod({\n  name: \"method\",\n  statements: [`return \"some string\";`],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Unicode Escape Example in TypeScript\nDESCRIPTION: Example of a string literal containing an extended Unicode escape sequence\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\\u{20bb7}\n```\n\n----------------------------------------\n\nTITLE: Getting Export Keywords\nDESCRIPTION: Methods to retrieve export and default keywords from a node.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getExportKeyword();\nfunctionDeclaration.getDefaultKeyword();\n```\n\n----------------------------------------\n\nTITLE: Setting Rest Parameter Status in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to set a parameter as a rest parameter using setIsRestParameter() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nparameter.setIsRestParameter(true);\n```\n\n----------------------------------------\n\nTITLE: Removing Decorators in TypeScript\nDESCRIPTION: Shows how to remove a decorator using the remove() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndecorator.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting Inner Text from a JSDoc Node in ts-morph\nDESCRIPTION: Demonstrates how to extract the inner text of a JSDoc comment (the text without the surrounding comment delimiters) using getInnerText().\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/documentation.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\njsDoc.getInnerText(); // \"Gets the name.\\n@param person - Person to get the name from.\"\n```\n\n----------------------------------------\n\nTITLE: Working with Function Expressions in ts-morph\nDESCRIPTION: Provides an example of retrieving function expressions initialized in variables using ts-morph. The snippet illustrates accessing a function expression through a variable's initializer.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst add = function(a: number, b: number) {\n  return a + b;\n};\n\nconst functionExpression = sourceFile.getVariableDeclarationOrThrow(\"add\")\n  .getInitializerIfKindOrThrow(SyntaxKind.FunctionExpression);\n```\n\n----------------------------------------\n\nTITLE: Checking if Module Specifier is Relative in ts-morph\nDESCRIPTION: Shows how to check if a module specifier path is relative (starts with './' or '../') using the isModuleSpecifierRelative method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.isModuleSpecifierRelative();\n```\n\n----------------------------------------\n\nTITLE: Removing Enum Members in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to remove an enum member using the remove() method in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/enums.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenumMember.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting Expression from TypeArguments in TypeScript\nDESCRIPTION: Retrieves the expression from an expression with type arguments node. This is commonly used with extends and implements expressions.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/expressions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst expression = expressionWithTypeArgs.getExpression();\n```\n\n----------------------------------------\n\nTITLE: Accessing Diagnostic Code in TypeScript with ts-morph\nDESCRIPTION: This code line shows how to retrieve the error code number associated with a diagnostic. This code can be used to programmatically identify and handle specific types of errors.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst code = diagnostic.getCode(); // returns: number\n```\n\n----------------------------------------\n\nTITLE: Removing Import Declarations in TypeScript with ts-morph\nDESCRIPTION: Shows how to remove an import declaration from a source file using the remove() method on an ImportDeclaration object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimportDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comment Nodes in ts-morph\nDESCRIPTION: Shows various methods to retrieve comment nodes from different TypeScript structures like source files, classes, interfaces, and object literals.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.getStatementsWithComments();\nclassDec.getMembersWithComments();\ninterfaceDec.getMembersWithComments();\nobjectLiteralExpression.getPropertiesWithComments();\n```\n\n----------------------------------------\n\nTITLE: Getting Column Position in TypeScript Source\nDESCRIPTION: New method getLengthFromLineStartAtPos added to replace getColumnAtPos in the next major version for getting column position information.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetLengthFromLineStartAtPos\n```\n\n----------------------------------------\n\nTITLE: Remove Variable Statement\nDESCRIPTION: Illustrates how to remove a variable statement using the `remove()` method. This removes the entire variable statement from its parent.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvariableStatement.remove();\n```\n\n----------------------------------------\n\nTITLE: Accessing Diagnostic Position Information in TypeScript with ts-morph\nDESCRIPTION: These code lines show how to get the start position, line number, and length of a diagnostic within a source file. These values are crucial for pinpointing the location of the error or warning.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst start = diagnostic.getStart(); // returns: number\nconst lineNumber = diagnostic.getLineNumber(); // returns: number\nconst length = diagnostic.getLength(); // returns: number\n```\n\n----------------------------------------\n\nTITLE: Using forEachChild for Node Traversal in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to use forEachChild to iterate through child nodes and conditionally return a specific node. The method allows early return by checking node types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst allChildren = node.getChildren();\n\nnode.forEachChild(node => {\n  console.log(node.getText());\n});\n\nconst classDec = node.forEachChild(node => {\n  if (Node.isClassDeclaration(node))\n    return node; // stops iterating over the children and returns this value\n  return undefined; // return a falsy value or no value to continue iterating\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Call Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove a call signature from a TypeScript interface using ts-morph by invoking the `.remove()` method on the call signature object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncallSignature.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting Declaration Keyword in TypeScript\nDESCRIPTION: This snippet retrieves the keyword used in a module or namespace declaration. It returns the keyword or undefined if the declaration is global, aiding in understanding the scope of the declaration.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// returns: the module or namespace keyword or undefined if global\nmoduleDeclaration.getDeclarationKindKeyword();\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Trailing Comment Ranges from Comment Nodes\nDESCRIPTION: Shows how to retrieve trailing comment ranges from a comment node in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst secondComment = sourceFile.getStatementsWithComments()[0].getTrailingCommentRanges()[0];\n```\n\n----------------------------------------\n\nTITLE: Comment Structure Analysis - TypeScript\nDESCRIPTION: Shows complex comment arrangements and their handling in the AST, including multiple comment types and their positioning.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// comment 1\n/* comment 2 */\n/* comment 3 */ const t = 4; // comment 4\nconst u = 5;\n```\n\n----------------------------------------\n\nTITLE: Get Variable Declaration Kind\nDESCRIPTION: Shows how to get the declaration kind of a variable statement using `getDeclarationKind()`. This returns the kind of declaration (e.g., `let`, `const`, `var`).\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst declarationKind = variableStatement.getDeclarationKind();\n```\n\n----------------------------------------\n\nTITLE: Toggling Modifiers in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to toggle modifiers on or off for a function declaration using the toggleModifier() method. The method can be called with or without an explicit boolean value.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modifiers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.toggleModifier(\"async\");\nfunctionDeclaration.toggleModifier(\"async\", false); // or explicit toggle\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying TypeScript Compiler Object\nDESCRIPTION: Demonstrates how to access the underlying TypeScript compiler ts.Program object from the ts-morph Program wrapper. Caution is advised as this object is discarded after code manipulations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/program.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tsProgram = program.compilerObject;\n```\n\n----------------------------------------\n\nTITLE: File System Refresh Operations in TypeScript\nDESCRIPTION: Methods to refresh source files from the file system\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileSystemRefreshResult } from \"ts-morph\";\n\n// returns: FileSystemRefreshResult (NoChange, Updated, Deleted)\nconst result = await sourceFile.refreshFromFileSystem(); // or refreshFromFileSystemSync()\n```\n\n----------------------------------------\n\nTITLE: Getting Type Parameter Default Values in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to retrieve the default type of a type parameter. The getDefault() method returns the default as a TypeNode or undefined if no default exists.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultNode = typeParameter.getDefault(); // returns: TypeNode | undefined\n```\n\n----------------------------------------\n\nTITLE: Checking for 'declare' Keyword in TypeScript using ts-morph\nDESCRIPTION: This code shows how to check if a class declaration has the 'declare' keyword using the hasDeclareKeyword() method from ts-morph. It returns a boolean value indicating the presence of the 'declare' keyword.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/ambient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.hasDeclareKeyword(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Finding Call Expressions in TypeScript AST\nDESCRIPTION: Shows how to retrieve call expressions from a node's children or descendants using ts-morph. Uses SyntaxKind.CallExpression to filter the nodes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/expressions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst childCallExpressions = node.getChildrenOfKind(SyntaxKind.CallExpression);\nconst descendantCallExpressions = node.getDescendantsOfKind(SyntaxKind.CallExpression);\n```\n\n----------------------------------------\n\nTITLE: Accessing Diagnostic Message Chain Text in TypeScript with ts-morph\nDESCRIPTION: This code demonstrates how to retrieve the message text, category, and code from a DiagnosticMessageChain (DMC) object, which is used for multiline diagnostic messages.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageText = dmc.getMessageText(); // returns: string\nconst category = dmc.getCategory(); // returns: DiagnosticCategory\nconst code = dmc.getCode(); // returns: number\n```\n\n----------------------------------------\n\nTITLE: Handling Union and Intersection Types\nDESCRIPTION: Methods for working with union and intersection types in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst intersectionTypes = type.getIntersectionTypes();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst unionTypes = type.getUnionTypes();\n```\n\n----------------------------------------\n\nTITLE: Adding Import and Export Declaration Methods in TypeScript\nDESCRIPTION: Adds new methods to ImportDeclaration and ExportDeclaration classes for getting module specifier information.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nImportDeclaration.getModuleSpecifierValue()\nExportDeclaration.getModuleSpecifierValue()\n```\n\n----------------------------------------\n\nTITLE: Getting a Source File with ts-morph\nDESCRIPTION: Retrieves a specific source file from the project using getSourceFileOrThrow, which throws an error if the file doesn't exist.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/example.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceFile = project.getSourceFileOrThrow(\"Person.ts\");\n```\n\n----------------------------------------\n\nTITLE: Emitting TypeScript with Custom Transformations using ts-morph\nDESCRIPTION: Demonstrates how to use custom transformations when emitting TypeScript code with ts-morph. The example shows a transformation that changes all numeric literals to string literals.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/emitting.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nproject.emit({\n  customTransformers: {\n    // optional transformers to evaluate before built in .js transformations\n    before: [context => sourceFile => visitSourceFile(sourceFile, context, numericLiteralToStringLiteral)],\n    // optional transformers to evaluate after built in .js transformations\n    after: [],\n    // optional transformers to evaluate after built in .d.ts transformations\n    afterDeclarations: [],\n  },\n});\n\nfunction visitSourceFile(\n  sourceFile: ts.SourceFile,\n  context: ts.TransformationContext,\n  visitNode: (node: ts.Node, context: ts.TransformationContext) => ts.Node,\n) {\n  return visitNodeAndChildren(sourceFile) as ts.SourceFile;\n\n  function visitNodeAndChildren(node: ts.Node): ts.Node {\n    return ts.visitEachChild(visitNode(node, context), visitNodeAndChildren, context);\n  }\n}\n\nfunction numericLiteralToStringLiteral(node: ts.Node, context: ts.TransformationContext) {\n  if (ts.isNumericLiteral(node))\n    return context.factory.createStringLiteral(node.text);\n  return node;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Type Parameter Constraints in TypeScript with ts-morph\nDESCRIPTION: Shows how to remove a constraint from a type parameter using the removeConstraint() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntypeParameter.removeConstraint();\n```\n\n----------------------------------------\n\nTITLE: Setting Generator Status in TypeScript\nDESCRIPTION: Sets whether a function declaration is a generator function by passing a boolean value to setIsGenerator().\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/generators.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.setIsGenerator(true); // or false to set as not one\n```\n\n----------------------------------------\n\nTITLE: Finding References to an Identifier\nDESCRIPTION: Shows how to find all references to an identifier in the codebase using the findReferences method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst references = identifier.findReferences();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Underlying TypeScript Language Service\nDESCRIPTION: Demonstrates how to access the underlying TypeScript compiler's language service object for advanced usage scenarios.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/language-service.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tsLanguageService = languageService.compilerObject;\n```\n\n----------------------------------------\n\nTITLE: Acquiring Return Type with ts-morph\nDESCRIPTION: This example illustrates how to obtain the return type of a signature using the ts-morph library. It uses the `getReturnType` method to retrieve the return type of a function signature.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst returnType = signature.getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Adding Source File Methods in TypeScript\nDESCRIPTION: Adds new methods to SourceFile class for organizing imports and getting references.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nsourceFile.organizeImports()\nsourceFile.getLanguageVersion()\nsourceFile.getReferencingLiteralsInOtherSourceFiles()\n```\n\n----------------------------------------\n\nTITLE: Get Definition Nodes in TypeScript\nDESCRIPTION: Demonstrates how to obtain just the nodes corresponding to the definitions of an identifier using ts-morph. This is useful when only node-level details are required instead of full definition information.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/finding-references.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst nodes = identifier.getDefinitionNodes();\n```\n\n----------------------------------------\n\nTITLE: Source File Removal Operations in TypeScript\nDESCRIPTION: Methods to remove source files from the project\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.forget();\n\nproject.removeSourceFile(sourceFile); // returns: boolean (true if was removed)\n```\n\n----------------------------------------\n\nTITLE: Working with Type Constraints and Defaults\nDESCRIPTION: Accessing type constraints and default types in TypeScript.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst constraintType = type.getConstraint();\nconst defaultType = type.getDefault();\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Import Declaration from Import Specifier in ts-morph\nDESCRIPTION: Shows how to get the parent ImportDeclaration from an ImportSpecifier. Useful for navigating the AST structure.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nnamedImport.getImportDeclaration(); // returns: ImportDeclaration\n```\n\n----------------------------------------\n\nTITLE: Checking Generator Status in TypeScript\nDESCRIPTION: Checks if a function declaration is a generator function by calling isGenerator() which returns a boolean value.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/generators.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.isGenerator(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Working with Accessor Pairs\nDESCRIPTION: Examples of getting corresponding get/set accessors.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAccessor = getAccessor.getSetAccessor();\nconst getAccessor = setAccessor.getGetAccessor();\n```\n\n----------------------------------------\n\nTITLE: Getting First Modifier by Syntax Kind in TypeScript using ts-morph\nDESCRIPTION: Retrieves the first modifier of a specific syntax kind using the getFirstModifierByKind() method. This example looks for the AsyncKeyword modifier.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modifiers.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getFirstModifierByKind(SyntaxKind.AsyncKeyword);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Export Status\nDESCRIPTION: Method to set or unset a node as default export. Only works when parent is a source file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.setIsDefaultExport(true); // be one\nfunctionDeclaration.setIsDefaultExport(false); // don't be one\n```\n\n----------------------------------------\n\nTITLE: Directory Path and Name Operations\nDESCRIPTION: Methods to retrieve directory paths and names, including full paths and base names.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// returns the full path (ex. /home/david/project/)\nconst path = directory.getPath();\n\n// returns only the directory name (ex. project)\nconst baseName = directory.getBaseName();\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with tsconfig.json while skipping file addition in ts-morph\nDESCRIPTION: Creates a Project instance with a tsconfig.json path but disables automatic file addition by setting skipAddingFilesFromTsConfig to true.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  tsConfigFilePath: \"path/to/tsconfig.json\",\n  skipAddingFilesFromTsConfig: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Call Expression Example in TypeScript\nDESCRIPTION: Demonstrates a simple function call expression in TypeScript. Shows the basic syntax for calling a function.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/expressions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndoSomething();\n```\n\n----------------------------------------\n\nTITLE: Getting Child Nodes Including Comments in ts-morph\nDESCRIPTION: Shows how to get child nodes including comment nodes from a source file, extending the behavior of the compiler API.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst children = sourceFile.getChildSyntaxListOrThrow().getChildren();\n```\n\n----------------------------------------\n\nTITLE: Removing Type Aliases in ts-morph\nDESCRIPTION: Demonstrates how to remove an existing type alias declaration by calling the remove() method on the declaration object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-aliases.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntypeAliasDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Forgetting Nodes in ts-morph\nDESCRIPTION: This snippet shows how to forget nodes in ts-morph, which reduces memory usage and speeds up manipulation processes. By forgetting nodes and their descendants when no longer needed, re-parsing and memory caching are minimized. The snippet requires TypeScript setup with a source file and ts-morph. The input is the node to forget, and the output is a performance improvement by reducing unused node tracking. Callable methods will throw an error if accessed after forgetting, due to underlying node dissociation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet personInterface: InterfaceDeclaration;\npersonInterface.forget();\n\n// or to only forget a node's descendants that are currently in the wrapped cache\nsourceFile.forgetDescendants();\n```\n\n----------------------------------------\n\nTITLE: Accessing Compiler Node Properties\nDESCRIPTION: Demonstrates how to access specific properties of compiler nodes using the .getNodeProperty() method, which can handle both direct properties and array/optional properties.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/compiler-nodes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nameNode = propertyAccessExpression.getNodeProperty(\"name\"); // returns: PropertyName\n// also works with arrays and possibly undefined properties\nconst typeParameters = classDeclaration.getNodeProperty(\"typeParameters\"); // returns: TypeParameterDeclaration[] | undefined\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Underlying TypeScript Compiler Object\nDESCRIPTION: Accesses the underlying TypeScript compiler's type checker object. Warning: this object is discarded after any manipulation, so it should only be held temporarily.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/type-checker.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tsTypeChecker = typeChecker.compilerObject;\n```\n\n----------------------------------------\n\nTITLE: Removing Method Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove a method signature from a TypeScript interface using ts-morph by calling the `.remove()` method on the method signature object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nmethodSignature.remove();\n```\n\n----------------------------------------\n\nTITLE: Removing Type Parameter Default Values in TypeScript with ts-morph\nDESCRIPTION: Demonstrates how to remove a default value from a type parameter using the removeDefault() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/type-parameters.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntypeParameter.removeDefault();\n```\n\n----------------------------------------\n\nTITLE: Example of Comment Parsing Behavior in ts-morph\nDESCRIPTION: Demonstrates which comments are parsed as comment nodes versus trailing comment ranges in ts-morph. Only the first comment on a line with no other tokens becomes a comment node.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// do something\nfunctionCall(); // ok\n```\n\n----------------------------------------\n\nTITLE: Updating Manipulation Settings in TypeScript\nDESCRIPTION: Demonstrates how to update manipulation settings after Project initialization using the set method, with examples for both single and multiple setting updates.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// set only one\nproject.manipulationSettings.set({ quoteKind: QuoteKind.Single });\n\n// or multiple\nproject.manipulationSettings.set({\n  quoteKind: QuoteKind.Single,\n  indentationText: IndentationText.TwoSpaces,\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Implementations of an Identifier\nDESCRIPTION: Demonstrates how to find implementations of an identifier, similar to IDE \"go to implementation\" functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst implementations = identifier.getImplementations();\n```\n\n----------------------------------------\n\nTITLE: Getting Default Import from Import Declaration in ts-morph\nDESCRIPTION: Demonstrates how to retrieve the default import identifier from an import declaration. Returns undefined if there is no default import.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/imports.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultImport = importDeclaration.getDefaultImport(); // returns: Identifier | undefined\n```\n\n----------------------------------------\n\nTITLE: Adding Construct Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Add a construct signature to a TypeScript interface using ts-morph by specifying return type and other attributes. The `addConstructSignature` method is used, which requires an object describing the signature to be added.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst constructSignature = interfaceDeclaration.addConstructSignature({ returnType: \"SomeClass\" });\n```\n\n----------------------------------------\n\nTITLE: Global Module Declaration Syntax in TypeScript\nDESCRIPTION: This snippet illustrates the syntax for creating a global module declaration in TypeScript. It includes an example of declaring a global constant, which can be accessed without explicit imports.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/modules.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts ignore-error: 2664, 2669\ndeclare module \"my-library\" {\n  // this is a global namespace declaration\n  global {\n    const foo: string;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Construct Signatures in TypeScript Interfaces with ts-morph\nDESCRIPTION: Remove a specific construct signature from a TypeScript interface using ts-morph. This operation involves invoking the `.remove()` method on the construct signature object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/interfaces.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconstructSignature.remove();\n```\n\n----------------------------------------\n\nTITLE: Structure Object Example in JavaScript\nDESCRIPTION: Shows the resulting structure object representation of a TypeScript class, including its properties and metadata.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    isAbstract: false,\n    isExported: true,\n    name: \"MyClass\",\n    typeParameters: [],\n    constructors: [],\n    properties: [{\n        name: \"myProp\",\n        initializer: \"5\",\n        type: undefined,\n        isReadonly: false,\n        isStatic: false\n    }],\n    methods: []\n}\n```\n\n----------------------------------------\n\nTITLE: Global Project Configuration for Renaming\nDESCRIPTION: Shows how to configure prefix/suffix text behavior globally for a project.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  manipulationSettings: {\n    usePrefixAndSuffixTextForRename: true,\n  },\n});\n// or\nproject.manipulationSettings.set({\n  usePrefixAndSuffixTextForRename: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Export and Default Keyword Checking\nDESCRIPTION: Methods to check for the presence of export and default keywords on a node.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.hasExportKeyword(); // returns: boolean\nfunctionDeclaration.hasDefaultKeyword(); // returns: boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Identifier Text\nDESCRIPTION: Shows how to retrieve the text content of an identifier using the getText method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = identifier.getText();\n```\n\n----------------------------------------\n\nTITLE: Skipping file dependency resolution when initializing Project in ts-morph\nDESCRIPTION: Creates a Project with tsconfig.json but skips the automatic dependency resolution step that would normally analyze and include dependent source files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  tsConfigFilePath: \"path/to/tsconfig.json\",\n  skipFileDependencyResolution: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Comment Nodes in ts-morph\nDESCRIPTION: Demonstrates how to remove a comment node and its trailing comments using the remove() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsourceFile.getStatementsWithComments()[0].remove();\n```\n\n----------------------------------------\n\nTITLE: File Reference Operations in TypeScript\nDESCRIPTION: Methods for working with file references and referencing nodes\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst referencingSourceFiles = sourceFile.getReferencingSourceFiles();\n\nconst referencingNodes = sourceFile.getReferencingNodesInOtherSourceFiles();\n\nconst referencingLiterals = sourceFile.getReferencingLiteralsInOtherSourceFiles();\n```\n\n----------------------------------------\n\nTITLE: Async Forget Blocks in ts-morph\nDESCRIPTION: Demonstrates how to use asynchronous forget blocks in ts-morph, allowing for manipulation and memory optimization even when operations are asynchronous. This snippet supports async and await, which enables non-blocking memory management. Requires ts-morph library and async setup. Inputs involve async operations and node management, while output is optimized resource management during async processes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/performance.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait project.forgetNodesCreatedInBlock(async remember => {\n  // do stuff\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Creating Directories in ts-morph\nDESCRIPTION: Methods for adding new directories to existing directories or the project, including path-based and direct creation approaches.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst childDirectory = directory.addDirectoryAtPath(\"childDir\"); // or addDirectoryAtPathIfExists\n\nconst directory = project.addDirectoryAtPath(\"path/to/dir\"); // or addDirectoryAtPathIfExists\n\nconst childDir = directory.createDirectory(\"childDir\");\n\nconst directory = project.createDirectory(\"path/to/dir\");\n```\n\n----------------------------------------\n\nTITLE: Type Text Formatting in TypeScript\nDESCRIPTION: Methods for retrieving and formatting type text, including options for custom formatting using TypeFormatFlags.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/types.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = type.getText();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = type.getText(parameter);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = type.getText(parameter, TypeFormatFlags.NoTruncation | TypeFormatFlags.WriteArrayAsGenericType);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Ambient Modules in ts-morph\nDESCRIPTION: Gets all the ambient modules resolved by the TypeScript compiler, such as those found in @types or node_modules directories.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/ambient-modules.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ambientModules = project.getAmbientModules();\n```\n\n----------------------------------------\n\nTITLE: Example of Identifiers in TypeScript\nDESCRIPTION: Demonstrates what identifiers are in TypeScript code. In this example, the variable name 'identifier' and its usage are both identifier nodes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst identifier = 5;\nconsole.log(identifier);\n```\n\n----------------------------------------\n\nTITLE: Getting Diagnostic Category in TypeScript with ts-morph\nDESCRIPTION: This code shows how to retrieve the category of a diagnostic, which can be a warning, an error, or just a message.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst category = diagnostic.getCategory(); // returns: DiagnosticCategory\n```\n\n----------------------------------------\n\nTITLE: Getting Definition Nodes of an Identifier\nDESCRIPTION: Shows how to directly get the definition nodes without additional information.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodes = identifier.getDefinitionNodes();\n```\n\n----------------------------------------\n\nTITLE: Specifying Compiler Options for In-Memory File System\nDESCRIPTION: This snippet illustrates how to configure compiler options when using ts-morph's in-memory file system to ensure necessary TypeScript library files are available.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  useInMemoryFileSystem: true,\n  compilerOptions: {\n    lib: [\"lib.es2015.d.ts\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript API with ts-morph\nDESCRIPTION: Shows the recommended way to import TypeScript compiler API when using it alongside ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/compiler-nodes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// do this\nimport { ts } from \"ts-morph\";\n// not this\nimport * as ts from \"typescript\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with tsconfig.json in ts-morph\nDESCRIPTION: Creates a Project instance by providing a tsconfig.json file path. This automatically adds all source files specified in the tsconfig.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\nconst project = new Project({\n  tsConfigFilePath: \"path/to/tsconfig.json\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Partial Manipulation Settings in TypeScript\nDESCRIPTION: Demonstrates how to create a Project instance with only specific manipulation settings defined, allowing other settings to use their defaults.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  manipulationSettings: { indentationText: IndentationText.TwoSpaces },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identifier Nodes from a Parent Node\nDESCRIPTION: Shows how to get all child or descendant identifiers from a node by using the getChildrenOfKind or getDescendantsOfKind methods with the Identifier syntax kind.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/identifiers.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst childIdentifiers = node.getChildrenOfKind(SyntaxKind.Identifier);\nconst descendantIdentifiers = node.getDescendantsOfKind(SyntaxKind.Identifier);\n```\n\n----------------------------------------\n\nTITLE: Using Type Checker with Wrapped Nodes\nDESCRIPTION: Demonstrates how to provide a type checker when creating wrapped nodes to enable type information access.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/compiler-nodes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// given an existing node and type checker\nconst classNode: ts.ClassDeclaration = ...;\nconst compilerTypeChecker: ts.TypeChecker = ...;\n\n// create and use a wrapped node\nconst classDec = createWrappedNode(classNode, { typeChecker: compilerTypeChecker }).asKindOrThrow(SyntaxKind.ClassDeclaration);\nconsole.log(classDec.getPropertyOrThrow(\"propName\").getType().getText()); // ok, because a type checker was provided\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Async Keyword in ts-morph\nDESCRIPTION: Gets the async keyword token from a function declaration if it exists. Returns the node representing the async keyword or undefined if the function is not async.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/async.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getAsyncKeyword();\n```\n\n----------------------------------------\n\nTITLE: Directory Deletion and Clearing Operations\nDESCRIPTION: Methods for deleting and clearing directories, including immediate and queued operations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndirectory.delete();\n\nawait directory.deleteImmediately();\ndirectory.deleteImmediatelySync();\n\ndirectory.clear();\n\nawait directory.clearImmediately();\ndirectory.clearImmediatelySync();\n\ndirectory.forget();\n```\n\n----------------------------------------\n\nTITLE: Web-Based TypeScript AST Viewer\nDESCRIPTION: A browser-based tool for exploring and understanding TypeScript Abstract Syntax Trees, featuring interactive node selection, type and symbol information, and compiler version switching.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/ast-viewers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[TypeScript AST Viewer](http://ts-ast-viewer.com)\n```\n\n----------------------------------------\n\nTITLE: Updated ts-morph Integration Pattern\nDESCRIPTION: Shows the recommended way to use TypeScript compiler functionality in ts-morph v7, using a single import statement and accessing compiler objects through ts-morph exports.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport Project, {SyntaxKind, ts} from \"ts-morph\";\n\n// ... other code\n\nconst tsSourceFile = ts.createSourceFile(...etc...);\nconst classDeclarations = sourceFile.getDescendantsByKind(SyntaxKind.ClassDeclaration);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manipulation Settings in TypeScript\nDESCRIPTION: Shows how to access and retrieve current manipulation settings from a Project instance using getter methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nproject.manipulationSettings.getIndentationText();\nproject.manipulationSettings.getNewLineKind();\nproject.manipulationSettings.getQuoteKind();\nproject.manipulationSettings.getUsePrefixAndSuffixTextForRename();\n```\n\n----------------------------------------\n\nTITLE: Adding Project Methods in TypeScript\nDESCRIPTION: Adds new methods and properties to Project class for managing compiler options and creating writers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nproject.compilerOptions\nProject.createWriter()\n```\n\n----------------------------------------\n\nTITLE: Comment Insertion Example in ts-morph\nDESCRIPTION: Demonstrates the input source code structure for inserting a comment between existing comments in ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 1\n// 2\nfunctionCall();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Parameters with ts-morph\nDESCRIPTION: This code snippet demonstrates how to use the ts-morph library to retrieve type parameters from a function signature in TypeScript. The method `getTypeParameters` is called on a signature object, returning an array of TypeParameter objects.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeParams = signature.getTypeParameters(); // returns: TypeParameter[]\n```\n\n----------------------------------------\n\nTITLE: String Literal Example in TypeScript\nDESCRIPTION: Example of string literal syntax in TypeScript\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"some string\"\n```\n\n----------------------------------------\n\nTITLE: File Deletion Example in TypeScript\nDESCRIPTION: Complete example of deleting multiple source files using ts-morph Project\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n\n// queue up all the source files to be deleted\nconst project = new Project();\nproject.addSourceFilesAtPaths(\"folder/**/*.ts\");\n\nproject.getSourceFileOrThrow(\"someFile.ts\").delete();\nproject.getSourceFileOrThrow(\"someOtherFile.ts\").delete();\n\n// after you're all done, finally save your changes to the file system\nawait project.save();\n```\n\n----------------------------------------\n\nTITLE: Getting Declaration with ts-morph\nDESCRIPTION: This code snippet explains how to use the ts-morph library to retrieve the declaration of a function signature. It calls the `getDeclaration` method to return the declaration nodes associated with the signature.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/signatures.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst declaration = signature.getDeclaration();\n```\n\n----------------------------------------\n\nTITLE: Configuring Format Code Settings in TypeScript\nDESCRIPTION: Shows how to configure additional formatting settings derived from ts.FormatCodeSettings, currently supporting spacing options for braces.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/settings.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nproject.manipulationSettings.set({\n  // only one for now... will add more in the future\n  insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: false, // default: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Type Guard Methods in TypeScript\nDESCRIPTION: Adds new type guard methods to TypeGuards and Type classes for checking literal types.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nTypeGuards.hasBody(node)\nType.isNumberLiteral()\nType.isStringLiteral()\nType.isBooleanLiteral()\ntype.isEnumLiteralType()\ntype.isLiteral()\n```\n\n----------------------------------------\n\nTITLE: Comment Insertion Result in ts-morph\nDESCRIPTION: Shows the result of inserting a comment at index 1 in the source file, demonstrating how ts-morph handles comment insertion.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1\n// new comment\n// 2\nfunctionCall();\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration Kind Options\nDESCRIPTION: Lists the possible values for VariableDeclarationKind enum in ts-morph. It shows the available declaration kinds such as Let, Const and Var.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/variables.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VariableDeclarationKind } from \"ts-morph\";\n\nVariableDeclarationKind.Let;\nVariableDeclarationKind.Const;\nVariableDeclarationKind.Var;\n```\n\n----------------------------------------\n\nTITLE: Performing Immediate File Operations in ts-morph\nDESCRIPTION: Demonstrates how to perform immediate file operations like copying, moving, and deleting files or directories using ts-morph. These methods execute operations synchronously or with promises.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait sourceFile.copyImmediately(\"NewFile.ts\"); // or use 'Sync' alternatives\nawait sourceFile.moveImmediately(\"NewFile2.ts\");\nawait sourceFile.deleteImmediately();\nawait directory.deleteImmediately();\n```\n\n----------------------------------------\n\nTITLE: Managing Different File Systems in TypeScript Projects\nDESCRIPTION: Shows how to manage projects using different types of file systems, such as real, in-memory, or custom file systems, within the @ts-morph/bootstrap library. This snippet provides options for project creation with specific file system requirements.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/bootstrap/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// will use a real file system\nconst project = await createProject();\n\n// in memory file system\nconst project2 = await createProject({ useInMemoryFileSystem: true });\n\n// custom file system\nconst fileSystem: FileSystemHost = { ...etc... };\nconst project = await createProject({ fileSystem });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nproject.fileSystem.writeFileSync(\"MyClass.ts\", \"class MyClass {}\");\n```\n\n----------------------------------------\n\nTITLE: Common Development Commands for ts-morph\nDESCRIPTION: Basic commands for building, testing, and formatting the ts-morph project, which can be run either in the root directory or per package.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/DEVELOPMENT.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# build (run in root dir or per package)\nnpm run build\n# run tests (run in root dir or per package)\nnpm run test\n# format (this is kind of experimental as it's using a formatter I wrote... let me know if it does anything strange)\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Example Class Declaration in TypeScript\nDESCRIPTION: Shows a sample TypeScript class declaration that will be converted to a structure.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/structures.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyClass {\n  myProp = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Function Declarations with ts-morph\nDESCRIPTION: Explains how to remove a function declaration from a source file using the .remove() method provided by ts-morph.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/functions.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunctionDeclaration.remove();\n```\n\n----------------------------------------\n\nTITLE: Project constructor options\nDESCRIPTION: The way to pass a custom file system host to the `Project` constructor has changed.  It is now an option within the first argument, rather than a separate argument.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({}, fileSystem);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({ fileSystem });\n```\n\n----------------------------------------\n\nTITLE: Example Export Setup\nDESCRIPTION: Example of various export scenarios in TypeScript files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/exports.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nexport * from \"./classes\";\nexport { Interface1 as AliasedInterface } from \"./interfaces\";\n\nnamespace MergedNamespace { let t; }\nnamespace MergedNamespace { let u; }\n\nexport { MergedNamespace };\n\nexport default 5;\n```\n\n----------------------------------------\n\nTITLE: Example of generated code from structure in ts-morph\nDESCRIPTION: Shows the TypeScript code that would be generated from the structure example above.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyEnum {\n  member,\n}\n\nclass MyClass {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Source File with Set Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a source file in a ts-morph Project that uses the Set type while ensuring the necessary compiler options align with TypeScript requirements.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({ useInMemoryFileSystem: true });\nconst sourceFile = project.createSourceFile(\n  \"index.ts\",\n  `const mySet = new Set<string>();`,\n);\nconst mySetDecl = sourceFile.getVariableDeclarationOrThrow(\"mySet\");\nconsole.log(mySetDecl.getType().getText()); // Set<string>\n```\n\n----------------------------------------\n\nTITLE: Removing Parameters in TypeScript using ts-morph\nDESCRIPTION: Demonstrates how to remove an existing parameter using the remove() method.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparameter.remove();\n```\n\n----------------------------------------\n\nTITLE: Directory Relationship Checking\nDESCRIPTION: Methods to check ancestor/descendant relationships between directories and source files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngrandParentDir.isAncestorOf(childDir); // true\nchildDir.isDescendantOf(grandParentDir); // true\n\ngrandParentDir.isAncestorOf(childSourceFile); // true\nparentDir.isAncestorOf(childSourceFile); // true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Source File Management\nDESCRIPTION: Fix for project.getSourceFiles() which sometimes returned multiple instances of the same source file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nproject.getSourceFiles()\n```\n\n----------------------------------------\n\nTITLE: Controlling Child Processing in forEachChild\nDESCRIPTION: This snippet shows how to control processing of child nodes in the forEachChild method effectively by utilizing truthy values to stop processing as per new behavior changes.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnode.forEachChild((child) => {\n  if (child.kind === SyntaxKind.PropertyDeclaration)\n    return;\n  doSomethingWithChild(child);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Spread Assignment\nDESCRIPTION: Explains how to add a spread assignment to an object literal expression using the `addSpreadAssignment` method.  It requires the expression to be spread.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/object-literal-expressions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst spreadAssignment = objectLiteralExpression.addSpreadAssignment({ expression: \"spreadAssignment\" });\n```\n```\n\n----------------------------------------\n\nTITLE: Result After Node Replacement in ts-morph\nDESCRIPTION: Shows the result after applying the replaceWithText() method from the previous example, where the property access expression has been replaced with a simple reference named MyReference.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet myVariable = MyReference;\n```\n\n----------------------------------------\n\nTITLE: Applying File Text Changes\nDESCRIPTION: The way to apply file text changes has changed.  Instead of using `project.applyFileTextChanges`, iterate through the `fileTextChanges` array and call `change.applyChanges()` on each change.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nproject.applyFileTextChanges(fileTextChanges);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfileTextChanges.forEach(change => change.applyChanges());\n```\n\n----------------------------------------\n\nTITLE: Managing Class Inheritance\nDESCRIPTION: Examples of getting, setting, and removing class extends expressions.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendsExpression = classDeclaration.getExtends();\n\nclassDeclaration.setExtends(\"BaseClass\");\n\nclassDeclaration.removeExtends();\n```\n\n----------------------------------------\n\nTITLE: Directory Movement and Copying Operations\nDESCRIPTION: Methods for moving and copying directories, including immediate and queued operations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndirectory.move(\"./newDir\");\ndirectory.move(\"../otherDir\", { overwrite: true });\ndirectory.move(\"C:\\\\finalDir\");\ndirectory.moveToDirectory(\"some/directory\");\ndirectory.moveToDirectory(otherDir);\n\nawait directory.moveImmediately(\"../newDir\");\ndirectory.moveImmediatelySync(\"../newDir2\");\n\ndirectory.copy(\"../newDir\");\ndirectory.copy(\"../nextDir\", { overwrite: true });\ndirectory.copy(\"C:\\\\test\");\ndirectory.copyToDirectory(\"some/directory\");\ndirectory.copyToDirectory(otherDir);\n\ndirectory.copy(\"../finalDir\", { includeUntrackedFiles: false });\n\nawait directory.copyImmediately(\"../otherDir\");\ndirectory.copyImmediatelySync(\"../otherDir2\");\n```\n\n----------------------------------------\n\nTITLE: Adding Existing Source Files in TypeScript\nDESCRIPTION: New method Directory.addExistingSourceFiles(...) added to allow adding existing source files to a directory.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nDirectory.addExistingSourceFiles(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Project from ts-morph\nDESCRIPTION: The default export for the `Project` class has been removed.  Import `Project` using the named export syntax. This change ensures consistency in how the library is used and reduces ambiguity.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Project } from \"ts-morph\";\n```\n\n----------------------------------------\n\nTITLE: Importing ts-morph with TypeScript Compiler Objects\nDESCRIPTION: Shows the new import pattern for ts-morph v7 where TypeScript compiler objects are accessed through named exports. This eliminates the need for a separate TypeScript peer dependency.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport Project, { ScriptTarget, SyntaxKind, ts } from \"ts-morph\";\n```\n\n----------------------------------------\n\nTITLE: New Symbol Methods in TypeScript\nDESCRIPTION: Added new methods Symbol#getAliasedSymbolOrThrow() and Symbol#getExportByNameOrThrow(name: string) for working with symbols.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nSymbol#getAliasedSymbolOrThrow()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nSymbol#getExportByNameOrThrow(name: string)\n```\n\n----------------------------------------\n\nTITLE: Type Parameter Leading Indentation Fix Example\nDESCRIPTION: Fixed TypeParameterDeclaration#getStructure() to trim leading indentation on constraint and default.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTypeParameterDeclaration#getStructure()\n```\n\n----------------------------------------\n\nTITLE: Controlling AST Traversal with ts-morph's forEachDescendant\nDESCRIPTION: Shows how to control traversal flow within forEachDescendant using skip(), up(), and stop() methods. Different node kinds can be handled with specific traversal controls.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = node.forEachDescendant((node, traversal) => {\n  switch (node.getKind()) {\n    case SyntaxKind.ClassDeclaration:\n      // skips traversal of the current node's descendants\n      traversal.skip();\n      break;\n    case SyntaxKind.Parameter:\n      // skips traversal of the current node's descendants and its siblings and all their descendants\n      traversal.up();\n      break;\n    case SyntaxKind.FunctionDeclaration:\n      // stops traversal completely\n      traversal.stop();\n      break;\n    case SyntaxKind.InterfaceDeclaration:\n      // stops traversal completely and returns this value\n      return node;\n  }\n\n  return undefined;\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Path Resolution Operations\nDESCRIPTION: Methods for resolving relative paths and module specifiers between directories and files.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/directories.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst relativePath = directoryFrom.getRelativePathTo(sourceFileTo);\n\nconst moduleSpecifier = directoryFrom.getRelativePathAsModuleSpecifierTo(sourceFileTo);\n```\n\n----------------------------------------\n\nTITLE: Variable Function Declaration Example\nDESCRIPTION: Example of a basic variable declaration with a function initializer that adds two numbers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/initializers.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst add = function(a: number, b: number) {\n  return a + b;\n};\n```\n\n----------------------------------------\n\nTITLE: Using forEachChild with Traversal Control in TypeScript\nDESCRIPTION: Example showing how to use the updated forEachChild method with traversal control similar to forEachDescendant, introduced for consistency in version 13.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnode.forEachChild((node, traversal) => {\n  if (node.getKind() === SyntaxKind.FunctionDeclaration)\n    traversal.stop();\n});\n```\n\n----------------------------------------\n\nTITLE: New Node Position Methods in TypeScript\nDESCRIPTION: Added new methods for getting column positions: Node.getStartColumn(), Node.getEndColumn(), SourceFile.getColumnAtPos(pos).\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nNode.getStartColumn()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nNode.getEndColumn()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nSourceFile.getColumnAtPos(pos)\n```\n\n----------------------------------------\n\nTITLE: New ImportTypeNode in TypeScript\nDESCRIPTION: Added support for ImportTypeNode with methods to set arguments and qualifiers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nImportTypeNode.setArgument\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nImportTypeNode.setQualifier\n```\n\n----------------------------------------\n\nTITLE: Adding Node Methods in TypeScript\nDESCRIPTION: Adds new methods to Node class for getting trivia information.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nNode.getLeadingCommentRanges()\nNode.getTrailingCommentRanges()\nNode.getLeadingTriviaWidth()\nNode.getTrailingTriviaEnd()\nNode.getTrailingTriviaWidth()\n```\n\n----------------------------------------\n\nTITLE: Legacy TypeScript and ts-morph Integration\nDESCRIPTION: Demonstrates the old pattern of using TypeScript compiler with ts-morph, requiring separate imports for TypeScript and ts-morph functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ts from \"typescript\";\nimport Project from \"ts-morph\";\n\n// ... other code\n\nconst tsSourceFile = ts.createSourceFile(...etc...);\nconst classDeclarations = sourceFile.getDescendantsByKind(ts.SyntaxKind.ClassDeclaration);\n```\n\n----------------------------------------\n\nTITLE: Initial Enum Definition in TypeScript\nDESCRIPTION: Example of an initial enum declaration with a single member that will be removed.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/removing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyEnum {\n  myMember,\n}\n```\n\n----------------------------------------\n\nTITLE: Renamed StructureTypeGuards static method\nDESCRIPTION: The `StructureTypeGuards.isExportableNode` method has been renamed to `StructureTypeGuards.isExportable`. This change affects how you check if a structure is exportable.  Use the updated method name to avoid compilation errors.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (StructureTypeGuards.isExportableNode(structure))\n  structure.isExported = false;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (StructureTypeGuards.isExportable(structure))\n  structure.isExported = false;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generator Asterisk Token in TypeScript\nDESCRIPTION: Gets the asterisk token (*) of a generator function if it exists, returns undefined if the function is not a generator.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/generators.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclaration.getAsteriskToken();\n```\n\n----------------------------------------\n\nTITLE: Adding Type Guard Overloads in TypeScript\nDESCRIPTION: Type guard overloads added to methods with a condition for a node to improve type checking.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Browser Support for ts-morph in TypeScript\nDESCRIPTION: Added support for using ts-morph in the browser without mocking \"fs\" or \"fs-extra\".\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Boolean Literals in TypeScript\nDESCRIPTION: Examples of true and false boolean literals in TypeScript\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntrue, false\n```\n\n----------------------------------------\n\nTITLE: File Copy Operations in TypeScript\nDESCRIPTION: Methods for copying source files to new locations\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/source-files.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst newSourceFile = sourceFile.copy(\"newFileName.ts\");\n// this won't throw if a file exists at the specified path\nconst otherSourceFile = sourceFile.copy(\"other.ts\", { overwrite: true });\n// or specify directory to copy to\nsourceFile.copyToDirectory(\"/some/dir\");\nsourceFile.copyToDirectory(someDirectoryObject);\n```\n\n----------------------------------------\n\nTITLE: Accessing Language Service in ts-morph\nDESCRIPTION: Shows how to retrieve the language service instance from a ts-morph project. This is the main entry point for language service functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/language-service.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst languageService = project.getLanguageService();\n```\n\n----------------------------------------\n\nTITLE: Accessing Diagnostic Message Text in TypeScript with ts-morph\nDESCRIPTION: This code shows how to retrieve the message text from a diagnostic object. The message text can be either a simple string or a DiagnosticMessageChain object.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = diagnostic.getMessageText();\n```\n\n----------------------------------------\n\nTITLE: Anonymous Class Declaration Example\nDESCRIPTION: Example of a class declaration without a name, demonstrating why name-related methods are nullable.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/classes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class {\n  // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Abstract Methods in TypeScript\nDESCRIPTION: Fix to ensure setting a method as abstract in structure does not write a method body.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating Type Checks in Node#forEachChild\nDESCRIPTION: This snippet illustrates the updated behavior of the Node#forEachChild method in ts-morph, which now aligns with the TypeScript compiler API to allow for short-circuiting with truthy returns.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst classDec = sourceFile.forEachChild(node => TypeGuards.isClassDeclaration(node) ? node : undefined);\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Literal in TypeScript\nDESCRIPTION: Example of a regular expression literal with global and case-insensitive flags\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/pattern/gi\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Decorator Factory Status in TypeScript\nDESCRIPTION: Demonstrates how to check if a decorator is a factory and how to set its factory status using ts-morph methods.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/decorators.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndecorator.isDecoratorFactory(); // returns: boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndecorator.setIsDecoratorFactory(true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Program Object in ts-morph\nDESCRIPTION: Shows how to get the Program object from a ts-morph project instance. This is the starting point for accessing program-level functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/navigation/program.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst program = project.getProgram();\n```\n\n----------------------------------------\n\nTITLE: Getting Diagnostic Source in TypeScript with ts-morph\nDESCRIPTION: This code shows how to get the source of the diagnostic information. The exact meaning of the `source` property is not clearly defined in the documentation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/diagnostics.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = diagnostic.getSource(); // returns: string | undefined\n```\n\n----------------------------------------\n\nTITLE: Initial Enum Definition Example\nDESCRIPTION: Example showing the initial code structure before renaming operations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyEnum {\n  myMember,\n}\nconst myVar = MyEnum.myMember;\n```\n\n----------------------------------------\n\nTITLE: Adding existing source files\nDESCRIPTION: Resolved source files and directories in `node_modules` are no longer automatically returned from `Project#getSourceFiles()` and `getDirectories()`. To include these files, you need to explicitly add them to the project.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nproject.addExistingSourceFiles(\"node_modules/**/*.ts\");\n```\n\n----------------------------------------\n\nTITLE: Anonymous Default Function Export Declaration in TypeScript\nDESCRIPTION: Example of a function declaration with an optional name when used as a default export, illustrating a change in version 13 where FunctionDeclaration's name became optional.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function() {\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Properties with Class Declaration's .set Method in TypeScript\nDESCRIPTION: Example showing how the behavior of .set method (formerly .fill) has changed to replace existing properties rather than adding new ones. This demonstrates the new behavior in version 15.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclassDeclaration.fill({\n  properties: [{ name: \"newProp\" }],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding source files from tsconfig.json in ts-morph\nDESCRIPTION: Adds source files to an existing Project by specifying a tsconfig.json file path.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/setup/adding-source-files.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nproject.addSourceFilesFromTsConfig(\"path/to/tsconfig.json\");\n```\n\n----------------------------------------\n\nTITLE: Renamed Enum Result\nDESCRIPTION: Shows the resulting code after the enum renaming operation.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum NewEnum {\n  myMember,\n}\n\nconst myVar = NewEnum.myMember;\n```\n\n----------------------------------------\n\nTITLE: Including All Library Types in ts-morph Project\nDESCRIPTION: This snippet demonstrates how to include all TypeScript lib files in the ts-morph Project setup, mimicking previous behaviors with older configurations.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = new Project({\n  useInMemoryFileSystem: true,\n  compilerOptions: {\n    lib: [\"lib.esnext.full.d.ts\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Destructuring Example in TypeScript Binding Elements\nDESCRIPTION: Example demonstrating object destructuring in TypeScript that shows how BindingNamedNode correctly returns a BindingElement. This relates to a fix in version 14.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { a, b } = { a: 1, b: 2 };\n```\n\n----------------------------------------\n\nTITLE: Numeric Literal Examples in TypeScript\nDESCRIPTION: Examples of integer and decimal numeric literals in TypeScript\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/literals.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n5, 10.53\n```\n\n----------------------------------------\n\nTITLE: Variable Renaming with Prefix/Suffix\nDESCRIPTION: Shows resulting code when using prefix and suffix text option for renaming.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst b = 5;\nconst x = { a: b };\n\nexport { b as a };\n```\n\n----------------------------------------\n\nTITLE: Variable Renaming Example - Before\nDESCRIPTION: Shows initial code structure before variable renaming.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 5;\nconst x = { a };\n\nexport { a };\n```\n\n----------------------------------------\n\nTITLE: Getting Line and Column\nDESCRIPTION: The `SourceFile#getLineNumberAtPos` method has been removed. Use `SourceFile#getLineAndColumnAtPos(pos)` instead, which returns an object with both line and column numbers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { line, column } = sourceFile.getLineAndColumnAtPos(position);\n```\n\n----------------------------------------\n\nTITLE: Adding Node Traversal Methods in TypeScript\nDESCRIPTION: Adds Node.forEachChild and Node.forEachDescendant methods for traversing the AST.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nNode.forEachChild\nNode.forEachDescendant\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration File Handling\nDESCRIPTION: Fixed reading of relative files from tsconfig.json with multiple rootDirs.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Variable Renaming Example - After\nDESCRIPTION: Shows resulting code after basic variable renaming.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/manipulation/renaming.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst b = 5;\nconst x = { b };\n\nexport { b };\n```\n\n----------------------------------------\n\nTITLE: Basic Comment Insertion Example - TypeScript\nDESCRIPTION: Demonstrates the basic case of inserting statements around comments in TypeScript code.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// initialize\nconst u = 5;\n```\n\n----------------------------------------\n\nTITLE: Anonymous Default Class Export in TypeScript\nDESCRIPTION: Example of a class declaration with no name when used as a default export, illustrating why ClassDeclaration's name became nullable in version 10.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class {\n  // ...etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Module Block Statement Fix Example\nDESCRIPTION: Fixed issue where getting/inserting statements on a ModuleBlock was throwing an error.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nModuleBlock#getStatements()\nModuleBlock#insertStatements()\n```\n\n----------------------------------------\n\nTITLE: Function Comment Example - TypeScript\nDESCRIPTION: Illustrates how inline comments on function declarations are handled.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getResult() { // description\n  return 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Comment Positioning - TypeScript\nDESCRIPTION: Shows comment handling near class brace tokens.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass C {\n    prop;\n    /* test */ }\n```\n\n----------------------------------------\n\nTITLE: Project Structure Documentation\nDESCRIPTION: Directory structure overview showing the organization of manipulation-related code in the ts-morph project, including functions for manipulations, text manipulation classes, and tree replacement handlers.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/src/manipulation/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `manipulations` - Functions used to do a manipulations.\n- `textManipulations` - Classes used to manipulate text.\n- `nodeHandlers` - Classes to replace a tree.\n```\n\n----------------------------------------\n\nTITLE: Example of Comment Node with Trailing Comment Range\nDESCRIPTION: Shows a code example where a multi-line comment is followed by a single-line comment on the same line.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/details/comments.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/* 1 */ // 2\n```\n\n----------------------------------------\n\nTITLE: Standalone Comments - TypeScript\nDESCRIPTION: Shows how comments are handled when they are the only content in a file.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// comment 1\n/* comment 2 */\n```\n\n----------------------------------------\n\nTITLE: Conditional Import of Globby in TypeScript\nDESCRIPTION: Conditionally importing \"globby\" to allow using the library in browser environments.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Multiple Inline Comments - TypeScript\nDESCRIPTION: Demonstrates handling of multiple comments on the same line.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/rfcs/RFC-0001 - Inserting Into Statements Handling Comments.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* comment 1 */ // comment 2\n/* comment 3 */ /* comment 4 */ // comment 5\n```\n\n----------------------------------------\n\nTITLE: Installing ts-morph in Deno\nDESCRIPTION: Command to add ts-morph to a Deno project using the JSR registry.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno add ts-morph@jsr:@ts-morph/ts-morph\n```\n\n----------------------------------------\n\nTITLE: Array Type Renaming Example\nDESCRIPTION: Renamed Type#getArrayType() to Type#getArrayElementType() to better reflect method functionality.\nSOURCE: https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nType#getArrayElementType()\n```"
  }
]