[
  {
    "owner": "afeld",
    "repo": "sodapy",
    "content": "TITLE: Initializing Socrata Client with Credentials in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a Socrata client with credentials, including the domain, application token, username, and password.  The username and password are required for creating or modifying data. An application token isn't strictly required, but queries executed from a client without an application token will be subjected to strict throttling limits. A timeout can be set for requests.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sodapy import Socrata\nclient = Socrata(\n    \"sandbox.demo.socrata.com\",\n    \"FakeAppToken\",\n    username=\"fakeuser@somedomain.com\",\n    password=\"mypassword\",\n    timeout=10\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Socrata Data into Pandas DataFrame with Sodapy\nDESCRIPTION: This snippet fetches data from the Socrata dataset using the `client.get()` method and stores it into a Pandas DataFrame.  The dataset identifier is used to specify which dataset to retrieve.  The resulting data is then converted into a Pandas DataFrame for further analysis, and the head of the DataFrame is printed.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults = client.get(socrata_dataset_identifier)\ndf = pd.DataFrame.from_dict(results)\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Setting up Socrata API Credentials with Sodapy\nDESCRIPTION: This snippet configures the Socrata API credentials, including the Socrata domain and dataset identifier. It also retrieves the Socrata application token from an environment variable. The application token is optional but recommended to avoid rate limiting.  It shows how to set up the necessary variables before querying the Socrata API using Sodapy.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Enter the information from those sections here\nsocrata_domain = 'opendata.socrata.com'\nsocrata_dataset_identifier = 'f92i-ik66'\n\n# App Tokens can be generated by creating an account at https://opendata.socrata.com/signup\n# Tokens are optional (`None` can be used instead), though requests will be rate limited.\n#\n# If you choose to use a token, run the following command on the terminal (or add it to your .bashrc)\n# $ export SODAPY_APPTOKEN=<token>\nsocrata_token = os.environ.get(\"SODAPY_APPTOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Socrata Client without Credentials in Python\nDESCRIPTION: This code snippet shows how to initialize a Socrata client without credentials, using only the domain. This is useful for read-only operations. No username, password or app token are needed in this context.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = Socrata(\"sandbox.demo.socrata.com\", None)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data into a Sodapy Dataset\nDESCRIPTION: This snippet demonstrates how to create or update rows in an existing dataset using the Sodapy client's upsert functionality.  It requires the dataset identifier and a payload containing the data to be inserted or updated. The function returns a dictionary showing the number of rows affected.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> data = [{'Delegation': 'AJU', 'Name': 'Alaska', 'Key': 'AL', 'Entity': 'Juneau'}]\n>>> client.upsert(\"eb9n-hr43\", data)\n    {u'Errors': 0, u'Rows Deleted': 0, u'Rows Updated': 0, u'By SID': 0, u'Rows Created': 1, u'By RowIdentifier': 0}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> data = [{'Delegation': 'sfa', ':id': 8, 'Name': 'bar', 'Key': 'doo', 'Entity': 'dsfsd'}, {':id': 7, ':deleted': True}]\n>>> client.upsert(\"eb9n-hr43\", data)\n    {u'Errors': 0, u'Rows Deleted': 1, u'Rows Updated': 1, u'By SID': 2, u'Rows Created': 0, u'By RowIdentifier': 0}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> data = open(\"upsert_test.csv\")\n>>> client.upsert(\"eb9n-hr43\", data)\n    {u'Errors': 0, u'Rows Deleted': 0, u'Rows Updated': 1, u'By SID': 1, u'Rows Created': 0, u'By RowIdentifier': 0}\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata from Socrata API in Python\nDESCRIPTION: This snippet retrieves the metadata for a specific dataset using the Socrata client. The `get_metadata` function returns column names and descriptions, which can be helpful for constructing queries and understanding the data structure. It also retrieves the name of each metadata column.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmetadata = client.get_metadata(socrata_dataset_identifier)\n[x['name'] for x in metadata['columns']]\n```\n\n----------------------------------------\n\nTITLE: Data Type Conversion in Pandas DataFrame\nDESCRIPTION: This snippet converts the 'amount' column in the Pandas DataFrame to a float data type. This conversion is necessary for performing numerical operations on the column.  This step is essential if the data type is initially read as a string.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf['amount'] = df['amount'].astype(float)\n```\n\n----------------------------------------\n\nTITLE: Setting Socrata Domain and Dataset Identifier in Python\nDESCRIPTION: This snippet sets the Socrata domain and dataset identifier. It retrieves the Socrata application token from an environment variable, allowing for authenticated access to the API. The token is obtained using `os.environ.get(\"SODAPY_APPTOKEN\")`.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsocrata_domain = 'opendata.socrata.com'\nsocrata_dataset_identifier = 'f92i-ik66'\n\n# If you choose to use a token, run the following command on the terminal (or add it to your .bashrc)\n# $ export SODAPY_APPTOKEN=<token>\nsocrata_token = os.environ.get(\"SODAPY_APPTOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Using Socrata Client as a Context Manager in Python\nDESCRIPTION: This code snippet illustrates how to use the Socrata client as a context manager. Using the `with` statement ensures that the client is properly closed after use, obviating the need for explicit teardown.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith Socrata(\"sandbox.demo.socrata.com\", None) as client:\n    # do some stuff\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Results from Socrata API in Python\nDESCRIPTION: This snippet retrieves data with a specified limit on the number of rows returned.  The `limit` parameter restricts the number of results to 6.  It selects the 'name' and 'amount' columns.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresults = client.get(socrata_dataset_identifier, limit=6, select=\"name, amount\")\nresults\n```\n\n----------------------------------------\n\nTITLE: Filtering Socrata Dataset Rows with 'where' Clause in Python\nDESCRIPTION: This snippet retrieves data from the Socrata API using the `where` argument to filter rows based on a condition. It filters for rows where the 'amount' is greater than or equal to 2433. It then prints the total number of non-null results and the number of results downloaded using the get method.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = client.get(socrata_dataset_identifier, where=\"amount >= 2433\")\nprint(\"Total number of non-null results: {}\".format(meta_amount['cachedContents']['non_null']))\nprint(\"Number of results downloaded: {}\".format(len(results)))\nresults[:3]\n```\n\n----------------------------------------\n\nTITLE: Importing sodapy and os modules in Python\nDESCRIPTION: This snippet imports the necessary libraries: `os` for environment variables and `Socrata` from the `sodapy` library. It sets up the environment for interacting with the Socrata API and provides necessary filters for performing basic operations automatically.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n# Note: we don't need Pandas\n# Filters allow you to accomplish many basic operations automatically\n\nfrom sodapy import Socrata\n```\n\n----------------------------------------\n\nTITLE: Initializing Socrata Client with Sodapy\nDESCRIPTION: This snippet initializes the Socrata client using the domain and application token.  The domain and token are used to establish a connection to the Socrata API. After initializing the client, it prints out the connection information, including the domain, session and URI prefix.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = Socrata(socrata_domain, socrata_token)\nprint(\"Domain: {domain:}\\nSession: {session:}\\nURI Prefix: {uri_prefix:}\".format(**client.__dict__))\n```\n\n----------------------------------------\n\nTITLE: Querying Socrata API with SoQL Query String in Python\nDESCRIPTION: This snippet demonstrates querying the Socrata API using a SoQL query string. The query string allows for more complex filtering and selection. This query selects 'name' and 'amount' where 'amount' is between 1000 and 2000, limiting the results to 5.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nquery = \"\"\"\nselect \n    name, \n    amount\nwhere\n    amount > 1000\n    and amount < 2000\nlimit\n    5\n\"\"\"\n\nresults = client.get(socrata_dataset_identifier, query=query)\nresults\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns and Ordering Rows in Socrata Query in Python\nDESCRIPTION: This snippet retrieves data, selects specific columns ('amount' and 'job'), and orders the results by 'amount' in ascending order.  The `where` clause filters for rows where 'amount' is less than 2433. The results are limited to the first three entries.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresults = client.get(socrata_dataset_identifier,\n                     where=\"amount < 2433\",\n                     select=\"amount, job\",\n                     order=\"amount ASC\")\nresults[:3]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Sodapy\nDESCRIPTION: This example demonstrates how to create a new dataset using the Sodapy client, including defining columns, tags, row identifiers, and dataset descriptions. The function returns a dictionary containing dataset metadata upon successful creation.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> columns = [{\"fieldName\": \"delegation\", \"name\": \"Delegation\", \"dataTypeName\": \"text\"}, {\"fieldName\": \"members\", \"name\": \"Members\", \"dataTypeName\": \"number\"}]\n>>> tags = [\"politics\", \"geography\"]\n>>> client.create(\"Delegates\", description=\"List of delegates\", columns=columns, row_identifier=\"delegation\", tags=tags, category=\"Transparency\")\n    {u'id': u'2frc-hyvj', u'name': u'Foo Bar', u'description': u'test dataset', u'publicationStage': u'unpublished', u'columns': [ { u'name': u'Foo', u'dataTypeName': u'text', u'fieldName': u'foo', ... }, { u'name': u'Bar', u'dataTypeName': u'number', u'fieldName': u'bar', ... } ], u'metadata': { u'rowIdentifier': 230641051 }, ... }\n```\n\n----------------------------------------\n\nTITLE: Data Aggregation and Sorting in Pandas DataFrame\nDESCRIPTION: This snippet performs data aggregation and sorting on the Pandas DataFrame. It groups the data by the 'recipient' column and calculates the sum, mean, and size of the 'amount' column for each recipient. The results are then sorted by the sum in descending order and the top results are printed.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nby_candidate = df.groupby('recipient').amount.aggregate([np.sum, np.mean, np.size]).round(0)\nby_candidate.sort_values('sum', ascending=False).head()\n```\n\n----------------------------------------\n\nTITLE: Grouping and Calculating Sum with Socrata API in Python\nDESCRIPTION: This snippet groups results by 'recipient' and calculates the sum of 'amount' for each recipient. The results are ordered by the sum of 'amount' in descending order. The returned values are strings by default.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = client.get(socrata_dataset_identifier,\n                     group=\"recipient\",\n                     select=\"sum(amount), recipient\",\n                     order=\"sum(amount) DESC\")\nresults\n```\n\n----------------------------------------\n\nTITLE: Deleting Data or Dataset with Sodapy\nDESCRIPTION: These snippets show how to delete a single row or an entire dataset using the Sodapy client. For deleting a row, the dataset identifier and the row ID are required. To delete the entire dataset, only the dataset identifier is needed.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> client.delete(\"nimj-3ivp\", row_id=2)\n    <Response [200]>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> client.delete(\"nimj-3ivp\")\n    <Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Free Text Search on Socrata API in Python\nDESCRIPTION: This snippet shows how to perform a free text search on the Socrata API using the `q` parameter. It searches for rows containing the text \"Slider\" in a dataset of NYC dog names and selects the `animalname` and `breedname` columns.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nnyc_dogs_domain = 'data.cityofnewyork.us'\nnyc_dogs_dataset_identifier = 'nu7n-tubp'\n\nnyc_dogs_client = Socrata(nyc_dogs_domain, socrata_token)\nresults = nyc_dogs_client.get(nyc_dogs_dataset_identifier,\n                              q=\"Slider\",\n                              select=\"animalname, breedname\")\nresults\n```\n\n----------------------------------------\n\nTITLE: Fetching and Combining Data from Multiple Socrata Datasets\nDESCRIPTION: This snippet fetches data from two different Socrata datasets (New York City and Chattanooga) and prints the shape of the resulting DataFrames. It initializes separate Socrata clients for each dataset using their respective domains and dataset identifiers.  The shape shows the number of rows and columns in each DataFrame.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnyc_domain = 'data.cityofnewyork.us'\nnyc_dataset_identifier = 'fhrw-4uyv'\nnyc_client = Socrata(nyc_domain, socrata_token)\nnyc_results = nyc_client.get(nyc_dataset_identifier)\nnyc_df = pd.DataFrame.from_dict(nyc_results)\nprint(nyc_df.shape)\n\nchatt_domain = 'data.chattlibrary.org'\nchatt_dataset_identifier = 'sf89-4qcw'\nchatt_client = Socrata(chatt_domain, socrata_token)\nchatt_results = chatt_client.get(chatt_dataset_identifier)\nchatt_df = pd.DataFrame.from_dict(chatt_results)\nprint(chatt_df.shape)\n```\n\n----------------------------------------\n\nTITLE: Downloading Attachments with Sodapy\nDESCRIPTION: This snippet shows how to download attachments associated with a dataset using the Sodapy client. It requires the dataset identifier and optionally a download directory. The function returns a list of paths to the downloaded files.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> client.download_attachments(\"nimj-3ivp\", download_dir=\"~/Desktop\")\n        ['/Users/xmunoz/Desktop/nimj-3ivp/FireIncident_Codes.PDF', '/Users/xmunoz/Desktop/nimj-3ivp/AccidentReport.jpg']\n```\n\n----------------------------------------\n\nTITLE: Publishing a Dataset with Sodapy\nDESCRIPTION: This snippet demonstrates how to publish a dataset created with Sodapy. The dataset identifier is passed to the function.  The function returns a dictionary containing dataset metadata upon successful publication.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> client.publish(\"2frc-hyvj\")\n    {u'id': u'2frc-hyvj', u'name': u'Foo Bar', u'description': u'test dataset', u'publicationStage': u'unpublished', u'columns': [ { u'name': u'Foo', u'dataTypeName': u'text', u'fieldName': u'foo', ... }, { u'name': u'Bar', u'dataTypeName': u'number', u'fieldName': u'bar', ... } ], u'metadata': { u'rowIdentifier': 230641051 }, ... }\n```\n\n----------------------------------------\n\nTITLE: Looping Through Socrata API Results with Offset in Python\nDESCRIPTION: This snippet demonstrates how to loop through a dataset in chunks using the `limit` and `offset` parameters. It iterates through the data in chunks of `loop_size` (3 in this case), printing the results for each loop. The `offset` parameter is used to retrieve the next chunk of data.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nloop_size = 3\nnum_loops = 2\n\nfor i in range(num_loops):\n    results = client.get(socrata_dataset_identifier,\n                         select=\"name, amount\",\n                         limit=loop_size,\n                         offset=loop_size * i)\n    print(\"\\n> Loop number: {}\".format(i))\n    \n    # This simply formats the output nicely\n    for result in results:\n        print(result)\n```\n\n----------------------------------------\n\nTITLE: Setting Dataset Permissions with Sodapy\nDESCRIPTION: This snippet demonstrates how to set the permissions of a dataset to public or private using the Sodapy client. It requires the dataset identifier and the desired permission level.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> client.set_permission(\"2frc-hyvj\", \"public\")\n    <Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Average Value from Metadata in Python\nDESCRIPTION: This snippet accesses the cached average value from the metadata of the 'AMOUNT' column. The average value is retrieved from the `'cachedContents'` section of the metadata, providing a quick way to obtain summary statistics about the data.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmeta_amount['cachedContents']['average']\n```\n\n----------------------------------------\n\nTITLE: Analyzing Tree-Related Complaints from Multiple Data Sources\nDESCRIPTION: This snippet analyzes tree-related complaints from the New York City and Chattanooga datasets. It extracts complaints containing the word 'tree' (case-insensitive) from the 'complaint_type' column in the NYC dataset and the 'description' column in the Chattanooga dataset.  It then concatenates the value counts of these complaints, calculates the percentage of tree-related complaints for each city, and rounds the results to two decimal places.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# extract tree-related complaints\ntree_related = pd.concat([\n    nyc_df.complaint_type.str.contains(r'[T|t]ree').value_counts(),\n    chatt_df.description.str.contains(r'[T|t]ree').value_counts()\n], axis=1, keys=['nyc', 'chatt'])\ntree_related.div(tree_related.sum()).round(2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Data File in Sodapy\nDESCRIPTION: This example illustrates how to create a new file-based dataset using the Sodapy client.  It involves opening a file in binary read mode ('rb') and passing it as part of a files tuple to the create_non_data_file function. The params argument allows specifying additional metadata.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfiles = (\n    {'file': (\"gtfs2\", open('myfile.zip', 'rb'))}\n)\n\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open(nondatafile_path, 'rb') as f:\n    files = (\n        {'file': (\"nondatafile.zip\", f)}\n    )\n    response = client.create_non_data_file(params, files)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Socrata Data Access with Sodapy\nDESCRIPTION: This snippet imports the necessary Python libraries for working with Socrata data using `sodapy`, including `os` for environment variables, `pandas` for data manipulation, `numpy` for numerical operations, and `Socrata` from the `sodapy` library. These libraries are essential for connecting to the Socrata API, retrieving data, and performing analysis.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/basic_queries.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nimport numpy as np\n\nfrom sodapy import Socrata\n```\n\n----------------------------------------\n\nTITLE: Replacing Data in a Sodapy Dataset\nDESCRIPTION: This snippet demonstrates how to replace data in an existing dataset using the Sodapy client.  It requires the dataset identifier and a payload, often from a CSV file, containing the new data. This operation overwrites the existing data in the dataset. The function returns a dictionary showing the number of rows affected.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> data = open(\"replace_test.csv\")\n>>> client.replace(\"eb9n-hr43\", data)\n    {u'Errors': 0, u'Rows Deleted': 0, u'Rows Updated': 0, u'By SID': 0, u'Rows Created': 12, u'By RowIdentifier': 0}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Non-Data File in Sodapy\nDESCRIPTION: This example demonstrates how to replace an existing file in a file-based dataset using the Sodapy client.  Similar to creating a non-data file, it involves opening a file in binary read mode and passing it to the replace_non_data_file function, along with the dataset identifier and optional parameters.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith open(nondatafile_path, 'rb') as f:\n    files = (\n        {'file': (\"nondatafile.zip\", f)}\n    )\nresponse = client.replace_non_data_file(DATASET_IDENTIFIER, {}, files)\n```\n\n----------------------------------------\n\nTITLE: Filtering Metadata by Column Name in Python\nDESCRIPTION: This snippet filters the metadata to find information about a specific column, in this case, 'AMOUNT'. It iterates through the columns in the metadata and selects the one where the 'name' matches the specified column name, then retrieves the name of that column.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmeta_amount = [x for x in metadata['columns'] if x['name'] == 'AMOUNT'][0]\nmeta_amount\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment\nDESCRIPTION: This script clones the Sodapy repository, creates a virtual environment, activates it, and installs the development requirements. It ensures a clean and isolated environment for development and testing.\nSOURCE: https://github.com/afeld/sodapy/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <my remote url/sodapy.git>\ncd sodapy\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Package and Running Tests\nDESCRIPTION: This script installs the Sodapy package in the virtual environment and then executes the pytest test suite. This step confirms that the installation was successful and that the code functions as expected.\nSOURCE: https://github.com/afeld/sodapy/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install .\npytest\n```\n\n----------------------------------------\n\nTITLE: Defining Column Descriptions for NYC DOB Job Application Data\nDESCRIPTION: This snippet defines descriptions for various columns in the NYC Department of Buildings (DOB) job application dataset. Each string provides a brief explanation of the corresponding column's data, such as applicant names, dates, property details, job types, and permit statuses. These descriptions are used to understand the meaning of each column when working with the dataset.\nSOURCE: https://github.com/afeld/sodapy/blob/master/tests/test_data/get_datasets.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Number assigned by City Planning to a specific building\",\n                \"3-digit identifier: Borough code = first position, last 2 = community board\",\n                \"First Name of Applicant\",\n                \"Date when job is paid\",\n                \"Street Frontage\",\n                \"Vertical Enlrgmt\",\n                \"ExistingNo. of Stories\",\n                \"Proposed Dwelling Units\",\n                \"Special Action Date\",\n                \"Zoning Distr 1\",\n                \"NTA Name\",\n                \"Number assigned by DOB to Job Filing\",\n                \"House Number of Residence or Commercial Property\",\n                \"Last Name of Applicant\",\n                \"Enlargement SQ Footage\",\n                \"Existing Dwelling Units\",\n                \"House Street Name of Property Owner\",\n                \"Date when query is run and pushed to Open Data. Could be used to differentiate report dates.\",\n                \"Fuel Storage  Work Type? (X=Yes, Blank=No)\",\n                \"Date when job is prefiled\",\n                \"Owner's  Phone #\",\n                \"Type of Fee\",\n                \"1= Manhattan, 2= Bronx, 3 = Brooklyn, 4 = Queens, 5 = Staten Island\",\n                \"Sprinkler  Work Type? (X=Yes, Blank=No)\",\n                \"Fire Alarm  Work Type? (X=Yes, Blank=No)\",\n                \"Existing Occupancy\",\n                \"Job Description\",\n                \"Latitude\",\n                \"Zip\",\n                \"Proposed No. of Stories\",\n                \"Existing Zoning Sqft\",\n                \"Date when job is fully permitted\",\n                \"L code indicates that the building has been assigned landmark status\",\n                \"Owner Type\",\n                \"Longitude\",\n                \"House Number of Property Owner\",\n                \"Business Name of Property Owner\",\n                \"Total  Construction Floor Area\",\n                \"Street Name where Property is located\",\n                \"BIN\",\n                \"Loft Board\",\n                \"Fire Suppression  Work Type? (X=Yes, Blank=No)\",\n                \"Mechanical  Work Type? (X=Yes, Blank=No)\",\n                \"Proposed Height\",\n                \"First Name of property owner\",\n                \"Zoning Distr 2\",\n                \"Special Distr 1\",\n                \"Job Type, based on DOB Job Code (NB-New Building, A1, A2, A3- Alterations 1-3, SG-Sign, etc.)\",\n                \"Special Action Status\",\n                \"Job No Good Count\",\n                \"DOB Status code of job (A-Pre Filed, I-Sign Off, P- Approved, R-Permit Entire) Complete List - http://www.nyc.gov/html/dob/downloads/pdf/bisjobstatus.pdf\",\n                \"Standpipe Work Type? (X=Yes, Blank=No)\",\n                \"Application Filed electronically, rather than manually\",\n                \"1-2-3 Family  or Other\",\n                \"Number assigned to the skilled trade person/contractor or licensed professional\",\n                \" Estimated cost of job\",\n                \"Proposed Occupancy\",\n                \"Horizontal Enlrgmt\",\n                \"Tax lot assigned by Department of Finance\",\n                \"Non-Profit\",\n                \"Building Class\",\n                \"Latest status date\",\n                \"Estimated fee of job\",\n                \"Site Fill\",\n                \"Job is Professionally Certified by Licensed Professional instead of having it reviewed by Department of Building's Plan Examiners\",\n                \"Status code description\",\n                \"Zoning Distr 3\",\n                \"Applicant's Professional Title\",\n                \"Tax block assigned by Department of Finance\",\n                \"Adult Estab\",\n                \"Application Filed electronically, rather than manually\",\n                \"Existing Height\",\n                \"Withdrawal Indicator\",\n                \"Plumbing Work Type? (X=Yes, Blank=No)\",\n                \"Other? (X=Yes, Blank=No)\",\n                \"Equipment  Work Type? (X=Yes, Blank=No)\",\n                \"Last Name of property owner\",\n                \"Proposed Zoning Sqft\",\n                \"Fuel Burning  Work Type? (X=Yes, Blank=No)\",\n                \"Census Tract\",\n                \"Cluster\",\n                \"Document Number\",\n                \"Hazardous\",\n                \"Date when job is assigned to plan examiner\",\n                \"Sign-off Date\",\n                \"Other Description\",\n                \"Date when job is paid and entered\",\n                \"JOB_S1_NO\",\n                \"City \",\n                \"Date when job is approved\",\n                \"Special District 2\",\n                \"State\",\n                \"City Owned\",\n                \"Curb Cut  Work Type? (X=Yes, Blank=No)\",\n                \"Boiler  Work Type? (X=Yes, Blank=No)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Socrata Client in Python\nDESCRIPTION: This snippet initializes the Socrata client with the domain and token. The `Socrata` object is created, enabling subsequent API requests. The token is optional but can improve rate limits.\nSOURCE: https://github.com/afeld/sodapy/blob/master/examples/soql_queries.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = Socrata(socrata_domain, socrata_token)\n```\n\n----------------------------------------\n\nTITLE: Defining Column Formats for NYC DOB Job Application Data\nDESCRIPTION: This snippet defines the format for each column in the NYC Department of Buildings (DOB) job application dataset. It specifies alignment (left or right) and, for numerical columns, formatting options like precision style and whether to include commas.  This formatting is intended to improve the readability and usability of the data.\nSOURCE: https://github.com/afeld/sodapy/blob/master/tests/test_data/get_datasets.txt#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"left\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                {\n                  \"precisionStyle\" : \"standard\",\n                  \"noCommas\" : \"true\",\n                  \"align\" : \"left\"\n                },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" },\n                { \"align\" : \"right\" }\n              ]\n```\n\n----------------------------------------\n\nTITLE: Dependencies List\nDESCRIPTION: This snippet defines the project's dependencies and their required versions.  It utilizes the requirements.txt format which is used by pip to install packages.\nSOURCE: https://github.com/afeld/sodapy/blob/master/requirements-dev.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nflake8>=5.0.4\npytest>=7.1.2\nrequests-mock>=1.9.3\nblack; python_version > '3.5'\ncoverage>=6.4.4\n```\n\n----------------------------------------\n\nTITLE: SoDA Dataset Change Response - JSON\nDESCRIPTION: This JSON response indicates the number of rows created, updated, and deleted after a Socrata Dataset API operation.  It also indicates any errors that occured. The keys \"Rows Created\", \"Rows Updated\", and \"Rows Deleted\" show the effect of the operation.\nSOURCE: https://github.com/afeld/sodapy/blob/master/tests/test_data/replace_songs.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Errors\": 0, \"Rows Deleted\": 0, \"Rows Updated\": 0, \"By SID\": 0, \"Rows Created\": 2, \"By RowIdentifier\": 0}\n```\n\n----------------------------------------\n\nTITLE: Closing Sodapy Client Session\nDESCRIPTION: This snippet illustrates how to properly close the Sodapy client session after completing all operations. This is important for releasing resources and preventing potential connection issues.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Running Sodapy Tests with Pytest\nDESCRIPTION: This command shows how to execute the test suite for the Sodapy library using pytest.  Pytest needs to be installed in the environment before running this command.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Packages with Python\nDESCRIPTION: These commands demonstrate how to create source and wheel distributions for a Python package and upload them to PyPI using twine. Ensure you have twine installed and are authenticated with PyPI before running these commands.\nSOURCE: https://github.com/afeld/sodapy/blob/master/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython3 setup.py bdist_wheel\npython3 setup.py sdist\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Dataset Metadata: NYC DOB Job Application Filings\nDESCRIPTION: This JSON snippet contains metadata for the NYC Department of Buildings (DOB) job application filings dataset.  It specifies the data's categories, tags, domain-specific tags and categories, update automation status, and update date. It also includes the download count and provenance (official).\nSOURCE: https://github.com/afeld/sodapy/blob/master/tests/test_data/get_datasets.txt#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"download_count\" : 18332,\n            \"provenance\" : \"official\"\n          },\n        \"classification\" :\n          {\n            \"categories\" : [ \"finance\", \"economy\", \"environment\" ],\n            \"tags\" : [],\n            \"domain_category\" : \"Housing & Development\",\n            \"domain_tags\" : [ \"job\", \"buildings\", \"dob\" ],\n            \"domain_metadata\" :\n              [\n                { \"key\" : \"Update_Automation\", \"value\" : \"Yes\" },\n                {\n                  \"key\" : \"Update_Date-Made-Public\"\n```"
  }
]