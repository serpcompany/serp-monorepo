[
  {
    "owner": "umijs",
    "repo": "umi",
    "content": "TITLE: Accessing Dynamic Routing Parameters with useParams in UmiJS\nDESCRIPTION: This code snippet demonstrates how to use the `useParams` hook from `react-router` to access dynamic routing parameters. Given a route configuration (`/comp/:id`) and a current location (`/comp/paramId`), it calls `useParams` and shows the structure of the returned params object, containing the `id` parameter with its value. It depends on `react-router@6` which Umi4 uses.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// Route configuration /comp/:id\n// Current location /comp/paramId\n\nconst params  = useParams();\n// params\n{\n  \"id\": \"paramId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-applications via Plugin (Parent)\nDESCRIPTION: This code snippet shows how to register sub-applications in the parent application using the `qiankun` plugin in the Umi configuration file. It defines the `name` and `entry` for each sub-application. The `name` is the identifier and the `entry` is the HTTP address where the sub-application runs.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    master: {\n      apps: [\n        {\n          name: 'app1',\n          entry: '//localhost:7001',\n        },\n        {\n          name: 'app2',\n          entry: '//localhost:7002',\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reading selected routes with useSelectedRoutes in UmiJS\nDESCRIPTION: Demonstrates the use of `useSelectedRoutes` to access information about all currently matched routes, including configured parameters, which is useful in layout components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n// layouts/index.tsx\n\nimport { useSelectedRoutes } from 'umi'\n\nexport default function Layout() {\n  const routes = useSelectedRoutes()\n  const lastRoute = routes.at(-1)\n\n  if (lastRoute?.pathname === '/some/path') {\n    return <div>1 : <Outlet /></div>\n  }\n\n  if (lastRoute?.extraProp) {\n    return <div>2 : <Outlet /></div>\n  }\n\n  return <Outlet />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a proxy in a UmiJS project. It proxies requests with the '/api' prefix to 'http://jsonplaceholder.typicode.com/', rewrites the path, and changes the origin to the target URL. This is useful for solving CORS issues during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/proxy.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  proxy: {\n    '/api': {\n      'target': 'http://jsonplaceholder.typicode.com/',\n      'changeOrigin': true,\n      'pathRewrite': { '^/api' : '' },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a UmiJS Model with ahooks\nDESCRIPTION: This snippet shows how to fetch user data using `useRequest` from the `ahooks` library within a UmiJS model.  It simplifies data fetching and loading state management. Requires `getUser` function from '@/services/user' and `ahooks` package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nimport { useRequest } from 'ahooks';\nimport { getUser } from '@/services/user';\n\nexport default function Page() {\n  const { data: user, loading: loading } = useRequest(async () => {\n    const res = await getUser();\n    if (res) {\n      return res;\n    }\n    return {};\n  });\n\n  return {\n    user,\n    loading,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Helmet in UmiJS (TSX)\nDESCRIPTION: This snippet shows how to use the Helmet component from UmiJS to dynamically manage the document's head section. It allows setting the page title and other meta tags. It's crucial for ensuring SSR compatibility, using Umi's provided Helmet.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Helmet } from 'umi';\n\nexport default function Page() {\n  return (\n    <Helmet>\n      <title>Hello World</title>\n    </Helmet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Layout Configuration in UmiJS\nDESCRIPTION: This code demonstrates how to configure the layout at runtime using `src/app.tsx`. It utilizes `RunTimeLayoutConfig` to define properties such as `title`, `logo`, and custom render functions for the right content, footer, and menu header. This configuration is dynamic and can access the `initialState`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.en-US.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RunTimeLayoutConfig } from '@umijs/max';\n\nexport const layout: RunTimeLayoutConfig = (initialState) => {\n  return {\n    // Commonly used properties\n    title: 'Ant Design',\n    logo: 'https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg',\n\n    // Default layout adjustments\n    rightContentRender: () => <RightContent />,\n    footerRender: () => <Footer />,\n    menuHeaderRender: undefined,\n\n    // Other properties see: https://procomponents.ant.design/components/layout#prolayout\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Use Selected Routes Hook Example TSX\nDESCRIPTION: Illustrates how to read all the route information hit by the current path using `useSelectedRoutes`. This allows accessing parameters configured in routes, which is very useful in layouts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\n// layouts/index.tsx\n\nimport { useSelectedRoutes } from 'umi'\n\nexport default function Layout() {\n  const routes = useSelectedRoutes()\n  const lastRoute = routes.at(-1)\n\n  if (lastRoute?.pathname === '/some/path') {\n    return <div>1 : <Outlet /></div>\n  }\n\n  if (\n\n```\n\n----------------------------------------\n\nTITLE: Request Interceptor Configuration\nDESCRIPTION: Shows how to define request interceptors using the `requestInterceptors` option.  Interceptors can modify the request config before it's sent.  The example demonstrates various ways to define interceptors, including functions and tuples with error handling.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst request: RequestConfig = {\n  requestInterceptors: [\n    // 直接写一个 function，作为拦截器\n    (url, options) =>\n      {\n        // do something\n        return { url, options }\n      },\n    // 一个二元组，第一个元素是 request 拦截器，第二个元素是错误处理\n    [(url, options) => {return { url, options }}, (error) => {return Promise.reject(error)}],\n    // 数组，省略错误处理\n    [(url, options) => {return { url, options }}]\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in UmiJS (TypeScript)\nDESCRIPTION: Demonstrates how to configure routes in a UmiJS application using the `routes` configuration option in `.umirc.ts`. This example defines two routes, mapping `/` to the `index` component and `/user` to the `user` component. UmiJS will handle the component loading and page transitions based on these route definitions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    { path: '/', component: 'index' },\n    { path: '/user', component: 'user' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Global Layout Component (TypeScript/JSX)\nDESCRIPTION: Shows a custom global layout component in UmiJS using React and the `<Outlet />` component. This layout component will wrap all pages in the application providing a consistent visual structure. The `<Outlet />` component is used to render the content of the current page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'umi'\n\nexport default function Layout() {\n  return <Outlet />\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Ant Design in config.ts (Build-time)\nDESCRIPTION: This code snippet shows how to configure the `antd` property in the `config/config.ts` file to enable various features like dark theme, compact theme, on-demand loading via `babel-plugin-import`, and theme customization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// config/config.ts\nexport default {\n  antd: {\n    // configProvider\n    configProvider: {},\n    // themes\n    dark: true,\n    compact: true,\n    // babel-plugin-import\n    import: true,\n    // less or css, default less\n    style: 'less',\n    // shortcut of `configProvider.theme`\n    // used to configure theme token, antd v5 only\n    theme: {},\n    // antd <App /> valid for version 5.1.0 or higher, default: undefined\n    appConfig: {},\n    // Transform DayJS to MomentJS\n    momentPicker: true,\n    // Add StyleProvider for legacy browsers\n    styleProvider: {\n      hashPriority: 'high',\n      legacyTransformer: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Type and List in Typescript\nDESCRIPTION: Defines the structure of the `Test` object with properties `id`, `name`, `image`, and `desc`.  It then creates a `testList` array populated with sample `Test` objects. This data is later used as the `dataSource` for the `ProList` component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Test = {\n  id: number;\n  name: string;\n  image: string;\n  desc: string;\n};\n\nconst testList: Test[] = [\n  {\n    id: 9903,\n    name: 'Yuque\\'s Sky',\n    image:\n      'https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg',\n    desc: 'Covered all test cases for the login module',\n  },\n  {\n    id: 9904,\n    name: 'Ant Design',\n    image:\n      'https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg',\n    desc: 'Covered all test cases, all scenarios have been verified under the Node 17 testing environment',\n  },\n  {\n    id: 9905,\n    name: 'Ant Group Experience Technology',\n    image:\n      'https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg',\n    desc: 'Covered all testing requirements, all scenarios have been verified under the Ubuntu 14.04 testing environment',\n  },\n  {\n    id: 9906,\n    name: 'TechUI',\n    image:\n      'https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg',\n    desc: 'Covered all testing requirements, all scenarios have been verified under MacOS testing environment',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Cancelling a request with AbortController\nDESCRIPTION: Shows how to cancel a request using the AbortController API.  This example demonstrates how to send and cancel a request using buttons and AbortController signals.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { request } from '@umijs/max';\nimport { Button } from 'antd';\n\nconst controller = new AbortController();\n\nconst HomePage: React.FC = () => {\n  const fetchData = async () => {\n    const res = await request('/api/getData', {\n      method: 'GET',\n      signal: controller.signal\n    })\n  }\n\n  const cancelData = () => {\n    controller.abort();\n  }\n  return (\n    <>\n      <Button onClick={fetchData}>send request</Button>\n      <Button onClick={cancelData}>cancel request</Button>\n    </>\n  );\n};\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Authentication Wrapper Component (JSX)\nDESCRIPTION: This JSX code snippet shows an example of an authentication wrapper component. It checks if the user is logged in using `useAuth()`. If the user is logged in, it renders the `Outlet` to display the wrapped component; otherwise, it redirects the user to the `/login` page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navigate, Outlet } from 'umi'\n\nexport default (props) => {\n  const { isLogin } = useAuth();\n  if (isLogin) {\n    return <Outlet />;\n  } else{\n    return <Navigate to=\"/login\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation in Umi\nDESCRIPTION: This code snippet demonstrates how to configure the Module Federation plugin in a standard Umi project. It includes the plugin import and defines shared modules along with the remote module configurations, including the remote entry point and optional alias.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nimport { defineConfig } from 'umi';\n\nconst shared = {\n  react: {\n    singleton: true,\n    eager: true,\n  },\n  'react-dom': {\n    singleton: true,\n    eager: true,\n  },\n};\n\nexport default defineConfig({\n  plugins: ['@umijs/plugins/dist/mf'], // 引入插件\n  mf: {\n    remotes: [\n      {\n        // 可选，未配置则使用当前 remotes[].name 字段\n        aliasName: 'mfNameAlias',\n        name: 'theMfName',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n    ],\n\n    // 配置 MF 共享的模块\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the FormattedMessage component from Umi to display internationalized content in a React component. It imports the component and passes the 'welcome' id to it, which corresponds to the translation key in the locale files. This component dynamically renders the appropriate translation based on the current locale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <div>\n      <FormattedMessage id=\"welcome\" />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using getInitialState for Initial Data Fetching (TypeScript)\nDESCRIPTION: This snippet shows how to define the `getInitialState` function in `src/app.ts` to fetch initial data for the application. This function is asynchronous and returns a promise that resolves to the initial data. The fetched data can then be accessed through `useModel('@@initialState')`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport { fetchInitialData } from \"@/services/initial\";\n\nexport async function getInitialState() {\n  const initialData = await fetchInitialData();\n  return initialData;\n}\n```\n\n----------------------------------------\n\nTITLE: MicroAppLink Navigation (App1) - React/TSX\nDESCRIPTION: This code snippet demonstrates how to use the MicroAppLink component in a child application (app1) to navigate to a route within another child application (app2). It imports MicroAppLink from umi and defines a functional component that renders a button. Clicking the button navigates the parent application to '/app2/home', rendering the specified route within app2.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// In app1\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* The jump link is /app2/home */}\n      <MicroAppLink name=\"app2\" to=\"/home\">\n        <Button>go to app2</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Search Params with UmiJS (TypeScript)\nDESCRIPTION: This snippet shows how to use the createSearchParams function from UmiJS to create URL search parameters from various input types, including strings, objects, and arrays. It wraps the native URLSearchParams and provides a convenient way to work with query strings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSearchParams } from 'umi';\n\n\n// 假设路径 http://a.com?foo=1&bar=2\ncreateSearchParams(location.search);\ncreateSearchParams(\"foo=1&bar=2\");\ncreateSearchParams(\"?foo=1&bar=2\");\n\n// 键值对对象\ncreateSearchParams({ foo: 'bar', qux: 'qoo'}).toString()\n// foo=bar&qux=qoo\n\n// 键值元组数组\ncreateSearchParams([[\"foo\", \"1\"], [\"bar\", \"2\"]]).toString()\n// foo=1&bar=2\n```\n\n----------------------------------------\n\nTITLE: Use Match Hook Example TSX\nDESCRIPTION: Illustrates how to use the `useMatch` hook to extract dynamic route parameters. It uses `useMatch` with a route pattern and logs the pathname and the extracted eventId parameter when the URL matches.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatch } from 'umi';\n\n// when url = '/events/12'\nconst match = useMatch('/events/:eventId');\nconsole.log(match?.pathname, match?.params.eventId);\n// '/events/12 12'\n```\n\n----------------------------------------\n\nTITLE: Configuring monorepoRedirect in UmiJS\nDESCRIPTION: This snippet enables `monorepoRedirect`, which redirects imports from other subpackages to their source code location, allowing for hot reloading without pre-building. No specific configuration options are set, so it defaults to redirecting to the `src` folder.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// 默认重定向到子包的 src 文件夹\nmonorepoRedirect: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in UmiJS\nDESCRIPTION: This snippet configures a proxy to forward requests to a backend server during development.  Requests to `/api` will be proxied to `http://jsonplaceholder.typicode.com/`. The `changeOrigin` option is set to `true` to change the origin of the request to the target URL. The `pathRewrite` option removes the `/api` prefix from the request path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nproxy: {\n  '/api': {\n    'target': 'http://jsonplaceholder.typicode.com/',\n    'changeOrigin': true,\n    'pathRewrite': { '^/api' : '' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Dynamically in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to dynamically set the current language using the `setLocale()` interface in UmiJS.  It imports the `setLocale` function from 'umi' and calls it with the desired language code and an optional boolean to indicate whether to refresh the page. The first call refreshes the page, while the second prevents it.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLocale } from 'umi';\n\n// Refresh the page when switching\nsetLocale('en-US');\n\n// Do not refresh the page when switching\nsetLocale('en-US', false);\n```\n\n----------------------------------------\n\nTITLE: Connecting React Component to Dva Model in UmiJS\nDESCRIPTION: This snippet illustrates how to connect a React component to a Dva model using the `connect` decorator in UmiJS. It maps the `user` model to the component's props, allowing access to user data via `this.props.user`. The component renders the user's name. This requires `umi` and `react` dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\n@connect(({ user }) => ({\n  user,\n}))\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.user.name}</div>;\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage Component - TypeScript\nDESCRIPTION: Demonstrates how to use the `<FormattedMessage />` component from Umi to display multilingual content based on the current locale.  The `id` prop is used to select the appropriate translation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <div>\n      <FormattedMessage id=\"welcome\" />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing clientLoader in a Route Component (TSX)\nDESCRIPTION: This code snippet shows how to define a `clientLoader` function alongside a route component in UmiJS. The `clientLoader` function fetches data (e.g., from an API endpoint) and returns it.  The component then uses the `useClientLoaderData` hook to access the pre-loaded data. The `clientLoader` function should return a Promise.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/client-loader.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/.../some_page.tsx\n\nimport { useClientLoaderData } from 'umi';\n\nexport default function SomePage() {\n  const { data } = useClientLoaderData();\n  return <div>{data}</div>;\n}\n\nexport async function clientLoader() {\n  const data = await fetch('/api/data');\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Loader with ESM (TypeScript)\nDESCRIPTION: This snippet shows how to configure the route loader in UmiJS to use ESM modules. It uses React.lazy and import() for loading route components asynchronously.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// moduleType: esm\n'index': React.lazy(() => import(/* webpackChunkName: \"p__index\" */'../../pages/index.tsx')),\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component for Navigation (JSX)\nDESCRIPTION: Demonstrates how to use the `Link` component from UmiJS for internal navigation within a single-page application. This component provides a declarative way to create links that trigger client-side routing. Clicking on the `Users Page` link will navigate the user to the `/users` route without a full page reload.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'umi';\n\nexport default function Page() {\n  return (\n    <div>\n      <Link to=\"/users\">Users Page</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer: Add, Remove, Update Todos\nDESCRIPTION: This code demonstrates reducer functions for adding, removing, and updating todos in a Dva model. Each reducer function takes the current state and an action as input and returns the new state.  The `add` reducer concatenates a new todo, the `remove` reducer filters out a todo by id, and the `update` reducer updates a todo if its id matches.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports default {\n  namespace: 'todos',\n  state: [],\n  reducers: {\n    add(state, { payload: todo }) {\n      return state.concat(todo);\n    },\n    remove(state, { payload: id }) {\n      return state.filter(todo => todo.id !== id);\n    },\n    update(state, { payload: updatedTodo }) {\n      return state.map(todo => {\n        if (todo.id === updatedTodo.id) {\n          return { ...todo, ...updatedTodo };\n        } else {\n          return todo;\n        }\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Match Information (JSX)\nDESCRIPTION: Demonstrates how to access match information using the `useMatch` hook from `react-router@6` within a UmiJS component. The `useMatch` hook provides details about the matched route, including parameters, pathname, and pattern. This is useful for extracting information from the URL and using it to customize the component's behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nconst match = useMatch('/comp/:id')\n// match \n{\n  \"params\": {\n    \"id\": \"paramId\"\n  },\n  \"pathname\": \"/comp/paramId/\",\n  \"pathnameBase\": \"/comp/paramId\",\n  \"pattern\": {\n    \"path\": \"/comp/:id\",\n    \"caseSensitive\": false,\n    \"end\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routes Configuration (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the route configuration generated for dynamic routes using convention-based routing in UmiJS. It showcases how file names with '$' prefixes are converted into dynamic route segments (e.g., '/foo/:slug' and '/:bar/*').\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index.tsx' },\n  { path: '/foo/:slug', component: '@/pages/foo/$slug.tsx' },\n  { path: '/:bar/*', component: '@/pages/$bar/$.tsx' },\n];\n```\n\n----------------------------------------\n\nTITLE: Use Params Hook Definition Typescript\nDESCRIPTION: Defines the `useParams` hook, which returns a read-only key-value pair object of dynamic route matching parameters. This hook enables access to dynamic parameters defined in the route configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useParams<\n  K extends string = string\n>(): Readonly<Params<K>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Files Inclusion in UmiJS\nDESCRIPTION: This snippet configures the `mock` option to include specific files as mock files.  The `include` array specifies glob patterns for files to be included as mock files, extending beyond the default mock directory.  In this example, all `_mock.ts` files within the `src/pages` directory and its subdirectories will be treated as mock files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// 让所有 pages 下的 _mock.ts 文件成为 mock 文件\nmock: {\n  include: ['src/pages/**/_mock.ts'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Initial State with useModel in UmiJS\nDESCRIPTION: This code shows how to access the global initial state within a component using the `useModel` hook in UmiJS. It demonstrates how to retrieve the initial state, loading status, errors, and refresh/setInitialState methods.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from \"umi\";\n\nexport default function Page() {\n  const { initialState, loading, error, refresh, setInitialState } =\n    useModel(\"@@initialState\");\n  return <>{initialState}</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions in src/access.ts (JavaScript)\nDESCRIPTION: This code snippet shows how to define permissions in `src/access.ts`. It exports a function that receives the `initialState` and returns an object where each value corresponds to a permission. The permissions can depend on user roles or other data from `initialState`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/access.ts\nexport default function (initialState) {\n  const { userId, role } = initialState;\n\n  return {\n    canReadFoo: true,\n    canUpdateFoo: role === 'admin',\n    canDeleteFoo: (foo) => {\n      return foo.ownerId === userId;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Static Routes in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code snippet showcases how to use the `exportStatic` option in UmiJS to generate static HTML files for each route, typically used for static site hosting. The example demonstrates the use of `extraRoutePaths` to generate additional pages for dynamic routes.  It can be configured with fixed values or a function to dynamically retrieve route paths from an API.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // 配置固定值\n    extraRoutePaths: ['/news/1', '/news/2'],\n    // 也可以配置函数动态获取\n    extraRoutePaths: async () => {\n      const res = await fetch('https://api.example.com/news');\n      const data = await res.json();\n      return data.map((item) => `/news/${item.id}`);\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Webpack Configuration with UmiJS API (TypeScript)\nDESCRIPTION: Demonstrates how to modify the webpack configuration using the `modifyWebpackConfig` API in UmiJS.  The function receives the webpack configuration object (`config`), the webpack instance (`webpack`), and the environment (`env`) as parameters. The function returns the modified webpack configuration object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyWebpackConfig((memo, { webpack, env }) => {\n  // do something\n  \n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: Route Wrappers for Authentication (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure wrapper components for routes in UmiJS using the `wrappers` property. It shows how to add an authentication wrapper (`@/wrappers/auth`) to the `/user` route. This allows for route-level permission checks before rendering the component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/user', component: 'user',\n      wrappers: [\n        '@/wrappers/auth',\n      ],\n    },\n    { path: '/login', component: 'login' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure routes in UmiJS using the `routes` attribute in the configuration file. It shows two routes: one for the root path ('/') and another for '/user'.  The `component` property specifies the React component to render for each route. This configuration enables basic page navigation within the UmiJS application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    { path: '/', component: 'index' },\n    { path: '/user', component: 'user' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Request Configuration in UmiJS\nDESCRIPTION: This code demonstrates how to configure request settings at runtime using the `RequestConfig` type from `umi`. It allows customization of timeout, error handling, and request/response interceptors, affecting all `request` and `useRequest` calls.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request: RequestConfig = {\n  timeout: 1000,\n  // other axios options you want\n  errorConfig: {\n    errorHandler(){\n    },\n    errorThrower(){\n    }\n  },\n  requestInterceptors: [],\n  responseInterceptors: []\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Valtio Usage with UmiJS\nDESCRIPTION: This example shows the basic usage of Valtio with UmiJS, including defining data with `proxy`, using data with `useSnapshot`, and updating data by directly modifying the proxy object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, useSnapshot } from 'umi';\n\n// 1、定义数据\nconst state = proxy({ count: 0 });\n// 2、使用数据\nconst snap = useSnapshot(state);\nsnap.count;\n// 3、更新数据\nstate.count += 1;\n```\n\n----------------------------------------\n\nTITLE: Define global variables in UmiJS\nDESCRIPTION: This example demonstrates how to use the `define` option to set global variables that can be used within your code.  The values are stringified before being injected into the code using Webpack's DefinePlugin.  You need to declare these variables in your TypeScript typings file to avoid type errors.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndefine: { FOO: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration with JavaScript\nDESCRIPTION: This snippet provides an example of how to use the `chainWebpack` function to modify the webpack configuration. It sets an alias, adds a plugin, and deletes a built-in plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  chainWebpack(memo, { env, webpack }) {\n    // Set alias\n    memo.resolve.alias.set('foo', '/tmp/to/foo');\n\n    // Add extra plugins\n    memo.plugin('hello').use(Plugin, [...args]);\n\n    // Delete Umi's built-in plugin\n    memo.plugins.delete('hmr');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Multilingual File Example in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code represents a multilingual file (e.g., `src/locales/en-US.ts`) used for title internationalization in UmiJS. It exports a default object containing key-value pairs, where the keys represent translation keys and the values are the corresponding translated strings in the specified language. These keys are referenced in the route configuration to dynamically set page titles.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  'site.title': 'Umi - Enterprise-level React Application Framework',\n  'about.title': 'Umi - About me',\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Request at runtime\nDESCRIPTION: Demonstrates how to configure the `request` object in `src/app.ts` for global request settings, including timeout, error handling, and interceptors.  These settings apply to all `request` and `useRequest` calls.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request: RequestConfig = {\n  timeout: 1000,\n  // other axios options you want\n  errorConfig: {\n    errorHandler(){},\n    errorThrower(){}\n  },\n  requestInterceptors: [],\n  responseInterceptors: []\n};\n```\n\n----------------------------------------\n\nTITLE: Building UmiJS Project for Production\nDESCRIPTION: This command builds the UmiJS project for deployment in a production environment. It optimizes the code and assets for performance and prepares them for distribution.  By default compression is enabled, but it can be disabled by setting the `COMPRESS` environment variable to `none`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ umi build\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters (JSX)\nDESCRIPTION: Demonstrates how to access and manipulate query parameters using the `useSearchParams` hook from `react-router@6` within a UmiJS component. The `useSearchParams` hook provides access to the query string of the current URL. This is useful for reading and updating query parameters without a full page reload.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// 当前 location /comp?a=b;\nconst [searchParams, setSearchParams] = useSearchParams();\nsearchParams.get('a')  // b\nsearchParams.toString()  // a=b\n\nsetSearchParams({a:'c',d:'e'}) // location 变成 /comp?a=c&d=e\n```\n\n----------------------------------------\n\nTITLE: Enable Access Control\nDESCRIPTION: This code snippet demonstrates how to enable the access plugin in UmiJS by configuring the `access` and `initialState` options in the project configuration. The `initialState` option is required as the access plugin depends on it.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  access: {},\n  // access 插件依赖 initial State 所以需要同时开启\n  initialState: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases in UmiJS with JavaScript\nDESCRIPTION: This snippet shows how to configure aliases in UmiJS to map import statements to specific paths. It uses the `alias` configuration option to define a mapping between 'foo' and '/tmp/to/foo'. Absolute paths are recommended as values for aliases, especially when pointing to dependencies, and require.resolve should be used.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  alias: {\n    foo: '/tmp/to/foo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the request function\nDESCRIPTION: Shows how to use the `request` function to make an API call with additional options such as `skipErrorHandler` and `getResponse`.  This example demonstrates how to skip global error handling and retrieve the full Axios response.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequest('/api/user', {\n  params: { name : 1 },\n  timeout: 2000,\n  // other axios options\n  skipErrorHandler: true,\n  getResponse: false,\n  requestInterceptors: [],\n  responseInterceptors: [],\n}\n```\n\n----------------------------------------\n\nTITLE: DvaJS Effect Example: Select State Data\nDESCRIPTION: This snippet demonstrates how to use the `select` effect in DvaJS to retrieve data from the application's state. It allows effects to access and use existing state values in their asynchronous logic. Here, it retrieves the `todos` from the state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst todos = yield select(state => state.todos);\n```\n\n----------------------------------------\n\nTITLE: Umi Configuration\nDESCRIPTION: Configures the Umi project, specifying the npm client, enabling API routes for Vercel, defining site routes, and enabling the Tailwindcss plugin. The `apiRoute` config tells Umi to enable API routes and specifies Vercel as the deployment platform.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  npmClient: 'pnpm',\n  apiRoute: {\n    platform: 'vercel',\n  },\n  routes: [\n    { path: '/', component: 'index' },\n    { path: '/posts/create', component: 'posts/create' },\n    { path: '/login', component: 'login' },\n    { path: '/posts/:postId', component: 'posts/post' },\n  ],\n  plugins: [require.resolve('@umijs/plugins/dist/tailwindcss')],\n  tailwindcss: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Register Method Example with Function - TypeScript\nDESCRIPTION: Provides an example of registering a method named `foo` on the API using `api.registerMethod` and then calling it with an argument.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerMethod({\n  name: foo,\n  // has fn\n  fn: (args) => {\n    console.log(args);\n  }\n})\napi.foo('hello, umi!'); // hello, umi!\n```\n\n----------------------------------------\n\nTITLE: Modify Routes with UmiJS API (TypeScript)\nDESCRIPTION: Illustrates how to modify the application's routes using the `modifyRoutes` API in UmiJS. The function takes a map of route objects as input and returns the modified map. This allows for dynamic route manipulation, such as redirecting a specific route.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyRoutes((memo) => {\n  Object.keys(memo).forEach((id) => {\n    const route = memo[id];\n    if(route.path === '/'){\n      route.path = '/redirect'\n    }\n  });\n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Dependencies\nDESCRIPTION: This bash command shows how to install the necessary dependencies for using UnoCSS in a Umi project, including `unocss` and `@unocss/cli`. These packages are required to use the UnoCSS plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm i unocss @unocss/cli\n```\n\n----------------------------------------\n\nTITLE: UmiJS CSS Loader Modules Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure CSS Modules with camelCase export convention. It sets `exportLocalsConvention` to `'camelCase'` to export CSS class names in camelCase format.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncssLoaderModules: {\n  // 配置驼峰式使用\n  exportLocalsConvention: 'camelCase'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in UmiJS (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure a proxy in UmiJS to redirect API requests to a different server. It defines a proxy rule that maps requests to '/api' to a target server, changes the origin, and rewrites the path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nproxy: {\n  '/api': {\n    'target': 'http://jsonplaceholder.typicode.com/',\n    'changeOrigin': true,\n    'pathRewrite': { '^/api' : '' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Child App Consumes Data with connectMaster - React/TSX\nDESCRIPTION: This code snippet demonstrates how a child application consumes data passed from the parent application using the `connectMaster` higher-order component (HOC) provided by UmiJS. It imports `connectMaster` from 'umi' and uses it to wrap the `MyPage` component. The `connectMaster` HOC automatically injects the data passed by the parent application as props into the `MyPage` component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectMaster } from 'umi';\n\nfunction MyPage(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n\nexport default connectMaster(MyPage);\n```\n\n----------------------------------------\n\nTITLE: UmiJS Request Interceptor Configuration\nDESCRIPTION: This snippet illustrates how to define request interceptors within the UmiJS `RequestConfig`. Interceptors allow modifying the request configuration before it's sent. The example demonstrates using both function and tuple formats for defining interceptors and error handlers.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst request: RequestConfig = {\n  requestInterceptors: [\n    // directly write a function as an interceptor\n    (url, options) =>\n      {\n        // do something\n        return { url, options }\n      },\n    // a tuple, the first element is the request interceptor, the second is the error handler\n    [(url, options) => {return { url, options }}, (error) => {return Promise.reject(error)}],\n    // array, omitting error handler\n    [(url, options) => {return { url, options }}]\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UmiJS Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure of an UmiJS configuration file using TypeScript. It imports the `defineConfig` function from the 'umi' package and exports a default configuration object. The configuration sets the output path to 'dist'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  outputPath: 'dist',\n});\n```\n\n----------------------------------------\n\nTITLE: Define Access Rules\nDESCRIPTION: This JavaScript code defines access rules within the `src/access.ts` file. It exports a function that takes the `initialState` as an argument and returns an object where each key-value pair represents a specific permission.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/access.ts\nexport default function (initialState) {\n  const { userId, role } = initialState;\n\n  return {\n    canReadFoo: true,\n    canUpdateFoo: role === 'admin',\n    canDeleteFoo: (foo) => {\n      return foo.ownerId === userId;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Modules in @umijs/max (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the Module Federation plugin in an UmiJS Max project to consume remote modules. It defines shared modules and specifies the remote module's name and entry point.  The `mf` configuration is enabled, including `remotes` and `shared` configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nimport { defineConfig } from '@umijs/max';\n\nconst shared = {\n  react: {\n    singleton: true,\n    eager: true,\n  },\n  'react-dom': {\n    singleton: true,\n    eager: true,\n  },\n};\n\nexport default defineConfig({\n  // Module Federation plugin is already built-in, just enable the configuration\n  mf: {\n    remotes: [\n      {\n        // Optional, if not configured, the current remotes[].name field is used\n        aliasName: 'mfNameAlias',\n        name: 'theMfName',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n    ],\n\n    // Configure MF shared modules\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Imperative Routing with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to perform imperative routing using the history object from UmiJS. It shows how to navigate to different routes, pass parameters, and navigate back in history. It also demonstrates the importance of passing `state` as the second argument to `history.push` and `history.replace` when using `state`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { history } from 'umi';\n\n// 跳转到指定路由\nhistory.push('/list');\n\n// 带参数跳转到指定路由\nhistory.push('/list?a=b&c=d#anchor', state);\nhistory.push({\n    pathname: '/list',\n    search: '?a=b&c=d',\n    hash: 'anchor',\n  },\n  {\n    some: 'state-data',\n  }\n);\n\n// 跳转当前路径，并刷新 state\nhistory.push({}, state)\n\n// 跳转到上一个路由\nhistory.back();\nhistory.go(-1);\n```\n\n----------------------------------------\n\nTITLE: Reducer Example: CRUD Operations for Todos in DvaJS\nDESCRIPTION: This code shows common CRUD operations (add, remove, update) within a Dva reducer.  The reducer manages a `todos` array in the model's state.  It uses immutable operations (concat, filter, map) to update the state safely.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports default {\n  namespace: 'todos',\n  state: [],\n  reducers: {\n    add(state, { payload: todo }) {\n      return state.concat(todo);\n    },\n    remove(state, { payload: id }) {\n      return state.filter(todo => todo.id !== id);\n    },\n    update(state, { payload: updatedTodo }) {\n      return state.map(todo => {\n        if (todo.id === updatedTodo.id) {\n          return { ...todo, ...updatedTodo };\n        } else {\n          return todo;\n        }\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-applications at Runtime (Parent)\nDESCRIPTION: This code shows how to register sub-applications at runtime in the parent application. The `qiankun` object is exported from `src/app.ts` and contains the configuration for the sub-applications, including their names and entry points. This method provides more flexibility than plugin-based registration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    master: {},\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  apps: [\n    {\n      name: 'app1',\n      entry: '//localhost:7001',\n    },\n    {\n      name: 'app2',\n      entry: '//localhost:7002',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Response Interceptor Configuration\nDESCRIPTION: Illustrates how to define response interceptors using the `responseInterceptors` option. Response interceptors can modify the response before it's returned.  The example shows different ways to define interceptors, including functions and tuples with error handling.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst request: RequestConfig = {\n  responseInterceptors: [\n    // 直接写一个 function，作为拦截器\n    (response) =>\n      {\n        // 不再需要异步处理读取返回体内容，可直接在data中读出，部分字段可在 config 中找到\n        const { data = {} as any, config } = response;\n        // do something\n        return response\n      },\n    // 一个二元组，第一个元素是 request 拦截器，第二个元素是错误处理\n    [(response) => {return response}, (error) => {return Promise.reject(error)}],\n    // 数组，省略错误处理\n    [(response) => {return response}]\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: XSwitch Proxy Configuration (json)\nDESCRIPTION: This JSON configuration provides proxy rules for the XSwitch Chrome extension. It redirects resources from a production domain to a local development server, allowing debugging of local code in a production-like environment.  It includes examples for JavaScript and CSS files, as well as using regular expressions for handling split JavaScript bundles.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxy\": [\n    // 数组的第 0 项的资源会被第 1 项目替换\n    [\n      \"https://www.myproject.com/umi.2c8a01df.js\",\n      \"http://127.0.0.1:8000/umi.js\"\n    ],\n    // 使用正则可以方便处理分包情况下 js 资源的加载\n    [\n      \"https://www.myproject.com/(.*\\.js)\",\n      \"http://127.0.0.1:8000/$1\",\n    ],\n    // 如果需要验证视觉表现，不要忘记替换 css 资源\n    [\n      \"https://www.myproject.com/umi.ae8b10e0.css\",\n      \"http://127.0.0.1:8000/umi.css\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Umi with TypeScript Hints\nDESCRIPTION: This code snippet demonstrates how to wrap the UmiJS configuration with `defineConfig()` to enable TypeScript syntax hints within the configuration file. It imports `defineConfig` from 'umi' and exports a configuration object with a basic route.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/typescript.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  routes: [\n    { path: '/', component: '@/pages/index' },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Imperative Route Navigation in UmiJS (TypeScript)\nDESCRIPTION: Demonstrates how to programmatically navigate between routes using the `history` object, including pushing new routes, replacing the current route, and navigating back.  Shows examples with and without state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { history from 'umi';\n\n// Jump to a specific route\nhistory.push('/list');\n\n// Jump to a specific route with parameters\nhistory.push('/list?a=b&c=d#anchor', state);\nhistory.push({\n    pathname: '/list',\n    search: '?a=b&c=d',\n    hash: 'anchor',\n  },\n  {\n    some: 'state-data',\n  }\n);\n\n// Jump to the current path and refresh state\nhistory.push({}, state)\n\n// Jump back to the previous route\nhistory.back();\nhistory.go(-1);\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Route Configuration with Custom Error Boundary\nDESCRIPTION: This code snippet demonstrates how to configure a route in UmiJS to load a micro-app and use a custom error boundary component. The `errorBoundary` prop accepts a function that returns a React node to display in case of an error in the micro-app.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n// .app.tsx\nimport CustomErrorBoundary from '@/components/CustomErrorBoundary';\n\nexport const qiankun = () => ({\n  routes: [\n    {\n      path: '/app1',\n      microApp: 'app1',\n      microAppProps: {\n        errorBoundary: (error) => <CustomErrorBoundary error={error} />,\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Introduce Child Apps (<MicroApp /> with Base)\nDESCRIPTION: This code snippet demonstrates how to introduce a child application with a specified base route using the `<MicroApp />` component in UmiJS.  The `name` prop specifies the registered name of the child application to load and base attribute sets the URL prefix\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" base=\"/prefix/router-path\" />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: 404 Route Configuration (JavaScript)\nDESCRIPTION: This JavaScript code shows an example of the route configuration generated when a 404 page (src/pages/404.tsx) is present.  The `path: '/*'` route catches any unmatched routes and renders the 404 component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index' },\n  { path: '/users', component: '@/pages/users' },\n  { path: '/*', component: '@/pages/404' },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS Model with State and Actions\nDESCRIPTION: This code defines a counter model using React's `useState` and `useCallback` hooks. It manages a counter state and provides increment and decrement actions. This illustrates how to incorporate state and methods into a UmiJS model.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/counterModel.ts\nimport { useState, useCallback } from 'react';\n\nexport default function Page() {\n  const [counter, setCounter] = useState(0);\n\n  const increment = useCallback(() => setCounter((c) => c + 1), []);\n  const decrement = useCallback(() => setCounter((c) => c - 1), []);\n\n  return { counter, increment, decrement };\n};\n```\n\n----------------------------------------\n\nTITLE: Using useIntl to Format Message (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the useIntl hook to access the intl object and format a message with dynamic values. The intl.formatMessage method is used to retrieve the translated message for the 'welcome' id and inject the 'name' value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIntl } from 'umi';\n\nconst intl = useIntl();\nconst msg = intl.formatMessage(\n  {\n    id: 'welcome',\n  },\n  {\n    name: 'Jackson',\n  },\n);\nconsole.log(msg);\n// Hi, Jackson.\n```\n\n----------------------------------------\n\nTITLE: Using the useRequest hook\nDESCRIPTION: Demonstrates how to use the `useRequest` hook to fetch data and handle loading and error states.  It fetches user data from an API endpoint and displays it in a component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRequest } from 'umi';\n\nexport default function Page() {\n  const { data, error, loading } = useRequest(() => {\n    return services.getUserList('/api/test');\n  });\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n  return <div>{data.name}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Route Access\nDESCRIPTION: This TypeScript code snippet shows how to configure route-based access control in UmiJS. By setting the `access` property in the route configuration to a key defined in `src/access.ts`, you can restrict access to specific routes based on user permissions. Requires the `layout` plugin to handle unauthorized access.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = [\n  {\n    path: '/pageA',\n    component: 'PageA',\n    access: 'canReadPageA', // 权限定义返回值的某个 key\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Managing URL search params with useSearchParams in UmiJS\nDESCRIPTION: Shows how to use the `useSearchParams` hook to read and modify the query string of the current URL in UmiJS, providing a way to manage URL parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { useSearchParams } from 'umi';\n\nfunction App() {\n  let [searchParams, setSearchParams] = useSearchParams();\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSearchParams(serializeFormQuery(event.target));\n  }\n  return <form onSubmit={handleSubmit}>{/* ... */}</form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using intl Object in Component Parameters (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `useIntl` hook to access the `intl` object and format messages within a React component.  The `intl.formatMessage` method is used to retrieve the translated message for the 'welcome' id. The translated message is then passed as the `message` prop to the Ant Design `Alert` component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert } from 'antd';\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  const msg = intl.formatMessage({\n    id: 'welcome',\n  });\n\n  return <Alert message={msg} type=\"success\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Response Interceptor Configuration\nDESCRIPTION: This snippet shows how to define response interceptors in the UmiJS `RequestConfig`. Response interceptors allow modifying the response before it's returned to the caller.  The example demonstrates using functions and tuples to define interceptors and error handlers.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst request: RequestConfig = {\n  responseInterceptors: [\n    // directly write a function as an interceptor\n    (response) =>\n      {\n        // No need for asynchronous processing to read response body content, can directly read from data, some fields can be found in the config\n        const { data = {} as any, config } = response;\n        // do something\n        return response\n      },\n    // a tuple, the first element is the request interceptor, the second is the error handler\n    [(response) => {return response}, (error) => {return Promise.reject(error)}],\n    // array, omitting error handler\n    [(response) => {return response}]\n  ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Umi 4 with defineConfig in TypeScript\nDESCRIPTION: This snippet demonstrates a typical configuration file (`config/config.ts`) for an Umi 4 project using TypeScript. It showcases various configuration options, including model, antd, request, initialState, mock, dva, layout, and locale settings. The defineConfig function is imported from 'umi'. The output is a configuration object that defines the project's behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, utils } from 'umi';\n\nexport default defineConfig({\n  model: {},\n  antd: {},\n  request: {},\n  initialState: {},\n  mock: {\n    include: ['src/pages/**/_mock.ts'],\n  },\n  dva: {},\n  layout: {\n    // https://umijs.org/docs/max/layout-menu#构建时配置\n    title: 'UmiJS',\n    locale: true,\n  },\n  // https://umijs.org/zh-CN/plugins/plugin-locale\n  locale: {\n    // default zh-CN\n    default: 'zh-CN',\n    antd: true,\n    // default true, when it is true, will use `navigator.language` overwrite default\n    baseNavigator: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a UmiJS Model in a Component\nDESCRIPTION: This example shows how to use a UmiJS model within a React component using the `useModel` hook.  It accesses the user data and loading state from the 'userModel' and renders the username when loading is complete.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Username/index.tsx\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { user, loading } = useModel('userModel');\n\n  return (\n    {loading ? <></>: <div>{user.username}</div>}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables and injecting into browser\nDESCRIPTION: This snippet shows how to define an environment variable `MY_TOKEN` in the `.env` file and then inject it into the browser environment through the Umi configuration file. This enables using environment variables on the client-side.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nMY_TOKEN=\"xxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Layout Plugin Configuration\nDESCRIPTION: This code snippet demonstrates how to enable the layout plugin in a UmiJS application by configuring the `layout` property within the `config/config.ts` file. This enables the Ant Design layout including navigation and sidebar.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// config/config.ts\nexport default {\n  layout: {\n    title: 'your app title',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Model Usage with Updater Function\nDESCRIPTION: This code demonstrates how to optimize component performance by using the optional updater function in `useModel`. The updater function allows you to select only the specific parts of the model that your component needs. In this example, only the `increment` and `decrement` functions from the `counterModel` are selected, preventing unnecessary re-renders when other parts of the model change.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/CounterActions/index.tsx\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { add, minus } = useModel('counterModel', (model) => ({\n    add: model.increment,\n    minus: model.decrement,\n  }));\n\n  return (\n    <div>\n      <button onClick={add}>add by 1</button>\n      <button onClick={minus}>minus by 1</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: Installs Prisma, bcryptjs, and jsonwebtoken dependencies. prisma and @prisma/client are for database interaction. bcryptjs is for password hashing. jsonwebtoken is for user authentication.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm i -d prisma @types/bcryptjs @types/jsonwebtoken\npnpm i @prisma/client bcryptjs jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switch Ant Design Theme\nDESCRIPTION: This code shows how to dynamically switch the Ant Design theme using `useAntdConfig` and `useAntdConfigSetter`. It demonstrates how to get the current configuration, modify the theme algorithm, and update the configuration using the setter function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.en-US.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Layout, Space, Button, version, theme, MappingAlgorithm } from 'antd';\nimport { useAntdConfig, useAntdConfigSetter } from 'umi';\nconst { darkAlgorithm, defaultAlgorithm } = theme;\n\nexport default function Page() {\n  const setAntdConfig = useAntdConfigSetter();\n  const antdConfig = useAntdConfig();\n  return (\n    <Layout>\n      <h1>with antd@{\n        // @ts-expect-error: implicit any\n        version\n      }</h1>\n      <Space>\n        isDarkTheme\n        <Switch\n          checked={antdConfig?.theme?.algorithm.includes(darkAlgorithm)}\n          onChange={(data) => {\n            // This configuration will deep merge with the original configuration\n            setAntdConfig({\n              theme: {\n                algorithm: [\n                  data ? darkAlgorithm : defaultAlgorithm,\n                ],\n              },\n            });\n            // or \n            setAntdConfig((config) => {\n              const algorithm = config.theme!.algorithm as MappingAlgorithm[];\n              if (algorithm.includes(darkAlgorithm)) {\n                config.theme!.algorithm = [defaultAlgorithm]\n              } else {\n                config.theme!.algorithm = [darkAlgorithm];\n              }\n              return config;\n            });\n          }}\n        ></Switch>\n      </Space>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication with Higher-Order Component (JSX)\nDESCRIPTION: Shows the implementation of an authentication check using a higher-order component (HOC) in UmiJS. This component wraps the target component and checks for user authentication status using `useAuth()`. If the user is authenticated, the wrapped component is rendered; otherwise, the user is redirected to the `/login` page using `<Navigate />`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// src/hocs/withAuth.tsx\nimport { Navigate } from 'umi'\n\nconst withAuth = (Component) => ()=>{\n  const { isLogin } = useAuth();\n  if (isLogin) {\n    return <Component />;\n  } else{\n    return <Navigate to=\"/login\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Location Hook in UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the useLocation hook from UmiJS to access the current location object. It enables performing side effects on location changes, such as page view tracking or other analytics.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLocation } from 'umi';\n\nfunction App() {\n  const location = useLocation();\n  React.useEffect(() => {\n    ga('send', 'pageview');\n  }, [location]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Routes with patchClientRoutes and Render in UmiJS\nDESCRIPTION: This example demonstrates how to dynamically update routes based on data fetched from an API.  It uses `patchClientRoutes` to modify the routes and the `render` function to trigger the route update after fetching the data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nlet extraRoutes;\n\nexport function patchClientRoutes({ routes }) {\n  // 根据 extraRoutes 对 routes 做一些修改\n  patch(routes, extraRoutes);\n}\n\nexport function render(oldRender) {\n  fetch('/api/routes')\n    .then((res) => res.json())\n    .then((res) => {\n      extraRoutes = res.routes;\n      oldRender();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in UmiJS with TypeScript\nDESCRIPTION: This configuration sets up a proxy to forward requests with the '/api' prefix to 'http://jsonplaceholder.typicode.com/'. It also rewrites the path by removing the '/api' prefix and changes the origin of the request. This is commonly used to bypass CORS restrictions during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/proxy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  proxy: {\n    '/api': {\n      'target': 'http://jsonplaceholder.typicode.com/',\n      'changeOrigin': true,\n      'pathRewrite': { '^/api' : '' },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Query Runtime Configuration\nDESCRIPTION: This code snippet illustrates the runtime configuration options for React Query, which should be defined in `src/app.ts`.  It shows how to configure the `devtool` and `queryClient` at runtime, and specifically how to set `refetchOnWindowFocus` to `false` to avoid unexpected data fetching behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\n\nimport { RuntimeReactQueryType } from 'umi';\n\nexport const reactQuery: RuntimeReactQueryType = {\n  devtool: { \n    initialIsOpen: true,\n  },\n  queryClient: {\n    defaultOptions: {\n      queries: {\n        // 🟡 此配置具有的表现往往令人出乎意料，若无特殊需求，请默认关闭\n        refetchOnWindowFocus: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Valtio Extension for Persistence\nDESCRIPTION: This snippet presents a custom implementation of `proxyWithPersist` for persistent storage of Valtio state. It retrieves data from local storage on initialization and persists changes back to local storage using `localStorage.setItem` and `JSON.stringify`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function proxyWithPersist<V>(val: V, opts: {  \n  key: string;  \n}) {  \n  const local = localStorage.getItem(opts.key);  \n  const state = proxy(local ? JSON.parse(local) : val);  \n  subscribe(state, () => {  \n    localStorage.setItem(opts.key, JSON.stringify(snapshot(state)));  \n  });\n  return state;  \n}\n```\n\n----------------------------------------\n\nTITLE: Using the request function in UmiJS\nDESCRIPTION: This snippet demonstrates how to use the `request` function in UmiJS for making HTTP requests. It shows how to pass parameters, set timeout, skip error handling, and get the full response.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrequest('/api/user', {\n  params: { name : 1 },\n  timeout: 2000,\n  // other axios options\n  skipErrorHandler: true,\n  getResponse: false,\n  requestInterceptors: [],\n  responseInterceptors: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRequest hook in UmiJS\nDESCRIPTION: This snippet demonstrates using the `useRequest` hook in a UmiJS component to fetch data. It shows how to handle loading, error, and data states. The `useRequest` hook consumes the data returned from backend's `data` field.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRequest } from 'umi';\n\nexport default function Page() {\n  const { data, error, loading } = useRequest(() => {\n    return services.getUserList('/api/test');\n  });\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n  return <div>{data.name}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using a UmiJS Model in a Component\nDESCRIPTION: This code snippet illustrates how to consume a UmiJS Model within a React component using the `useModel` hook.  The `useModel` hook takes the Model's namespace as an argument and returns the state defined in the Model.  In this example, it retrieves the `user` and `loading` states from the `userModel` and renders the username if the data is loaded.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Username/index.tsx\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { user, loading } = useModel('userModel');\n\n  return (\n    {loading ? <></>: <div>{user.username}</div>}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppData Hook in UmiJS (TypeScript)\nDESCRIPTION: This snippet shows how to access global application data using the useAppData hook from UmiJS. It provides access to routes, route components, plugin manager, and other application-level information.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useAppData(): {\n  routes: Record<id, Route>;\n  routeComponents: Record<id, Promise<React.ReactComponent>>;\n  clientRoutes: ClientRoute[];\n  pluginManager: any;\n  rootElement: string;\n  basename: string;\n  clientLoaderData: { [routeKey: string]: any };\n  preloadRoute: (to: string) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Head Scripts in UmiJS\nDESCRIPTION: This snippet shows how to configure additional scripts in the `<head>` section of the HTML.  It supports both inline scripts and external script URLs. When additional attributes are needed, switch to object format.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nheadScripts: [`alert(1);`, `https://a.com/b.js`]\n```\n\n----------------------------------------\n\nTITLE: CSS Modules with Preprocessors\nDESCRIPTION: This JSX snippet demonstrates how to use CSS Modules with LESS, SASS, and SCSS. The styles are imported with variable names (`lessStyles`, `sassStyles`, `scssStyles`), and then applied to different elements. Ensure that the necessary preprocessor dependencies are installed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport lessStyles from './index.less';\nimport sassStyles from './index.sass';\nimport scssStyles from './index.scss';\n\nexport default function () {\n  return <div className={lessStyles.title}>\n    Hello World\n    <p className={sassStyles.blue}>I am blue</p>\n    <p className={scssStyles.red}>I am red</p>\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Preprocessors in JSX\nDESCRIPTION: This JSX snippet shows how to import LESS, SASS, and SCSS files into a React component. Umi natively supports these preprocessors, so they can be imported and used directly.  Ensure the necessary preprocessor dependencies are installed (e.g., `sass` for SASS/SCSS).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport './index.less';\nimport './index.sass';\nimport './index.scss';\n\nexport default function () {\n  return <div className=\"title\">Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying UmiJS Configuration\nDESCRIPTION: This command allows modifying the UmiJS project configuration directly from the command line.  It supports setting and removing configuration values. This is useful for quickly adjusting project settings without directly editing configuration files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config set polyfill false\nset config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config remove polyfill\nremove config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration with TypeScript in UmiJS\nDESCRIPTION: This snippet demonstrates how to define an app configuration using the `defineApp` method or the `RuntimeConfig` type from UmiJS. This allows for TypeScript type checking and autocompletion when configuring runtime options like layout.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineApp } from 'umi';\nexport default defineApp({\n  layout: () => {\n    return {\n      title: 'umi',\n    };\n  },\n});\n\n// or\nimport { RuntimeConfig } from 'umi';\nexport const layout: RuntimeConfig['layout'] = () => {\n  return {\n    title: 'umi',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Register Command with Options - TypeScript\nDESCRIPTION: Demonstrates how to use `api.registerCommand` to register a command, including name, description, options, details, function (`fn`), alias, and resolveConfigMode. The `fn` parameter receives arguments parsed by `yargs`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerCommand({\n  name: string,\n  description?: string,\n  options?: string,\n  details?: string,\n  fn,\n  alias?: string | string[],\n  resolveConfigMode?: 'strict' | 'loose'\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Routes from File System (JavaScript)\nDESCRIPTION: Illustrates the route configuration that UmiJS generates based on the file structure in the `src/pages` directory.  It demonstrates how files are automatically mapped to routes based on their names and locations.  This avoids the need for manual route configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index' },\n  { path: '/users', component: '@/pages/users' },\n]\n```\n\n----------------------------------------\n\nTITLE: Using cross-env for Environment Variables - Bash\nDESCRIPTION: Demonstrates how to use `cross-env` to set environment variables in a cross-platform manner. This ensures consistency across different operating systems when setting environment variables. It first installs `cross-env` as a dev dependency and then uses it to set the `PORT` variable to `3000` before starting the Umi development server.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install cross-env -D\n$ cross-env PORT=3000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Titles for I18n in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure route titles for internationalization in UmiJS's `.umirc.ts` file. It shows how to specify a `title` property for each route, referencing keys from the multilingual files (e.g., 'site.title', 'about.title'). UmiJS will then dynamically translate these keys into the appropriate localized title based on the current locale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  title: 'site.title',\n  routes: [\n    {\n      path: '/',\n      component: 'Index',\n    },\n    {\n      path: '/about',\n      component: 'About',\n      title: 'about.title',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in UmiJS (TSX)\nDESCRIPTION: Demonstrates the usage of the `<Link>` component for declarative routing navigation. It supports relative path navigation, prefetching, and disabling routing for standard `<a href>` behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link from 'umi';\n\nfunction IndexPage({ user }) {\n  return <Link to={user.id}>{user.name}</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: React Layout Component Example\nDESCRIPTION: This JSX snippet shows how UmiJS's layout system automatically wraps pages with a global layout component defined in `layouts/index.tsx`. This component provides a consistent look and feel across all pages in the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  <Page>index</Page>\n  <Page>users</Page>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Runtime Remote Module Loading Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring remote module loading with runtime address resolution using the `keyResolver` option.  It specifies different entry points based on the environment determined by the `window.injectInfo.env` variable. Requires that `remotes[]#entry` is not configured.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\ndefineConfig({\n  mf: {\n    remotes: [\n      {\n        name: 'theMfName',\n        keyResolver: `(function(){ \n                    try { \n                        return window.injectInfo.env || 'PROD'\n                    } catch(e) { \n                        return 'PROD'} \n                    })()`,        \n        entries: {\n          PRE: 'http://pre.mf.com/remote.js',\n          PROD: 'http://produ.mf.com/remote.js',\n          TEST: 'http://test.dev.mf.com/remote.js',\n          DEV: 'http://127.0.0.1:8000/remote.js',\n        },\n      },\n    ],\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Concatenation in .env.local\nDESCRIPTION: This example demonstrates variable concatenation within a `.env.local` file. The `CONCAT` variable is created by combining the values of `FOO` and `BAR` variables.  This feature allows for more complex configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# file .env.local\nFOO=foo\nBAR=bar\n\nCONCAT=$FOO$BAR # CONCAT=foobar\n```\n\n----------------------------------------\n\nTITLE: Using Local SVG Icon in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to use local SVG icons within your UmiJS project. It requires storing SVG files in the `src/icons` directory and referencing them using the `local` prefix in the `Icon` component's `icon` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Icon icon=\"local:umi\" />\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage with defaultMessage (TSX)\nDESCRIPTION: This snippet shows how to use the FormattedMessage component with the defaultMessage prop to provide a fallback translation if the specified id is not found in the current locale.  This ensures that a default value is displayed even if the translation is missing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'antd';\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <Button type=\"primary\">\n      <FormattedMessage id=\"table.submit\" defaultMessage=\"SUBMIT TABLE\" />\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Public Path in UmiJS\nDESCRIPTION: This snippet enables runtime public path. This allows dynamically setting the public path at runtime, useful for scenarios where the application is served from different locations. The application will use `window.publicPath` as the base URL for loading assets.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nruntimePublicPath: {},\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal Navigation in UmiJS\nDESCRIPTION: This code snippet demonstrates how to use the `Link` component in UmiJS for internal navigation within a single-page application. It imports the `Link` component from `umi` and renders a link that navigates to the `/users` route when clicked. The `Link` component should only be used for internal navigations; the `a` tag should be used for external links.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'umi';\n\nexport default function Page() {\n  return (\n    <div>\n      <Link to=\"/users\">Users Page</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Application Data Injection via Props\nDESCRIPTION: This code illustrates passing props to sub-applications via the `props` option when registering a sub-application in the parent's configuration. The properties defined in `props` are passed to the sub-application's lifecycle hooks.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  apps: [\n    {\n      name: 'app1',\n      entry: '//localhost:7001',\n      props: {\n        accountOnClick: (event) => console.log(event),\n        accountName: 'Alex',\n        accountAge: 21,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Component for Authentication (JSX)\nDESCRIPTION: This JSX code snippet shows how to create a higher-order component (HOC) for authentication. It wraps the original component and checks if the user is logged in. If the user is logged in, it renders the original component; otherwise, it redirects the user to the `/login` page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// src/hocs/withAuth.tsx\nimport { Navigate } from 'umi'\n\nconst withAuth = (Component) => ()=>{\n  const { isLogin } = useAuth();\n  if (isLogin) {\n    return <Component />;\n  } else{\n    return <Navigate to=\"/login\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring monorepoRedirect with peerDeps in UmiJS\nDESCRIPTION: This snippet enables the `peerDeps` option within `monorepoRedirect` which automatically creates aliases for all peer dependencies declared in subpackages. This ensures that there is only one instance of each peer dependency, avoiding potential issues related to multiple instances of the same library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nmonorepoRedirect: { peerDeps: true }\n```\n\n----------------------------------------\n\nTITLE: Installing nvm for Node.js management\nDESCRIPTION: This command downloads and executes the nvm installation script, which is used to manage Node.js versions on macOS or Linux systems.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Request using AbortController\nDESCRIPTION: This example shows how to cancel a request using the AbortController in a React component with UmiJS. It demonstrates how to associate a signal with the request and abort it upon button click.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { request } from '@umijs/max';\nimport { Button } from 'antd';\n\nconst controller = new AbortController();\n\nconst HomePage: React.FC = () => {\n  const fetchData = async () => {\n    const res = await request('/api/getData', {\n      method: 'GET',\n      signal: controller.signal\n    })\n  }\n\n  const cancelData = () => {\n    controller.abort();\n  }\n  return (\n    <>\n      <Button onClick={fetchData}>send request</Button>\n      <Button onClick={cancelData}>cancel request</Button>\n    </>\n  );\n};\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Design in UmiJS\nDESCRIPTION: This code snippet demonstrates how to configure Ant Design within the `config/config.ts` file of a UmiJS project.  It shows the different configurations that can be set, including enabling dark and compact themes, configuring babel-plugin-import, and customizing the style, theme, and other antd-specific settings.  This is a build-time configuration using a TypeScript object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// config/config.ts\nexport default {\n  antd: {\n    // configProvider\n    configProvider: {},\n    // themes\n    dark: true,\n    compact: true,\n    // babel-plugin-import\n    import: true,\n    // less or css, default less\n    style: 'less',\n    // shortcut of `configProvider.theme`\n    // use to configure theme token, antd v5 only\n    theme: {},\n    // antd <App /> valid for version 5.1.0 or higher, default: undefined\n    appConfig: {},\n    // Transform DayJS to MomentJS\n    momentPicker: true,\n    // Add StyleProvider for legacy browsers\n    styleProvider: {\n      hashPriority: 'high',\n      legacyTransformer: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Helmet for Metadata Management in UmiJS (TSX)\nDESCRIPTION: Uses the Helmet component from react-helmet-async to dynamically manage the `<head>` section of a page, allowing for dynamic configuration of metadata tags like `<title>`.  Crucially, uses the Umi-provided Helmet for SSR compatibility.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Helmet from 'umi';\n\nexport default function Page() {\n  return (\n    <Helmet>\n      <title>Hello World</title>\n    </Helmet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: PlanetScale .env Configuration\nDESCRIPTION: Configures the .env file at the root directory with the PlanetScale database connection string.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_9\n\nLANGUAGE: dotenv\nCODE:\n```\n# .env\n\nDATABASE_URL='mysql://************:************@************.ap-southeast-2.psdb.cloud/umi-blog-example?sslaccept=strict'\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for MPA Filtering\nDESCRIPTION: This snippet shows how to filter MPA pages that are built using environment variables. By setting `MPA_FILTER` to a comma-separated list of page names, only those specified pages will be built.  This is useful for improving build times during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# file .env\n# 只会启动 bar、foo 这两个页面\nMPA_FILTER=bar,foo\n```\n\n----------------------------------------\n\nTITLE: Accessing route parameters with useParams in UmiJS\nDESCRIPTION: Demonstrates how to use the `useParams` hook to access dynamic route parameters within an UmiJS component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useParams } from 'umi';\n\n// 假设有路由配置  user/:uId/repo/:rId\n// 当前路径       user/abc/repo/def\nconst params = useParams()\n/* params\n{ uId: 'abc', rId: 'def'}\n*/\n```\n\n----------------------------------------\n\nTITLE: UmiJS chainWebpack Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use `chainWebpack` to modify the webpack configuration. It sets an alias for 'foo' to '/tmp/to/foo'. It gets the current webpack configuration as `memo`, environment info and webpack object as `args`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  chainWebpack(memo, { env, webpack }) {\n    // 设置 alias\n    memo.resolve.alias.set('foo', '/tmp/to/foo');\n\n    // 添加额外插件\n    memo.plugin('hello').use(Plugin, [...args]);\n\n    // 删除 Umi 内置插件\n    memo.plugins.delete('hmr');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Minifier Options Configuration in UmiJS\nDESCRIPTION: This snippet demonstrates configuring options for the JavaScript minifier, specifically using esbuild to minify whitespace, identifiers, and syntax. This allows to control minification process and preserve comments.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  jsMinifier: 'esbuild',\n  jsMinifierOptions: {\n    minifyWhitespace: true,\n    minifyIdentifiers: true,\n    minifySyntax: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vue Preset in UmiJS\nDESCRIPTION: This code configures UmiJS to use the Vue preset.  By adding `@umijs/preset-vue` to the presets array, UmiJS will enable Vue support, allowing you to use Vue components and routing within your UmiJS application.\nThis snippet should be added to `.umirc.ts` or `config/config.ts`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts or config/config.ts 中\nexport default {\n  presets: [require.resolve('@umijs/preset-vue')],\n};\n```\n\n----------------------------------------\n\nTITLE: Entry Structure Example\nDESCRIPTION: This example illustrates how UmiJS interprets the directory structure to define entry points for MPA builds. It maps directories containing an `index.tsx` file within the `src/pages` directory to corresponding entry points. This structure is used to generate separate HTML files for each entry.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  foo: 'src/pages/foo/index.tsx',\n  bar: 'src/pages/bar/index.tsx'\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Configuration for react-query\nDESCRIPTION: This code showcases the runtime configuration options for react-query, including customizing the devtool and setting default query options for the QueryClient. It uses the API_SERVER constant as a base URL for fetching data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst API_SERVER = '/path/to/api/server';\nexport const reactQuery = {\n  devtool: { \n    initialIsOpen: true,\n  },\n  queryClient: {\n    defaultOptions: {\n      queries: {\n        queryFn: async ({ queryKey }) => {\n          const res = await fetch(`${API_SERVER}/${queryKey.join('/')}`);\n          if (res.status !== 200) {\n            throw new Error(res.statusText);\n          }\n          return res.json();\n        }\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Route Wrappers for Authentication (JavaScript)\nDESCRIPTION: Illustrates how to use route wrappers in UmiJS to implement authentication. The `wrappers` option allows you to specify components that wrap around a route, providing additional functionality such as authentication checks. This example checks if the user is logged in before rendering the `/user` component; if not, it redirects them to `/login`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/user', component: 'user',\n      wrappers: [\n        '@/wrappers/auth',\n      ],\n    },\n    { path: '/login', component: 'login' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure additional Umi plugins in UmiJS. It shows examples of using npm dependencies, relative paths, and absolute paths to specify plugins. Relative paths are resolved from the project root directory. This configuration allows you to extend UmiJS functionality by adding custom plugins.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  // npm dependency\n  'umi-plugin-hello',\n  // relative path\n  './plugin',\n  // absolute path\n  `${__dirname}/plugin.js`,\n],\n```\n\n----------------------------------------\n\nTITLE: Connecting Component to Dva Model\nDESCRIPTION: This code snippet shows how to connect a React component to a Dva model using the `connect` decorator from `umi`. The component receives data from the `user` model as props. It requires the `umi` package. The component renders the `name` property of the `user` object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\n@connect(({ user }) => ({\n  user,\n}))\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.user.name}</div>;\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Configuring topLevelImportPaths for Babel plugin\nDESCRIPTION: This code snippet demonstrates how to configure the `topLevelImportPaths` option for the styled-components Babel plugin when importing `styled` from a source other than `umi` or `@umijs/max`. This allows the plugin to recognize and process styled-components from custom import paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {\n    babelPlugin: {\n      topLevelImportPaths: ['alita']\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useModel Hook with an Updater Function\nDESCRIPTION: This code snippet illustrates using the `useModel` hook with an updater function to select specific parts of the model. It retrieves `user` and `fetchUser` from the `adminModel` and assigns them to `user` and `fetchUser` respectively. The updater function allows selective retrieval of model properties.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/AdminInfo/index.tsx\nimport { useModel } from 'umi';\n\nexport default () => {\n  const { user, fetchUser } = useModel('adminModel', (model) => ({\n    user: model.admin,\n    fetchUser: model.fetchAdmin,\n  }));\n\n  return <>hello</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Extended Route Configuration in UmiJS\nDESCRIPTION: This snippet shows an example of extended route configuration in UmiJS. It demonstrates how to configure various properties such as `path`, `component`, `name`, `icon`, `target`, `headerRender`, `footerRender`, `menuRender`, `menuHeaderRender`, `access`, `hideChildrenInMenu`, `hideInMenu`, `hideInBreadcrumb`, and `flatMenu` to customize the behavior and appearance of routes within the layout.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config/route.ts\nexport const routes: IBestAFSRoute[] = [\n  {\n    path: '/welcome',\n    component: 'IndexPage',\n    name: 'Welcome', // This notation is compatible\n    icon: 'testicon',\n    // For more features see\n    // https://beta-pro.ant.design/docs/advanced-menu\n    // ---\n    // Open in a new page\n    target: '_blank',\n    // Don't show the top bar\n    headerRender: false,\n    // Don't show the footer\n    footerRender: false,\n    // Don't show the menu\n    menuRender: false,\n    // Don't show the menu header\n    menuHeaderRender: false,\n    // Permission configuration, needs to be used with the plugin-access\n    access: 'canRead',\n    // Hide submenu\n    hideChildrenInMenu: true,\n    // Hide self and submenu\n    hideInMenu: true,\n    // Hide in breadcrumb\n    hideInBreadcrumb: true,\n    // Sub-items up, still displayed,\n    flatMenu: true,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling clientLoader in UmiJS Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the `clientLoader` feature within the UmiJS configuration file.  By adding the `clientLoader: {}` option to the configuration, Umi will automatically handle pre-loading data for routes that define a `clientLoader` function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/client-loader.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  clientLoader: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Mock File with Different HTTP Methods\nDESCRIPTION: Example Mock file demonstrating how to handle different HTTP request methods (POST, PUT).  This shows how to define Mock endpoints for creating or updating resources. Each method is associated with a specific API endpoint and a corresponding Mock response.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  'POST /api/users': { result: 'true' },\n\n  'PUT /api/users/1': { id: 1, name: 'new-foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage with Values - TypeScript\nDESCRIPTION: Demonstrates how to use the `<FormattedMessage />` component with the `values` prop to dynamically insert values into a translated string.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <p>\n      <FormattedMessage id=\"user.welcome\" values={{ name: '张三' }} />\n    </p>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Global Initial State in a Component\nDESCRIPTION: This demonstrates how to access the global initial state within a component using `useModel('@@initialState')`.  It retrieves the initial state, loading status, error, and refresh function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { initialState, loading, error, refresh, setInitialState } =\n    useModel('@@initialState');\n  return <>{initialState}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Sub-Routes with Outlet (JSX)\nDESCRIPTION: This JSX code snippet shows how to render sub-routes within a layout component using the `Outlet` component from UmiJS.  The `Outlet` component acts as a placeholder where the content of the sub-routes will be rendered. This allows for dynamic content injection into the layout.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'umi'\n\nexport default function Page() {\n  return (\n    <div style={{ padding: 20 }}> \n      <Outlet/> \n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Outlet Component in UmiJS (TSX)\nDESCRIPTION: This snippet demonstrates how to use the Outlet component from UmiJS to render child routes within a parent route. It allows creating nested layouts and passing context to child routes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Outlet } from 'umi';\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Outlet />\n    </div>\n  );\n}\n\nfunction DashboardWithContext() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Outlet context={{ prop: 'a' }}/>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Config Changes (Umi 3 to 4)\nDESCRIPTION: Highlights the differences in runtime configuration between UmiJS 3 and UmiJS 4, specifically regarding `errorConfig`, `middlewares`, and the addition of `errorHandler` and `errorThrower`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n    export const request: RequestConfig = {\n      errorConfig: {\n++      errorHandler: () => {},\n++      errorThrower: () => {}\n--      errorPage: '',\n--      adaptor: ()=>{},\n      };\n--    middlewares: [],\n++    requestInterceptors: [],\n++    responseInterceptors: [],\n      ... // umi-request 和 axios 的区别。\n    };\n```\n\n----------------------------------------\n\nTITLE: Exposing Environment Variables to the Browser - TypeScript\nDESCRIPTION: Shows how to expose environment variables to the browser environment using the `define` configuration option in the `.umirc.ts` file. This allows you to access environment variables in your client-side code. It shows setting up the `define` option to inject MY_TOKEN into `process.env.MY_TOKEN`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\n  define: { 'process.env.MY_TOKEN': process.env.MY_TOKEN }\n```\n\n----------------------------------------\n\nTITLE: Configure externals in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to configure external modules using the `externals` option in UmiJS.  This prevents bundling specified modules and instead relies on them being provided via `<script>` tags or other means.  It's typically used in conjunction with the `headScripts` option to load the external libraries.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// external react\nexternals: { react: 'React' },\nheadScripts: ['https://unpkg.com/react@17.0.1/umd/react.production.min.js'],\n```\n\n----------------------------------------\n\nTITLE: Configure CSS Modules with camelCase export in UmiJS (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the `cssLoaderModules` option to modify the behavior of CSS Modules in UmiJS.  Here it's configured to use camelCase for exporting CSS class names to JavaScript.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncssLoaderModules: {\n  // Configure to use camelCase\n  exportLocalsConvention: 'camelCase'\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS cacheDirectoryPath Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the cache directory path.  It changes the default cache location from `node_modules/.cache` to `node_modules/.cache1`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 更改缓存文件路径到 node_modules/.cache1 文件夹\ncacheDirectoryPath: 'node_modules/.cache1',\n```\n\n----------------------------------------\n\nTITLE: Configuring the Mount Element ID in UmiJS\nDESCRIPTION: This snippet sets the `mountElementId` option to specify the HTML element ID where the React component tree will be rendered. By default, it's set to 'root'. This configuration changes the target element to 'container'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nmountElementId: 'container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases with Absolute Paths in JavaScript\nDESCRIPTION: This snippet demonstrates how to correctly configure aliases in UmiJS by using absolute paths and `require.resolve`. It maps the alias 'foo' to the absolute path of the 'foo' module.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌\n{\n  alias: {\n    foo: 'foo',\n  }\n}\n\n// ✅\n{\n  alias: {\n    foo: require.resolve('foo'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling styled-components in Umi Max (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable styled-components in a Umi Max project by configuring the `styledComponents` option in the `umi.config.ts` or `.umirc.ts` file.  The empty object enables the default behavior of the plugin. This configuration is a prerequisite for using styled-components within the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Create UmiJS project with NPM\nDESCRIPTION: This command uses `npx` to execute the `create-umi` tool, prompting the user to install `create-umi` if it's not already installed, and then creating a new UmiJS project. It initializes the project structure.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-umi@latest\nNeed to install the following packages:\n  create-umi@latest\nOk to proceed? (y) y\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › npm\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy:  src/assets/yay.jpg\nCopy:  src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy:  src/pages/docs.tsx\nCopy:  src/pages/index.tsx\nWrite: tsconfig.json\nCopy:  typings.d.ts\n\n> postinstall\n> umi setup\n```\n\n----------------------------------------\n\nTITLE: Enabling Valtio in UmiJS\nDESCRIPTION: This code snippet demonstrates how to enable Valtio within a UmiJS project by adding a `valtio` configuration object in the `export default` configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  valtio: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Using Outlet for Nested Routes in UmiJS (TS)\nDESCRIPTION: Demonstrates the usage of `<Outlet>` to render child routes within a parent route. If the parent route matches exactly, it renders the index route of the child routes (if any). It also shows how to pass context to child components via the Outlet.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Outlet from 'umi';\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Outlet />\n    </div>\n  );\n}\n\nfunction DashboardWithContext() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Outlet context={{ prop: 'a' }}/>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React Compiler (Forget) in UmiJS\nDESCRIPTION: This snippet demonstrates how to enable the React Compiler (React Forget) functionality in UmiJS. It requires react 19 or later. It's incompatible with mfsu and mako.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nforget: {\n  ReactCompilerConfig: {},\n},\n```\n\n----------------------------------------\n\nTITLE: Using formatMessage with defaultMessage (TSX)\nDESCRIPTION: This snippet shows how to use the intl.formatMessage method with the defaultMessage option to provide a fallback translation if the specified id is not found in the current locale. This ensures that a default value is displayed even if the translation is missing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'antd';\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  const msg = intl.formatMessage({\n    id: 'table.submit',\n    defaultMessage: 'SUBMIT TABLE',\n  });\n\n  return <Button type=\"primary\">{msg}</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configure crossorigin attribute for scripts in UmiJS\nDESCRIPTION: This snippet shows how to configure the `crossorigin` option in UmiJS to add the `crossorigin=\"anonymous\"` attribute to script tags.  This is useful for enabling CORS for scripts loaded from different origins.  The `includes` parameter allows you to specify additional scripts to which the attribute should be added.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncrossorigin: {}\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Route Configuration with autoSetLoading\nDESCRIPTION: This code snippet demonstrates how to configure a route in UmiJS to load a micro-app and automatically display a loading animation using the `autoSetLoading` property when using Ant Design.  The `autoSetLoading` prop enables the built-in loading indicator while the sub-application loads.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    {\n      path: '/app1',\n      microApp: 'app1',\n      microAppProps: {\n        autoSetLoading: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a UmiJS Model with ahooks\nDESCRIPTION: This example demonstrates fetching data within a UmiJS model using the `ahooks` library's `useRequest` hook. The `useRequest` hook simplifies the process of making asynchronous requests and managing loading and error states. The return value of `useRequest` is destructured to obtain the `user` data and `loading` state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nimport { useRequest } from 'ahooks';\nimport { getUser } from '@/services/user';\n\nexport default function Page() {\n  const { data: user, loading: loading } = useRequest(async () => {\n    const res = await getUser();\n    if (res) {\n      return res;\n    }\n    return {};\n  });\n\n  return {\n    user,\n    loading,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling styled-components in Umi (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable styled-components in a standard Umi project. It requires the `@umijs/plugins` package to be installed. The `plugins` array specifies the styled-components plugin, and the `styledComponents` object configures the plugin.  This configuration activates styled-components support for the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: ['@umijs/plugins/dist/styled-components'],\n  styledComponents: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Remote Modules\nDESCRIPTION: This code snippet shows how to configure the plugin to expose the current project as a remote module. It sets the `name` property to define the module's name. It's important that configured module name must be a valid Javascript variable name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n// 提取变量是为了和 MFSU 配合使用保持配置一致\nconst remoteMFName = 'remoteMFName';\n\ndefineConfig({\n  mf: {\n    name: remoteMFName,\n\n    // 可选，远端模块库类型, 如果模块需要在乾坤子应用中使用建议配置示例的值，\n    // 注意这里的 name 必须和最终 MF 模块的 name 一致\n    // library: { type: \"window\", name: \"exportMFName\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Child App Lifecycle Configuration - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure lifecycle hooks in a child application. It exports a `qiankun` object in `src/app.ts` with `bootstrap`, `mount`, and `unmount` hooks. These hooks allow you to execute custom logic at different stages of the child application's lifecycle. Requires UmiJS and Qiankun setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  // Before the application loads\n  async bootstrap(props) {\n    console.log('app1 bootstrap', props);\n  },\n  // Triggered before the application render\n  async mount(props) {\n    console.log('app1 mount', props);\n  },\n  // Triggered after the application unmounts\n  async unmount(props) {\n    console.log('app1 unmount', props);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Initial State in UmiJS\nDESCRIPTION: This code illustrates how to fetch initial data using the `getInitialState` function in UmiJS. The fetched data becomes the global initial state accessible through `useModel('@@initialState')`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport { fetchInitialData } from \"@/services/initial\";\n\nexport async function getInitialState() {\n  const initialData = await fetchInitialData();\n  return initialData;\n}\n```\n\n----------------------------------------\n\nTITLE: Using NavLink Component in UmiJS (TSX)\nDESCRIPTION: This snippet demonstrates how to use the NavLink component from UmiJS to create navigation links that are aware of their active state. It shows different ways to style the active state using style, className, and children props.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavLink } from 'umi';\n\nfunction Navs() {\n  return <ul>\n    <li><NavLink to=\"message\" style={({ isActive }) => isActive ? { color: 'red' } : undefined}>Messages</NavLink></li>\n    <li><NavLink to=\"tasks\" className={({ isActive }) => isActive ? 'active' : undefined}>Tasks</NavLink></li>\n    <li><NavLink to=\"blog\">{({ isActive }) => <span className={isActive ? 'active' : undefined}>Blog</span>}</NavLink></li>\n  </ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Wrapper Component (JSX)\nDESCRIPTION: Shows the implementation of an authentication wrapper component in UmiJS. This component checks if the user is logged in using `useAuth()` hook. If the user is authenticated, it renders the child route using `<Outlet />`; otherwise, it redirects them to the `/login` page using `<Navigate />`. This component encapsulates the authentication logic and keeps the route configuration clean.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navigate, Outlet } from 'umi'\n\nexport default (props) => {\n  const { isLogin } = useAuth();\n  if (isLogin) {\n    return <Outlet />;\n  } else{\n    return <Navigate to=\"/login\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Child App Consumes Data with useModel - React/TSX\nDESCRIPTION: This code snippet shows how a child application consumes data passed from the parent application using the `useModel` hook provided by UmiJS. It imports `useModel` from 'umi' and uses it to retrieve the data passed by the parent application from the global Model `@@qiankunStateFromMaster`. The retrieved data is then displayed as a JSON string within the component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const masterProps = useModel('@@qiankunStateFromMaster');\n  return <div>{JSON.stringify(masterProps)}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pro Table Package\nDESCRIPTION: This command installs the @ant-design/pro-table package, which provides an enhanced table component for quickly building interactive tables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/pro-table\n```\n\n----------------------------------------\n\nTITLE: Customize Access Denied Page\nDESCRIPTION: This TypeScript code snippet demonstrates how to customize the access denied and not found pages in UmiJS using the `layout` configuration in `src/app.tsx`. You can define custom React components to be displayed when a user lacks the necessary permissions or when a page is not found.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const layout: RunTimeLayoutConfig = () => {\n  return {\n    // 自定义 403 页面\n    unAccessible: <div>'unAccessible'</div>,\n    // 自定义 404 页面\n    noFound: <div>'noFound'</div>,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: MicroAppLink Navigation (App2) - React/TSX\nDESCRIPTION: This code snippet demonstrates how to use the MicroAppLink component in a child application (app2) to navigate to a route within another child application (app1). It imports MicroAppLink from umi and defines a functional component that renders a button. Clicking the button navigates the parent application to '/app1/project/home', rendering the specified route within app1.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// In app2\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* The jump link is /app1/project/home */}\n      <MicroAppLink name=\"app1\" to=\"/home\">\n        <Button>go to app1</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS clientLoader Usage (JSX)\nDESCRIPTION: This snippet demonstrates how to use `useClientLoaderData` and `clientLoader` in a route component. It fetches data from '/api/data' and renders it.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/.../some_page.tsx\n\nimport { useClientLoaderData } from 'umi';\n\nexport default function SomePage() {\n  const { data } = useClientLoaderData();\n  return <div>{data}</div>;\n}\n\nexport async function clientLoader() {\n  const data = await fetch('/api/data');\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the resolvePath function from UmiJS to resolve a relative or absolute path. It provides a normalized path object with pathname, search, and hash components, simulating client-side route resolution.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// 同级相对跳转，返回 { pathname: '/parent/child', search: '', hash: '' }\nresolvePath('child', '/parent');\nresolvePath('./child', '/parent');\nresolvePath('', '/parent/child');\nresolvePath('.', '/parent/child');\n\n// 祖先层级相对跳转，返回 { pathname: '/parent/sibling', search: '', hash: '' }\nresolvePath('../sibling', '/parent/child');\nresolvePath('../../parent/sibling', '/other/child');\n\n// 绝对跳转，返回 { pathname: '/target', search: '', hash: '' }\nresolvePath('/target', '/parent');\nresolvePath('/target', '/parent/child');\n\n// 携带 search 和 hash 跳转，返回 { pathname: '/params', search: '?a=b', hash: '#c' }\nresolvePath('/params?a=b#c', '/prev');\n```\n\n----------------------------------------\n\nTITLE: Extended Route Configuration\nDESCRIPTION: This code illustrates how to configure routes with extended layout options, including name, icon, target, and rendering flags for header, footer, and menu. It also demonstrates access control configuration with the `plugin-access` plugin. The `IBestAFSRoute` type is assumed to be defined elsewhere.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config/route.ts\nexport const routes: IBestAFSRoute[] = [\n  {\n    path: '/welcome',\n    component: 'IndexPage',\n    name: '欢迎', // 兼容此写法\n    icon: 'testicon',\n    // 更多功能查看\n    // https://beta-pro.ant.design/docs/advanced-menu\n    // ---\n    // 新页面打开\n    target: '_blank',\n    // 不展示顶栏\n    headerRender: false,\n    // 不展示页脚\n    footerRender: false,\n    // 不展示菜单\n    menuRender: false,\n    // 不展示菜单顶栏\n    menuHeaderRender: false,\n    // 权限配置，需要与 plugin-access 插件配合使用\n    access: 'canRead',\n    // 隐藏子菜单\n    hideChildrenInMenu: true,\n    // 隐藏自己和子菜单\n    hideInMenu: true,\n    // 在面包屑中隐藏\n    hideInBreadcrumb: true,\n    // 子项往上提，仍旧展示,\n    flatMenu: true,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using SelectLang Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the SelectLang component from Umi to add a language selection dropdown to your application. It allows users to switch between different locales.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SelectLang } from 'umi';\n\nexport default function Page() {\n  return <SelectLang />;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Mock via Config\nDESCRIPTION: This snippet shows how to disable the Mock feature in UmiJS through the configuration file. Setting the `mock` option to `false` in `.umirc.ts` will disable the mock functionality.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  mock: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Specific Files with Aliases in JavaScript\nDESCRIPTION: This snippet demonstrates how to avoid mapping subpaths by adding a `$` suffix to the alias.  With the first example, `import 'foo/bar'` will be mapped to `import '/tmp/to/foo/bar'`. In the second example, only `foo` is aliased, so `import 'foo/bar'` will still be `import 'foo/bar'`. \nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import 'foo/bar' will be mapped to import '/tmp/to/foo/bar'\n{\n  alias: {\n    foo: '/tmp/to/foo',\n  }\n}\n\n// import 'foo/bar' will still be import 'foo/bar', and won't be modified\n{\n  alias: {\n    foo$: '/tmp/to/foo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Example in UmiJS\nDESCRIPTION: This code snippet demonstrates a basic UmiJS plugin that modifies the favicons based on a user-configured value.  It uses the `api.describe` to define the config schema and `api.modifyConfig` to modify the configuration. The plugin is enabled by configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  api.describe({\n    key: 'changeFavicon',\n    config: {\n      schema(joi) {\n        return joi.string();\n      },\n    },\n    enableBy: api.EnableBy.config\n  });\n  api.modifyConfig((memo)=>{\n    memo.favicons = api.userConfig.changeFavicon;\n    return memo;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Valtio Actions and Async Actions\nDESCRIPTION: This example shows two ways to define actions for updating Valtio state: combining them with the state proxy or defining them separately.  It also demonstrates an asynchronous action using `fetch`. Requires importing `proxy` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// Method one: Combine\nconst state = proxy({\n  count: 0,\n  actions: {\n\t  add() {\n\t    // Note, do not use this.count, will error when called based on snap\n\t    state.count += 1;\n\t  },\n  }\n});\n// Method two: Separate\nconst state = proxy({ count: 0 });\nconst actions = {\n  add() {\n    state.count += 1;\n  },\n  // Async action\n  async addAsync() {\n    state.count += await fetch('/api/add');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enable icons autoInstall in UmiJS\nDESCRIPTION: Enable icons autoInstall in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nicons: { autoInstall: {} },\n```\n\n----------------------------------------\n\nTITLE: Use Navigate Hook Path Jump Example Typescript\nDESCRIPTION: Demonstrates using the `useNavigate` hook to navigate to a specified path. It shows how to navigate to \"../success\" and replace the current entry in the history stack.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigate } from 'umi';\n\nlet navigate = useNavigate();\nnavigate(\"../success\", { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Generate UmiJS Page File\nDESCRIPTION: This command generates a new page file with specified options.  It allows the user to specify name, TypeScript support, and LESS stylesheet support. It allows generating new routes and related files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# 生成路由文件\n$ umi g page index --typescript --less\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Direct)\nDESCRIPTION: This command directly generates a page named 'foo' with default TypeScript and Less files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo\n```\n\n----------------------------------------\n\nTITLE: UmiJS MF Plugin Configuration\nDESCRIPTION: This code snippet demonstrates the configuration of the Module Federation plugin within a UmiJS project. It defines the `name` for the remote module, a list of `remotes` with their respective `name` and `entry` points, and `shared` dependencies, including `react` and `react-dom`, configured as singletons and eager-loaded. The configuration is intended to be placed in the `.umirc.ts` file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default defineConfig({\n  mf: {\n    name: 'remoteMFName',\n    remotes: [\n      {\n        name: 'remote1',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n      {\n        aliasName: 'aliasRemote',\n        name: 'remote2',\n        entry: 'https://to.the.remote.com/remote2.js',\n      },\n    ],\n    shared: {\n      react: {\n        singleton: true,\n        eager: true,\n      },\n      'react-dom': {\n        singleton: true,\n        eager: true,\n      },\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: UmiJS Request Runtime Configuration\nDESCRIPTION: This TypeScript code defines a comprehensive runtime configuration for handling HTTP requests in a UmiJS application. It includes configurations for request timeout, headers, error handling, request interception, and response interception.  It configures a request object with settings for request timeout, headers, and interceptors. It also provides a detailed error handling scheme, including an error thrower and an error handler.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestConfig } from './request';\n\n// 错误处理方案： 错误类型\nenum ErrorShowType {\n  SILENT = 0,\n  WARN_MESSAGE = 1,\n  ERROR_MESSAGE = 2,\n  NOTIFICATION = 3,\n  REDIRECT = 9,\n}\n// 与后端约定的响应数据格式\ninterface ResponseStructure {\n  success: boolean;\n  data: any;\n  errorCode?: number;\n  errorMessage?: string;\n  showType?: ErrorShowType;\n}\n\n// 运行时配置\nexport const request: RequestConfig = {\n  // 统一的请求设定\n  timeout: 1000,\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // 错误处理： umi@3 的错误处理方案。\n  errorConfig: {\n    // 错误抛出\n    errorThrower: (res: ResponseStructure) => {\n      const { success, data, errorCode, errorMessage, showType } = res;\n      if (!success) {\n        const error: any = new Error(errorMessage);\n        error.name = 'BizError';\n        error.info = { errorCode, errorMessage, showType, data };\n        throw error; // 抛出自制的错误\n      }\n    },\n    // 错误接收及处理\n    errorHandler: (error: any, opts: any) => {\n      if (opts?.skipErrorHandler) throw error;\n      // 我们的 errorThrower 抛出的错误。\n      if (error.name === 'BizError') {\n        const errorInfo: ResponseStructure | undefined = error.info;\n        if (errorInfo) {\n          const { errorMessage, errorCode } = errorInfo;\n          switch (errorInfo.showType) {\n            case ErrorShowType.SILENT:\n              // do nothing\n              break;\n            case ErrorShowType.WARN_MESSAGE:\n              message.warn(errorMessage);\n              break;\n            case ErrorShowType.ERROR_MESSAGE:\n              message.error(errorMessage);\n              break;\n            case ErrorShowType.NOTIFICATION:\n              notification.open({\n                description: errorMessage,\n                message: errorCode,\n              });\n              break;\n            case ErrorShowType.REDIRECT:\n              // TODO: redirect\n              break;\n            default:\n              message.error(errorMessage);\n          }\n        }\n      } else if (error.response) {\n        // Axios 的错误\n        // 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围\n        message.error(`Response status:${error.response.status}`);\n      } else if (error.request) {\n        // 请求已经成功发起，但没有收到响应\n        // \\`error.request\\` 在浏览器中是 XMLHttpRequest 的实例，\n        // 而在node.js中是 http.ClientRequest 的实例\n        message.error('None response! Please retry.');\n      } else {\n        // 发送请求时出了点问题\n        message.error('Request error, please retry.');\n      }\n    },\n\n  },\n\n  // 请求拦截器\n  requestInterceptors: [\n    (config) => {\n    // 拦截请求配置，进行个性化处理。\n      const url = config.url.concat('?token = 123');\n      return { ...config, url};\n    }\n  ],\n\n  // 响应拦截器\n  responseInterceptors: [\n    (response) => {\n       // 拦截响应数据，进行个性化处理\n       const { data } = response;\n       if(!data.success){\n         message.error('请求失败！');\n       }\n       return response;\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Antd Plugin in Umi Config (Typescript)\nDESCRIPTION: This code snippet shows how to enable the antd plugin in your Umi application by configuring the `.umirc.ts` file. The `plugins` array specifies the plugins to load, and the `antd` object can contain configuration options for the antd plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-plugins.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  plugins: ['@umijs/plugins/dist/antd'],\n  antd: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing context with useOutletContext in UmiJS\nDESCRIPTION: Illustrates how to use `useOutletContext` to pass and consume context data between a layout component and its child routes in UmiJS, demonstrating data sharing between components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOutletContext, Outlet } from 'umi';\n\nconst Layout = () => {\n  return <div className=\"fancyLayout\">\n    <Outlet context={{ prop: 'from Layout'}} />\n  </div>\n}\n\nconst SomeRouteComponentUnderLayout = () => {\n  const layoutContext = useOutletContext();\n\n  return JSON.stringify(layoutContext)   // {\"prop\":\"from Layout\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock.js in Mock Files\nDESCRIPTION: Example of using Mock.js to generate realistic Mock data. This shows how to import Mock.js and use its functions to create dynamic and random data for API responses, enhancing the authenticity of the Mock data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport mockjs from 'mockjs';\n\nexport default {\n  // 使用 mockjs 等三方库\n  'GET /api/tags': mockjs.mock({\n    'list|100': [{ name: '@city', 'value|1-100': 50, 'type|0-2': 1 }],\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling styled-components in @umijs/max\nDESCRIPTION: This code snippet shows how to enable styled-components in a @umijs/max project by configuring the `styledComponents` option in the main configuration file. It allows you to use styled-components for styling React components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Render for Authentication in UmiJS\nDESCRIPTION: This snippet demonstrates how to override the `render` function to perform authentication before rendering the application. It fetches authentication status from an API and redirects to the login page if not authenticated.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport function render(oldRender) {\n  fetch('/api/auth').then(auth => {\n    if (auth.isLogin) { oldRender() }\n    else {\n      location.href = '/login';\n      oldRender()\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Use Location Hook Definition Typescript\nDESCRIPTION: Defines the `useLocation` hook, which returns the current location object, including pathname, search, state, and key. This hook is useful for performing side effects when the location changes, such as page view statistics.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocation(): {\n  pathname: string;\n  search: string;\n  state: unknown;\n  key: Key;\n};\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Outlet (TypeScript/JSX)\nDESCRIPTION: Shows how to define a layout component in UmiJS that uses the `<Outlet/>` component to render child routes. The layout component provides a consistent structure and UI around the content of the child routes, ensuring a unified user experience across multiple pages. This example demonstrates a simple layout with padding.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'umi'\n\nexport default function Page() {\n  return (\n    <div style={{ padding: 20 }}> \n      <Outlet/> \n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Installed Plugin (JavaScript)\nDESCRIPTION: This example illustrates how to configure an installed plugin (umi-plugin-bar) through its key in the Umi configuration. In this case, bar is the key.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  bar: { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: React Test: Greet Snapshot\nDESCRIPTION: This test case uses Jest snapshot testing to ensure that the `Greet` component renders correctly without a name prop. It renders the component and compares the rendered output against a previously stored snapshot.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\nimport { render } from '@testing-library/react';\nimport React from 'react';\nimport Greet from './Greet';\n\ntest('renders Greet without name by snapshot', () => {\n  const { container } = render(<Greet />);\n  expect(container).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scripts with Attributes in UmiJS\nDESCRIPTION: This snippet configures additional script tags to be added to the `<body>` of the HTML. It demonstrates how to add attributes to script tags using the object format.  The `src` attribute specifies an external script URL, and the `defer` attribute indicates that the script should be executed after the HTML is parsed.  The `content` attribute specifies an inline script.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nscripts: [\n  { src: '/foo.js', defer: true },\n  { content: `alert('你好');`, charset: 'utf-8' },\n],\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a UmiJS Model\nDESCRIPTION: This code shows an example of fetching user data from an API within a UmiJS Model.  It uses the `useState` hook to manage the user data and loading state. The `useEffect` hook is used to call the `getUser` function (assumed to be defined elsewhere) when the component mounts, updating the state with the fetched data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nimport { useState } from 'react';\nimport { getUser } from '@/services/user';\n\nexport default function Page() {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getUser().then((res) => {\n      setUser(res);\n      setLoading(false);\n    });\n  }, []);\n\n  return {\n    user,\n    loading,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enable TypeScript type checking in UmiJS\nDESCRIPTION: Enable TypeScript type checking. Based on fork-ts-checker-webpack-plugin, configuration options can be found in [fork-ts-checker-webpack-plugin's Options](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin#options).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nforkTSChecker: {\n  // options\n}\n```\n\n----------------------------------------\n\nTITLE: Configure dataField at build time\nDESCRIPTION: This code snippet shows how to configure the `dataField` option within the `request` configuration in the `umi` build-time configuration.  The `dataField` option specifies the property in the response data that should be extracted and returned by `useRequest`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  request: {\n    dataField: 'data'\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Modify Husky pre-commit hook\nDESCRIPTION: Modify the `.husky/pre-commit` file to run `lint-staged` before each commit. This ensures that only valid code is committed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\n- npm test\n+ npx lint-staged\n```\n\n----------------------------------------\n\nTITLE: Accessing Location in UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the current location object using the useLocation hook from UmiJS, along with accessing location information directly from the window object outside React components and hooks. It shows how to retrieve pathname, search, and hash components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 建议组件或 hooks 里用 useLocation 取\nimport { useLocation } from 'umi';\nexport default function Page() {\n  let location = useLocation();\n  return (\n    <div>\n     { location.pathname }\n     { location.search }\n     { location.hash }\n    </div>\n  );\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// location 对象，包含 pathname、search 和 hash\nwindow.location.pathname;\nwindow.location.search;\nwindow.location.hash;\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Initial State in UmiJS\nDESCRIPTION: This example shows how to access the global initial state within a UmiJS component using the `useModel('@@initialState')` hook.  The hook returns an object containing the `initialState`, `loading`, `error`, `refresh`, and `setInitialState` properties, allowing components to interact with and manage the global initial state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { initialState, loading, error, refresh, setInitialState } =\n    useModel('@@initialState');\n  return <>{initialState}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration File\nDESCRIPTION: This JavaScript snippet represents a `unocss.config.ts` file, which configures UnoCSS with presetAttributify and presetUno. It defines a `createConfig` function that accepts options for strict mode and development mode, allowing custom configuration of UnoCSS behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// unocss.config.ts\n\nimport {defineConfig, presetAttributify, presetUno} from 'unocss';\n\nexport function createConfig({strict = true, dev = true} = {}) {\n  return defineConfig({\n    envMode: dev ? 'dev' : 'build', presets: [presetAttributify({strict}), presetUno()],\n  });\n}\n\nexport default createConfig(); \n```\n\n----------------------------------------\n\nTITLE: Testing Component Behavior with React Testing Library (TSX)\nDESCRIPTION: This test case uses React Testing Library to simulate a click event on the `Greet` component and verify that the `onClick` prop is called. It renders the component, finds the element containing 'hello', simulates a click, and asserts that the `onClick` function is called once.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\n\ntest('Greet click', async () => {\n  const onClick = jest.fn();\n  const { container } = render(<Greet onClick={onClick} />);\n\n  const greetDom = screen.getByText('Anonymous');\n  await fireEvent.click(screen.getByText(/hello/i));\n\n  expect(onClick).toBeCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Start UmiJS Development Server\nDESCRIPTION: This command starts the local development server for the UmiJS project. It enables hot reloading and other development features. It provides local and network addresses for accessing the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ umi dev\n```\n\n----------------------------------------\n\nTITLE: Sub-application Consuming Data via useModel\nDESCRIPTION: This code demonstrates how a sub-application accesses data provided by the parent application using the `useModel` hook.  The `@@qiankunStateFromMaster` namespace provides access to the parent's provided data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const masterProps = useModel('@@qiankunStateFromMaster');\n  return <div>{JSON.stringify(masterProps)}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useAccess Hook (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useAccess` hook in a component to access the permission definitions from `src/access.ts`.  The hook returns an object containing the defined permissions, allowing you to conditionally render content or control component behavior based on user permissions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useAccess } from 'umi';\n\nconst PageA = (props) => {\n  const { foo } = props;\n  the access = useAccess();\n\n  if (access.canReadFoo) {\n    // If can read Foo, then...\n  }\n\n  return <>TODO</>;\n};\n\nexport default PageA;\n```\n\n----------------------------------------\n\nTITLE: UMI_PLUGINS Environment Variable Usage - Bash\nDESCRIPTION: Shows how to specify additional Umi plugins to load at runtime using the `UMI_PLUGINS` environment variable. This allows you to extend Umi's functionality by providing custom plugin paths separated by commas.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ UMI_PLUGINS=./path/to/plugin1,./path/to/plugin2  umi dev\n```\n\n----------------------------------------\n\nTITLE: Using intl object in Component Parameters - TypeScript\nDESCRIPTION: Demonstrates how to use the `useIntl` hook to access the `intl` object and format a message using `intl.formatMessage`.  This allows using the translated string as a parameter to a component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alert } from 'antd';\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  const msg = intl.formatMessage({\n    id: 'welcome',\n  });\n\n  return <Alert message={msg} type=\"success\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configure lint-staged\nDESCRIPTION: Configure lint-staged in `package.json` to run `umi lint` on staged JavaScript, TypeScript, CSS, and Less files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n{\n+   \"lint-staged\": {\n+     \"*.{js,jsx,ts,tsx,css,less}\": [\n+       \"umi lint\"\n+     ]\n+   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: This snippet demonstrates the changes required in the `package.json` file to upgrade from Umi 3 and @umijs/preset-react to @umijs/max version 4. It involves adding `@umijs/max` and removing the old `umi` and `@umijs/preset-react` dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n+   \"@umijs/max\": \"^4.0.0\",\n-   \"umi\": \"^3.0.0\",\n-   \"@umijs/preset-react\": \"^1.2.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useAccess Hook\nDESCRIPTION: This JavaScript code demonstrates how to use the `useAccess` hook in a React component to access the defined permissions.  The hook returns an object containing the permissions defined in `src/access.ts`, allowing you to control component rendering and functionality based on user access levels.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useAccess } from 'umi';\n\nconst PageA = (props) => {\n  const { foo } = props;\n  const access = useAccess();\n\n  if (access.canReadFoo) {\n    // 如果可以读取 Foo，则...\n  }\n\n  return <>TODO</>;\n};\n\nexport default PageA;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules\nDESCRIPTION: This snippet shows how to use CSS Modules in Umi. By importing the CSS file with a variable name, styles are scoped and avoid global conflicts. The styles are accessed through the variable, e.g., `styles.title`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport styles from './index.css';\n\nexport default function () {\n  return <div className={styles.title}>\n    Hello World\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining global styles with styled-components\nDESCRIPTION: This code snippet demonstrates how to define global styles using styled-components within a Umi project. It uses the `createGlobalStyle` function from `umi` to create a React component that applies global styles to the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGlobalStyle } from \"umi\";\n\nexport const styledComponents = {\n  GlobalStyle: createGlobalStyle`\n    h1 {\n      background: #ccc;\n    }\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Use Routes Hook Example Typescript\nDESCRIPTION: Shows how to use the `useRoutes` hook to define and render routes within a functional component. The hook takes an array of route objects, each specifying a path and a corresponding React element.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\nimport { useRoutes } from \"umi\";\n\nfunction App() {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: <Dashboard />,\n      children: [\n        {\n          path: \"messages\",\n          element: <DashboardMessages />,\n        },\n        { path: \"tasks\", element: <DashboardTasks /> },\n      ],\n    },\n    { path: \"team\", element: <AboutPage /> },\n  ]);\n\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Modify TSConfig with UmiJS API (TypeScript)\nDESCRIPTION: Explains how to modify the temporary tsconfig file using the `modifyTSConfig` API in UmiJS. This can be used to customize the TypeScript compiler options. The function takes the current tsconfig object as input and returns the modified object. For example, you can add path aliases to the compiler options.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyTSConfig((memo) => {\n  memo.compilerOptions.paths['foo'] = ['bar'];\n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: UmiJS Jest Configuration (umi project)\nDESCRIPTION: This code snippet demonstrates how to configure Jest for UmiJS projects. It uses `configUmiAlias` and `createConfig` from the `umi/test` package to create a Jest configuration with browser target, esbuild for JavaScript transformation, and JSX set to automatic. It also allows overriding default Jest configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, configUmiAlias, createConfig } from 'umi/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // 覆盖 umi 的默认 jest 配置, 如\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating back using useNavigate in UmiJS\nDESCRIPTION: Demonstrates using `useNavigate` to navigate back in history.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigate } from 'umi';\n\nlet navigate = useNavigate();\nnavigate(-1);\n```\n\n----------------------------------------\n\nTITLE: MicroAppLink Navigation to Master App - React/TSX\nDESCRIPTION: This code snippet demonstrates how to use the MicroAppLink component in a child application to navigate to a specific route within the parent application (master app). It imports MicroAppLink from umi and defines a functional component that renders a button. Clicking the button navigates the parent application to '/table', rendering the specified route within the parent.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// In the child application\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* The jump link is /table */}\n      <MicroAppLink isMaster to=\"/table\">\n        <Button>go to master app</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters (JSX)\nDESCRIPTION: Demonstrates how to access route parameters using the `useParams` hook from `react-router@6` within a UmiJS component. The `useParams` hook provides access to the dynamic segments of the URL that match the route's parameters. This is useful for accessing values like `id` from a route like `/comp/:id`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// 路由配置 /comp/:id\n// 当前 location /comp/paramId\n\nconst params  = useParams();\n// params\n{\n  \"id\": \"paramId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Config File with Differences in Umi 4\nDESCRIPTION: This snippet illustrates differences in the configuration file (`config/config.ts`) when migrating to Umi 4.  Specifically, it addresses changes related to `fastRefresh`, `dva.hmr`, and `webpack5`.  It requires modifying the project's configuration file. The output is the updated configuration object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, utils } from 'umi';\n\nexport default defineConfig({\n-  fastRefresh: {},\n+  fastRefresh: true,\n  dva: {\n   // 不再支持 hmr 这个参数\n-    hmr: true,\n   },\n// 默认 webpack5\n-   webpack5: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Importing request and useRequest in UmiJS\nDESCRIPTION: This snippet demonstrates how to import the `request` and `useRequest` functions from the `umi` library. These functions are essential for making HTTP requests and managing asynchronous data fetching within UmiJS applications.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request, useRequest } from 'umi';\n\nrequest;\nuseRequest;\n```\n\n----------------------------------------\n\nTITLE: UmiJS Configuration Example (TypeScript)\nDESCRIPTION: This snippet shows a basic example of an UmiJS configuration file using TypeScript. It sets the output path for the build to 'dist'. The `defineConfig` function provides better type hinting.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  outputPath: 'dist',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining dva Effects\nDESCRIPTION: This code snippet demonstrates how to define effects within a dva model for asynchronous communication with the backend. It uses Generator functions and the `yield` keyword to manage asynchronous logic, calling `addTodo` and then dispatching a `put` action.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  namespace: 'todos',\n  effects: {\n    *addRemote({ payload: todo }, { put, call }) {\n      yield call(addTodo, todo);\n      yield put({ type: 'add', payload: todo });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration\nDESCRIPTION: This snippet shows an example of an UnoCSS configuration file (`unocss.config.ts`). It defines the configuration using `defineConfig` and includes presets like `presetAttributify` and `presetUno`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// unocss.config.ts\n\nimport {defineConfig, presetAttributify, presetUno} from 'unocss';\n\nexport function createConfig({strict = true, dev = true} = {}) {\n  return defineConfig({\n    envMode: dev ? 'dev' : 'build', presets: [presetAttributify({strict}), presetUno()],\n  });\n}\n\nexport default createConfig(); \n```\n\n----------------------------------------\n\nTITLE: Setting up Global Initial State in UmiJS\nDESCRIPTION: This code demonstrates how to define the global initial state in a UmiJS application using the `getInitialState` function in `src/app.ts`. The function is expected to be asynchronous and its return value becomes the global initial state. This allows various plugins and components to access the initial state via `useModel('@@initialState')`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport { fetchInitialData } from '@/services/initial';\n\nexport async function getInitialState() {\n  const initialData = await fetchInitialData();\n  return initialData;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure extra route paths for static export in UmiJS (TypeScript)\nDESCRIPTION: This code configures `extraRoutePaths` within `exportStatic` to generate static HTML files for dynamic routes. The example shows how to define fixed routes and use an asynchronous function to fetch route data from an API.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // Configure fixed values\n    extraRoutePaths: ['/news/1', '/news/2'],\n    // Can also configure a function for dynamic retrieval\n    extraRoutePaths: async () => {\n      const res = await fetch('https://api.example.com/news');\n      const data = await res.json();\n      return data.map((item) => `/news/${item.id}`);\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional CSS Styles (JavaScript)\nDESCRIPTION: This code configures additional CSS styles in UmiJS, including inline styles and external stylesheets.  Inline styles are added directly, while external stylesheets are linked via a `<link>` tag.  Styles are prepended to existing styles.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nstyles: [`body { color: red; }`, `https://a.com/b.css`]\n```\n\n----------------------------------------\n\nTITLE: UmiJS Route Configuration with Layout and Wrappers\nDESCRIPTION: This Typescript snippet demonstrates how to configure routes in UmiJS, including disabling the default layout and using wrappers for specific routes. Wrappers allow adding extra functionality, such as authentication, to certain pages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\n    { path: '/', component: './index', layout: false },\n    {\n      path: '/users',\n      component: './users',\n      wrappers: ['@/wrappers/auth']\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: React Test: Greet Testing-Library Assertion\nDESCRIPTION: This test case utilizes `@testing-library/jest-dom` to assert that the `Greet` component renders the text 'Anonymous' when no name prop is provided. It renders the component, retrieves the element containing the text, and asserts that it's present in the document.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\nimport '@testing-library/jest-dom';\n\ntest('renders Greet without name assert by testing-library', () => {\n  const { container } = render(<Greet />);\n\n  const greetDom = screen.getByText('Anonymous');\n  expect(greetDom).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: UmiJS Copy Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure files to be copied to the output directory. It configures the `copy` option to copy `foo.json` and `src/bar.json` to the root of the output directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncopy: ['foo.json', 'src/bar.json']\n```\n\n----------------------------------------\n\nTITLE: dva Loading Model State Structure\nDESCRIPTION: This code shows the structure of the default loading model in dva. It provides information on global loading status, model-specific loading status, and effect-specific loading status.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  global: Boolean, // Whether there is really asynchronous request being sent\n  models: {\n    [modelnamespace]: Boolean, // The loading situation for each specific model\n  },\n  effects: {\n    [modelnamespace/effectname]: Boolean, // The loading situation for each specific effect\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Valtio Redux DevTools Support\nDESCRIPTION: This snippet shows how to integrate Valtio with Redux DevTools for debugging. It uses `proxyWithDevtools` to enable state inspection and time-travel debugging. Requires importing `proxy` and `proxyWithDevtools` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, proxyWithDevtools } from 'umi';\n\nconst state = proxy({ count: 0 });\nproxyWithDevtools(state, { name: 'count', enabled: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Umi with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `defineConfig` from the `umi` library to configure an Umi project with TypeScript. Using `defineConfig` provides TypeScript syntax hints and type checking within the configuration file. The example defines a simple route for the root path ('/') to render the `index` page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  routes: [\n    { path: '/', component: '@/pages/index' },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Modify App Data with UmiJS API (TypeScript)\nDESCRIPTION: Shows how to modify the application's metadata using the `modifyAppData` API in UmiJS. The function takes the current `appData` as input and returns the modified `appData`. In this example, a new property `foo` is added to the `appData` object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyAppData((memo) => {\n  memo.foo = 'foo';\n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: Build-time Layout Configuration\nDESCRIPTION: This snippet shows how to configure the layout plugin at build time using `config/config.ts`.  It includes the title and locale settings. The `defineConfig` function is imported from `umi` to define the configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  layout: {\n    title: 'Ant Design',\n    locale: false, // 默认开启，如无需菜单国际化可关闭\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Valtio Component Encapsulation\nDESCRIPTION: This example demonstrates how to encapsulate Valtio state within a React component using `createContext` and `useContext`. It shows how to provide the state to the component tree and access it within child components. Requires importing `proxy`, `createContext`, and `useContext` from 'umi' and 'react'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// 1. createContext\nconst MyContext = createContext();\n// 2. Provider\nconst value = useRef(proxy({ count: 0 })).current;\n<MyContext.Provider value={value} />\n// 3. useContext\nuseContext(MyContext);\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Plugin\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the UnoCSS plugin in a Umi project. It enables the plugin and specifies the file directories to be watched for className usage. The `watch` option defines the scope of files where UnoCSS will detect class names.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  plugins: [\n    require.resolve('@umijs/plugins/dist/unocss')\n  ],\n  unocss: {\n    // Range of files to detect className, if the project does not include the src directory, use `pages/**/*.tsx`\n    watch: ['src/**/*.tsx']\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Images in TSX\nDESCRIPTION: This snippet shows how to import an image file in a TSX component and use its URL as the source for an `<img>` tag.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport imgUrl from './image.png'\n// <img src={imgUrl} />>\n```\n\n----------------------------------------\n\nTITLE: Resolving paths with useResolvedPath in UmiJS\nDESCRIPTION: Shows how to use the `useResolvedPath` hook to resolve a given path to a full route information object in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useResolvedPath } from 'umi';\n\nconst path = useResolvedPath('docs')\n/* path\n{ pathname: '/a/new/page/docs', search: '', hash: '' }\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring extraBabelIncludes in UmiJS (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `extraBabelIncludes` option in UmiJS to specify additional NPM packages or directories that should be compiled with Babel. It supports absolute paths, NPM packages, and regular expressions to match packages with specific scopes.  The `join` function from the `path` module is used to create absolute paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  extraBabelIncludes: [\n    // 支持绝对路径\n    join(__dirname, '../../common'),\n    // 支持 npm 包\n    'react-monaco-editor',\n    // 转译全部路径含有 @scope 的包\n    /@scope/\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Use Navigate Hook Back Navigation Example Typescript\nDESCRIPTION: Shows how to use the `useNavigate` hook to navigate back to the previous page in the history. The `navigate(-1)` call navigates back one step.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigate } from 'umi';\n\nlet navigate = useNavigate();\nnavigate(-1);\n```\n\n----------------------------------------\n\nTITLE: Specifying Socket Server for HMR\nDESCRIPTION: This snippet shows how to specify a custom socket server address for Hot Module Replacement (HMR) using the `SOCKET_SERVER` environment variable. This is useful in scenarios where the default HMR configuration doesn't work, such as when using a reverse proxy.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ SOCKET_SERVER=http://localhost:8000/ umi dev\n```\n\n----------------------------------------\n\nTITLE: UmiJS Preset Example\nDESCRIPTION: This code snippet shows how to define a preset in UmiJS.  Presets can return an object containing `plugins` and `presets` properties to register additional plugins or presets. The registration order is presets first, then plugins.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  return {\n    plugins: ['./plugin_foo','./plugin_bar'],\n    presets: ['./preset_foo']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a UmiJS Model with useEffect\nDESCRIPTION: This example demonstrates fetching user data from an API using `useEffect` and `useState` within a UmiJS model.  It manages loading state while fetching data and updates the user state when the data is retrieved. Requires a `getUser` function from '@/services/user'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nimport { useState } from 'react';\nimport { getUser } from '@/services/user';\n\nexport default function Page() {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getUser().then((res) => {\n      setUser(res);\n      setLoading(false);\n    });\n  }, []);\n\n  return {\n    user,\n    loading,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Add Entry Imports in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add import statements to the entry file using `api.addEntryImports`. The function should return an object with `source` and optional `specifier` properties, or an array of such objects. These imports are added at the end of the import section.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napi.addEntryImports(() => ({\n  source: '/modulePath/xxx.js',\n  specifier: 'moduleName'\n}))\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Routes with patchClientRoutes and render (TypeScript)\nDESCRIPTION: This snippet demonstrates how to dynamically update routes based on data fetched from the server. It utilizes both `patchClientRoutes` and the `render` function. The `render` function fetches the route data and stores it in `extraRoutes`. The `patchClientRoutes` function modifies the route configuration based on the `extraRoutes` data. It also calls `oldRender()` function after route update.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet extraRoutes;\n\nexport function patchClientRoutes({ routes }) {\n  // Modify routes based on extraRoutes\n  patch(routes, extraRoutes);\n}\n\nexport function render(oldRender) {\n  fetch('/api/routes')\n    .then((res) => res.json())\n    .then((res) => {\n      extraRoutes = res.routes;\n      oldRender();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dataField in UmiJS at build time\nDESCRIPTION: This snippet shows how to configure the `dataField` option within the `request` configuration at build time. This configuration allows specifying the key in the response that contains the actual data. The default value is `data`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  request: {\n    dataField: 'data'\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Word Cloud with Ant Design Plots\nDESCRIPTION: This React component uses the `WordCloud` component from `@ant-design/plots` to render a word cloud. It configures the chart with data, specifies the 'country' field for the words and the 'value' field for the font weight. It also includes interactive states for element activation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { WordCloud } from '@ant-design/plots';\n\nconst DemoWordCloud: React.FC = () => {\n  // fetch data\n\n  const config = {\n    data,\n    wordField: 'country',\n    weightField: 'value',\n    color: '#122c6a',\n    interactions: [\n      {\n        type: 'element-active',\n      },\n    ],\n    state: {\n      active: {\n        style: {\n          lineWidth: 2,\n        },\n      },\n    },\n  };\n\n  return <WordCloud {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Plugin in UmiJS (TypeScript)\nDESCRIPTION: This code snippet shows the default configuration options for the internationalization plugin in UmiJS, typically placed in `.umirc.ts`. The `locale` object configures settings like enabling Ant Design i18n, browser language detection, language code separators, default language, title internationalization, and local storage usage for the current language. The 'antd' property defaults to true if antd is present in the project's dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  locale: {\n    antd: false, // If `antd` is included in project dependencies, then default to true\n    baseNavigator: true,\n    baseSeparator: '-',\n    default: 'zh-CN',\n    title: false,\n    useLocalStorage: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Introduce Child Apps (Routing)\nDESCRIPTION: This code configures UmiJS routing to associate specific routes with micro applications.  The `microApp` property links a route to a registered child application, allowing the parent to render the child app when that route is accessed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    {\n      path: '/',\n      component: '@/layouts/index.tsx',\n      routes: [\n        {\n          path: '/app1',\n          component: '@/layouts/app-layout.tsx',\n          routes: [\n            // Configure the route associated with micro application app1\n            {\n              // Adding a * wildcard means associating all sub-routes under /app1/project to the micro application app1\n              path: '/project/*',\n              microApp: 'app1',\n            },\n          ],\n        },\n        // Configure the route associated with app2\n        {\n          path: '/app2/*',\n          microApp: 'app2',\n        },\n      ],\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-routes with Layout (JavaScript)\nDESCRIPTION: Illustrates how to configure sub-routes with a layout component in UmiJS using the `routes` configuration. It defines a parent route for `/` which uses `src/layouts/index` as a layout, and two child routes, `/list` and `/admin`, which will be rendered within the layout. This approach is useful for applying consistent UI elements across multiple pages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/login', component: 'login' },\n    {\n      path: '/',\n      component: '@/layouts/index',\n      routes: [\n        { path: '/list', component: 'list' },\n        { path: '/admin', component: 'admin' },\n      ],\n    }, \n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Route API (Interactive)\nDESCRIPTION: This command generates a route API file in interactive mode, prompting for the API name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api\n✔ please input your api name: … starwar/people\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env file - Text\nDESCRIPTION: Shows how to define environment variables in a `.env` file. This is useful for sharing environment variable configurations between developers. It includes setting the `PORT` and `BABEL_CACHE` variables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# file .env\nPORT=3000\nBABEL_CACHE=none\n```\n\n----------------------------------------\n\nTITLE: Defining RequestConfig type in UmiJS\nDESCRIPTION: This snippet shows how to import and use the `RequestConfig` type from `umi` to define request configurations with type safety. This interface helps in configuring runtime settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request:RequestConfig = {};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Externals Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure externals. It externalizes React and includes the React library via a CDN in the head.  It will not bundle react.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// external react\nexternals: { react: 'React' },\nheadScripts: ['https://unpkg.com/react@17.0.1/umd/react.production.min.js'],\n```\n\n----------------------------------------\n\nTITLE: Modify Root Container\nDESCRIPTION: This code defines a `rootContainer` function that allows you to modify the root component rendered by vue-router. It wraps the original container with a `ThemeProvider` component. This is useful for adding context providers or other wrappers around the root component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { h } from 'vue'\n\nexport function rootContainer(container) {\n  return h(ThemeProvider, null, container);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in UmiJS (TSX)\nDESCRIPTION: This snippet demonstrates how to use the Link component from UmiJS to create links with routing functionality. It shows how to create a link to a dynamic user profile based on user data. The `prefetch` prop can be used to enable pre-loading of the target route's resources.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'umi';\n\nfunction IndexPage({ user }) {\n  return <Link to={user.id}>{user.name}</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Plugin\nDESCRIPTION: This snippet shows how to enable the UnoCSS plugin in the Umi configuration file (`.umirc.ts`). It specifies the plugin and configures the `watch` option to detect className usage in `src/**/*.tsx` files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  plugins: [\n    require.resolve('@umijs/plugins/dist/unocss')\n  ],\n  unocss: {\n    // 检测 className 的文件范围，若项目不包含 src 目录，可使用 `pages/**/*.tsx`\n    watch: ['src/**/*.tsx']\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Valtio Data Derivation with UmiJS\nDESCRIPTION: This example demonstrates how to derive data from Valtio state using `proxyWithComputed` from UmiJS.  It defines a computed property `double` based on the `count` state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithComputed } from 'umi';\n\nconst state = proxyWithComputed({\n  count: 0,\n}, {\n  double: snap => snap.count * 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Information with useLocation in UmiJS (TSX)\nDESCRIPTION: Demonstrates how to access current route information (pathname, search, hash) within a React component or hook using the `useLocation` hook provided by UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Recommended to use useLocation in components or hooks\nimport { useLocation from 'umi';\nexport default function Page() {\n  let location = useLocation();\n  return (\n    <div>\n     { location.pathname }\n     { location.search }\n     { location.hash }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Page Navigation with useRouter and useRoute\nDESCRIPTION: This script demonstrates page navigation using `useRouter` and `useRoute` from the UmiJS library. It retrieves the router instance and the current route. The `onHello` function pushes a new route named 'search', preserving the current route's query parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useRouter, useRoute } from 'umi';\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst onHello = () => {\n  router.push({\n    name: 'search',\n    query: {\n      ...route.query,\n    },\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exposing Environment Variables to the Browser - Bash\nDESCRIPTION: Demonstrates how to define an environment variable in the `.env` file that will be exposed to the browser. Note that by default, only environment variables prefixed with `UMI_APP_` are automatically exposed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nMY_TOKEN=\"xxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Using safeRemoteComponent for Remote Components\nDESCRIPTION: This code snippet shows how to use `safeRemoteComponent` as a higher-order component to safely load remote React components. It takes options for module specifier, fallback component, and loading element.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = safeRemoteComponent<React.FC<{ init?: number }>>({\n  moduleSpecifier: 'remoteCounter/Counter',\n  fallbackComponent: () => 'fallbacked',\n  loadingElement: 'Loading',\n});\n\nexport default function Page() {\n  return (\n    <div>\n      <RemoteCounter init={808} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Languages with setLocale (TypeScript)\nDESCRIPTION: These snippets show how to use the setLocale function from Umi to programmatically switch the application's locale. The first example refreshes the page after changing the locale, while the second example prevents the page from refreshing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLocale } from 'umi';\n\n// 切换时刷新页面\nsetLocale('en-US');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLocale } from 'umi';\n\n// 切换时不刷新页面\nsetLocale('en-US', false);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 如果您的默认语言为 zh-CN\n// 那么以下调用具有与 setLocale('zh-CN') 同样的效果\nsetLocale();\n```\n\n----------------------------------------\n\nTITLE: Starting the UmiJS Development Server\nDESCRIPTION: This snippet demonstrates how to start the UmiJS development server. The `pnpm dev` command starts the server, which listens for changes and automatically reloads the application.  It displays the local and network addresses to access the application in a browser.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev\n        ╔═════════════════════════════════════════════════════╗\n        ║ App listening at:                                   ║\n        ║  > Local: https://127.0.0.1:8000                  ║\nready - ║  > Network: https://192.168.1.1:8000                ║\n        ║                                                     ║\n        ║ Now you can open a browser with the above addresses👆 ║\n        ╚═════════════════════════════════════════════════════╝\nevent - compiled successfully in 1121 ms (388 modules)\nevent - MFSU compiled successfully in 1308 ms (875 modules)\n```\n\n----------------------------------------\n\nTITLE: ANALYZE Environment Variable Usage - Bash\nDESCRIPTION: Shows how to enable bundle analysis using the `ANALYZE` environment variable. Setting `ANALYZE` to `1` activates the bundle analyzer when running `umi dev` or `umi build`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ANALYZE=1 umi dev\n# 或者\n$ ANALYZE=1 umi build\n```\n\n----------------------------------------\n\nTITLE: Replacing props.children with Umi's Outlet\nDESCRIPTION: This snippet demonstrates how to replace `props.children` with Umi's `Outlet` component when migrating to Umi 4, due to the React Router v6 update.  This is typically used in layout components. The code requires importing { Outlet } from 'umi'.  The output is the updated layout component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { Outlet } from 'umi';\n\nexport default function Layout(props) {\n  return (\n    <div>\n-      { props.children }\n+      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Differences in config.ts\nDESCRIPTION: This snippet highlights some configuration changes in Umi 4, specifically the `fastRefresh` and `dva` configurations. The `hmr` option within `dva` is removed, and `fastRefresh` needs to be explicitly enabled with `true`. The `webpack5` default setting is also removed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig, utils } from 'umi';\n\nexport default defineConfig({\n-  fastRefresh: {},\n+  fastRefresh: true,\n  dva: {\n   // The parameter hmr is no longer supported\n-    hmr: true,\n   },\n// Default webpack5\n-   webpack5: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling MFSU with Normal Strategy in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the MFSU (Module Federation Shared Utilities) feature in a UmiJS project with the 'normal' strategy. The 'normal' strategy involves compile-time analysis to accurately capture dependencies, including those introduced during transpilation. This ensures complete separation of project code and dependency code during the build process. Dependencies used in compilation will be collected through transpilation plugins. This strategy requires a serial process but results in more accurate dependency management.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  strategy: 'normal',\n}\n```\n\n----------------------------------------\n\nTITLE: Default Monorepo Redirect Configuration in UmiJS\nDESCRIPTION: This snippet shows the default configuration for monorepo redirection in UmiJS. When enabled (by providing an empty object), it redirects sub-package imports to their source code location (default is the `src` folder). This allows for hot updates and eliminates the need to pre-build sub-packages during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// Default redirect to sub-package's src folder\nmonorepoRedirect: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS to use Vue Preset\nDESCRIPTION: This configuration enables the Vue preset in UmiJS.  It modifies the `.umirc.ts` or `config/config.ts` file to include the `@umijs/preset-vue` preset.  This is essential for Umi to recognize and process Vue-specific syntax and components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// In .umirc.ts or config/config.ts\nexport default {\n  presets: [require.resolve('@umijs/preset-vue')],\n};\n```\n\n----------------------------------------\n\nTITLE: Use Outlet Hook Example Typescript\nDESCRIPTION: Demonstrates using the `useOutlet` hook within a layout component. It renders the currently matched child route within a div with a class of \"fancyLayout\".\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOutlet } from 'umi';\n\nconst Layout = ()=>{\n  const outlet = useOutlet()\n\n  return <div className=\"fancyLayout\">\n    {outlet}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout at Runtime (TSX)\nDESCRIPTION: This snippet showcases how to configure the UmiJS built-in layout at runtime by exporting a `layout` configuration object. It allows customization of layout-related features, such as defining logout actions. This requires enabling the `layout` plugin in the UmiJS configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RuntimeConfig } from 'umi';\n\nexport const layout: RuntimeConfig = {\n  logout: () => {}, // do something\n};\n```\n\n----------------------------------------\n\nTITLE: Inter-Sub-application Navigation with MicroAppLink\nDESCRIPTION: This code shows how to navigate between sub-applications using the `<MicroAppLink />` component. The `name` prop specifies the target sub-application, and the `to` prop specifies the route within that sub-application. The `isMaster` prop allows navigation back to the parent application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// 在 app1 中\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* 跳转链接为 /app2/home */}\n      <MicroAppLink name=\"app2\" to=\"/home\">\n        <Button>go to app2</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// 在 app2 中\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* 跳转链接为 /app1/project/home */}\n      <MicroAppLink name=\"app1\" to=\"/home\">\n        <Button>go to app1</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// 在子应用中\nimport { MicroAppLink } from 'umi';\n\nexport default function Page() {\n  return (\n    <>\n      {/* 跳转链接为 /table */}\n      <MicroAppLink isMaster to=\"/table\">\n        <Button>go to master app</Button>\n      </MicroAppLink>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using safeRemoteComponent Higher-Order Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `safeRemoteComponent` higher-order component for loading remote modules with fallback and loading UI.  It specifies the module specifier, fallback component, and loading element.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = safeRemoteComponent<React.FC<{ init?: number }>>({\n  moduleSpecifier: 'remoteCounter/Counter',\n  fallbackComponent: () => 'fallbacked',\n  loadingElement: 'Loading',\n});\n\nexport default function Page() {\n  return (\n    <div>\n      <RemoteCounter init={808} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling MF Product Hash (TypeScript)\nDESCRIPTION: This code shows how to disable the automatic hash generation for the MF product entry file by setting `remoteHash` to `false`. It also warns about potential caching issues when disabling the hash.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmf: {\n  remoteHash: false\n}\n```\n\n----------------------------------------\n\nTITLE: API Handler Template\nDESCRIPTION: A template for API handlers within the Umi API route structure. Each .ts file in the api directory exports a function to handle requests.  This function sends a 'not implemented' error.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UmiApiRequest, UmiApiResponse } from 'umi';\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  res.status(400).json({ error: 'This API is not implemented yet.' });\n}\n```\n\n----------------------------------------\n\nTITLE: DvaJS Effect Example: Put Action\nDESCRIPTION: This snippet demonstrates using the `put` effect in DvaJS to dispatch an action. The `put` function is used to trigger reducers to modify the state. Here, it dispatches the `todos/add` action with a payload 'Learn Dva'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nyield put({ type: 'todos/add', payload: 'Learn Dva' });\n```\n\n----------------------------------------\n\nTITLE: Copy files to output directory in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `copy` option in UmiJS to copy files or folders to the output directory. You can specify source files or directories as strings, which are copied to the root of the dist folder, or as objects with `from` and `to` properties to specify the source and destination paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncopy: ['foo.json', 'src/bar.json']\n```\n\n----------------------------------------\n\nTITLE: UmiJS Global Default Error Boundary Configuration\nDESCRIPTION: This code snippet demonstrates configuring a global default error boundary in UmiJS for all micro-apps. The `defaultErrorBoundary` property specifies the path to a component that will be used as the error boundary for all micro-apps unless overridden by a specific micro-app's `errorBoundary` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nqiankun: {\n  master: {\n    defaultErrorBoundary: '@/defaultErrorBoundary',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Display UmiJS CLI Help\nDESCRIPTION: This command displays a list of available UmiJS CLI commands and their basic usage instructions.  It's the starting point for understanding available options. Use `umi help <command>` for command-specific help.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\numi help\n```\n\n----------------------------------------\n\nTITLE: Enabling Click to Component in TypeScript\nDESCRIPTION: This snippet shows how to enable the click-to-component feature in UmiJS using the `clickToComponent` option. This feature allows developers to jump to the source code location in the editor by Option+Click/Alt+Click on the component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  clickToComponent: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Starting UmiJS Dev Server with SOCKET_SERVER (Bash)\nDESCRIPTION: This command starts the UmiJS development server with the `SOCKET_SERVER` environment variable set. This prevents continuous page refreshing by specifying the socket server address. The `npx umi dev` command initiates the UmiJS development server.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$SOCKET_SERVER=http://127.0.0.1:8000/ npx umi dev\n```\n\n----------------------------------------\n\nTITLE: Configuration for Exporting Remote Modules (TypeScript)\nDESCRIPTION: This snippet shows how to configure a project to expose its modules as remote modules.  It sets the `name` option within the `mf` configuration, which defines the module name for the remote. The comment highlights the option to define the library type, especially for Qiankun sub-applications.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n// Extracting the variable is for consistent configuration with MFSU\nconst remoteMFName = 'remoteMFName';\n\ndefineConfig({\n  mf: {\n    name: remoteMFName,\n\n    // Optional, library type of remote module, if the module needs to be used in a Qiankun sub-application, the suggested value is recommended,\n    // Note that the name here must be consistent with the final MF module name\n    // library: { type: \"window\", name: \"exportMFName\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using ANALYZE Environment Variable\nDESCRIPTION: This example shows how to use the `ANALYZE` environment variable to enable bundle analysis during the `umi dev` or `umi build` process. This helps identify the components of the bundle and optimize its size.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ANALYZE=1 umi dev\n# or\n$ ANALYZE=1 umi build\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Dynamically with addLocale (TypeScript)\nDESCRIPTION: This snippet demonstrates how to dynamically add a new locale at runtime using the addLocale function from Umi. This allows you to add language support without modifying the initial locale configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addLocale } from 'umi';\nimport zhTW from 'antd/es/locale/zh_TW';\n\naddLocale(\n  'zh-TW',\n  {\n    welcome: '歡迎光臨 Umi 的世界！',\n  },\n  {\n    momentLocale: 'zh-tw',\n    antd: zhTW,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enable Tailwind CSS Plugin in Max Project\nDESCRIPTION: This command uses a code generator to enable the Tailwind CSS plugin in a Max project. It updates the package.json, modifies .umirc.ts, and creates tailwind.config.js and tailwind.css files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/tailwindcss.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx max g tailwindcss\ninfo  - Update package.json for devDependencies\nset config:tailwindcss on /project/max-playground/.umirc.ts\ninfo  - Update .umirc.ts\ninfo  - Write tailwind.config.js\ninfo  - Write tailwind.css\n```\n\n----------------------------------------\n\nTITLE: Route Redirection in UmiJS (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure route redirection in UmiJS using the `redirect` property within a route configuration.  Accessing the root path ('/') will redirect the user to the '/list' path, which then renders the `src/pages/list` component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/', redirect: '/list' },\n    { path: '/list', component: 'list' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Layout in UmiJS\nDESCRIPTION: This code snippet demonstrates how to enable the layout plugin in a UmiJS application by configuring the `layout` property in the `config/config.ts` file. It sets the `title` property to 'your app title'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// config/config.ts\nexport default {\n  layout: {\n    title: 'your app title',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Information with useSearchParams in UmiJS\nDESCRIPTION: This code snippet demonstrates how to use the `useSearchParams` hook from `react-router` to access and manipulate query parameters. It shows how to retrieve a specific query parameter (`a`) using `searchParams.get('a')`, convert the search parameters to a string using `searchParams.toString()`, and update the search parameters using `setSearchParams`. It depends on `react-router@6` which Umi4 uses. It also references the searchParams API on Mozilla Developer Network.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// Current location /comp?a=b;\nconst [searchParams, setSearchParams] = useSearchParams();\nsearchParams.get('a')  // b\nsearchParams.toString()  // a=b\n\nsetSearchParams({a:'c',d:'e'}) // location changes to /comp?a=c&d=e\n```\n\n----------------------------------------\n\nTITLE: Valtio Extension Example\nDESCRIPTION: This example shows how to extend Valtio with custom functionalities.  Specifically it implements `proxyWithPersist` to persist the state to localStorage and automatically load it on initialization. Requires importing `proxy`, `snapshot`, and `subscribe` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function proxyWithPersist<V>(val: V, opts: {  \n  key: string;  \n}) {  \n  const local = localStorage.getItem(opts.key);  \n  const state = proxy(local ? JSON.parse(local) : val);  \n  subscribe(state, () => {  \n    localStorage.setItem(opts.key, JSON.stringify(snapshot(state)));  \n  });\n  return state;  \n}\n```\n\n----------------------------------------\n\nTITLE: List UmiJS Configuration\nDESCRIPTION: This command lists the current UmiJS project configuration. It retrieves the configuration settings used by Umi. It uses the `list` subcommand to show available keys and values.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config list\n - [key: polyfill] false\n - [key: externals] { esbuild: true }\n```\n\n----------------------------------------\n\nTITLE: Middleware to Interceptor Migration\nDESCRIPTION: Shows how to migrate middleware from UmiJS 3 to request/response interceptors in UmiJS 4.  It demonstrates how to move code before `next()` to request interceptors and code after `next()` to response interceptors.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// 中间件\nasync function middleware(ctx, next) {\n  const { url, options } = req;\n  if (url.indexOf('/api') !== 0) {\n    ctx.req.url = `/api/v1/${url}`;\n  }\n  await next();\n  if (!ctx.res.success) {\n    // do something\n  }\n}\n\n// 拦截器\n{\n  requestInterceptors:[\n    (config) => {\n      if (config.url.indexOf('/api') !== 0) {\n        config.url = `/api/v1/${url}`;\n      }\n      return config;\n    }\n  ],\n  responseInterceptors: [\n  (response) => {\n    if(!response.data.success){\n      // do something\n    }\n  }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Import Plugin\nDESCRIPTION: Configures the Babel plugin `babel-plugin-dynamic-import-node` within the UmiJS configuration file. This plugin is conditionally enabled based on the `NODE_ENV` environment variable, applying it only in production builds to disable dynamic imports.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  extraBabelPlugins: process.env.NODE_ENV === 'production'\n    ? ['babel-plugin-dynamic-import-node']\n    : []\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Ant Design in app.ts (Runtime)\nDESCRIPTION: This code snippet shows how to configure Ant Design at runtime using `app.ts`. It demonstrates how to set the theme algorithm (e.g., dark theme) and configure the maximum number of messages displayed using `appConfig`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport { RuntimeAntdConfig } from 'umi';\nimport { theme } from 'antd';\n\nexport const antd: RuntimeAntdConfig = (memo) => {\n  memo.theme ??= {};\n  memo.theme.algorithm = theme.darkAlgorithm; // Configure the preset dark algorithm for antd5\n\n  memo.appConfig = {\n    message: {\n      // Configure the maximum number of messages displayed, when exceeding the limit, the earliest messages will be automatically closed\n      maxCount: 3,\n    }\n  }\n\n  return memo;\n};\n```\n\n----------------------------------------\n\nTITLE: Add On-Demand Dependencies with UmiJS API (TypeScript)\nDESCRIPTION: Demonstrates how to add on-demand dependencies to an UmiJS project using the `addOnDemandDeps` API. This allows specifying dependencies that will be checked and installed when the project starts. Dependencies can be specified with their name, version, and whether they are dev dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.addOnDemandDeps(() => [{ name: '@swc/core', version: '^1.0.0', dev: true }])\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions in Mock\nDESCRIPTION: This snippet demonstrates how to use custom functions to define mock interfaces. The function receives `req` and `res` objects, allowing you to customize the response based on the request. Refer to the Express documentation for the `req` and `res` APIs.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n\n  'POST /api/users/create': (req, res) => {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.end('ok');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration (.eslintrc.js)\nDESCRIPTION: This JavaScript snippet shows how to configure ESLint in `.eslintrc.js` to extend the recommended Umi or Umi Max ESLint configuration.  This is a crucial step to enable Umi's linting rules.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n  // For Umi projects\n  extends: require.resolve('umi/eslint'),\n\n  // For Umi Max projects\n  extends: require.resolve('@umijs/max/eslint'),\n}\n```\n\n----------------------------------------\n\nTITLE: Updating location usage\nDESCRIPTION: This snippet demonstrates how to access the location object in Umi 4, recommending the use of `window.location` or `useLocation` hook.  It shows replacing `props.location` with `window.location`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nexport default function Page(props) {\n+  const { location } = window;\n  return (\n    <div>\n-     { props.location }\n+     { location }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling clientLoader in Umi\nDESCRIPTION: This code snippet shows how to enable the `clientLoader` feature in the Umi configuration file (`.umirc.ts`). This enables data pre-loading functionality for routes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/client-loader.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  clientLoader: {}\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS clickToComponent Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to configure the clickToComponent feature. It configures the `clickToComponent` option in the UmiJS configuration file. It enables the feature to jump to the source code location by clicking the component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  clickToComponent: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Redirects (JavaScript)\nDESCRIPTION: Demonstrates how to configure route redirects in UmiJS using the `redirect` option. This example redirects users from the `/` path to the `/list` path. Redirects are useful for creating aliases, simplifying URLs, or guiding users to the correct page after changes in the application's structure. The example also showcases `keepQuery` option.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/', redirect: '/list' },\n    { path: '/list', component: 'list' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using safeMfImport for Fail-Safe Remote Loading (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `safeMfImport` function to load remote modules with a fallback component in case of loading failure.  It utilizes React.lazy and Suspense for asynchronous loading and error handling. The fallback needs to be wrapped in the `default` field.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeMfImport } from '@umijs/max';\nimport React, { Suspense } from 'react';\n\nconst RemoteCounter = React.lazy(() => {\n  return safeMfImport('remoteCounter/Counter', { default: () => 'Fallback' });\n});\n\nexport default function Page() {\n  return (\n    <Suspense fallback=\"loading\">\n      <RemoteCounter />\n    </Suspense>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling UmiJS Access Plugin (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the UmiJS access plugin within the `config/config.ts` file. It requires both the `access` and `initialState` properties to be defined.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  access: {},\n  // access plugin depends on the initial State so it needs to be enabled at the same time\n  initialState: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Starting UmiJS Development Server\nDESCRIPTION: This command starts a local development server for the UmiJS project.  It enables hot module replacement and other development features, making it easier to develop and debug the application. The server provides URLs for accessing the application locally.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ umi dev\n```\n\n----------------------------------------\n\nTITLE: Updating match usage with useMatch\nDESCRIPTION: This snippet demonstrates how to use the `useMatch` hook in Umi 4 to access the match object. It shows replacing `props.match` with the `match` object obtained from `useMatch`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useMatch } from 'umi';\nexport default function Page(props) {\n+ const match = useMatch({ path: 'list/search/:type' });\n  return (\n    <div>\n-     { props.match }\n+     { match }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Loader with CJS (TypeScript)\nDESCRIPTION: This snippet shows how to configure the route loader in UmiJS to use CommonJS modules. It uses React.lazy and Promise.resolve(require()) for loading route components asynchronously.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// moduleType: cjs\n'index': React.lazy(() => Promise.resolve(require('../../pages/index.tsx'))),\n```\n\n----------------------------------------\n\nTITLE: Convention-Based Routing Example (JavaScript)\nDESCRIPTION: This code snippet shows an example of the routing configuration generated by UmiJS when using convention-based routing. The configuration is derived from the file structure under the `src/pages` directory. This example shows routes for `/` and `/users`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index' },\n  { path: '/users', component: '@/pages/users' },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Valtio Usage\nDESCRIPTION: This snippet shows the fundamental usage of Valtio with UmiJS, including defining reactive data using `proxy`, accessing the current state with `useSnapshot`, and updating the state directly. It requires importing `proxy` and `useSnapshot` from the 'umi' library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, useSnapshot } from 'umi';\n\n// 1. Define data\nconst state = proxy({ count: 0 });\n// 2. Use data\nconst snap = useSnapshot(state);\nsnap.count;\n// 3. Update data\nstate.count += 1;\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm for dependency management\nDESCRIPTION: This command downloads and executes the pnpm installation script to install pnpm, a recommended dependency management tool for Umi.js projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n```\n\n----------------------------------------\n\nTITLE: Using NavLink for Active Route Indication in UmiJS (TS)\nDESCRIPTION: Demonstrates the usage of `<NavLink>` to create navigation links that are aware of the active routing state. This allows for visual indication of the current page in navigation menus or tabs. Examples show how to apply styles and class names based on the active state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavLink from 'umi';\n\nfunction Navs() {\n  return <ul>\n    <li><NavLink to=\"message\" style={({ isActive }) => isActive ? { color: 'red' } : undefined}>Messages</NavLink></li>\n    <li><NavLink to=\"tasks\" className={({ isActive }) => isActive ? 'active' : undefined}>Tasks</NavLink></li>\n    <li><NavLink to=\"blog\">{({ isActive }) => <span className={isActive ? 'active' : undefined}>Blog</span>}</NavLink></li>\n  </ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions from Component in UmiJS\nDESCRIPTION: This code demonstrates how to dispatch actions from a React component to update the Dva model.  A click event triggers a dispatch call, executing the 'user/test' action.  This requires `umi` and `react` dependencies. The action is sent to the 'user' model's reducer or effect.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\n@connect(({ user }) => ({\n  user,\n}))\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div\n        onClick={() => {\n          this.props.dispatch({\n            type: 'user/test',\n          });\n        }}\n      >\n        {this.props.user.name}\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Add Custom Middleware with UmiJS API (TypeScript)\nDESCRIPTION: Illustrates how to add custom middleware to the UmiJS development server using the `onBeforeMiddleware` API. This allows developers to define custom request handlers for specific routes. The function receives an object with the `app` property, which is the Express application instance.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napi.onBeforeMiddleware(({ app }) => {\n  app.get('/some/path', function (req, res) {\n    res.json({ custom: 'response' });\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicons in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure custom favicons in UmiJS.  It shows how to specify either complete URLs or paths relative to the project's `public` directory. Make sure the `public/favicon.png` exists in your project when using relative path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfavicons: [\n  // Complete URL\n  'https://domain.com/favicon.ico',\n  // This will point to `/favicon.png`, make sure your project has `public/favicon.png`\n  '/favicon.png'\n]\n```\n\n----------------------------------------\n\nTITLE: Register User API Endpoint with Prisma and bcrypt - TypeScript\nDESCRIPTION: This code snippet defines an API endpoint for user registration using UmiJS, Prisma for database interaction, and bcrypt for password hashing. It handles POST requests to create a new user in the database, hashes the password using bcrypt, and returns a JWT token upon successful registration. It also includes error handling for database connection issues.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api/register.ts\n\nimport type { UmiApiRequest, UmiApiResponse } from 'umi';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport { signToken } from '@/utils/jwt';\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    // 如果对这个路径发起 POST 请求，代表他想要注册一个账号\n    case 'POST':\n      try {\n        // 建立一个 Prisma 客户端，他可以帮助我们连线到数据库\n        const prisma = new PrismaClient();\n\n        // 在数据库的 User 表中建立一个新的数据\n        const user = await prisma.user.create({\n          data: {\n            email: req.body.email,\n\n            // 密码是经过 bcrypt 加密的\n            passwordHash: bcrypt.hashSync(req.body.password, 8),\n            name: req.body.name,\n            avatarUrl: req.body.avatarUrl,\n          },\n        });\n\n        // 把建立成功的用户数据（不包含密码）和 JWT 回传给前端\n        res\n          .status(201)\n          .setCookie('token', await signToken(user.id))\n          .json({ ...user, passwordHash: undefined });\n\n        // 处理完请求以后记得断开数据库链接\n        await prisma.$disconnect();\n      } catch (e: any) {\n        // 如果发生未预期的错误，将对应的错误说明的 Prisma 文档发给用户\n        res.status(500).json({\n          result: false,\n          message:\n            typeof e.code === 'string'\n              ? 'https://www.prisma.io/docs/reference/api-reference/error-reference#' +\n                e.code.toLowerCase()\n              : e,\n        });\n      }\n      break;\n    default:\n      // 如果不是 POST 请求，代表他正在用错误的方式访问这个 API\n      res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Runtime Ant Design Configuration\nDESCRIPTION: This snippet shows how to configure Ant Design at runtime using the `app.ts` file.  It allows modifying the `ConfigProvider` settings, such as the theme algorithm and message display limits.  This requires the `configProvider` option to be enabled in the build-time configuration. This is specifically used for antd v5 features, like theme algorithm configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.ts\nimport { RuntimeAntdConfig } from 'umi';\nimport { theme } from 'antd';\n\nexport const antd: RuntimeAntdConfig = (memo) => {\n  memo.theme ??= {};\n  memo.theme.algorithm = theme.darkAlgorithm; // 配置 antd5 的预设 dark 算法\n\n  memo.appConfig = {\n    message: {\n      // 配置 message 最大显示数，超过限制时，最早的消息会被自动关闭\n      maxCount: 3,\n    }\n  }\n\n  return memo;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onRouteChange for Analytics in UmiJS\nDESCRIPTION: This example shows how to use the `onRouteChange` function to perform actions on route changes, such as sending analytics data to a tracking service.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport function onRouteChange({\n  location,\n  clientRoutes,\n  routes,\n  action,\n  basename,\n  isFirst,\n}) {\n  bacon(location.pathname);\n}\n```\n\n----------------------------------------\n\nTITLE: Install @umijs/plugins for react-query\nDESCRIPTION: This command installs the `@umijs/plugins` dependency, which is required when using react-query with umi.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i @umijs/plugins -D\n```\n\n----------------------------------------\n\nTITLE: Using clientLoader in a Route Component\nDESCRIPTION: This code demonstrates how to use the `clientLoader` function within a route component in Umi. It exports both a page component and a `clientLoader` function. The `clientLoader` fetches data, and the component consumes it using `useClientLoaderData`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/client-loader.en-US.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/.../some_page.tsx\n\nimport { useClientLoaderData } from 'umi';\n\nexport default function SomePage() {\n  const { data } = useClientLoaderData();\n  return <div>{data}</div>;\n}\n\nexport async function clientLoader() {\n  const data = await fetch('/api/data');\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Match Information with useMatch in UmiJS\nDESCRIPTION: This code snippet demonstrates how to use the `useMatch` hook from `react-router` to access match information for a route. It calls `useMatch` with a route pattern (`/comp/:id`) and shows the structure of the returned match object, including parameters, pathname, pathnameBase, and pattern details. `useMatch` depends on `react-router@6` which Umi4 uses.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst match = useMatch('/comp/:id')\n// match \n{\n  \"params\": {\n    \"id\": \"paramId\"\n  },\n  \"pathname\": \"/comp/paramId/\",\n  \"pathnameBase\": \"/comp/paramId\",\n  \"pattern\": {\n    \"path\": \"/comp/:id\",\n    \"caseSensitive\": false,\n    \"end\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hash History with UmiJS (TypeScript)\nDESCRIPTION: This snippet illustrates the creation of a HashHistory instance using the createHashHistory function from UmiJS. HashHistory stores the current location in the URL's hash portion, avoiding server requests during route changes. Useful for scenarios where full server control is limited.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// create a HashHistory\nimport { createHashHistory } from 'umi';\nconst history = createHashHistory();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock File Inclusion in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure mock file inclusion in UmiJS. It shows how to include all `_mock.ts` files under the `src/pages` directory as mock files. This is done using the `include` parameter within the `mock` configuration option, allowing for easy management of mock data for development purposes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// Make all _mock.ts files under pages become mock files\nmock: {\n  include: ['src/pages/**/_mock.ts'],\n}\n```\n\n----------------------------------------\n\nTITLE: Register Micro-Generator with UmiJS\nDESCRIPTION: This code snippet demonstrates how to register a micro-generator in UmiJS using the `api.registerGenerator` method. It creates an .editorconfig file in the project's root directory if one does not already exist. The generator is of type `generate` and includes a key, name, and description for identification and user interaction.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GeneratorType } from '@umijs/core';\nimport { logger } from '@umijs/utils';\nimport { join } from 'path';\nimport { writeFileSync } from 'fs';\n\napi.registerGenerator({\n  key: 'editorconfig',\n  name: 'Create .editorconfig',\n  description: 'Setup editorconfig config',\n  type: GeneratorType.generate,\n  fn: () => {\n    const configFilePath = join(api.cwd, '.editorconfig')\n    if (existsSync(configFilePath)) {\n      logger.info(`The .editorconfig file already exists.`)\n      return\n    }\n    writeFileSync(\n      configFilePath,\n      `\n# 🎨 http://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n`.trimStart(),\n      'utf-8'\n    )\n    logger.info(`Generate .editorconfig file successful.`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Refreshing MicroApp - React/TSX\nDESCRIPTION: This code snippet shows how to manually refresh a micro-application using the MicroApp component and a ref.  It defines a functional component that uses useRef to hold a reference to the MicroApp component. The updateMicroApp function calls the update method on the MicroApp instance, triggering a refresh of the child application. Requires 'react' and 'umi' dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef } from 'react';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  const microAppRef = useRef();\n\n  // When this method is executed, the child application is updated\n  const updateMicroApp = () => {\n    microAppRef.current?.update();\n  };\n\n  return <MicroApp name=\"app1\" ref={microAppRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Extend ESLint configuration\nDESCRIPTION: Extend the ESLint configuration in `.eslintrc.js` to inherit Umi's recommended ESLint rules. Different paths are used for Umi and Umi Max projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n  // Umi 项目\n  extends: require.resolve('umi/eslint'),\n\n  // Umi Max 项目\n  extends: require.resolve('@umijs/max/eslint'),\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Externals Configuration with MFSU in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to conditionally configure externals based on the environment. It avoids compatibility issues between externals scripts and Module Federation when MFSU is enabled. In production environments (`process.env.NODE_ENV === 'production'`), an external script for 'b' is defined. In other environments, the externals configuration is empty.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexternals: {\n  ...(process.env.NODE_ENV === 'production' ? {b: ['script https://cdn/b.js', b]} : {})\n}\n```\n\n----------------------------------------\n\nTITLE: Use Route Props Hook Example Typescript\nDESCRIPTION: Demonstrates using `useRouteProps` to read custom properties from the current route configuration. This allows accessing route-specific data within a component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nroutes: [\n  {\n    path: '/',\n    custom_key: '1',\n  }\n]\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouteProps } from 'umi'\n\nexport default function Page() {\n  const routeProps = useRouteProps()\n\n  // use `routeProps.custom_key`\n} \n```\n\n----------------------------------------\n\nTITLE: Creating a Simple UmiJS Model\nDESCRIPTION: This code defines a basic UmiJS Model, exporting a function that returns an object containing the state.  The plugin transforms the state in the model into global data, providing it to different components that use the Model.  This example defines a `user` object with a `username` property.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nexport default function Page() {\n  const user = {\n    username: 'umi',\n  };\n\n  return { user };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Commit Verification (JavaScript)\nDESCRIPTION: This code snippet configures the `verifyCommit` options in UmiJS, specifying allowed scopes for commit messages and enabling emoji prefixes. This helps enforce commit message conventions within the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyCommit: {\n  scope: ['feat', 'fix'],\n  allowEmoji: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Using onMounted Hook in UmiJS with Vue\nDESCRIPTION: This code snippet demonstrates using the `onMounted` hook in `src/app.tsx` to access the Vue app and router instances.  It allows performing actions after the Vue app has been mounted, such as registering global components or setting up route interceptors.  The example shows providing a global property 'umi-hello' to all components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function onMounted({ app, router }: any) {\n  console.log('onMounted', app, router);\n  app.provide('umi-hello', {\n    h: 'hello',\n    w: 'word',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: getConfigFromEntryFile Example\nDESCRIPTION: Shows how to define page configurations directly within the entry file using `export const config` when `getConfigFromEntryFile` is enabled.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pages/foo/index.tsx\nexport const config = {\n  layout: '@/layouts/bar.ts',\n  title: 'foooooo',\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Flow Plugins in UmiJS\nDESCRIPTION: This example demonstrates how to enable the initial state and model plugins in UmiJS to leverage data flow features. It involves adding the plugins to the `.umirc.ts` configuration file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  plugins: [\n    '@umijs/plugins/dist/initial-state',\n    '@umijs/plugins/dist/model',\n  ],\n  initialState: {},\n  model: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Type Definitions Explicitly\nDESCRIPTION: Explicitly import type definitions from .d.ts files to avoid errors in Umi 4 where implicit type resolution is no longer supported. Requires explicit import statements.  The import statement explicitly specifies the type definition file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- import { ButtonType } from './button';\n+ import type { ButtonType } from './button.d';\n```\n\n----------------------------------------\n\nTITLE: User Registration API Endpoint in UmiJS\nDESCRIPTION: This TypeScript code defines an API endpoint for user registration using UmiJS, Prisma, and bcrypt.  It handles POST requests to create new users, encrypts passwords using bcrypt, generates a JWT token using `signToken`, sets a cookie, and returns user data (excluding the password hash). It includes error handling and database connection management.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api/register.ts\n\nimport type { UmiApiRequest, UmiApiResponse } from 'umi';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport { signToken } from '@/utils/jwt';\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  switch (req.method) {\n    // 如果对这个路径发起 POST 请求，代表他想要注册一个账号\n    case 'POST':\n      try {\n        // 建立一个 Prisma 客户端，他可以帮助我们连线到数据库\n        const prisma = new PrismaClient();\n\n        // 在数据库的 User 表中建立一个新的数据\n        const user = await prisma.user.create({\n          data: {\n            email: req.body.email,\n\n            // 密码是经过 bcrypt 加密的\n            passwordHash: bcrypt.hashSync(req.body.password, 8),\n            name: req.body.name,\n            avatarUrl: req.body.avatarUrl,\n          },\n        });\n\n        // 把建立成功的用户数据（不包含密码）和 JWT 回传给前端\n        res\n          .status(201)\n          .setCookie('token', await signToken(user.id))\n          .json({ ...user, passwordHash: undefined });\n\n        // 处理完请求以后记得断开数据库链接\n        await prisma.$disconnect();\n      } catch (e: any) {\n        // 如果发生未预期的错误，将对应的错误说明的 Prisma 文档发给用户\n        res.status(500).json({\n          result: false,\n          message:\n            typeof e.code === 'string'\n              ? 'https://www.prisma.io/docs/reference/api-reference/error-reference#' +\n                e.code.toLowerCase()\n              : e,\n        });\n      }\n      break;\n    default:\n      // 如果不是 POST 请求，代表他正在用错误的方式访问这个 API\n      res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install @umijs/lint package\nDESCRIPTION: Install the @umijs/lint package as a development dependency. This provides the linting module for Umi projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @umijs/lint -D\n# or\n$ pnpm add @umijs/lint -D\n```\n\n----------------------------------------\n\nTITLE: Configure Child Application\nDESCRIPTION: This code snippet illustrates how to configure the child application in UmiJS to export lifecycle hooks for the parent application to call using the qiankun plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    slave: {},\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Mock File with defineMock\nDESCRIPTION: Example Mock file demonstrating how to use `defineMock` to get code hints when writing mock objects. `defineMock` is a helper function that only provides type hints, and its input and output parameters are identical.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMock } from \"umi\";\n\nexport default defineMock({\n  \"/api/users\": [\n    { id: 1, name: \"foo\" },\n    { id: 2, name: \"bar\" },\n  ],\n  \"/api/users/1\": { id: 1, name: \"foo\" },\n  \"GET /api/users/2\": (req, res) => {\n    res.status(200).json({ id: 2, name: \"bar\" });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Style\nDESCRIPTION: This snippet demonstrates how to import a CSS file into a `.tsx` file in an Umi project. The imported CSS styles will be applied globally.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport './index.css';\n\nexport default function () {\n  return <div className=\"title\">Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS project with Yarn\nDESCRIPTION: This snippet demonstrates creating a UmiJS project with yarn.  It utilizes yarn's create command to execute the `create-umi` package. It creates a simple app and configures the npm registry to taobao.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create umi\nsuccess Installed \"create-umi@4.0.6\" with binaries:\n      - create-umi\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › yarn\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy: src/assets/yay.jpg\nCopy: src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy: src/pages/docs.tsx\nCopy: src/pages/index.tsx\nWrite: tsconfig.json\nCopy: typings.d.ts\nyarn install v1.22.18\nsuccess Saved lockfile.\n$ umi setup\ninfo  - generate files\n```\n\n----------------------------------------\n\nTITLE: Check UmiJS Dead Code\nDESCRIPTION: This command identifies and lists unused files in the UmiJS project's `src` directory. It helps in cleaning up the project and removing unnecessary code. The output is written to a file in the root directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ umi deadcode\n```\n\n----------------------------------------\n\nTITLE: Setting Locale with setLocale (TypeScript)\nDESCRIPTION: These snippets demonstrate how to dynamically set the application's locale using the setLocale function from Umi. The first example refreshes the page after changing the locale, while the second example prevents the page from refreshing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLocale } from 'umi';\n\n// 切换时刷新页面\nsetLocale('en-US');\n\n// 切换时不刷新页面\nsetLocale('en-US', false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Routes in UmiJS (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure sub-routes in UmiJS using the `routes` property within a route configuration.  A layout component (`@/layouts/index`) is used to wrap the sub-routes `/list` and `/admin`. This allows for a consistent layout to be applied to multiple pages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  routes: [\n    { path: '/login', component: 'login' },\n    {\n      path: '/',\n      component: '@/layouts/index',\n      routes: [\n        { path: '/list', component: 'list' },\n        { path: '/admin', component: 'admin' },\n      ],\n    }, \n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Polyfills in UmiJS\nDESCRIPTION: This snippet demonstrates how to import specific polyfills on demand in UmiJS. It shows how to import `core-js/features/promise/try` and `core-js/proposals/math-extensions`. This configuration provides granular control over which polyfills are included, allowing for further bundle size optimization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\npolyfill: {\n  imports: ['core-js/features/promise/try', 'core-js/proposals/math-extensions'],\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Enable React Query in UmiJS\nDESCRIPTION: This snippet shows how to install the `@umijs/plugins` dependency and then enable the `@umijs/plugins/dist/react-query` plugin in a standard UmiJS project. It assumes `pnpm` is the package manager. The `reactQuery` configuration enables default React Query features.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i @umijs/plugins -D\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: ['@umijs/plugins/dist/react-query'],\n  reactQuery: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Application Data Injection via useQiankunStateForSlave\nDESCRIPTION: This code shows how the parent application provides data to the sub-application through the `useQiankunStateForSlave` function.  The function's return value is passed as props to the sub-application when imported via route-based method.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport function useQiankunStateForSlave() {\n  const [globalState, setGlobalState] = useState<any>({\n    slogan: 'Hello MicroFrontend',\n  });\n\n  return {\n    globalState,\n    setGlobalState,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling esbuild for MFSU in UmiJS\nDESCRIPTION: This snippet shows how to enable esbuild for dependency pre-compilation within the MFSU (Module Federation Speed Up) configuration in UmiJS. Setting `esbuild` to `true` uses esbuild for faster initial startup times. This is recommended for projects with stable dependencies, as secondary compilations might be slightly slower.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// Use esbuild for dependency pre-compilation\nmfsu: {\n  esbuild: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating match in class components with matchPath\nDESCRIPTION: This snippet demonstrates how to use `matchPath` in class components in Umi 4 to access route parameters. It replaces `this.props.match` with a calculated `this.match` property using `matchPath`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nimport { matchPath } from 'umi';\nclass Page extends Component {\n+  match = matchPath({ path: 'list/search/:type' }, window.location.pathname);\n  state = {}\n  render() {\n    return (\n      <div>\n-        {this.props.match.type}\n+        {this.match.type} \n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Umi's history Instead of props.history\nDESCRIPTION: This snippet demonstrates how to use Umi's `history` object instead of accessing it through `props.history` after upgrading to Umi 4. It necessitates importing { history } from 'umi'. It enables navigation using the Umi's history API.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+ import { history } from 'umi';\nexport default function Page(props) {\n  return (\n    <div onClick={()=>{\n-          props.history.push('list');\n+          history.push('list');\n    }}>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Locale with getLocale (TypeScript)\nDESCRIPTION: This snippet demonstrates how to get the currently selected locale using the getLocale function from Umi.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocale } from 'umi';\n\ngetLocale();\n// zh-CN\n```\n\n----------------------------------------\n\nTITLE: Configuring Scripts in UmiJS\nDESCRIPTION: This snippet shows how to configure additional script tags to be added to the `<body>` of the HTML.  The `scripts` array can contain inline scripts as strings or external script URLs. External script URLs are added using `<script src=\"...\"></script>`. Inline scripts are added using `<script>...</script>`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nscripts: [`alert(1);`, `https://a.com/b.js`],\n```\n\n----------------------------------------\n\nTITLE: Using intl.formatMessage with Values - TypeScript\nDESCRIPTION: Demonstrates how to use `intl.formatMessage` with a values object to dynamically insert values into a translated string. The values are passed as the second parameter to `formatMessage`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  the msg = intl.formatMessage(\n    {\n      id: 'user.welcome',\n    },\n    {\n      name: '张三',\n    },\n  );\n\n  return <p>{msg}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Valtio Redo & Undo Support with UmiJS\nDESCRIPTION: This snippet demonstrates how to add Redo and Undo functionality to Valtio state using `proxyWithHistory` from UmiJS. It includes methods for undoing, redoing, and accessing the history of state changes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithHistory } from 'umi';\n\nconst state = proxyWithHistory({\n  count: 0,\n});\nstate.value.count;\nstate.value.count += 1;\nstate.undo();\nstate.redo();\nstate.history;\n```\n\n----------------------------------------\n\nTITLE: Dva Model Definition in UmiJS\nDESCRIPTION: This code snippet demonstrates the structure of a Dva model within a UmiJS application. It defines the state, effects, and reducers for managing user data. The `queryUser` effect fetches user data from an API and updates the state using the `queryUserSuccess` reducer. The `test` function is included for demonstration and returns the state unchanged.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { queryUsers, queryUser } from '../../services/user';\n\nexport default {\n  state: {\n    user: {},\n  },\n\n  effects: {\n    *queryUser({ payload }, { call, put }) {\n      const { data } = yield call(queryUser, payload);\n      yield put({ type: 'queryUserSuccess', payload: data });\n    },\n  },\n\n  reducers: {\n    queryUserSuccess(state, { payload }) {\n      return {\n        ...state,\n        user: payload,\n      };\n    },\n  },\n\n  test(state) {\n    console.log('test');\n    return state;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Tags in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure additional meta tags in UmiJS. It shows how to define meta tag properties like 'name' and 'content' within the `metas` configuration option. This configuration allows you to add custom meta tags to your HTML head, improving SEO and providing additional metadata.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nmetas: [\n  { name: 'keywords', content: 'umi, umijs' },\n  { name: 'description', content: 'React framework.' },\n],\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Database Connection String\nDESCRIPTION: Shows the database connection string that needs to be obtained from PlanetScale after creating a database.  This string will be used by Prisma to connect to the MySQL database.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL='mysql://************:************@************.ap-southeast-2.psdb.cloud/umi-blog-example?sslaccept=strict'\n```\n\n----------------------------------------\n\nTITLE: Releasing Umi\nDESCRIPTION: This command releases Umi. Only Core Maintainers can carry out releases.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm release\n```\n\n----------------------------------------\n\nTITLE: Register Hook Example (Add Type) - TypeScript\nDESCRIPTION: Shows an example of registering hooks with `api.register` for the `'addFoo'` key, demonstrating both synchronous and asynchronous functions, and using `api.applyPlugins` to concatenate results.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.register({\n  key: 'addFoo',\n  // Synchronous\n  fn: (args) => args\n});\n\napi.register({\n  key: 'addFoo',\n  // Asynchronous\n  fn: async (args) => args * 2\n})\n\napi.applyPlugins({\n  key: 'addFoo',\n  // key is add type, no need to explicitly declare as api.ApplyPluginsType.add\n  args: 1\n}).then((data)=>{\n  console.log(data); // [1, 2]\n})\n```\n\n----------------------------------------\n\nTITLE: Running Scripts in UmiJS\nDESCRIPTION: This command allows running TypeScript and ESM files directly using the UmiJS CLI, similar to running JavaScript files with Node.js. It can be used with tools like zx for enhanced script command usability, facilitating the execution of scripts written in modern JavaScript or TypeScript within the project environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ umi run ./script.ts\n```\n\n----------------------------------------\n\nTITLE: Using FormattedMessage with Values (TSX)\nDESCRIPTION: This snippet shows how to use the FormattedMessage component to display a translated string with dynamic values.  The `values` prop is used to pass an object containing the values for the placeholders in the translated string.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <p>\n      <FormattedMessage id=\"user.welcome\" values={{ name: '张三' }} />\n    </p>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Plugins in Configuration File\nDESCRIPTION: This code shows how to configure plugins in the UmiJS configuration file using the `presets` and `plugins` options. The content of each option is the path to the plugin or preset.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  presets: ['./preset/foo','bar/presets'],\n  plugins: ['./plugin', require.resolve('plugin_foo')]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Locale in Umi Config (umirc.ts) - TypeScript\nDESCRIPTION: Configures the internationalization plugin in the `.umirc.ts` file. It sets the default locale to 'zh-CN' and defines the base separator for locale files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  locale: {\n    // Default to using src/locales/zh-CN.ts as a multilingual file\n    default: 'zh-CN',\n    baseSeparator: '-',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring headScripts in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to add extra scripts to the `<head>` section of your HTML in UmiJS. It shows how to add inline scripts and external scripts with or without attributes. This allows you to include analytics scripts, custom scripts, or external libraries directly in the head of your HTML document.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nheadScripts: [`alert(1);`, `https://a.com/b.js`],\n```\n\n----------------------------------------\n\nTITLE: CSS Modules with Preprocessors\nDESCRIPTION: Demonstrates CSS Modules with LESS, SASS, and SCSS. Styles are imported and accessed via module variables. This ensures component-specific styling and avoids naming conflicts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport lessStyles from './index.less';\nimport sassStyles from './index.sass';\nimport scssStyles from './index.scss';\n\nexport default function () {\n  return <div className={lessStyles.title}>\n    Hello World\n    <p className={sassStyles.blue}>I am blue</p>\n    <p className={scssStyles.red}>I am red</p>\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Build-time Layout Configuration in UmiJS\nDESCRIPTION: This snippet shows how to configure the layout at build time using the `defineConfig` function in UmiJS.  It sets the application title and disables locale-based menu internationalization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  layout: {\n    title: 'Ant Design',\n    locale: false, // Default is enabled, can be disabled if menu internationalization is not needed\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page in Directory Mode\nDESCRIPTION: This command generates a page named 'bar' in directory mode, creating an 'index.tsx' and 'index.less' file within the 'bar' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page bar --dir\n```\n\n----------------------------------------\n\nTITLE: Effective MFSU Configuration\nDESCRIPTION: This snippet illustrates the final effective configuration after the UmiJS MF plugin has automatically modified the MFSU settings. It showcases how the `remoteName`, `remoteAliases`, and `shared` dependencies are incorporated into the `mfsu` configuration, enabling MF modules to be debugged during development (DEV) stage. It combines both the modified MFSU configuration with the original MF configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mfsu: {\n    // mf plugin automatically fills in the following default configurations compatible with MFSU\n    // MFSU can also debug MF modules in the DEV stage\n    remoteName: 'remoteMFName', \n    remoteAliases: ['remote1', 'aliasRemote'],\n    shared: {\n      react: {\n        singleton: true,\n        eager: true,\n      },\n      'react-dom': {\n        singleton: true,\n        eager: true,\n      }\n    }\n  },\n  mf: {\n    name: 'remoteMFName',\n    remotes: [\n      {\n        name: 'remote1',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n      {\n        aliasName: 'aliasRemote',\n        name: 'remote2',\n        entry: 'https://to.the.remote.com/remote2.js',\n      },\n    ],\n    shared: {\n      react: {\n        singleton: true,\n        eager: true,\n      },\n      'react-dom': {\n        singleton: true,\n        eager: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm for dependency management\nDESCRIPTION: This command downloads and executes the pnpm installation script.  pnpm is a package manager recommended for Umi.js projects.  Requires curl.  No direct output is expected from the installation script.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n```\n\n----------------------------------------\n\nTITLE: Start UmiJS Dev Server with SOCKET_SERVER (bash)\nDESCRIPTION: This command starts the UmiJS development server while setting the `SOCKET_SERVER` environment variable. This prevents constant page reloads due to socket server connection issues when using XSwitch.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$SOCKET_SERVER=http://127.0.0.1:8000/ npx umi dev\n```\n\n----------------------------------------\n\nTITLE: Configure lint-staged in package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure lint-staged in `package.json` to run `umi lint` on JavaScript, TypeScript, CSS, and Less files.  This configuration ensures that linting is performed before code is committed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n+   \"lint-staged\": {\n+     \"*.{js,jsx,ts,tsx,css,less}\": [\n+       \"umi lint\"\n+     ]\n+   }\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS clientLoader Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to configure the clientLoader feature. It enables data preloading by configuring the `clientLoader` option in the UmiJS configuration file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  clientLoader: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Initial State with useModel (TSX)\nDESCRIPTION: This snippet demonstrates how to access the global initial state using the `useModel` hook provided by UmiJS. The `useModel` hook returns the initial state, a loading indicator, an error object, a refresh function, and a function to manually set the initial state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModel } from \"umi\";\n\nexport default function Page() {\n  const { initialState, loading, error, refresh, setInitialState } =\n    useModel(\"@@initialState\");\n  return <>{initialState}</>;\n}\n```\n\n----------------------------------------\n\nTITLE: String Formatting - en-US.ts - TypeScript\nDESCRIPTION: Defines multilingual content with placeholders in a TypeScript file for the English (United States) locale. The `{name}` placeholder allows for dynamic string interpolation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  user: {\n    welcome: '{name}, what a nice day!',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles with styled-components (TypeScript)\nDESCRIPTION: This code snippet illustrates how to define global styles using styled-components and the `createGlobalStyle` function from `umi`.  The `GlobalStyle` component is then configured in the `styledComponents` runtime configuration. This allows for injecting global CSS rules into the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGlobalStyle } from \"umi\";\n\nexport const styledComponents = {\n  GlobalStyle: createGlobalStyle`\n    h1 {\n      background: #ccc;\n    }\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS project with pnpm\nDESCRIPTION: This snippet demonstrates how to create a new UmiJS project using the `create-umi` tool with pnpm.  The command initializes a new UmiJS project in the current directory using default settings, including using pnpm as the package manager and taobao as the npm registry.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dlx create-umi@latest\n✔ Install the following package: create-umi? (Y/n) · true\n✔ Pick Npm Client › pnpm\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nCopy: layouts/index.tsx\nWrite: package.json\nCopy: pages/index.tsx\nCopy: pages/users.tsx\nCopy: pages/users/foo.tsx\n> @ postinstall /private/tmp/sorrycc-vylwuW\n> umi setup\ninfo  - generate files\n```\n\n----------------------------------------\n\nTITLE: Selecting Environment Variables for Cache Versioning\nDESCRIPTION: This code snippet demonstrates how to selectively include environment variables in the cache versioning process. It creates a hash based on specific environment variables that are likely to affect the project's build. This approach prevents unnecessary cache invalidation due to unrelated changes in environment variables within a CI/CD pipeline.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/webpack-5-prod-cache.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 如挑选可能会影响项目内容的环境变量\ncreateEnvironmentHash({\n  NODE_ENV: process.env.NODE_ENV,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration with UmiJS (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the runtime configuration for a UmiJS application using the `defineApp` method.  It exports a default configuration object that defines the `layout` property. This approach provides TypeScript hints for better development experience.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineApp } from 'umi';\nexport default defineApp({\n  layout: () => {\n    return {\n      title: 'umi',\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Title via mpa.entry\nDESCRIPTION: Configuring page specific settings, like title, inside the `.umirc.ts` file using the `mpa.entry` option.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  mpa: {\n    entry: {\n      foo: { title: 'foo title' }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Detecting Dead Code in UmiJS Project\nDESCRIPTION: This command identifies unused or unreferenced files in the `src` directory of the UmiJS project. It helps developers identify and remove dead code, improving project maintainability and reducing bundle size. The list of dead code is output to a file in the root directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ umi deadcode\n```\n\n----------------------------------------\n\nTITLE: Configuring Phantom Dependency Exclusions in UmiJS\nDESCRIPTION: This snippet configures the `phantomDependency` option to exclude specific packages from phantom dependency checks.  When UmiJS detects a usage of a package that's not declared in `package.json`, it will throw an error. This configuration excludes the `lodash` package from these checks, allowing its use without explicit declaration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  phantomDependency: {\n    exclude: ['lodash']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main App Passes Data (Routing Method) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to pass data from the parent application to child applications when introduced through the routing method. It exports a function named `useQiankunStateForSlave()` in the `src/app.ts` of the parent application. The return value of this function, containing `globalState` and `setGlobalState`, is passed to the child application.  Requires UmiJS and Qiankun setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n// src/app.ts\nexport function useQiankunStateForSlave() {\n  const [globalState, setGlobalState] = useState<any>({\n    slogan: 'Hello MicroFrontend',\n  });\n\n  return {\n    globalState,\n    setGlobalState,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hash History in UmiJS (TypeScript)\nDESCRIPTION: Creates a HashHistory instance, storing the current location in the URL's hash part. Recommended for environments where server-side control is limited or in Electron applications. The default window is the current document's defaultView.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// create a HashHistory\nimport { createHashHistory } from 'umi';\nconst history = createHashHistory();\n```\n\n----------------------------------------\n\nTITLE: Integrating Mock.js for Random Data\nDESCRIPTION: This snippet demonstrates how to integrate Mock.js to generate random and realistic mock data.  Using Mock.js allows you to define patterns for data generation, making the mock data more dynamic and representative.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport mockjs from 'mockjs';\n\nexport default {\n  // Using third-party libraries like mockjs\n  'GET /api/tags': mockjs.mock({\n    'list|100': [{ name: '@city', 'value|1-100': 50, 'type|0-2': 1 }],\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts with useEffect in UmiJS\nDESCRIPTION: This TypeScript/JSX code snippet demonstrates how to fetch blog posts from an API endpoint using `useEffect` in a UmiJS React component. It defines an asynchronous `refresh` function to fetch the data and update the `posts` state.  The `useEffect` hook is used to call `refresh` when the component mounts, and handles potential errors during the fetch operation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/index.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { history } from 'umi';\n\nexport default function HomePage() {\n  const [posts, setPosts] = useState<any[]>();\n\n  async function refresh() {\n    try {\n      const res = await fetch('/api/posts');\n      if (res.status !== 200) {\n        console.error(await res.text());\n      }\n      setPosts(await res.json());\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  return (\n    <div>\n      {!posts && <p>Loading...</p>}\n      {posts && (\n        <div>\n          {posts.map((post) => (\n            <div key={post.id}>\n              <div onClick={() => history.push(`/posts/${post.id}`)}>\n                <p>{post.title}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Outlet Context via useOutletContext\nDESCRIPTION: This snippet shows how to access context passed to the `Outlet` component using `useOutletContext` in a child component after upgrading to Umi 4. Requires importing { useOutletContext } from 'umi'.  The component is updated to receive props from Outlet context.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { useOutletContext } from 'umi';\n\n- export function Comp(props){\n+ export function Comp() {\n+   const props = useOutletContext();\n\n  return props.someProp;\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Level Configuration via Entry File\nDESCRIPTION: This TypeScript snippet demonstrates how to configure page-specific settings by exporting a `config` object directly from the entry file. It defines the layout and title for a specific page. This method requires enabling the `getConfigFromEntryFile` option in the Umi configuration. This is an alternative to using `config.json` files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pages/foo/index.tsx\nexport const config = {\n  layout: '@/layouts/bar.ts',\n  title: 'foooooo',\n}\n```\n\n----------------------------------------\n\nTITLE: Use Route Data Hook Definition Typescript\nDESCRIPTION: Defines the `useRouteData` hook, which returns the route data of the currently matched route. The returned data includes route configuration properties like path, id, parentId, and file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useRouteData(): {\n  route: Route;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Modules in Regular Umi Projects (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the Module Federation plugin in a standard UmiJS project.  It involves importing the `@umijs/plugins/dist/mf` plugin and then configuring the `mf` option with remote module information and shared dependencies. The plugin must be explicitly included in the `plugins` array.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nimport { defineConfig } from 'umi';\n\nconst shared = {\n  react: {\n    singleton: true,\n    eager: true,\n  },\n  'react-dom': {\n    singleton: true,\n    eager: true,\n  },\n};\n\nexport default defineConfig({\n  plugins: ['@umijs/plugins/dist/mf'], // Import plugin\n  mf: {\n    remotes: [\n      {\n        // Optional, if not configured, the current remotes[].name field is used\n        aliasName: 'mfNameAlias',\n        name: 'theMfName',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n    ],\n\n    // Configure MF shared modules\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Parent App Lifecycle Configuration - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure lifecycle hooks globally for all child applications in the parent application. It exports a `qiankun` object in `src/app.ts` with a `lifeCycles` property. The `afterMount` hook is defined to log the props information when mounting is finished for any child app.  Requires UmiJS and Qiankun setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  lifeCycles: {\n    // For all child applications, print props information when mounting is finished\n    async afterMount(props) {\n      console.log(props);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Start UmiJS development server\nDESCRIPTION: This command starts the UmiJS development server, which provides hot reloading and other development-friendly features. It typically listens on port 8000.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev\n        ╔═════════════════════════════════════════════════════╗\n        ║ App listening at:                                   ║\n        ║  >   Local: https://127.0.0.1:8000                  ║\nready - ║  > Network: https://192.168.1.1:8000                ║\n        ║                                                     ║\n        ║ Now you can open browser with the above addresses👆 ║\n        ╚═════════════════════════════════════════════════════╝\nevent - compiled successfully in 1121 ms (388 modules)\nevent - MFSU compiled successfully in 1308 ms (875 modules)\n```\n\n----------------------------------------\n\nTITLE: Configuration-Based Communication - TypeScript\nDESCRIPTION: This code snippet demonstrates how to pass data from the parent application to a child application using the configuration-based approach.  The `props` attribute is used within the `apps` array of the `qiankun` configuration to define the data to be passed to the child app. These props are then available within the child application's lifecycle hooks. Requires UmiJS and Qiankun setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  apps: [\n    {\n      name: 'app1',\n      entry: '//localhost:7001',\n      props: {\n        accountOnClick: (event) => console.log(event),\n        accountName: 'Alex',\n        accountAge: 21,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling peerDeps Redirect in UmiJS\nDESCRIPTION: This snippet shows how to enable automatic alias redirection for peer dependencies in a monorepo setup in UmiJS. Setting `peerDeps` to `true` ensures that all peer dependencies specified by sub-packages are aliased for uniqueness, avoiding multiple instances of the same dependency and maintaining consistency with npm installations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nmonorepoRedirect: { peerDeps: true }\n```\n\n----------------------------------------\n\nTITLE: Conditional Layout Rendering (JavaScript)\nDESCRIPTION: Demonstrates how to conditionally render different layouts in UmiJS based on the current route using the `useLocation` hook. This allows you to apply different layouts to specific parts of your application, such as a simple layout for the login page and a more complex layout for the rest of the application. It renders the `<SimpleLayout>` component if the path is '/login'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLocation, Outlet } from 'umi';\n\nexport default function() {\n  const location = useLocation();\n  if (location.pathname === '/login') {\n    return <SimpleLayout><Outlet /></SimpleLayout>\n  }\n\n  // 使用 `useAppData` / `useSelectedRoutes` 可以获得更多路由信息\n  // const { clientRoutes } = useAppData()\n  // const routes = useSelectedRoutes()\n\n  return (\n    <>\n      <Header />\n      <Outlet />\n      <Footer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stylus\nDESCRIPTION: This command installs the stylus preprocessor as a dev dependency, which is required to use `.styl` and `.stylus` files in Umi projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# .styl and .stylus\nnpm add -D stylus\n```\n\n----------------------------------------\n\nTITLE: Formatting Strings with intl (TypeScript)\nDESCRIPTION: These snippets demonstrate how to define internationalized content with dynamic placeholders using TypeScript.  Special syntax `{name}` allows us to dynamically assign values at runtime using the `values` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  user: {\n    welcome: '{name}，今天也是美好的一天！',\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  user: {\n    welcome: '{name}, what a nice day!',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use CSS Modules to scope styles to a specific component. It imports a CSS file as `styles` and then uses `styles.title` to apply the style.  This prevents style conflicts by automatically generating unique class names.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport styles from './index.css';\n\nexport default function () {\n  return <div className={styles.title}>\n    Hello World\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in JSX\nDESCRIPTION: This JSX snippet shows how to import a CSS file into a React component. The imported styles will be applied globally unless CSS Modules are used. It renders a `div` with the class name `title`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport './index.css';\n\nexport default function () {\n  return <div className=\"title\">Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Information in UmiJS (TypeScript)\nDESCRIPTION: Shows how to access the current route information including pathname, search query, and hash outside of React components and Hooks, using `window.location`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// location object, contains pathname, search, and hash\nwindow.location.pathname;\nwindow.location.search;\nwindow.location.hash;\n```\n\n----------------------------------------\n\nTITLE: Customizing Legacy Mode with extraBabelIncludes (TypeScript)\nDESCRIPTION: This snippet showcases how to customize legacy mode by disabling `node_modules` transformation and using `extraBabelIncludes` to specify packages that need extra transformation. This is useful when only certain dependencies require ES5 transpilation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  legacy: {\n    nodeModulesTransform: false,\n  },\n  extraBabelIncludes: ['some-es6-pkg', /@scope\\//],\n};\n```\n\n----------------------------------------\n\nTITLE: Create UmiJS project with PNPM\nDESCRIPTION: This command uses `pnpm dlx` to execute the `create-umi` tool and creates a new UmiJS project. It installs the necessary packages and initializes the project structure.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dlx create-umi@latest\n✔ Install the following package: create-umi? (Y/n) · true\n✔ Pick Npm Client › pnpm\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nCopy:  layouts/index.tsx\nWrite: package.json\nCopy:  pages/index.tsx\nCopy:  pages/users.tsx\nCopy:  pages/users/foo.tsx\n> @ postinstall /private/tmp/sorrycc-vylwuW\n> umi setup\ninfo  - generate files\n```\n\n----------------------------------------\n\nTITLE: Component-based Sub-application Integration (Parent)\nDESCRIPTION: This code shows how to import a sub-application using the `<MicroApp />` component in a parent application's React component. The `name` prop specifies which sub-application to load.  The optional `base` prop ensures proper routing if the parent application has a route prefix.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" base=\"/prefix/router-path\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Runtime Public Path (JavaScript)\nDESCRIPTION: This code snippet enables runtime publicPath in UmiJS, which allows the application to dynamically determine the base path for loading resources at runtime using `window.publicPath`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nruntimePublicPath: {}\n```\n\n----------------------------------------\n\nTITLE: Enable react-query in @umijs/max\nDESCRIPTION: This code snippet demonstrates how to enable react-query in a project using @umijs/max. It configures the `reactQuery` option in the main configuration file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  reactQuery: {},\n}\n```\n\n----------------------------------------\n\nTITLE: RequestConfig interface definition\nDESCRIPTION: Defines the RequestConfig interface, used to configure runtime request settings with TypeScript.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestConfig } from 'umi';\n\nexport const request:RequestConfig = {};\n```\n\n----------------------------------------\n\nTITLE: Testing reverse object with Jest (TypeScript)\nDESCRIPTION: This Jest test case tests the `reverseApiData` function's ability to reverse key-value pairs in a simple object. It mocks the `fetcher` function to return a JSON object with a `data` property and asserts that the returned object from `reverseApiData` has the keys and values reversed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('reverseApiData reverse simple object', async () => {\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve({ data: { a: 'b' } }),\n  });\n\n  const reversed = await reverseApiData('url', fetcher);\n\n  expect(reversed).toEqual({ b: 'a' });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring styled-components Babel plugin\nDESCRIPTION: This code snippet shows how to configure the styled-components Babel plugin within the Umi configuration. This enables additional features like displayName and SSR support during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {\n    babelPlugin: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example .env File\nDESCRIPTION: This shows how to define environment variables in a `.env` file. Variables set in this file are automatically loaded by UmiJS.  The example defines `PORT` and `BABEL_CACHE`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# file .env\nPORT=3000\nBABEL_CACHE=none\n```\n\n----------------------------------------\n\nTITLE: Rendering Pro Table with Member Data\nDESCRIPTION: This React component uses the `ProTable` component to render a table displaying member data.  It defines the table columns using `ProColumns` and provides a `request` function to fetch and process the data. It also configures pagination and disables the toolbar and search.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\n\n// resolve member info list\n\nconst MemberList: React.FC = () => {\n  const columns: ProColumns<Member>[] = [\n    {\n      dataIndex: 'realName',\n      title: '姓名',\n    },\n    {\n      dataIndex: 'nickName',\n      title: '昵称',\n    },\n    {\n      dataIndex: 'email',\n      title: '账号',\n    },\n    {\n      dataIndex: 'phone',\n      title: '手机号',\n    },\n    {\n      title: '操作',\n      dataIndex: 'x',\n      valueType: 'option',\n      render: (_, record) => {\n        return [<a key=\"edit\">编辑</a>, <a key=\"remove\">移除</a>];\n      },\n    },\n  ];\n\n  return (\n    <ProTable<Member>\n      columns={columns}\n      request={(params, sorter, filter) => {\n        console.log(params, sorter, filter);\n        return Promise.resolve({\n          data: memberList,\n          success: true,\n        });\n      }}\n      rowKey=\"id\"\n      pagination={{\n        showQuickJumper: true,\n      }}\n      toolBarRender={false}\n      search={false}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with Promise\nDESCRIPTION: This code snippet shows how to dispatch an action from a component and handle the Promise returned by the dispatch method. It dispatches an action with a type, and some test data. It handles the asynchronous nature of the dispatch call, waiting for the action to complete using .then().\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender () {\n  return <div onClick={() => {\n   this.props.dispacth({\n    type: 'modelnamespace/actionname',\n    sometestdata: 'xxx',\n    othertestata: {},\n  }).then(() => {\n    // it will return a promise\n    // action success\n  });\n  }}>test</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Run UmiJS Linter\nDESCRIPTION: This command runs the UmiJS linter to check code style and quality. It can be configured to check only JavaScript/TypeScript files or only CSS/LESS files. It helps enforce coding standards and identify potential errors.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ umi lint\n```\n\n----------------------------------------\n\nTITLE: Using safeMfImport for Remote Module Loading\nDESCRIPTION: This code snippet demonstrates the usage of `safeMfImport` to load a remote module with a fallback component.  It leverages React.lazy and Suspense for lazy loading and error handling. It's crucial to wrap fallback component within the `default` field of object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeMfImport } from '@umijs/max';\nimport React, { Suspense } from 'react';\n\nconst RemoteCounter = React.lazy(() => {\n  return safeMfImport('remoteCounter/Counter', { default: () => 'Fallback' });\n});\n\nexport default function Page() {\n  return (\n    <Suspense fallback=\"loading\">\n      <RemoteCounter />\n    </Suspense>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom getLocale Function (TypeScript)\nDESCRIPTION: This snippet demonstrates how to customize the getLocale function, which determines the current locale. In this example, the locale is extracted from the query string parameter \"locale\" in the URL. This overrides the default locale detection mechanism.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport qs from 'qs';\n\nexport const locale = {\n  getLocale() {\n    const { search } = window.location;\n    const { locale = 'zh-CN' } = qs.parse(search, { ignoreQueryPrefix: true });\n    return locale;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Development Commands (Bash)\nDESCRIPTION: These bash commands are used to set up and manage the UmiJS static site. They include installing dependencies, starting the development server, and building the documentation for deployment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\n$ pnpm install\n\n# start dev server\n$ pnpm start\n\n# build docs\n$ pnpm run build\n```\n\n----------------------------------------\n\nTITLE: Download and Modify umi.js (bash)\nDESCRIPTION: This snippet downloads the `umi.js` file from the development server, adds a debugging statement (an alert), and then removes the modified file to revert to the original version.  It is used to debug the development build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 下载当前项目的 umi.js\n$curl http://127.0.0.1:8000/umi.js -O\n\n# 增加想调试的内容，举例增加 \"debug!!!\" 弹窗\n$ echo -e  '\\n;alert(\"debug!!!\");\\n' >> umi.js\n# 打开浏览器就能看到 alert 弹窗\n\n# 退出调试，恢复到正常状态\n$rm umi.js\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration with UmiJS (TypeScript)\nDESCRIPTION: This snippet shows an alternative way to define the runtime configuration, particularly the `layout` property, using TypeScript's `RuntimeConfig` type. This approach gives type safety during configuration development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeConfig } from 'umi';\nexport const layout: RuntimeConfig['layout'] = () => {\n  return {\n    title: 'umi',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Devtool Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the devtool option. It disables sourcemap generation in development. Also, configures it to use `eval` during development or turn it off based on environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// 关闭 dev 阶段的 sourcemap 生成\ndevtool: false;\n\n// 只设置 dev 阶段的 sourcemap\ndevtool: process.env.NODE_ENV === 'development' ? 'eval' : false;\n```\n\n----------------------------------------\n\nTITLE: Global Layout Route Configuration (JavaScript)\nDESCRIPTION: This JavaScript code shows an example of the route configuration generated when a global layout (src/layouts/index.tsx) is present in an UmiJS project. The layout wraps the routes for the root path and the 'users' path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { \n    path: '/', \n    component: '@/layouts/index',\n    routes: [\n      { path: '', component: '@/pages/index' },\n      { path: 'users', component: '@/pages/users' },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Page Navigation in Vue with UmiJS\nDESCRIPTION: This Vue component demonstrates how to use `useRouter` and `useRoute` from UmiJS for page navigation.  It imports `useRouter` and `useRoute`, retrieves the router and current route objects, and defines a function `onHello` that navigates to the `search` route, preserving the existing query parameters.  Requires the `umi` package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useRouter, useRoute } from 'umi';\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst onHello = () => {\n  router.push({\n    name: 'search',\n    query: {\n      ...route.query,\n    },\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Access Control (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure route-based access control using the layout plugin. It associates a route with a specific permission key defined in `src/access.ts`. Users without the required permission will be redirected to the default permission error page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = [\n  {\n    path: '/pageA',\n    component: 'PageA',\n    access: 'canReadPageA', // Some key of the permission definition return value\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate for navigation in UmiJS\nDESCRIPTION: Demonstrates how to use the `useNavigate` hook to navigate to different routes within an UmiJS application, including replacing the current history entry and navigating back.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigate } from 'umi';\n\nlet navigate = useNavigate();\nnavigate(\"../success\", { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code snippet illustrates how to use the `Icon` component in UmiJS after enabling the icons feature.  It demonstrates how to specify an icon from a collection using the `icon` prop, following the `collect:icon` format.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Icon icon=\"fa:home\" />\n```\n\n----------------------------------------\n\nTITLE: Enable Tailwind CSS Plugin in Umi Project\nDESCRIPTION: This command uses a code generator to enable the Tailwind CSS plugin in an Umi project. It updates the package.json, modifies .umirc.ts, and creates tailwind.config.js and tailwind.css files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/tailwindcss.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx umi g tailwindcss\ninfo  - Update package.json for devDependencies\nset config:tailwindcss on /project/max-playground/.umirc.ts\ninfo  - Update .umirc.ts\ninfo  - Write tailwind.config.js\ninfo  - Write tailwind.css\n```\n\n----------------------------------------\n\nTITLE: Enabling styled-components in Umi\nDESCRIPTION: This code snippet shows how to enable styled-components in a Umi project by adding the `@umijs/plugins/dist/styled-components` plugin to the `plugins` array and configuring the `styledComponents` option in the main configuration file. This makes styled-components available for styling components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: ['@umijs/plugins/dist/styled-components'],\n  styledComponents: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic UmiJS Model\nDESCRIPTION: This example shows how to create a simple UmiJS model with a user object. The model exports a function that returns an object containing the user state. This model will provide global access to the user data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/userModel.ts\nexport default () => {\n  const user = {\n    username: 'umi',\n  };\n\n  return { user };\n};\n```\n\n----------------------------------------\n\nTITLE: Enable React Query in @umijs/max\nDESCRIPTION: This code snippet demonstrates how to enable React Query in a `@umijs/max` project by configuring the `reactQuery` option in the main configuration file. This enables the default React Query features.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  reactQuery: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Icons in UmiJS (TypeScript)\nDESCRIPTION: This code demonstrates how to enable the icons feature in UmiJS.  By setting icons:{}, the users can use local svg icons. This is a basic configuration that allows local icon importing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nicons: {},\n```\n\n----------------------------------------\n\nTITLE: Main App Passes Data (Component Method) - React/TSX\nDESCRIPTION: This code snippet demonstrates how to pass data from the parent application to child applications when introduced through the component method using the `MicroApp` component. It defines a functional component that uses the `useState` hook to manage a `globalState` object and passes it as props to the `MicroApp` component. Requires 'react' and 'umi' dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  const [globalState, setGlobalState] = useState<any>({\n    slogan: 'Hello MicroFrontend',\n  });\n\n  return (\n    <MicroApp\n      name=\"app1\"\n      globalState={globalState}\n      setGlobalState={setGlobalState}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing UmiJS Production Build\nDESCRIPTION: This command launches a local static web server to preview the production build of the UmiJS project. It allows developers to test the built application before deploying it to a production environment. It supports proxy, mock, and other configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ umi preview --port 9527\n```\n\n----------------------------------------\n\nTITLE: UMI_DEV_SERVER_COMPRESS Environment Variable Usage - Bash\nDESCRIPTION: Shows how to disable the built-in compression middleware for the Umi development server using the `UMI_DEV_SERVER_COMPRESS` environment variable. Setting this to `none` can resolve issues with SSE data streaming.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n  UMI_DEV_SERVER_COMPRESS=none umi dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Redirects with KeepQuery (TypeScript)\nDESCRIPTION: Demonstrates how to configure route redirects in UmiJS using the `redirect` option with the `keepQuery` option. This example redirects users from the `/` path to the `/list` path, while keeping the original query parameters in the URL. This is useful when you need to preserve search parameters during a redirect.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\n    { path: '/', redirect: '/list', keepQuery: true },\n\n    // 注：若你需在跳转时处理参数，可以自行实现一个跳转组件\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Pro Table\nDESCRIPTION: Installs the Pro Table component from the Pro Components library, used for creating advanced tables with built-in features like filtering and pagination.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/pro-table\n```\n\n----------------------------------------\n\nTITLE: Add Before Middlewares in UmiJS\nDESCRIPTION: This code snippet demonstrates adding a middleware before the `webpack-dev-middleware` using `api.addBeforeMiddlewares`. The provided function should return an express middleware. The example shows a simple middleware function that calls `next()` to continue processing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napi.addBeforeMiddlewares(() => {\n  return (req, res, next) => {\n    if(false) {\n      res.end('end');\n    }\n    next();\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using rawMfImport for Loading Remote Modules (TypeScript)\nDESCRIPTION: This code snippet demonstrates the use of `rawMfImport` for directly loading remote modules by specifying the entry point, module name, and remote name. This function returns a Promise that resolves to the imported module.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = React.lazy(() => {\n  return rawMfImport({\n    entry: 'http://localhost:8001/remote.js',\n    moduleName: 'Counter',\n    remoteName: 'remoteCounter',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example .env.local File\nDESCRIPTION: This code block illustrates how to override environment variables defined in `.env` with local-specific values in `.env.local`.  In this instance, the `PORT` variable is overridden with a different value. This is for local development purposes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# file .env.local\nPORT=4000\n```\n\n----------------------------------------\n\nTITLE: Modifying the Root Container in UmiJS\nDESCRIPTION: This snippet illustrates how to modify the root container using the `rootContainer` function. It wraps the container with a `ThemeProvider` component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport function rootContainer(container, args) {\n  return React.createElement(ThemeProvider, null, container);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up UmiJS Project\nDESCRIPTION: This command initializes the UmiJS project by generating temporary files and performing other setup operations. It is commonly used in the `postinstall` script of `package.json` to ensure the project is properly configured after installation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ \"scripts\": { \"postinstall\": \"umi setup\" } }\n```\n\n----------------------------------------\n\nTITLE: Patching Routes with patchRoutes (TypeScript)\nDESCRIPTION: This snippet shows how to use the `patchRoutes` function to modify the flattened list of routes and the mapping of routes to their components.  It receives `routes` and `routeComponents` as arguments, allowing for dynamic updates. It's recommended to use `patchClientRoutes` instead for dynamically updating routes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function patchRoutes({ routes, routeComponents }) {\n  console.log('patchRoutes', routes, routeComponents);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Component (Direct)\nDESCRIPTION: This command directly generates a new component with the specified name (bar). It creates two files: Bar/index.ts and Bar/component.tsx in the src/components directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component bar\n```\n\n----------------------------------------\n\nTITLE: Generating Jest Configuration\nDESCRIPTION: This command generates Jest configuration files for the project, including 'jest.config.ts', and updates 'package.json'.  It prompts the user to choose whether to use '@testing-library/react' for UI testing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$umi g jest\n✔ Will you use @testing-library/react for UI testing?! … yes\n```\n\n----------------------------------------\n\nTITLE: Configure reactQuery options\nDESCRIPTION: This example demonstrates how to disable the devtool and global QueryClient registration using the `reactQuery` configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  reactQuery: {\n    devtool: false,\n    queryClient: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Usage in Routes\nDESCRIPTION: Demonstrates route configuration with layout control (disabling layout for specific routes) and the use of wrappers for additional layout layers.  This is configured inside of `config/config.ts` or `.umirc.ts`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\n    { path: '/', component: './index', layout: false },\n    {\n      path: '/users',\n      component: './users',\n      wrappers: ['@/wrappers/auth']\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Port with STRICT_PORT\nDESCRIPTION: This example demonstrates the use of the `STRICT_PORT` environment variable. When set, Umi will exit if the specified port is already in use, prompting the user to select a different port.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ STRICT_PORT=8000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Creating Memory History with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates the creation of a MemoryHistory instance using the createMemoryHistory function from UmiJS. MemoryHistory does not interact with the address bar, making it suitable for testing and server-side rendering environments.  It accepts an optional location object as its first argument.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst history = createMemoryHistory(location)\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugins for MFSU\nDESCRIPTION: This code configures Babel to use MFSU's Babel plugins. This is used to collect and transform dependency import paths, replacing them with MFSU's module federation addresses.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  module: {\n    rules: [\n      // handle javascript source loader\n      {\n        test: /\\.[jt]sx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              // [mfsu] 3. add mfsu babel plugins\n              ...mfsu.getBabelPlugins(),\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Data Deduction with Valtio\nDESCRIPTION: This snippet demonstrates how to create derived state using `proxyWithComputed`. The `double` property automatically updates whenever `count` changes. It requires importing `proxyWithComputed` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithComputed } from 'umi';\n\nconst state = proxyWithComputed({\n  count: 0,\n}, {\n  double: snap => snap.count * 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Pro List with Test Data\nDESCRIPTION: This React component uses the `ProList` component to render a list of test data. It configures the component with a custom toolbar that includes a button to create a new item.  It defines the data source, specifies the properties to display, and sets custom actions for each item in the list.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\nimport ProList from '@ant-design/pro-list';\n\n// resolve test info list\n\nconst MemberList: React.FC = () => {\n  return (\n    <ProList<any>\n      toolBarRender={() => {\n        return [\n          <Button key=\"add\" type=\"primary\">\n            新建\n          </Button>,\n        ];\n      }}\n      rowKey=\"id\"\n      headerTitle=\"测试结果\"\n      dataSource={testList}\n      showActions=\"hover\"\n      showExtra=\"hover\"\n      metas={{\n        title: {\n          dataIndex: 'name',\n        },\n        avatar: {\n          dataIndex: 'image',\n        },\n        description: {\n          dataIndex: 'desc',\n        },\n        actions: {\n          render: (text, row) => [\n            <a key=\"link\">链路</a>,\n            <a key=\"warning\">报警</a>,\n            <a key=\"view\">查看</a>,\n          ],\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sub-application Consuming Data via connectMaster\nDESCRIPTION: This code shows how to use the `connectMaster` higher-order component to access data passed from the parent application to the child application. This provides an alternative way to consume parent data in the child component's props.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectMaster } from 'umi';\n\nfunction MyPage(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n\nexport default connectMaster(MyPage);\n```\n\n----------------------------------------\n\nTITLE: Valtio Access Outside React with UmiJS\nDESCRIPTION: This snippet illustrates how to access and modify Valtio state outside of React components using the `proxy` function from UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\nconst state = proxy({ count: 0 });\nstate.count;\nstate.count += 1;\n```\n\n----------------------------------------\n\nTITLE: Listing UmiJS Configuration\nDESCRIPTION: This command lists the current configuration settings of the UmiJS project. It allows developers to inspect the applied configurations and ensure they are correctly set for the desired project behavior. The `list` subcommand shows all configurations, while `get` retrieves a specific configuration value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config list\n - [key: polyfill] false\n - [key: externals] { esbuild: true }\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config get mfsu\n - [key: externals] { esbuild: true }\n```\n\n----------------------------------------\n\nTITLE: Language Switching with SelectLang - TypeScript\nDESCRIPTION: Shows how to use the built-in `<SelectLang />` component to allow users to switch languages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SelectLang } from 'umi';\n\nexport default function Page() {\n  return <SelectLang />;\n};\n```\n\n----------------------------------------\n\nTITLE: Use Location Hook Example Typescript\nDESCRIPTION: Demonstrates the `useLocation` hook to trigger a side effect on location changes (page view statistics). It defines a functional component `App` which uses the `useLocation` hook and `React.useEffect` to send page view events to Google Analytics whenever the location changes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLocation } from 'umi';\n\nfunction App() {\n  const location = useLocation();\n  React.useEffect(() => {\n    ga('send', 'pageview');\n  }, [location]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart (React with Ant Design Charts)\nDESCRIPTION: This React component renders a line chart using the Ant Design Charts library. It configures the chart with data, axis labels, and smooth line rendering. It requires the `@ant-design/plots` package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine: React.FC = () => {\n  // fetch data\n\n  const config = {\n    data,\n    padding: 'auto',\n    xField: 'Date',\n    yField: 'scales',\n    xAxis: {\n      // type: 'timeCat',\n      tickCount: 5,\n    },\n    smooth: true,\n  };\n\n  return <Line {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Nested Route with patchClientRoutes in UmiJS\nDESCRIPTION: This code demonstrates how to add a nested route using `patchClientRoutes`. It pushes a new route with a `children` array to create a nested routing structure.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from '@/extraRoutes/foo';\n\nexport const patchClientRoutes = ({ routes }) => {\n  routes.push({\n    path: '/group',\n    children: [{\n      path: '/group/page',\n      element: <Page />,\n    }],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating history usage\nDESCRIPTION: This snippet shows how to replace `props.history` with `history` from `umi`.  It's a direct import and usage pattern update.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n+ import { history } from 'umi';\nexport default function Page(props) {\n  return (\n    <div onClick={()=>{\n-          props.history.push('list');\n+          history.push('list');\n    }}>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disable sourcemap in development with UmiJS (JavaScript)\nDESCRIPTION: This code demonstrates how to conditionally disable sourcemap generation based on the environment using the `devtool` option. Sourcemaps are disabled in production but enabled in development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Disable sourcemap generation in dev stage\ndevtool: false;\n\n// Only set sourcemap for dev stage\ndevtool: process.env.NODE_ENV === 'development' ? 'eval' : false;\n```\n\n----------------------------------------\n\nTITLE: Customizing Legacy Mode Babel Includes in UmiJS with Typescript\nDESCRIPTION: This code snippet configures the `legacy` mode and specifies additional Babel includes in UmiJS.  `nodeModulesTransform` is set to `false` to disable transformation of all `node_modules`. `extraBabelIncludes` is used to specify specific packages (`some-es6-pkg` and packages under the `@scope/` scope) that require transformation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  legacy: {\n    nodeModulesTransform: false,\n  },\n  extraBabelIncludes: ['some-es6-pkg', /@scope\\//],\n};\n```\n\n----------------------------------------\n\nTITLE: WEBPACK_FS_CACHE_DEBUG Environment Variable Usage - Bash\nDESCRIPTION: Shows how to enable debug logging for Webpack's file system cache using the `WEBPACK_FS_CACHE_DEBUG` environment variable. Setting this to `1` will output detailed cache-related logs during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ WEBPACK_FS_CACHE_DEBUG=1 umi dev\n```\n\n----------------------------------------\n\nTITLE: Use Route Data Hook Example Typescript\nDESCRIPTION: Illustrates how to use the `useRouteData` hook to retrieve information about the current route. The route data includes properties like path, id, parentId, and file, which are part of the route configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouteData } from 'umi';\n\nconst route = useRouteData();\n/* route\n{\n  route: {\n    path: 'a/page',\n    id: 'a/page/index',\n    parentId: '@@/global-layout',\n    file: 'a/page/index.tsx'\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using the Access Component\nDESCRIPTION: This JavaScript code demonstrates how to use the `Access` component to conditionally render content based on user permissions.  The `accessible` prop determines whether the child content is rendered, and the `fallback` prop specifies the content to be rendered when the user lacks the required permissions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useAccess, Access } from 'umi';\n\nconst PageA = (props) => {\n  const { foo } = props;\n  const access = useAccess(); // access 的成员: canReadFoo, canUpdateFoo, canDeleteFoo\n\n  if (access.canReadFoo) {\n    // 如果可以读取 Foo，则...\n  }\n\n  return (\n    <div>\n      <Access\n        accessible={access.canReadFoo}\n        fallback={<div>Can not read foo content.</div>}\n      >\n        Foo content.\n      </Access>\n      <Access\n        accessible={access.canUpdateFoo}\n        fallback={<div>Can not update foo.</div>}\n      >\n        Update foo.\n      </Access>\n      <Access\n        accessible={access.canDeleteFoo(foo)}\n        fallback={<div>Can not delete foo.</div>}\n      >\n        Delete foo.\n      </Access>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Analyzing Webpack Compile Time with SPEED_MEASURE\nDESCRIPTION: This code snippet shows how to use the `SPEED_MEASURE` environment variable to analyze Webpack compile time. It supports `CONSOLE` and `JSON` formats for outputting the analysis results.  This helps to identify bottlenecks during compilation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ SPEED_MEASURE=JSON umi dev\n```\n\n----------------------------------------\n\nTITLE: Logger Usage with UmiJS API (TypeScript)\nDESCRIPTION: Shows how to use the UmiJS logger to profile code execution time. The `api.logger.profile` method can be used to start and stop a timer, logging the elapsed time between calls. This can be useful for identifying performance bottlenecks.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.logger.profile('barId');\nsetTimeout(() => {\n  api.logger.profile('barId');\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Route Changes in UmiJS (TypeScript)\nDESCRIPTION: Shows how to listen for route changes using the `history.listen` method.  The callback receives the new location and the action that triggered the change.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { history from 'umi';\n\nconst unlisten = history.listen(({ location, action }) => {\n  console.log(location.pathname);\n});\nunlisten();\n```\n\n----------------------------------------\n\nTITLE: Generating Paths with Parameters in UmiJS (TypeScript)\nDESCRIPTION: Generates a URL path by substituting parameters into a predefined route pattern. Essential for creating dynamic URLs with named parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generatePath from 'umi';\n\ngeneratePath(\"/users/:id\", { id: \"42\" }); // \"/users/42\"\ngeneratePath(\"/files/:type/*\", {\n  type: \"img\",\n  \"*\": \"cat.jpg\",\n}); // \"/files/img/cat.jpg\"\n```\n\n----------------------------------------\n\nTITLE: MFSU Exclude Configuration (TypeScript)\nDESCRIPTION: This code snippet shows how to exclude a module from MFSU processing. This is useful for resolving dependency cycle issues, especially in monorepo setups.  Here, module 'B' is excluded.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  exclude: [\n    'B'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Umi Project\nDESCRIPTION: Configures the Umi project, including enabling API routes, specifying the deployment platform as Vercel, defining routes for the blog pages, and enabling the Tailwindcss plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  npmClient: 'pnpm',\n  apiRoute: {\n    platform: 'vercel',\n  },\n  routes: [\n    { path: '/', component: 'index' },\n    { path: '/posts/create', component: 'posts/create' },\n    { path: '/login', component: 'login' },\n    { path: '/posts/:postId', component: 'posts/post' },\n  ],\n  plugins: [require.resolve('@umijs/plugins/dist/tailwindcss')],\n  tailwindcss: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line (Windows)\nDESCRIPTION: This snippet shows how to set an environment variable (PORT) and then execute the `umi dev` command in the Windows command prompt (cmd.exe). The `&&` operator ensures that the `umi dev` command is executed only after the environment variable is set.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ set PORT=3000&&umi dev\n```\n\n----------------------------------------\n\nTITLE: Registering Remote Modules Dynamically\nDESCRIPTION: This code snippet demonstrates how to dynamically register Module Federation remote configurations using the `registerMfRemote` function.  It allows for using `safeMfImport` or `safeRemoteComponent` with a configured alias.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nregisterMfRemote({\n  aliasName: 'registered',\n  remoteName: 'remoteCounter',\n  entry: 'http://127.0.0.1:8001/remote.js',\n});\n\nconst RemoteCounter = React.lazy(() => {\n  return safeMfImport('registered/Counter', { default: null });\n});\n```\n\n----------------------------------------\n\nTITLE: Reducer: Add Nested Data (Recommended)\nDESCRIPTION: This reducer function adds a todo item to a nested `todos` array within the state. It maintains state flatness by creating a new `todos` array and updating the state with the new array. Avoid deep nesting for easier maintainability.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.model({\n  namespace: 'app',\n  state: {\n    todos: [],\n    loading: false,\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.todos.concat(todo);\n      return { ...state, todos };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modify HTML with UmiJS API (TypeScript)\nDESCRIPTION: Demonstrates how to modify the generated HTML using the `modifyHTML` API in UmiJS. This allows developers to manipulate the HTML structure using Cheerio. The function receives the Cheerio API object (`$`) and a `path` object as parameters, which contains the route path. The function returns the modified Cheerio API object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyHTML(($, { path }) => {\n  $('h2').addClass('welcome');\n  return $;\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Metas in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to add extra `<meta>` tags to your HTML in UmiJS.  This example adds `<meta>` tags for keywords and description.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nmetas: [\n  { name: 'keywords', content: 'umi, umijs' },\n  { name: 'description', content: 'React framework.' },\n],\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Plugins with UMI_PLUGINS\nDESCRIPTION: This example demonstrates how to use the `UMI_PLUGINS` environment variable to specify additional plugins to load when running the `umi` command.  Multiple plugin paths can be provided, separated by commas. This allows for extending Umi's functionality.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ UMI_PLUGINS=./path/to/plugin1,./path/to/plugin2  umi dev\n```\n\n----------------------------------------\n\nTITLE: Jest Test: reverseApiData simple object\nDESCRIPTION: This Jest test case checks if `reverseApiData` correctly reverses a simple object. It mocks the `fetcher` to return a JSON object with a simple data structure and asserts that the reversed object matches the expected structure.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('reverseApiData reverse simple object', async () => {\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve({ data: { a: 'b' } }),\n  });\n\n  const reversed = await reverseApiData('url', fetcher);\n\n  expect(reversed).toEqual({ b: 'a' });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Mock via Environment Variable\nDESCRIPTION: This snippet demonstrates how to disable the Mock feature in UmiJS using an environment variable. Setting `MOCK` to `none` when running `umi dev` will disable mock.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMOCK=none umi dev\n```\n\n----------------------------------------\n\nTITLE: Implementing HeaderSearch Component in TSX\nDESCRIPTION: This snippet demonstrates the use of the HeaderSearch component, providing a search input with autocomplete options.  It includes placeholder text, default value, a list of options, and a search handler.  The onSearch function logs the input value to the console.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport HeaderSearch from '@/components/HeaderSearch';\n\nexport default () => {\n  return (\n    <HeaderSearch\n      placeholder=\"站内搜索\"\n      defaultValue=\"umi ui\"\n      options={[\n        { label: 'Ant Design Pro', value: 'Ant Design Pro' },\n        {\n          label: 'Ant Design',\n          value: 'Ant Design',\n        },\n        {\n          label: 'Pro Table',\n          value: 'Pro Table',\n        },\n        {\n          label: 'Pro Layout',\n          value: 'Pro Layout',\n        },\n      ]}\n      onSearch={(value) => {\n        console.log('input', value);\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Linting UmiJS Code\nDESCRIPTION: This command is used to check and correct code in an UmiJS project based on predefined rules. It supports linting JavaScript, TypeScript, JSX, TSX, CSS, and Less files. It helps maintain code quality and consistency by enforcing coding standards.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ umi lint\n```\n\n----------------------------------------\n\nTITLE: MFSU externals workaround (TypeScript)\nDESCRIPTION: This code snippet provides a workaround for compatibility issues between MFSU and script-type externals. It conditionally enables the externals configuration only in production environments.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexternals: {\n  ...(process.env.NODE_ENV === 'production' ? {b: ['script https://cdn/b.js', b]} : {})\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Esbuild Handler\nDESCRIPTION: Configures the esbuild-loader to use MFSU's esbuild loader handlers. This approach uses esbuild for faster compilation, particularly beneficial in development environments.  It processes js/ts resources for quicker builds.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst { esbuildLoader } = require('@umijs/mfsu');\nconst esbuild = require('esbuild');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: esbuildLoader,\n          options: {\n            handler: [\n              // [mfsu] 3. add mfsu esbuild loader handlers\n              ...mfsu.getEsbuildLoaderHandler(),\n            ],\n            target: 'esnext',\n            implementation: esbuild,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing route data with useRouteData in UmiJS\nDESCRIPTION: Illustrates how to use the `useRouteData` hook to access the data associated with the current route in UmiJS. Note: This API might change in future versions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouteData } from 'umi';\n\nconst route = useRouteData();\n/* route\n{\n  route: {\n    path: 'a/page',\n    id: 'a/page/index',\n    parentId: '@@/global-layout',\n    file: 'a/page/index.tsx'\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Configuration with MFSU\nDESCRIPTION: This snippet illustrates how to modify the dependency webpack configuration using chain programming within the MFSU settings of UmiJS. It leverages webpack-chain for configuration.  Access to `memo` (the webpack config) and `args` (additional arguments) are available.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack configuration modification\nmfsu: {\n```\n\n----------------------------------------\n\nTITLE: Configuring Minifiers in UmiJS with Typescript\nDESCRIPTION: This code snippet configures the JavaScript and CSS minifiers used by UmiJS. It sets the `jsMinifier` to 'terser' and the `cssMinifier` to 'cssnano'.  This is important when you need to ensure that output is in es5 for older browser compatibility.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  jsMinifier: 'terser',\n  cssMinifier: 'cssnano',\n};\n```\n\n----------------------------------------\n\nTITLE: Updating type references in imports\nDESCRIPTION: This snippet demonstrates how to explicitly import types from `.d.ts` files when upgrading to Umi 4. It addresses an issue where Umi 3 automatically found `.d.ts` files but Umi 4 requires more standardized type references.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import { ButtonType } from './button';\n+ import type { ButtonType } from './button.d';\n```\n\n----------------------------------------\n\nTITLE: Configuring styled-components babel plugin (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the styled-components babel plugin within the Umi configuration. The `babelPlugin` option allows for customizing the babel plugin's behavior, such as enabling displayName or ssr. This configuration is effective only in development mode.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {\n    babelPlugin: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Component Testing with React Testing Library (TSX)\nDESCRIPTION: This test case uses React Testing Library to verify the rendering of the `Greet` component without a name. It renders the component and asserts that the text 'Anonymous' is present in the document.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\nimport '@testing-library/jest-dom';\n\ntest('renders Greet without name assert by testing-library', () => {\n  const { container } = render(<Greet />);\n\n  const greetDom = screen.getByText('Anonymous');\n  expect(greetDom).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling the Antd Plugin in UmiJS\nDESCRIPTION: This code snippet shows how to enable the antd plugin in your UmiJS configuration file (`.umirc.ts`).  The `plugins` array specifies the plugins to load, and the `antd` object is used to configure the antd plugin. This plugin provides integration with the Ant Design UI library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-plugins.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  plugins: ['@umijs/plugins/dist/antd'],\n  antd: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Named Routes in Vue Template\nDESCRIPTION: This HTML snippet shows how to use `<router-link>` in a Vue template to navigate to a named route.  It utilizes the `to` property with an object containing the `name` of the route and any necessary `params`. This example navigates to the `/user/erina` path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ name: 'user', params: { username: 'erina' } }\">\n  User\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Metas in UmiJS\nDESCRIPTION: This HTML code shows the result of configuring the metas option with the provided JavaScript code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_37\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"keywords\" content=\"umi, umijs\" />\n<meta name=\"description\" content=\"React framework.\" />\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Component Integration with autoCaptureError\nDESCRIPTION: This code snippet illustrates how to integrate a micro-app as a component and automatically capture errors using `autoCaptureError`. When an error occurs in the micro-app, UmiJS will automatically display it using Ant Design's Result component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" autoCaptureError />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Presets\nDESCRIPTION: This snippet shows how to configure additional UmiJS presets. The `presets` array contains paths to the presets, which can be npm dependencies, relative paths, or absolute paths. Relative paths are resolved from the project root directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\npresets: [\n  // npm 依赖\n  'umi-preset-hello',\n  // 相对路径\n  './preset',\n  // 绝对路径\n  `${__dirname}/preset.js`,\n],\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Variables to UmiJS Page Generator\nDESCRIPTION: This command shows how to pass custom variables (msg and count) to the UmiJS page generator. These variables can then be used in the page templates.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo --msg \"Hello World\" --count 10\n```\n\n----------------------------------------\n\nTITLE: Fetching Data for Line Chart (React)\nDESCRIPTION: This React component fetches data from a remote URL and stores it in the component's state using the useState and useEffect hooks. The data is then used to render a line chart.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nconst DemoLine = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/bmw-prod/1d565782-dde4-4bb6-8946-ea6a38ccf184.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configure dead code detection in UmiJS\nDESCRIPTION: This snippet configures the `deadCode` option to enable detection of unused files and exports during the build process. It also lists some configuration options to customize the detection scope, exclusion patterns, and behavior when issues are found.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndeadCode: {}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching with useAntdConfig\nDESCRIPTION: This code demonstrates how to dynamically switch between themes using `useAntdConfig` and `useAntdConfigSetter` hooks in a React component.  It allows modifying the Ant Design `ConfigProvider` properties to change the theme at runtime.  This functionality is only available for Ant Design v5 and requires the `configProvider` option to be enabled.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Layout, Space, Button, version, theme, MappingAlgorithm } from 'antd';\nimport { useAntdConfig, useAntdConfigSetter } from 'umi';\nconst { darkAlgorithm, defaultAlgorithm } = theme;\n\nexport default function Page() {\n  const setAntdConfig = useAntdConfigSetter();\n  const antdConfig = useAntdConfig();\n  return (\n    <Layout>\n      <h1>with antd@{\\version}</h1>\n      <Space>\n        isDarkTheme\n        <Switch\n          checked={antdConfig?.theme?.algorithm.includes(darkAlgorithm)}\n          onChange={(data) => {\n            // 此配置会与原配置深合并\n            setAntdConfig({\n              theme: {\n                algorithm: [\n                  data ? darkAlgorithm : defaultAlgorithm,\n                ],\n              },\n            });\n            // or \n            setAntdConfig((config) => {\n              const algorithm = config.theme!.algorithm as MappingAlgorithm[];\n              if (algorithm.includes(darkAlgorithm)) {\n                config.theme!.algorithm = [defaultAlgorithm]\n              } else {\n                config.theme!.algorithm = [darkAlgorithm];\n              }\n              return config;\n            });\n          }}\n        ></Switch>\n      </Space>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions with put in dva\nDESCRIPTION: This snippet shows how to use the `put` function within an effect to trigger another action. The `type` specifies the action to dispatch, and `payload` provides the data to be passed along with the action.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nyield put({ type: 'todos/add', payload: 'Learn Dva' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Polyfills in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure polyfills to be imported on demand in UmiJS. It shows how to import only the stable part of core-js. This configuration helps optimize bundle size by selectively including polyfills based on browser compatibility requirements.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\npolyfill: {\n  imports: ['core-js/stable'],\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Environment-Specific Configuration\nDESCRIPTION: This Typescript snippet demonstrates how to use the `cross-env` package in `package.json` to set environment variables before running Umi commands. This allows loading different configurations based on the environment, using `UMI_ENV` to specify the environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"dev:pre\": \"cross-env UMI_ENV=pre umi dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import all from Umi in TypeScript\nDESCRIPTION: This code snippet demonstrates the 'import all from umi' principle, where commonly used functions and components are imported directly from the 'umi' package. This approach simplifies dependency management and reduces the number of import statements in the code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/philosophy.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// A large number of plugins provide additional exports for umi\nimport { connect, useModel, useIntl, useRequest, MicroApp, ... } from 'umi';\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Component Integration with Custom Loader\nDESCRIPTION: This code snippet shows how to integrate a micro-app as a component in UmiJS and use a custom loading animation. The `loader` prop allows you to define a custom component to render during the loading state, receiving a boolean `loading` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport CustomLoader from '@/components/CustomLoader';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return (\n    <MicroApp\n      name=\"app1\"\n      loader={(loading) => <CustomLoader loading={loading} />}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing RightContent with UmiJS Components in TSX\nDESCRIPTION: This code demonstrates the composition of the RightContent component, which combines several other components like HeaderSearch, Tooltip, Avatar, and SelectLang.  It utilizes Ant Design's Space component for layout and integrates UmiJS Pro specific components and configurations, offering a complete right-side header content setup.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_5\n\nLANGUAGE: tsx | pure\nCODE:\n```\n<Space>\n  <HeaderSearch\n    placeholder=\"站内搜索\"\n    defaultValue=\"umi ui\"\n    options={[\n      { label: <a href=\"https://umijs.org/zh/guide/umi-ui.html\">umi ui</a>, value: 'umi ui' },\n      {\n        label: <a href=\"next.ant.design\">Ant Design</a>,\n        value: 'Ant Design',\n      },\n      {\n        label: <a href=\"https://protable.ant.design/\">Pro Table</a>,\n        value: 'Pro Table',\n      },\n      {\n        label: <a href=\"https://prolayout.ant.design/\">Pro Layout</a>,\n        value: 'Pro Layout',\n      },\n    ]}\n  />\n  <Tooltip title=\"使用文档\">\n    <span\n      className={styles.action}\n      onClick={() => {\n        window.location.href = 'https://pro.ant.design/docs/getting-started';\n      }}\n    >\n      <QuestionCircleOutlined />\n    </span>\n  </Tooltip>\n  <Avatar />\n  {REACT_APP_ENV && (\n    <span>\n      <Tag color={ENVTagColor[REACT_APP_ENV]}>{REACT_APP_ENV}</Tag>\n    </span>\n  )}\n  <SelectLang className={styles.action} />\n</Space>\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Commit Scopes in UmiJS\nDESCRIPTION: This snippet configures the allowed scopes for commit messages when using the `verify-commit` command. It overrides the default scope and enables the usage of emojis in commit messages. The `scope` array defines the allowed scopes, and `allowEmoji` enables the use of emojis.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nverifyCommit: {\n  scope: ['feat', 'fix'],\n  allowEmoji: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Function: reverseApiData\nDESCRIPTION: This TypeScript code defines a utility function `reverseApiData` that fetches data from an API endpoint, reverses the key-value pairs in the `data` object within the JSON response, and returns the reversed object. It accepts a URL string and an optional `fetcher` function (defaults to `fetch`) as parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/reverseApiData.ts\nexport async function reverseApiData(url: string, fetcher = fetch) {\n  const res = await fetcher(url);\n  const json = await res.json();\n\n  const { data = {} } = json;\n  const reversed: Record<string, any> = {};\n  for (const key of Object.keys(data)) {\n    const val = data[key];\n    reversed[val] = key;\n  }\n  return reversed;\n}\n```\n\n----------------------------------------\n\nTITLE: DvaJS Effect Example: Call Async Function\nDESCRIPTION: This code shows the use of the `call` effect in DvaJS to invoke an asynchronous function (e.g., fetching data).  The `yield call` syntax allows awaiting the result of the asynchronous function. Here, it fetches data from the `/todos` endpoint.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = yield call(fetch, '/todos');\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale in .umirc.ts (TypeScript)\nDESCRIPTION: This snippet shows the default configuration for the locale plugin in .umirc.ts. It demonstrates how to customize the behavior of the internationalization plugin, including enabling Ant Design i18n support, enabling browser language detection, setting the base separator, defining the default locale, enabling title internationalization, and using local storage to save the current language.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  locale: {\n    antd: false, // 如果项目依赖中包含 `antd`，则默认为 true\n    baseNavigator: true,\n    baseSeparator: '-',\n    default: 'zh-CN',\n    title: false,\n    useLocalStorage: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sub-application (Child)\nDESCRIPTION: This snippet configures a Umi-based sub-application to be used as a Qiankun micro-application. It enables the `qiankun` plugin with the `slave` option. This setup automatically creates the necessary lifecycle hooks and methods for the sub-application to function within the Qiankun environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    slave: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configure extra Babel includes in UmiJS (JavaScript)\nDESCRIPTION: This code demonstrates how to configure extra directories or NPM packages to be processed by Babel using the `extraBabelIncludes` option. Supports absolute paths, npm packages, and regular expressions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  extraBabelIncludes: [\n    // Support absolute path\n    join(__dirname, '../../common'),\n    // Support npm package\n    'react-monaco-editor',\n    // Transpile all paths containing @scope\n    /@scope/\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Runtime Remote Module Loading with keyResolver\nDESCRIPTION: This code demonstrates how to configure remote module loading based on runtime environment variables using the `keyResolver` and `entries` properties. It dynamically determines the remote entry based on the resolved key.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\ndefineConfig({\n  mf: {\n    remotes: [\n      {\n        name: 'theMfName',\n        keyResolver: `(function(){ \n                    try { \n                        return window.injectInfo.env || 'PROD'\n                    } catch(e) { \n                        return 'PROD'} \n                    })()`, // immediate invoked function expression\n        entries: {\n          PRE: 'http://pre.mf.com/remote.js',\n          PROD: 'http://produ.mf.com/remote.js',\n          TEST: 'http://test.dev.mf.com/remote.js',\n          DEV: 'http://127.0.0.1:8000/remote.js',\n        },\n      },\n    ],\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding headScripts with Attributes in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to add extra scripts to the `<head>` section of your HTML in UmiJS, including specifying attributes like `defer` and `charset`. It allows fine-grained control over how scripts are included in the head of your HTML document.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nheadScripts: [\n  { src: '/foo.js', defer: true },\n  { content: `alert('你好');`, charset: 'utf-8' },\n],\n```\n\n----------------------------------------\n\nTITLE: Installing nvm for Node.js management (macOS/Linux)\nDESCRIPTION: This command downloads and executes the nvm installation script.  nvm allows you to manage multiple Node.js versions. Requires curl.  The output shows the nvm version installed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nnvm -v\n\n0.39.1\n```\n\n----------------------------------------\n\nTITLE: Describe Plugin Configuration - TypeScript\nDESCRIPTION: Explains how to use `api.describe` to define plugin configuration, including key, default values, schema (using joi), onChange behavior, and enable mode. This is executed during the plugin registration stage and allows users to configure plugins.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.describe({ key?: string, config?: { default, schema, onChange }, enableBy? })\n```\n\n----------------------------------------\n\nTITLE: Language Switching with setLocale (No Refresh) - TypeScript\nDESCRIPTION: Demonstrates how to use the `setLocale()` function to switch languages without refreshing the page by setting the second parameter to `false`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Do not refresh the page when switching\nsetLocale('en-US', false);\n```\n\n----------------------------------------\n\nTITLE: Add Before Babel Presets in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add Babel presets to the configuration using `api.addBeforeBabelPresets`. The provided function should return a Babel preset or an array of presets. In this example, it returns a preset with two plugins, \"Babel_Plugin_A\" and \"Babel_Plugin_B\".\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napi.addBeforeBabelPresets(() => {\n  // Return a Babel preset collection\n  return () => {\n    return {\n      plugins: [\"Babel_Plugin_A\",\"Babel_Plugin_B\"]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Interfaces\nDESCRIPTION: This snippet demonstrates how to define mock interfaces within a mock file.  It exports a default object where keys are the mock API endpoints (including HTTP methods) and values are the data to be returned. The data can be an array or an object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  // The return value can be an array\n  'GET /api/users': [\n    { id: 1, name: 'foo' },\n    { id: 2, name: 'bar' }\n  ],\n\n  // The return value can also be an object\n  'GET /api/users/1': { id: 1, name: 'foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Loader in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable the `clientLoader` feature in UmiJS, allowing data preloading for routes. It activates the `clientLoader` option in the configuration file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  clientLoader: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Declare global variable in TypeScript\nDESCRIPTION: This code snippet shows how to declare a global variable in a TypeScript declaration file (`typings.d.ts`). This is necessary when using the `define` configuration option in UmiJS to avoid type errors.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// typings.d.ts\ndeclare const FOO: string;\n```\n\n----------------------------------------\n\nTITLE: Using defineMock Type Helper\nDESCRIPTION: This snippet demonstrates how to use the `defineMock` type helper function to provide code hints when writing mock objects. This helper enhances the developer experience by providing type safety and auto-completion.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMock } from \"umi\";\n\nexport default defineMock({\n  \"/api/users\": [\n    { id: 1, name: \"foo\" },\n    { id: 2, name: \"bar\" },\n  ],\n  \"/api/users/1\": { id: 1, name: \"foo\" },\n  \"GET /api/users/2\": (req, res) => {\n    res.status(200).json({ id: 2, name: \"bar\" });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Mode for Development and Adding Polyfill (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable legacy mode for development and add a polyfill script conditionally based on the environment. This allows for easier testing and development of compatibility features. `buildOnly` is set to `false` so the legacy mode will be applied in development environment as well as production environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nconst isProd = process.env.NODE_ENV === 'production';\nexport default {\n  legacy: {\n    buildOnly: false,\n  },\n  headScripts: isProd ? [] : ['http://polyfill.alicdn.com/v3/polyfill.min.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Extend Stylelint configuration\nDESCRIPTION: Extend the Stylelint configuration in `.stylelintrc.js` to inherit Umi's recommended Stylelint rules. Different paths are used for Umi and Umi Max projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .stylelintrc.js\nmodule.exports = {\n  // Umi 项目\n  extends: require.resolve('umi/stylelint'),\n\n  // Umi Max 项目\n  extends: require.resolve('@umijs/max/stylelint'),\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Column Chart with Custom Colors\nDESCRIPTION: This React component uses the `Column` component from `@ant-design/plots` to render a column chart. It configures custom colors based on the 'type' field in the data. Specifically, it uses a semantic red color for the '5+ 秒' category and a brand color for all other categories.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Column } from '@ant-design/plots';\n\nconst DemoColumn: React.FC = () => {\n  // fetch data\n\n  const paletteSemanticRed = '#F4664A';\n  const brandColor = '#5B8FF9';\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'value',\n    seriesField: '',\n    color: ({ type }) => {\n      if (type === '5+ 秒') {\n        return paletteSemanticRed;\n      }\n\n      return brandColor;\n    },\n    legend: false,\n    xAxis: {\n      label: {\n        autoHide: true,\n        autoRotate: false,\n      },\n    },\n  };\n\n  return <Column {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Component Testing with Jest Snapshot (TSX)\nDESCRIPTION: This test case uses Jest's snapshot feature to verify the rendering of the `Greet` component without a name prop. It renders the component and asserts that the rendered container matches the stored snapshot.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\nimport { render } from '@testing-library/react';\nimport React from 'react';\nimport Greet from './Greet';\n\ntest('renders Greet without name by snapshot', () => {\n  const { container } = render(<Greet />);\n  expect(container).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Start Commands in package.json\nDESCRIPTION: This snippet shows how to update the scripts section in `package.json` to use the `max` command instead of `umi` for development, building, and setup tasks. This involves replacing `umi dev`, `umi build`, and `umi g tmp` with `max dev`, `max build`, and `max setup` respectively.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-    \"build\": \"umi build\",\n+    \"build\": \"max build\",\n-    \"postinstall\": \"umi g tmp\",\n+    \"postinstall\": \"max setup\",\n-    \"start\": \"umi dev\",\n+    \"start\": \"max dev\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Umi Plugin via Environment Variable (Shell)\nDESCRIPTION: This example shows how to enable a Umi preset using the `UMI_PRESETS` environment variable. This method is generally used for extending Umi-based frameworks.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ UMI_PRESETS = foo/preset.js umi dev\n```\n\n----------------------------------------\n\nTITLE: Vue App Mounted Hook\nDESCRIPTION: This code defines an `onMounted` hook that runs after the Vue app is mounted. It receives the Vue app and router instances. It provides a value 'umi-hello' to the app, making it accessible throughout the application. This can be used to register global components or perform other initialization tasks.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function onMounted({ app, router }: any) {\n  console.log('onMounted', app, router);\n  app.provide('umi-hello', {\n    h: 'hello',\n    w: 'word',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme (JavaScript)\nDESCRIPTION: Configures the Less variable theme for the UmiJS application, allowing customization of the application's appearance through Less variables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\ntheme: { '@primary-color': '#1DA57A' }\n```\n\n----------------------------------------\n\nTITLE: Adding a Redirect Route with patchClientRoutes (TSX)\nDESCRIPTION: This snippet shows how to add a redirect route using `patchClientRoutes`. It unshifts a route that uses the `<Navigate>` component to redirect from the root path (`/`) to `/home`. The `replace` prop ensures that the current entry in the history stack is replaced.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'umi';\n\nexport const patchClientRoutes = ({ routes }) => {\n  routes.unshift({\n    path: '/',\n    element: <Navigate to=\"/home\" replace />,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure with exportStatic in UmiJS\nDESCRIPTION: This snippet shows the directory structure that UmiJS generates when the exportStatic configuration is enabled. When exportStatic is enabled, separate index.html files are created for each route within the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_38\n\nLANGUAGE: Bash\nCODE:\n```\ndist/index.html\ndist/docs/index.html\ndist/docs/a/index.html\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Presets with UMI_PRESETS\nDESCRIPTION: This snippet shows how to specify additional plugin presets using the `UMI_PRESETS` environment variable. Presets allow bundling multiple plugins and configuring them together, separated by commas.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ UMI_PRESETS=./path/to/preset1,./path/to/preset2  umi dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript Minification Configuration in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to configure JavaScript minification in UmiJS using the jsMinifier option. It specifies that esbuild should be used for minifying JavaScript code during the build process. Other options include 'terser', 'swc', 'uglifyJs', and 'none'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  jsMinifier: 'esbuild'\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the matchRoutes function from UmiJS to match a given path against an array of possible routes. It returns an array of route matches, providing information about the matched route and extracted parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { matchRoutes } from 'umi';\nconst match = matchRoutes(\n  [\n    {\n      path: \"/users/:id\",\n    },\n    {\n      path: \"/users/:id/posts/:postId\",\n    },\n  ],\n  \"/users/123/posts/456\",\n);\n// [\n//  {\n//    \"params\": {\n//      \"id\": \"123\",\n//       \"postId\": \"456\"\n//     },\n//     \"pathname\": \"/users/123/posts/456\",\n//     \"pathnameBase\": \"/users/123/posts/456\",\n//     \"route\": {\n//       \"path\": \"/users/:id/posts/:postId\"\n//     }\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Parent Application Data Injection via Component Props\nDESCRIPTION: This code demonstrates passing data directly as component props to a sub-application when using the `<MicroApp />` component.  The `globalState` and `setGlobalState` are passed directly as props.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  const [globalState, setGlobalState] = useState<any>({\n    slogan: 'Hello MicroFrontend',\n  });\n\n  return (\n    <MicroApp\n      name=\"app1\"\n      globalState={globalState}\n      setGlobalState={setGlobalState}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing getLocale in UmiJS (TypeScript)\nDESCRIPTION: This code demonstrates how to customize the `getLocale()` method in UmiJS for determining the page language. It overrides the default behavior by parsing the `locale` parameter from the URL query string. The code imports the 'qs' library for query string parsing and extracts the 'locale' value. If no locale is found in the query, it defaults to 'zh-CN'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport qs from 'qs';\n\nexport const locale = {\n  getLocale() {\n    const { search } = window.location;\n    const { locale = 'zh-CN'} = qs.parse(search, { ignoreQueryPrefix: true });\n    return locale;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Valtio State Outside React\nDESCRIPTION: This code illustrates how to access and modify Valtio state outside of React components.  It showcases direct interaction with the proxy object. Requires importing `proxy` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\nconst state = proxy({ count: 0 });\nstate.count;\nstate.count += 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring srcTranspilerOptions for SWC in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure `srcTranspilerOptions` for SWC (Speedy Web Compiler) in UmiJS. It adds a styled-components SWC plugin with specific options, enabling server-side rendering (SSR) and display names.  This configures SWC to process styled-components during the build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nsrcTranspilerOptions: {\n  swc: {\n    jsc: {\n      experimental: {\n        plugins: [\n          [\n            '@swc/plugin-styled-components',\n            {\n              displayName: true,\n              ssr: true,\n            },\n          ],\n        ],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Define Multilingual Content - zh-CN.json - JSON\nDESCRIPTION: Defines multilingual content in a JSON file for the Simplified Chinese locale. It contains a 'welcome' key with its corresponding translated value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// src/locales/zh-CN.json\n{\n  \"welcome\": \"欢迎光临 Umi 的世界！\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Test: Greet Click Event\nDESCRIPTION: This test case verifies that the `onClick` prop of the `Greet` component is called when the 'hello' element within the component is clicked. It mocks the `onClick` function, renders the component, simulates a click event on the specified element, and asserts that the mocked function is called once.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\n\ntest('Greet click', async () => {\n  const onClick = jest.fn();\n  const { container } = render(<Greet onClick={onClick} />);\n\n  const greetDom = screen.getByText('Anonymous');\n  await fireEvent.click(screen.getByText(/hello/i));\n\n  expect(onClick).toBeCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Add Entry Imports Ahead in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add import statements to the entry file using `api.addEntryImportsAhead`. The function should return an object with a `source` property and optional `specifier` properties, or an array of such objects. These imports are added at the beginning of the import section.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\napi.addEntryImportsAhead(() => ({\n  source: 'anyPackage'\n}))\n```\n\n----------------------------------------\n\nTITLE: Runtime Layout Configuration\nDESCRIPTION: This example demonstrates runtime configuration of the layout in `src/app.tsx`. It configures the title, logo, and other properties using the `RunTimeLayoutConfig` type from `@umijs/max`.  It also includes placeholders for custom components like `RightContent` and `Footer`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RunTimeLayoutConfig } from '@umijs/max';\n\nexport const layout: RunTimeLayoutConfig = (initialState) => {\n  return {\n    // 常用属性\n    title: 'Ant Design',\n    logo: 'https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg',\n\n    // 默认布局调整\n    rightContentRender: () => <RightContent />,\n    footerRender: () => <Footer />,\n    menuHeaderRender: undefined,\n\n    // 其他属性见：https://procomponents.ant.design/components/layout#prolayout\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Add Entry Code Ahead in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add code at the beginning of the entry file using `api.addEntryCodeAhead`. The function should return a string or an array of strings that will be added to the entry file. This example adds a console log statement.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napi.addEntryCodeAhead(() => `console.log('I am before render!')`)\n```\n\n----------------------------------------\n\nTITLE: Defining Route Redirect in UmiJS with Vue\nDESCRIPTION: This configuration shows how to define a redirect route in UmiJS. When a user accesses the `/home` path, they will be redirected to the `/` path. `path` is the original path and `redirect` defines the new path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/home',\n      redirect: '/'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DvaJS Effect Example: Async Data Fetching\nDESCRIPTION: This code snippet illustrates a Dva effect for handling asynchronous operations, such as fetching data from an API. It utilizes generator functions and the `yield` keyword to manage asynchronous control flow. It calls the `addTodo` function and then dispatches a reducer to update the state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  namespace: 'todos',\n  effects: {\n    *addRemote({ payload: todo }, { put, call }) {\n      yield call(addTodo, todo);\n      yield put({ type: 'add', payload: todo });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication HOC to a Page (JSX)\nDESCRIPTION: This JSX code snippet shows how to apply the authentication higher-order component (`withAuth`) to a page component. The `TheOldPage` component is wrapped with `withAuth`, ensuring that only authenticated users can access it.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/user.tsx\n\nconst TheOldPage = ()=>{\n  // ...\n}\n\nexport default withAuth(TheOldPage)\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in .env - Text\nDESCRIPTION: Demonstrates how to use variable interpolation within the `.env` file.  This allows for dynamic construction of environment variables by referencing other variables.  The example concatenates `FOO` and `BAR` to create `CONCAT`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# file .env.local\nFOO=foo\nBAR=bar\n\nCONCAT=$FOO$BAR # CONCAT=foobar\n```\n\n----------------------------------------\n\nTITLE: Parent Application Lifecycle Configuration\nDESCRIPTION: This snippet configures global lifecycle hooks for sub-applications within the parent application. The `qiankun` object is exported from `src/app.ts`, and the `lifeCycles` property allows defining functions that will be executed at different stages of the sub-application lifecycle, such as after mounting.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  lifeCycles: {\n    // 所有子应用在挂载完成时，打印 props 信息\n    async afterMount(props) {\n      console.log(props);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Build UmiJS Project\nDESCRIPTION: This command builds the UmiJS project for production deployment. It optimizes the code for performance and creates a deployable package. It leverages Umi's internal configurations for bundling and optimization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ umi build\n```\n\n----------------------------------------\n\nTITLE: Module Federation Exposes Configuration (JavaScript)\nDESCRIPTION: This is a configuration showing Module Federation exposes based on directory names under `src/exposes`. It shows the correct configuration and file names.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  './Button': 'src/exposes/Button/index.jsx',\n  './Button': 'src/exposes/Head/index.ts',\n  './Form'  : 'src/exposes/Form/index.tsx',\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Word Cloud (React with Ant Design Charts)\nDESCRIPTION: This React component renders a word cloud using the Ant Design Charts library.  It configures the chart with data, word field, weight field, and styling options. It also configures interactions to highlight words on hover.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { WordCloud } from '@ant-design/plots';\n\nconst DemoWordCloud: React.FC = () => {\n  // fetch data\n\n  const config = {\n    data,\n    wordField: 'country',\n    weightField: 'value',\n    color: '#122c6a',\n    interactions: [\n      {\n        type: 'element-active',\n      },\n    ],\n    state: {\n      active: {\n        style: {\n          lineWidth: 2,\n        },\n      },\n    },\n  };\n\n  return <WordCloud {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Use Match Hook Definition Typescript\nDESCRIPTION: Defines the `useMatch` hook, which returns match information for a given path pattern, including parameters, pathname, and the pattern itself. If there is no match, it returns `null`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useMatch(pattern: {\n  path: string;\n  caseSensitive?: boolean;\n  end?: boolean;\n} | string): {\n  params: Record<string, string>;\n  pathname: string;\n  pattern: {\n    path: string;\n    caseSensitive?: boolean;\n    end?: boolean;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enable esbuildMinifyIIFE in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code snippet enables the `esbuildMinifyIIFE` option in UmiJS. This option fixes namespace conflicts that may arise due to global variables automatically introduced by the esbuild compressor, particularly in scenarios involving async chunks or Qiankun sub-apps.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nesbuildMinifyIIFE: true\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Logic with call in dva\nDESCRIPTION: This example demonstrates using the `call` function to call asynchronous logic, such as a fetch request. The `call` function supports promises, allowing you to handle asynchronous operations with `yield`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = yield call(fetch, '/todos');\n```\n\n----------------------------------------\n\nTITLE: Set UmiJS Configuration Value\nDESCRIPTION: This command sets a specific configuration value in the UmiJS project configuration.  It allows modification of configuration setting with the value provided. It uses the `set` subcommand to modify a configuration value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config set polyfill false\nset config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n```\n\n----------------------------------------\n\nTITLE: Initialize Tailwindcss with Umi\nDESCRIPTION: Uses the Umi generator to enable Tailwindcss in the project.  It installs dependencies and generates necessary configuration files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx umi g tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Component with Missing Translation - TypeScript\nDESCRIPTION: Demonstrates how Umi renders the `id` as the default value when a translation is missing for a specific locale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'antd';\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <Button type=\"primary\">\n      <FormattedMessage id=\"table.submit\" />\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Head Scripts Configuration with Attributes in UmiJS\nDESCRIPTION: This snippet shows how to configure additional scripts in the `<head>` section with specific attributes (e.g., `defer`, `charset`).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nheadScripts: [\n  { src: '/foo.js', defer: true },\n  { content: `alert('hello');`, charset: 'utf-8' },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Routes Configuration\nDESCRIPTION: Illustrates how Umi automatically generates routes based on the file structure within the `pages` directory. This is an example of Convention over Configuration in Umi.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index.tsx' },\n  { path: '/users/', component: '@/pages/users/index.tsx' },\n]\n```\n\n----------------------------------------\n\nTITLE: On-demand Startup Configuration\nDESCRIPTION: Shows how to filter pages to start using `env.MPA_FILTER` for faster build times.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# file .env\n# Will only start bar, foo these two pages\nMPA_FILTER=bar,foo\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS Components (Batch)\nDESCRIPTION: This command generates multiple components with 'index.ts' and 'component.tsx' files in the 'src/components' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component apple banana orange\n```\n\n----------------------------------------\n\nTITLE: Configuring MFSU with esbuild in UmiJS\nDESCRIPTION: This snippet shows how to configure MFSU (Module Federation Speed Up) with esbuild to speed up the initial build process. esbuild is enabled to perform pre-compilation of dependencies, leading to faster startup times.  It's recommended for projects with stable dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// 用 esbuild 做依赖预编译\nmfsu: {\n  esbuild: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prettier in UmiJS project\nDESCRIPTION: This snippet demonstrates how to enable Prettier for automatic code formatting in an UmiJS project. The `pnpm umi g` command with the `Enable Prettier` generator adds the necessary configuration files and installs the required dependencies. It relies on pnpm.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm umi g\n✔ Pick generator type › Enable Prettier -- Enable Prettier\ninfo  - Write package.json\ninfo  - Write .prettierrc\ninfo  - Write .prettierignore\ninfo  - Install dependencies with pnpm\n```\n\n----------------------------------------\n\nTITLE: React Component Rendering\nDESCRIPTION: This snippet illustrates the default rendering approach in UmiJS for MPA. Exporting a React component from the entry file is sufficient for rendering.  Umi handles the `ReactDOM.render` logic automatically. The component is rendered in the element specified by `mountElementId`\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <div>Hello</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore pre-rendering errors during static export\nDESCRIPTION: This code snippet shows how to configure the `ignorePreRenderError` option within `exportStatic` to prevent the build process from terminating if pre-rendering fails.  This is helpful for scenarios where some routes may fail to pre-render but you still want to generate the rest of the static site.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // Ignore pre-rendering failure errors\n    ignorePreRenderError: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mock File with Simplified GET\nDESCRIPTION: Example Mock file showing how to omit the HTTP method (GET) for GET requests. This simplification can improve readability while defining simple GET Mock endpoints. It covers the same functionality as explicitly defining 'GET /api/users'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  '/api/users': [\n    { id: 1, name: 'foo' },\n    { id: 2, name: 'bar' }\n  ],\n\n  '/api/users/1': { id: 1, name: 'foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Browser History with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a BrowserHistory instance using the createBrowserHistory function from UmiJS. It supports both regular browser history and iframe history. The options parameter allows specifying a window object for iframe scenarios.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// create a BrowserHistory\nimport { createBrowserHistory } from 'umi';\nconst history = createBrowserHistory();\n// or a iframe BrowserHistory\nimport { createBrowserHistory } from 'umi';\nconst history = createBrowserHistory({\n  window: iframe.contentWindow,\n});\n```\n\n----------------------------------------\n\nTITLE: Modify Build Script in package.json\nDESCRIPTION: Updates the build script in package.json to ensure that the Prisma client is generated before each build. This is necessary for Prisma to function correctly during the build process.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"build\": \"umi build\",\n    \"postinstall\": \"umi setup\",\n    \"start\": \"npm run dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valtio Map Usage\nDESCRIPTION: This snippet demonstrates using `proxyMap` from `umi` for managing map-like data structures in Valtio.  It shows how to create a reactive map that can be used for storing key-value pairs. Requires importing `proxy` and `proxyMap` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, proxyMap } from 'umi';\n\nconst state = proxy({\n  todos: proxyMap<number, Todo>([[1, {id:1,text:'Learn Umi'}]]),\n  filter: 'all',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS RouteAPI (Direct)\nDESCRIPTION: This command directly generates a new RouteAPI file api/films.ts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api films\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Tags in UmiJS\nDESCRIPTION: This snippet shows how to configure additional link tags in UmiJS.  It can be used to specify preload links, stylesheet links, and more.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nlinks: [{ href: '/foo.css', rel: 'preload' }],\n```\n\n----------------------------------------\n\nTITLE: Connect Component with Props Mapping\nDESCRIPTION: This code shows how to connect a React component using the `connect` decorator from `umi` and map model data to component props.  It defines a `mapModelToProps` function that receives all models and returns an object containing the props to be passed to the component. The component then accesses these props through `this.props.test`.  It needs the `umi` library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\nconst mapModelToProps = allModels => {\n  return {\n    test: 'hello world',\n    // props you want connect to Component\n  };\n};\n\n@connect(mapModelToProps)\nclass UserInfo extends Component {\n  render() {\n    return <div>{this.props.test}</div>;\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Umi Plugin Definition\nDESCRIPTION: This Typescript snippet demonstrates how to define a plugin in UmiJS using the `plugin.ts` file. Plugins can be used to customize Umi's behavior, such as modifying the HTML output or configuring webpack.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  api.onDevCompileDone((opts) => {\n    opts;\n    // console.log('> onDevCompileDone', opts.isFirstCompile);\n  });\n  api.modifyHTML(($) => {\n    $;\n  });\n  api.chainWebpack((memo) => {\n    memo;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Target IE11 (JavaScript)\nDESCRIPTION: This JavaScript configures the minimum browser versions to support, specifically targeting Internet Explorer 11.  UmiJS will automatically include polyfills, configure Autoprefixer and perform syntax transformations to support older browsers.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Support ie11\ntargets: {\n  ie: 11,\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Configuration\nDESCRIPTION: Demonstrates how to configure dynamic routes in Umi using the `$` prefix for directories or files.  This allows for route parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index.tsx' },\n  { path: '/foo/:slug', component: '@/pages/foo/$slug.tsx' },\n  { path: '/:bar/*', component: '@/pages/$bar/$.tsx' },\n]\n```\n\n----------------------------------------\n\nTITLE: Use Outlet Context Hook Definition Typescript\nDESCRIPTION: Defines the `useOutletContext` hook, which returns the `context` mounted on the `Outlet` component. This hook allows passing data from a parent route to its child routes via the Outlet component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useOutletContext<Context = unknown>(): Context;\n```\n\n----------------------------------------\n\nTITLE: Listing Available UmiJS Generators\nDESCRIPTION: This command lists all available generators in UmiJS. It allows users to interactively select a generator with detailed prompts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ umi generate\n# Or\n$ umi g\n```\n\n----------------------------------------\n\nTITLE: Generated UmiJS Page with Custom Variables (TSX)\nDESCRIPTION: This code snippet shows the resulting page content after running the UmiJS page generator with custom variables. The msg variable is set to \"Hello World\" and the count variable is set to 10.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport './foo.less'\n\nconst message = 'Hello World'\nconst count = 10\n```\n\n----------------------------------------\n\nTITLE: Configure Umi Plugin via Configuration (JavaScript)\nDESCRIPTION: This example shows how to configure a Umi plugin through its key in the configuration. It configures the built-in Umi mock plugin to exclude files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  mock: { exclude: ['./foo'] }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading UmiJS for Debugging (Bash)\nDESCRIPTION: This snippet downloads the `umi.js` file from the local development server, allowing you to modify it for debugging purposes.  It then adds an alert to the file and restarts to demonstrate the changes. Finally, it removes the modified file to return to the original state.  It requires curl to download the file and rm to delete the file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download the umi.js of the current project\n$curl http://127.0.0.1:8000/umi.js -O\n\n# Add the content you want to debug, for example, add an \"debug!!!\" alert\n$ echo -e  '\\n;alert(\"debug!!!\");\\n' >> umi.js\n# Open the browser to see the alert box\n\n# Exit debugging and return to normal state\n$rm umi.js\n```\n\n----------------------------------------\n\nTITLE: Custom Permission Page Configuration (TSX)\nDESCRIPTION: This code snippet illustrates how to customize the permission denied (403) and not found (404) pages using `src/app.tsx`.  You configure the `unAccessible` and `noFound` properties within the `layout` config to render custom components for unauthorized access and non-existent pages, respectively.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const layout: RunTimeLayoutConfig = () => {\n  return {\n    // Customize the 403 page\n    unAccessible: <div>'unAccessible'</div>,\n    // Customize the 404 page\n    noFound: <div>'noFound'</div>,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Data Object Example for Line Chart\nDESCRIPTION: This JSON snippet represents the structure of the data expected by the line chart component. It contains a 'Date' field for the x-axis and a 'scales' field for the y-axis, allowing the chart to plot the data points over time.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Date\": \"2010-01\",\n  \"scales\": 1998\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes with matchRoutes in UmiJS (TypeScript)\nDESCRIPTION: Demonstrates how to use `matchRoutes` to match a given path against an array of potential routes. Returns an array of route matches with associated parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { matchRoutes from 'umi';\nconst match = matchRoutes(\n  [\n    {\n      path: \"/users/:id\",\n    },\n    {\n      path: \"/users/:id/posts/:postId\",\n    },\n  ],\n  \"/users/123/posts/456\",\n);\n// [\n//  {\n//    \"params\": {\n//      \"id\": \"123\",\n//       \"postId\": \"456\"\n//     },\n//     \"pathname\": \"/users/123/posts/456\",\n//     \"pathnameBase\": \"/users/123/posts/456\",\n//     \"route\": {\n//       \"path\": \"/users/:id/posts/:postId\"\n//     }\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Register Plugins Example - TypeScript\nDESCRIPTION: Illustrates registering plugins using relative and resolved paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerPlugins([\n  './plugin',\n  require.resolve('./plugin_foo')\n])\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Directory)\nDESCRIPTION: This command generates a new page (bar) as a directory containing index.tsx and index.less files within the src/pages/bar/ directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page bar --dir\n```\n\n----------------------------------------\n\nTITLE: Install nvm on macOS or Linux\nDESCRIPTION: This command downloads and executes the nvm installation script to install Node Version Manager (nvm) on macOS or Linux systems. Nvm is useful for managing multiple Node.js versions. It then checks the nvm version to confirm installation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n$ nvm -v\n0.39.1\n```\n\n----------------------------------------\n\nTITLE: Customizing Locale Options in UmiJS (JavaScript)\nDESCRIPTION: This javascript code snippet showcases how to customize `react-intl` initialization options within UmiJS's `app.ts` file. It exports a `locale` object that configures properties like the text component and an error handler.  This provides more control over the internationalization settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// src/app.ts\nimport { RuntimeConfig } from '@umijs/max'\n\nexport const locale: RuntimeConfig['locale'] = {\n  textComponent: 'span',\n  onError: () => {\n    console.log('error handler...');\n  }\n  // locale: string\n  // formats: CustomFormats\n  // messages: Record<string, string> | Record<string, MessageFormatElement[]>\n  // defaultLocale: string\n  // defaultFormats: CustomFormats\n  // timeZone?: string\n  // textComponent?: React.ComponentType | keyof React.ReactHTML\n  // wrapRichTextChunksInFragment?: boolean\n  // defaultRichTextElements?: Record<string, FormatXMLElementFn<React.ReactNode>>\n  // onError(err: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Configure CSS minifier options in UmiJS (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the `cssMinifierOptions` option in UmiJS to pass specific options to the CSS minification tool. The options available depend on the chosen minifier (esbuild, cssnano, or parcelCSS).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cssMinifier: 'esbuild',\n  cssMinifierOptions: {\n    minifyWhitespace: true,\n    minifySyntax: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Browser History in UmiJS (TypeScript)\nDESCRIPTION: Creates a BrowserHistory instance for tracking application navigation using the browser's built-in history API.  Supports optional window configuration for iframe usage.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// create a BrowserHistory\nimport { createBrowserHistory } from 'umi';\nconst history = createBrowserHistory();\n// or a iframe BrowserHistory\nimport { createBrowserHistory } from 'umi';\nconst history = createBrowserHistory({\n  window: iframe.contentWindow,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Umi project with pnpm\nDESCRIPTION: This snippet demonstrates how to use the `pnpm create umi` command to create a new Umi project. It shows creating a project interactively and specifying a directory for the project. The `create-umi` package must be installed to run the command.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/boilerplate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 在向导中输入文件夹名称\npnpm create umi\n# 在当前目录的 my-umi-app 文件夹下创建项目\npnpm create umi my-umi-app\n```\n\n----------------------------------------\n\nTITLE: Generating DvaJS Configuration\nDESCRIPTION: This command enables DvaJS configuration for the project, updates '.umirc.ts', and generates an example model file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$umi g dva\n```\n\n----------------------------------------\n\nTITLE: Selecting Environment Variables for Cache Versioning\nDESCRIPTION: This code demonstrates how to select specific environment variables for generating a cache version.  It's crucial to include only variables that actually impact the build to prevent unnecessary cache invalidation. This snippet shows picking specific environment variables that might affect the build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/webpack-5-prod-cache.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 如挑选可能会影响项目内容的环境变量\ncreateEnvironmentHash({\n  NODE_ENV: process.env.NODE_ENV,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Variables to UmiJS Component Generator\nDESCRIPTION: This command shows how to pass custom variables (msg) to the UmiJS component generator.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component foo --msg \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Declaring CSS Style\nDESCRIPTION: This CSS snippet demonstrates how to declare a CSS class named `.title` with the `color` property set to `red`.  This style can be used throughout the Umi project if imported directly, or scoped via CSS Modules.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing MFSU Dependencies in UmiJS\nDESCRIPTION: This command is used to manage MFSU (Module Federation Shared Utilities) dependencies in the UmiJS project. It allows viewing MFSU dependency information, rebuilding MFSU dependencies, and clearing MFSU dependencies to optimize the build process and improve performance. Several subcommands are available.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu ls\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ # Delete dependency information list\n$ umi mfsu remove\n$ # Delete dependency information list and product files\n$ umi mfsu remove --all\n```\n\n----------------------------------------\n\nTITLE: Rendering Dot Map with Ant Design Maps\nDESCRIPTION: This React component uses the `DotMap` component from `@ant-design/maps` to render a dot map. It configures the map type, style, zoom level, and center. The component also defines the data source, size, and color mapping based on the 'style' field to differentiate city types.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { DotMap } from '@ant-design/maps';\n\nconst DemoDotMap: React.FC = () => {\n  // fetch data\n\n  const config = {\n    map: {\n      type: 'mapbox',\n      style: 'dark',\n      zoom: 3,\n      center: [107.4976, 32.1697],\n      pitch: 0,\n    },\n    source: {\n      data,\n      parser: {\n        type: 'json',\n        coordinates: 'lnglat',\n      },\n    },\n    size: 4,\n    color: {\n      field: 'style',\n      value: ({ style }) => {\n        if (style == 0) {\n          return '#14B4C9';\n        } else if (style == 1) {\n          return '#3771D9';\n        } else {\n          return '#B8EFE2';\n        }\n      },\n    },\n    legend: {\n      type: 'category',\n      position: 'bottomleft',\n      items: [\n        {\n          color: '#14B4C9',\n          value: '地级市',\n        },\n        {\n          color: '#3771D9',\n          value: '县城市',\n        },\n        {\n          color: '#B8EFE2',\n          value: '区县',\n        },\n      ],\n    },\n  };\n\n  return <DotMap {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Preview UmiJS Production Build\nDESCRIPTION: This command previews the UmiJS production build locally.  It starts a static web server to serve the built application. It allows previewing the application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ umi preview --port 9527\n```\n\n----------------------------------------\n\nTITLE: Copy files with specific locations in UmiJS (TypeScript)\nDESCRIPTION: This code snippet illustrates how to configure the `copy` option in UmiJS with specific `from` and `to` locations, which allow for more precise control over where files are copied within the output directory. The paths specified in `from` and `to` are relative to the project root.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncopy: [\n  { from: 'from', to: 'dist/output' },\n  { from: 'file.json', to: 'dist' }\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure Example\nDESCRIPTION: Illustrates the structure of the JSON data fetched for the line chart.  The data contains a 'Date' and corresponding 'scales' value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Date\": \"2010-01\",\n  \"scales\": 1998\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite (JavaScript)\nDESCRIPTION: This JavaScript shows how to configure Vite options in UmiJS, specifically changing the temporary file path. This enables customization of Vite's behavior within the UmiJS project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Change temporary file path to node_modules/.bin/.vite folder\nvite: {\n  cacheDir: 'node_modules/.bin/.vite',\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UmiJS Prettier Configuration\nDESCRIPTION: This command generates the Prettier configuration files (.prettierrc and .prettierignore) and updates package.json with the necessary dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$umi g prettier\n```\n\n----------------------------------------\n\nTITLE: Generate Pages\nDESCRIPTION: Generates page components using the Umi micro generator for login, posts, and create post functionalities. This command automatically creates the required files and directories for these pages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx umi g page login posts/post posts/create\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command runs the test suite for the Umi project. Running tests locally before submitting a PR helps reduce Round Trips. The second example shows how to run tests for specific files using `pnpm jest`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm jest packages/plugin-docs/src/compiler.test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @umijs/lint\nDESCRIPTION: This snippet shows how to install the `@umijs/lint` package as a development dependency using npm or pnpm. This package is required when using Umi and provides the linting functionality.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @umijs/lint -D\n# or\n$ pnpm add @umijs/lint -D\n```\n\n----------------------------------------\n\nTITLE: Generating Paths with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the generatePath function from UmiJS to generate a route path from a path pattern and parameters. It's useful for creating dynamic links based on route configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generatePath } from 'umi';\n\ngeneratePath(\"/users/:id\", { id: \"42\" }); // \"/users/42\"\ngeneratePath(\"/files/:type/*\", {\n  type: \"img\",\n  \"*\": \"cat.jpg\",\n}); // \"/files/img/cat.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Umi Plugin Example\nDESCRIPTION: Demonstrates the structure of a project-level Umi plugin defined in `plugin.ts`. This example shows how to use plugin API hooks like `onDevCompileDone`, `modifyHTML`, and `chainWebpack`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  api.onDevCompileDone((opts) => {\n    opts;\n    // console.log('> onDevCompileDone', opts.isFirstCompile);\n  });\n  api.modifyHTML(($) => {\n    $;\n  });\n  api.chainWebpack((memo) => {\n    memo;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (OS X, Linux) - Bash\nDESCRIPTION: Demonstrates how to set an environment variable and use it with the `umi dev` command on OS X and Linux systems. This example sets the `PORT` variable to `3000` before running the development server.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ PORT=3000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Husky pre-commit hook configuration\nDESCRIPTION: This snippet demonstrates how to modify the `.husky/pre-commit` file to use `npx lint-staged` instead of `npm test`. This ensures that linting is performed on staged files before each commit.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\n- npm test\n+ npx lint-staged\n```\n\n----------------------------------------\n\nTITLE: Setting Webpack Configuration with MFSU\nDESCRIPTION: Modifies the webpack configuration using MFSU to apply MFSU specific configurations.  The original webpack configuration needs to be extracted into an object and then applied using the mfsu.setWebpackConfig function, which is an async function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst config = {\n  // origin webpack config\n};\n\nconst depConfig = {\n  // webpack config for dependencies\n};\n\n// [mfsu] 4. inject mfsu webpack config\nconst getConfig = async () => {\n  await mfsu.setWebpackConfig({\n    config,\n    depConfig,\n  });\n  return config;\n};\n\nmodule.exports = getConfig();\n```\n\n----------------------------------------\n\nTITLE: UmiJS Global Default Loader Configuration\nDESCRIPTION: This code snippet demonstrates how to configure a global default loader in UmiJS for all micro-apps. The `defaultLoader` property specifies the path to a component that will be used as the loading animation for all micro-apps unless overridden by a specific micro-app's `loader` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nqiankun: {\n  master: {\n    defaultLoader: '@/defaultLoader',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters with query-string\nDESCRIPTION: Shows how to access query parameters from the `history.location` object using the `query-string` library because location.query is no longer directly supported. Requires the installation of the `query-string` dependency.  Query parameters can be accessed using the parse function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- const { query } = history.location;\n+ import { parse } from 'query-string';\n+ const query = parse(history.location.search);\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Middleware (Webpack 5)\nDESCRIPTION: This code adds MFSU's devServer middleware to webpack-dev-server. This middleware provides the bundled resources required by MFSU. It applies specifically to Webpack 5.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  devServer: {\n    // [mfsu] 2. add mfsu middleware\n    setupMiddlewares(middlewares, devServer) {\n      middlewares.unshift(...mfsu.getMiddlewares());\n      return middlewares;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Style\nDESCRIPTION: This snippet demonstrates how to define a CSS class style in a `.css` file. In this case, the `.title` class is styled with red color.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Access Component (JavaScript)\nDESCRIPTION: This code snippet shows how to use the `Access` component to conditionally render content based on a permission.  The `accessible` prop determines whether the children are rendered. The `fallback` prop specifies the content to render when access is denied.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/access.en-US.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useAccess, Access } from 'umi';\n\nconst PageA = (props) => {\n  const { foo } = props;\n  const access = useAccess(); // members of access: canReadFoo, canUpdateFoo, canDeleteFoo\n\n  if (access.canReadFoo) {\n    // If can read Foo, then...\n  }\n\n  return (\n    <div>\n      <Access\n        accessible={access.canReadFoo}\n        fallback={<div>Can not read foo content.</div>}\n      >\n        Foo content.\n      </Access>\n      <Access\n        accessible={access.canUpdateFoo}\n        fallback={<div>Can not update foo.</div>}\n      >\n        Update foo.\n      </Access>\n      <Access\n        accessible={access.canDeleteFoo(foo)}\n        fallback={<div>Can not delete foo.</div>}\n      >\n        Delete foo.\n      </Access>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default Template in UmiJS Component Generator\nDESCRIPTION: This command forces the UmiJS component generator to use the default template, even if a custom template exists in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component foo --fallback\n```\n\n----------------------------------------\n\nTITLE: Listing Available UmiJS Generators (Bash)\nDESCRIPTION: This command lists all available generators in UmiJS. It can be used to explore the available options and interactively select a generator to use.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ umi generate\n# 或者\n$ umi g\n```\n\n----------------------------------------\n\nTITLE: Different Global Layouts Example (JavaScript)\nDESCRIPTION: This Javascript code demonstrates how to use different layouts based on the current route path.  It utilizes the `useLocation` hook from UmiJS to determine the current path and render different layouts accordingly. For the `/login` path, it renders a `SimpleLayout`; otherwise, it renders a more comprehensive layout with `Header` and `Footer` components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { useLocation, Outlet } from 'umi';\n\nexport default function() {\n  const location = useLocation();\n  if (location.pathname === '/login') {\n    return <SimpleLayout><Outlet /></SimpleLayout>\n  }\n\n  // Using `useAppData` / `useSelectedRoutes` for more routing information\n  // const { clientRoutes } = useAppData()\n  // const routes = useSelectedRoutes()\n\n  return (\n    <>\n      <Header />\n      <Outlet />\n      <Footer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Less Loader Options Configuration in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code configures the less-loader options in UmiJS, allowing customization of Less compilation. The example does not show specific configurations, but points to the less-loader documentation for available options.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nlegacy: {}\n```\n\n----------------------------------------\n\nTITLE: Overriding Render Function (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override the default render function using the `render` configuration. It performs an authorization check before rendering the application. If the user is not logged in, it redirects them to the login page, and then calls `oldRender()`. This allows for implementing custom rendering logic.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport function render(oldRender) {\n  fetch('/api/auth').then(auth => {\n    if (auth.isLogin) { oldRender() }\n    else {\n      location.href = '/login';\n      oldRender()\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS Page Template Example with Variables\nDESCRIPTION: This example demonstrates the usage of template variables in the page template files. It imports a less file and uses variables for a message and count.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport './{{{name}}}.less'\n\nconst message = '{{{msg}}}'\nconst count = {{{count}}}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm\nDESCRIPTION: This snippet shows how to install pnpm, a package manager recommended by the UmiJS team. The first command downloads and executes the pnpm installation script.  The second command verifies the installation by checking the installed version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n$ pnpm -v\n7.3.0\n```\n\n----------------------------------------\n\nTITLE: Ejecting the UmiJS Component Template\nDESCRIPTION: This command ejects the default component template files into the `/templates/component` directory for customization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component --eject\n```\n\n----------------------------------------\n\nTITLE: List UmiJS Plugins\nDESCRIPTION: This command lists all plugins currently used in the UmiJS project.  It shows the plugins loaded. It assists in understanding the architecture.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ umi plugin list\n```\n\n----------------------------------------\n\nTITLE: Default HTML Template for MPA\nDESCRIPTION: The default HTML template used for MPA pages, including placeholders for title and mount element ID.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n  <body>\n    <div id=\"<%= mountElementId %>\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configure CSS minifier in UmiJS (JavaScript)\nDESCRIPTION: This code demonstrates how to configure the `cssMinifier` option in UmiJS to specify the tool used for CSS minification during the build process. Options include 'esbuild', 'cssnano', 'parcelCSS', and 'none'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cssMinifier: 'esbuild'\n}\n```\n\n----------------------------------------\n\nTITLE: Create UmiJS project with BUN\nDESCRIPTION: This command uses `bunx` to execute the `create-umi` tool and creates a new UmiJS project, specifying a 'Simple App' template.  It initializes the project structure.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx create-umi\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › pnpm\n✔ Pick Npm Registry › npm\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy:  src/assets/yay.jpg\nCopy:  src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy:  src/pages/docs.tsx\nCopy:  src/pages/index.tsx\nWrite: tsconfig.json\nCopy:  typings.d.ts\nready - Git initialized successfully\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Head Scripts Configuration\nDESCRIPTION: This snippet shows the generated HTML output from the `headScripts` configuration.  It includes both inline scripts and external script sources.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  alert(1);\n</script>\n<script src=\"https://a.com/b.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Match in Class Components\nDESCRIPTION: Demonstrates how to get route parameters in class component using `matchPath`. It leverages import { matchPath } from 'umi'.  The class component gets the current match data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nimport { matchPath } from 'umi';\nclass Page extends Component {\n+  match = matchPath({ path: 'list/search/:type' }, window.location.pathname);\n  state = {}\n  render() {\n    return (\n      <div>\n-        {this.props.match.type}\n+        {this.match.type} \n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Navigate Hook Definition Typescript\nDESCRIPTION: Defines the `useNavigate` hook, which returns a function that controls navigation. The navigate function can be used to jump to a new path or go back in the history.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useNavigate(): NavigateFunction;\n\ninterface NavigateFunction {\n  (\n    to: To,\n    options?: { replace?: boolean; state?: any }\n  ): void;\n  (delta: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated UmiJS Page Content Example\nDESCRIPTION: This code is the generated page content after running the `umi g page foo --msg \"Hello World\" --count 10` command, showcasing the variable substitution.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport './foo.less'\n\nconst message = 'Hello World'\nconst count = 10\n```\n\n----------------------------------------\n\nTITLE: Independent Route Sub-application Integration (Parent)\nDESCRIPTION: This code shows how to load a sub-application with an independent route using the `<MicroAppWithMemoHistory />` component. The `name` prop specifies the sub-application to load, and the `url` prop specifies the route within the sub-application to display.  The sub-application's route remains independent of the parent's.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroAppWithMemoHistory } from 'umi';\n\nexport default function Page() {\n  return <MicroAppWithMemoHistory name=\"app2\" url=\"/some/page\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom React Intl Options (JavaScript)\nDESCRIPTION: This snippet demonstrates how to provide custom React Intl options in `src/app.ts`. \nIt allows users to configure more `react-intl` initialization options.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// src/app.ts\nimport { RuntimeConfig } from '@umijs/max'\n\nexport const locale: RuntimeConfig['locale'] = {\n  textComponent: 'span',\n  onError: () => {\n    console.log('error handler...');\n  }\n  // locale: string\n  // formats: CustomFormats\n  // messages: Record<string, string> | Record<string, MessageFormatElement[]>\n  // defaultLocale: string\n  // defaultFormats: CustomFormats\n  // timeZone?: string\n  // textComponent?: React.ComponentType | keyof React.ReactHTML\n  // wrapRichTextChunksInFragment?: boolean\n  // defaultRichTextElements?: Record<string, FormatXMLElementFn<React.ReactNode>>\n  // onError(err: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Umi Commands\nDESCRIPTION: This command displays a list of all available UmiJS commands and their basic descriptions. It provides an overview of the Umi CLI's capabilities, allowing developers to quickly understand the available tools for project management and development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\numi help\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with cross-env\nDESCRIPTION: This example utilizes the `cross-env` package to ensure cross-platform compatibility when setting environment variables.  First, `cross-env` is installed as a development dependency, then used to set the PORT environment variable before executing `umi dev`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install cross-env -D\n$ cross-env PORT=3000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Cache in UmiJS\nDESCRIPTION: This code snippet demonstrates how to configure the filesystem cache in a UmiJS project using the `chainWebpack` function. It enables caching for production environments, specifying the cache type, store, and build dependencies. It uses a hash of the environment variables to version the cache. It imports necessary modules like `join`, `defineConfig`, and `createHash`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/webpack-5-prod-cache.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nimport { join } from 'path';\nimport { defineConfig } from 'umi';\nimport { createHash } from 'crypto';\n\nexport default defineConfig({\n  chainWebpack(config, { env }) {\n    if (env === 'production') {\n      config.cache({\n        type: 'filesystem',\n        store: 'pack',\n        // 🟡 假如你的项目在 CI 中构建每次环境变量都不一样，请挑选或者排除\n        version: createEnvironmentHash(process.env),\n        buildDependencies: {\n          config: [__filename],\n          tsconfig: [join(__dirname, 'tsconfig.json')],\n          packagejson: [join(__dirname, 'package.json')],\n          umirc: [join(__dirname, '.umirc.ts')],\n          // 🟡 其他可能会影响项目的配置文件路径，其内容变更会使缓存失效\n        },\n      });\n    }\n  },\n});\n\nfunction createEnvironmentHash(env: Record<string, any>) {\n  const hash = createHash('md5');\n  hash.update(JSON.stringify(env));\n  const result = hash.digest('hex');\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Cache in UmiJS\nDESCRIPTION: This code snippet demonstrates how to configure the Webpack 5 filesystem cache within a UmiJS project. It leverages the `chainWebpack` function to modify the webpack configuration and enable caching. The configuration includes setting the cache type, store, version, and build dependencies. It also illustrates how to create an environment hash to manage cache invalidation based on environment variables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/webpack-5-prod-cache.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nimport { join } from 'path';\nimport { defineConfig } from 'umi';\nimport { createHash } from 'crypto';\n\nexport default defineConfig({\n  chainWebpack(config, { env }) {\n    if (env === 'production') {\n      config.cache({\n        type: 'filesystem',\n        store: 'pack',\n        // 🟡 假如你的项目在 CI 中构建每次环境变量都不一样，请挑选或者排除\n        version: createEnvironmentHash(process.env),\n        buildDependencies: {\n          config: [__filename],\n          tsconfig: [join(__dirname, 'tsconfig.json')],\n          packagejson: [join(__dirname, 'package.json')],\n          umirc: [join(__dirname, '.umirc.ts')],\n          // 🟡 其他可能会影响项目的配置文件路径，其内容变更会使缓存失效\n        },\n      });\n    }\n  },\n});\n\nfunction createEnvironmentHash(env: Record<string, any>) {\n  const hash = createHash('md5');\n  hash.update(JSON.stringify(env));\n  const result = hash.digest('hex');\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Use Resolved Path Hook Definition Typescript\nDESCRIPTION: Defines the `useResolvedPath` hook, which resolves the complete routing information for a target address based on the current path. This hook returns an object containing the pathname, search, and hash.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useResolvedPath(to: To): Path;\n```\n\n----------------------------------------\n\nTITLE: Component Testing with Jest Inline Snapshot (TSX)\nDESCRIPTION: This test case uses Jest's inline snapshot feature to verify the rendering of the `Greet` component without a name prop.  It renders the component and updates the test with the inline snapshot.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\ntest('renders Greet without name by inline snapshot', () => {\n  const { container } = render(<Greet />);\n\n  expect(container).toMatchInlineSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Omitting GET Method\nDESCRIPTION: This snippet shows how to omit the `GET` method when defining mock interfaces. If the HTTP method is `GET`, you can just specify the path directly as the key in the mock object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  '/api/users': [\n    { id: 1, name: 'foo' },\n    { id: 2, name: 'bar' }\n  ],\n\n  '/api/users/1': { id: 1, name: 'foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling UmiJS Plugins via Environment Variables\nDESCRIPTION: This example demonstrates enabling UmiJS plugins using environment variables.  The `UMI_PRESETS` variable is used to specify the path to a preset file. This method is typically used for secondary packaging based on the Umi framework.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ UMI_PRESETS = foo/preset.js umi dev\n```\n\n----------------------------------------\n\nTITLE: Conditional MFSU Initialization Based on Environment\nDESCRIPTION: Ensures MFSU is only initialized and its plugins are only applied in development environments by checking the NODE_ENV environment variable.  This prevents MFSU from affecting production builds.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isDev = process.env.NODE_ENV === 'development'\n\nconst mfsu = isDev\n  ? new MFSU({\n      implementor: webpack,\n      buildDepWithESBuild: true,\n    })\n  : undefined\n\n// e.g.\n{\n  test: /\\.[jt]sx?$/,\n  exclude: /node_modules/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      plugins: [\n        ...(isDev ? [] : mfsu.getBabelPlugins())\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS Copy Configuration with Specific Destination (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure files to be copied to specific directories in the output. The snippet shows how to configure the `copy` option using an object to specify the 'from' and 'to' paths. Copies `from` to `dist/output` and `file.json` to `dist`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncopy: [\n  { from: 'from', to: 'dist/output' },\n  { from: 'file.json', to: 'dist' }\n]\n```\n\n----------------------------------------\n\nTITLE: Enable react-query in umi\nDESCRIPTION: This code snippet shows how to enable react-query in a umi project. It involves adding the `@umijs/plugins/dist/react-query` plugin and configuring the `reactQuery` option.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: ['@umijs/plugins/dist/react-query'],\n  reactQuery: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Add Entry Code in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add code at the end of the entry file using `api.addEntryCode`. The function should return a string or an array of strings that will be added to the entry file. This example adds a console log statement.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napi.addEntryCode(() => `console.log('I am after render!')`);\n```\n\n----------------------------------------\n\nTITLE: Describe Plugin Configuration Example - TypeScript\nDESCRIPTION: Provides a practical example of using `api.describe` to configure a plugin named `foo` with a string schema, regenerating temporary files on configuration change, and enabling only when configured.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.describe({\n  key: 'foo',\n  config: {\n    schema(joi){\n      return joi.string();\n    },\n    onChange: api.ConfigChangeType.regenerateTmpFiles,\n  },\n  enableBy: api.EnableBy.config,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title on Route Change in UmiJS\nDESCRIPTION: This code demonstrates how to use the `onRouteChange` function to set the document title based on the route's title property. It uses `matchRoutes` from UmiJS to find the matching route.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { matchRoutes } from 'umi';\n\nexport function onRouteChange({ clientRoutes, location }) {\n  const route = matchRoutes(clientRoutes, location.pathname)?.pop()?.route;\n  if (route) {\n    document.title = route.title || '';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling MFSU in UmiJS\nDESCRIPTION: This snippet demonstrates how to disable the MFSU (Module Federation Speed Up) functionality in UmiJS. By setting the `mfsu` configuration option to `false`, the dependency pre-compilation process is disabled. This might be useful in certain scenarios where MFSU causes issues or is not desired.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// Disable mfsu functionality\nmfsu: false;\n```\n\n----------------------------------------\n\nTITLE: Disabling MFSU in UmiJS\nDESCRIPTION: This snippet demonstrates how to disable the MFSU (Module Federation Speed Up) feature in UmiJS. Setting `mfsu` to `false` turns off the module federation-based optimization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// 关闭 mfsu 功能\nmfsu: false;\n```\n\n----------------------------------------\n\nTITLE: Multiple Route Aliases\nDESCRIPTION: This example demonstrates how to define multiple aliases for a route.  In this case, the route for `/users` has a nested route with the component `/users/UserList`. This nested route has aliases '/people' and 'list'.  Therefore, the UserList component will be rendered when the user visits `/users`, `/users/list`, or `/people`. Note that the alias 'list' gets appended to the path of its parent i.e. `/users`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/users',\n      component: 'users',\n      routes: [\n        // 为这 3 个 URL 呈现 UserList\n        // - /users\n        // - /users/list\n        // - /people\n        { path: '', component: '/users/UserList', alias: ['/people', 'list'] },\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Parent Application (Plugin)\nDESCRIPTION: This code snippet demonstrates how to configure the parent application in UmiJS to register child applications through the qiankun plugin. It specifies the 'name' and 'entry' for each child application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    master: {\n      apps: [\n        {\n          name: 'app1',\n          entry: '//localhost:7001',\n        },\n        {\n          name: 'app2',\n          entry: '//localhost:7002',\n        },\n      ],\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring monorepoRedirect with exclude in UmiJS\nDESCRIPTION: This snippet configures the `exclude` option within `monorepoRedirect` to specify dependencies that should not be redirected.  Any subpackage import matching the provided regular expression will not be redirected to its source code location. In this case, any subpackage under the `@scope` namespace will not be redirected.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// 不重定向 @scope/* 的子包\nmonorepoRedirect: {\n  exclude: [/^@scope\\/.+/],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (Windows) - Bash\nDESCRIPTION: Demonstrates how to set an environment variable and use it with the `umi dev` command on Windows systems using `cmd.exe`. This example sets the `PORT` variable to `3000` before running the development server.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ set PORT=3000&&umi dev\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Model Plugin\nDESCRIPTION: This code snippet demonstrates how to configure the UmiJS Model plugin within the UmiJS configuration file.  It shows how to specify extra Model files to be included and how to define a sorting function for the Models. The `extraModels` property defines an array of file paths to Model files, while the `sort` property accepts a function to sort the Model files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  model: {\n    extraModels: ['src/models/userModel.ts'],\n    sort: (a, b) => a.namespace.localeCompare(b.namespace),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and Stylelint\nDESCRIPTION: This snippet demonstrates how to install ESLint and Stylelint as development dependencies using npm or pnpm.  Stylelint version 14 or higher is required.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D eslint \"stylelint@^14\"\n# or\n$ pnpm add -D eslint \"stylelint@^14\"\n```\n\n----------------------------------------\n\nTITLE: Query String Serialization\nDESCRIPTION: Demonstrates how to configure query string serialization to match the UmiJS 3 behavior (no brackets for array parameters) when upgrading to UmiJS 4.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.[ts|tsx]\n\n/** @doc https://github.com/sindresorhus/query-string#arrayformat-1 */\n+ import queryString from 'query-string';\n\nexport const request: RequestConfig = {\n+  paramsSerializer(params) {\n+    return queryString.stringify(params);\n+  },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring topLevelImportPaths for babel plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the `topLevelImportPaths` option for the styled-components babel plugin. This is necessary when importing `styled` from a source other than `umi` or `@umijs/max`, such as `alita`.  This ensures that the babel plugin correctly transforms styled-components syntax.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  styledComponents: {\n    babelPlugin: {\n      topLevelImportPaths: ['alita']\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Column Chart (React with Ant Design Charts)\nDESCRIPTION: This React component renders a column chart using the Ant Design Charts library.  It uses a custom color mapping to highlight specific data points, and configures the chart with data and axis labels.  It imports the Column component from the ant-design/plots package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Column } from '@ant-design/plots';\n\nconst DemoColumn: React.FC = () => {\n  // fetch data\n\n  const paletteSemanticRed = '#F4664A';\n  const brandColor = '#5B8FF9';\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'value',\n    seriesField: '',\n    color: ({ type }) => {\n      if (type === '5+ seconds') {\n        return paletteSemanticRed;\n      }\n\n      return brandColor;\n    },\n    legend: false,\n    xAxis: {\n      label: {\n        autoHide: true,\n        autoRotate: false,\n      },\n    },\n  };\n\n  return <Column {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Initial State in UmiJS with getInitialState\nDESCRIPTION: This example shows how to define a `getInitialState` function in `src/app.ts` to fetch initial data for the application.  The fetched data becomes the global initial state accessible via `useModel('@@initialState')`. Requires a `fetchInitialData` function from '@/services/initial'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nimport { fetchInitialData } from '@/services/initial';\n\nexport async function getInitialState() {\n  const initialData = await fetchInitialData();\n  return initialData;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Webpack Configuration for MFSU\nDESCRIPTION: This code modifies the webpack configuration using MFSU.  It calls `mfsu.setWebpackConfig` to adjust the webpack configuration.  The original webpack configuration needs to be separated into a `config` object. This function is asynchronous and requires awaiting.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst config = {\n  // origin webpack config\n};\n\nconst depConfig = {\n  // webpack config for dependencies\n};\n\n// [mfsu] 4. inject mfsu webpack config\nconst getConfig = async () => {\n  await mfsu.setWebpackConfig({\n    config,\n    depConfig,\n  });\n  return config;\n};\n\nmodule.exports = getConfig();\n```\n\n----------------------------------------\n\nTITLE: Introduce Child Apps (<MicroApp />)\nDESCRIPTION: This code snippet demonstrates how to introduce a child application using the `<MicroApp />` component in UmiJS. The `name` prop specifies the registered name of the child application to load.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating UmiJS Precommit Configuration\nDESCRIPTION: This command sets up pre-commit hooks using Husky and lint-staged.  It updates package.json with devDependencies and scripts, creates .lintstagedrc, and configures Husky hooks in the .husky directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$umi g precommit\n```\n\n----------------------------------------\n\nTITLE: Configuring extraBabelPlugins in UmiJS\nDESCRIPTION: This configuration conditionally enables the 'babel-plugin-dynamic-import-node' plugin in production environments.  It enhances performance by allowing dynamic imports to be handled correctly in the production build process. It only enables the plugin if the NODE_ENV environment variable is set to 'production'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  extraBabelPlugins: process.env.NODE_ENV === 'production' \n    ? ['babel-plugin-dynamic-import-node'] \n    : []\n}\n```\n\n----------------------------------------\n\nTITLE: SOCKET_SERVER Environment Variable Usage - Bash\nDESCRIPTION: Shows how to specify a socket server for HMR using the `SOCKET_SERVER` environment variable. This allows you to configure the HMR server to a specific address and port.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ SOCKET_SERVER=http://localhost:8000/ umi dev\n```\n\n----------------------------------------\n\nTITLE: Implementing HeaderSearch Component in React/TSX\nDESCRIPTION: This code demonstrates the implementation of the HeaderSearch component, an input box with autocompletion functionality.  The `options` prop provides suggestions, and the `onSearch` prop handles the search event, logging the input value to the console. It imports necessary components from antd and uses the HeaderSearch component.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport { Button, Menu } from 'antd';\nimport React from 'react';\nimport HeaderSearch from '@/components/HeaderSearch';\n\nexport default () => {\n  return (\n    <HeaderSearch\n      placeholder=\"站内搜索\"\n      defaultValue=\"umi ui\"\n      options={[\n        { label: 'Ant Design Pro', value: 'Ant Design Pro' },\n        {\n          label: 'Ant Design',\n          value: 'Ant Design',\n        },\n        {\n          label: 'Pro Table',\n          value: 'Pro Table',\n        },\n        {\n          label: 'Pro Layout',\n          value: 'Pro Layout',\n        },\n      ]}\n      onSearch={(value) => {\n        console.log('input', value);\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Tailwind CSS Configuration\nDESCRIPTION: This command generates Tailwind CSS configuration files for the project, including 'tailwind.config.js' and 'tailwind.css', and updates '.umirc.ts' and 'package.json'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$umi g tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Enable ConfigProvider in .umirc.ts\nDESCRIPTION: Before using runtime configuration for Ant Design, ensure the `configProvider` option is enabled in `.umirc.ts`.  This allows modifications to `ConfigProvider` to take effect.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\n  antd: {\n    configProvider: {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure additional Umi preset collections. It shows examples of using npm dependencies, relative paths, and absolute paths to specify presets. Relative paths are resolved from the project root directory. This allows developers to extend UmiJS with custom preset configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\npresets: [\n  // npm dependency\n  'umi-preset-hello',\n  // relative path\n  './preset',\n  // absolute path\n  `${__dirname}/preset.js`,\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Internationalized Content (TypeScript)\nDESCRIPTION: These snippets define the internationalized content for Chinese (zh-CN) and English (en-US) locales using TypeScript. They export an object containing key-value pairs representing the translations for the 'welcome' message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  welcome: '欢迎光临 Umi 的世界！',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  welcome: \"Welcome to Umi's world!\",\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested UmiJS Route API\nDESCRIPTION: This command generates a nested route API file named '[id].ts' within the 'planets' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api planets/[id]\n```\n\n----------------------------------------\n\nTITLE: Configuring Links in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to add extra `<link>` tags to your HTML in UmiJS.  This example adds a `<link>` tag for preloading a CSS file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nlinks: [{ href: '/foo.css', rel: 'preload' }],\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a Named Route in UmiJS with Vue\nDESCRIPTION: This configuration shows how to redirect to a named route.  The `redirect` property points to an object with the `name` of the target route.  When a user visits `/home`, they are redirected to the route named `homepage`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/home',\n      redirect: {\n        name: 'homepage'\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Member Data (TypeScript)\nDESCRIPTION: Processes the raw member data arrays to create an array of `Member` objects, which is then used as the data source for the Pro Table.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nconst memberList: Member[] = [];\n\nfor (let i = 0; i < realNames.length; i++) {\n  memberList.push({\n    id: `${102047 + i}`,\n    realName: realNames[i],\n    nickName: nickNames[i],\n    email: emails[i],\n    phone: phones[i],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: React Rendering Example in MPA\nDESCRIPTION: Demonstrates a simple React component as an entry point for an MPA page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <div>Hello</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MFSU Instance with Webpack\nDESCRIPTION: Initializes an MFSU instance, which is fundamental for using MFSU. It requires the webpack instance and optionally enables building dependencies with esbuild.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst { MFSU } = require('@umijs/mfsu');\nconst webpack = require('webpack');\n\n// [mfsu] 1. init instance\nconst mfsu = new MFSU({\n  implementor: webpack,\n  buildDepWithESBuild: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Jest Test: reverseApiData fetcher request\nDESCRIPTION: This Jest test case verifies that the `reverseApiData` function uses the provided `fetcher` function to make a request to the specified URL. It mocks the `fetcher` function using `jest.fn()` and asserts that it's called with the correct URL.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reverseApiData } from './reverseApiData';\n\n// 测试用例名字表明测试的目的\ntest('reverseApiData use fetcher to request url', async () => {\n  // 测试用例以 3A 的结构来写\n\n  // Arrange 准备阶段，准备 mock 函数或者数据\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve(),\n  });\n\n  // Act 执行被测对象\n  await reverseApiData('https://api.end/point', fetcher);\n\n  // Assert 断言测试结果\n  expect(fetcher).toBeCalledWith('https://api.end/point');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS project from a template\nDESCRIPTION: This snippet shows how to create a UmiJS project from a specific template, in this case, the electron template. The `--template electron` option specifies the template to use.  It relies on pnpm.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n  # Create an electron template project from @umijs/electron-template\n  pnpm create umi --template electron\n```\n\n----------------------------------------\n\nTITLE: Configure Named Route\nDESCRIPTION: This configuration defines a named route '/user/:username' with the name 'user'. It associates this route with the 'index' component. Using the name allows to navigate to this route without hardcoding the path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/user/:username',\n      name: 'user',\n      component: 'index'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Terser and Cssnano\nDESCRIPTION: This configuration switches the JavaScript and CSS minifiers from the default esbuild to Terser and cssnano, respectively.  It provides an alternative minification approach, which can resolve issues related to compression or character encoding.  Terser is a popular JavaScript parser, mangler, and compressor toolkit for ES6+ and cssnano is a modular CSS optimizer.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  jsMinifier: 'terser',\n  cssMinifier: 'cssnano'\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Configuration in .umirc.ts\nDESCRIPTION: This snippet shows how to configure individual pages within the `.umirc.ts` configuration file.  Specifically, it sets the title for the 'foo' entry. This allows customization of page-specific settings directly in the Umi configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mpa: {\n    entry: {\n      foo: { title: 'foo title' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valtio Redo & Undo Support\nDESCRIPTION: This example demonstrates how to add redo and undo functionality to Valtio state using `proxyWithHistory`. It allows for stepping back and forward through state changes. Requires importing `proxyWithHistory` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithHistory } from 'umi';\n\nconst state = proxyWithHistory({\n  count: 0,\n});\nstate.value.count;\nstate.value.count += 1;\nstate.undo();\nstate.redo();\nstate.history;\n```\n\n----------------------------------------\n\nTITLE: Using Match Hook in UmiJS (TSX)\nDESCRIPTION: This snippet demonstrates how to use the useMatch hook from UmiJS to match the current URL against a given path pattern. It returns match information, including the extracted parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatch } from 'umi';\n\n// when url = '/events/12'\nconst match = useMatch('/events/:eventId');\nconsole.log(match?.pathname, match?.params.eventId);\n// '/events/12 12'\n```\n\n----------------------------------------\n\nTITLE: Umi project structure\nDESCRIPTION: This snippet shows the basic directory structure of a Umi project after initialization. It provides an overview of the key files and directories created by the scaffolding tool including `package.json`, `src` directory (assets, layouts, pages), `tsconfig.json` and `typings.d.ts`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/boilerplate.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── assets\n│   │   └── yay.jpg\n│   ├── layouts\n│   │   ├── index.less\n│   │   └── index.tsx\n│   └── pages\n│       ├── docs.tsx\n│       └── index.tsx\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Minifier Charset\nDESCRIPTION: These configurations set the charset option for both the JavaScript and CSS minifiers to 'utf8'.  This prevents character encoding issues during the minification process, ensuring that special characters (like Chinese characters) are properly preserved.  Useful when experiencing issues with mangled or incorrect character display in the production build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  jsMinifierOptions: { charset: 'utf8' },\n  cssMinifierOptions: { charset: 'utf8' }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UmiJS Tailwind CSS Configuration\nDESCRIPTION: This command generates the Tailwind CSS configuration (tailwind.config.js and tailwind.css), updates .umirc.ts, and installs the necessary dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$umi g tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Get Specific UmiJS Configuration\nDESCRIPTION: This command retrieves a specific configuration value from the UmiJS project configuration.  It gets configuration value for the key provided. It uses the `get` subcommand to obtain a specific configuration value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config get mfsu\n - [key: externals] { esbuild: true }\n```\n\n----------------------------------------\n\nTITLE: Disabling MF Output Hash\nDESCRIPTION: This code snippet disables the automatic addition of hash to the MF output file names. Setting `remoteHash` to `false` results in a `remote.js` file without hash, requiring manual cache invalidation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmf: {\n  remoteHash: false\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Logging Example Typescript\nDESCRIPTION: Illustrates the usage of the `terminal` object for logging messages to the node terminal during development. The example shows how to use `terminal.log`, `terminal.warn`, and `terminal.error` to print logs with different colors based on severity.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {terminal} from 'umi';\n// The following three commands will print logs in different colors on the umi startup terminal\nterminal.log('i am log level');\nterminal.warn('i am warn level');\nterminal.error('i am error level');\n```\n\n----------------------------------------\n\nTITLE: HTTPS configuration example in UmiJS\nDESCRIPTION: This snippet shows how to configure HTTPS for development in UmiJS. It enables HTTPS for development using mkcert.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nhttps: {\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Updating MicroApp Component\nDESCRIPTION: This code demonstrates how to manually trigger an update in a sub-application loaded using the `<MicroApp />` component. A ref is used to access the `<MicroApp />` component's instance, and the `update()` method is called to refresh the sub-application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef } from 'react';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  const microAppRef = useRef();\n\n  // 执行此方法时，更新子应用\n  const updateMicroApp = () => {\n    microAppRef.current?.update();\n  };\n\n  return <MicroApp name=\"app1\" ref={microAppRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dva Model Definition\nDESCRIPTION: This code snippet shows a basic Dva model definition with state, effects, and reducers.  It includes an asynchronous effect `queryUser` that fetches user data and a reducer `queryUserSuccess` that updates the state.  It depends on `queryUsers` and `queryUser` functions from '../../services/user'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queryUsers, queryUser } from '../../services/user';\n\nexport default {\n  state: {\n    user: {},\n  },\n\n  effects: {\n    *queryUser({ payload }, { call, put }) {\n      const { data } = yield call(queryUser, payload);\n      yield put({ type: 'queryUserSuccess', payload: data });\n    },\n  },\n\n  reducers: {\n    queryUserSuccess(state, { payload }) {\n      return {\n        ...state,\n        user: payload,\n      };\n    },\n  },\n\n  test(state) {\n    console.log('test');\n    return state;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SVG as a Component in TSX\nDESCRIPTION: This snippet demonstrates how to import an SVG file in a TSX component and use it as a React component, utilizing Umi's support for svgr. Requires `@svgr/webpack`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport SmileUrl, { ReactComponent as SvgSmile } from './smile.svg';\n// <SvgSmile />\n```\n\n----------------------------------------\n\nTITLE: API Handler Template\nDESCRIPTION: Provides a template for API handlers, which are TypeScript files that export a default function to handle requests to the corresponding route. The template returns a 400 error with a \"Not implemented yet\" message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UmiApiRequest, UmiApiResponse } from 'umi';\n\nexport default async function (req: UmiApiRequest, res: UmiApiResponse) {\n  res.status(400).json({ error: 'This API is not implemented yet.' });\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: This command installs the necessary project dependencies using the pnpm package manager. It assumes pnpm is already installed on the system.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/mfsu-independent/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Verifying Commit Messages in UmiJS\nDESCRIPTION: This command verifies commit messages in the UmiJS project to ensure they follow a specific format. It is typically used in conjunction with Husky to enforce commit message standards.  The example shows usage in `.husky/commit-msg`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpx --no-install umi verify-commit $1\n```\n\n----------------------------------------\n\nTITLE: Modify Configuration with UmiJS API (TypeScript)\nDESCRIPTION: Explains how to modify the UmiJS configuration using the `modifyConfig` API. This allows developers to customize the configuration that UmiJS uses. The function receives the current configuration (`config`) and a `paths` object as parameters, and returns the modified configuration. The paths object contains UmiJS project paths like source and output directories.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyConfig((memo, { paths }) => {\n  memo.alias = {\n    ...memo.alias,\n    '@': paths.absSrcPath\n  }\n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Adjustment\nDESCRIPTION: Shows the directory structure before and after moving assets, layouts, and pages into the src directory. This is done to prevent conflicts with the API route directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── assets\n│    └── yay.jpg\n├── layouts\n│    ├── index.less\n│    └── index.tsx\n├── node_modules\n├── package.json\n├── pages\n│    ├── docs.tsx\n│    └── index.tsx\n├── pnpm-lock.yaml\n├── tsconfig.json\n└── typings.d.ts\n```\n\nLANGUAGE: text\nCODE:\n```\n.\n├── src\n│   ├── assets\n│   │    └── yay.jpg\n│   ├── layouts\n│   │    ├── index.less\n│   │    └── index.tsx\n│   └──── pages\n│        ├── docs.tsx\n│        └── index.tsx\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Component\nDESCRIPTION: This snippet illustrates how to update a layout component to use `<Outlet />` instead of `props.children` for rendering child components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { Outlet } from 'umi';\n\nexport default function Layout(props) {\n  return (\n    <div>\n-      { props.children }\n+      <Outlet />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MFSU Instance (JavaScript)\nDESCRIPTION: This code initializes an MFSU instance. The implementor option specifies the webpack instance, and buildDepWithESBuild determines whether to use esbuild for dependency building.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst { MFSU } = require('@umijs/mfsu');\nconst webpack = require('webpack');\n\n// [mfsu] 1. init instance\nconst mfsu = new MFSU({\n  implementor: webpack,\n  buildDepWithESBuild: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Precommit Configuration\nDESCRIPTION: This command generates precommit configuration for the project, adding husky and Git commit message format validation. It updates 'package.json', creates '.husky', and generates commit-related files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$umi g precommit\n```\n\n----------------------------------------\n\nTITLE: Accessing Location Information with useLocation in UmiJS\nDESCRIPTION: This code snippet demonstrates how to use the `useLocation` hook from `react-router` to access location information. It calls `useLocation` and shows the structure of the returned location object, including pathname, search, hash, state, and key. `useLocation` is recommended over directly accessing `history.location` because it returns the pathname relative to the project's configured base.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nconst location  = useLocation();\n// location\n{\n  \"pathname\": \"/path/\",\n  \"search\": \"\",\n  \"hash\": \"\",\n  \"state\": null,\n  \"key\": \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicons in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to customize favicons in UmiJS by providing an array of favicon URLs.  You can use complete URLs or relative paths, assuming that you have the favicon files in your `public` folder. This allows you to specify multiple favicons for different devices and resolutions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nfavicons: [\n  // 完整地址\n  'https://domain.com/favicon.ico',\n  // 此时将指向 `/favicon.png` ，确保你的项目含有 `public/favicon.png`\n  '/favicon.png'\n]\n```\n\n----------------------------------------\n\nTITLE: Import Request and useRequest from umi\nDESCRIPTION: Imports the `request` function and `useRequest` hook from the `umi` library. These are used for making HTTP requests and managing request state within React components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request, useRequest } from 'umi';\n\nrequest;\nuseRequest;\n```\n\n----------------------------------------\n\nTITLE: Combining Components in RightContent using TSX\nDESCRIPTION: This snippet demonstrates the composition of several components into the RightContent component. It integrates HeaderSearch, Tooltip, Avatar, Tag, and SelectLang, arranged within a Space component.  The HeaderSearch is configured with search options, and the Tooltip provides documentation access.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Space>\n  <HeaderSearch\n    placeholder=\"站内搜索\"\n    defaultValue=\"umi ui\"\n    options={[\n      { label: <a href=\"https://umijs.org/zh/guide/umi-ui.html\">umi ui</a>, value: 'umi ui' },\n      {\n        label: <a href=\"next.ant.design\">Ant Design</a>,\n        value: 'Ant Design',\n      },\n      {\n        label: <a href=\"https://protable.ant.design/\">Pro Table</a>,\n        value: 'Pro Table',\n      },\n      {\n        label: <a href=\"https://prolayout.ant.design/\">Pro Layout</a>,\n        value: 'Pro Layout',\n      },\n    ]}\n  />\n  <Tooltip title=\"使用文档\">\n    <span\n      className={styles.action}\n      onClick={() => {\n        window.location.href = 'https://pro.ant.design/docs/getting-started';\n      }}\n    >\n      <QuestionCircleOutlined />\n    </span>\n  </Tooltip>\n  <Avatar />\n  {REACT_APP_ENV && (\n    <span>\n      <Tag color={ENVTagColor[REACT_APP_ENV]}>{REACT_APP_ENV}</Tag>\n    </span>\n  )}\n  <SelectLang className={styles.action} />\n</Space>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Pre-render Errors in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to configure UmiJS to ignore pre-rendering failures when using the `exportStatic` option with SSR. Setting `ignorePreRenderError: true` prevents the build process from terminating if a route fails to pre-render. This allows the build to proceed even if some pages encounter errors during pre-rendering.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // 忽略预渲染失败的错误\n    ignorePreRenderError: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location using window Object\nDESCRIPTION: This snippet demonstrates using the window.location object. There are no imports from 'umi'.  The updated component uses the native browser window.location instead of props.location.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nexport default function Page(props) {\n+  const { location } = window;\n  return (\n    <div>\n-     { props.location }\n+     { location }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Display UmiJS Help for a Specific Command\nDESCRIPTION: This command displays detailed help information for a specific UmiJS CLI command.  It explains the purpose, options, and usage. It allows drilling down into the details of each command.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ umi help build\n```\n\n----------------------------------------\n\nTITLE: UmiJS Configuration for 404 Route\nDESCRIPTION: This Typescript snippet shows how to configure a fallback route for 404 pages when using a configured route setup. It shows the configuration needed in the routes array to redirect any invalid URL to a 404 page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\n    // other routes ...\n    { path: '/*', component: '@/pages/404.tsx' }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Dot Map Data Example (JSON)\nDESCRIPTION: Illustrates the JSON data structure for the dot map, containing a list of locations with latitude/longitude coordinates, names, and styles.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"list\": [\n    {\n      \"lnglat\": [\n        116.258446,\n        37.686622\n      ],\n      \"name\": \"Jing County\",\n      \"style\": 2\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching JS/CSS Minifier\nDESCRIPTION: Switches the JavaScript and CSS minifiers to Terser and cssnano, respectively. This can resolve issues related to default encoding of `esbuild` minifier.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  jsMinifier: 'terser',\n  cssMinifier: 'cssnano'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Plugins\nDESCRIPTION: This snippet shows how to configure additional UmiJS plugins. The `plugins` array contains paths to the plugins, which can be npm dependencies, relative paths, or absolute paths. Relative paths are resolved from the project root directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  // npm 依赖\n  'umi-plugin-hello',\n  // 相对路径\n  './plugin',\n  // 绝对路径\n  `${__dirname}/plugin.js`,\n],\n```\n\n----------------------------------------\n\nTITLE: Handling Route Changes with onRouteChange (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `onRouteChange` function to perform actions when the route changes. It receives information about the current route, client routes, the action that triggered the route change, and whether it's the first load. This can be used for tasks like tracking statistics.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function onRouteChange({\n  location,\n  clientRoutes,\n  routes,\n  action,\n  basename,\n  isFirst,\n}) {\n  bacon(location.pathname);\n}\n```\n\n----------------------------------------\n\nTITLE: Define Multilingual Content - en-US.ts - TypeScript\nDESCRIPTION: Defines multilingual content in a TypeScript file for the English (United States) locale. It exports an object with a 'welcome' key and its corresponding translated value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  welcome: \"Welcome to Umi's world!\",\n};\n```\n\n----------------------------------------\n\nTITLE: Create UmiJS project from a template\nDESCRIPTION: This command creates a new UmiJS project using a specified template, in this case, `@umijs/electron-template` for creating an Electron app. The `pnpm create umi --template electron` command streamlines the setup of an Electron-based UmiJS project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n  # 从 @umijs/electron-template 创建一个 electron 模板\n  pnpm create umi --template electron\n```\n\n----------------------------------------\n\nTITLE: Getting All Locales with getAllLocales (TypeScript)\nDESCRIPTION: This snippet demonstrates how to retrieve an array of all available locales using the getAllLocales function from Umi. This function returns an array of locale keys, including those added dynamically with addLocale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllLocales } from 'umi';\n\ngetAllLocales();\n// [en-US, zh-CN, ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Umi Project Structure\nDESCRIPTION: This showcases the basic directory structure generated after running the `create-umi` command. It includes configuration files, source code directories for assets, layouts, and pages.  This provides a starting point for developing Umi applications.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/boilerplate.en-US.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── assets\n│   │   └── yay.jpg\n│   ├── layouts\n│   │   ├── index.less\n│   │   └── index.tsx\n│   └── pages\n│       ├── docs.tsx\n│       └── index.tsx\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: UmiJS Jest Configuration (@umijs/max project)\nDESCRIPTION: This code snippet demonstrates how to configure Jest for @umijs/max projects. It utilizes `configUmiAlias` and `createConfig` from the `@umijs/max/test` package to set up a Jest configuration. The configuration includes a browser target, esbuild for JavaScript transformation, automatic JSX handling, and allows for overriding default Jest settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, configUmiAlias, createConfig } from '@umijs/max/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // 覆盖 umi 的默认 jest 配置, 如\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Master Application Environment Variable Configuration\nDESCRIPTION: This snippet demonstrates how to configure the master application using environment variables in UmiJS.  The `INITIAL_QIANKUN_MASTER_OPTIONS` environment variable is parsed as JSON and merged with the existing Qiankun master configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nINITIAL_QIANKUN_MASTER_OPTIONS=\"{\\\"apps\\\":[{\\\"name\\\":\\\"app1\\\",\\\"entry\\\":\\\"//localhost:7001\\\"},{\\\"name\\\":\\\"app2\\\",\\\"entry\\\":\\\"//localhost:7002\\\"}]}\n```\n\n----------------------------------------\n\nTITLE: Excluding Package from MFSU\nDESCRIPTION: This configuration excludes a specific package from the MFSU (Module Federation Sharing Utilities) optimization. By excluding a package, UmiJS will not apply MFSU optimizations to it, which can be useful for packages that are causing issues with MFSU or packages being linked locally. Prevents problems with hot reloading.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  mfsu: {\n    exclude: ['package-name']\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Run UmiJS Script\nDESCRIPTION: This command runs a script using UmiJS. It allows running TypeScript and ESM files directly. It supports the use of libraries like zx for scripting.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ umi run ./script.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Plugins via Plugin Key\nDESCRIPTION: This example demonstrates configuring an UmiJS plugin by specifying its configuration using its key in the configuration file. The plugin key is often based on the package name or filename.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  mock: { exclude: ['./foo'] }\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS Master Application Configuration Equivalent\nDESCRIPTION: This code snippet shows the equivalent UmiJS configuration resulting from parsing the `INITIAL_QIANKUN_MASTER_OPTIONS` environment variable.  This configuration defines two micro-apps, `app1` and `app2`, with their respective entry points.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  qiankun: {\n    master: {\n      apps: [\n        {\n          name: 'app1',\n          entry: '//localhost:7001',\n        },\n        {\n          name: 'app2',\n          entry: '//localhost:7002',\n        },\n      ],\n      // ... .umirc.ts 中其它的配置信息\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages from MFSU\nDESCRIPTION: Excludes a specified package from being processed by MFSU (Module Federation Shared Utilities), which prevents hot update issues with npm linked packages by forcing a rebuild when the package changes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  mfsu: {\n    exclude: ['package-name']\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation in @umijs/max\nDESCRIPTION: This code snippet demonstrates how to configure the Module Federation plugin in a @umijs/max project. It defines shared modules and specifies remote modules with their entry points. The `aliasName` allows for aliasing remote module names.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nimport { defineConfig } from '@umijs/max';\n\nconst shared = {\n  react: {\n    singleton: true,\n    eager: true,\n  },\n  'react-dom': {\n    singleton: true,\n    eager: true,\n  },\n};\n\nexport default defineConfig({\n  // 已经内置 Module Federation 插件, 直接开启配置即可\n  mf: {\n    remotes: [\n      {\n        // 可选，未配置则使用当前 remotes[].name 字段\n        aliasName: 'mfNameAlias',\n        name: 'theMfName',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n    ],\n\n    // 配置 MF 共享的模块\n    shared,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Outlet for children\nDESCRIPTION: This snippet demonstrates how to replace `props.children` with `<Outlet />` in layouts and route components when upgrading to Umi 4 with React Router v6. This is necessary because props are empty objects by default in React Router v6.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Outlet } from 'umi';\n<Outlet />;\n```\n\n----------------------------------------\n\nTITLE: Installing Stylus Dependency\nDESCRIPTION: This bash command demonstrates how to install stylus preprocessor dependency using npm.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# .styl and .stylus\nnpm add -D stylus\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in UmiJS (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to enable HTTPS mode for the development server in UmiJS. It shows an example of basic configuration using an empty object, which relies on Umi's default behavior of using mkcert to create certificates for localhost and 127.0.0.1. It can be further customized with cert, key, hosts and http2 parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps: {\n}\n```\n\n----------------------------------------\n\nTITLE: Using NoticeIcon Component in React/TSX\nDESCRIPTION: This code snippet illustrates the usage of the NoticeIcon component, which provides an interface for displaying various notification types. It defines a list of notification items and configures the component's behavior, including click handlers for items, clear actions, and view-more actions. The component also uses nested `NoticeIcon.Tab` components to categorize the notifications.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport { message } from 'antd';\nimport React from 'react';\nimport NoticeIcon from '@/components/NoticeIcon/NoticeIcon';\n\nexport default () => {\n  const list = [\n    {\n      id: '000000001',\n      avatar: 'https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png',\n      title: '你收到了 14 份新周报',\n      datetime: '2017-08-09',\n      type: 'notification',\n    },\n    {\n      id: '000000002',\n      avatar: 'https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png',\n      title: '你推荐的 曲妮妮 已通过第三轮面试',\n      datetime: '2017-08-08',\n      type: 'notification',\n    },\n  ];\n  return (\n    <NoticeIcon\n      count={10}\n      onItemClick={(item) => {\n        message.info(`${item.title} 被点击了`);\n      }}\n      onClear={(title: string, key: string) => message.info('点击了清空更多')}\n      loading={false}\n      clearText=\"清空\"\n      viewMoreText=\"查看更多\"\n      onViewMore={() => message.info('点击了查看更多')}\n      clearClose\n    >\n      <NoticeIcon.Tab\n        tabKey=\"notification\"\n        count={2}\n        list={list}\n        title=\"通知\"\n        emptyText=\"你已查看所有通知\"\n        showViewMore\n      />\n      <NoticeIcon.Tab\n        tabKey=\"message\"\n        count={2}\n        list={list}\n        title=\"消息\"\n        emptyText=\"您已读完所有消息\"\n        showViewMore\n      />\n      <NoticeIcon.Tab\n        tabKey=\"event\"\n        title=\"待办\"\n        emptyText=\"你已完成所有待办\"\n        count={2}\n        list={list}\n        showViewMore\n      />\n    </NoticeIcon>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install Node Modules with Yarn\nDESCRIPTION: Installs the required node modules for the project using yarn. An alternative to npm.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Esbuild Handler for MFSU\nDESCRIPTION: This code configures esbuild-loader to handle JS/TS resources.  This is an alternative to Babel plugins and can provide faster compilation speeds in development environments. Requires @umijs/mfsu and esbuild as dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst { esbuildLoader } = require('@umijs/mfsu');\nconst esbuild = require('esbuild');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: esbuildLoader,\n          options: {\n            handler: [\n              // [mfsu] 3. add mfsu esbuild loader handlers\n              ...mfsu.getEsbuildLoaderHandler(),\n            ],\n            target: 'esnext',\n            implementation: esbuild,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Catch-all Route for 404 Page\nDESCRIPTION: Shows how to configure a catch-all route to render a 404 page when no other routes match. This is typically placed at the end of the route configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nroutes: [\n    // other routes ...\n    { path: '/*', component: '@/pages/404.tsx' }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Pro List\nDESCRIPTION: Installs the Pro List component from the Pro Components library, offering an advanced list component with enhanced features.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/pro-list\n```\n\n----------------------------------------\n\nTITLE: Umi Lint CLI Usage\nDESCRIPTION: This snippet shows the usage of the `umi lint` command in the command line. It includes optional parameters such as `--fix`, `--eslint-only`, `--stylelint-only`, and `--cssinjs` to customize the linting process.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ umi lint [glob] [--fix] [--eslint-only] [--stylelint-only] [--cssinjs]\n```\n\n----------------------------------------\n\nTITLE: Rendering Pro List with Customizations in TSX\nDESCRIPTION: This code snippet demonstrates how to use the `ProList` component from `@ant-design/pro-list` to display a list of test results. It imports necessary components from `react` and `antd`. It configures the `toolBarRender` to include a 'New' button, sets the `rowKey` to 'id', defines the `headerTitle`, and specifies the `dataSource` as `testList`. The `metas` property customizes how each data field is displayed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\nimport ProList from '@ant-design/pro-list';\n\n// resolve test info list\n\nconst MemberList: React.FC = () => {\n  return (\n    <ProList<any>\n      toolBarRender={() => {\n        return [\n          <Button key=\"add\" type=\"primary\">\n            New\n          </Button>,\n        ];\n      }}\n      rowKey=\"id\"\n      headerTitle=\"Test Results\"\n      dataSource={testList}\n      showActions=\"hover\"\n      showExtra=\"hover\"\n      metas={{\n        title: {\n          dataIndex: 'name',\n        },\n        avatar: {\n          dataIndex: 'image',\n        },\n        description: {\n          dataIndex: 'desc',\n        },\n        actions: {\n          render: (text, row) => [\n            <a key=\"link\">Link</a>,\n            <a key=\"warning\">Alert</a>,\n            <a key=\"view\">View</a>,\n          ],\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Valtio Persistent Cache\nDESCRIPTION: This snippet illustrates how to implement persistent caching for Valtio state, though marked 'To be implemented' in the documentation.  It aims to persist the state to a storage mechanism like localStorage. Requires importing `proxyWithPersistent` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithPersistent } from 'umi';\n\nconst state = proxyWithPersistent({\n  count: 0,\n}, {\n  type: 'localStorage',\n  key: 'count',\n});\n```\n\n----------------------------------------\n\nTITLE: Create UmiJS project with YARN\nDESCRIPTION: This command uses `yarn create` to execute the `create-umi` tool and creates a new UmiJS project, specifying a 'Simple App' template. It initializes the project structure and runs `yarn install`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create umi\nsuccess Installed \"create-umi@4.0.6\" with binaries:\n      - create-umi\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › yarn\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy:  src/assets/yay.jpg\nCopy:  src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy:  src/pages/docs.tsx\nCopy:  src/pages/index.tsx\nWrite: tsconfig.json\nCopy:  typings.d.ts\nyarn install v1.22.18\nsuccess Saved lockfile.\n$ umi setup\ninfo  - generate files\n```\n\n----------------------------------------\n\nTITLE: Rendering Pro Table (React)\nDESCRIPTION: This React component renders an advanced table using the Pro Table component from the Pro Components library. It configures the table with columns, data, and request function to handle data fetching and pagination.  It disables the toolbar and search functionality for a simplified example.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\n\n// resolve member info list\n\nconst MemberList: React.FC = () => {\n  const columns: ProColumns<Member>[] = [\n    {\n      dataIndex: 'realName',\n      title: 'Name',\n    },\n    {\n      dataIndex: 'nickName',\n      title: 'Nickname',\n    },\n    {\n      dataIndex: 'email',\n      title: 'Account',\n    },\n    {\n      dataIndex: 'phone',\n      title: 'Phone number',\n    },\n    {\n      title: 'Action',\n      dataIndex: 'x',\n      valueType: 'option',\n      render: (_, record) => {\n        return [<a key=\"edit\">Edit</a>, <a key=\"remove\">Remove</a>];\n      },\n    },\n  ];\n\n  return (\n    <ProTable<Member>\n      columns={columns}\n      request={(params, sorter, filter) => {\n        console.log(params, sorter, filter);\n        return Promise.resolve({\n          data: memberList,\n          success: true,\n        });\n      }}\n      rowKey=\"id\"\n      pagination={{\n        showQuickJumper: true,\n      }}\n      toolBarRender={false}\n      search={false}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling UmiJS Plugins by Key\nDESCRIPTION: This example demonstrates disabling UmiJS plugins by setting the plugin's key to `false` in the configuration.  This approach is specifically used for built-in UmiJS plugins.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  mock: false\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Remote Modules Dynamically with registerMfRemote (TypeScript)\nDESCRIPTION: This example shows how to use the `registerMfRemote` function to dynamically register a remote module configuration. This allows you to use `safeMfImport` or `safeRemoteComponent` with dynamically loaded remote modules.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nregisterMfRemote({\n  aliasName: 'registered',\n  remoteName: 'remoteCounter',\n  entry: 'http://127.0.0.1:8001/remote.js',\n});\n\nconst RemoteCounter = React.lazy(() => {\n  return safeMfImport('registered/Counter', { default: null });\n});\n```\n\n----------------------------------------\n\nTITLE: Using safeRemoteComponentWithMfConfig Higher-Order Component (TypeScript)\nDESCRIPTION: This snippet demonstrates the use of `safeRemoteComponentWithMfConfig` higher-order component. It encapsulates rawMfImport and allows loading of remote modules using mfConfig, and fallback/loading components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = safeRemoteComponentWithMfConfig<\n  React.FC<{ init?: number }>\n>({\n  mfConfig: {\n    entry: 'http://localhost:8001/remote.js',\n    moduleName: 'Counter',\n    remoteName: 'remoteCounter',\n  },\n  fallbackComponent: () => 'raw Fallback',\n  loadingElement: 'raw Loading',\n});\n\nexport default function Page() {\n  return <RemoteCounter />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using defaultMessage with intl.formatMessage - TypeScript\nDESCRIPTION: Demonstrates how to use the `defaultMessage` property when calling `intl.formatMessage` to provide a fallback value when a translation is not found.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'antd';\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  the msg = intl.formatMessage({\n    id: 'table.submit',\n    defaultMessage: 'SUBMIT TABLE',\n  });\n\n  return <Button type=\"primary\">{msg}</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: XSwitch Proxy Configuration (JSON)\nDESCRIPTION: This JSON configuration is used with the XSwitch Chrome extension to proxy resources from a live project domain to the local development server. It allows debugging and verifying code modifications in a specific domain environment by replacing remote resources with local files. Regular expressions are used for more flexible resource replacement.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/debug.en-US.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxy\": [\n    // The resource in the 0 item of the array will be replaced by the 1st item\n    [\n      \"https://www.myproject.com/umi.2c8a01df.js\",\n      \"http://127.0.0.1:8000/umi.js\"\n    ],\n    // Using regex can easily handle the loading of js resources in the case of sub-packages\n    [\n      \"https://www.myproject.com/(.*\\.js)\",\n      \"http://127.0.0.1:8000/$1\",\n    ],\n    // If you need to verify visual presentation, don't forget to replace css resources\n    [\n      \"https://www.myproject.com/umi.ae8b10e0.css\",\n      \"http://127.0.0.1:8000/umi.css\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MPA Configuration in UmiJS\nDESCRIPTION: This configuration enables the MPA mode in UmiJS and allows customization of templates, entry point configuration, layouts, and entry-specific settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  mpa: {\n    template: string,\n    getConfigFromEntryFile: boolean,\n    layout: string,\n    entry: object,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Prettier in UmiJS project\nDESCRIPTION: This command enables Prettier for automatic code formatting in the UmiJS project. It installs Prettier, configures the necessary files (.prettierrc, .prettierignore), and updates the package.json.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm umi g\n✔ Pick generator type › Enable Prettier -- Enable Prettier\ninfo  - Write package.json\ninfo  - Write .prettierrc\ninfo  - Write .prettierignore\ninfo  - Install dependencies with pnpm\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration\nDESCRIPTION: Configures the vercel.json file to enable file system API and define rewrites for API routes.  This configuration is necessary for deploying the Umi project with API routes to Vercel.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"env\": {\n      \"ENABLE_FILE_SYSTEM_API\": \"1\"\n    }\n  },\n  \"rewrites\": [\n    {\n      \"source\": \"/api/:match*\",\n      \"destination\": \"api/:match*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying UmiJS Version\nDESCRIPTION: This command displays the installed version of UmiJS. It allows developers to quickly check the version of UmiJS being used in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ umi version\n```\n\n----------------------------------------\n\nTITLE: Installing UmiJS Plugins\nDESCRIPTION: This command installs the `@umijs/plugins` package as a development dependency. This package contains a collection of useful plugins for UmiJS applications. The `-D` flag is shorthand for `--save-dev`, which specifies that the package should be added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-plugins.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @umijs/plugins\n```\n\n----------------------------------------\n\nTITLE: Introduce Child Apps (<MicroAppWithMemoHistory />)\nDESCRIPTION: This code snippet shows how to introduce a child application using the `<MicroAppWithMemoHistory />` component in UmiJS. The `name` prop specifies the registered name, and the `url` prop defines the specific route of the child application to load, independent of parent route changes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroAppWithMemoHistory } from 'umi';\n\nexport default function Page() {\n  return <MicroAppWithMemoHistory name=\"app2\" url=\"/some/page\" />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a New Route with patchClientRoutes in UmiJS\nDESCRIPTION: This example demonstrates how to add a new route to the beginning of the route array using `patchClientRoutes`. It imports a component and adds it to the routes configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from '@/extraRoutes/foo';\n\nexport function patchClientRoutes({ routes }) {\n  routes.unshift({\n    path: '/foo',\n    element: <Page />,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Mock (Nested)\nDESCRIPTION: This command generates a nested Mock file mock/users/profile.ts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock users/profile\n```\n\n----------------------------------------\n\nTITLE: Enable icons in UmiJS\nDESCRIPTION: Enable icons in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nicons: {},\n\n```\n\n----------------------------------------\n\nTITLE: Redirect to Named Route\nDESCRIPTION: This code redirects the `/home` path to a named route called 'homepage'. When a user visits `/home`, they will be redirected to the route associated with the name 'homepage'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/home',\n      redirect: {\n        name: 'homepage'\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing UmiJS Page Arguments\nDESCRIPTION: This command customizes argument values, providing `msg` and `count` for the template variables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo --msg \"Hello World\" --count 10\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure with extraRoutePaths in UmiJS\nDESCRIPTION: This code snippet shows the directory structure produced by UmiJS when using exportStatic with extraRoutePaths configured to statically export dynamically routed content.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_39\n\nLANGUAGE: Bash\nCODE:\n```\ndist/news/:id/index.html\ndist/news/1/index.html\ndist/news/2/index.html\n```\n\n----------------------------------------\n\nTITLE: Verifying pnpm installation\nDESCRIPTION: This command checks the installed version of pnpm to confirm successful installation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm -v\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Language Support with addLocale - TypeScript\nDESCRIPTION: Demonstrates how to use the `addLocale()` function to dynamically add language support at runtime.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addLocale } from 'umi';\nimport zhTW from 'antd/es/locale/zh_TW';\n\naddLocale(\n  'zh-TW',\n  {\n    welcome: '歡迎光臨 Umi 的世界！',\n  },\n  {\n    momentLocale: 'zh-tw',\n    antd: zhTW,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring an Installed UmiJS Plugin\nDESCRIPTION: This shows how to configure an installed plugin, `umi-plugin-bar`, by its key, `bar`. The configuration object can contain any plugin-specific settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  bar: { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MFSU with Eager Strategy in UmiJS (TypeScript)\nDESCRIPTION: This code snippet shows how to enable MFSU with the 'eager' strategy. The 'eager' strategy uses a scanning method to quickly analyze project dependencies by reading all source code files. This is a faster analysis compared to the 'normal' strategy. Although faster, it might miss dependencies introduced during project code compilation. Project code and dependencies can be compiled in parallel.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  strategy: 'eager',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoticeIconData type in TSX\nDESCRIPTION: This snippet defines the TypeScript type `NoticeIconData` for representing notification data. It includes properties for the notification's id, key, avatar, title, datetime, type, read status, description, clickClose behavior, extra data, and status.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport type NoticeIconData {\n  id: string;\n  key: string;\n  avatar: string;\n  title: string;\n  datetime: string;\n  type: string;\n  read?: boolean;\n  description: string;\n  clickClose?: boolean;\n  extra: any;\n  status: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Umi Dev Command\nDESCRIPTION: This command starts the Umi development server, compiling TypeScript files in the `src` directory to the `dist` directory, and incrementally compiling on file changes. It's a must-run command for local development of Umi, enabling real-time updates as you modify the code. The second example shows how to run dev command for a specific package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/umi\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Direct)\nDESCRIPTION: This command directly generates a new page with the specified name (foo). It creates two files: foo.tsx and foo.less in the src/pages directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo\n```\n\n----------------------------------------\n\nTITLE: Using withRouter for accessing router props in UmiJS\nDESCRIPTION: Demonstrates the use of `withRouter` for class components to access the router's history, location, match, params, and navigate properties.  It is recommended to migrate to React Hook API if possible.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { withRouter } from 'umi';\n\nclass HelloWorld extends React.Component<any> {\n  render() {\n    return (\n      <div>\n        Hello World {this.props.location.pathname}\n        <h2>params: {JSON.stringify(this.props.match.params)}</h2>\n        <button\n          onClick={() => {\n            this.props.history.push('/users');\n          }}\n        >\n          To Users\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(HelloWorld);\n```\n\n----------------------------------------\n\nTITLE: Creating Memory History in UmiJS (TypeScript)\nDESCRIPTION: Creates a MemoryHistory instance, which is useful for testing and rendering environments where address bar interaction is not required. It does not read from or operate on the address bar.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst history = createMemoryHistory(location)\n```\n\n----------------------------------------\n\nTITLE: Register Hook Example (Modify Type) - TypeScript\nDESCRIPTION: Illustrates how to register hooks with `api.register` for the `'foo'` key, modifying an `initialValue` using `api.applyPlugins`, demonstrating the modify type.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.register({\n  key: 'foo',\n  fn: (memo, args) => ({ ...memo, a: args})\n})\napi.register({\n  key: 'foo',\n  fn: (memo) => ({...memo, b: 2})\n})\napi.applyPlugins({ \n  key: 'foo', \n  type: api.ApplyPluginsType.modify,\n  // initialValue is required\n  initialValue: { \n    a: 0,\n    b: 0\n  },\n  args: 1\n}).then((data) => {\n    console.log(data); // { a: 1, b: 2 }\n});\n```\n\n----------------------------------------\n\nTITLE: STRICT_PORT Environment Variable Usage - Bash\nDESCRIPTION: Shows how to enforce a specific port using the `STRICT_PORT` environment variable. If the specified port is already in use, Umi will display an error and exit.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ STRICT_PORT=8000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Route Aliases in UmiJS with Vue\nDESCRIPTION: This configuration shows how to define multiple aliases for a route. The route at `/users` has nested routes. The empty path route within the `/users` route will render the `UserList` component for `/users`, `/users/list`, and `/people`. This demonstrates how to map multiple URLs to a single component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/users',\n      component: 'users',\n      routes: [\n        // Render UserList for these 3 URLs\n        // - /users\n        // - /users/list\n        // - /people\n        { path: '', component: '/users/UserList', alias: ['/people', 'list'] },\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Type in TypeScript\nDESCRIPTION: This TypeScript code defines an interface named `Test` that specifies the structure of a test object, including properties such as `id`, `name`, `image`, and `desc`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Test = {\n  id: number;\n  name: string;\n  image: string;\n  desc: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js installation\nDESCRIPTION: This command checks the installed Node.js version to verify successful installation and the correct version is in use.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from State with select in dva\nDESCRIPTION: This snippet demonstrates how to use the `select` function to access data from the state within an effect. It takes a selector function that receives the entire state and returns the desired portion of the state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst todos = yield select(state => state.todos);\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Mock File (Interactive)\nDESCRIPTION: This command generates a mock file in interactive mode, prompting for the mock file name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock\n✔ please input your mock file name … auth\n```\n\n----------------------------------------\n\nTITLE: UmiJS Default Loader Implementation\nDESCRIPTION: This code snippet provides an example implementation of a default loader component that can be used with UmiJS.  It leverages Ant Design's Spin component to display a loading indicator based on the boolean `loading` prop.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// defaultLoader.tsx\nimport { Spin } from 'antd';\n\nexport default function (loading: boolean) {\n  return <Spin spinning={loading} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Umi\nDESCRIPTION: These commands install the project's dependencies using `pnpm i` and then build the Umi project using `pnpm build`. This process prepares the project for local development by installing all necessary packages and compiling the source code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i && pnpm build\n```\n\n----------------------------------------\n\nTITLE: UmiJS Slave Application Configuration Equivalent\nDESCRIPTION: This code snippet shows the equivalent UmiJS configuration resulting from parsing the `INITIAL_QIANKUN_SLAVE_OPTIONS` environment variable. This configuration disables the Qiankun micro-app plugin for the slave application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  qiankun: {\n    slave: {\n      enable: false,\n      // ... .umirc.ts 中其它的配置信息\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Install Node.js with nvm\nDESCRIPTION: These commands use Node Version Manager (nvm) to install Node.js version 18, set it as the active version, and verify the installed version. It ensures the correct Node.js version is being used for UmiJS development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install 18\n$ nvm use 18\n$ node -v\nv18.10.0\n```\n\n----------------------------------------\n\nTITLE: Register Presets Example - TypeScript\nDESCRIPTION: Shows an example of registering presets using relative and resolved paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerPresets([\n  './preset',\n  require.resolve('./preset_foo')\n])\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default Template in UmiJS Page Generator\nDESCRIPTION: This command forces the UmiJS page generator to use the default template, even if a custom template exists in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo --fallback\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Logger in UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the terminal object from UmiJS to log messages to the Node.js terminal during development. It allows displaying different types of messages (log, warn, error) with corresponding colors.  The `terminal` API only works when `NODE_ENV` is not `production`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {terminal} from 'umi';\n// 下面三条命令会在 umi 启动终端上打出用不同颜色代表的日志\nterminal.log('i am log level');\nterminal.warn('i am warn level');\nterminal.error('i am error level');\n```\n\n----------------------------------------\n\nTITLE: UmiJS crossorigin Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure crossorigin for script tags. It configures crossorigin to add crossorigin=\"anonymous\" to local scripts. It will add crossorigin=\"anonymous\" attribute to `umi.js` script.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncrossorigin: {}\n```\n\n----------------------------------------\n\nTITLE: Disable Umi Plugin via Configuration (JavaScript)\nDESCRIPTION: This example shows how to disable a built-in Umi plugin by setting its corresponding key to `false` in the configuration. This disables the Umi built-in mock plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default{\n  mock: false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Dynamic Import\nDESCRIPTION: This command installs the babel-plugin-dynamic-import-node package as a development dependency. This plugin is used to handle dynamic imports in Node.js environments, allowing for code splitting and lazy loading.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i babel-plugin-dynamic-import-node -D\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Mac or Linux\nDESCRIPTION: This snippet demonstrates how to install Node Version Manager (NVM) on macOS or Linux. NVM allows you to manage multiple Node.js versions. The first command downloads and runs the NVM installation script. The second command verifies the installation by checking the installed version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n$ nvm -v\n0.39.1\n```\n\n----------------------------------------\n\nTITLE: Install pnpm\nDESCRIPTION: This command downloads and executes a script to install pnpm, a package manager recommended by the UmiJS team. It then checks the pnpm version to confirm installation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n$ pnpm -v\n7.3.0\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Mock (Direct)\nDESCRIPTION: This command directly generates a new Mock file mock/acl.ts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock acl\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Component (Direct)\nDESCRIPTION: This command directly generates a component named 'bar' with default 'index.ts' and 'component.tsx' files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component bar\n```\n\n----------------------------------------\n\nTITLE: Fix Lint Errors\nDESCRIPTION: Automatically fixes some linting errors in the project. This command can help to quickly improve code style.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Dva Plugin in UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the `dva` plugin within a UmiJS application.  It allows setting options like `immer` for reducer modifications and defining additional dva models via `extraModels`. The `immer` configuration can also be adjusted for IE11 compatibility.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  dva: {\n    immer: true,\n    extraModels: [],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Component Integration with autoSetLoading\nDESCRIPTION: This code snippet shows how to integrate a micro-app as a component in UmiJS and automatically display a loading animation using the `autoSetLoading` property when using Ant Design. The `autoSetLoading` prop makes UmiJS automatically use Ant Design's Spin component as the loader.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return <MicroApp name=\"app1\" autoSetLoading />;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS RouteAPI (Interactive)\nDESCRIPTION: This command starts the interactive RouteAPI generator, prompting for the API name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api\n✔ please input your api name: … starwar/people\n```\n\n----------------------------------------\n\nTITLE: UmiJS Default Error Boundary Implementation\nDESCRIPTION: This code snippet provides an example implementation of a default error boundary component that can be used with UmiJS.  It receives an `error` object and renders a simple error message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n// defaultErrorBoundary.tsx\nexport default function (error: Error) {\n  return <div>{error?.message}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Default HTML Template\nDESCRIPTION: This is the default HTML template used by UmiJS for MPA. It includes placeholders for the page title (`<%= title %>`) and the mount element ID (`<%= mountElementId %>`).  Custom templates should include these placeholders to ensure proper rendering.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n  <body>\n    <div id=\"<%= mountElementId %>\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Excluding Dependencies from Phantom Dependency Check\nDESCRIPTION: This snippet demonstrates how to exclude specific dependencies from the phantom dependency check in UmiJS. It sets the `exclude` option to `['lodash']`, whitelisting lodash from being flagged as a phantom dependency. This prevents errors for intentionally used but undeclared dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  phantomDependency: {\n    exclude: ['lodash']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested UmiJS Component\nDESCRIPTION: This command generates a nested component named 'baz' within the 'group/subgroup' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component group/subgroup/baz\n```\n\n----------------------------------------\n\nTITLE: Register Plugins - TypeScript\nDESCRIPTION: Explains how to register plugins using `api.registerPlugins`, with the parameter being an array of file paths. This API must be executed during the `initPresets` and `initPlugins` stages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerPlugins(plugins: string[])\n```\n\n----------------------------------------\n\nTITLE: Enabling Esbuild for MFSU (TypeScript)\nDESCRIPTION: This code snippet shows how to enable Esbuild for building project dependencies with MFSU, providing faster build times.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: { esbuild: true }\n```\n\n----------------------------------------\n\nTITLE: UMI_PRESETS Environment Variable Usage - Bash\nDESCRIPTION: Shows how to specify additional Umi preset configurations to load at runtime using the `UMI_PRESETS` environment variable. This allows you to extend Umi's functionality by providing custom preset paths separated by commas.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ UMI_PRESETS=./path/to/preset1,./path/to/preset2  umi dev\n```\n\n----------------------------------------\n\nTITLE: Install ESLint and Stylelint\nDESCRIPTION: Install ESLint and Stylelint as development dependencies. Stylelint version 14 or higher is required for compatibility with @umijs/lint.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D eslint \"stylelint@^14\"\n# or\n$ pnpm add -D eslint \"stylelint@^14\"\n```\n\n----------------------------------------\n\nTITLE: Splitting and Combining Valtio Data\nDESCRIPTION: This code demonstrates how to split and combine Valtio data structures, allowing for modular state management. It involves creating separate proxies and then combining them into a single state proxy. Requires importing `proxy` from 'umi'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// For example, as follows defined\n// state.foo and state.bar are both proxies, can be split and used\nconst state = proxy({\n  foo: { a: 1 },\n  bar: { b: 1 },\n});\n\n// Combination\nconst foo = proxy({ a: 1 });\nconst bar = proxy({ b: 1 });\nconst state = proxy({ foo, bar });\n```\n\n----------------------------------------\n\nTITLE: Testing fetcher request with Jest (TypeScript)\nDESCRIPTION: This Jest test case verifies that the `reverseApiData` function uses the provided `fetcher` to request data from the specified URL. It mocks the `fetcher` function and asserts that it is called with the correct URL.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reverseApiData } from './reverseApiData';\n\n// The test case name indicates the purpose of the test\ntest('reverseApiData use fetcher to request url', async () => {\n  // Test cases are written in the structure of 3A\n\n  // Arrange stage, prepare mock functions or data\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve(),\n  });\n\n  // Act on the object under test\n  await reverseApiData('https://api.end/point', fetcher);\n\n  // Assert the test result\n  expect(fetcher).toBeCalledWith('https://api.end/point');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Charts\nDESCRIPTION: Installs the complete Ant Design Charts package using pnpm. This allows access to all available chart types and functionalities provided by the library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/charts\n```\n\n----------------------------------------\n\nTITLE: Register Presets - TypeScript\nDESCRIPTION: Demonstrates registering presets (sets of plugins) using `api.registerPresets`. This API must be executed during the `initPresets` stage, with the parameter being an array of file paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerPresets(presets: string[])\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Component (Interactive)\nDESCRIPTION: This command initiates the component generator in interactive mode, prompting for the component name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component\n✔ Please input you component Name … foo\n```\n\n----------------------------------------\n\nTITLE: Umi Preset Example (JavaScript)\nDESCRIPTION: This example illustrates how to create an Umi preset which can register plugins and other presets.  It showcases the structure of a preset returning an object with 'plugins' and 'presets' properties.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  return {\n    plugins: ['./plugin_foo','./plugin_bar'],\n    presets: ['./preset_foo']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Router Scroll Behavior\nDESCRIPTION: This snippet configures the router's scroll behavior using the `router` export in `src/app.tsx`. The `scrollBehavior` function logs the `to` and `from` route objects, allowing you to customize scroll position behavior during route transitions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.tsx\nexport const router: RouterConfig = {\n  // @ts-ignore\n  scrollBehavior(to, from) {\n    console.log('scrollBehavior', to, from);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Ejecting UmiJS Component Templates\nDESCRIPTION: This command ejects the default component templates to the /templates/component directory in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component --eject\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version 18 with nvm\nDESCRIPTION: These commands install Node.js version 18 using nvm and then set it as the active version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 18\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Rendering Footer Component in React/TSX\nDESCRIPTION: This code snippet demonstrates how to render the Footer component in a React/TSX application. The Footer component likely contains predefined configurations specific to the Pro project, which might need customization.  It imports the `Footer` component from '@/components/Footer' and renders it within a functional component.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport React from 'react';\nimport Footer from '@/components/Footer';\n\nexport default () => <Footer />;\n```\n\n----------------------------------------\n\nTITLE: Start Development Server (esbuild)\nDESCRIPTION: This command starts the development server using the esbuild transpiler. This likely uses a script defined in `package.json` that leverages esbuild for faster builds.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/mfsu-independent/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev:esbuild\n```\n\n----------------------------------------\n\nTITLE: Configuration with max in config.ts\nDESCRIPTION: This snippet demonstrates a basic `config.ts` file using the `defineConfig` function from Umi, showcasing configurations for commonly used features like model, antd, request, initialState, mock, dva, layout and locale. This is an example of how configurations are defined in Umi 4.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, utils } from 'umi';\n\nexport default defineConfig({\n  model: {},\n  antd: {},\n  request: {},\n  initialState: {},\n  mock: {\n    include: ['src/pages/**/_mock.ts'],\n  },\n  dva: {},\n  layout: {\n    // https://umijs.org/docs/max/layout-menu#configuration-at-build-time\n    title: 'UmiJS',\n    locale: true,\n  },\n  // https://umijs.org/zh-CN/plugins/plugin-locale\n  locale: {\n    // default zh-CN\n    default: 'zh-CN',\n    antd: true,\n    // default true, when it is true, will use `navigator.language` overwrite default\n    baseNavigator: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example (Bash)\nDESCRIPTION: This snippet shows a typical directory structure for an UmiJS project, highlighting key files and directories such as config, src, and mock.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── config\n│   └── config.ts\n├── dist\n├── mock\n│   └── app.ts｜tsx\n├── src\n│   ├── .umi\n│   ├── .umi-production\n│   ├── layouts\n│   │   ├── BasicLayout.tsx\n│   │   ├── index.less\n│   ├── models\n│   │   ├── global.ts\n│   │   └── index.ts\n│   ├── pages\n│   │   ├── index.less\n│   │   └── index.tsx\n│   ├── utils // Recommended directory\n│   │   └── index.ts\n│   ├── services // Recommended directory\n│   │   └── api.ts\n│   ├── app.(ts|tsx)\n│   ├── global.ts\n│   ├── global.(css|less|sass|scss)\n│   ├── overrides.(css|less|sass|scss)\n│   ├── favicon.(ico|gif|png|jpg|jpeg|svg|avif|webp)\n│   └── loading.(tsx|jsx)\n├── node_modules\n│   └── .cache\n│       ├── bundler-webpack\n│       ├── mfsu\n│       └── mfsu-deps\n├── .env\n├── plugin.ts \n├── .umirc.ts // Choose between this and the config/config.ts file\n├── package.json\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: React Query Configuration Options\nDESCRIPTION: Demonstrates how to configure React Query with `devtool` and `queryClient` options. Setting `devtool: false` disables the React Query devtool in development mode. Setting `queryClient: false` prevents the registration of the global QueryClient and QueryClientProvider.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/react-query.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  reactQuery: {\n    devtool: false,\n    queryClient: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: UmiJS cssMinifierOptions Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the CSS minifier options. It sets the `cssMinifierOptions` to enable whitespace and syntax minification when using `esbuild`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cssMinifier: 'esbuild',\n  cssMinifierOptions: {\n    minifyWhitespace: true,\n    minifySyntax: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Alias in UmiJS with Vue\nDESCRIPTION: This configuration defines an alias for a route. When a user accesses `/home`, the URL remains `/home`, but the content for the `/` route is rendered.  `path` specifies the original route, `component` specifies the component to render, and `alias` defines the alternative path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/',\n      component: 'index',\n      alias: '/home'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back through dist-tag\nDESCRIPTION: This command rolls back to a specific version (e.g., 4.0.81) using dist-tag.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm -rc --filter \"./packages/**\" exec pnpm dist-tag add \\$PNPM_PACKAGE_NAME@4.0.81 latest\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Mock File (Direct)\nDESCRIPTION: This command directly generates a mock file named 'acl.ts'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock acl\n```\n\n----------------------------------------\n\nTITLE: React Component Rendering Post List - JSX\nDESCRIPTION: This React component renders a list of posts fetched from an API. It uses the `useState` hook to manage the state of the posts and the `useEffect` hook to fetch the data on component mount. The component displays a loading message while the data is being fetched and renders the post titles as clickable links once the data is available.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { history } from \"umi\";\n\nexport default function HomePage() {\n  const [posts, setPosts] = useState<any[]>();\n  return (\n    <div>\n      {!posts && <p>Loading...</p>}\n      {posts && <div>\n        {posts.map(post => <div key={post.id}>\n          <div onClick={() => history.push(`/posts/${post.id}`)}>\n            <p>{post.title}</p>\n          </div>\n        </div>)}\n      </div>}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Start Development Server (Babel)\nDESCRIPTION: This command starts the development server using the default babel transpiler. This will typically launch a local server and watch for file changes to automatically rebuild the project.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/mfsu-independent/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Jest Execution\nDESCRIPTION: This bash command demonstrates how to execute Jest tests using `npx jest`. It shows the output of a successful test run, including the number of passed test suites and tests.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$npx jest\ninfo  - generate files\n PASS  src/utils/reverseApiData.test.ts\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.894 s, estimated 1 s\nRan all test suites.\n```\n\n----------------------------------------\n\nTITLE: Mock Directory Structure\nDESCRIPTION: This snippet shows the directory structure required for UmiJS to recognize mock files. Files under the `/mock` directory, such as `todos.ts`, `items.ts`, and `users.ts`, will be treated as Mock files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── mock\n    ├── todos.ts\n    ├── items.ts\n    └── users.ts\n└── src\n    └── pages\n        └── index.tsx\n```\n\n----------------------------------------\n\nTITLE: Entry Structure Example\nDESCRIPTION: Illustrates the structure of the `entry` object, which maps entry names to their corresponding file paths.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  foo: 'src/pages/foo/index.tsx',\n  bar: 'src/pages/bar/index.tsx'\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Vite Configuration with UmiJS API (TypeScript)\nDESCRIPTION: Shows how to modify the Vite configuration using the `modifyViteConfig` API in UmiJS. This allows developers to customize the Vite build process.  The function receives the Vite configuration object (`config`) and the environment (`env`) as parameters. The function returns the modified Vite configuration object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.modifyViteConfig((memo, { env }) => {\n  if(env === 'development'){\n    // do something\n  }\n  return memo;\n})\n```\n\n----------------------------------------\n\nTITLE: Modified Build Script in package.json with Prisma Generate\nDESCRIPTION: Shows the updated build script in package.json, including the prisma generate command to ensure the Prisma client is generated before each build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"build\": \"prisma generate && umi build\",\n    \"postinstall\": \"umi setup\",\n    \"start\": \"npm run dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alias Route\nDESCRIPTION: This configuration sets up an alias for the root path (`/`). When a user visits `/home`, the URL remains `/home`, but the application will render the component associated with the root path ('/').\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/',\n      component: 'index',\n      alias: '/home'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Umi and Preset React Dependencies\nDESCRIPTION: This snippet demonstrates how to update the dependencies in `package.json` to upgrade Umi from version 3 to version 4, replacing `umi` and `@umijs/preset-react` with `@umijs/max`.  It requires updating the dependency versions in `package.json`. The output is updated `package.json` with the new dependencies. The old dependencies are commented out to show what was removed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n+   \"@umijs/max\": \"^4.0.0\",\n-   \"umi\": \"^3.0.0\",\n-   \"@umijs/preset-react\": \"^1.2.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multilingual Default Values - zh-CN.ts - TypeScript\nDESCRIPTION: Defines multilingual content in TypeScript for the Simplified Chinese locale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  table: {\n    submit: '提交表单',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js installation and version\nDESCRIPTION: This command checks if Node.js is installed correctly and displays its version.  Requires Node.js to be installed.  The output shows the Node.js version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n\nv18.14.0\n```\n\n----------------------------------------\n\nTITLE: Formatting Umi Documentation Plugin Code\nDESCRIPTION: This command formats the code of Umi documentation plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm format:plugin-docs\n```\n\n----------------------------------------\n\nTITLE: Disable Mock with Environment Variable\nDESCRIPTION: Example showing how to disable the Mock feature in UmiJS using an environment variable. Setting `MOCK=none` will prevent UmiJS from using the mock files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMOCK=none umi dev\n```\n\n----------------------------------------\n\nTITLE: Valtio Compatibility with UmiJS\nDESCRIPTION: This example shows how to use `proxyMap` instead of standard `Map` when using Valtio with UmiJS, to address compatibility issues.  It also highlights the React version requirement (16.8+) and lack of IE11 support.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, proxyMap } from 'umi';\n\nconst state = proxy({\n  todos: proxyMap<number, Todo>([[1, {id:1,text:'Learn Umi'}]]),\n  filter: 'all',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Umi Max project with create-umi\nDESCRIPTION: This command uses `create-umi` to generate a new Umi Max project.  It prompts the user to select a template, with `Ant Design Pro` being the recommended option for Umi Max.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/introduce.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-umi@latest\n? Pick Umi App Template › - Use arrow-keys. Return to submit.\n    Simple App\n❯   Ant Design Pro\n    Vue Simple App\n```\n\n----------------------------------------\n\nTITLE: JavaScript Minifier Configuration in UmiJS\nDESCRIPTION: This snippet shows how to configure the JavaScript minifier in UmiJS, specifying the `esbuild` minifier. Other options include `terser`, `swc`, `uglifyJs`, and `none`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsMinifier: 'esbuild'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code Snippets in UmiJS\nDESCRIPTION: This command is used to generate code snippets, such as pages or components, within an UmiJS project.  It supports interactive selection of generators or specifying parameters to generate specific files. It streamlines the development process by automating the creation of common project elements.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ umi g\n# or\n$ umi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Generate route files\n$ umi g page index --typescript --less\n```\n\n----------------------------------------\n\nTITLE: Display UmiJS Version\nDESCRIPTION: This command displays the installed version of UmiJS. It's equivalent to `umi -v`. It helps in confirming the UmiJS version used in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ umi version\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Route Configuration with autoCaptureError\nDESCRIPTION: This code snippet demonstrates configuring a UmiJS route to load a micro-app and automatically handle errors using the `autoCaptureError` property. When using Ant Design, it will automatically display an error message using the Result component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    {\n      path: '/app1',\n      microApp: 'app1',\n      microAppProps: {\n        autoCaptureError: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Example\nDESCRIPTION: This snippet demonstrates how to define environment variables in a `.env` file, such as setting the port and compression method.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPORT=8888\nCOMPRESS=none\n```\n\n----------------------------------------\n\nTITLE: Manual Code Splitting with React Lazy and Suspense (TypeScript)\nDESCRIPTION: This code snippet shows how to manually split a component using React's `lazy` and `Suspense` features. It imports a component named `Page` using `lazy`, which dynamically loads the component when it is needed.  The `Suspense` component provides a fallback UI while the component is loading. This is useful for splitting components that include large third-party libraries.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/code-splitting.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lazy, Suspense } from 'react'\n\n// './Page' 该组件将被自动拆出去\nconst Page = lazy(() => import('./Page'))\n\nexport default function() {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Page />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Register Method Example without Function - TypeScript\nDESCRIPTION: Illustrates registering a method named `addFoo` on the API without a function, effectively creating a registrar for hooks. Shows how to use this registrar with `api.applyPlugins`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport api from './api';\n\napi.registerMethod({\n  name: 'addFoo'\n  // no fn\n})\n\napi.addFoo(args => args);\napi.addFoo(args => args * 2);\n\napi.applyPlugins({\n  key: 'addFoo',\n  args: 1\n}).then((data)=>{\n  console.log(data); // [1, 2]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting VOLTA_FEATURE_PNPM Environment Variable\nDESCRIPTION: This command sets the `VOLTA_FEATURE_PNPM` environment variable to `1` to enable pnpm support when using Volta for Node.js and package manager version management. Volta is recommended for managing Node.js and pnpm versions when developing Umi. This is a prerequisite for using pnpm with Volta.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VOLTA_FEATURE_PNPM=1\n```\n\n----------------------------------------\n\nTITLE: String Uppercasing with Lodash\nDESCRIPTION: This snippet defines a function `format` that takes a string as input and returns the uppercase version of the string using the `lodash.uppercase` function. The `lodash.uppercase` function must be installed as a dependency.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/plugin-antd-e2e/src/utils/format.ts.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport uppercase from 'lodash.uppercase';\n\nexport function format(a: string): string {\n  return uppercase(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JS and CSS Minifiers in UmiJS (TypeScript)\nDESCRIPTION: This snippet shows how to configure the JavaScript and CSS minifiers in UmiJS to generate ES5 compatible code and CSS.  This is useful when targeting older browsers that do not support modern JavaScript or CSS features. This requires `terser` and `cssnano` to be installed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  jsMinifier: 'terser',\n  cssMinifier: 'cssnano',\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing UmiJS Component Arguments\nDESCRIPTION: This command customizes argument values, providing a `msg` for the template variables.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component foo --msg \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Plots (Word Cloud)\nDESCRIPTION: Installs the statistical chart package from Ant Design Charts. Required to use the WordCloud chart.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/plots\n```\n\n----------------------------------------\n\nTITLE: Adding React 17 Dependencies\nDESCRIPTION: Adds React and React DOM version 17 as dependencies to the project. This step is necessary to downgrade from the default React 18 version in UmiJS v4.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react@^17 react-dom@^17\n```\n\n----------------------------------------\n\nTITLE: Rebuild MFSU dependencies\nDESCRIPTION: This command rebuilds the MFSU dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu build\n```\n\n----------------------------------------\n\nTITLE: MFSU lodash error troubleshooting (Bash)\nDESCRIPTION: This code snippet shows an error message related to missing dependencies when using MFSU, in this case `lodash.capitalize`. This suggests to verify that the dependencies are installed\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nerror - [MFSU][eager] build worker failed AssertionError [ERR_ASSERTION]: filePath not found of lodash.capitalize\n```\n\n----------------------------------------\n\nTITLE: UmiJS Dead Code Detection Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure dead code detection. It configures the `deadCode` option to enable dead code detection during the build process.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndeadCode: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Directory Path in JavaScript\nDESCRIPTION: This snippet shows how to configure the `cacheDirectoryPath` option in UmiJS to change the default cache directory. The default cache directory is `node_modules/.cache`, but it can be changed as demonstrated in the following code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Change the cache file path to the node_modules/.cache1 folder\ncacheDirectoryPath: 'node_modules/.cache1',\n```\n\n----------------------------------------\n\nTITLE: Excluding Dependency from MFSU in UmiJS (TypeScript)\nDESCRIPTION: This code snippet shows how to exclude a specific dependency (in this case, 'B') from MFSU processing. This is useful for resolving dependency cycle issues, especially in monorepo setups where a project depends on a package, and that package depends back on the project's source code. Excluding 'B' prevents MFSU from attempting to resolve the circular dependency.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  exclude: [\n    'B'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Component with Custom Props Map in UmiJS\nDESCRIPTION: This code snippet demonstrates how to connect a React component to a Dva model using a custom `mapModelToProps` function. It allows mapping specific model data to component props. This requires `umi` and `react` dependencies. Here, the `test` prop is assigned the value 'hello world'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\nconst mapModelToProps = allModels => {\n  return {\n    test: 'hello world',\n    // props you want connect to Component\n  };\n};\n\n@connect(mapModelToProps)\nclass UserInfo extends Component {\n  render() {\n    return <div>{this.props.test}</div>;\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Route-based Sub-application Integration (Parent)\nDESCRIPTION: This code shows how to bind sub-applications to specific routes in the parent application's Umi configuration. It uses the `microApp` property in the `routes` configuration to associate a route with a sub-application by its `name`. When the user navigates to the specified route, the corresponding sub-application is rendered.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  routes: [\n    {\n      path: '/',\n      component: '@/layouts/index.tsx',\n      routes: [\n        {\n          path: '/app1',\n          component: '@/layouts/app-layout.tsx',\n          routes: [\n            // 配置微应用 app1 关联的路由\n            {\n              // 带上 * 通配符意味着将 /app1/project 下所有子路由都关联给微应用 app1\n              path: '/project/*',\n              microApp: 'app1',\n            },\n          ],\n        },\n        // 配置 app2 关联的路由\n        {\n          path: '/app2/*',\n          microApp: 'app2',\n        },\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using safeRemoteComponentWithMfConfig\nDESCRIPTION: This code snippet shows how to use the `safeRemoteComponentWithMfConfig` to safely load remote React components using raw MF configuration. It utilizes mfConfig for specifying entry, module and remote name, fallback component, and loading element.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = safeRemoteComponentWithMfConfig<\n  React.FC<{ init?: number }>\n>({\n  mfConfig: {\n    entry: 'http://localhost:8001/remote.js',\n    moduleName: 'Counter',\n    remoteName: 'remoteCounter',\n  },\n  fallbackComponent: () => 'raw Fallback',\n  loadingElement: 'raw Loading',\n});\n\nexport default function Page() {\n  return <RemoteCounter />;\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying pnpm installation and version\nDESCRIPTION: This command checks if pnpm is installed correctly and displays its version.  Requires pnpm to be installed.  The output shows the pnpm version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm -v\n\n7.3.0\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with useModel Updater Function\nDESCRIPTION: This code snippet demonstrates how to optimize component rendering by selectively accessing model properties using the `useModel` hook's updater function. It retrieves only the `increment` and `decrement` methods from the 'counterModel', preventing unnecessary re-renders when the `counter` value changes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/CounterActions/index.tsx\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { add, minus } = useModel('counterModel', (model) => ({\n    add: model.increment,\n    minus: model.decrement,\n  }));\n\n  return (\n    <div>\n      <button onClick={add}>add by 1</button>\n      <button onClick={minus}>minus by 1</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: MPA Configuration in UmiJS\nDESCRIPTION: This configuration snippet demonstrates how to enable and configure MPA mode in a UmiJS project. The `mpa` property allows specifying a template file, whether to load configs from entry files, default layout, and entry points configurations. The `template` option defines the path to the HTML template, and `getConfigFromEntryFile` enables loading configuration from the entry file itself. Layout specifies global default layout. Entry allows customising each entry point.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  mpa: {\n    template: string,\n    getConfigFromEntryFile: boolean,\n    layout: string,\n    entry: object,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Stylelint Configuration (.stylelintrc.js)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Stylelint in `.stylelintrc.js` to extend the recommended Umi or Umi Max Stylelint configuration.  This configuration is essential for leveraging Umi's style linting capabilities.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .stylelintrc.js\nmodule.exports = {\n  // For Umi projects\n  extends: require.resolve('umi/stylelint'),\n\n  // For Umi Max projects\n  extends: require.resolve('@umijs/max/stylelint'),\n}\n```\n\n----------------------------------------\n\nTITLE: Running an Example\nDESCRIPTION: These commands navigate to an example directory and starts the development server for that specific example. This is a way to test and ensure functionalities are working as expected during Umi development. Optionally, you can add the `--vite` argument to run in vite mode.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples/boilerplate\n$ pnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev --vite\n```\n\n----------------------------------------\n\nTITLE: Accessing Location Information (JSX)\nDESCRIPTION: Demonstrates how to access location information using the `useLocation` hook from `react-router@6` within a UmiJS component. The `useLocation` hook provides details about the current URL, including pathname, search, hash, and state. This is useful for accessing the current URL and using it to customize the component's behavior.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst location  = useLocation();\n// location\n{\n  \"pathname\": \"/path/\",\n  \"search\": \"\",\n  \"hash\": \"\",\n  \"state\": null,\n  \"key\": \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Umi Plugins with pnpm\nDESCRIPTION: This command installs the `@umijs/plugins` package as a development dependency using pnpm. This allows you to use Umi Max features like data flow and antd in a standard Umi application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-plugins.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @umijs/plugins\n```\n\n----------------------------------------\n\nTITLE: Add Before Babel Plugins in UmiJS\nDESCRIPTION: This code snippet demonstrates how to add a Babel plugin to the configuration using `api.addBeforeBabelPlugins`. The provided function should return a Babel plugin or an array of plugins. In this example, it reverses the names of identifiers within the code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napi.addBeforeBabelPlugins(() => {\n  // Return a Babel plugin (from a Babel official website example)\n  return () => {\n    visitor: {\n      Identifier(path) {\n        const name = path.node.name;\n        // Reverse the name\n        path.node.name = name.split(\"\").reverse().join(\"\");\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing UmiJS Command Help\nDESCRIPTION: This command displays help information for UmiJS commands. It provides a brief overview of the available commands and options. When a specific command is provided as an argument, detailed help for that command is displayed.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ umi help\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ umi help build\n```\n\n----------------------------------------\n\nTITLE: Using Named Route with router-link\nDESCRIPTION: This example demonstrates how to use the `router-link` component with a named route.  The `to` property is bound to an object containing the route name ('user') and its parameters (username='erina'). This creates a link that navigates to the specified named route with the given parameters.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ name: 'user', params: { username: 'erina' } }\">\n  User\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Installing @umijs/plugins (Bash)\nDESCRIPTION: This command installs the `@umijs/plugins` package as a development dependency using pnpm. This plugin is required for enabling styled-components in a standard Umi project (non-Umi Max).  This is a prerequisite before configuring styled-components in `umi.config.ts`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i @umijs/plugins -D\n```\n\n----------------------------------------\n\nTITLE: Starting Umi Document Development\nDESCRIPTION: This command starts the development server for Umi documentation, enabling real-time updates of documentation and results of the `@umijs/plugin-docs` plugin development. Compilation takes longer on the first launch.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm doc:dev\n```\n\n----------------------------------------\n\nTITLE: Using intl.formatMessage with Values (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `intl.formatMessage` method to display a translated string with dynamic values.  The `intl.formatMessage` function's second argument expects an object containing the values for the placeholders in the translated string.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIntl } from 'umi';\n\nexport default function Page() {\n  const intl = useIntl();\n  const msg = intl.formatMessage(\n    {\n      id: 'user.welcome',\n    },\n    {\n      name: '张三',\n    },\n  );\n\n  return <p>{msg}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: React 17 Dependency Installation\nDESCRIPTION: This bash command shows how to install the React 17 dependencies in a project. Installing react and react-dom version 17 will enable the corresponding rendering method of React 17. If React 18 dependencies are not explicitly installed, UmiJS defaults to React 18.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i react@17 react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Language Switching with setLocale - TypeScript\nDESCRIPTION: Demonstrates how to use the `setLocale()` function to programmatically switch languages.  By default, this will refresh the page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLocale } from 'umi';\n\n// Refresh the page when switching\nsetLocale('en-US');\n```\n\n----------------------------------------\n\nTITLE: Defining Local Environment Variables in .env.local - Text\nDESCRIPTION: Shows how to define environment variables specific to the local development environment in a `.env.local` file. These variables override those defined in the `.env` file. The example overrides the `PORT` variable to `4000`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# file .env.local\nPORT=4000\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for Umi Project (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure Jest in a Umi project using `configUmiAlias` and `createConfig` from the `umi/test` module. It sets the target to 'browser', specifies 'esbuild' as the jsTransformer, and configures JSX transformation. The configuration allows overriding default Jest settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, configUmiAlias, createConfig } from 'umi/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // Override the default Jest configuration of Umi, such as\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n\n----------------------------------------\n\nTITLE: Install lint-staged\nDESCRIPTION: Install lint-staged as a development dependency. This is used to run linters on staged files before committing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i lint-staged -D\n#or\n$ pnpm add lint-staged -D\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Mount Element ID in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure the element ID where the React component tree is rendered in HTML. It configures the `mountElementId` to 'container'. This option allows for customization of the root element used by React, providing flexibility in integrating UmiJS applications with existing HTML structures.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nmountElementId: 'container'\n```\n\n----------------------------------------\n\nTITLE: Adding Internationalized Content (JSON)\nDESCRIPTION: These snippets define the internationalized content for Chinese (zh-CN) and English (en-US) locales using JSON. They contain key-value pairs representing the translations for the 'welcome' message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// src/locales/zh-CN.json\n{\n  \"welcome\": \"欢迎光临 Umi 的世界！\",\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// src/locales/en-US.json\n{\n  \"welcome\": \"Welcome to Umi's world!\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useLocation Hook\nDESCRIPTION: This snippet demonstrates how to access the location object in Umi 4 using the `useLocation` hook. It shows replacing `props.location` with the `location` object obtained from `useLocation`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useLocation } from 'umi';\nexport default function Page(props) {\n+    let location = useLocation();\n  return (\n    <div>\n-     { props.location }\n+     { location }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SPEED_MEASURE Environment Variable Usage - Bash\nDESCRIPTION: Shows how to enable Webpack compilation time analysis using the `SPEED_MEASURE` environment variable. This can be set to `CONSOLE` or `JSON` to control the output format.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ SPEED_MEASURE=JSON umi dev\n```\n\n----------------------------------------\n\nTITLE: Replacing query in location with parse\nDESCRIPTION: This snippet shows how to replace the direct access to `query` in `history.location` with `parse` from `query-string` package when upgrading to Umi 4. This is because the `query` property is no longer directly available.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- const { query } = history.location;\n+ import { parse } from 'query-string';\n+ const query = parse(history.location.search);\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Plots\nDESCRIPTION: Installs the statistical chart package from Ant Design Charts, which provides a set of commonly used chart types like line, bar, and pie charts. This is a more selective installation for projects that only require specific chart types.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/plots\n```\n\n----------------------------------------\n\nTITLE: MFSU Shared Configuration (TypeScript)\nDESCRIPTION: This code snippet configures Module Federation's shared option to avoid multiple instances of React. This is used to resolve React multi-instance issues.  It sets the `singleton` property to true for the `react` dependency.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  shared: {\n    react: {\n      singleton: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Including Packages for Babel Processing\nDESCRIPTION: Configures UmiJS to include a specific third-party package for additional processing by Babel. This is needed to enable CSS Modules support in third-party packages that output JavaScript.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  extraBabelIncludes: ['your-pkg-name']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Server\nDESCRIPTION: Configures the `SOCKET_SERVER` environment variable to specify the host and port for the development server. This resolves issues with constant restarting and refreshing during local static resource proxying.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSOCKET_SERVER=http://127.0.0.1:8000 pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing MFSU Dependency\nDESCRIPTION: This command installs the @umijs/mfsu package as a development dependency using pnpm. This is a prerequisite for using MFSU in your project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  pnpm add -D @umijs/mfsu\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS Route APIs (Batch)\nDESCRIPTION: This command generates multiple route API files: 'spaceships.ts', 'vehicles.ts', and 'species.ts'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api spaceships vehicles species\n```\n\n----------------------------------------\n\nTITLE: Fetching and Setting Data for Line Chart in React\nDESCRIPTION: This React component fetches data from a remote URL using `fetch` and updates the component's state using `useState` and `useEffect`. The fetched data is then stored in the `data` state, ready to be used by the charting library.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\nconst DemoLine = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/bmw-prod/1d565782-dde4-4bb6-8946-ea6a38ccf184.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Route Components with React.cloneElement Alternative\nDESCRIPTION: This snippet shows how to change the way route components rendered with `React.cloneElement`. `Outlet` with `context` provides a way to pass props to children.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { Outlet } from 'umi';\n\nexport default function RouteComponent(props) {\n  return (\n    <div>\n-      { React.cloneElement(props.children, { someProp: 'p1' }) }\n+      <Outlet context={{ someProp: 'p1' }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS Components (Batch)\nDESCRIPTION: This command generates multiple components at once in the src/components directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component apple banana orange\n```\n\n----------------------------------------\n\nTITLE: Define Multilingual Content - en-US.json - JSON\nDESCRIPTION: Defines multilingual content in a JSON file for the English (United States) locale. It contains a 'welcome' key with its corresponding translated value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// src/locales/en-US.json\n{\n  \"welcome\": \"Welcome to Umi's world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Mock in Configuration\nDESCRIPTION: Example showing how to disable the Mock feature in UmiJS via the configuration file. Setting `mock: false` in `.umirc.ts` will prevent UmiJS from loading and using the Mock files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  mock: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema\nDESCRIPTION: Defines the Prisma schema in prisma/schema.prisma, specifying the data models for Post and User, including their fields and relationships.  This schema is used by Prisma to generate the database client and manage database migrations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"referentialIntegrity\"]\n}\n\ndatasource db {\n  provider = \"mysql\"\n  referentialIntegrity = \"prisma\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n  imageUrl  String?\n  tags      String\n\n  @@index(authorId)\n}\n\nmodel User {\n  id            Int      @id @default(autoincrement())\n  email         String   @unique\n  passwordHash  String\n  name          String?\n  posts         Post[]\n  avatarUrl     String?\n}\n```\n\n----------------------------------------\n\nTITLE: Multilingual File Example in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript code represents a multilingual file (e.g., `src/locales/zh-CN.ts`) used for title internationalization in UmiJS. It exports a default object containing key-value pairs, where the keys represent translation keys and the values are the corresponding translated strings in the specified language. These keys are referenced in the route configuration to dynamically set page titles.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  'site.title': 'Umi - 企业级 React 应用开发框架',\n  'about.title': 'Umi - 关于我',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Model with React Hooks\nDESCRIPTION: This code demonstrates a UmiJS Model that utilizes React hooks for state management. It uses `useState` to manage a counter and `useCallback` to define increment and decrement functions. These functions are then returned as part of the Model's state, enabling components to interact with the counter.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/models/counterModel.ts\nimport { useState, useCallback } from 'react';\n\nexport default function Page() {\n  const [counter, setCounter] = useState(0);\n\n  const increment = useCallback(() => setCounter((c) => c + 1), []);\n  const decrement = useCallback(() => setCounter((c) => c - 1), []);\n\n  return { counter, increment, decrement };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for WebAssembly\nDESCRIPTION: This configuration snippet configures Webpack to support WebAssembly modules. It sets the asyncWebAssembly experiment to true, excludes .wasm files from the default asset rule, and adds a new rule to handle .wasm files.  It allows asynchronous loading of WebAssembly modules and is essential for using WebAssembly in UmiJS projects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  chainWebpack(config) {\n    config.set('experiments', {\n      ...config.get('experiments'),\n      asyncWebAssembly: true\n    })\n\n    const REG = /\\.wasm$/\n\n    config.module.rule('asset').exclude.add(REG).end();\n\n    config.module\n      .rule('wasm')\n      .test(REG)\n      .exclude.add(/node_modules/)\n      .end()\n      .type('webassembly/async')\n      .end()\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disable pre-rendering for specific routes during static export\nDESCRIPTION: This code snippet shows how to configure `extraRoutePaths` with the `prerender: false` option to disable pre-rendering for specific routes when using `exportStatic` with SSR enabled. This is useful for routes that should be rendered only on the client side.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // Output additional page files but skip pre-rendering\n    extraRoutePaths: [{ path: '/news/1', prerender: false }],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Building Umi Documentation\nDESCRIPTION: This command builds the Umi documentation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm doc:build\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Adjustment\nDESCRIPTION: Moves the assets, layouts, and pages directories from the root directory to the src directory.  This prevents conflicts between the API route directory and build output directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── assets\n│    └── yay.jpg\n├── layouts\n│    ├── index.less\n│    └── index.tsx\n├── node_modules\n├── package.json\n├── pages\n│    ├── docs.tsx\n│    └── index.tsx\n├── pnpm-lock.yaml\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Umi Project using pnpm\nDESCRIPTION: This command installs the `create-umi` scaffold and runs it automatically. The wizard prompts for the project directory path and creates a new Umi project in the specified location.  `pnpm` is used as the package manager.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/boilerplate.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create umi\n# Create a project under the my-umi-app folder in the current directory\npnpm create umi my-umi-app\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies\nDESCRIPTION: This command runs `pnpm dep:update` to update dependencies. The document advises that it is not recommended for non-Core Maintainers to update a large number of dependencies because it involves pre-packaging of dependencies and there are many points to note.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dep:update\n```\n\n----------------------------------------\n\nTITLE: Using icon Component in UmiJS\nDESCRIPTION: Using icon Component in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Icon } from 'umi';\n<Icon icon=\"fa:home\" />\n```\n\n----------------------------------------\n\nTITLE: Add HTML Head Scripts in UmiJS\nDESCRIPTION: This code snippet demonstrates adding a script to the `<head>` element of the HTML using `api.addHTMLHeadScripts`.  The function should return a string (representing the script code) or an object with script attributes (like `src`, `async`, `defer`), or an array of such strings/objects. This example adds a console log statement.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\napi.addHTMLHeadScripts(() => `console.log('I am in HTML-head')`)\n```\n\n----------------------------------------\n\nTITLE: Set Tailwind CSS Check Timeout Environment Variable\nDESCRIPTION: This environment variable sets the timeout interval for the Tailwind CSS plugin's checks. It's defined in the .env file at the project root.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/tailwindcss.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Default: 5\nCHECK_TIMEOUT=10\n```\n\n----------------------------------------\n\nTITLE: Example backend data format\nDESCRIPTION: Illustrates the data format expected from the backend API. The `dataField` configuration allows `useRequest` to directly consume the `data` property from this response.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/request.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  success: true,\n  data: 123,\n  code: 1,\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for Displaying Blog Posts\nDESCRIPTION: This React/JSX code snippet displays a list of blog posts fetched from an API endpoint in a UmiJS application. It uses `useState` to manage the `posts` array and `useEffect` to fetch the posts when the component mounts. The component renders a loading message while posts are being fetched and displays the title of each post, linking to a detail page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { history } from \"umi\";\n\nexport default function HomePage() {\n  const [posts, setPosts] = useState<any[]>();\n  return (\n    <div>\n      {!posts && <p>Loading...</p>}\n      {posts && <div>\n        {posts.map(post => <div key={post.id}>\n          <div onClick={() => history.push(`/posts/${post.id}`)}>\n            <p>{post.title}</p>\n          </div>\n        </div>)}\n      </div>}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining NoticeIconData Interface in TSX\nDESCRIPTION: This code defines the `NoticeIconData` interface, which specifies the structure of data objects used within the NoticeIcon component. It includes properties like `id`, `key`, `avatar`, `title`, `datetime`, `type`, and other fields related to notification information. This interface helps ensure type safety and provides a clear definition of the expected data format.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_4\n\nLANGUAGE: tsx | pure\nCODE:\n```\nexport interface NoticeIconData {\n  id: string;\n  key: string;\n  avatar: string;\n  title: string;\n  datetime: string;\n  type: string;\n  read?: boolean;\n  description: string;\n  clickClose?: boolean;\n  extra: any;\n  status: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the Umi project, including Prisma, bcryptjs, and jsonwebtoken, using pnpm.  These packages facilitate database interaction, password hashing, and user authentication.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm i -d prisma @types/bcryptjs @types/jsonwebtoken\npnpm i @prisma/client bcryptjs jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Basic - Interactive)\nDESCRIPTION: This command starts the interactive page generator. It prompts the user for the page name and the desired file creation method.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page\n? What is the name of page? › mypage\n? How dou you want page files to be created? › - Use arrow-keys. Return to submit.\n❯   mypage/index.{tsx,less}\n    mypage.{tsx,less}\n```\n\n----------------------------------------\n\nTITLE: Rendering Footer Component in TSX\nDESCRIPTION: This snippet demonstrates how to render the Footer component, importing it from '@/components/Footer'.  The Footer component likely includes Pro-specific configurations that may need customization.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport Footer from '@/components/Footer';\n\nexport default () => <Footer />;\n```\n\n----------------------------------------\n\nTITLE: Listing UmiJS Plugins\nDESCRIPTION: This command lists all the plugins currently used in the UmiJS project.  It provides insight into the project's plugin architecture, allowing developers to understand the extensions and functionalities enabled in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ umi plugin list\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS Pages (Batch)\nDESCRIPTION: This command generates multiple pages with TypeScript and Less files in the specified directories.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page  page1  page2   a/nested/page3\n```\n\n----------------------------------------\n\nTITLE: Installing lint-staged\nDESCRIPTION: This snippet shows how to install lint-staged as a development dependency using npm or pnpm. Lint-staged is used to run linters on files that are staged for commit.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/lint.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i lint-staged -D\n#or\n$ pnpm add lint-staged -D\n```\n\n----------------------------------------\n\nTITLE: Enabling React Compiler (React Forget) in UmiJS (TypeScript)\nDESCRIPTION: This code snippet shows how to enable the React Compiler (React Forget) feature in UmiJS.  It also highlights incompatibilities with mfsu and mako, and the requirement for React 19. Please note that enabling forget, while mfsu and mako are on, will throw an error. Additionally, it necessitates installing react@rc and react-dom@rc into project dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nforget: {\n  ReactCompilerConfig: {},\n},\n```\n\n----------------------------------------\n\nTITLE: Check if Plugin is Enabled - TypeScript\nDESCRIPTION: Demonstrates the usage of `api.isPluginEnable` to determine if a plugin is enabled.  The `key` parameter is the key of the plugin to check.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.isPluginEnable(key: string)\n```\n\n----------------------------------------\n\nTITLE: String Formatting - zh-CN.ts - TypeScript\nDESCRIPTION: Defines multilingual content with placeholders in a TypeScript file for the Simplified Chinese locale.  The `{name}` placeholder allows for dynamic string interpolation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  user: {\n    welcome: '{name}，今天也是美好的一天！',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using HeaderDropdown Component in TSX\nDESCRIPTION: This snippet shows how to use the HeaderDropdown component, which is a wrapper around antd's Dropdown, with added mobile support. It demonstrates creating a Menu component to be used as the dropdown's overlay.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport HeaderDropdown from '@/components/HeaderDropdown';\nimport { Button, Menu } from 'antd';\n\nexport default () => {\n  const menuHeaderDropdown = (\n    <Menu selectedKeys={[]}>\n      <Menu.Item key=\"center\">个人中心</Menu.Item>\n      <Menu.Item key=\"settings\">个人设置</Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\">退出登录</Menu.Item>\n    </Menu>\n  );\n  return (\n    <HeaderDropdown overlay={menuHeaderDropdown}>\n      <Button>hover 展示菜单</Button>\n    </HeaderDropdown>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Verify UmiJS Commit Message\nDESCRIPTION: This command verifies the commit message against a predefined format, often used with Husky. It ensures commit messages adhere to project conventions.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpx --no-install umi verify-commit $1\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts in Package.json to Use Max\nDESCRIPTION: This snippet shows how to modify the scripts in `package.json` to use the `max` command instead of `umi` for common tasks like building, setting up, and starting the application. It requires modifying the scripts section of the `package.json` file.  The output is the updated scripts section in `package.json`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-    \"build\": \"umi build\",\n+    \"build\": \"max build\",\n-    \"postinstall\": \"umi g tmp\",\n+    \"postinstall\": \"max setup\",\n-    \"start\": \"umi dev\",\n+    \"start\": \"max dev\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multilingual Default Values - en-US.ts - TypeScript\nDESCRIPTION: Defines multilingual content in TypeScript for the English (United States) locale, but the 'table.submit' key is commented out.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  // table: {\n  //   submit: 'SUBMIT TABLE',\n  // },\n};\n```\n\n----------------------------------------\n\nTITLE: Developing CSS for Umi Documentation Plugin\nDESCRIPTION: This command starts a process that automatically compiles the `tailwind.css` file or TailwindCSS style classes during development, generating a `tailwind.out.css` stylesheet file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/plugin-docs\n$ pnpm dev:css\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly Support\nDESCRIPTION: Configures Webpack to support WebAssembly by enabling the `asyncWebAssembly` experiment and defining rules for handling `.wasm` files.  It configures the module rule for `.wasm` files, excluding node_modules and setting the type to 'webassembly/async'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  chainWebpack(config) {\n    config.set('experiments', {\n      ...config.get('experiments'),\n      asyncWebAssembly: true\n    })\n\n    const REG = /\\.wasm$/\n\n    config.module.rule('asset').exclude.add(REG).end();\n\n    config.module\n      .rule('wasm')\n      .test(REG)\n      .exclude.add(/node_modules/)\n      .end()\n      .type('webassembly/async')\n      .end()\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing route properties with useRouteProps in UmiJS\nDESCRIPTION: Explains how to retrieve custom properties defined in the route configuration using the `useRouteProps` hook, enabling access to additional route metadata.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nroutes: [\n  {\n    path: '/',\n    custom_key: '1',\n  }\n]\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouteProps } from 'umi'\n\nexport default function Page() {\n  const routeProps = useRouteProps()\n\n  // use `routeProps.custom_key`\n} \n```\n\n----------------------------------------\n\nTITLE: Using Different Request Methods\nDESCRIPTION: This snippet demonstrates how to define mock interfaces for different HTTP request methods like `POST` and `PUT`. You need to explicitly specify the method and the path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  'POST /api/users': { result: 'true' },\n\n  'PUT /api/users/1': { id: 1, name: 'new-foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Remove MFSU dependencies\nDESCRIPTION: This command removes the MFSU dependencies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ # 删除依赖信息列表\n$ umi mfsu remove\n$ # 删除依赖信息列表和产物文件\n$ umi mfsu remove --all\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Import Plugin\nDESCRIPTION: Installs the `babel-plugin-dynamic-import-node` package as a development dependency. This plugin is required to disable dynamic import functionality, primarily used in production environments.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i babel-plugin-dynamic-import-node -D\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested UmiJS Page\nDESCRIPTION: This command generates a nested page with TypeScript and Less files in the 'far/far/away/kingdom' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page far/far/away/kingdom\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark and Compact Themes\nDESCRIPTION: This example shows how to enable the dark and compact themes in Ant Design.  These configurations are set within the `antd` object in the `config/config.ts` file. The `dark` option enables the dark theme, and the `compact` option enables the compact theme. Dark theme support is only available when using Ant Design version 4, and compact theme support starts with Ant Design version 4.1.0.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  antd: {\n    dark: true,\n    compact: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using rawMfImport to load remote modules\nDESCRIPTION: This code snippet demonstrates the usage of the `rawMfImport` function to load remote modules. It requires specifying the entry point, module name, and remote name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst RemoteCounter = React.lazy(() => {\n  return rawMfImport({\n    entry: 'http://localhost:8001/remote.js',\n    moduleName: 'Counter',\n    remoteName: 'remoteCounter',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Redirect Route with patchClientRoutes in UmiJS\nDESCRIPTION: This snippet illustrates how to add a redirect route using `patchClientRoutes`. It uses the `Navigate` component from UmiJS to redirect from the root path to `/home`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'umi';\n\nexport const patchClientRoutes = ({ routes }) => {\n  routes.unshift({\n    path: '/',\n    element: <Navigate to=\"/home\" replace />,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding React 17 Dependencies\nDESCRIPTION: This command adds specific versions of react and react-dom to the project, ensuring compatibility with React 17.  It installs React version ^17 and React DOM version ^17. This is useful when you want to use React 17 instead of the default React 18 in UmiJS v4.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react@^17 react-dom@^17\n```\n\n----------------------------------------\n\nTITLE: Configuring Dva Plugin Runtime Options in UmiJS\nDESCRIPTION: This snippet shows how to configure the Dva plugin's runtime options, such as enabling Immer for easier reducer modifications and specifying extra models. This assumes that the Dva plugin is being used in the UmiJS project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  dva: {\n    immer: true,\n    extraModels: [],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting Environment Variables into Browser with define\nDESCRIPTION: This TypeScript snippet shows how to use the `define` configuration option in `.umirc.ts` to inject an environment variable (MY_TOKEN) into the browser environment. This makes it accessible via `process.env.MY_TOKEN` in client-side code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\n  define: { 'process.env.MY_TOKEN': process.env.MY_TOKEN }\n```\n\n----------------------------------------\n\nTITLE: UmiJS Define Plugin Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure define plugin to expose variables. It sets the `FOO` variable to `bar`.  These can be accessed in the source code directly.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndefine: { FOO: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version 18 using nvm\nDESCRIPTION: These commands install Node.js version 18 and then switch to using it as the active version.  Requires nvm to be installed.  No direct output is expected from these commands.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 18\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Conventional Entry Files Structure\nDESCRIPTION: Demonstrates the default entry file structure for MPA mode, using `src/pages` directory and `*/index.[jt]sx?` files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+ src/pages\n  - foo/index.tsx\n  - bar/index.tsx\n  - hoo.tsx\n```\n\n----------------------------------------\n\nTITLE: Test Code\nDESCRIPTION: Runs the tests for the project. This command will execute the test suite and report any failures.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Prisma Generate Command\nDESCRIPTION: Command to generate a custom client package based on the defined Schema.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Verifying nvm installation\nDESCRIPTION: This command checks the installed version of nvm to confirm successful installation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/prepare.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvm -v\n```\n\n----------------------------------------\n\nTITLE: Skip Plugins in UmiJS\nDESCRIPTION: This code snippet shows how to skip the execution of specific plugins in UmiJS using the `api.skipPlugins` method. It takes an array of plugin keys as input, disabling those plugins during the build process.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napi.skipPlugins(keys: string[])\n```\n\n----------------------------------------\n\nTITLE: Remove UmiJS Configuration Value\nDESCRIPTION: This command removes a specific configuration value from the UmiJS project configuration. It removes the configuration specified. It uses the `remove` subcommand to remove the configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ umi config remove polyfill\nremove config:polyfill on /private/tmp/sorrycc-wsYpty/.umirc.ts\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Dependencies\nDESCRIPTION: This command installs the required dependencies for using UnoCSS in an Umi project, including the core `unocss` library and the `@unocss/cli` command-line interface.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm i unocss @unocss/cli\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tags Output Example\nDESCRIPTION: This snippet shows the HTML output generated by the UmiJS meta tag configuration. It demonstrates how the 'name' and 'content' properties defined in the configuration are transformed into HTML meta tags that are added to the document's head. This allows developers to easily manage and inject meta tags without directly modifying the HTML.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"keywords\" content=\"umi, umijs\" />\n<meta name=\"description\" content=\"React framework.\" />\n```\n\n----------------------------------------\n\nTITLE: Resolve Path Function Definition Typescript\nDESCRIPTION: Defines the `resolvePath` function, which resolves front-end routing jump paths on the client-side, returning an object with pathname, search, and hash properties. It takes a location (partial location or string) and an optional fromPathname as arguments.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function resolvePath(\n  to: Partial<Location> | string,\n  fromPathname?: string\n): {\n  pathname: string;\n  search: string;\n  hash: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MFSU with Eager Strategy (TypeScript)\nDESCRIPTION: This code snippet shows how to configure MFSU to use the 'eager' strategy in a Umi project. This strategy analyzes dependencies by scanning source code files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  strategy: 'eager',\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Code Splitting with React Lazy\nDESCRIPTION: This snippet demonstrates manual code splitting using React's `lazy` and `Suspense` APIs.  The `Page` component is lazily loaded, which means it will be loaded as a separate chunk when it's needed.  The `Suspense` component provides a fallback UI while the component is loading. Requires `react`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/code-splitting.en-US.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lazy, Suspense } from 'react'\n\n// './Page' 该组件将被自动拆出去\nconst Page = lazy(() => import('./Page'))\n\nexport default function() {\n  return (\n    <Suspense fallback={<div>loading...</div>}>\n      <Page />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Mode and Polyfills for Development in UmiJS with Typescript\nDESCRIPTION: This code snippet configures `legacy` mode for development and adds a polyfill script. `legacy.buildOnly` is set to `false` to enable legacy mode during development.  A conditional check using `process.env.NODE_ENV` ensures polyfills are included in development but excluded in production builds.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nconst isProd = process.env.NODE_ENV === 'production';\nexport default {\n  legacy: {\n    buildOnly: false,\n  },\n  headScripts: isProd ? [] : ['http://polyfill.alicdn.com/v3/polyfill.min.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Use App Data Hook Definition Typescript\nDESCRIPTION: Defines the `useAppData` hook, which returns global application data including routes, route components, client routes, plugin manager, root element, basename, client loader data, and a preload route function. The returned data is used to manage the application's routing and data loading.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useAppData(): {\n  routes: Record<id, Route>;\n  routeComponents: Record<id, Promise<React.ReactComponent>>;\n  clientRoutes: ClientRoute[];\n  pluginManager: any;\n  rootElement: string;\n  basename: string;\n  clientLoaderData: { [routeKey: string]: any };\n  preloadRoute: (to: string) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Use Outlet Hook Definition Typescript\nDESCRIPTION: Defines the `useOutlet` hook, which returns the child route element currently matched, used internally by the `<Outlet>` component. This hook allows access to the rendered child route within a layout component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useOutlet(): React.ReactElement | null;\n```\n\n----------------------------------------\n\nTITLE: Using Default UmiJS Page Template (Fallback)\nDESCRIPTION: This command forces the use of the default page template, ignoring any custom templates.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page foo --fallback\n```\n\n----------------------------------------\n\nTITLE: UmiJS esbuildMinifyIIFE Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to configure the esbuildMinifyIIFE option. This fixes issues when using esbuild as a minifier.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nesbuildMinifyIIFE: true\n```\n\n----------------------------------------\n\nTITLE: Using Outlet Context Instead of cloneElement\nDESCRIPTION: Demonstrates how to use `Outlet` with a context when upgrading to Umi 4, when the original code was using `React.cloneElement`. Requires importing { Outlet } from 'umi'. The result is the updated react component using Outlet context.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { Outlet } from 'umi';\n\nexport default function RouteComponent(props) {\n  return (\n    <div>\n-      { React.cloneElement(props.children, { someProp: 'p1' }) }\n+      <Outlet context={{ someProp: 'p1' }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Umi Repository\nDESCRIPTION: This command clones the Umi repository from GitHub to your local machine. After cloning, you should navigate into the `umi` directory to proceed with the setup. The command uses the git protocol to clone the repository.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:umijs/umi.git\n$ cd umi\n```\n\n----------------------------------------\n\nTITLE: Build UmiJS project for production\nDESCRIPTION: This command builds the UmiJS project for production, creating optimized and minified assets in the `./dist` directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> umi build\nevent - compiled successfully in 1179 ms (567 modules)\nevent - build index.html\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Plots (Column Chart)\nDESCRIPTION: Installs the statistical chart package from Ant Design Charts.  Required to use the Column chart.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/plots\n```\n\n----------------------------------------\n\nTITLE: Get MFSU command help\nDESCRIPTION: This command displays help information for the MFSU commands.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu\n```\n\n----------------------------------------\n\nTITLE: Using useOutlet to render child routes in UmiJS\nDESCRIPTION: Shows how to use the `useOutlet` hook to render the currently matched child route element within a layout component in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOutlet } from 'umi';\n\nconst Layout = ()=>{\n  const outlet = useOutlet()\n\n  return <div className=\"fancyLayout\">\n    {outlet}\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Favicon HTML Output\nDESCRIPTION: Illustrates the HTML output that Umi automatically generates when a favicon file is present in the `src` directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/favicon.png\">\n```\n\n----------------------------------------\n\nTITLE: Use Outlet Context Hook Example Typescript\nDESCRIPTION: Demonstrates using the `useOutletContext` hook to access context data passed from a parent layout to a child route. The Layout component uses `<Outlet context={{ prop: 'from Layout'}} />` to pass context, and the child component `SomeRouteComponentUnderLayout` uses `useOutletContext` to retrieve and display it.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOutletContext, Outlet } from 'umi';\n\nconst Layout = () => {\n  return <div className=\"fancyLayout\">\n    <Outlet context={{ prop: 'from Layout'}} />\n  </div>\n}\n\nconst SomeRouteComponentUnderLayout = () => {\n  const layoutContext = useOutletContext();\n\n  return JSON.stringify(layoutContext)   // {\"prop\":\"from Layout\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Directory Structure\nDESCRIPTION: Example directory structure showing where Mock files are located in an UmiJS project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── mock\n    ├── todos.ts\n    ├── items.ts\n    └── users.ts\n└── src\n    └── pages\n        └── index.tsx\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Component\nDESCRIPTION: This code snippet demonstrates how to dispatch an event from a React component to a Dva model.  The `dispatch` function, provided by `connect`, is used to trigger an action.  The action type is 'user/test', which corresponds to an effect or reducer in the `user` model. It requires the `umi` package for the `connect` function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'umi';\n\n@connect(({ user }) => ({\n  user,\n}))\nclass UserInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div\n        onClick={() => {\n          this.props.dispatch({\n            type: 'user/test',\n          });\n        }}\n      >\n        {this.props.user.name}\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Plots Sub-package\nDESCRIPTION: This command installs only the @ant-design/plots sub-package, providing access to common chart types such as line, column, and pie charts. It reduces the overall bundle size by only including necessary components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/plots\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition\nDESCRIPTION: Defines the Prisma schema in prisma/schema.prisma, specifying the data models for Post and User, including their fields and relationships.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"referentialIntegrity\"]\n}\n\ndatasource db {\n  provider = \"mysql\"\n  referentialIntegrity = \"prisma\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n  imageUrl  String?\n  tags      String\n\n  @@index(authorId)\n}\n\nmodel User {\n  id            Int      @id @default(autoincrement())\n  email         String   @unique\n  passwordHash  String\n  name          String?\n  posts         Post[]\n  avatarUrl     String?\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Paths with matchPath in UmiJS (TypeScript)\nDESCRIPTION: Demonstrates how to use `matchPath` to match a given path with a defined route pattern. It returns the matching parameters and other relevant information.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { matchPath from 'umi';\nconst match = matchPath(\n  { path: \"/users/:id\" },\n  \"/users/123\",\n);\n// {\n//   \"params\": { \"id\": \"123\" },\n//   \"pathname\": \"/users/123\",\n//   \"pathnameBase\": \"/users/123\",\n//   \"pattern\": { \"path\": \"/users/:id\" }\n// }\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions with Payload and Promise Handling in UmiJS\nDESCRIPTION: This code snippet illustrates how to dispatch an action from a component using `this.props.dispatch` in UmiJS.  The dispatched action has a type ('modelnamespace/actionname') and carries a payload (`sometestdata`, `othertestata`).  The `then` block demonstrates handling the promise returned by the `dispatch` function, allowing execution of code after the action completes successfully.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nrender () {\n  return <div onClick={() => {\n   this.props.dispacth({\n    type: 'modelnamespace/actionname',\n    sometestdata: 'xxx',\n    othertestata: {},\n  }).then(() => {\n    // it will return a promise\n    // action success\n  });\n  }}>test</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics in UmiJS Max with TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure analytics in UmiJS Max using TypeScript. It shows how to specify Google Analytics (GA4 and older versions) and Baidu Tongji API keys directly within the configuration object. The keys are used to track website statistics.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/analytics.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  analytics: {\n    ga_v2: 'G-abcdefg', // google analytics 的 key (GA 4)\n    baidu: 'baidu_tongji_key',\n\n    // 若你在使用 GA v1 旧版本，请使用 `ga` 来配置\n    ga: 'ga_old_key'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Level Configuration via config.json\nDESCRIPTION: This JSON snippet shows how to configure page-specific settings using a `config.json` file in the same directory as the entry point.  It defines the layout and title for a particular page.  Supported configurations include template path, layout component, page title, and mount element ID. This config is used by Umi during the build process for MPA.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layout\": \"@/layouts/bar.ts\",\n  \"title\": \"foooooo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Webpack Configuration with UmiJS API (TypeScript)\nDESCRIPTION: Illustrates how to modify the webpack configuration in an UmiJS project using the `chainWebpack` API and `webpack-chain`. The code shows how to set aliases and delete plugins from the webpack configuration.  The function receives the `config` object from `webpack-chain` and arguments including the `webpack` instance and the current environment (`env`).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.chainWebpack(( memo, { webpack, env}) => {\n  // set alias\n  memo.resolve.alias.set('a','path/to/a');\n  // Delete progess bar plugin\n  memo.plugins.delete('progess');\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Targets in UmiJS with Typescript\nDESCRIPTION: This code snippet shows how to configure the compilation target for UmiJS using the `targets` option in the `.umirc.ts` file.  It sets the target to Chrome 67, ensuring the generated code is compatible with that version.  Adjusting targets allows you to control which browser versions your application supports.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  targets: { chrome: 67 },\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Container with rootContainer (JavaScript)\nDESCRIPTION: This snippet demonstrates how to modify the root component that's handed over to react-dom for rendering using the `rootContainer` configuration. This allows wrapping the entire application with providers or other higher-order components. It receives the root container and arguments including routes, plugin instance, and history instance.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport function rootContainer(container, args) {\n  return React.createElement(ThemeProvider, null, container);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Configuration with MFSU in UmiJS\nDESCRIPTION: This snippet showcases how to modify the webpack configuration using the `chainWebpack` option within the `mfsu` configuration.  This allows for adding custom plugins or modifying existing webpack settings. The `memo` parameter is the webpack configuration object, and `args` can be used to pass additional arguments to the plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack 配置修改\nmfsu: {\n  chainWebpack(memo, args) {\n    // 添加额外插件\n    memo.plugin('hello').use(Plugin, [...args]);\n    return memo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Usage Example in UmiJS Routes\nDESCRIPTION: This example demonstrates how to configure icons in UmiJS routes using the `icon` property. It shows how to specify line, solid, and two-tone styles for Ant Design icons, which are automatically converted into Antd icon DOM elements by the layout plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/layout-menu.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// <HomeOutlined /> Line style\nicon: 'home'; // Line style can be abbreviated\nicon: 'HomeOutlined';\n\n// <HomeFilled /> Solid style\nicon: 'HomeFilled';\n\n// <HomeTwoTone /> Two-tone style\nicon: 'HomeTwoTone';\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS RouteAPI (Nested)\nDESCRIPTION: This command generates a nested RouteAPI file api/planets/[id].ts.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api planets/[id]\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Middleware to Webpack 5 DevServer\nDESCRIPTION: Adds MFSU's devServer middleware to webpack-dev-server for webpack 5. This middleware serves the bundled resources required by MFSU. It is crucial for MFSU to function correctly.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  devServer: {\n    // [mfsu] 2. add mfsu middleware\n    setupMiddlewares(middlewares, devServer) {\n      middlewares.unshift(...mfsu.getMiddlewares());\n      return middlewares;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Umi Max Project\nDESCRIPTION: This command uses `create-umi` to create a new project, prompting the user to select a template. The `Ant Design Pro` template should be chosen to utilize `@umijs/max`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/introduce.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-umi@latest\n? Pick Umi App Template › - Use arrow-keys. Return to submit.\n    Simple App\n❯   Ant Design Pro\n    Vue Simple App\n```\n\n----------------------------------------\n\nTITLE: Generating Routes for Dynamic Paths (JavaScript)\nDESCRIPTION: Illustrates the route configuration that UmiJS generates based on dynamic file names in the `src/pages` directory (convention based routing). It shows how files prefixed with `$` are mapped to routes with dynamic parameters, such as `/users/:id` or wildcard routes such as `/:bar/*`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index.tsx' },\n  { path: '/foo/:slug', component: '@/pages/foo/$slug.tsx' },\n  { path: '/:bar/*', component: '@/pages/$bar/$.tsx' },\n];\n```\n\n----------------------------------------\n\nTITLE: Using defaultMessage with FormattedMessage - TypeScript\nDESCRIPTION: Demonstrates how to use the `defaultMessage` prop of the `<FormattedMessage />` component to provide a fallback value when a translation is not found.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'antd';\nimport { FormattedMessage } from 'umi';\n\nexport default function Page() {\n  return (\n    <Button type=\"primary\">\n      <FormattedMessage id=\"table.submit\" defaultMessage=\"SUBMIT TABLE\" />\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Monorepo Redirect with Custom Source Directory\nDESCRIPTION: This snippet demonstrates how to configure the source directory for monorepo redirection in UmiJS. It sets the `srcDir` option to `['libs', 'src']`, prioritizing the `libs` folder for source code lookup before falling back to the `src` folder. This allows customization of the source code location used for redirection.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// In sub-packages, prioritize redirecting to libs folder\nmonorepoRedirect: {\n  srcDir: ['libs', 'src'],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title on Route Change (TypeScript)\nDESCRIPTION: This snippet shows how to set the document title dynamically based on the current route within the `onRouteChange` function. It uses `matchRoutes` from UmiJS to find the matching route and sets the title from the route's `title` property, or an empty string if the route has no title.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { matchRoutes } from 'umi';\n\nexport function onRouteChange({ clientRoutes, location }) {\n  const route = matchRoutes(clientRoutes, location.pathname)?.pop()?.route;\n  if (route) {\n    document.title = route.title || '';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics with GA and Baidu Keys in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure site analytics in a UmiJS project using the `analytics` configuration option. It includes keys for Google Analytics (GA4 and GA v1) and Baidu Analytics.  The keys must be obtained from the respective analytics platforms.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/analytics.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  analytics: {\n    ga_v2: 'G-abcdefg', // google analytics key (GA 4)\n    baidu: 'baidu_tongji_key',\n\n    // If you are using the old version GA v1, please use `ga` to configure\n    ga: 'ga_old_key'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Vue Preset\nDESCRIPTION: This command installs the `@umijs/preset-vue` package as a development dependency using pnpm. This preset is necessary for UmiJS to properly handle Vue components and routing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add  @umijs/preset-vue -D\n```\n\n----------------------------------------\n\nTITLE: Valtio Component Encapsulation with UmiJS\nDESCRIPTION: This snippet demonstrates how to encapsulate a React component with Valtio context using UmiJS. It covers creating a context, providing the Valtio state through the context provider, and consuming the context within the component.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// 1、createContext\nconst MyContext = createContext();\n// 2、Provider\nconst value = useRef(proxy({ count: 0 })).current;\n<MyContext.Provider value={value} />\n// 3、useContext\nuseContext(MyContext);\n```\n\n----------------------------------------\n\nTITLE: Running Jest tests (Bash)\nDESCRIPTION: This command shows how to run Jest tests using the `npx` command.  It executes the jest test runner in the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$npx jest\n```\n\n----------------------------------------\n\nTITLE: Utility Function for Reversing API Data (TypeScript)\nDESCRIPTION: This utility function `reverseApiData` fetches data from an API endpoint using the provided `fetcher` function (defaulting to the global `fetch` function), parses the JSON response, and reverses the key-value pairs in the `data` object. It returns the reversed object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/reverseApiData.ts\nexport async function reverseApiData(url: string, fetcher = fetch) {\n  const res = await fetcher(url);\n  const json = await res.json();\n\n  const { data = {} } = json;\n  const reversed: Record<string, any> = {};\n  for (const key of Object.keys(data)) {\n    const val = data[key];\n    reversed[val] = key;\n  }\n  return reversed;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring monorepoRedirect with srcDir in UmiJS\nDESCRIPTION: This snippet configures the `srcDir` option within `monorepoRedirect` to specify preferred source code folders to redirect to. If a subpackage has both `libs` and `src` folders, the import will be redirected to the `libs` folder first.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// 在子包中寻找，优先定向到 libs 文件夹\nmonorepoRedirect: {\n  srcDir: ['libs', 'src'],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart with Ant Design Plots\nDESCRIPTION: This React component uses the `Line` component from `@ant-design/plots` to render a line chart. It configures the chart with data, padding, and specifies the x and y fields. The `xAxis` configuration sets the number of ticks and the `smooth` property enables smoothing of the line.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine: React.FC = () => {\n  // fetch data\n\n  const config = {\n    data,\n    padding: 'auto',\n    xField: 'Date',\n    yField: 'scales',\n    xAxis: {\n      // type: 'timeCat',\n      tickCount: 5,\n    },\n    smooth: true,\n  };\n\n  return <Line {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Targets in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `targets` option in UmiJS to specify the desired browser compatibility. This affects the output of the compilation process, allowing you to target older browsers.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  targets: { chrome: 67 },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Mode in UmiJS with Typescript\nDESCRIPTION: This code snippet demonstrates enabling legacy mode in UmiJS, which provides build-time code transformation to support older browsers like IE.  The `legacy` configuration option is enabled in the `.umirc.ts` file.  Refer to the UmiJS documentation for limitations and details on legacy mode.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  legacy: {},\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Route Configuration with Custom Loader\nDESCRIPTION: This code snippet shows how to configure a route in UmiJS to load a micro-app and use a custom loading animation. It uses a custom `loader` component that receives a `loading` boolean to indicate the loading state.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// .app.tsx\nimport CustomLoader from 'src/components/CustomLoader';\n\nexport const qiankun = () => ({\n  routes: [\n    {\n      path: '/app1',\n      microApp: 'app1',\n      microAppProps: {\n        loader: (loading) => <CustomLoader loading={loading} />,\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Import All From Umi Example TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the 'import all from umi' pattern. It shows how various functionalities like `connect`, `useModel`, `useIntl`, `useRequest`, and `MicroApp` are imported from the `umi` package. This consolidates dependencies and reduces the number of import statements in the code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/philosophy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 大量插件为 umi 提供额外导出内容\nimport { connect, useModel, useIntl, useRequest, MicroApp, ... } from 'umi';\n```\n\n----------------------------------------\n\nTITLE: Valtio Redux DevTools Integration with UmiJS\nDESCRIPTION: This example shows how to integrate Valtio with Redux DevTools using `proxyWithDevtools` from UmiJS. It allows monitoring Valtio state changes within the Redux DevTools extension.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy, proxyWithDevtools } from 'umi';\n\nconst state = proxy({ count: 0 });\nproxyWithDevtools(state, { name: 'count', enabled: true });\n```\n\n----------------------------------------\n\nTITLE: Using Client Loader in Route Component with JSX\nDESCRIPTION: This snippet demonstrates how to use the `clientLoader` feature within a route component. It imports `useClientLoaderData` from 'umi' to access the preloaded data and defines an async `clientLoader` function to fetch the data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/.../some_page.tsx\n\nimport { useClientLoaderData } from 'umi';\n\nexport default function SomePage() {\n  const { data } = useClientLoaderData();\n  return <div>{data}</div>;\n}\n\nexport async function clientLoader() {\n  const data = await fetch('/api/data');\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer: Add Deeply Nested Data (Avoid)\nDESCRIPTION: This reducer function adds a todo item to a deeply nested `todos` array within the state. Deeply nested reducers are discouraged because they are harder to write and maintain.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.en-US.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.model({\n  namespace: 'app',\n  state: {\n    a: {\n      b: {\n        todos: [],\n        loading: false,\n      },\n    },\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.a.b.todos.concat(todo);\n      const b = { ...state.a.b, todos };\n      const a = { ...state.a, b };\n      return { ...state, a };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in UmiJS with Vue\nDESCRIPTION: This configuration demonstrates how to define a named route in UmiJS. The `name` property allows referencing routes by name instead of path, enabling easier navigation and redirection. `path` defines the URL pattern and `component` specifies which Vue component to render.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/user/:username',\n      name: 'user',\n      component: 'index'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS Pages (Batch)\nDESCRIPTION: This command generates multiple pages at once.  It creates page1.tsx, page1.less, page2.tsx, page2.less, a/nested/page3.tsx, and a/nested/page3.less in the corresponding directories.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page  page1  page2   a/nested/page3\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Container in UmiJS with Vue\nDESCRIPTION: This example shows how to modify the root component rendered by vue-router using the `rootContainer` function. It wraps the original container with a `ThemeProvider` component. This allows customizing the root structure and applying global styles or providers. Requires the `vue` package for the `h` function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { h } from 'vue'\n\nexport function rootContainer(container) {\n  return h(ThemeProvider, null, container);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Search Parameters in UmiJS (TypeScript)\nDESCRIPTION: Wraps the native URLSearchParams API to support creation with arrays and objects. Useful for handling URL query parameters in a type-safe and convenient manner.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSearchParams } from 'umi';\n\n\n// Assuming the path http://a.com?foo=1&bar=2\ncreateSearchParams(location.search);\ncreateSearchParams(\"foo=1&bar=2\");\ncreateSearchParams(\"?foo=1&bar=2\");\n\n// Key-value pair object\ncreateSearchParams({ foo: 'bar', qux: 'qoo'}).toString()\n// foo=bar&qux=qoo\n\n// Key-value tuple array\ncreateSearchParams([[\"foo\", \"1\"], [\"bar\", \"2\"]]).toString()\n// foo=1&bar=2\n```\n\n----------------------------------------\n\nTITLE: Run UmiJS Generator Interactively\nDESCRIPTION: This command runs the UmiJS code generator in interactive mode. It allows users to select a generator type from a list of options.  It prompts the user to choose the specific task via command line selection.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ umi g\n# 或\n$ umi generate\n```\n\n----------------------------------------\n\nTITLE: Conditional MFSU Initialization\nDESCRIPTION: This code snippet shows how to conditionally initialize MFSU only in development environments.  It uses the NODE_ENV environment variable to determine whether to initialize MFSU or not, preventing it from being included in production builds.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst isDev = process.env.NODE_ENV === 'development'\n\nconst mfsu = isDev\n  ? new MFSU({\n      implementor: webpack,\n      buildDepWithESBuild: true,\n    })\n  : undefined\n\n// e.g.\n{\n  test: /\\.[jt]sx?$/,\n  exclude: /node_modules/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      plugins: [\n        ...(isDev ? [] : mfsu.getBabelPlugins())\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useModel with custom selector\nDESCRIPTION: Demonstrates using the useModel hook with a custom selector to only retrieve specific properties (user and fetchUser) from the 'adminModel', improving performance by preventing unnecessary re-renders.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/AdminInfo/index.tsx\nimport { useModel } from 'umi';\n\nexport default function Page() {\n  const { user, fetchUser } = useModel('adminModel', (model) => ({\n    user: model.admin,\n    fetchUser: model.fetchAdmin,\n  }));\n\n  return <>hello</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Redirect Route\nDESCRIPTION: This configuration redirects the `/home` path to the `/` path.  When a user visits `/home`, they will be automatically redirected to the root path.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      path: '/home',\n      redirect: '/'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Paths with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the matchPath function from UmiJS to match a given path against a defined route pattern. It allows extracting parameters from the path based on the pattern definition.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { matchPath } from 'umi';\nconst match = matchPath(\n  { path: \"/users/:id\" },\n  \"/users/123\",\n);\n// {\n//   \"params\": { \"id\": \"123\" },\n//   \"pathname\": \"/users/123\",\n//   \"pathnameBase\": \"/users/123\",\n//   \"pattern\": { \"path\": \"/users/:id\" }\n// }\n```\n\n----------------------------------------\n\nTITLE: Umi Plugin Example (JavaScript)\nDESCRIPTION: This example demonstrates a simple Umi plugin that modifies the favicons configuration based on the user-defined 'changeFavicon' value. It showcases the use of `api.describe` for configuration schema and `api.modifyConfig` for modifying the configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IApi } from 'umi';\n\nexport default (api: IApi) => {\n  api.describe({\n    key: 'changeFavicon',\n    config: {\n      schema(joi) {\n        return joi.string();\n      },\n    },\n    enableBy: api.EnableBy.config\n  });\n  api.modifyConfig((memo)=>{\n    memo.favicons = api.userConfig.changeFavicon;\n    return memo;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Reducer Example: Adding to a Nested State in DvaJS\nDESCRIPTION: This example demonstrates adding a todo to a nested state structure within a Dva reducer. It shows how to update nested properties while maintaining immutability. The recommended approach is to keep the state as flat as possible.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.model({\n  namespace: 'app',\n  state: {\n    todos: [],\n    loading: false,\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.todos.concat(todo);\n      return { ...state, todos };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UmiJS Data Flow Model\nDESCRIPTION: This configuration demonstrates how to enable the UmiJS data flow management plugin and specify extra model files to be included. The `sort` function allows custom sorting of models based on their namespace.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/data-flow.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  model: {\n    extraModels: ['src/models/userModel.ts'],\n    sort: (a, b) => a.namespace.localeCompare(b.namespace),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS conventionRoutes exclude Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to exclude files from convention routes. It excludes components and models directories from being treated as routes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// 不识别 components 和 models 目录下的文件为路由\nconventionRoutes: {\n  exclude: [/\\/components\\//, /\\/models\\//],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfills via headScripts in UmiJS (TypeScript)\nDESCRIPTION: This example illustrates how to add polyfills to enhance browser compatibility by using `headScripts`. This ensures that necessary APIs are available before the application's JavaScript code runs.  The script is added to the head of the HTML.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  headScripts: [\n    'http://polyfill.alicdn.com/v3/polyfill.min.js',\n  ],\n  legacy: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with patchClientRoutes (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `patchClientRoutes` function to add a new route to the beginning of the route table before it's rendered. It receives the `routes` array as an argument and directly modifies it by unshifting a new route object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from '@/extraRoutes/foo';\n\nexport function patchClientRoutes({ routes }) {\n  routes.unshift({\n    path: '/foo',\n    element: <Page />,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Match using useMatch Hook\nDESCRIPTION: This snippet illustrates how to access route match information using the `useMatch` hook provided by Umi after upgrading to Umi 4. It is necessary to import { useMatch } from 'umi'. It demonstrates how to retrieve route parameters with the useMatch hook.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useMatch } from 'umi';\nexport default function Page(props) {\n+ const match = useMatch({ path: 'list/search/:type' });\n  return (\n    <div>\n-     { props.match }\n+     { match }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mock File with Custom Function\nDESCRIPTION: Example Mock file using a custom function to generate the return value. This allows for dynamic Mock responses based on the request. The function receives `req` (request) and `res` (response) objects, enabling interaction with headers, status codes, and response bodies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n\n  'POST /api/users/create': (req, res) => {\n    // 添加跨域请求头\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.end('ok');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prettier Configuration\nDESCRIPTION: This command generates Prettier configuration files for the project, including '.prettierrc' and '.prettierignore', and updates 'package.json'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$umi g prettier\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UmiJS RouteAPIs (Batch)\nDESCRIPTION: This command generates multiple RouteAPI files at once.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api spaceships vehicles species\n```\n\n----------------------------------------\n\nTITLE: Register Hook with options - TypeScript\nDESCRIPTION: Explains how to register a hook using `api.register`, including key, function (`fn`), before (for ordering), and stage (for ordering).  The function definition depends on ApplyPluginsType which has add, modify and event.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napi.register({ key: string, fn, before?: string, stage?: number})\n```\n\n----------------------------------------\n\nTITLE: Get Multilingual List with getAllLocales - TypeScript\nDESCRIPTION: Shows how to retrieve an array of all currently available locales using the `getAllLocales()` function.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllLocales } from 'umi';\n\ngetAllLocales();\n// [en-US, zh-CN, ...]\n```\n\n----------------------------------------\n\nTITLE: Generating 404 Route (JavaScript)\nDESCRIPTION: Illustrates how UmiJS automatically generates a 404 route when a `src/pages/404.tsx` file exists. This route is used as a fallback when no other routes match the current URL. It is useful to show a 'Page Not Found' message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { path: '/', component: '@/pages/index' },\n  { path: '/users', component: '@/pages/users' },\n  { path: '/*', component: '@/pages/404' },\n]\n```\n\n----------------------------------------\n\nTITLE: Turning on Webpack FS Cache Debug Log\nDESCRIPTION: This snippet shows how to enable Webpack's physical cache debug log using the `WEBPACK_FS_CACHE_DEBUG` environment variable.  This provides detailed information about the caching process for debugging.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ WEBPACK_FS_CACHE_DEBUG=1 umi dev\n```\n\n----------------------------------------\n\nTITLE: Fetch Post Data with useEffect Hook - TypeScript\nDESCRIPTION: This code snippet demonstrates how to fetch post data from an API endpoint using the `useEffect` hook in a React component. It defines an asynchronous function `refresh` to fetch the data and update the component's state using the `useState` hook. Error handling is included to catch network errors or invalid responses. The `history` object from `umi` is used to navigate to the individual post page on click.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/index.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { history } from 'umi';\n\nexport default function HomePage() {\n  const [posts, setPosts] = useState<any[]>();\n\n  async function refresh() {\n    try {\n      const res = await fetch('/api/posts');\n      if (res.status !== 200) {\n        console.error(await res.text());\n      }\n      setPosts(await res.json());\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  return (\n    <div>\n      {!posts && <p>Loading...</p>}\n      {posts && (\n        <div>\n          {posts.map((post) => (\n            <div key={post.id}>\n              <div onClick={() => history.push(`/posts/${post.id}`)}>\n                <p>{post.title}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listening for Route Changes with UmiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to listen for route changes using the history.listen method from UmiJS. It allows executing a callback function whenever the location changes, providing access to the new location and action.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { history } from 'umi';\n\nconst unlisten = history.listen(({ location, action }) => {\n  console.log(location.pathname);\n});\nunlisten();\n```\n\n----------------------------------------\n\nTITLE: API Route Directory Structure\nDESCRIPTION: Illustrates the directory structure for API routes, showing the files for login, register, and posts (including dynamic postId). This structure follows the Umi convention for API route development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nsrc\n├── api\n│     ├── login.ts\n│     ├── register.ts\n│     └── posts\n│           ├── [postId].ts\n│           └── index.ts\n...\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Convention Routes in JavaScript\nDESCRIPTION: This snippet demonstrates how to exclude files under specific directories (components and models) from being treated as routes when using UmiJS's convention-based routing.  This is done via the `conventionRoutes` configuration object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Do not recognize files under components and models directories as routes\nconventionRoutes: {\n  exclude: [/\\/components\\//, /\\/models\\//],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Nested Route with patchClientRoutes (TSX)\nDESCRIPTION: This snippet demonstrates how to add a nested route structure using `patchClientRoutes`. It pushes a new route with a `children` array containing the nested route definition. This allows creating hierarchical routing configurations.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.en-US.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from '@/extraRoutes/foo';\n\nexport const patchClientRoutes = ({ routes }) => {\n  routes.push({\n    path: '/group',\n    children: [{\n      path: '/group/page',\n      element: <Page />,\n    }],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Column Chart Data Example (TypeScript)\nDESCRIPTION: Defines the data structure for the column chart, including 'type' and 'value' fields. This data represents page load times.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst data = [\n  {\n    type: '0-1 seconds',\n    value: 0.55,\n  },\n  {\n    type: '1-3 seconds',\n    value: 0.21,\n  },\n  {\n    type: '3-5 seconds',\n    value: 0.13,\n  },\n  {\n    type: '5+ seconds',\n    value: 0.11,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration File\nDESCRIPTION: Adds a vercel.json configuration file to the project root, enabling file system API and defining rewrites for API routes for proper deployment on Vercel.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"env\": {\n      \"ENABLE_FILE_SYSTEM_API\": \"1\"\n    }\n  },\n  \"rewrites\": [\n    {\n      \"source\": \"/api/:match*\",\n      \"destination\": \"api/:match*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line (OS X, Linux)\nDESCRIPTION: This code snippet demonstrates how to set an environment variable (PORT) directly when executing the `umi dev` command in Unix-like operating systems.  It's useful for temporarily overriding default settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ PORT=3000 umi dev\n```\n\n----------------------------------------\n\nTITLE: Valtio Data Structure Composition with UmiJS\nDESCRIPTION: This example shows how to split and combine data structures within Valtio using UmiJS.  It demonstrates defining proxy objects for individual parts of the state and then combining them into a single state object.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// 比如如下定义\n// state.foo 和 state.bar 都是 proxy，可拆分使用\nconst state = proxy({\n  foo: { a: 1 },\n  bar: { b: 1 },\n});\n\n// 组合\nconst foo = proxy({ a: 1 });\nconst bar = proxy({ b: 1 });\nconst state = proxy({ foo, bar });\n```\n\n----------------------------------------\n\nTITLE: Use Params Hook Example Typescript\nDESCRIPTION: Demonstrates using the `useParams` hook to extract dynamic route parameters from a URL. With a route configured as \"user/:uId/repo/:rId\" and the current path as \"user/abc/repo/def\", the hook returns an object `{ uId: 'abc', rId: 'def' }`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useParams } from 'umi';\n\n// Assuming a route configuration user/:uId/repo/:rId\n// Current path       user/abc/repo/def\nconst params = useParams()\n/* params\n{ uId: 'abc', rId: 'def'}\n*/\n```\n\n----------------------------------------\n\nTITLE: Package.json Script with UMI_ENV\nDESCRIPTION: This snippet shows how to use the `UMI_ENV` environment variable to load different configurations based on the environment. Requires the `cross-env` package.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"dev:pre\": \"cross-env UMI_ENV=pre umi dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pro List Package\nDESCRIPTION: This command installs the @ant-design/pro-list package, providing a more advanced list component for rapidly creating customizable lists.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/pro-list\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Splitting Strategy in Umi 4 (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the code splitting strategy in Umi 4 using the `codeSplitting` option in the `.umirc.ts` file.  It sets the `jsStrategy` to `'granularChunks'`, which enables automatic code splitting based on optimization strategies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/code-splitting.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  codeSplitting: {\n    jsStrategy: 'granularChunks',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale in .umirc.ts (TypeScript)\nDESCRIPTION: This snippet configures the internationalization plugin in the .umirc.ts file. It sets the default locale to 'zh-CN' and defines the base separator as '-'. This configuration determines the default language and the separator used in locale file names.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  locale: {\n    // 默认使用 src/locales/zh-CN.ts 作为多语言文件\n    default: 'zh-CN',\n    baseSeparator: '-',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Parent Application (Runtime)\nDESCRIPTION: This code snippet shows how to configure the parent application in UmiJS to register child applications at runtime by exporting a qiankun object from the src/app.ts file.  It defines the 'name' and 'entry' for each child application.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  qiankun: {\n    master: {},\n  },\n};\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  apps: [\n    {\n      name: 'app1',\n      entry: '//localhost:7001',\n    },\n    {\n      name: 'app2',\n      entry: '//localhost:7002',\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Generating HTML with Configured Styles (HTML)\nDESCRIPTION: This HTML shows the output generated by the styles configuration.  It includes an inline style block and a link to an external stylesheet.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_64\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  body {\n    color: red;\n  }\n</style>\n<link rel=\"stylesheet\" href=\"https://a.com/b.css\" />\n```\n\n----------------------------------------\n\nTITLE: Update Build Script in package.json\nDESCRIPTION: Modifies the build script to include `prisma generate` before building, ensuring that the Prisma client is generated before each build.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"build\": \"umi build\",\n    \"postinstall\": \"umi setup\",\n    \"start\": \"npm run dev\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"umi dev\",\n    \"build\": \"prisma generate && umi build\",\n    \"postinstall\": \"umi setup\",\n    \"start\": \"npm run dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Shows how to configure the .env file with the DATABASE_URL obtained from PlanetScale. This environment variable is used by Prisma to connect to the MySQL database.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_13\n\nLANGUAGE: dotenv\nCODE:\n```\n# .env\n\nDATABASE_URL='mysql://************:************@************.ap-southeast-2.psdb.cloud/umi-blog-example?sslaccept=strict'\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Splitting in UmiJS\nDESCRIPTION: This snippet shows how to configure the code splitting strategy in UmiJS using the `codeSplitting` option in the `.umirc.ts` configuration file. The `jsStrategy` option is set to `granularChunks` to enable automatic code splitting based on optimization strategies.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/code-splitting.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  codeSplitting: {\n    jsStrategy: 'granularChunks',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Max Commands\nDESCRIPTION: This command demonstrates how to use the `max` command-line tool in a Umi Max project.  It showcases the generation of a Jest testing setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/introduce.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx max g jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Polyfill Imports in UmiJS\nDESCRIPTION: This snippet configures specific polyfills to be imported, providing more granular control over the polyfills included in the project. This allows for minimizing the bundle size by only including the necessary polyfills. For example, `core-js/features/promise/try` and `core-js/proposals/math-extensions` are imported.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\npolyfill: {\n  imports: ['core-js/features/promise/try', 'core-js/proposals/math-extensions'],\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Routes in UmiJS\nDESCRIPTION: This snippet showcases the `patchRoutes` function, which allows modifying the flattened route list and component mapping. Direct modification is possible, but `patchClientRoutes()` is suggested for dynamic updates.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport function patchRoutes({ routes, routeComponents }) {\n  console.log('patchRoutes', routes, routeComponents);\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Favicon Configuration\nDESCRIPTION: This HTML snippet shows how UmiJS automatically adds a favicon link to the HTML output when a favicon file is present in the `src` directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"/favicon.png\">\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Global Layout (JavaScript)\nDESCRIPTION: Illustrates the route configuration that UmiJS generates when a global layout file (`src/layouts/index.tsx`) is present along with files in the `src/pages` directory. It shows how the layout component wraps around all other pages.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { \n    path: '/', \n    component: '@/layouts/index',\n    routes: [\n      { path: '', component: '@/pages/index' },\n      { path: 'users', component: '@/pages/users' },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Nested)\nDESCRIPTION: This command generates a nested page (kingdom) located at src/pages/far/far/away/kingdom.tsx and src/pages/far/far/away/kingdom.less.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page far/far/away/kingdom\n```\n\n----------------------------------------\n\nTITLE: UmiJS Slave Application Environment Variable Configuration\nDESCRIPTION: This code snippet demonstrates how to configure a slave application using environment variables in UmiJS.  The `INITIAL_QIANKUN_SLAVE_OPTIONS` environment variable is parsed as JSON and merged with the existing Qiankun slave configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nINITIAL_QIANKUN_SLAVE_OPTIONS=\"{\\\"enable\\\":false}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Polyfill Imports in UmiJS\nDESCRIPTION: This snippet demonstrates how to configure polyfill imports in UmiJS.  By default, UmiJS includes all polyfills. This example imports only the stable features from core-js. `core-js/stable` includes the standardized and stable features.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\npolyfill: {\n  imports: ['core-js/stable'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `max` command\nDESCRIPTION: This command shows how to use `max` instead of `umi` in a Umi Max project. This example generates a Jest testing setup.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/introduce.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx max g jest\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This text snippet shows how to define environment variables in the `.env` file. These variables can be accessed within the UmiJS application to configure different aspects of the application behavior based on the environment.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPORT=8888\nCOMPRESS=none\n```\n\n----------------------------------------\n\nTITLE: TypeScript global variable declaration with imports\nDESCRIPTION: Shows how to declare a global variable in a TypeScript declaration file (`typings.d.ts`) when the file is non-global (contains import/export statements).  Requires the use of `declare global` to add the variable to the global scope.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// typings.d.ts\nimport './other.d.ts';\n\ndeclare global {\n const FOO: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @umijs/plugins for styled-components\nDESCRIPTION: This command installs the `@umijs/plugins` dependency, which is required to use styled-components with Umi. The `-D` flag indicates that it should be installed as a development dependency.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/styled-components.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i @umijs/plugins -D\n```\n\n----------------------------------------\n\nTITLE: config.json Example for Page-level Configuration\nDESCRIPTION: Example of a `config.json` file used to configure page-specific settings such as layout and title.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mpa.en-US.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layout\": \"@/layouts/bar.ts\",\n  \"title\": \"foooooo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable dark and compact themes\nDESCRIPTION: This code snippet demonstrates how to enable the dark and compact themes for Ant Design by setting the `dark` and `compact` properties to `true` within the `antd` configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/antd.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  antd: {\n    dark: true,\n    compact: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Use Routes Hook Definition Typescript\nDESCRIPTION: Defines the `useRoutes` hook, which renders routes based on a provided route configuration and an optional location. The hook returns a React element or null if no route matches.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useRoutes(\n  routes: RouteObject[],\n  location?: Partial<Location> | string;\n): React.ReactElement | null;\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using NVM\nDESCRIPTION: This snippet shows how to install a specific version of Node.js (version 18 in this case) using NVM. The `nvm install 18` command installs Node.js version 18. The `nvm use 18` command switches the active Node.js version to 18.  The `node -v` command verifies the installed Node.js version.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install 18\n$ nvm use 18\n$ node -v\nv18.10.0\n```\n\n----------------------------------------\n\nTITLE: Module Federation Plugin configuration with MFSU\nDESCRIPTION: The following MF Plugin configuration works with MFSU to allow compatibility with remote modules during development stage.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/mf.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default defineConfig({\n  mf: {\n    name: 'remoteMFName',\n    remotes: [\n      {\n        name: 'remote1',\n        entry: 'https://to.the.remote.com/remote.js',\n      },\n      {\n        aliasName: 'aliasRemote',\n        name: 'remote2',\n        entry: 'https://to.the.remote.com/remote2.js',\n      },\n    ],\n    shared: {\n      react: {\n        singleton: true,\n        eager: true,\n      },\n      'react-dom': {\n        singleton: true,\n        eager: true,\n      },\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Route API (Direct)\nDESCRIPTION: This command directly generates a route API file named 'films.ts'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$umi g api films\n```\n\n----------------------------------------\n\nTITLE: Install Tailwindcss\nDESCRIPTION: Uses the Umi generator to enable Tailwindcss in the project.  This command installs the required dependencies and generates the necessary configuration files for Tailwindcss.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx umi g tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Ignoring MFSU Cache Directory in Git\nDESCRIPTION: This line should be added to your .gitignore file. It ensures that the MFSU cache directory (.mfsu) is not committed to your Git repository, preventing unnecessary file tracking.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# .gitignore\n\n.mfsu\n```\n\n----------------------------------------\n\nTITLE: Enabling Valtio in UmiJS\nDESCRIPTION: This code snippet demonstrates how to enable Valtio within a UmiJS project by configuring the `valtio` property in the configuration file. This step is necessary to activate Valtio's functionalities.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  valtio: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Component (Interactive)\nDESCRIPTION: This command starts the interactive component generator. It prompts the user for the component name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component\n✔ Please input you component Name … foo\n```\n\n----------------------------------------\n\nTITLE: Chaining Webpack Configuration in UmiJS with JavaScript\nDESCRIPTION: This snippet demonstrates how to extend Umi's built-in webpack configuration using the `chainWebpack` option. This allows modification of the webpack configuration in a chained programming style, based on webpack-chain.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  chainWebpack(memo, args) {\n    return memo;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sub-application Lifecycle Configuration\nDESCRIPTION: This code demonstrates how to configure lifecycle hooks within a sub-application. The `qiankun` object is exported from `src/app.ts`, and the `bootstrap`, `mount`, and `unmount` functions are defined to execute custom logic at specific points in the sub-application's lifecycle.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.ts\nexport const qiankun = {\n  // 应用加载之前\n  async bootstrap(props) {\n    console.log('app1 bootstrap', props);\n  },\n  // 应用 render 之前触发\n  async mount(props) {\n    console.log('app1 mount', props);\n  },\n  // 应用卸载之后触发\n  async unmount(props) {\n    console.log('app1 unmount', props);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate Command\nDESCRIPTION: Uses the Prisma CLI to migrate the database to the schema defined in prisma/schema.prisma.  This command creates the necessary tables and columns in the database.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Database URL\nDESCRIPTION: Shows the format of the database URL obtained from PlanetScale, used for connecting Prisma to the database.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL='mysql://************:************@************.ap-southeast-2.psdb.cloud/umi-blog-example?sslaccept=strict'\n```\n\n----------------------------------------\n\nTITLE: Enable Umi Plugins and Presets via Configuration (JavaScript)\nDESCRIPTION: This demonstrates how to enable Umi plugins and presets within the Umi configuration file. The paths to the plugins and presets are specified in the `presets` and `plugins` arrays, respectively.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  presets: ['./preset/foo','bar/presets'],\n  plugins: ['./plugin', require.resolve('plugin_foo')]\n}\n```\n\n----------------------------------------\n\nTITLE: Register Method on API - TypeScript\nDESCRIPTION: Explains how to register a method on the API using `api.registerMethod`, including name and optional function (`fn`). If `fn` is not provided, it registers a registrar for `api.register`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napi.registerMethod({ name: string, fn? })\n```\n\n----------------------------------------\n\nTITLE: UmiJS Alias Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure aliases in UmiJS using the `alias` option. It maps the import 'foo' to the absolute path '/tmp/to/foo', resolving the path to the 'foo' module.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  alias: {\n    foo: require.resolve('foo'),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Runtime Options in UmiJS\nDESCRIPTION: This snippet shows how to configure the layout runtime options in UmiJS, such as defining a logout function.  The layout plugin must be enabled for this to work.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/runtime-config.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RuntimeConfig } from 'umi';\n\nexport const layout: RuntimeConfig = {\n  logout: () => {}, // do something\n};\n```\n\n----------------------------------------\n\nTITLE: Define Multilingual Content - zh-CN.ts - TypeScript\nDESCRIPTION: Defines multilingual content in a TypeScript file for the Simplified Chinese locale. It exports an object with a 'welcome' key and its corresponding translated value.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  welcome: '欢迎光临 Umi 的世界！',\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS Micro-app Component Integration with Custom Error Boundary\nDESCRIPTION: This code snippet shows how to integrate a micro-app as a component in UmiJS and specify a custom error boundary component using the `errorBoundary` prop.  The `errorBoundary` receives an `error` object and renders a custom error message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/micro-frontend.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport CustomErrorBoundary from '@/components/CustomErrorBoundary';\nimport { MicroApp } from 'umi';\n\nexport default function Page() {\n  return (\n    <MicroApp\n      name=\"app1\"\n      errorBoundary={(error) => <CustomErrorBoundary error={error} />}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Preprocessor Styles\nDESCRIPTION: This snippet demonstrates importing and using LESS, SASS, and SCSS styles in an Umi project. These are imported like normal CSS files and Umi handles the preprocessing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/styling.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/index.tsx\n\nimport './index.less';\nimport './index.sass';\nimport './index.scss';\n\nexport default function () {\n  return <div className=\"title\">Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Get intl Object with useIntl - TypeScript\nDESCRIPTION: Demonstrates how to use the `useIntl()` hook to get the `intl` object and format a message.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIntl } from 'umi';\n\nconst intl = useIntl();\nconst msg = intl.formatMessage(\n  {\n    id: 'welcome',\n  },\n  {\n    name: 'Jackson',\n  },\n);\nconsole.log(msg);\n// Hi, Jackson.\n```\n\n----------------------------------------\n\nTITLE: Setup UmiJS Project\nDESCRIPTION: This command initializes the UmiJS project, generating necessary temporary files. It's often used in the `postinstall` script of `package.json`. It prepares the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"scripts\": { \"postinstall\": \"umi setup\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Node Modules\nDESCRIPTION: Installs the required node modules for the project using npm. This is a necessary step before running any of the provided scripts.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Middleware to Webpack 4 DevServer\nDESCRIPTION: Adds MFSU's devServer middleware to webpack-dev-server for webpack 4. This middleware serves the bundled resources required by MFSU. It's necessary to iterate through the middleware provided by mfsu.getMiddlewares() and apply them using devServer.app.use(middleware).\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  devServer: {\n    // [mfsu] 2. add mfsu middleware\n    onBeforeSetupMiddleware(devServer) {\n      for (const middleware of mfsu.getMiddlewares()) {\n        devServer.app.use(middleware);\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Test: Greet Inline Snapshot\nDESCRIPTION: This test case uses Jest inline snapshot testing to verify the rendering of the `Greet` component without a name. It renders the component and creates or updates an inline snapshot directly in the test code.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// examples/test-test/components/Greet/Greet.test.tsx\ntest('renders Greet without name by inline snapshot', () => {\n  const { container } = render(<Greet />);\n\n  expect(container).toMatchInlineSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering routes with useRoutes in UmiJS\nDESCRIPTION: Demonstrates how to use the `useRoutes` hook to render routes based on a given configuration, allowing for dynamic route rendering in UmiJS applications.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\nimport { useRoutes } from \"umi\";\n\nfunction App() {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: <Dashboard />,\n      children: [\n        {\n          path: \"messages\",\n          element: <DashboardMessages />,\n        },\n        { path: \"tasks\", element: <DashboardTasks /> },\n      ],\n    },\n    { path: \"team\", element: <AboutPage /> },\n  ]);\n\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location using useLocation Hook\nDESCRIPTION: This code shows how to access the current location using the `useLocation` hook provided by Umi after upgrading to Umi 4.  It involves importing { useLocation } from 'umi'.  The location is accessed using useLocation hook.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useLocation } from 'umi';\nexport default function Page(props) {\n+    let location = useLocation();\n  return (\n    <div>\n-     { props.location }\n+     { location }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Generate Command\nDESCRIPTION: Uses the Prisma CLI to generate a Prisma client based on the schema defined in prisma/schema.prisma.  This client is used to interact with the database in the API routes.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Formatting Umi Documentation\nDESCRIPTION: This command formats the existing Umi documentation. After formatting the documentation, it is recommended to only submit the Umi documents you have written or modified.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm format:docs\n```\n\n----------------------------------------\n\nTITLE: Switching to Default Language with setLocale - TypeScript\nDESCRIPTION: Shows how to switch back to the default language by calling `setLocale()` without any arguments.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// If your default language is zh-CN\n// Then the following call has the same effect as setLocale('zh-CN')\nsetLocale();\n```\n\n----------------------------------------\n\nTITLE: Generating UmiJS Jest Configuration\nDESCRIPTION: This command generates the Jest configuration file (jest.config.ts) and updates package.json with the necessary dependencies. It also prompts the user to choose whether to use @testing-library/react for UI testing.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$umi g jest\n✔ Will you use @testing-library/react for UI testing?! … yes\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration Command\nDESCRIPTION: Command to migrate the MySQL database to the format defined in the Prisma schema.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Ejecting the UmiJS Page Template\nDESCRIPTION: This command ejects the default page template files into the `/templates/page` directory for customization.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page --eject\n```\n\n----------------------------------------\n\nTITLE: Configuring MFSU with Normal Strategy (TypeScript)\nDESCRIPTION: This code snippet shows how to configure MFSU to use the 'normal' strategy in a Umi project. This strategy analyzes dependencies at compile time.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  strategy: 'normal',\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages from Monorepo Redirect\nDESCRIPTION: This snippet demonstrates how to exclude specific packages from monorepo redirection in UmiJS. It sets the `exclude` option to `[/^@scope\\/.+/]`, preventing any packages under the `@scope` namespace from being redirected. This allows for selective control over which packages are subject to redirection.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't redirect @scope/* sub-packages\nmonorepoRedirect: {\n  exclude: [/^@scope\\/.+/],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Options in UmiJS\nDESCRIPTION: This snippet configures Vite options. By changing cacheDir you are changing where the temporary files are stored during vite builds. The developer's configuration will be merged with Vite's default configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// 更改临时文件路径到 node_modules/.bin/.vite 文件夹\nvite: {\n  cacheDir: 'node_modules/.bin/.vite',\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting UmiJS Page Templates\nDESCRIPTION: This command ejects the default page templates to the /templates/page directory in the project. This allows for customization of the page generation process.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page --eject\n```\n\n----------------------------------------\n\nTITLE: Creating a New Package\nDESCRIPTION: These commands create a new package directory and initialize package development. It uses a script to encapsulate the process, so no need to manually copy `package.json`, etc.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir packages/foo\n$ pnpm bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring srcTranspilerOptions for SWC (TypeScript)\nDESCRIPTION: This snippet configures the `srcTranspilerOptions` for the SWC transpiler in UmiJS, adding a styled-components plugin with specific options for display name and SSR. This enables advanced SWC configuration for the project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nsrcTranspilerOptions: {\n  swc: {\n    jsc: {\n      experimental: {\n        plugins: [\n          [\n            '@swc/plugin-styled-components',\n            {\n              displayName: true,\n              ssr: true,\n            },\n          ],\n        ],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Component (TypeScript/JSX)\nDESCRIPTION: This Typescript/JSX code snippet defines a basic custom layout component for UmiJS. It uses the `<Outlet />` component from UmiJS to render the nested routes within the layout.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'umi'\n\nexport default function Layout() {\n  return <Outlet />\n}\n```\n\n----------------------------------------\n\nTITLE: Listing UmiJS Plugins via Command Line\nDESCRIPTION: This command allows you to view the currently registered UmiJS plugins in your project.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.en-US.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ umi plugin list\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Component (Nested)\nDESCRIPTION: This command generates a nested component (Baz) located at src/components/group/subgroup/Baz/index.ts and src/components/group/subgroup/Baz/component.tsx.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component group/subgroup/baz\n```\n\n----------------------------------------\n\nTITLE: Basic Mock File\nDESCRIPTION: Example of a basic Mock file in UmiJS, demonstrating how to define Mock interfaces with static return values.  Each key in the default exported object corresponds to a Mock interface, and the value is the corresponding return data. This supports both array and object return types.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mock.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ./mock/users.ts\n\nexport default {\n\n  // 返回值可以是数组形式\n  'GET /api/users': [\n    { id: 1, name: 'foo' },\n    { id: 2, name: 'bar' }\n  ],\n\n  // 返回值也可以是对象形式\n  'GET /api/users/1': { id: 1, name: 'foo' },\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get MFSU dependencies list\nDESCRIPTION: This command displays the MFSU dependencies list.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/commands.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ umi mfsu ls\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in UmiJS Pages (TSX)\nDESCRIPTION: This code snippet demonstrates how to use template variables within a page template file (index.tsx.tpl).  It shows how to inject variables like name, msg, and count into the generated page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport './{{{name}}}.less'\n\nconst message = '{{{msg}}}'\nconst count = {{{count}}}\n```\n\n----------------------------------------\n\nTITLE: List Umi Plugins (Shell)\nDESCRIPTION: This command shows how to list all registered Umi plugins via the command line.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/plugins.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ umi plugin list\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS project with NPM\nDESCRIPTION: This snippet demonstrates creating a UmiJS project with npm. It utilizes npx to execute the `create-umi` package. It assumes the user selects the Simple App template and npm as the package manager.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-umi@latest\nNeed to install the following packages:\n  create-umi@latest\nOk to proceed? (y) y\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › npm\n✔ Pick Npm Registry › taobao\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy: src/assets/yay.jpg\nCopy: src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy: src/pages/docs.tsx\nCopy: src/pages/index.tsx\nWrite: tsconfig.json\nCopy: typings.d.ts\n\n> postinstall\n> umi setup\n```\n\n----------------------------------------\n\nTITLE: UmiJS Alias Configuration with Exact Match (JavaScript)\nDESCRIPTION: This snippet shows how to configure aliases with an exact match using the `$` suffix. This ensures that only imports of 'foo' are redirected to '/tmp/to/foo', while imports of 'foo/bar' remain unchanged.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  alias: {\n    foo$: '/tmp/to/foo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Icons in UmiJS\nDESCRIPTION: Using Local Icons in UmiJS.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from 'umi';\n<Icon icon=\"local:umi\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfills to UmiJS Project with Typescript\nDESCRIPTION: This code snippet demonstrates how to include a polyfill script in an UmiJS project using the `headScripts` configuration option.  It adds a reference to a polyfill hosted on a CDN.  Polyfills can enhance the robustness of legacy browsers, providing access to APIs that may not be available by default.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  headScripts: [\n    'http://polyfill.alicdn.com/v3/polyfill.min.js', // or https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js\n  ],\n  legacy: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting SOCKET_SERVER Environment Variable\nDESCRIPTION: This command sets the SOCKET_SERVER environment variable when starting the development server.  It specifies the host and port for the socket server, resolving issues with page refreshing. It's crucial for ensuring smooth communication between the client and server during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSOCKET_SERVER=http://127.0.0.1:8000 pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Generating UmiJS Dva Configuration\nDESCRIPTION: This command enables Dva support in the project by updating .umirc.ts, installing Dva, and creating an example model file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$umi g dva\n```\n\n----------------------------------------\n\nTITLE: Disabling Development Server Compression with UMI_DEV_SERVER_COMPRESS\nDESCRIPTION: This example shows how to disable the compression middleware in the Umi development server using the `UMI_DEV_SERVER_COMPRESS` environment variable. This is useful when the compression is interfering with streaming access to SSE data during development.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/env-variables.en-US.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n  UMI_DEV_SERVER_COMPRESS=none umi dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Layout for a Route (JavaScript)\nDESCRIPTION: Shows how to disable the global layout for a specific route in UmiJS using `layout: false`. This is useful for pages like login or signup where you want to control the entire page structure without any surrounding layout components.  This configuration ensures that the `Login` component occupies the entire page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  routes: [\n    // 取消 login 页面的全局布局，从而自行实现整个页面\n    { path: '/login', component: '@/pages/Login', layout: false },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested UmiJS Mock File\nDESCRIPTION: This command generates a nested mock file named 'profile.ts' within the 'users' directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock users/profile\n```\n\n----------------------------------------\n\nTITLE: Get Current Locale with getLocale - TypeScript\nDESCRIPTION: Demonstrates how to use the `getLocale()` function to retrieve the currently selected language.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.en-US.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocale } from 'umi';\n\ngetLocale();\n// zh-CN\n```\n\n----------------------------------------\n\nTITLE: Use Resolved Path Hook Example Typescript\nDESCRIPTION: Demonstrates the usage of `useResolvedPath` to resolve a path relative to the current location.  The resolved path will be a fully qualified path object containing the pathname, search, and hash.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/api.en-US.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useResolvedPath } from 'umi';\n\nconst path = useResolvedPath('docs')\n/* path\n{ pathname: '/a/new/page/docs', search: '', hash: '' }\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router Settings in UmiJS\nDESCRIPTION: This configuration shows how to configure Vue router settings through `src/app.tsx`.  The `router` export allows customizing router behavior, such as scroll behavior.  This example defines a `scrollBehavior` function that logs the `to` and `from` route objects.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.tsx\nexport const router: RouterConfig = {\n  // @ts-ignore\n  scrollBehavior(to, from) {\n    console.log('scrollBehavior', to, from);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Page (Interactive)\nDESCRIPTION: This command initiates the page generator in interactive mode. It prompts the user for the page name and file generation method.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$umi g page\n? What is the name of page? › mypage\n? How dou you want page files to be created? › - Use arrow-keys. Return to submit.\n❯   mypage/index.{tsx,less}\n    mypage.{tsx,less}\n```\n\n----------------------------------------\n\nTITLE: Build Project\nDESCRIPTION: Builds the Ant Design Pro project for production. This command will generate optimized and minified assets for deployment.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Apply Plugins with Type Declaration - TypeScript\nDESCRIPTION: Demonstrates how to use `api.applyPlugins` to execute registered hooks.  It shows the structure including key, type (optional), initialValue (optional) and args (optional). `applyPlugins` asynchronously collects hook data based on the hook order.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/plugin-api.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.applyPlugins({ key: string, type?: api.ApplyPluginsType, initialValue?: any, args?: any })\n```\n\n----------------------------------------\n\nTITLE: Installing Umi Document Dependencies\nDESCRIPTION: This command installs the dependencies required for developing Umi documentation.  Umi's documentation is implemented by Umi@4 and the `@umijs/plugin-docs` plugin.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm doc:deps\n```\n\n----------------------------------------\n\nTITLE: Generating a UmiJS Mock (Interactive)\nDESCRIPTION: This command starts the interactive Mock generator, prompting for the mock file name.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$umi g mock\n✔ please input your mock file name … auth\n```\n\n----------------------------------------\n\nTITLE: Accessing Props using useOutletContext\nDESCRIPTION: This snippet demonstrates how to use the `useOutletContext` hook to access props passed via the `context` prop of `<Outlet />`. This replaces direct access to props in functional components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/upgrade-to-umi-4.en-US.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import { useOutletContext } from 'umi';\n\n- export function Comp(props){\n+ export function Comp() {\n+   const props = useOutletContext();\n\n  return props.someProp;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dot Map (React with Ant Design Maps)\nDESCRIPTION: This React component renders a dot map using the Ant Design Maps library. It configures the map with data, map style, zoom level, and color mapping based on the 'style' field.  It also includes a legend to explain the meaning of each style.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { DotMap } from '@ant-design/maps';\n\nconst DemoDotMap: React.FC = () => {\n  // fetch data\n\n  const config = {\n    map: {\n      type: 'mapbox',\n      style: 'dark',\n      zoom: 3,\n      center: [107.4976, 32.1697],\n      pitch: 0,\n    },\n    source: {\n      data,\n      parser: {\n        type: 'json',\n        coordinates: 'lnglat',\n      },\n    },\n    size: 4,\n    color: {\n      field: 'style',\n      value: ({ style }) => {\n        if (style == 0) {\n          return '#14B4C9';\n        } else if (style == 1) {\n          return '#3771D9';\n        } else {\n          return '#B8EFE2';\n        }\n      },\n    },\n    legend: {\n      type: 'category',\n      position: 'bottomleft',\n      items: [\n        {\n          color: '#14B4C9',\n          value: 'Municipal city',\n        },\n        {\n          color: '#3771D9',\n          value: 'County-level city',\n        },\n        {\n          color: '#B8EFE2',\n          value: 'District',\n        },\n      ],\n    },\n  };\n\n  return <DotMap {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Valtio Persistent Caching with UmiJS\nDESCRIPTION: This example (marked as '待实现' - to be implemented) outlines how to implement persistent caching for Valtio state using `proxyWithPersistant` from UmiJS.  It targets local storage for persistence.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxyWithPersistant } from 'umi';\n\nconst state = proxyWithPersistant({\n  count: 0,\n}, {\n  type: 'localStorage',\n  key: 'count',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification using NoticeIcon in TSX\nDESCRIPTION: This snippet showcases the NoticeIcon component, used to display various notification types. It configures notification lists, click handlers, clear handlers, loading states and 'view more' functionality.  The example includes tabs for 'notification', 'message', and 'event' categories.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/src/components/index.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport NoticeIcon from '@/components/NoticeIcon/NoticeIcon';\nimport { message } from 'antd';\n\nexport default () => {\n  const list = [\n    {\n      id: '000000001',\n      avatar: 'https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png',\n      title: '你收到了 14 份新周报',\n      datetime: '2017-08-09',\n      type: 'notification',\n    },\n    {\n      id: '000000002',\n      avatar: 'https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png',\n      title: '你推荐的 曲妮妮 已通过第三轮面试',\n      datetime: '2017-08-08',\n      type: 'notification',\n    },\n  ];\n  return (\n    <NoticeIcon\n      count={10}\n      onItemClick={(item) => {\n        message.info(`${item.title} 被点击了`);\n      }}\n      onClear={(title: string, key: string) => message.info('点击了清空更多')}\n      loading={false}\n      clearText=\"清空\"\n      viewMoreText=\"查看更多\"\n      onViewMore={() => message.info('点击了查看更多')}\n      clearClose\n    >\n      <NoticeIcon.Tab\n        tabKey=\"notification\"\n        count={2}\n        list={list}\n        title=\"通知\"\n        emptyText=\"你已查看所有通知\"\n        showViewMore\n      />\n      <NoticeIcon.Tab\n        tabKey=\"message\"\n        count={2}\n        list={list}\n        title=\"消息\"\n        emptyText=\"您已读完所有消息\"\n        showViewMore\n      />\n      <NoticeIcon.Tab\n        tabKey=\"event\"\n        title=\"待办\"\n        emptyText=\"你已完成所有待办\"\n        count={2}\n        list={list}\n        showViewMore\n      />\n    </NoticeIcon>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Executing @umijs/codemod with pnpm\nDESCRIPTION: This command utilizes pnpm's dlx feature to download and execute the latest version of @umijs/codemod. This is typically used to apply automated code modifications to a project.\nSOURCE: https://github.com/umijs/umi/blob/master/codemod/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dlx @umijs/codemod@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a UmiJS project with Bun\nDESCRIPTION: This snippet shows how to create a new UmiJS project using `create-umi` with Bun. It demonstrates selecting the \"Simple App\" template, pnpm as the npm client, and npm as the npm registry. It requires bun version >= 0.4.0.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx create-umi\n✔ Pick Umi App Template › Simple App\n✔ Pick Npm Client › pnpm\n✔ Pick Npm Registry › npm\nWrite: .gitignore\nWrite: .npmrc\nWrite: .umirc.ts\nWrite: package.json\nCopy: src/assets/yay.jpg\nCopy: src/layouts/index.less\nWrite: src/layouts/index.tsx\nCopy: src/pages/docs.tsx\nCopy: src/pages/index.tsx\nWrite: tsconfig.json\nCopy: typings.d.ts\nready - Git initialized successfully\n```\n\n----------------------------------------\n\nTITLE: Member Data Example (TypeScript)\nDESCRIPTION: Defines sample data arrays containing real names, nicknames, emails, and phone numbers for members, used to populate the Pro Table.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst realNames = ['Ma Baba', 'Zhang Sanfeng', 'Fei Peng', 'Xu Changqing'];\nconst nickNames = ['Baba', 'Junbao', 'Jingtian', 'Mr. Xu'];\nconst emails = ['baba@antfin.com', 'junbao@antfin.com', 'jingtian@antfin.com', 'xvzhangmen@antfin.com'];\nconst phones = ['18800001234', '13900002345', '17200003456', '17800004567'];\n```\n\n----------------------------------------\n\nTITLE: Legacy Build Configuration in UmiJS\nDESCRIPTION: This snippet shows how to configure UmiJS for legacy browser support. It uses non-modern build tools which will significantly increase your build time.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.en-US.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nlegacy: {}\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: Checks the code style of the project using a linter. This helps to maintain code quality and consistency.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: String Uppercasing with Lodash in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the lodash library to convert a string to uppercase in TypeScript. The `format` function imports the `uppercase` function from lodash and applies it to the input string. It requires lodash as a dependency.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/mfsu-e2e/src/utils/format.ts.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport uppercase from 'lodash.uppercase';\n\nexport function format(a: string): string {\n  return uppercase(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Middleware (Webpack 4)\nDESCRIPTION: This code adds MFSU's devServer middleware to webpack-dev-server. This middleware provides the bundled resources required by MFSU. It applies specifically to Webpack 4 using `onBeforeSetupMiddleware`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  devServer: {\n    // [mfsu] 2. add mfsu middleware\n    onBeforeSetupMiddleware(devServer) {\n      for (const middleware of mfsu.getMiddlewares()) {\n        devServer.app.use(middleware);\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Start Project\nDESCRIPTION: Starts the Ant Design Pro project. This command will likely start a development server and open the application in a web browser.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/antd-pro-create/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Valtio Actions and Async Actions with UmiJS\nDESCRIPTION: This snippet demonstrates defining actions to modify Valtio state. It shows two ways: including actions within the proxy object or defining them separately. It also includes an example of an asynchronous action.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/valtio.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { proxy } from 'umi';\n\n// 方法一：放一起\nconst state = proxy({\n  count: 0,\n  actions: {\n\t  add() {\n\t    // 注意这里别用 this.count，基于 snap 调用时会报错\n\t    state.count += 1;\n\t  },\n  }\n});\n// 方法二：分开放\nconst state = proxy({ count: 0 });\nconst actions = {\n  add() {\n    state.count += 1;\n  },\n  // 异步 action\n  async addAsync() {\n    state.count += await fetch('/api/add');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Layout for a Route (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable the global layout for a specific route using the `layout: false` configuration option. This is useful for pages like login pages where a custom layout is desired.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.en-US.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  routes: [\n    // Disable the global layout for the login page, allowing you to implement the entire page\n    { path: '/login', component: '@/pages/Login', layout: false },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Directory Structure\nDESCRIPTION: Shows the updated directory structure after moving the assets, layouts, and pages directories into the src directory, preparing the project for API route implementation.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── src\n│   ├── assets\n│   │    └── yay.jpg\n│   ├── layouts\n│   │    ├── index.less\n│   │    └── index.tsx\n│   └──── pages\n│        ├── docs.tsx\n│        └── index.tsx\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Defaults (TypeScript)\nDESCRIPTION: These snippets demonstrate how to define internationalized content with default values using TypeScript. This provides a fallback mechanism when a translation is missing for a specific locale.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/i18n.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/zh-CN.ts\nexport default {\n  table: {\n    submit: '提交表单',\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/locales/en-US.ts\nexport default {\n  // table: {\n  //   submit: 'SUBMIT TABLE',\n  // },\n};\n```\n\n----------------------------------------\n\nTITLE: UmiJS cssMinifier Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the CSS minifier. It sets the `cssMinifier` option to `esbuild` to use esbuild for CSS minification.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  cssMinifier: 'esbuild'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Charts Package\nDESCRIPTION: This command installs the complete Ant Design Charts package as a dependency for your project, allowing you to use its various charting components.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/charts\n```\n\n----------------------------------------\n\nTITLE: Using Default UmiJS Component Template (Fallback)\nDESCRIPTION: This command forces the use of the default component template, ignoring any custom templates.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/generator.en-US.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$umi g component foo --fallback\n```\n\n----------------------------------------\n\nTITLE: Using HeaderDropdown Component in React/TSX\nDESCRIPTION: This code snippet shows how to use the HeaderDropdown component, a wrapper around Ant Design's Dropdown component, with added mobile support. It creates a menu with items like 'Personal Center,' 'Settings,' and 'Logout'. The menu is then passed to the HeaderDropdown component, triggered by hovering over a button.\nSOURCE: https://github.com/umijs/umi/blob/master/examples/ant-design-pro/src/components/index.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * background: '#f0f2f5'\n */\nimport { Button, Menu } from 'antd';\nimport React from 'react';\nimport HeaderDropdown from '@/components/HeaderDropdown';\n\nexport default () => {\n  const menuHeaderDropdown = (\n    <Menu selectedKeys={[]}>\n      <Menu.Item key=\"center\">个人中心</Menu.Item>\n      <Menu.Item key=\"settings\">个人设置</Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\">退出登录</Menu.Item>\n    </Menu>\n  );\n  return (\n    <HeaderDropdown overlay={menuHeaderDropdown}>\n      <Button>hover 展示菜单</Button>\n    </HeaderDropdown>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Including Package for Babel Processing\nDESCRIPTION: This configuration adds a package name to the extraBabelIncludes array.  It ensures that the specified package is processed by Babel, allowing for the use of CSS modules within the package's source code. This is particularly important when the package's product is Javascript.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  extraBabelIncludes: ['your-pkg-name']\n}\n```\n\n----------------------------------------\n\nTITLE: New Directory Structure with Pages\nDESCRIPTION: Illustrates the updated directory structure after generating the login, post, and create pages, showing the location of the newly created files within the src directory.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsrc\n├── assets\n│     └── yay.jpg\n├── layouts\n│     ├── index.less\n│     └── index.tsx\n└── pages\n    ├── index.less\n    ├── index.tsx\n    ├── login.less\n    ├── login.tsx\n    └── posts\n        ├── create.less\n        ├── create.tsx\n        ├── post.less\n        └── post.tsx\n```\n\n----------------------------------------\n\nTITLE: Umi Project Directory Structure\nDESCRIPTION: This bash snippet represents the recommended directory structure for an UmiJS project, showing the location of configuration files, source code directories, and other project-related files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── config\n│   └── config.ts\n├── dist\n├── mock\n│   └── app.ts｜tsx\n├── src\n│   ├── .umi\n│   ├── .umi-production\n│   ├── layouts\n│   │   ├── BasicLayout.tsx\n│   │   ├── index.less\n│   ├── models\n│   │   ├── global.ts\n│   │   └── index.ts\n│   ├── pages\n│   │   ├── index.less\n│   │   └── index.tsx\n│   ├── utils // 推荐目录\n│   │   └── index.ts\n│   ├── services // 推荐目录\n│   │   └── api.ts\n│   ├── app.(ts|tsx)\n│   ├── global.ts\n│   ├── global.(css|less|sass|scss)\n│   ├── overrides.(css|less|sass|scss)\n│   ├── favicon.(ico|gif|png|jpg|jpeg|svg|avif|webp)\n│   └── loading.(tsx|jsx)\n├── node_modules\n│   └── .cache\n│       ├── bundler-webpack\n│       ├── mfsu\n│       └── mfsu-deps\n├── .env\n├── plugin.ts \n├── .umirc.ts // 与 config/config 文件 2 选一\n├── package.json\n├── tsconfig.json\n└── typings.d.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Preset for UmiJS\nDESCRIPTION: This command installs the @umijs/preset-vue package as a development dependency.  This preset enables Vue.js support in an UmiJS project. It's a prerequisite for using Vue components and features within Umi.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/use-vue.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @umijs/preset-vue -D\n```\n\n----------------------------------------\n\nTITLE: Building UmiJS project for deployment\nDESCRIPTION: This snippet shows how to build an UmiJS project for deployment. The `pnpm build` command compiles the project and generates the production-ready files in the `./dist` directory. The dist directory contains the index.html, umi.css and umi.js files.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/getting-started.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> umi build\nevent - compiled successfully in 1179 ms (567 modules)\nevent - build index.html\n```\n\n----------------------------------------\n\nTITLE: Defining Member Type in TypeScript\nDESCRIPTION: This TypeScript code defines an interface named `Member` that specifies the structure of a member object, including properties such as `id`, `realName`, `nickName`, `email`, and `phone`.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Member = {\n  id: number;\n  realName: string;\n  nickName: string;\n  email: string;\n  phone: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Reducer Example: Deeply Nested Data (Avoid) in DvaJS\nDESCRIPTION: This code shows an example of a deeply nested state structure in a Dva reducer, which is discouraged due to increased complexity and maintainability issues. Updating deeply nested states requires careful handling of immutability.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/dva.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.model({\n  namespace: 'app',\n  state: {\n    a: {\n      b: {\n        todos: [],\n        loading: false,\n      },\n    },\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.a.b.todos.concat(todo);\n      const b = { ...state.a.b, todos };\n      const a = { ...state.a, b };\n      return { ...state, a };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Word Cloud Data Example (JSON)\nDESCRIPTION: Illustrates the JSON data structure for the word cloud, with fields for 'country', 'value' (population), and 'category'.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"country\": \"China\",\n  \"value\": 1383220000,\n  \"category\": \"asia\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Maps\nDESCRIPTION: Installs the Ant Design Maps package, which provides components for creating various types of maps.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/maps\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for @umijs/max Project (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure Jest in an @umijs/max project using `configUmiAlias` and `createConfig` from the `@umijs/max/test` module. It configures Jest with browser target, esbuild transformer, and JSX settings. Similar to the Umi project configuration, it provides override capabilities for Jest settings.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/test.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, configUmiAlias, createConfig } from '@umijs/max/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // Override the default Jest configuration of Umi, such as\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies\nDESCRIPTION: This command builds dependencies using `pnpm build:deps`. Since Umi pre-packages some dependencies, after updating dependencies, it's necessary to check if the updated dependency is in devDependencies and whether it has been pre-packaged.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/contributing.en-US.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build:deps --dep webpack-manifest-plugin\n```\n\n----------------------------------------\n\nTITLE: Sharing React Instance with MFSU in UmiJS (TypeScript)\nDESCRIPTION: This configuration prevents multiple instances of React at runtime. By defining React as a shared dependency with the `singleton: true` option, MFSU ensures that only one instance of React is used throughout the application. This resolves conflicts and errors caused by multiple React contexts. This is needed in complex scenarios where React's code is packaged multiple times.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/mfsu.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmfsu: {\n  shared: {\n    react: {\n      singleton: true,\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Member Type Definition (TypeScript)\nDESCRIPTION: Defines the `Member` type with properties like `id`, `realName`, `nickName`, `email`, and `phone` to represent the structure of member data.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/max/charts.en-US.md#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nexport type Member = {\n  id: number;\n  realName: string;\n  nickName: string;\n  email: string;\n  phone: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding MFSU Babel Plugins\nDESCRIPTION: Configures the babel-loader to use MFSU's babel plugins. These plugins collect and transform dependency import paths, replacing them with MFSU's module federation address. This is a common approach for integrating MFSU.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/mfsu-independent-usage.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  module: {\n    rules: [\n      // handle javascript source loader\n      {\n        test: /\\.[jt]sx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              // [mfsu] 3. add mfsu babel plugins\n              ...mfsu.getBabelPlugins(),\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JS/CSS Minifier Encoding\nDESCRIPTION: Configures the JavaScript and CSS minifiers to use UTF-8 encoding to prevent character conversion issues during compression. This ensures that Chinese characters are properly encoded and the output size isn't increased.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/introduce/faq.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\nexport default {\n  jsMinifierOptions: { charset: 'utf8' },\n  cssMinifierOptions: { charset: 'utf8' }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Icons with Auto-Installation in UmiJS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to enable the icons feature in UmiJS with automatic installation of icon libraries. By setting `icons: { autoInstall: {} }`, Umi will automatically install the necessary icon packages based on the icons used in your components. Users can then use the <Icon> component to import icons, specifying the `collect:icon` format. Please note that tnpm/cnpm clients may not automatically install icons.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nicons: { autoInstall: {} },\n```\n\n----------------------------------------\n\nTITLE: Generate Pages with Umi\nDESCRIPTION: Uses Umi's generator to automatically create the initial page components: login.tsx, posts/post.tsx and posts/create.tsx.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/develop-blog-using-umi.en-US.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx umi g page login posts/post posts/create\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication HOC to Page (JSX)\nDESCRIPTION: Applies the `withAuth` higher-order component to a page in UmiJS. This demonstrates how to wrap a specific page component with the authentication logic to protect it. The `TheOldPage` component will only be rendered if the user is authenticated; otherwise, they will be redirected to the `/login` page.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/guides/routes.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/user.tsx\n\nconst TheOldPage = ()=>{\n  // ...\n}\n\nexport default withAuth(TheOldPage)\n```\n\n----------------------------------------\n\nTITLE: Skipping Pre-rendering with exportStatic (TypeScript)\nDESCRIPTION: This snippet illustrates how to disable pre-rendering for specific routes when using `exportStatic` with SSR in UmiJS.  By setting `prerender: false` within the `extraRoutePaths` configuration, the specified route will be skipped during the pre-rendering process, while still generating the static HTML file.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/docs/api/config.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// .umirc.ts\nexport default {\n  exportStatic: {\n    // 输出额外页面文件但跳过预渲染\n    extraRoutePaths: [{ path: '/news/1', prerender: false }],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Mode in UmiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable legacy mode in UmiJS to build降级产物 for older browsers like IE.  It will try to build output that is compatible with IE based on the `targets` configuration.\nSOURCE: https://github.com/umijs/umi/blob/master/docs/docs/blog/legacy-browser.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .umirc.ts\n\nexport default {\n  legacy: {},\n};\n```"
  }
]