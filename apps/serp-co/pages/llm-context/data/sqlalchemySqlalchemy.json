[
  {
    "owner": "sqlalchemy",
    "repo": "sqlalchemy",
    "content": "TITLE: Declaring Models with SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to declare models using SQLAlchemy's Declarative Mapping. It defines two classes, User and Address, which represent database tables. The code uses Mapped and mapped_column to define columns and their types, including primary keys, foreign keys, and relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import String\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", cascade=\"all, delete-orphan\"\n...     )\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Engine in Python with SQLAlchemy\nDESCRIPTION: Demonstrates how to create an Engine instance for a PostgreSQL database using SQLAlchemy's create_engine function. This example uses the default psycopg2 driver.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Declarative Base Class\nDESCRIPTION: Shows the basic setup of a Declarative Base class by subclassing DeclarativeBase, which is the foundation for creating mapped classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating SQLAlchemy Engine with In-Memory SQLite\nDESCRIPTION: Initializes a SQLAlchemy database engine for an in-memory SQLite database using create_engine(). Enables SQL logging for debugging and demonstrates basic engine configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/engine.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\n```\n\n----------------------------------------\n\nTITLE: Committing ORM Transactions in SQLAlchemy\nDESCRIPTION: This snippet shows how to commit transactions with ORM objects, detailing the automatic handling of INSERT operations and foreign key assignments. It requires a configured session and setup tables with proper foreign key constraints. Outputs include the persistence of primary keys post-commit.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_3\n\nLANGUAGE: pycon+sql\nCODE:\n```\n\n  >>> session.commit()\n  {execsql}INSERT INTO user_account (name, fullname) VALUES (?, ?)\n  [...] ('pkrabs', 'Pearl Krabs')\n  INSERT INTO address (email_address, user_id) VALUES (?, ?) RETURNING id\n  [... (insertmanyvalues) 1/2 (ordered; batch not supported)] ('pearl.krabs@gmail.com', 6)\n  INSERT INTO address (email_address, user_id) VALUES (?, ?) RETURNING id\n  [insertmanyvalues 2/2 (ordered; batch not supported)] ('pearl@aol.com', 6)\n  COMMIT\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statements in SQLAlchemy 2.0\nDESCRIPTION: Shows the updated execution patterns for SQL statements in SQLAlchemy 2.0, including proper handling of text SQL and parameter binding. The new patterns emphasize explicit text() usage and dictionary-based parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nconnection = engine.connect()\n\nfrom sqlalchemy import text\n\nresult = connection.execute(text(\"select * from table\"))\n\n# pass a single dictionary for single statement execution\nresult = connection.execute(table.insert(), {\"x\": 10, \"y\": 5})\n\n# pass a list of dictionaries for executemany\nresult = connection.execute(\n    table.insert(), [{\"x\": 10, \"y\": 5}, {\"x\": 15, \"y\": 12}, {\"x\": 9, \"y\": 8}]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Future-Style Engine Connection with Explicit Commit\nDESCRIPTION: Demonstrates the new 'commit-as-you-go' pattern for database connections in SQLAlchemy 2.0. This approach uses explicit commit calls rather than relying on autocommit behavior, with a connection obtained from the engine being used as a context manager.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+psycopg2:///\")\n\nwith engine.connect() as conn:\n    conn.execute(text(\"insert into table (x) values (:some_x)\"), {\"some_x\": 10})\n\n    conn.commit()  # commit as you go\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Relationship with Association Table in SQLAlchemy\nDESCRIPTION: This example demonstrates how to set up a many-to-many relationship using an association table in SQLAlchemy ORM. It shows the creation of the association table and its use in the relationship function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\")),\n    Column(\"right_id\", ForeignKey(\"right_table.id\")),\n)\n\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(secondary=association_table)\n\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Basic SQLAlchemy ORM Model Definition\nDESCRIPTION: Initial implementation of User and Address models using basic SQLAlchemy ORM declarations without type hints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(30), nullable=False)\n    fullname = mapped_column(String)\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email_address = mapped_column(String, nullable=False)\n    user_id = mapped_column(ForeignKey(\"user_account.id\"), nullable=False)\n    user = relationship(\"User\", back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: SELECT with JOIN in SQLAlchemy ORM\nDESCRIPTION: Shows how to perform a JOIN operation between User and Address tables, filtering with multiple WHERE conditions using equality comparisons.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(Address)\n    .join(Address.user)\n    .where(User.name == \"sandy\")\n    .where(Address.email_address == \"sandy@sqlalchemy.org\")\n)\nsandy_address = session.scalars(stmt).one()\n```\n\n----------------------------------------\n\nTITLE: Proper Session Error Handling Pattern in SQLAlchemy\nDESCRIPTION: This code snippet demonstrates the recommended pattern for handling errors in SQLAlchemy sessions. It shows a try-except-finally block that properly commits successful transactions, rolls back on errors, and ensures the session is closed regardless of the outcome.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    # <use session>\n    session.commit()\nexcept:\n    session.rollback()\n    raise\nfinally:\n    session.close()  # optional, depends on use case\n```\n\n----------------------------------------\n\nTITLE: Creating a Declarative Base for ORM Mapping\nDESCRIPTION: Shows how to establish a Declarative Base class that serves as the foundation for ORM mapped classes. This Base class provides access to the metadata collection and registry that coordinate ORM mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> class Base(DeclarativeBase):\n...     pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Connections in SQLAlchemy 2.0\nDESCRIPTION: Demonstrates the recommended patterns for executing statements with explicit connections and transaction control in SQLAlchemy 2.0. Shows different approaches including 'begin once' and 'commit as you go' patterns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# \"begin once\" - one transaction only per checkout\nwith engine.begin() as conn:\n    result = conn.execute(stmt)\n\n# \"commit as you go\" - zero or more commits per checkout\nwith engine.connect() as conn:\n    result = conn.execute(stmt)\n    conn.commit()\n\n# \"commit as you go\" but with a transaction block instead of autobegin\nwith engine.connect() as conn:\n    with conn.begin():\n        result = conn.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship with Association Proxy in SQLAlchemy\nDESCRIPTION: This snippet defines a many-to-many relationship between `User` and `Keyword` classes using SQLAlchemy's `association_proxy`.  It sets up the `User` class with a `keywords` attribute that proxies access to the `keyword` attribute of the related `Keyword` objects through the intermediate `user_keyword_table`. The `association_proxy` simplifies access and modification of the keywords associated with a user.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Final\nfrom typing import List\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n    kw: Mapped[List[Keyword]] = relationship(secondary=lambda: user_keyword_table)\n\n    def __init__(self, name: str):\n        self.name = name\n\n    # proxy the 'keyword' attribute from the 'kw' relationship\n    keywords: AssociationProxy[List[str]] = association_proxy(\"kw\", \"keyword\")\n\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n\nuser_keyword_table: Final[Table] = Table(\n    \"user_keyword\",\n    Base.metadata,\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\"), primary_key=True),\n    Column(\"keyword_id\", Integer, ForeignKey(\"keyword.id\"), primary_key=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Schema with SQLAlchemy Metadata\nDESCRIPTION: This snippet shows how to use SQLAlchemy's metadata to generate the database schema. It calls the create_all method on the Base.metadata object, passing in the engine. This creates the tables defined in the declarative models in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Base.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Using Selectin Load Strategy in SQLAlchemy Queries\nDESCRIPTION: Demonstrates the selectinload strategy to optimize loading of collections and avoid the N+1 query problem by loading related objects with a separate optimized query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\n>>> for row in session.execute(stmt):\n...     print(\n...         f\"{row.User.name}  ({', '.join(a.email_address for a in row.User.addresses)})\"\n...     )\n{execsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account ORDER BY user_account.id\n[...] ()\nSELECT address.user_id AS address_user_id, address.id AS address_id,\naddress.email_address AS address_email_address\nFROM address\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from SQLAlchemy Session\nDESCRIPTION: Example of marking objects for deletion using Session.delete() and committing the changes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# mark two objects to be deleted\nsession.delete(obj1)\nsession.delete(obj2)\n\n# commit (or flush)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Selecting ORM Entities Using SQLAlchemy in Python\nDESCRIPTION: This snippet shows how to construct a SELECT statement using SQLAlchemy's select function to select from an ORM entity and order the result. It requires an ORM session to execute and returns ORM entity instances. Dependencies include SQLAlchemy's select function and ORM session object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nresult = session.execute(select(User).order_by(User.id))\nresult.all()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Dataclass with Mixin\nDESCRIPTION: Illustrates how to use mixins with SQLAlchemy ORM dataclasses. The mixin class must also be a MappedAsDataclass to ensure proper integration with dataclass features.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Mixin(MappedAsDataclass):\n    create_user: Mapped[int] = mapped_column()\n    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)\n\n\nclass Base(DeclarativeBase, MappedAsDataclass):\n    pass\n\n\nclass User(Base, Mixin):\n    __tablename__ = \"sys_user\"\n\n    uid: Mapped[str] = mapped_column(\n        String(50), init=False, default_factory=uuid4, primary_key=True\n    )\n    username: Mapped[str] = mapped_column()\n    email: Mapped[str] = mapped_column()\n```\n\n----------------------------------------\n\nTITLE: Defining Check Constraints in SQLAlchemy\nDESCRIPTION: This example demonstrates how to create check constraints in SQLAlchemy at both the column and table level. It includes the SQL output for table creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import CheckConstraint\n\nmetadata_obj = MetaData()\nmytable = Table(\n    \"mytable\",\n    metadata_obj,\n    # per-column CHECK constraint\n    Column(\"col1\", Integer, CheckConstraint(\"col1>5\")),\n    Column(\"col2\", Integer),\n    Column(\"col3\", Integer),\n    # table level CHECK constraint.  'name' is optional.\n    CheckConstraint(\"col2 > col3 + 5\", name=\"check1\"),\n)\n\nmytable.create(engine)\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n    col1 INTEGER  CHECK (col1>5),\n    col2 INTEGER,\n    col3 INTEGER,\n    CONSTRAINT check1  CHECK (col2 > col3 + 5)\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Association Proxy Creation with Lambda in SQLAlchemy\nDESCRIPTION: This snippet shows how to customize the creation of new `Keyword` instances when using `association_proxy`. The `creator` argument of `association_proxy` is used with a lambda function to explicitly call the `Keyword` constructor with the `keyword` argument.  This is useful when the constructor's argument name differs from the proxied attribute name or when additional logic is needed during object creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    ...\n\n    # use Keyword(keyword=kw) on append() events\n    keywords: AssociationProxy[List[str]] = association_proxy(\n        \"kw\", \"keyword\", creator=lambda kw: Keyword(keyword=kw)\n    )\n```\n\n----------------------------------------\n\nTITLE: Classic Declarative Mapping without Annotations\nDESCRIPTION: Shows the classic form of Declarative mapping without annotations, where relationship() requires all parameters to be passed directly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```\n\n----------------------------------------\n\nTITLE: Executing INSERT statements with multiple parameter sets\nDESCRIPTION: This snippet shows how to execute an INSERT statement with multiple sets of parameters using the `executemany` functionality. A list of dictionaries is passed to the `execute` method, where each dictionary represents a row to be inserted.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    >>> with engine.connect() as conn:\n    ...     result = conn.execute(\n    ...         insert(user_table),\n    ...         [\n    ...             {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n    ...             {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n    ...         ],\n    ...     )\n    ...     conn.commit()\n    {execsql}BEGIN (implicit)\n    INSERT INTO user_account (name, fullname) VALUES (?, ?)\n    [...] [('sandy', 'Sandy Cheeks'), ('patrick', 'Patrick Star')]\n    COMMIT{stop}\n\n```\n\n----------------------------------------\n\nTITLE: Declarative Table Mapping with SQLAlchemy\nDESCRIPTION: This code snippet demonstrates the declarative mapping style in SQLAlchemy, where a base class (Base) is created using DeclarativeBase.  A User class inherits from this base and defines its table schema using mapped_column and type annotations. This allows SQLAlchemy to automatically construct a Table object and map it to the User class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\n# declarative base class\nclass Base(DeclarativeBase):\n    pass\n\n\n# an example mapping using the base\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(String(30))\n    nickname: Mapped[Optional[str]]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Multiple Tables\nDESCRIPTION: Complete example showing how to create multiple related tables and execute their creation in a SQLite database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///:memory:\")\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String(16), nullable=False),\n    Column(\"email_address\", String(60), key=\"email\"),\n    Column(\"nickname\", String(50), nullable=False),\n)\n\nuser_prefs = Table(\n    \"user_prefs\",\n    metadata_obj,\n    Column(\"pref_id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.user_id\"), nullable=False),\n    Column(\"pref_name\", String(40), nullable=False),\n    Column(\"pref_value\", String(100)),\n)\n\nmetadata_obj.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern: External Session Management with Context Managers in SQLAlchemy\nDESCRIPTION: This code demonstrates the recommended pattern for Session management where the Session lifecycle is kept separate and external from the business logic. It uses context managers to automatically handle Session scope and transaction management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n### this is a **better** (but not the only) way to do it ###\n\n\nclass ThingOne:\n    def go(self, session):\n        session.execute(update(FooBar).values(x=5))\n\n\nclass ThingTwo:\n    def go(self, session):\n        session.execute(update(Widget).values(q=18))\n\n\ndef run_my_program():\n    with Session() as session:\n        with session.begin():\n            ThingOne().go(session)\n            ThingTwo().go(session)\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting Objects with SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to create instances of the User and Address classes and persist them to the database using a Session. It shows how to add multiple objects at once using session.add_all and commit the transaction using session.commit. The session manages the connection to the database and ensures that changes are flushed and committed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import Session\n\n>>> with Session(engine) as session:\n...     spongebob = User(\n...         name=\"spongebob\",\n...         fullname=\"Spongebob Squarepants\",\n...         addresses=[Address(email_address=\"spongebob@sqlalchemy.org\")],\n...     )\n...     sandy = User(\n...         name=\"sandy\",\n...         fullname=\"Sandy Cheeks\",\n...         addresses=[\n...             Address(email_address=\"sandy@sqlalchemy.org\"),\n...             Address(email_address=\"sandy@squirrelpower.org\"),\n...         ],\n...     )\n...     patrick = User(name=\"patrick\", fullname=\"Patrick Star\")\n...\n...     session.add_all([spongebob, sandy, patrick])\n...\n...     session.commit()\n```\n\n----------------------------------------\n\nTITLE: Runtime Inspection of SQLAlchemy Mapped Classes\nDESCRIPTION: Example showing how to use SQLAlchemy's inspect function to examine mapper and table information from mapped classes at runtime. Demonstrates various inspection approaches and attribute access.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import inspect\n>>> insp = inspect(User)\n>>> insp.columns\n<sqlalchemy.util._collections.OrderedProperties object at 0x102f407f8>\n>>> list(insp.columns)\n[Column('id', Integer(), table=<user>, primary_key=True, nullable=False), Column('name', String(length=50), table=<user>), Column('fullname', String(length=50), table=<user>), Column('nickname', String(length=50), table=<user>)]\n>>> insp.columns.name\nColumn('name', String(length=50), table=<user>)\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy ORM Declarative Mapping with Relationships and Properties\nDESCRIPTION: Example showing a declarative table mapping between User and Address classes with relationships, column properties, and deferred loading. Demonstrates typed annotations, foreign keys, and column property expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    firstname: Mapped[str] = mapped_column(String(50))\n    lastname: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[str] = column_property(firstname + \" \" + lastname)\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n    address_statistics: Mapped[Optional[str]] = mapped_column(Text, deferred=True)\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Executing an INSERT statement with SQLAlchemy Core\nDESCRIPTION: This code shows how to execute an INSERT statement using a connection object. The `execute` method is called with the INSERT statement, and the transaction is committed. The SQL log will show the INSERT statement and the bound parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    >>> with engine.connect() as conn:\n    ...     result = conn.execute(stmt)\n    ...     conn.commit()\n    {execsql}BEGIN (implicit)\n    INSERT INTO user_account (name, fullname) VALUES (?, ?)\n    [...] ('spongebob', 'Spongebob Squarepants')\n    COMMIT\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SQLAlchemy Session with Engine\nDESCRIPTION: Demonstrates how to create and use a basic SQLAlchemy Session with an Engine instance for database connectivity. Shows basic session operations including adding objects and committing transactions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import Session\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# create session and add objects\nwith Session(engine) as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries with ORM Entities in SQLAlchemy\nDESCRIPTION: Demonstrates creating subqueries from ORM entities and linking them back using aliased() for complex querying scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninner_stmt = select(User).where(User.id < 7).order_by(User.id)\nsubq = inner_stmt.subquery()\naliased_user = aliased(User, subq)\nstmt = select(aliased_user)\n```\n\n----------------------------------------\n\nTITLE: Creating Table Definition with Columns\nDESCRIPTION: Demonstrates how to define a table with multiple columns including primary key and constraints using SQLAlchemy Table and Column objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String(16), nullable=False),\n    Column(\"email_address\", String(60)),\n    Column(\"nickname\", String(50), nullable=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionMaker Factory\nDESCRIPTION: Shows how to use sessionmaker to create a session factory with fixed configuration, enabling consistent session creation throughout an application.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources, typically in module scope\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() without needing to pass the\n# engine each time\nwith Session() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Stringifying an INSERT statement in SQLAlchemy Core\nDESCRIPTION: This snippet shows how to stringify an `Insert` object to view the generated SQL statement. The `print` function is used to display the SQL, which includes placeholders for the bound parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    >>> print(stmt)\n    {printsql}INSERT INTO user_account (name, fullname) VALUES (:name, :fullname)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Mapper Options with __mapper_args__\nDESCRIPTION: Examples showing how to configure mapper-level options using __mapper_args__ including primary key configuration, version ID columns, and single table inheritance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass GroupUsers(Base):\n    __tablename__ = \"group_users\"\n\n    user_id = mapped_column(String(40))\n    group_id = mapped_column(String(40))\n\n    __mapper_args__ = {\"primary_key\": [user_id, group_id]}\n\nfrom datetime import datetime\n\n\nclass Widget(Base):\n    __tablename__ = \"widgets\"\n\n    id = mapped_column(Integer, primary_key=True)\n    timestamp = mapped_column(DateTime, nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": timestamp,\n        \"version_id_generator\": lambda v: datetime.now(),\n    }\n\nclass Person(Base):\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = dict(\n        polymorphic_on=type,\n        polymorphic_identity=\"person\",\n    )\n\n\nclass Employee(Person):\n    __mapper_args__ = dict(\n        polymorphic_identity=\"employee\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships with SQLAlchemy ORM in Python\nDESCRIPTION: This snippet demonstrates how to define one-to-many and many-to-one relationships between User and Address classes using SQLAlchemy ORM's relationship construct. Prerequisites include importing the Base class and the relationship function from the sqlalchemy.orm module. The snippet shows example usage of back_populates and Mapped for type indication.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import relationship\n\n\n    class User(Base):\n        __tablename__ = \"user_account\"\n\n        # ... mapped_column() mappings\n\n        addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n\n    class Address(Base):\n        __tablename__ = \"address\"\n\n        # ... mapped_column() mappings\n\n        user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Clause with Upsert Statements in SQLAlchemy ORM\nDESCRIPTION: Shows how to use the RETURNING clause with upsert statements to retrieve inserted or updated rows as ORM objects. The example demonstrates retrieving User objects and using the populate_existing execution option to refresh existing objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresult = session.scalars(\n    stmt.returning(User), execution_options={\"populate_existing\": True}\n)\nprint(result.all())\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with ORM Relationships in SQLAlchemy\nDESCRIPTION: Demonstrates joining User and Address tables using ORM relationship attributes and select_from(). Shows equivalent raw join construction using Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(Address).select_from(User).join(Address.user).where(User.name == \"sandy\")\n\nfrom sqlalchemy.sql import join\n\nuser_table = User.__table__\naddress_table = Address.__table__\n\nj = address_table.join(user_table, user_table.c.id == address_table.c.user_id)\nstmt = (\n    select(address_table)\n    .select_from(user_table)\n    .select_from(j)\n    .where(user_table.c.name == \"sandy\")\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Transaction Block\nDESCRIPTION: Shows how to properly frame a session transaction with explicit begin/commit/rollback handling using try/except blocks for error management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# verbose version of what a context manager will do\nwith Session(engine) as session:\n    session.begin()\n    try:\n        session.add(some_object)\n        session.add(some_other_object)\n    except:\n        session.rollback()\n        raise\n    else:\n        session.commit()\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping with SQLAlchemy\nDESCRIPTION: This code demonstrates the imperative mapping style using registry.map_imperatively. It first creates a Table object using SQLAlchemy Core and then maps it to the User class using mapper_registry.map_imperatively. This approach offers more control over the mapping process compared to the declarative style.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\n\nclass User:\n    pass\n\n\nmapper_registry.map_imperatively(User, user_table)\n```\n\n----------------------------------------\n\nTITLE: Simple Relationship Join with SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates a simple join between two entities, `User` and `Address`, using the `User.addresses` relationship. The `join` method infers the ON clause from the relationship, creating an SQL JOIN based on the foreign key relationship between the tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(User.addresses)\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship using Set Collection in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use a set instead of a list for the Parent.children collection in a one-to-many relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(back_populates=\"parent\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Models with Mapped Types\nDESCRIPTION: Enhanced version using SQLAlchemy's Mapped type system for strict typing support, including Optional types and List relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom typing import Optional\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(30), nullable=False)\n    fullname: Mapped[Optional[str]] = mapped_column(String)\n    addresses: Mapped[List[\"Address\"]] = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email_address: Mapped[str] = mapped_column(String, nullable=False)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"), nullable=False)\n    user: Mapped[\"User\"] = relationship(\"User\", back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Foreign Conditions in SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to create a join condition without schema-level foreign keys using primaryjoin, foreign_keys, and remote_side parameters in a SQLAlchemy ORM relationship. It shows a self-referential relationship in a HostEntry class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import cast, String, Column, Integer\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.dialects.postgresql import INET\n\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass HostEntry(Base):\n    __tablename__ = \"host_entry\"\n\n    id = mapped_column(Integer, primary_key=True)\n    ip_address = mapped_column(INET)\n    content = mapped_column(String(50))\n\n    # relationship() using explicit foreign_keys, remote_side\n    parent_host = relationship(\n        \"HostEntry\",\n```\n\n----------------------------------------\n\nTITLE: Dynamic Authentication Token Generation\nDESCRIPTION: Example of implementing dynamic authentication token generation using an event listener.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef provide_token(dialect, conn_rec, cargs, cparams):\n    cparams[\"token\"] = get_authentication_token()\n```\n\n----------------------------------------\n\nTITLE: Join to a Target with an ON Clause using SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates joining with an explicit ON clause, using a SQL expression to define the join condition.  The expression specifies how `User` and `Address` should be joined based on `User.id` and `Address.user_id`.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(Address, User.id == Address.user_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Base and User Models with SQLAlchemy ORM\nDESCRIPTION: This snippet defines the Base class using SQLAlchemy's DeclarativeBase and the User model with fields including id, name, fullname, and relationships to Address and Order models. It specifies the structure and relationships for the User entity in a relational database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\n    pass\nclass User(Base):\n    __tablename__ = \"user_account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n    orders: Mapped[List[\"Order\"]] = relationship()\n\n    def __repr__(self) -> str:\n        return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Engine with SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to create an Engine in SQLAlchemy, which is a factory for creating database connections. The example uses a SQLite in-memory database for convenience and sets echo=True to log SQL statements to the console. The Engine manages a connection pool for efficient reuse of database connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\"sqlite://\", echo=True)\n```\n\n----------------------------------------\n\nTITLE: Declaring ORM Mapped Classes with Type Annotations\nDESCRIPTION: Illustrates how to create ORM mapped classes using modern PEP 484 type annotations with the Mapped type. The example defines User and Address classes with relationships, primary keys, and foreign keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from typing import List\n>>> from typing import Optional\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str] = mapped_column(String(30))\n...     fullname: Mapped[Optional[str]]\n...\n...     addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n...\n...     def __repr__(self) -> str:\n...         return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     email_address: Mapped[str]\n...     user_id = mapped_column(ForeignKey(\"user_account.id\"))\n...\n...     user: Mapped[User] = relationship(back_populates=\"addresses\")\n...\n...     def __repr__(self) -> str:\n...         return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n```\n\n----------------------------------------\n\nTITLE: Executing a SELECT Statement with Criteria Using SQLAlchemy ORM in Python\nDESCRIPTION: This code demonstrates how to use the select function from SQLAlchemy to generate a SELECT statement with criteria and execute it using an ORM session to retrieve ORM-mapped objects. Dependencies include the SQLAlchemy library, specifically the select function and ORM session object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import select\nstmt = select(User).where(User.name == \"spongebob\")\nresult = session.execute(stmt)\nfor user_obj in result.scalars():\n    print(f\"{user_obj.name} {user_obj.fullname}\")\n```\n\n----------------------------------------\n\nTITLE: Creating User Objects for Insertion - Python SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to create instances of the User class before inserting them into the database using SQLAlchemy's ORM. It illustrates that class instances represent rows and can be constructed with keyword arguments corresponding to the mapped database columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> squidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\n>>> krabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\n```\n\n----------------------------------------\n\nTITLE: Async Database Operations with Run Sync Pattern\nDESCRIPTION: Complete example demonstrating async database operations using run_sync pattern, including engine creation, session management, and data manipulation\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom sqlalchemy import select\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\n\n\ndef fetch_and_update_objects(session):\n    \"\"\"run traditional sync-style ORM code in a function that will be\n    invoked within an awaitable.\n\n    \"\"\"\n\n    # the session object here is a traditional ORM Session.\n    # all features are available here including legacy Query use.\n\n    stmt = select(A)\n\n    result = session.execute(stmt)\n    for a1 in result.scalars():\n        print(a1)\n\n        # lazy loads\n        for b1 in a1.bs:\n            print(b1)\n\n    # legacy Query use\n    a1 = session.query(A).order_by(A.id).first()\n\n    a1.data = \"new data\"\n\n\nasync def async_main():\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n        await conn.run_sync(Base.metadata.create_all)\n\n    async with AsyncSession(engine) as session:\n        async with session.begin():\n            session.add_all(\n                [\n                    A(bs=[B(), B()], data=\"a1\"),\n                    A(bs=[B()], data=\"a2\"),\n                    A(bs=[B(), B()], data=\"a3\"),\n                ]\n            )\n\n        await session.run_sync(fetch_and_update_objects)\n\n        await session.commit()\n\n    # for AsyncEngine created in function scope, close and\n    # clean-up pooled connections\n    await engine.dispose()\n\n\nasyncio.run(async_main())\n```\n\n----------------------------------------\n\nTITLE: Defining Table with Explicit Schema Name in SQLAlchemy Core\nDESCRIPTION: Demonstrates how to create a table with an explicit schema name using SQLAlchemy's Table construct. The example shows creation of a 'financial_info' table in the 'remote_banks' schema with id and value columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\n\nfinancial_info = Table(\n    \"financial_info\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"value\", String(100), nullable=False),\n    schema=\"remote_banks\",\n)\n```\n\n----------------------------------------\n\nTITLE: SQL output of join to target with relationship ON clause\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account` and `address`. It achieves the same result as the simple relationship join, explicitly passing the relationship as the join condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Joining Relationships Between Aliased Targets\nDESCRIPTION: This snippet demonstrates how to use aliased targets in joins, allowing you to join the same table multiple times with different aliases.  It joins `User` to two different aliases of `Address` based on different email addresses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> address_alias_1 = aliased(Address)\n>>> address_alias_2 = aliased(Address)\n>>> stmt = (\n...     select(User)\n...     .join(address_alias_1, User.addresses)\n...     .where(address_alias_1.email_address == \"patrick@aol.com\")\n...     .join(address_alias_2, User.addresses)\n...     .where(address_alias_2.email_address == \"patrick@gmail.com\")\n... )\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Many-to-One Relationship in SQLAlchemy ORM\nDESCRIPTION: Establishes a bidirectional many-to-one relationship between Parent and Child classes using back_populates parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```\n\n----------------------------------------\n\nTITLE: Refreshing Object Attributes in SQLAlchemy Session\nDESCRIPTION: This snippet highlights the use of the 'refresh' method in SQLAlchemy to reload object attributes from the database. It is used when a SELECT statement needs to be executed immediately to refresh the state of an object's attributes. Dependencies include a configured SQLAlchemy session and mapped ORM objects. The method requires the object to which the attributes belong and optionally takes a list of attribute names to be refreshed. Outputs are the updated object attributes from the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nsession.refresh(obj1)\n```\n\nLANGUAGE: Python\nCODE:\n```\nsession.refresh(obj1, [\"attr1\", \"attr2\"])\n```\n\n----------------------------------------\n\nTITLE: Performing SQLite Upsert Operations with SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use the SQLite-specific upsert functionality with SQLAlchemy ORM. The example shows inserting multiple user records with on_conflict_do_update to handle conflicts on the name column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.sqlite import insert as sqlite_upsert\nstmt = sqlite_upsert(User).values(\n    [\n        {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n        {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n        {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n        {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n        {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n    ]\n)\nstmt = stmt.on_conflict_do_update(\n    index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)\n)\nsession.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship in SQLAlchemy ORM\nDESCRIPTION: Defines a one-to-many relationship between Parent and Child classes using Declarative mapping with annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship()\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n```\n\n----------------------------------------\n\nTITLE: Using Loader Options to Configure Relationship Loading - Python\nDESCRIPTION: This code snippet showcases how to leverage SQLAlchemy loader options to dictate the loading strategy for relationships on a per-query basis. It highlights the use of lazyload and joinedload options to define how related objects are fetched when querying the Parent class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\n# set children to load lazily\nstmt = select(Parent).options(lazyload(Parent.children))\n\nfrom sqlalchemy.orm import joinedload\n\n# set children to load eagerly with a join\nstmt = select(Parent).options(joinedload(Parent.children))\n```\n\n----------------------------------------\n\nTITLE: Multiprocessing Pool with Safe Connection Handling\nDESCRIPTION: Example showing how to properly use SQLAlchemy engine with a multiprocessing Pool by disposing connections safely in child processes using an initializer function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Pool\n\nengine = create_engine(\"mysql+mysqldb://user:pass@host/dbname\")\n\n\ndef run_in_process(some_data_record):\n    with engine.connect() as conn:\n        conn.execute(text(\"...\"))\n\n\ndef initializer():\n    \"\"\"ensure the parent proc's database connections are not touched\n    in the new connection pool\"\"\"\n    engine.dispose(close=False)\n\n\nwith Pool(10, initializer=initializer) as p:\n    p.map(run_in_process, data)\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple ORM Entities with Join in SQLAlchemy Python\nDESCRIPTION: This code illustrates how to perform a SELECT operation involving multiple ORM entities using joins in SQLAlchemy. The joined entities are accessed by their class names in the result. This requires the SQLAlchemy library and an active ORM session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstmt = select(User, Address).join(User.addresses).order_by(User.id, Address.id)\nfor row in session.execute(stmt):\n    print(f\"{row.User.name} {row.Address.email_address}\")\n```\n\n----------------------------------------\n\nTITLE: Session Context Management with Begin in SQLAlchemy Python\nDESCRIPTION: This snippet uses the session.begin context manager for automatically committing and closing transactions in SQLAlchemy. It relies on the sessionmaker and is ideal for clean transaction handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nSession = sessionmaker(engine)\n\nwith Session.begin() as session:\n    session.add_all(\n        [\n            SomeClass(data=\"some data one\"),\n            SomeClass(data=\"some data two\"),\n            SomeClass(data=\"some data three\"),\n        ]\n    )\n# commits and closes automatically\n```\n\n----------------------------------------\n\nTITLE: Mapping Association Object Pattern for Many-To-Many in SQLAlchemy\nDESCRIPTION: This snippet defines an association object in SQLAlchemy to manage additional data in a many-to-many relationship. It shows the setup of a mapping for the Association class which includes extra_data and links Parent and Childthrough the Association object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(ForeignKey(\"right_table.id\"), primary_key=True)\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship()\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Declarative Mapping with Annotations for Parent-Child Relationship\nDESCRIPTION: Demonstrates a Declarative mapping using PEP 484 annotations for a Parent-Child relationship. The relationship() construct derives the target class and collection type from the Mapped annotation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```\n\n----------------------------------------\n\nTITLE: Using the Transaction Context Manager in a Session\nDESCRIPTION: This snippet illustrates how to use the newly created transaction context manager in methods that interact with the database. When method_a starts a transaction and calls method_b, method_b will participate in the transaction that started in method_a.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\n# method_a starts a transaction and calls method_b\ndef method_a(session):\n    with transaction(session):\n        method_b(session)\n\n# method_b also starts a transaction, but when\n# called from method_a participates in the ongoing\n# transaction.\ndef method_b(session):\n    with transaction(session):\n        session.add(SomeObject(\"bat\", \"lala\"))\n\nSession = sessionmaker(engine)\n\n# create a Session and call method_a\nwith Session() as session:\n    method_a(session)\n```\n\n----------------------------------------\n\nTITLE: Modern DML Methods in SQLAlchemy 2.0\nDESCRIPTION: Shows the new generative method patterns for insert/update/delete operations in SQLAlchemy 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# use generative methods, **kwargs OK for values()\nstmt = insert(table).values(x=10, y=15).inline()\n\n# use generative methods, dictionary also still  OK for values()\nstmt = insert(table).values({\"x\": 10, \"y\": 15}).returning(table.c.x)\n\n# use generative methods\nstmt = table.delete().where(table.c.x > 15)\n\n# use generative methods, ordered_values() replaces preserve_parameter_order\nstmt = (\n    table.update()\n    .where(\n        table.c.x < 15,\n    )\n    .ordered_values((table.c.y, 20), (table.c.x, table.c.y + 10))\n)\n```\n\n----------------------------------------\n\nTITLE: Making Changes with SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to modify existing data and add new records using SQLAlchemy ORM's session management and automatic change tracking.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(User).where(User.name == \"patrick\")\npatrick = session.scalars(stmt).one()\n\npatrick.addresses.append(Address(email_address=\"patrickstar@sqlalchemy.org\"))\n\nsandy_address.email_address = \"sandy_cheeks@sqlalchemy.org\"\n\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Using SessionMaker with Begin Method\nDESCRIPTION: Demonstrates using sessionmaker's begin() method to create sessions with automatic transaction handling in a single context manager.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# an Engine, which the Session will use for connection\n# resources\nengine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/\")\n\n# a sessionmaker(), also in the same scope as the engine\nSession = sessionmaker(engine)\n\n# we can now construct a Session() and include begin()/commit()/rollback()\n# at once\nwith Session.begin() as session:\n    session.add(some_object)\n    session.add(some_other_object)\n```\n\n----------------------------------------\n\nTITLE: Configuring Constraint Naming Conventions in SQLAlchemy\nDESCRIPTION: This example demonstrates how to set up a naming convention for constraints in SQLAlchemy using the MetaData object. It provides a dictionary of naming templates for different constraint types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconvention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\n\nmetadata_obj = MetaData(naming_convention=convention)\n```\n\n----------------------------------------\n\nTITLE: Mapping Tables with Alternate Attribute Names in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to map columns from a table to differently named attributes in a class. This technique allows for more intuitive attribute naming while maintaining the existing database column names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"user_id\", Integer, primary_key=True),\n    Column(\"user_name\", String),\n)\n\n\nclass User(Base):\n    __table__ = user_table\n\n    id = user_table.c.user_id\n    name = user_table.c.user_name\n```\n\n----------------------------------------\n\nTITLE: Monitoring Query Execution Time with SQLAlchemy Events\nDESCRIPTION: Event listeners that track query execution time by hooking into SQLAlchemy engine events before and after cursor execution. Uses connection info dictionary to store timing data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(Engine, \"after_cursor_execute\")\ndef after_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    total = time.time() - conn.info[\"query_start_time\"].pop(-1)\n    logger.debug(\"Query Complete!\")\n    logger.debug(\"Total Time: %f\", total)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using MySQL Connection Pool in Python using SQLAlchemy\nDESCRIPTION: Demonstrates how to create and use a MySQL connection pool directly without an SQLAlchemy Engine. Shows configuration of pool parameters like size and overflow limits with pre-ping enabled.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_pool_from_url\n\nmy_pool = create_pool_from_url(\n    \"mysql+mysqldb://\", max_overflow=5, pool_size=5, pre_ping=True\n)\n\ncon = my_pool.connect()\n# use the connection\n...\n# then close it\ncon.close()\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to SQLAlchemy Session\nDESCRIPTION: Demonstrates adding new User objects to the session individually using Session.add() and committing changes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nuser1 = User(name=\"user1\")\nuser2 = User(name=\"user2\")\nsession.add(user1)\nsession.add(user2)\n\nsession.commit()  # write changes to the database\n```\n\n----------------------------------------\n\nTITLE: Using Session as a Context Manager in Future Mode\nDESCRIPTION: Illustrates the updated pattern for creating and using an ORM Session object in SQLAlchemy 2.0. The Session is used as a context manager, which helps manage its lifecycle and transaction boundaries automatically.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    session.add(MyObject())\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data with SQLAlchemy ORM Session\nDESCRIPTION: Illustrates using SQLAlchemy ORM's 'expire' and 'refresh' methods to ensure attributes are refreshed from the database when accessed. 'expire' sets attributes to load upon access, while 'refresh' immediately reloads data, emitting queries to update object state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsession.expire(u1)\nu1.some_attribute  # <-- lazy loads from the transaction\n```\n\nLANGUAGE: python\nCODE:\n```\nsession.refresh(u1)  # <-- emits a SQL query\nu1.some_attribute  # <-- is refreshed from the transaction\n```\n\n----------------------------------------\n\nTITLE: Basic ORM Querying with Session\nDESCRIPTION: Shows basic query construction using select() with Session's execute and scalars methods for retrieving ORM objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    # query for ``User`` objects\n    statement = select(User).filter_by(name=\"ed\")\n\n    # list of ``User`` objects\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query with SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to perform a basic SELECT query using SQLAlchemy ORM with Session.scalars(). The query filters users by name using the IN operator.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\n\nsession = Session(engine)\n\nstmt = select(User).where(User.name.in_([\"spongebob\", \"sandy\"]))\n\nfor user in session.scalars(stmt):\n    print(user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Nullability with Mapped Types in SQLAlchemy ORM\nDESCRIPTION: This example demonstrates how to use Python type annotations with mapped_column to control column nullability. The class defines three columns with different nullability settings: a primary key that's NOT NULL, a regular string column that's NOT NULL, and an Optional string column that allows NULL values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # primary_key=True, therefore will be NOT NULL\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # not Optional[], therefore will be NOT NULL\n    data: Mapped[str]\n\n    # Optional[], therefore will be NULL\n    additional_info: Mapped[Optional[str]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Object with Columns in SQLAlchemy\nDESCRIPTION: This snippet shows how to create a Table object with columns using SQLAlchemy. It includes defining column names, data types (Integer, String), and primary key constraints. The Table is associated with a MetaData object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import Table, Column, Integer, String\n>>> user_table = Table(\n...     \"user_account\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"name\", String(30)),\n...     Column(\"fullname\", String),\n... )\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Upsert with RETURNING Clause\nDESCRIPTION: The snippet demonstrates an upsert operation using SQLAlchemy ORM for SQLite. It utilizes the `on_conflict_do_update` method to handle conflicts by updating existing rows. The `RETURNING` clause is employed to return ORM entities after execution. This is beneficial for synchronizing session states with the database states automatically.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy.dialects.sqlite import insert as sqlite_upsert\n>>> stmt = sqlite_upsert(User).values(\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ]\n... )\n>>> stmt = stmt.on_conflict_do_update(\n...     index_elements=[User.name], set_=dict(fullname=stmt.excluded.fullname)\n... )\n>>> result = session.scalars(stmt.returning(User))\n>>> print(result.all())\n```\n\n----------------------------------------\n\nTITLE: Committing Data with SQLAlchemy Connection in Python\nDESCRIPTION: This snippet illustrates how to create a table, insert data, and commit changes using SQLAlchemy. Transactions are controlled explicitly with the commit() method inside a Connection context block. The input is a series of SQL commands (CREATE TABLE, INSERT), which requires a functioning SQLAlchemy Engine. The expected outputs are the table creation and data insertion.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# \"commit as you go\"\n>>> with engine.connect() as conn:\n...     conn.execute(text(\"CREATE TABLE some_table (x int, y int)\"))\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 1, \"y\": 1}, {\"x\": 2, \"y\": 4}],\n...     )\n...     conn.commit()\n{execsql}BEGIN (implicit)\nCREATE TABLE some_table (x int, y int)\n[...] ()\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\nINSERT INTO some_table (x, y) VALUES (?, ?)\n[...] [(1, 1), (2, 4)]\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\nCOMMIT\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert with RETURNING in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to perform a bulk insert using the SQLAlchemy ORM with the `RETURNING` clause. It uses the `insert` method and `session.scalars` to insert multiple User instances while returning created objects. This method allows rows to be batched efficiently, benefiting from the fast insertmany feature, and supports heterogeneous parameter lists.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n...         {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n...         {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n...     ],\n... )\n>>> print(users.all())\n```\n\n----------------------------------------\n\nTITLE: Configuring Association Object with Many-to-Many Relationships in SQLAlchemy\nDESCRIPTION: Demonstrates setting up a bidirectional many-to-many relationship between Parent and Child classes using both direct relationships and an Association object. Shows full table definitions with typed annotations using SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Association(Base):\n    __tablename__ = \"association_table\"\n\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(\n        ForeignKey(\"right_table.id\"), primary_key=True\n    )\n    extra_data: Mapped[Optional[str]]\n\n    # association between Assocation -> Child\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent_associations\")\n\n    # association between Assocation -> Parent\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child_associations\")\n\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\"\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\"\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Expression Language Module in reStructuredText\nDESCRIPTION: This snippet defines the module for SQLAlchemy's SQL Expression Language using reStructuredText directive. It specifies the module path for the API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/expression_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. module:: sqlalchemy.sql.expression\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables from SQLAlchemy MetaData\nDESCRIPTION: Demonstrates how to generate DDL statements and create tables in SQLite using MetaData.create_all() method. The example shows the SQL CREATE TABLE statements being executed with proper table relationships and foreign keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> metadata_obj.create_all(engine)\n```\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN (implicit)\nPRAGMA main.table_...info(\"user_account\")\n...\nPRAGMA main.table_...info(\"address\")\n...\nCREATE TABLE user_account (\n    id INTEGER NOT NULL,\n    name VARCHAR(30),\n    fullname VARCHAR,\n    PRIMARY KEY (id)\n)\n...\nCREATE TABLE address (\n    id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    email_address VARCHAR NOT NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY(user_id) REFERENCES user_account (id)\n)\n...\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Constructing SELECT Statements in SQLAlchemy 2.0\nDESCRIPTION: Illustrates the new patterns for constructing SELECT statements in SQLAlchemy 2.0, using the generative style and positional column arguments rather than keyword arguments or lists.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# use generative methods\nstmt = select(1).select_from(table).order_by(table.c.id)\n\n# use generative methods\nstmt = select(table).where(table.c.id == 5)\n\n# use generative methods \nstmt = table.select().where(table.c.id == 5)\n\n# pass columns clause expressions positionally\nstmt = select(table.c.x, table.c.y)\n\n# case conditions passed positionally \ncase_clause = case(\n    (table.c.x == 5, \"five\"), (table.c.x == 7, \"seven\"), else_=\"neither five nor seven\"\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified SQLAlchemy ORM Models\nDESCRIPTION: Optimized version with reduced boilerplate by leveraging type inference and Optional types to imply nullable fields.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom typing import Optional\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(30))\n    fullname: Mapped[Optional[str]]\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email_address: Mapped[str]\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Creating Engine with Pool Pre-Ping\nDESCRIPTION: Example of creating a SQLAlchemy engine with pool pre-ping enabled for pessimistic disconnect handling\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"mysql+pymysql://user:pw@host/db\", pool_pre_ping=True)\n```\n\n----------------------------------------\n\nTITLE: Combining Wildcard and Specific Loading Strategies in Queries\nDESCRIPTION: Demonstrates how to use both wildcard lazy loading for most relationships and joinedload for a specific relationship in the same query. The joinedload will take precedence for the specified relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(MyClass).options(lazyload(\"*\"), joinedload(MyClass.widget))\n```\n\n----------------------------------------\n\nTITLE: Fetching Large Result Sets with Yield Per - Python SQLAlchemy\nDESCRIPTION: This snippet exemplifies fetching ORM objects in batches using the `yield_per` execution option. It optimizes the memory usage by only fetching a specified number of rows at a time, making it suitable for large result sets.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(User).execution_options(yield_per=10)\nfor user_obj in session.scalars(stmt):\n    print(user_obj)\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many Relationship in SQLAlchemy ORM\nDESCRIPTION: Establishes a bidirectional one-to-many relationship between Parent and Child classes using back_populates parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statements with SQLAlchemy Engine in Python\nDESCRIPTION: This snippet demonstrates how to connect to a database and execute a simple SQL SELECT statement using SQLAlchemy's Engine and Connection objects within a Python context manager. The output is fetched from a Result object and printed. Required dependencies include the SQLAlchemy library and a configured Engine object. Inputs are a SQL SELECT query, and the output is printed table data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy import text\n\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"select 'hello world'\"))\n...     print(result.all())\n{execsql}BEGIN (implicit)\nselect 'hello world'\n[...] ()\n{stop}[('hello world',)]\n{execsql}ROLLBACK{stop}\n\n```\n\n----------------------------------------\n\nTITLE: Complete SQLAlchemy Type Mapping Example\nDESCRIPTION: Demonstrates a full example of mapping custom types to SQLAlchemy column types using type_annotation_map and mapped columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NewType\n\nfrom sqlalchemy import SmallInteger, BigInteger, JSON, String\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom sqlalchemy.schema import CreateTable\n\nnstr30 = NewType(\"nstr30\", str)\nnstr50 = NewType(\"nstr50\", str)\ntype SmallInt = int\ntype BigInt = int\ntype JsonScalar = str | float | bool | None\n\n\nclass TABase(DeclarativeBase):\n    type_annotation_map = {\n        nstr30: String(30),\n        nstr50: String(50),\n        SmallInt: SmallInteger,\n        BigInteger: BigInteger,\n        JsonScalar: JSON,\n    }\n\n\nclass SomeClass(TABase):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    normal_str: Mapped[str]\n\n    short_str: Mapped[nstr30]\n    long_str_nullable: Mapped[nstr50 | None]\n\n    small_int: Mapped[SmallInt]\n    big_int: Mapped[BigInteger]\n    scalar_col: Mapped[JsonScalar]\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLAlchemy MetaData Object\nDESCRIPTION: Shows how to create a basic MetaData container object for storing database schema information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\n\nmetadata_obj = MetaData()\n```\n\n----------------------------------------\n\nTITLE: Using Session Context Managers\nDESCRIPTION: Demonstrates more concise ways to handle session transactions using context managers, including nested contexts and combined context statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create session and add objects\nwith Session(engine) as session:\n    with session.begin():\n        session.add(some_object)\n        session.add(some_other_object)\n\n# More concise version combining contexts\nwith Session(engine) as session, session.begin():\n    session.add(some_object)\n    session.add(some_other_object)\n```\n\n----------------------------------------\n\nTITLE: Reflecting All Tables at Once in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use the MetaData.reflect() method to reflect all tables in a database at once.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\nmetadata_obj.reflect(bind=someengine)\nusers_table = metadata_obj.tables[\"users\"]\naddresses_table = metadata_obj.tables[\"addresses\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Address and Order Models with SQLAlchemy ORM\nDESCRIPTION: This snippet establishes the Address model linked to the User model through a foreign key and the Order model with a many-to-many relationship with Item via the order_items_table. It captures the database structure and relationships between these entities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Address(Base):\n    __tablename__ = \"address\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    email_address: Mapped[str]\n    user: Mapped[User] = relationship(back_populates=\"addresses\")\n\n    def __repr__(self) -> str:\n        return f\"Address(id={self.id!r}, email_address={self.email_address!r})\"\n\norder_items_table = Table(\n    \"order_items\",\n    Base.metadata,\n    Column(\"order_id\", ForeignKey(\"user_order.id\"), primary_key=True),\n    Column(\"item_id\", ForeignKey(\"item.id\"), primary_key=True),\n)\n\nclass Order(Base):\n    __tablename__ = \"user_order\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    items: Mapped[List[\"Item\"]] = relationship(secondary=order_items_table)\n```\n\n----------------------------------------\n\nTITLE: Association Proxy Class Definition Example\nDESCRIPTION: Shows the implementation of an association proxy with cascade delete behavior using SQLAlchemy ORM class definitions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"test_a\"\n    id = Column(Integer, primary_key=True)\n    ab = relationship(\"AB\", backref=\"a\", uselist=False)\n    b = association_proxy(\n        \"ab\", \"b\", creator=lambda b: AB(b=b), cascade_scalar_deletes=True\n    )\n\n\nclass B(Base):\n    __tablename__ = \"test_b\"\n    id = Column(Integer, primary_key=True)\n    ab = relationship(\"AB\", backref=\"b\", cascade=\"all, delete-orphan\")\n\n\nclass AB(Base):\n    __tablename__ = \"test_ab\"\n    a_id = Column(Integer, ForeignKey(A.id), primary_key=True)\n    b_id = Column(Integer, ForeignKey(B.id), primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationships with Single Table Inheritance in SQLAlchemy ORM\nDESCRIPTION: This example illustrates how to set up relationships in single table inheritance scenarios. It shows the configuration for both base class and subclass-specific relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Deferred Column Property in SQLAlchemy ORM\nDESCRIPTION: Demonstrates using deferred() to create a computed fullname column that is loaded on-demand.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import deferred\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```\n\n----------------------------------------\n\nTITLE: Using DeferredReflection for Delayed Table Reflection in SQLAlchemy\nDESCRIPTION: Shows how to use the DeferredReflection mixin to declare mapped classes before database connectivity is available. This allows classes to be defined during import time while deferring reflection to runtime.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import DeferredReflection\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Reflected(DeferredReflection):\n    __abstract__ = True\n\n\nclass Foo(Reflected, Base):\n    __tablename__ = \"foo\"\n    bars = relationship(\"Bar\")\n\n\nclass Bar(Reflected, Base):\n    __tablename__ = \"bar\"\n\n    foo_id = mapped_column(Integer, ForeignKey(\"foo.id\"))\n```\n\n----------------------------------------\n\nTITLE: Closing a SQLAlchemy ORM Session (Python/SQL)\nDESCRIPTION: Shows how to properly close a SQLAlchemy ORM session. This operation releases connection resources, rolls back any open transactions, and expunges all objects from the session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> session.close()\n{execsql}ROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Modern Bulk UPDATE using update() in SQLAlchemy ORM\nDESCRIPTION: Example of using the modern update() function to perform a bulk UPDATE operation, which replaces the legacy bulk_update_mappings() method. This approach supports session-synchronization features.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\n\nsession.execute(\n    update(User),\n    [\n        {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n        {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Joined Loading with Inner Join in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to use joinedload with the innerjoin parameter to efficiently load Address objects with their associated User objects using an inner join rather than an outer join.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(Address)\n...     .options(joinedload(Address.user, innerjoin=True))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT address.id, address.email_address, address.user_id, user_account_1.id AS id_1,\nuser_account_1.name, user_account_1.fullname\nFROM address\nJOIN user_account AS user_account_1 ON user_account_1.id = address.user_id\nORDER BY address.id\n```\n\n----------------------------------------\n\nTITLE: Creating a basic INSERT statement with SQLAlchemy Core\nDESCRIPTION: This snippet demonstrates how to create a simple INSERT statement using the `insert` function in SQLAlchemy Core. It specifies the target table and the values to be inserted using the `values` method.  The `user_table` variable is assumed to be a Table object defined elsewhere.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n    >>> from sqlalchemy import insert\n    >>> stmt = insert(user_table).values(name=\"spongebob\", fullname=\"Spongebob Squarepants\")\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inserted Object Attributes - Python SQLAlchemy\nDESCRIPTION: After objects are inserted into the database, this snippet illustrates how to access the autogenerated primary key attributes of the inserted rows, showing the persistent state of the objects within the Session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> squidward.id\n4\n>>> krabs.id\n5\n```\n\n----------------------------------------\n\nTITLE: Inheritance Mapping with Decorator\nDESCRIPTION: Demonstrates how to implement class inheritance mapping using the decorator approach with polymorphic identity configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\n\n@mapper_registry.mapped\nclass Person:\n    __tablename__ = \"person\"\n\n    person_id = mapped_column(Integer, primary_key=True)\n    type = mapped_column(String, nullable=False)\n\n    __mapper_args__ = {\n        \"polymorphic_on\": type,\n        \"polymorphic_identity\": \"person\",\n    }\n\n\n@mapper_registry.mapped\nclass Employee(Person):\n    __tablename__ = \"employee\"\n\n    person_id = mapped_column(ForeignKey(\"person.person_id\"), primary_key=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring One-to-Many Relationship with Python 3.10+ Syntax in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to set up a one-to-many relationship between Parent and Child classes using Python 3.10+ syntax with PEP 604 and PEP 563. It shows the use of Mapped annotations and the relationship function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int | None] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Child | None] = relationship(back_populates=\"parents\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(back_populates=\"child\")\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with Joinedload in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to perform eager loading of related entities using joinedload in SQLAlchemy. It uses the options method to specify that the addresses relationship of the User entity should be eagerly loaded.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n\"q = session.query(User).options(joinedload(User.addresses))\"\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to the Database - Python SQLAlchemy\nDESCRIPTION: This code snippet shows how to commit the transaction within the SQLAlchemy Session, ensuring that all changes made are saved to the database. It marks the end of a transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> session.commit()\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Explicit Attribute Loading with AsyncSession.refresh in SQLAlchemy\nDESCRIPTION: Python code demonstrating how to explicitly load lazy-loaded collections in an async context using AsyncSession.refresh with the attribute_names parameter. This avoids implicit IO that would otherwise fail in async code.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# assume a_obj is an A that has lazy loaded A.bs collection\na_obj = await async_session.get(A, [1])\n\n# force the collection to load by naming it in attribute_names\nawait async_session.refresh(a_obj, [\"bs\"])\n\n# collection is present\nprint(f\"bs collection: {a_obj.bs}\")\n```\n\n----------------------------------------\n\nTITLE: Using AsyncScopedSession for Session Management in Python\nDESCRIPTION: This snippet demonstrates how to use the AsyncScopedSession to manage the lifecycle of asynchronous sessions in SQLAlchemy. The example illustrates how to add an object to the session, commit changes, and remove the session from the context. It leverages async capabilities to ensure proper session management without memory leaks.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def some_function(some_async_session, some_object):\n    # use the AsyncSession directly\n    some_async_session.add(some_object)\n\n    # use the AsyncSession via the context-local proxy\n    await AsyncScopedSession.commit()\n\n    # \"remove\" the current proxied AsyncSession for the local context\n    await AsyncScopedSession.remove()\n```\n\n----------------------------------------\n\nTITLE: Querying with SQL Function in SQLAlchemy\nDESCRIPTION: Demonstrates how to use a SQL function (count) in a SELECT statement using SQLAlchemy's func namespace. This example shows the basic syntax for invoking SQL functions in queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/functions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nselect(func.count(\"*\")).select_from(some_table)\n```\n\n----------------------------------------\n\nTITLE: Basic Session Transaction with Context Manager\nDESCRIPTION: Demonstrates how to use Session with a context manager to handle transactions automatically. The transaction is committed at the end of the block or rolled back if an exception occurs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\nsession = Session(engine)\n\nwith session.begin():\n    session.add(some_object())\n    session.add(some_other_object())\n```\n\n----------------------------------------\n\nTITLE: Using Engine begin method for Transactions in Python\nDESCRIPTION: The code demonstrates using the Engine's begin method to automatically handle commit and close operations in a context manager. It emphasizes the easy execution of SQL statements within a transactional context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nengine = create_engine(\"postgresql+psycopg2://user:pass@host/dbname\")\n\nwith engine.begin() as conn:\n    conn.execute(\n        some_table.insert(),\n        [\n            {\"data\": \"some data one\"},\n            {\"data\": \"some data two\"},\n            {\"data\": \"some data three\"},\n        ],\n    )\n# commits and closes automatically\n```\n\n----------------------------------------\n\nTITLE: Using Annotated Types in ORM Class\nDESCRIPTION: Shows how to use the pre-configured Annotated types in an ORM class definition with table creation example.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[intpk]\n    name: Mapped[required_name]\n    created_at: Mapped[timestamp]\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncEngine for SQLAlchemy Core\nDESCRIPTION: This Python code snippet demonstrates initializing an AsyncEngine with SQLAlchemy's Core, and performing basic operations like creating tables and inserting/selecting data asynchronously, using asyncio's event loop. It illustrates managing database connections using async context managers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_1\n\nLANGUAGE: pycon+sql\nCODE:\n```\n>>> import asyncio\n>>> from sqlalchemy import Column\n>>> from sqlalchemy import MetaData\n>>> from sqlalchemy import select\n>>> from sqlalchemy import String\n>>> from sqlalchemy import Table\n>>> from sqlalchemy.ext.asyncio import create_async_engine\n\n>>> meta = MetaData()\n>>> t1 = Table(\"t1\", meta, Column(\"name\", String(50), primary_key=True))\n\n>>> async def async_main() -> None:\n...     engine = create_async_engine(\"sqlite+aiosqlite://\", echo=True)\n...\n...     async with engine.begin() as conn:\n...         await conn.run_sync(meta.drop_all)\n...         await conn.run_sync(meta.create_all)\n...\n...         await conn.execute(\n...             t1.insert(), [{\"name\": \"some name 1\"}, {\"name\": \"some name 2\"}]\n...         )\n...\n...     async with engine.connect() as conn:\n...         # select a Result, which will be delivered with buffered\n...         # results\n...         result = await conn.execute(select(t1).where(t1.c.name == \"some name 1\"))\n...\n...         print(result.fetchall())\n...\n...     # for AsyncEngine created in function scope, close and\n...     # clean-up pooled connections\n...     await engine.dispose()\n\n>>> asyncio.run(async_main())\n{execsql}BEGIN (implicit)\n...\nCREATE TABLE t1 (\n    name VARCHAR(50) NOT NULL,\n    PRIMARY KEY (name)\n)\n...\nINSERT INTO t1 (name) VALUES (?)\n[...] [('some name 1',), ('some name 2',)]\nCOMMIT\nBEGIN (implicit)\nSELECT t1.name\nFROM t1\nWHERE t1.name = ?\n[...] ('some name 1',)\n[('some name 1',)]\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Defining Column Mixins in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to create a mixin class with timestamp columns that can be reused across multiple mapped classes. Shows different ways of declaring columns in mixins including annotated attributes, mapped_column, and legacy Column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TimestampMixin:\n    created_at: Mapped[datetime] = mapped_column(default=func.now())\n    updated_at: Mapped[datetime]\n\n\nclass MyModel(TimestampMixin, Base):\n    __tablename__ = \"test\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Persisting ORM Objects into SQLAlchemy Session\nDESCRIPTION: The snippet guides through adding transient ORM objects to a Session. By demonstrating the save-update cascade, it highlights how related items are automatically added to the same session. Requires a configured SQLAlchemy Session. Inputs include instances of mapped classes while affecting objects' transient state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n  >>> session.add(u1)\n  >>> u1 in session\n  True\n  >>> a1 in session\n  True\n  >>> a2 in session\n  True\n```\n\n----------------------------------------\n\nTITLE: Modifying Collections with Dynamic Relationship Methods\nDESCRIPTION: Example of modifying a dynamic relationship collection using the append and remove methods, which operate on the collection without loading all items.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\noldpost = jack.posts.filter(Post.headline == \"old post\").one()\njack.posts.remove(oldpost)\n\njack.posts.append(Post(\"new post\"))\n```\n\n----------------------------------------\n\nTITLE: Automatic Deletion from the Many-To-Many Secondary Table in SQLAlchemy\nDESCRIPTION: This code snippet illustrates how removing a child from the Parent's children collection will automatically delete the corresponding row in the secondary association table, ensuring data integrity without requiring manual deletion.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# row will be deleted from the \"secondary\" table\n# automatically\nmyparent.children.remove(somechild)\n```\n\n----------------------------------------\n\nTITLE: Complete User-Address Model with Declarative Base\nDESCRIPTION: Comprehensive example showing a full model definition using Declarative Base, including relationships, type annotations, and column configurations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Checking Identity Mapping with SQLAlchemy ORM Session\nDESCRIPTION: This snippet demonstrates using SQLAlchemy ORM's identity map feature to ensure that querying for the same database row returns the same Python object instance across different queries. This is part of ensuring consistency in database state management within a transactional context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> u1 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u2 = session.scalars(select(User).where(User.id == 5)).one()\n>>> u1 is u2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Joins with SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to chain multiple joins using relationship-bound attributes. It joins `User` to `Order` via `User.orders`, and then `Order` to `Item` via `Order.items`, resulting in a series of JOIN clauses in the generated SQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(User.orders).join(Order.items)\n```\n\n----------------------------------------\n\nTITLE: Counting ORM Query Results in SQLAlchemy Python\nDESCRIPTION: This example shows different ways to count the number of entries in a database when using SQLAlchemy ORM queries in Python. It includes examples using both the query and select constructs with scalar functions. The focus is on obtaining a count of user entries efficiently.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User).count()\n```\n\nLANGUAGE: python\nCODE:\n```\nsession.scalar(select(func.count()).select_from(User))\n```\n\nLANGUAGE: python\nCODE:\n```\nsession.scalar(select(func.count(User.id)))\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Comparison Operators in SQLAlchemy\nDESCRIPTION: Examples of basic SQL comparison operators in SQLAlchemy including equality, inequality, greater than, less than, greater than or equal to, less than or equal to, and BETWEEN operators.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print(column(\"x\") == 5)\n{printsql}x = :x_1\n\n>>> print(column(\"x\") != 5)\n{printsql}x != :x_1\n\n>>> print(column(\"x\") > 5)\n{printsql}x > :x_1\n\n>>> print(column(\"x\") < 5)\n{printsql}x < :x_1\n\n>>> print(column(\"x\") >= 5)\n{printsql}x >= :x_1\n\n>>> print(column(\"x\") <= 5)\n{printsql}x <= :x_1\n\n>>> print(column(\"x\").between(5, 10))\n{printsql}x BETWEEN :x_1 AND :x_2\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Management in SQLAlchemy 2.0\nDESCRIPTION: Demonstrates the recommended pattern for explicit transaction management in SQLAlchemy 2.0 using the 'with' statement and engine.begin()\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith engine.begin() as conn:\n    conn.execute(some_table.insert().values(foo=\"bar\"))\n```\n\n----------------------------------------\n\nTITLE: Using __declare_last__ Hook in SQLAlchemy ORM\nDESCRIPTION: Shows how to implement the __declare_last__ class method hook that gets called after all mappings are configured. This method is triggered by the MapperEvents.after_configured event.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(Base):\n    @classmethod\n    def __declare_last__(cls):\n        \"\"\" \"\"\"\n        # do something with mappings\n```\n\n----------------------------------------\n\nTITLE: Session Context Manager Usage Patterns\nDESCRIPTION: Illustrates different ways to use Session with context managers, including direct Session construction and sessionmaker usage. Shows proper resource management and transaction scoping.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    session.add(some_object())\n    session.add(some_other_object())\n\n    session.commit()  # commits\n\n    session.add(still_another_object)\n    session.flush()  # flush still_another_object\n\n    session.commit()  # commits\n\n    result = session.execute(text(\"<some SELECT statement>\"))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Loading in SQLAlchemy ORM\nDESCRIPTION: Shows how accessing a relationship collection triggers a lazy load SQL query to retrieve related address objects for a user.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> u1.addresses\n{execsql}SELECT address.id AS address_id, address.email_address AS address_email_address,\naddress.user_id AS address_user_id\nFROM address\nWHERE ? = address.user_id\n[...] (6,){stop}\n[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]\n```\n\n----------------------------------------\n\nTITLE: Configuring delete-orphan Cascade in SQLAlchemy One-to-One Relationship\nDESCRIPTION: Example showing how to configure a one-to-one relationship with delete-orphan cascade and single_parent=True, which automatically deletes the related object when it's disassociated from its parent.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    # ...\n\n    preference = relationship(\n        \"Preference\", cascade=\"all, delete-orphan\", single_parent=True\n    )\n\n\nsome_user.preference = None\nsession.flush()  # will delete the Preference object\n```\n\n----------------------------------------\n\nTITLE: Using load_only with Multiple Entities in SQLAlchemy ORM\nDESCRIPTION: Demonstrates applying load_only to multiple entities in a single query. SQLAlchemy is required with entities defined. The load_only option must be used separately for each entity to specify which columns to load, reducing data load per entity as specified.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstmt = select(User, Book).join_from(User, Book).options(load_only(Book.title))\n```\n\nLANGUAGE: Python\nCODE:\n```\nstmt = (\n    select(User, Book)\n    .join_from(User, Book)\n    .options(load_only(User.name), load_only(Book.title))\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing from_self() with aliased in SQLAlchemy 2.0\nDESCRIPTION: This snippet demonstrates how to replace the from_self() method using the aliased construct in SQLAlchemy 2.0.  It creates a subquery and then uses aliased to refer to the subquery in terms of the original User and Address entities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n\"from sqlalchemy.orm import aliased\n\nsubq = session.query(User, Address.email_address).join(User.addresses).subquery()\n\nua = aliased(User, subq)\n\naa = aliased(Address, subq)\n\nq = session.query(ua, aa).order_by(aa.email_address)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-Directional Association with SQLAlchemy Relationships\nDESCRIPTION: This code shows how to create a bi-directional relationship using SQLAlchemy. It defines the Association class with relationships back to Parent and Child using back_populates, enabling traversal in both directions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nclass Association(Base):\n    __tablename__ = \"association_table\"\n    left_id: Mapped[int] = mapped_column(ForeignKey(\"left_table.id\"), primary_key=True)\n    right_id: Mapped[int] = mapped_column(ForeignKey(\"right_table.id\"), primary_key=True)\n    extra_data: Mapped[Optional[str]]\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parents\")\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"children\")\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Association\"]] = relationship(back_populates=\"parent\")\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Association\"]] = relationship(back_populates=\"child\")\n```\n\n----------------------------------------\n\nTITLE: Initializing MetaData with Naming Convention in Python\nDESCRIPTION: Demonstrates setting up a MetaData object with a naming convention for unique constraints that combines table and column names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData(\n    naming_convention={\"uq\": \"uq_%(table_name)s_%(column_0_N_name)s\"}\n)\n\ntable = Table(\n    \"info\",\n    metadata_obj,\n    Column(\"a\", Integer),\n    Column(\"b\", Integer),\n    Column(\"c\", Integer),\n    UniqueConstraint(\"a\", \"b\", \"c\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Join and Query Rendering with SQLAlchemy in Python\nDESCRIPTION: This snippet demonstrates how to perform joins using SQLAlchemy ORM to query data. It highlights deduplication of joins and proper alias usage to ensure SQL queries are constructed without unnecessary duplications. The example uses a simple session query setup to illustrate the concept.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nprint(s.query(A).join(A.bs).join(A.bs))\n```\n\n----------------------------------------\n\nTITLE: Executing UPDATE with RETURNING Clause in SQLAlchemy\nDESCRIPTION: Demonstrates how to create an UPDATE statement with a RETURNING clause using SQLAlchemy. The statement updates the 'fullname' column and returns the 'id' and 'name' columns for the affected rows.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nupdate_stmt = (\n    update(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .values(fullname=\"Patrick the Star\")\n    .returning(user_table.c.id, user_table.c.name)\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user_account SET fullname=:fullname\nWHERE user_account.name = :name_1\nRETURNING user_account.id, user_account.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Pool Size and Overflow in SQLAlchemy Engine\nDESCRIPTION: Example of creating a PostgreSQL engine with custom pool size and max overflow settings. This configures the default QueuePool to have 20 connections and no overflow capacity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\n    \"postgresql+psycopg2://me@localhost/mydb\", pool_size=20, max_overflow=0\n)\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy Insert Constructor\nDESCRIPTION: Shows how to use the Insert constructor. The Insert class allows for constructing INSERT statements, specifying values, and adding returning clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/dml.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninsert_stmt = insert(table).values(name='John').returning(table.c.id)\n```\n\n----------------------------------------\n\nTITLE: Defining Many-To-Many Relationships with Mapped Collections in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use SQLAlchemy's Mapped class to define a many-to-many relationship utilizing a set collection type. It highlights the configuration necessary for the Parent model, where the children are associated with the Child model using a secondary association table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[Set[\"Child\"]] = relationship(secondary=association_table)\n```\n\n----------------------------------------\n\nTITLE: Basic User Model with mapped_column() in Python\nDESCRIPTION: Demonstrates a basic SQLAlchemy ORM model using mapped_column() to define table columns with various data types and constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    fullname = mapped_column(String)\n    nickname = mapped_column(String(30))\n```\n\n----------------------------------------\n\nTITLE: Counting Related Objects with column_property\nDESCRIPTION: This snippet demonstrates how to use `column_property` with a correlated subquery to count the number of related Address objects for a User, showcasing sscalar subqueries in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy import select, func\nfrom sqlalchemy import Column, Integer, String, ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    address_count = column_property(\n        select(func.count(Address.id))\n        .where(Address.user_id == id)\n        .correlate_except(Address)\n        .scalar_subquery()\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Context Managers for Explicit Transaction Management\nDESCRIPTION: Shows the recommended patterns for explicit transaction management in SQLAlchemy 2.0. These approaches use context managers to clearly define transaction boundaries, replacing the deprecated autocommit behavior from earlier versions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith engine.begin() as conn:\n    conn.execute(some_table.insert().values(foo=\"bar\"))\n    conn.execute(some_other_table.insert().values(bat=\"hoho\"))\n\nwith engine.connect() as conn:\n    with conn.begin():\n        conn.execute(some_table.insert().values(foo=\"bar\"))\n        conn.execute(some_other_table.insert().values(bat=\"hoho\"))\n\nwith engine.begin() as conn:\n    conn.execute(text(\"EXEC my_procedural_thing()\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring One-to-One Relationship in SQLAlchemy ORM\nDESCRIPTION: This example shows how to set up a one-to-one relationship between Parent and Child classes using SQLAlchemy ORM. It demonstrates the use of Mapped annotations and the relationship function without collections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child: Mapped[\"Child\"] = relationship(back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n```\n\n----------------------------------------\n\nTITLE: Using Session as Context Manager in Python\nDESCRIPTION: Example of using a SQLAlchemy Session as a context manager to ensure proper closing of the session when operations are complete.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    result = session.execute(select(User))\n\n# closes session automatically\n```\n\n----------------------------------------\n\nTITLE: Basic UPDATE Statement in SQLAlchemy Core\nDESCRIPTION: Demonstrates how to construct a basic UPDATE statement using SQLAlchemy Core to modify rows in a database table based on a WHERE condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nstmt = (\n    update(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .values(fullname=\"Patrick the Star\")\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Joined Table Inheritance in SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to set up joined table inheritance for Employee and Manager classes. It shows the use of __tablename__, ForeignKey, relationship, and __mapper_args__ to configure the inheritance hierarchy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n__tablename__ = \"manager\"\nid: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\nmanager_name: Mapped[str]\n\ncompany_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\ncompany: Mapped[Company] = relationship(back_populates=\"managers\")\n\n__mapper_args__ = {\n    \"polymorphic_identity\": \"manager\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using asyncio scoped session (Python)\nDESCRIPTION: This snippet shows how to use async_scoped_session with asyncio. It creates an async_session_factory using async_sessionmaker and then instantiates AsyncScopedSession using asyncio.current_task as the scopefunc.  The scopefunc is used as the \"key\" in the registry, which needs to be idempotent and lightweight.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n    from asyncio import current_task\n\n    from sqlalchemy.ext.asyncio import (\n        async_scoped_session,\n        async_sessionmaker,\n    )\n\n    async_session_factory = async_sessionmaker(\n        some_async_engine,\n        expire_on_commit=False,\n    )\n    AsyncScopedSession = async_scoped_session(\n        async_session_factory,\n        scopefunc=current_task,\n    )\n    some_async_session = AsyncScopedSession()\n```\n\n----------------------------------------\n\nTITLE: Subquery IN Comparisons in SQLAlchemy\nDESCRIPTION: Examples of using the IN operator with subqueries in SQLAlchemy, including simple column subqueries and tuple subquery comparisons.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> print(column(\"x\").in_(select(user_table.c.id)))\n{printsql}x IN (SELECT user_account.id\nFROM user_account)\n\n>>> print(\n...     tuple_(column(\"x\"), column(\"y\")).in_(\n...         select(user_table.c.id, address_table.c.id).join(address_table)\n...     )\n... )\n{printsql}(x, y) IN (SELECT user_account.id, address.id\nFROM user_account JOIN address ON user_account.id = address.user_id)\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Events with sessionmaker\nDESCRIPTION: This example demonstrates how to listen for session events using `sqlalchemy.event` and `sqlalchemy.orm.sessionmaker`. It shows how to associate an event listener with a `sessionmaker`, which is a factory for creating `Session` objects. This is a useful form for listening to session events.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import sessionmaker\n\nmaker = sessionmaker()\n\n\n@event.listens_for(maker, \\\"transient_to_pending\\\")\ndef object_is_pending(session, obj):\n    print(\\\"new pending: %s\\\" % obj)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to a SQLAlchemy Session - Python\nDESCRIPTION: This code snippet shows how to add created User objects to a SQLAlchemy Session. It explains the 'pending' state where objects are registered in the Session but not yet committed to the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> session = Session(engine)\n>>> session.add(squidward)\n>>> session.add(krabs)\n>>> session.new\n```\n\n----------------------------------------\n\nTITLE: Geospatial Relationship with SQL Function Comparison\nDESCRIPTION: Demonstrates using a SQL function (ST_Contains) to define a spatial relationship between Polygon and Point models\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npoints = relationship(\n    \"Point\",\n    primaryjoin=\"func.ST_Contains(foreign(Polygon.geom), Point.geom).as_comparison(1, 2)\",\n    viewonly=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Populate Existing Option - Python SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use the `populate_existing` execution option with a SQLAlchemy query. It ensures that the ORM session refreshes instances by replacing their data with newly loaded data from the database. Parameters such as `User` object and `names` for filtering are crucial to this operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .where(User.name.in_(names))\n    .execution_options(populate_existing=True)\n    .options(selectinload(User.addresses))\n)\n# will refresh all matching User objects as well as the related\n# Address objects\nusers = session.execute(stmt).scalars().all()\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple-Parameter UPDATE with SQLAlchemy ORM Session\nDESCRIPTION: This snippet shows how to execute an UPDATE statement with multiple parameter sets using SQLAlchemy's ORM Session object, demonstrating commit-as-you-go behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    result = session.execute(\n        text(\"UPDATE some_table SET y=:y WHERE x=:x\"),\n        [{\"x\": 9, \"y\": 11}, {\"x\": 13, \"y\": 15}],\n    )\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Accessing the inserted primary key\nDESCRIPTION: This code retrieves the inserted primary key value after executing the INSERT statement. The `inserted_primary_key` attribute of the `CursorResult` object returns a tuple containing the primary key value(s).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    >>> result.inserted_primary_key\n    (1,)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MetaData in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to initialize a MetaData object, which serves as a container for Table objects in SQLAlchemy. This object is essential for managing database schema information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import MetaData\n>>> metadata_obj = MetaData()\n```\n\n----------------------------------------\n\nTITLE: Hiding SQL Parameters in Logging\nDESCRIPTION: Demonstrates how to prevent sensitive parameters from being logged by using the hide_parameters flag when creating an engine. This is useful for maintaining privacy and security.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> e = create_engine(\"sqlite://\", echo=True, hide_parameters=True)\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select :some_private_name\"), {\"some_private_name\": \"pii\"})\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLAlchemy Database and Session in Python\nDESCRIPTION: This snippet creates an in-memory SQLite database, initializes the schema, and sets up a SQLAlchemy session. It also adds sample data to the database, including User and Book records with relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_deferred_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\nBase.metadata.create_all(engine)\nconn = engine.connect()\nsession = Session(conn)\nsession.add_all(\n    [\n        User(\n            name=\"spongebob\",\n            fullname=\"Spongebob Squarepants\",\n            books=[\n                Book(\n                    title=\"100 Years of Krabby Patties\",\n                    summary=\"some long summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n                Book(\n                    title=\"Sea Catch 22\",\n                    summary=\"another long summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n                Book(\n                    title=\"The Sea Grapes of Wrath\",\n                    summary=\"yet another summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n            ],\n        ),\n        User(\n            name=\"sandy\",\n            fullname=\"Sandy Cheeks\",\n            books=[\n                Book(\n                    title=\"A Nut Like No Other\",\n                    summary=\"some long summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n                Book(\n                    title=\"Geodesic Domes: A Retrospective\",\n                    summary=\"another long summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n                Book(\n                    title=\"Rocketry for Squirrels\",\n                    summary=\"yet another summary\",\n                    cover_photo=b\"binary_image_data\",\n                ),\n            ],\n        ),\n    ]\n)\nsession.commit()\nsession.close()\nconn.begin()\n```\n\n----------------------------------------\n\nTITLE: Creating Engines for Various Databases in Python with SQLAlchemy\nDESCRIPTION: Provides examples of creating Engine instances for different database backends including PostgreSQL, MySQL, Oracle, Microsoft SQL Server, and SQLite using SQLAlchemy's create_engine function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# PostgreSQL\nengine = create_engine(\"postgresql://scott:tiger@localhost/mydatabase\")\n\n# MySQL\nengine = create_engine(\"mysql://scott:tiger@localhost/foo\")\n\n# Oracle\nengine = create_engine(\"oracle+oracledb://scott:tiger@127.0.0.1:1521/?service_name=freepdb1\")\n\n# Microsoft SQL Server\nengine = create_engine(\"mssql+pyodbc://scott:tiger@mydsn\")\n\n# SQLite\nengine = create_engine(\"sqlite:///foo.db\")\n\n# SQLite in-memory\nengine = create_engine(\"sqlite://\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Relationships with ON DELETE CASCADE in SQLAlchemy\nDESCRIPTION: Demonstrates how to set up a many-to-many relationship using an association table with ON DELETE CASCADE foreign key constraints and passive deletes configuration. Shows the complete setup including both Parent and Child classes with their respective relationship configurations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\", ondelete=\"CASCADE\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\", ondelete=\"CASCADE\")),\n)\n\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n        passive_deletes=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Department and Employee Tables (One to Many)\nDESCRIPTION: This SQL snippet defines two tables, 'department' and 'employee', establishing a one-to-many relationship where each department can have multiple employees. The 'dep_id' column in the 'employee' table is a foreign key referencing the 'id' column in the 'department' table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE department (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE employee (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30),\n    dep_id INTEGER REFERENCES department(id)\n)\"\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE with RETURNING Clause in SQLAlchemy\nDESCRIPTION: Shows how to create a DELETE statement with a RETURNING clause using SQLAlchemy. The statement deletes rows where the 'name' column equals 'patrick' and returns the 'id' and 'name' columns for the deleted rows.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndelete_stmt = (\n    delete(user_table)\n    .where(user_table.c.name == \"patrick\")\n    .returning(user_table.c.id, user_table.c.name)\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM user_account\nWHERE user_account.name = :name_1\nRETURNING user_account.id, user_account.name\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertex Class with Composite Columns using SQLAlchemy ORM\nDESCRIPTION: Defines a Vertex model class using SQLAlchemy's declarative base, mapping composite Point objects to pairs of database columns using the composite() construct.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase, Mapped\nfrom sqlalchemy.orm import composite, mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Vertex(Base):\n    __tablename__ = \"vertices\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    start: Mapped[Point] = composite(mapped_column(\"x1\"), mapped_column(\"y1\"))\n    end: Mapped[Point] = composite(mapped_column(\"x2\"), mapped_column(\"y2\"))\n\n    def __repr__(self):\n        return f\"Vertex(start={self.start}, end={self.end})\"\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Column Foreign Key in SQLAlchemy\nDESCRIPTION: Demonstrates how to create a single-column foreign key constraint using the ForeignKey object within a Table definition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser_preference = Table(\n    \"user_preference\",\n    metadata_obj,\n    Column(\"pref_id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.user_id\"), nullable=False),\n    Column(\"pref_name\", String(40), nullable=False),\n    Column(\"pref_value\", String(100)),\n)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Insert With On Conflict Example\nDESCRIPTION: Shows how to properly compile a PostgreSQL-specific insert statement with ON CONFLICT clause\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from sqlalchemy.dialects.postgresql import insert\n>>> from sqlalchemy import table, column\n>>> my_table = table(\"my_table\", column(\"x\"), column(\"y\"))\n>>> insert_stmt = insert(my_table).values(x=\"foo\")\n>>> insert_stmt = insert_stmt.on_conflict_do_nothing(index_elements=[\"y\"])\n>>> print(insert_stmt.compile(dialect=postgresql.dialect()))\n{printsql}INSERT INTO my_table (x) VALUES (%(x)s) ON CONFLICT (y) DO NOTHING\n```\n\n----------------------------------------\n\nTITLE: Using contains_eager with Explicit Joins for Collection Loading\nDESCRIPTION: Demonstrates how to use contains_eager to route the results of an explicit join into the User.addresses collection. This avoids redundant joins while still populating the related collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import contains_eager\n\nstmt = select(User).join(User.addresses).options(contains_eager(User.addresses))\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconnecting Engine in SQLAlchemy\nDESCRIPTION: A recipe that implements transparent reconnection for read-only autocommit operations in SQLAlchemy. The function wraps an engine with retry logic that handles disconnections during statement execution. It uses event listeners to intercept disconnections and retry operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom sqlalchemy import event\n\n\ndef reconnecting_engine(engine, num_retries, retry_interval):\n    def _run_with_retries(fn, context, cursor_obj, statement, *arg, **kw):\n        for retry in range(num_retries + 1):\n            try:\n                fn(cursor_obj, statement, context=context, *arg)\n            except engine.dialect.dbapi.Error as raw_dbapi_err:\n                connection = context.root_connection\n                if engine.dialect.is_disconnect(raw_dbapi_err, connection, cursor_obj):\n                    engine.logger.error(\n                        \"disconnection error, attempt %d/%d\",\n                        retry + 1,\n                        num_retries + 1,\n                        exc_info=True,\n                    )\n                    connection.invalidate()\n\n                    # use SQLAlchemy 2.0 API if available\n                    if hasattr(connection, \"rollback\"):\n                        connection.rollback()\n                    else:\n                        trans = connection.get_transaction()\n                        if trans:\n                            trans.rollback()\n\n                    if retry == num_retries:\n                        raise\n\n                    time.sleep(retry_interval)\n                    context.cursor = cursor_obj = connection.connection.cursor()\n                else:\n                    raise\n            else:\n                return True\n\n    e = engine.execution_options(isolation_level=\"AUTOCOMMIT\")\n\n    @event.listens_for(e, \"do_execute_no_params\")\n    def do_execute_no_params(cursor_obj, statement, context):\n        return _run_with_retries(\n            context.dialect.do_execute_no_params, context, cursor_obj, statement\n        )\n\n    @event.listens_for(e, \"do_execute\")\n    def do_execute(cursor_obj, statement, parameters, context):\n        return _run_with_retries(\n            context.dialect.do_execute, context, cursor_obj, statement, parameters\n        )\n\n    return e\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with Joinedload in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet illustrates how to perform eager loading using joinedload within a SQLAlchemy 1.4/2.0 compatible select statement. It selects User entities and specifies that the addresses relationship should be eagerly loaded during the query execution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = select(User).options(joinedload(User.addresses))\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Foreign Keys during Table Reflection in SQLAlchemy\nDESCRIPTION: New parameters resolve_fks and reflect.resolve_fks added to Table and MetaData to control automatic reflection of related tables encountered in ForeignKey objects. This can reduce SQL overhead and avoid reflection issues with certain tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nTable(..., resolve_fks=False)\nMetaData(...).reflect(resolve_fks=False)\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling for Multiple Asyncio Event Loops (Python)\nDESCRIPTION: This snippet shows how to disable connection pooling when sharing an AsyncEngine between multiple asyncio event loops. By setting the poolclass to NullPool, the engine will create a new connection for each operation, preventing issues related to task-loop conflicts.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    from sqlalchemy.ext.asyncio import create_async_engine\n    from sqlalchemy.pool import NullPool\n\n    engine = create_async_engine(\n        \"postgresql+asyncpg://user:pass@host/dbname\",\n        poolclass=NullPool,\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing Bulk ORM INSERT Statements in Python\nDESCRIPTION: This Python code illustrates how to execute bulk insert operations using SQLAlchemy's ORM. It uses the insert function to add multiple User records to the database. Dependencies include the SQLAlchemy ORM and setup of mapped classes. Inputs are a list of dictionaries with user data, and the operation optimizes performance for inserting many rows at once.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import insert\nsession.execute(\n    insert(User),\n    [\n        {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n        {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n        {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n        {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n        {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using SQL Expressions with SQLAlchemy ORM Sessions\nDESCRIPTION: Shows how to execute SQL expressions and strings within the transactional context of a Session. Demonstrates using both text-based SQL and SQLAlchemy expression language.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# execute a string statement\nresult = session.execute(text(\"select * from table where id=:id\"), {\"id\": 7})\n\n# execute a SQL expression construct\nresult = session.execute(select(mytable).where(mytable.c.id == 7))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Object State in SQLAlchemy\nDESCRIPTION: Example showing how to use SQLAlchemy's inspect() function to check the current state of a mapped object. Returns an InstanceState object with boolean flags indicating the object's persistence state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import inspect\n>>> insp = inspect(my_object)\n>>> insp.persistent\nTrue\n```\n\n----------------------------------------\n\nTITLE: Session Expunge and Expire Operations in SQLAlchemy\nDESCRIPTION: Shows how to use expunge and expire operations to manage object state in the Session, including examples of attribute access after expiration\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession.expunge(obj1)\n\n>>> user = session.scalars(select(User).filter_by(name=\"user1\").limit(1)).first()\n>>> session.expire(user)\n>>> user.__dict__\n{'_sa_instance_state': <...>}\n\n>>> print(user.name)\n>>> user.__dict__\n{'id': 1, 'name': u'user1', '_sa_instance_state': <...>}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Foreign Key in SQLAlchemy\nDESCRIPTION: Shows how to create a composite foreign key constraint using the ForeignKeyConstraint object within a Table definition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninvoice = Table(\n    \"invoice\",\n    metadata_obj,\n    Column(\"invoice_id\", Integer, primary_key=True),\n    Column(\"ref_num\", Integer, primary_key=True),\n    Column(\"description\", String(60), nullable=False),\n)\n\ninvoice_item = Table(\n    \"invoice_item\",\n    metadata_obj,\n    Column(\"item_id\", Integer, primary_key=True),\n    Column(\"item_name\", String(60), nullable=False),\n    Column(\"invoice_id\", Integer, nullable=False),\n    Column(\"ref_num\", Integer, nullable=False),\n    ForeignKeyConstraint(\n        [\"invoice_id\", \"ref_num\"], [\"invoice.invoice_id\", \"invoice.ref_num\"]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Objects to SQLAlchemy Session\nDESCRIPTION: Shows how to add multiple objects to the session at once using Session.add_all() method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsession.add_all([item1, item2, item3])\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Database URLs with Python\nDESCRIPTION: Shows how to use urllib.parse to properly escape special characters in database credentials when constructing a URL string for SQLAlchemy's create_engine function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport urllib.parse\n\n>>> urllib.parse.quote_plus(\"kx@jj5/g\")\n'kx%40jj5%2Fg'\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql+pg8000://dbuser:kx%40jj5%2Fg@pghost10/appdb\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Dataclass with Relationships\nDESCRIPTION: Demonstrates how to configure relationships in SQLAlchemy ORM dataclasses. Shows usage of default_factory for collections and default for scalar relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass Parent:\n    __tablename__ = \"parent\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        default_factory=list, back_populates=\"parent\"\n    )\n\n\n@reg.mapped_as_dataclass\nclass Child:\n    __tablename__ = \"child\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n    parent: Mapped[\"Parent\"] = relationship(default=None)\n```\n\n----------------------------------------\n\nTITLE: Executing Scalar Queries with SQLAlchemy Session\nDESCRIPTION: Example showing how to execute scalar queries using Session.scalars() and Session.execute() methods with select statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nuser_obj = session.scalars(statement).all()\n\n# query for individual columns\nstatement = select(User.name, User.fullname)\n\n# list of Row objects\nrows = session.execute(statement).all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Table Inheritance in SQLAlchemy ORM\nDESCRIPTION: This example shows how to set up single table inheritance for Employee, Manager, and Engineer classes. It demonstrates the use of a discriminator column, __mapper_args__, and how to handle subclass-specific columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\n\nclass Manager(Employee):\n    manager_data: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Table with a Foreign Key Constraint in SQLAlchemy\nDESCRIPTION: This snippet shows how to define a Table with a foreign key constraint using the ForeignKey object. The address table is created with a foreign key referencing the user_account table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import ForeignKey\n>>> address_table = Table(\n...     \"address\",\n...     metadata_obj,\n...     Column(\"id\", Integer, primary_key=True),\n...     Column(\"user_id\", ForeignKey(\"user_account.id\"), nullable=False),\n...     Column(\"email_address\", String, nullable=False),\n... )\n```\n\n----------------------------------------\n\nTITLE: Using Begin Method for Transaction Management in SQLAlchemy\nDESCRIPTION: This snippet shows the usage of the begin() method in SQLAlchemy to control transactions, indicating intent to manage transaction scope upfront. It automatically commits at the end of the block if successful. Inputs are SQL INSERT statements which require a pre-existing table, and the expected output is data insertion within a transaction scope.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# \"begin once\"\n>>> with engine.begin() as conn:\n...     conn.execute(\n...         text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n...         [{\"x\": 6, \"y\": 8}, {\"x\": 9, \"y\": 10}],\n...     )\n{execsql}BEGIN (implicit)\nINSERT INTO some_table (x, y) VALUES (?, ?)\n[...] [(6, 8), (9, 10)]\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\nCOMMIT\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Bidirectional Many-to-Many Relationship in SQLAlchemy\nDESCRIPTION: This snippet shows how to set up a bidirectional many-to-many relationship using an association table in SQLAlchemy ORM. It demonstrates the use of back_populates to establish the bidirectional link.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import Table\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nassociation_table = Table(\n    \"association_table\",\n    Base.metadata,\n    Column(\"left_id\", ForeignKey(\"left_table.id\"), primary_key=True),\n    Column(\"right_id\", ForeignKey(\"right_table.id\"), primary_key=True),\n)\n\n\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[Child]] = relationship(\n        secondary=association_table, back_populates=\"parents\"\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[Parent]] = relationship(\n        secondary=association_table, back_populates=\"children\"\n    )\n```\n\n----------------------------------------\n\nTITLE: NULL Comparisons with IS in SQLAlchemy\nDESCRIPTION: Demonstrates NULL comparisons using the is_() operator in SQLAlchemy, showing how to explicitly test if a column is NULL using either Python None or the null() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(column(\"x\").is_(None))\n{printsql}x IS NULL\n\n>>> from sqlalchemy import null\n>>> print(column(\"x\").is_(null()))\n{printsql}x IS NULL\n\n>>> a = None\n>>> print(column(\"x\") == a)\n{printsql}x IS NULL\n```\n\n----------------------------------------\n\nTITLE: Managing Nested Transactions with SQLAlchemy Engine in Python\nDESCRIPTION: This code showcases using nested transactions with SQLAlchemy by creating a savepoint with the Engine's begin_nested method. This savepoint can be committed or rolled back independently within the main transaction context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nengine = create_engine(\"postgresql+psycopg2://user:pass@host/dbname\")\n\nwith engine.begin() as conn:\n    savepoint = conn.begin_nested()\n    conn.execute(\n        some_table.insert(),\n        [\n            {\"data\": \"some data one\"},\n            {\"data\": \"some data two\"},\n            {\"data\": \"some data three\"},\n        ],\n    )\n    savepoint.commit()  # or rollback\n\n# commits automatically\n```\n\n----------------------------------------\n\nTITLE: ORM UPDATE with Custom WHERE Criteria in SQLAlchemy\nDESCRIPTION: Example of using update() with custom WHERE criteria to perform an UPDATE operation affecting multiple rows at once. The where() method is used to specify the criteria, and values() is used to set the update values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nstmt = (\n    update(User)\n    .where(User.name.in_([\"squidward\", \"sandy\"]))\n    .values(fullname=\"Name starts with S\")\n)\nsession.execute(stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user_account SET fullname=? WHERE user_account.name IN (?, ?)\n[...] ('Name starts with S', 'squidward', 'sandy')\n```\n\n----------------------------------------\n\nTITLE: Query Migration using Aliased Objects - 2.0 Style\nDESCRIPTION: 2.0 style query using select() and aliased() objects, showing explicit limit and scalar result handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\n\nsubquery = select(User).where(User.name.like(\"%somename%\")).subquery()\n\nua = aliased(User, subquery)\n\nuser = session.execute(select(ua).order_by(ua.id).limit(1)).scalars().first()\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform GUID TypeDecorator in SQLAlchemy\nDESCRIPTION: A TypeDecorator that handles UUIDs across different database platforms, using native UUID types where available and falling back to string storage.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom operator import attrgetter\nfrom sqlalchemy.types import TypeDecorator, CHAR\nfrom sqlalchemy.dialects.mssql import UNIQUEIDENTIFIER\nfrom sqlalchemy.dialects.postgresql import UUID\nimport uuid\n\nclass GUID(TypeDecorator):\n    \"\"\"Platform-independent GUID type.\n\n    Uses PostgreSQL's UUID type or MSSQL's UNIQUEIDENTIFIER,\n    otherwise uses CHAR(32), storing as stringified hex values.\n    \"\"\"\n\n    impl = CHAR\n    cache_ok = True\n\n    _default_type = CHAR(32)\n    _uuid_as_str = attrgetter(\"hex\")\n\n    def load_dialect_impl(self, dialect):\n        if dialect.name == \"postgresql\":\n            return dialect.type_descriptor(UUID())\n        elif dialect.name == \"mssql\":\n            return dialect.type_descriptor(UNIQUEIDENTIFIER())\n        else:\n            return dialect.type_descriptor(self._default_type)\n\n    def process_bind_param(self, value, dialect):\n        if value is None or dialect.name in (\"postgresql\", \"mssql\"):\n            return value\n        else:\n            if not isinstance(value, uuid.UUID):\n                value = uuid.UUID(value)\n            return self._uuid_as_str(value)\n\n    def process_result_value(self, value, dialect):\n        if value is None:\n            return value\n        else:\n            if not isinstance(value, uuid.UUID):\n                value = uuid.UUID(value)\n            return value\n```\n\n----------------------------------------\n\nTITLE: Adding Criteria to Loader Options in SQLAlchemy - Python\nDESCRIPTION: This code snippet illustrates how to add criteria to loader options in SQLAlchemy using the .PropComparator.and_ method. This feature allows filtering of loaded results based on specific conditions, enhancing control over the data retrieved with relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import select\n```\n\n----------------------------------------\n\nTITLE: Joining to Subqueries in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to join from an entity to a subquery using an explicit join condition. The example creates a subquery for addresses with a specific email and joins it to the User entity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsubq = select(Address).where(Address.email_address == \"pat999@aol.com\").subquery()\nstmt = select(User).join(subq, User.id == subq.c.user_id)\nprint(stmt)\n```\n\n----------------------------------------\n\nTITLE: Concrete Polymorphic Loading with ConcreteBase in SQLAlchemy\nDESCRIPTION: Demonstrates how to configure polymorphic loading with concrete inheritance using the ConcreteBase helper class from SQLAlchemy. This allows querying the base class to return instances of all subclasses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import ConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewonly Many-to-Many Relationships in SQLAlchemy\nDESCRIPTION: Shows how to configure many-to-many relationships with viewonly parameter to prevent conflicting writes and NULL values in association columns while maintaining read capabilities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Child, bypassing the `Association` class\n    children: Mapped[List[\"Child\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"parents\", viewonly=True\n    )\n\n    # association between Parent -> Association -> Child\n    child_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"parent\"\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"right_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # many-to-many relationship to Parent, bypassing the `Association` class\n    parents: Mapped[List[\"Parent\"]] = relationship(\n        secondary=\"association_table\", back_populates=\"children\", viewonly=True\n    )\n\n    # association between Child -> Association -> Parent\n    parent_associations: Mapped[List[\"Association\"]] = relationship(\n        back_populates=\"child\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Constraints with ON UPDATE/DELETE in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to create foreign key constraints with ON UPDATE and ON DELETE clauses in SQLAlchemy. It shows examples for both single-column and composite foreign keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchild = Table(\n    \"child\",\n    metadata_obj,\n    Column(\n        \"id\",\n        Integer,\n        ForeignKey(\"parent.id\", onupdate=\"CASCADE\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    ),\n)\n\ncomposite = Table(\n    \"composite\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"rev_id\", Integer),\n    Column(\"note_id\", Integer),\n    ForeignKeyConstraint(\n        [\"rev_id\", \"note_id\"],\n        [\"revisions.id\", \"revisions.note_id\"],\n        onupdate=\"CASCADE\",\n        ondelete=\"SET NULL\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SQLAlchemy ORM\nDESCRIPTION: Shows two different approaches to deleting data: removing items from collections (cascade delete) and direct object deletion using Session.delete().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/quickstart.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsandy = session.get(User, 2)\nsandy.addresses.remove(sandy_address)\nsession.flush()\n\nsession.delete(patrick)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session Expire and Lazy Loading in SQLAlchemy\nDESCRIPTION: Shows how to expire attributes on persistent objects and demonstrates lazy loading behavior with foreign key relationships. Includes examples of both persistent and pending object states.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\no = session.scalars(select(SomeClass).limit(1)).first()\no.foo_id = 7\nSession.expire(o, [\"foo\"])  # object must be persistent for this\n\nfoo_7 = session.get(Foo, 7)\n\nassert o.foo is foo_7  # o.foo lazyloads on access\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Key Constraints in SQLAlchemy\nDESCRIPTION: This snippet shows how to explicitly define a primary key constraint in SQLAlchemy using the PrimaryKeyConstraint object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import PrimaryKeyConstraint\n\nmy_table = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"id\", Integer),\n    Column(\"version_id\", Integer),\n    Column(\"data\", String(50)),\n    PrimaryKeyConstraint(\"id\", \"version_id\", name=\"mytable_pk\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Indexes in SQLAlchemy\nDESCRIPTION: This snippet explains how to create functional indexes in SQLAlchemy, demonstrating the use of SQL and function expressions within the index's definition. It provides examples for creating a descending index and a case-insensitive index using the `lower()` function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Index\n\nIndex(\"someindex\", mytable.c.somecol.desc())\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func, Index\n\nIndex(\"someindex\", func.lower(mytable.c.somecol))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AND/OR Conjunctions with SQLAlchemy in Python\nDESCRIPTION: This snippet demonstrates the use of the and_ and or_ functions from SQLAlchemy to construct WHERE clauses in SQL queries. The example selects email addresses from the address table where the user's name matches specific values or the user ID matches between tables. Dependencies include the SQLAlchemy library and references to columns from defined tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import and_, or_\nprint(\n    select(address_table.c.email_address).where(\n        and_(\n            or_(user_table.c.name == \"squidward\", user_table.c.name == \"sandy\"),\n            address_table.c.user_id == user_table.c.id,\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy ORM Models in Python\nDESCRIPTION: This snippet defines several SQLAlchemy ORM models including Base, User, Address, and LogRecord. It demonstrates the use of Mapped types, relationships, and repr methods.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\n    pass\nclass User(Base):\n    __tablename__ = \"user_account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(unique=True)\n    fullname: Mapped[Optional[str]]\n    species: Mapped[Optional[str]]\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n    def __repr__(self) -> str:\n        return f\"User(name={self.name!r}, fullname={self.fullname!r})\"\nclass Address(Base):\n    __tablename__ = \"address\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    email_address: Mapped[str]\n    user: Mapped[User] = relationship(back_populates=\"addresses\")\n\n    def __repr__(self) -> str:\n        return f\"Address(email_address={self.email_address!r})\"\nclass LogRecord(Base):\n    __tablename__ = \"log_record\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    message: Mapped[str]\n    code: Mapped[str]\n    timestamp: Mapped[datetime.datetime]\n\n    def __repr__(self):\n        return f\"LogRecord({self.message!r}, {self.code!r}, {self.timestamp!r})\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Objects by Dependency in SQLAlchemy\nDESCRIPTION: This code snippet shows how to use the sorted_tables attribute of MetaData to sort Table objects based on their dependencies.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\n# ... add Table objects to metadata\nti = metadata_obj.sorted_tables\nfor t in ti:\n    print(t)\n```\n\n----------------------------------------\n\nTITLE: Aliasing ORM Entities in a SELECT Statement Using SQLAlchemy Python\nDESCRIPTION: Demonstrates aliasing of ORM entities in a SQLAlchemy SELECT statement to refer to them with custom names in result rows. Useful for cases where different naming is desired in the query result. The code requires SQLAlchemy's aliased construct, select function, and an ORM session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\nuser_cls = aliased(User, name=\"user_cls\")\nemail_cls = aliased(Address, name=\"email\")\nstmt = (\n    select(user_cls, email_cls)\n    .join(user_cls.addresses.of_type(email_cls))\n    .order_by(user_cls.id, email_cls.id)\n)\nrow = session.execute(stmt).first()\nprint(f\"{row.user_cls.name} {row.email.email_address}\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Viewonly Relationship Example with Time-based Filtering\nDESCRIPTION: A complete example demonstrating viewonly relationships in SQLAlchemy, showing a User-Task relationship where one relationship returns all tasks and another returns only tasks from the current week using a custom primaryjoin condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport datetime\n\nfrom sqlalchemy import and_\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str | None]\n\n    all_tasks: Mapped[list[Task]] = relationship()\n\n    current_week_tasks: Mapped[list[Task]] = relationship(\n        primaryjoin=lambda: and_(\n            User.id == Task.user_account_id,\n            # this expression works on PostgreSQL but may not be supported\n            # by other database engines\n            Task.task_date >= func.now() - datetime.timedelta(days=7),\n        ),\n        viewonly=True,\n    )\n\n\nclass Task(Base):\n    __tablename__ = \"task\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_account_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    description: Mapped[str | None]\n    task_date: Mapped[datetime.datetime] = mapped_column(server_default=func.now())\n\n    user: Mapped[User] = relationship(back_populates=\"current_week_tasks\")\n```\n\n----------------------------------------\n\nTITLE: SQL Expression Defaults for Columns\nDESCRIPTION: Demonstrates using SQL functions and expressions as default values and update triggers for columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nt = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    # define 'create_date' to default to now()\n    Column(\"create_date\", DateTime, default=func.now()),\n    # define 'key' to pull its default from the 'keyvalues' table\n    Column(\n        \"key\",\n        String(20),\n        default=select(keyvalues.c.key).where(keyvalues.c.type=\"type1\"),\n    ),\n    # define 'last_modified' to use the current_timestamp SQL function on update\n    Column(\"last_modified\", DateTime, onupdate=func.utc_timestamp()),\n)\n```\n\n----------------------------------------\n\nTITLE: Using AliasedClass as Relationship Target in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use AliasedClass as the target of a relationship, replacing the need for non-primary mappers. This preserves relationships and allows loader options to work normally.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import relationship, aliased\n\nAliasedUser = aliased(User)\nclass Address(Base):\n    __tablename__ = 'address'\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('user.id'))\n    user = relationship(AliasedUser)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Behavior in SQLAlchemy ORM Relationships (Python)\nDESCRIPTION: Demonstrates how to set up cascade behavior on relationships using the 'cascade' parameter. Shows examples for both direct relationships and backrefs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Order(Base):\n    __tablename__ = \"order\"\n\n    items = relationship(\"Item\", cascade=\"all, delete-orphan\")\n    customer = relationship(\"User\", cascade=\"save-update\")\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    order = relationship(\n        \"Order\", backref=backref(\"items\", cascade=\"all, delete-orphan\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing MetaData and Registry from Declarative Base\nDESCRIPTION: Demonstrates how to access the MetaData collection and registry objects that are automatically created with the Declarative Base. These objects are central to ORM configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> Base.metadata\nMetaData()\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Base.registry\n<sqlalchemy.orm.decl_api.registry object at 0x...>\n```\n\n----------------------------------------\n\nTITLE: Loading ORM Entities from Textual SQL in SQLAlchemy\nDESCRIPTION: Shows how to load ORM entities from textual SQL statements by adding column information and using from_statement().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import text\ntextual_sql = text(\"SELECT id, name, fullname FROM user_account ORDER BY id\")\ntextual_sql = textual_sql.columns(User.id, User.name, User.fullname)\norm_sql = select(User).from_statement(textual_sql)\n```\n\n----------------------------------------\n\nTITLE: Compiling an INSERT statement in SQLAlchemy Core\nDESCRIPTION: This example demonstrates how to compile an `Insert` object to get a database-specific compiled form. This compiled object includes the SQL representation of the statement and the bound parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    >>> compiled = stmt.compile()\n\n```\n\n----------------------------------------\n\nTITLE: Correlated Subquery UPDATE Statement\nDESCRIPTION: Example of creating an UPDATE statement that uses a correlated subquery to set values based on data from another table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscalar_subq = (\n    select(address_table.c.email_address)\n    .where(address_table.c.user_id == user_table.c.id)\n    .order_by(address_table.c.id)\n    .limit(1)\n    .scalar_subquery()\n)\nupdate_stmt = update(user_table).values(fullname=scalar_subq)\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Many-to-Many Relationship in SQLAlchemy with Type Hints\nDESCRIPTION: Implements a bidirectional many-to-many relationship between Node instances using an association table. Uses type hints and demonstrates both right_nodes and left_nodes relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom sqlalchemy import Integer, ForeignKey, Column, Table\nfrom sqlalchemy.orm import DeclarativeBase, Mapped\nfrom sqlalchemy.orm import mapped_column, relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nnode_to_node = Table(\n    \"node_to_node\",\n    Base.metadata,\n    Column(\"left_node_id\", Integer, ForeignKey(\"node.id\"), primary_key=True),\n    Column(\"right_node_id\", Integer, ForeignKey(\"node.id\"), primary_key=True),\n)\n\n\nclass Node(Base):\n    __tablename__ = \"node\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    label: Mapped[str]\n    right_nodes: Mapped[List[\"Node\"]] = relationship(\n        \"Node\",\n        secondary=node_to_node,\n        primaryjoin=id == node_to_node.c.left_node_id,\n        secondaryjoin=id == node_to_node.c.right_node_id,\n        back_populates=\"left_nodes\",\n    )\n    left_nodes: Mapped[List[\"Node\"]] = relationship(\n        \"Node\",\n        secondary=node_to_node,\n        primaryjoin=id == node_to_node.c.right_node_id,\n        secondaryjoin=id == node_to_node.c.left_node_id,\n        back_populates=\"right_nodes\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Using contains_eager in SQLAlchemy to Leverage Explicit Joins\nDESCRIPTION: This example demonstrates how to use contains_eager with an explicitly defined join to both filter results based on the related entity and eagerly load the related data without duplicating joins.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import contains_eager\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(contains_eager(Address.user))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user_account.id, user_account.name, user_account.fullname,\naddress.id AS id_1, address.email_address, address.user_id\nFROM address JOIN user_account ON user_account.id = address.user_id\nWHERE user_account.name = ? ORDER BY address.id\n```\n\n----------------------------------------\n\nTITLE: Adding Mutability to JSONEncodedDict in SQLAlchemy\nDESCRIPTION: Shows how to add mutability support to the JSONEncodedDict type using sqlalchemy.ext.mutable extension. This allows the ORM to detect in-place changes to values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\njson_type = MutableDict.as_mutable(JSONEncodedDict)\n\n\nclass MyClass(Base):\n    #  ...\n\n    json_data = Column(json_type)\n```\n\n----------------------------------------\n\nTITLE: Using Hybrid Properties in SQLAlchemy\nDESCRIPTION: This example demonstrates how to use `hybrid_property` to create attributes with both instance-level getter/setter behavior and SQL expression behavior at the class level. This allows the attribute to be used in queries and expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\n\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```\n\n----------------------------------------\n\nTITLE: Chaining Loader Options for Nested Relationships - Python\nDESCRIPTION: This code snippet demonstrates the chaining of loader options to configure how collections are loaded in nested relationships. It shows how to specify that when Parent's children collection is accessed, it should use a combination of lazyloading for children and eager loading for their subelements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Parent).options(\n    joinedload(Parent.children).subqueryload(Child.subelements)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Relationships to Join Tables in SQLAlchemy Queries\nDESCRIPTION: Demonstrates how to use ORM relationship objects to create JOIN queries in SQLAlchemy, where the relationship provides both the target and the join condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(select(Address.email_address).select_from(User).join(User.addresses))\n{printsql}SELECT address.email_address\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Embedding SQL Insert/Update Expressions in SQLAlchemy ORM Flush\nDESCRIPTION: Demonstrates how to set a database column value to a SQL expression instead of a literal value, useful for atomic updates and stored procedure calls. Works for both INSERT and UPDATE statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    # ...\n\n    value = mapped_column(Integer)\n\n\nsomeobject = session.get(SomeClass, 5)\n\n# set 'value' attribute to a SQL expression adding one\nsomeobject.value = SomeClass.value + 1\n\n# issues \"UPDATE some_table SET value=value+1\"\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Using load_only with SQLAlchemy ORM in Python\nDESCRIPTION: The snippet demonstrates the use of the load_only loader option to explicitly load only specified columns of an entity. Dependencies include SQLAlchemy ORM and an active database session. Key parameters are entity class attributes specifying the columns to load. This method minimizes data retrieval for better performance by fetching only necessary columns via a SELECT statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import load_only\nstmt = select(Book).options(load_only(Book.title, Book.summary))\nbooks = session.scalars(stmt).all()\nfor book in books:\n    print(f\"{book.title}  {book.summary}\")\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncSession with expire_on_commit=False in SQLAlchemy\nDESCRIPTION: Python code showing how to create AsyncSession instances with expire_on_commit=False, both directly and with async_sessionmaker. This configuration allows attribute access after commit without triggering database access.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# create AsyncSession with expire_on_commit=False\nasync_session = AsyncSession(engine, expire_on_commit=False)\n\n# sessionmaker version\nasync_session = async_sessionmaker(engine, expire_on_commit=False)\n\nasync with async_session() as session:\n    result = await session.execute(select(A).order_by(A.id))\n\n    a1 = result.scalars().first()\n\n    # commit would normally expire all attributes\n    await session.commit()\n\n    # access attribute subsequent to commit; this is what\n    # expire_on_commit=False allows\n    print(a1.data)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IS NOT Operator in SQLAlchemy\nDESCRIPTION: Shows how to use the is_not() method and != operator to generate SQL IS NOT expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").is_not(None))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx IS NOT NULL\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") != None)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Type-Aware ORM Class Definition with DeclarativeBase\nDESCRIPTION: Defines ORM models using SQLAlchemy's new type-aware syntax with Mapped types and mapped_column annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    addresses: Mapped[List[\"Address\"]] = relationship()\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email_address: Mapped[str]\n    user_id = mapped_column(ForeignKey(\"user_account.id\"))\n```\n\n----------------------------------------\n\nTITLE: Executing Update Statements with SQLAlchemy ORM in Python\nDESCRIPTION: This snippet demonstrates how to execute an SQL UPDATE statement using SQLAlchemy's ORM session and update construct in Python. It includes synchronization options for session states. The `synchronize_session` option is used to synchronize the ORM session with changes made directly in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(update(User).where(User.name == \"foo\").values(fullname=\"Foo Bar\").execution_options(synchronize_session=\"evaluate\"))\n```\n\n----------------------------------------\n\nTITLE: Querying with Association Proxies in SQLAlchemy\nDESCRIPTION: Demonstrates querying using association proxies with equality and LIKE operators, generating SQL with EXISTS subqueries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> print(session.scalars(select(User).where(User.special_keys == \"jek\")))\n{printsql}SELECT \"user\".id AS user_id, \"user\".name AS user_name\nFROM \"user\"\nWHERE EXISTS (SELECT 1\nFROM user_keyword\nWHERE \"user\".id = user_keyword.user_id AND user_keyword.special_key = :special_key_1)\n\n>>> print(session.scalars(select(User).where(User.special_keys.like(\"%jek\"))))\n{printsql}SELECT \"user\".id AS user_id, \"user\".name AS user_name\nFROM \"user\"\nWHERE EXISTS (SELECT 1\nFROM user_keyword\nWHERE \"user\".id = user_keyword.user_id AND user_keyword.special_key LIKE :special_key_1)\n\n>>> print(session.scalars(select(User).where(User.keywords.any(Keyword.keyword == \"jek\"))))\n{printsql}SELECT \"user\".id AS user_id, \"user\".name AS user_name\nFROM \"user\"\nWHERE EXISTS (SELECT 1\nFROM user_keyword\nWHERE \"user\".id = user_keyword.user_id AND (EXISTS (SELECT 1\nFROM keyword\nWHERE keyword.id = user_keyword.keyword_id AND keyword.keyword = :keyword_1)))\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Events in SQLAlchemy\nDESCRIPTION: This example demonstrates how to listen for session events using the `sqlalchemy.event` module. It shows how to associate an event listener with a specific `Session` object, and a `sessionmaker`, allowing for custom logic to be executed when a particular event occurs. This approach allows for tracking object lifecycle events.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import Session\n\nsession = Session()\n\n\n@event.listens_for(session, \\\"transient_to_pending\\\")\ndef object_is_pending(session, obj):\n    print(\\\"new pending: %s\\\" % obj)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Overloaded Operators for SQL Conjunctions with SQLAlchemy in Python\nDESCRIPTION: This snippet showcases the use of overloaded Python operators & (and), | (or), and ~ (not) to perform SQL conjunctions in expressions using SQLAlchemy, demonstrating how these operators are syntactically sugar over their function equivalents. Ensure proper use of parentheses due to operator precedence in Python.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nprint((column(\"x\") == 5) & (column(\"y\") == 10))\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint((column(\"x\") == 5) | (column(\"y\") == 10))\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(~(column(\"x\") == 5))\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Boolean\nprint(~column(\"x\", Boolean))\n```\n\n----------------------------------------\n\nTITLE: Handling INSERT Statements with RETURNING Clause in Python\nDESCRIPTION: This Python snippet demonstrates how to leverage the RETURNING clause with bulk INSERT operations in SQLAlchemy's ORM. It returns newly inserted ORM objects by specifying the User entity in the returning method. Required backends must support SQL RETURNING syntax. The input is a list of user data dictionaries, and the output is a Result object with ORM mapped instances.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nusers = session.scalars(\n    insert(User).returning(User),\n    [\n        {\"name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n        {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\"},\n        {\"name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n        {\"name\": \"squidward\", \"fullname\": \"Squidward Tentacles\"},\n        {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\"},\n    ],\n)\nprint(users.all())\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in SQLAlchemy\nDESCRIPTION: Demonstrates the correct way to create and use subqueries with SQLAlchemy select statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsubq = stmt.subquery()\n\nnew_stmt_1 = select(subq)\n\nnew_stmt_2 = select(some_table).select_from(some_table.join(subq))\n```\n\n----------------------------------------\n\nTITLE: Mapping SQL Expressions with column_property\nDESCRIPTION: This snippet illustrates how to use `column_property` to create a mapped attribute that reflects a SQL expression, enabling efficient loading along with other mapped attributes at query time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import column_property\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n    fullname = column_property(firstname + \" \" + lastname)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Class against Multiple Tables using Declarative Base in Python\nDESCRIPTION: This snippet demonstrates how to define multiple tables and map a class to the join of these tables using SQLAlchemy's ORM. It shows how to create Table objects, define a join, and use column_property for complex mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/nonstandard_mappings.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, join, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import column_property\n\nmetadata_obj = MetaData()\n\n# define two Table objects\nuser_table = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n)\n\naddress_table = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String),\n)\n\n# define a join between them.  This\n# takes place across the user.id and address.user_id\n# columns.\nuser_address_join = join(user_table, address_table)\n\n\nclass Base(DeclarativeBase):\n    metadata = metadata_obj\n\n\n# map to it\nclass AddressUser(Base):\n    __table__ = user_address_join\n\n    id = column_property(user_table.c.id, address_table.c.user_id)\n    address_id = address_table.c.id\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Session Routing Logic in SQLAlchemy\nDESCRIPTION: Shows how to create a custom Session class that routes operations to different engines based on class types and operation types. It implements rules for directing write operations, operations on specific classes, and distributing read operations across follower databases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nengines = {\n    \"leader\": create_engine(\"sqlite:///leader.db\"),\n    \"other\": create_engine(\"sqlite:///other.db\"),\n    \"follower1\": create_engine(\"sqlite:///follower1.db\"),\n    \"follower2\": create_engine(\"sqlite:///follower2.db\"),\n}\n\nfrom sqlalchemy.sql import Update, Delete\nfrom sqlalchemy.orm import Session, sessionmaker\nimport random\n\n\nclass RoutingSession(Session):\n    def get_bind(self, mapper=None, clause=None):\n        if mapper and issubclass(mapper.class_, MyOtherClass):\n            return engines[\"other\"]\n        elif self._flushing or isinstance(clause, (Update, Delete)):\n            # NOTE: this is for example, however in practice reader/writer\n            # splits are likely more straightforward by using two distinct\n            # Sessions at the top of a \"reader\" or \"writer\" operation.\n            # See note below\n            return engines[\"leader\"]\n        else:\n            return engines[random.choice([\"follower1\", \"follower2\"])]\n```\n\n----------------------------------------\n\nTITLE: Basic Single Table Inheritance Example\nDESCRIPTION: Demonstrates basic single table inheritance setup with Employee as base class and Manager/Engineer as subclasses. Uses polymorphic identity and relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n\nclass Manager(Employee):\n    manager_name: Mapped[str] = mapped_column(nullable=True)\n\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"managers\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n\n\nclass Engineer(Employee):\n    engineer_info: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Bulk INSERT of New Items in SQLAlchemy ORM\nDESCRIPTION: This snippet illustrates how to perform bulk inserts of new items into a related table using the SQLAlchemy ORM. It covers generating an INSERT statement and executing it within a session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> session.execute(\n...     existing_account.account_transactions.insert(),\n...     [\n...         {\"description\": \"transaction 1\", \"amount\": Decimal(\"47.50\")},\n...         {\"description\": \"transaction 2\", \"amount\": Decimal(\"-501.25\")},\n...         {\"description\": \"transaction 3\", \"amount\": Decimal(\"1800.00\")},\n...         {\"description\": \"transaction 4\", \"amount\": Decimal(\"-300.00\")},\n...     ],\n... )\n{execsql}BEGIN (implicit)\nINSERT INTO account_transaction (account_id, description, amount, timestamp) VALUES (?, ?, ?, CURRENT_TIMESTAMP)\n[...] [(1, 'transaction 1', 47.5), (1, 'transaction 2', -501.25), (1, 'transaction 3', 1800.0), (1, 'transaction 4', -300.0)]\n<...>\n{stop}\n>>> session.commit()\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Selectin Loading with User and Addresses\nDESCRIPTION: Demonstrates using selectinload to efficiently load related Address objects for Users with specific name conditions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = (\n...     select(User)\n...     .options(selectinload(User.addresses))\n...     .filter(or_(User.name == \"spongebob\", User.name == \"ed\"))\n... )\n>>> result = session.scalars(stmt).all()\n```\n\n----------------------------------------\n\nTITLE: Performing a Baked Query for Improved Performance - Python\nDESCRIPTION: This snippet demonstrates a performance comparison between a traditional ORM query and a baked query. The baked query's construction and SQL string formulation steps are cached, dramatically reducing Python function calls when executed repeatedly. It illustrates the performance benefits when queries return minimal results (e.g., single rows).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsession = Session(bind=engine)\nfor id_ in random.sample(ids, n):\n    session.query(Customer).filter(Customer.id == id_).one()\n\nbakery = baked.bakery()\ns = Session(bind=engine)\nfor id_ in random.sample(ids, n):\n    q = bakery(lambda s: s.query(Customer))\n    q += lambda q: q.filter(Customer.id == bindparam(\"id\"))\n    q(s).params(id=id_).one()\n```\n\n----------------------------------------\n\nTITLE: Join to a Target Entity with SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates joining directly to a mapped entity, `Address`. The `join` method attempts to infer the ON clause based on the foreign key relationships between the involved tables.  It will raise an error if the foreign key relationships are ambiguous.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(Address)\n```\n\n----------------------------------------\n\nTITLE: Foreign Key ON DELETE Cascade Configuration\nDESCRIPTION: Demonstrates configuring both ORM-level and database-level cascade delete using foreign key constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        back_populates=\"parent\",\n        cascade=\"all, delete\",\n        passive_deletes=True,\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"parent.id\", ondelete=\"CASCADE\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```\n\n----------------------------------------\n\nTITLE: Tuple IN Expressions in SQLAlchemy\nDESCRIPTION: Demonstrates tuple comparison with IN expressions in SQLAlchemy using the tuple_() construct. Shows both the syntax and execution with actual database parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import tuple_\n>>> tup = tuple_(column(\"x\", Integer), column(\"y\", Integer))\n>>> expr = tup.in_([(1, 2), (3, 4)])\n>>> print(expr)\n{printsql}(x, y) IN (__[POSTCOMPILE_param_1])\n\n>>> tup = tuple_(User.id, Address.id)\n>>> stmt = select(User.name).join(Address).where(tup.in_([(1, 1), (2, 2)]))\n>>> conn.execute(stmt).all()\n{execsql}SELECT user_account.name\nFROM user_account JOIN address ON user_account.id = address.user_id\nWHERE (user_account.id, address.id) IN (VALUES (?, ?), (?, ?))\n[...] (1, 1, 2, 2){stop}\n[('spongebob',), ('sandy',)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Active History for Column Properties in SQLAlchemy\nDESCRIPTION: Demonstrates setting the active_history parameter on a column property to ensure that previous values are tracked when attributes change. This enables proper history tracking at the cost of additional SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import deferred\n\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"important_identifier\", String),\n)\n\n\nclass User(Base):\n    __table__ = user_table\n\n    important_identifier = column_property(\n        user_table.c.important_identifier, active_history=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Point Dataclass for Composite Columns in Python\nDESCRIPTION: Creates a simple Point dataclass with x and y integer attributes to represent coordinate pairs that will be mapped to database columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\n\n@dataclasses.dataclass\nclass Point:\n    x: int\n    y: int\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL FILTER keyword with aggregate functions\nDESCRIPTION: Shows how to use the SQL standard FILTER keyword for aggregate functions, now supported by PostgreSQL as of version 9.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfunc.count(1).filter(True)\n```\n\n----------------------------------------\n\nTITLE: Classical Mapping for Self-Referential Many-to-Many in SQLAlchemy\nDESCRIPTION: Shows how to create a self-referential many-to-many relationship using classical mapping style instead of declarative. Demonstrates explicit table definitions and mapper configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, ForeignKey, String, Column, Table, MetaData\nfrom sqlalchemy.orm import relationship, registry\n\nmetadata_obj = MetaData()\nmapper_registry = registry()\n\nnode_to_node = Table(\n    \"node_to_node\",\n    metadata_obj,\n    Column(\"left_node_id\", Integer, ForeignKey(\"node.id\"), primary_key=True),\n    Column(\"right_node_id\", Integer, ForeignKey(\"node.id\"), primary_key=True),\n)\n\nnode = Table(\n    \"node\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"label\", String),\n)\n\n\nclass Node:\n    pass\n\n\nmapper_registry.map_imperatively(\n    Node,\n    node,\n    properties={\n        \"right_nodes\": relationship(\n            Node,\n            secondary=node_to_node,\n            primaryjoin=node.c.id == node_to_node.c.left_node_id,\n            secondaryjoin=node.c.id == node_to_node.c.right_node_id,\n            backref=\"left_nodes\",\n        )\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Data with SQLAlchemy Session in Python\nDESCRIPTION: This snippet illustrates creating a session with SQLAlchemy's sessionmaker and adding data to a database using session management in Python. Commit is explicitly called, and it requires defining ORM-mapped classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nSession = sessionmaker(engine)\n\nwith Session() as session:\n    session.add_all(\n        [\n            SomeClass(data=\"some data one\"),\n            SomeClass(data=\"some data two\"),\n            SomeClass(data=\"some data three\"),\n        ]\n    )\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining Tables with Foreign Keys\nDESCRIPTION: Example of creating tables with foreign key relationships and accessing their properties using SQLAlchemy's API.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nemployees = Table(\n    \"employees\",\n    metadata_obj,\n    Column(\"employee_id\", Integer, primary_key=True),\n    Column(\"employee_name\", String(60), nullable=False),\n    Column(\"employee_dept\", Integer, ForeignKey(\"departments.department_id\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Mutual Relationships in SQLAlchemy Models\nDESCRIPTION: This snippet shows how to define two SQLAlchemy models (Entry and Widget) that reference each other, implementing a foreign key relationship that requires an UPDATE operation to maintain referential integrity across INSERT operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/relationship_persistence.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, ForeignKey\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, primary_key=True)\n    favorite_entry_id = mapped_column(\n        Integer, ForeignKey(\"entry.entry_id\", name=\"fk_favorite_entry\")\n    )\n    name = mapped_column(String(50))\n\n    entries = relationship(Entry, primaryjoin=widget_id == Entry.widget_id)\n    favorite_entry = relationship(\n        Entry, primaryjoin=favorite_entry_id == Entry.entry_id, post_update=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Integer Version Counter in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to add a basic integer version counter to a mapped table using version_id_col. The version column is configured as a non-nullable integer that automatically increments on each update.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_id = mapped_column(Integer, nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_id}\n```\n\n----------------------------------------\n\nTITLE: Nullable Many-to-One Relationship in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to configure a nullable many-to-one relationship between Parent and Child classes using Optional types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\n\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[Optional[int]] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[Optional[\"Child\"]] = relationship(back_populates=\"parents\")\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parents: Mapped[List[\"Parent\"]] = relationship(back_populates=\"child\")\n```\n\n----------------------------------------\n\nTITLE: Joining from an Aliased Entity in SQLAlchemy ORM\nDESCRIPTION: Shows how to join from an aliased entity to related entities using SQLAlchemy's relationship attributes. This example creates a User alias and joins to the addresses relationship directly from that alias.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nuser_alias_1 = aliased(User)\nprint(select(user_alias_1.name).join(user_alias_1.addresses))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Operator Precedence with Custom Operators in SQLAlchemy\nDESCRIPTION: Examples showing how the precedence parameter in the .op() method affects SQL expression parenthesization. The examples compare equivalent expressions with explicit precedence set to a high value (100) versus using default precedence.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint((column(\"q\") - column(\"y\")).op(\"+\", precedence=100)(column(\"z\")))\n```\n\nLANGUAGE: sql\nCODE:\n```\n(q - y) + z\n```\n\nLANGUAGE: python\nCODE:\n```\nprint((column(\"q\") - column(\"y\")).op(\"+\")(column(\"z\")))\n```\n\nLANGUAGE: sql\nCODE:\n```\nq - y + z\n```\n\n----------------------------------------\n\nTITLE: Type Annotated User Model in Python\nDESCRIPTION: Shows how to use type annotations with mapped_column() and Mapped[] to define column types and nullability in a more modern style.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(30))\n```\n\n----------------------------------------\n\nTITLE: Context Manager Support for Result in SQLAlchemy\nDESCRIPTION: Demonstrates the use of `Result` and `AsyncResult` objects as context managers to ensure proper resource cleanup. The first example shows a synchronous connection and result, ensuring the cursor is closed after the block. The second example demonstrates the same pattern using async connections and results within an asyncio context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n    with engine.connect() as conn:\n        with conn.execution_options(yield_per=100).execute(\n            text(\"select * from table\")\n        ) as result:\n            for row in result:\n                print(f\"{row}\")\n\n    async with async_engine.connect() as conn:\n        async with conn.execution_options(yield_per=100).execute(\n            text(\"select * from table\")\n        ) as result:\n            for row in result:\n                print(f\"{row}\")\n```\n\n----------------------------------------\n\nTITLE: Explicit Connection Usage for Schema and Query Operations in SQLAlchemy 2.0\nDESCRIPTION: Shows how to use an explicit Connection object for both schema operations and query execution in SQLAlchemy 2.0\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as connection:\n    # create tables, requires explicit begin and/or commit:\n    with connection.begin():\n        metadata_obj.create_all(connection)\n\n    # reflect all tables\n    metadata_obj.reflect(connection)\n\n    # reflect individual table\n    t = Table(\"t\", metadata_obj, autoload_with=connection)\n\n    # execute SQL statements\n    result = connection.execute(t.select())\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship Loading with selectin Eager Loading in SQLAlchemy - Python\nDESCRIPTION: This code snippet illustrates how to configure a relationship between Parent and Child classes using SQLAlchemy's selectin eager loading. It demonstrates the creation of the Parent and Child ORM classes and sets up the relationship such that children are eagerly loaded when querying Parent objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(lazy=\"selectin\")\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Awaitable Attributes in SQLAlchemy AsyncIO ORM\nDESCRIPTION: Python code demonstrating how to safely access relationship attributes in an async context using the awaitable_attrs feature. This approach prevents implicit IO that would otherwise cause errors in async code.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\na1 = (await session.scalars(select(A))).one()\nfor b1 in await a1.awaitable_attrs.bs:\n    print(b1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Relationships in Concrete Inheritance with SQLAlchemy\nDESCRIPTION: This snippet shows how to implement bi-directional relationships in a concrete inheritance scenario using SQLAlchemy. It uses back_populates to create separate relationships between Company and each of Employee, Manager, and Engineer classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\", back_populates=\"company\")\n\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n```\n\n----------------------------------------\n\nTITLE: Creating SQLAlchemy URL Objects Programmatically in Python\nDESCRIPTION: Demonstrates how to create a SQLAlchemy URL object programmatically using the URL.create method, which allows passing unescaped credentials directly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import URL\n\nurl_object = URL.create(\n    \"postgresql+pg8000\",\n    username=\"dbuser\",\n    password=\"kx@jj5/g\",  # plain (unescaped) text\n    host=\"pghost10\",\n    database=\"appdb\",\n)\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(url_object)\n```\n\n----------------------------------------\n\nTITLE: Querying Manager Subclass with SQLAlchemy Python\nDESCRIPTION: This snippet demonstrates how to construct a SELECT statement for the 'Manager' subclass in an inheritance hierarchy using SQLAlchemy ORM. It selects rows from both 'employee' and 'manager' tables using a JOIN operation, extracting only 'Manager' objects ordered by their ID. Requires SQLAlchemy and a pre-configured session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> stmt = select(Manager).order_by(Manager.id)\n>>> managers = session.scalars(stmt).all()\n{execsql}BEGIN (implicit)\nSELECT manager.id, employee.id AS id_1, employee.name, employee.type, employee.company_id, manager.manager_name\nFROM employee JOIN manager ON employee.id = manager.id ORDER BY manager.id\n[...] ()\n{stop}>>> print(managers)\n[Manager('Mr. Krabs')]\n```\n\n----------------------------------------\n\nTITLE: Working with AsyncSession for SQLAlchemy ORM\nDESCRIPTION: This snippet provides a complete example of using SQLAlchemy's ORM with asyncio, including setup of the AsyncSession, defining mapped classes, and inserting and querying data. It shows how to manage async sessions and connections, and note on concurrent task limitations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_2\n\nLANGUAGE: pycon+sql\nCODE:\n```\n>>> from __future__ import annotations\n\n>>> import asyncio\n>>> import datetime\n>>> from typing import List\n\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import func\n>>> from sqlalchemy import select\n>>> from sqlalchemy.ext.asyncio import AsyncAttrs\n>>> from sqlalchemy.ext.asyncio import async_sessionmaker\n>>> from sqlalchemy.ext.asyncio import AsyncSession\n>>> from sqlalchemy.ext.asyncio import create_async_engine\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n>>> from sqlalchemy.orm import selectinload\n\n>>> class Base(AsyncAttrs, DeclarativeBase):\n...     pass\n\n>>> class B(Base):\n...     __tablename__ = \"b\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n...     data: Mapped[str]\n\n>>> class A(Base):\n...     __tablename__ = \"a\"\n...\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     data: Mapped[str]\n...     create_date: Mapped[datetime.datetime] = mapped_column(server_default=func.now())\n...     bs: Mapped[List[B]] = relationship()\n\n>>> async def insert_objects(async_session: async_sessionmaker[AsyncSession]) -> None:\n...     async with async_session() as session:\n...         async with session.begin():\n...             session.add_all(\n...                 [\n...                     A(bs=[B(data=\"b1\"), B(data=\"b2\")], data=\"a1\"),\n...                     A(bs=[], data=\"a2\"),\n...                     A(bs=[B(data=\"b3\"), B(data=\"b4\")], data=\"a3\"),\n...                 ]\n...             )\n\n>>> async def select_and_update_objects(\n...     async_session: async_sessionmaker[AsyncSession],\n... ) -> None:\n...     async with async_session() as session:\n...         stmt = select(A).order_by(A.id).options(selectinload(A.bs))\n...\n...         result = await session.execute(stmt)\n...\n...         for a in result.scalars():\n...             print(a, a.data)\n...             print(f\"created at: {a.create_date}\")\n...             for b in a.bs:\n...                 print(b, b.data)\n...\n...         result = await session.execute(select(A).order_by(A.id).limit(1))\n...\n...         a1 = result.scalars().one()\n...\n...         a1.data = \"new data\"\n...\n...         await session.commit()\n...\n...         # access attribute subsequent to commit; this is what\n...         # expire_on_commit=False allows\n...         print(a1.data)\n...\n...         # alternatively, AsyncAttrs may be used to access any attribute\n...         # as an awaitable (new in 2.0.13)\n...         for b1 in await a1.awaitable_attrs.bs:\n...             print(b1, b1.data)\n\n>>> async def async_main() -> None:\n...     engine = create_async_engine(\"sqlite+aiosqlite://\", echo=True)\n...\n...     # async_sessionmaker: a factory for new AsyncSession objects.\n...     # expire_on_commit - don't expire objects after transaction commit\n...     async_session = async_sessionmaker(engine, expire_on_commit=False)\n...\n...     async with engine.begin() as conn:\n...         await conn.run_sync(Base.metadata.create_all)\n...\n...     await insert_objects(async_session)\n...     await select_and_update_objects(async_session)\n...\n...     # for AsyncEngine created in function scope, close and\n...     # clean-up pooled connections\n...     await engine.dispose()\n\n>>> asyncio.run(async_main())\n{execsql}BEGIN (implicit)\n...\nCREATE TABLE a (\n```\n\n----------------------------------------\n\nTITLE: Concrete Table Inheritance Example\nDESCRIPTION: Shows basic concrete table inheritance setup where each subclass maps to its own distinct table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: ORM UPDATE with Synchronization Strategy in SQLAlchemy\nDESCRIPTION: Example of specifying a synchronization strategy for an ORM UPDATE operation using execution options. This controls how the ORM synchronizes the state changes with objects in the session's identity map.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nstmt = (\n    update(User).where(User.name == \"squidward\").values(fullname=\"Squidward Tentacles\")\n)\nsession.execute(stmt, execution_options={\"synchronize_session\": False})\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user_account SET fullname=? WHERE user_account.name = ?\n[...] ('Squidward Tentacles', 'squidward')\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Indexes in SQLAlchemy Tables\nDESCRIPTION: This snippet shows how to define indexes directly within the table definition using the `Index` class while providing the names of the columns as strings. It illustrates both standard indexes and unique indexes, aiding in efficient data handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\nmytable = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"col1\", Integer),\n    Column(\"col2\", Integer),\n    Column(\"col3\", Integer),\n    Column(\"col4\", Integer),\n    # place an index on col1, col2\n    Index(\"idx_col12\", \"col1\", \"col2\"),\n    # place a unique index on col3, col4\n    Index(\"idx_col34\", \"col3\", \"col4\", unique=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Decorator-Based Model Definition\nDESCRIPTION: Shows how to use the registry.mapped decorator to define models without a base class, including relationships and type annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import func\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\nfrom sqlalchemy.orm import relationship\n\nmapper_registry = registry()\n\n\n@mapper_registry.mapped\nclass User:\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    nickname: Mapped[Optional[str]] = mapped_column(String(64))\n    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\n\n@mapper_registry.mapped\nclass Address:\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(ForeignKey(\"user.id\"))\n    email_address: Mapped[str]\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Custom Hybrid Property Behavior in SQLAlchemy\nDESCRIPTION: This code shows how to use the `expression` modifier of `hybrid_property` to define separate behaviors when the attribute is accessed at the instance level versus at the class/expression level. This allows for more complex attribute logic and manipulation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    _email = mapped_column(\"email\", String)\n\n    @hybrid_property\n    def email(self):\n        \"\"\"Return the value of _email up until the last twelve\n        characters.\"\"\"\n\n        return self._email[:-12]\n\n    @email.setter\n    def email(self, email):\n        \"\"\"Set the value of _email, tacking on the twelve character\n        value @example.com.\"\"\"\n\n        self._email = email + \"@example.com\"\n\n    @email.expression\n    def email(cls):\n        \"\"\"Produce a SQL expression that represents the value\n        of the _email column, minus the last twelve characters.\"\"\"\n\n        return func.substr(cls._email, 1, func.length(cls._email) - 12)\n```\n\n----------------------------------------\n\nTITLE: Getting Objects by Primary Key from SQLAlchemy Session - Python\nDESCRIPTION: This snippet demonstrates the retrieval of a User object using its primary key from the identity map of the SQLAlchemy Session, showcasing the effective management of object instances within the Session's context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> some_squidward = session.get(User, 4)\n>>> some_squidward\nUser(id=4, name='squidward', fullname='Squidward Tentacles')\n>>> some_squidward is squidward\nTrue\n```\n\n----------------------------------------\n\nTITLE: Joining to Subqueries along Relationship Paths in SQLAlchemy ORM\nDESCRIPTION: Demonstrates joining to subqueries using the of_type method with relationship attributes. This approach ensures the join follows a specific relationship path while targeting a subquery.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\naddress_subq = aliased(Address, subq, name=\"address\")\nstmt = select(User, address_subq).join(User.addresses.of_type(address_subq))\nfor row in session.execute(stmt):\n    print(f\"{row.User} {row.address}\")\n```\n\n----------------------------------------\n\nTITLE: Mapping to Reflected Tables in SQLAlchemy\nDESCRIPTION: Shows how to map a class to a database table that's reflected (introspected) from an existing database. This allows working with existing database schemas without manually defining table structures.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass MyClass(Base):\n    __table__ = Table(\n        \"mytable\",\n        Base.metadata,\n        autoload_with=engine,\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Profiling with SQLAlchemy Events\nDESCRIPTION: Shows how to use SQLAlchemy events to intercept cursor executions for long-term query profiling or implementing an application-side slow query monitor. This code logs the start time and SQL statement for each query execution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\nfrom sqlalchemy.engine import Engine\nimport time\nimport logging\n\nlogging.basicConfig()\nlogger = logging.getLogger(\"myapp.sqltime\")\nlogger.setLevel(logging.DEBUG)\n\n\n@event.listens_for(Engine, \"before_cursor_execute\")\ndef before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    conn.info.setdefault(\"query_start_time\", []).append(time.time())\n    logger.debug(\"Start Query: %s\", statement)\n```\n\n----------------------------------------\n\nTITLE: Reflecting Related Tables in SQLAlchemy\nDESCRIPTION: This example shows how reflecting a table that has foreign key relationships will automatically reflect the referenced tables as well.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> shopping_cart_items = Table(\"shopping_cart_items\", metadata_obj, autoload_with=engine)\n>>> \"shopping_carts\" in metadata_obj.tables\nTrue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bi-directional Relationship Behavior in SQLAlchemy (Python)\nDESCRIPTION: Shows how save-update cascade works uni-directionally in bi-directional relationships. Illustrates the difference in behavior when assigning from parent-to-child versus child-to-parent.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> o1.items.append(i1)\n>>> o1 is i1.order\nTrue\n>>> i1 in session\nTrue\n\n>>> o1 = Order()\n>>> session.add(o1)\n>>> o1 in session\nTrue\n\n>>> i1 = Item()\n>>> i1.order = o1\n>>> i1 in order.items\nTrue\n>>> i1 in session\nFalse\n\n>>> session.add(i1)\n```\n\n----------------------------------------\n\nTITLE: Implementing ON UPDATE CASCADE in SQLAlchemy Models\nDESCRIPTION: This snippet illustrates how to configure foreign key relationships in SQLAlchemy to use ON UPDATE CASCADE. This ensures that changes to primary key values propagate automatically to related foreign keys, using an example with User and Address.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/relationship_persistence.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    addresses = relationship(\"Address\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(\n        String(50), ForeignKey(\"user.username\", onupdate=\"cascade\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Context Manager with Python\nDESCRIPTION: This code snippet demonstrates how to create a context manager for handling transactions in SQLAlchemy. It checks if a session is already in a transaction and either begins a new one or yields control back to the caller. This implementation aims to replace the deprecated subtransaction pattern.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nimport contextlib\n\n@contextlib.contextmanager\ndef transaction(session):\n    if not session.in_transaction():\n        with session.begin():\n            yield\n    else:\n        yield\n```\n\n----------------------------------------\n\nTITLE: ORM Bulk Insert with Per Row SQL Expression in SQLAlchemy\nDESCRIPTION: This example shows how to embed SQL expressions on a per-row basis using SQLAlchemy's ORM. It defines an INSERT statement with multiple parameter dictionaries, each containing a SQL SELECT subquery for the user_id. Bulk ORM insert mode is not used in this case.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n  \">>> from sqlalchemy import select\n  >>> address_result = session.scalars(\n  ...     insert(Address)\n  ...     .values(\n  ...         [\n  ...             {\n  ...                 \\\"user_id\\\": select(User.id).where(User.name == \\\"sandy\\\"),\n  ...                 \\\"email_address\\\": \\\"sandy@company.com\\\",\n  ...             },\n  ...             {\n  ...                 \\\"user_id\\\": select(User.id).where(User.name == \\\"spongebob\\\"),\n  ...                 \\\"email_address\\\": \\\"spongebob@company.com\\\",\n  ...             },\n  ...             {\n  ...                 \\\"user_id\\\": select(User.id).where(User.name == \\\"patrick\\\"),\n  ...                 \\\"email_address\\\": \\\"patrick@company.com\\\",\n  ...             },\n  ...         ]\n  ...     )\n  ...     .returning(Address),\n  ... )\"\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"{execsql}INSERT INTO address (user_id, email_address) VALUES\n  ((SELECT user_account.id\n  FROM user_account\n  WHERE user_account.name = ?), ?), ((SELECT user_account.id\n  FROM user_account\n  WHERE user_account.name = ?), ?), ((SELECT user_account.id\n  FROM user_account\n  WHERE user_account.name = ?), ?) RETURNING id, user_id, email_address\n  [...] ('sandy', 'sandy@company.com', 'spongebob', 'spongebob@company.com',\n  'patrick', 'patrick@company.com')\"\n```\n\nLANGUAGE: python\nCODE:\n```\n  \"{stop}>>> print(address_result.all())\n  [Address(email_address='sandy@company.com'),\n   Address(email_address='spongebob@company.com'),\n   Address(email_address='patrick@company.com')]\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL INET Relationship with Custom Join Condition\nDESCRIPTION: Defines a relationship between host entries using custom IP address casting and join conditions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparent_host = relationship(\n    \"HostEntry\",\n    primaryjoin=remote(ip_address) == cast(foreign(content), INET),\n)\n```\n\n----------------------------------------\n\nTITLE: Proxying and Managing Keyword Collections in SQLAlchemy\nDESCRIPTION: Details the process of configuring an association proxy to manage dictionary values and illustrates the use of proxy in both dictionary and scalar context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    keywords: AssociationProxy[Dict[str, str]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n\n    kw: Mapped[Keyword] = relationship()\n\n    keyword: AssociationProxy[Dict[str, str]] = association_proxy(\"kw\", \"keyword\")\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n```\n\n----------------------------------------\n\nTITLE: Combining Table Arguments from Multiple Mixins in SQLAlchemy ORM Python\nDESCRIPTION: Demonstrates how to combine __table_args__ from multiple mixins using a declared_attr decorator. This allows for the aggregation of table arguments from different sources in a declarative model.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import declarative_mixin, declared_attr\n\n\nclass MySQLSettings:\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n\n\nclass MyOtherMixin:\n    __table_args__ = {\"info\": \"foo\"}\n\n\nclass MyModel(MySQLSettings, MyOtherMixin, Base):\n    __tablename__ = \"my_model\"\n\n    @declared_attr.directive\n    def __table_args__(cls):\n        args = dict()\n        args.update(MySQLSettings.__table_args__)\n        args.update(MyOtherMixin.__table_args__)\n        return args\n\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating INSERT FROM SELECT with Defaults in SQLAlchemy Python\nDESCRIPTION: Shows how INSERT FROM SELECT now includes Python and SQL-expression defaults. The example creates a table with a function-based default value and demonstrates the SQL generation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, MetaData, Integer, select, func\n\nm = MetaData()\n\nt = Table(\n    \"t\", m, Column(\"x\", Integer), Column(\"y\", Integer, default=func.somefunction())\n)\n\nstmt = select([t.c.x])\nprint(t.insert().from_select([\"x\"], stmt))\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t (x, y) SELECT t.x, somefunction() AS somefunction_1\nFROM t\n```\n\n----------------------------------------\n\nTITLE: Modifying and Interacting with ORM Relationships in Python\nDESCRIPTION: This snippet illustrates the creation and modification of ORM objects and their relationships. Using User and Address instances, it demonstrates how to append Address objects to a User's addresses relationship. It highlights automatic synchronization of object states via back_populates. No additional dependencies are required beyond SQLAlchemy setup.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n    >>> u1 = User(name=\"pkrabs\", fullname=\"Pearl Krabs\")\n    >>> u1.addresses\n    []\n```\n\nLANGUAGE: python\nCODE:\n```\n\n  >>> a1 = Address(email_address=\"pearl.krabs@gmail.com\")\n  >>> u1.addresses.append(a1)\n```\n\nLANGUAGE: python\nCODE:\n```\n\n  >>> a2 = Address(email_address=\"pearl@aol.com\", user=u1)\n  >>> u1.addresses\n  [Address(id=None, email_address='pearl.krabs@gmail.com'), Address(id=None, email_address='pearl@aol.com')]\n```\n\nLANGUAGE: python\nCODE:\n```\n\n  >>> a2.user = u1\n```\n\n----------------------------------------\n\nTITLE: Using contains_eager with Aliased Entities in Joins\nDESCRIPTION: Shows how to use contains_eager with aliased entities by specifying the relationship path with of_type(). This technique is necessary when using aliases in the eager portion of a statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# use an alias of the Address entity\nadalias = aliased(Address)\n\n# construct a statement which expects the \"addresses\" results\n\nstmt = (\n    select(User)\n    .outerjoin(User.addresses.of_type(adalias))\n    .options(contains_eager(User.addresses.of_type(adalias)))\n)\n\n# get results normally\nr = session.scalars(stmt).unique().all()\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Begin with SQLAlchemy Session in Python\nDESCRIPTION: The code illustrates explicitly beginning a transaction using session.begin outside a context manager. This method helps in scenarios requiring fine-grained transaction control in Python applications.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nSession = sessionmaker(bind=engine)\nsession = Session()\nsession.begin()\ntry:\n    item1 = session.get(Item, 1)\n    item2 = session.get(Item, 2)\n    item1.foo = \"bar\"\n    item2.bar = \"foo\"\n    session.commit()\nexcept:\n    session.rollback()\n    raise\n```\n\n----------------------------------------\n\nTITLE: Using select_from to Set Initial FROM Clause in SQLAlchemy ORM\nDESCRIPTION: Demonstrates using select_from to set the initial FROM clause before applying joins. This method is useful when you want to establish a starting point for your query's FROM clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(Address).select_from(User).join(Address).where(User.name == \"sandy\")\nprint(stmt)\n```\n\n----------------------------------------\n\nTITLE: Basic DELETE Statement in SQLAlchemy Core\nDESCRIPTION: Shows how to construct a basic DELETE statement to remove rows from a database table based on a WHERE condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import delete\nstmt = delete(user_table).where(user_table.c.name == \"patrick\")\n```\n\n----------------------------------------\n\nTITLE: Using join_from with Explicit Join Target in SQLAlchemy ORM\nDESCRIPTION: Shows how to use join_from with an explicit join target entity. This approach gives fine-grained control over both sides of the join operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(Address).join_from(User, Address).where(User.name == \"sandy\")\nprint(stmt)\n```\n\n----------------------------------------\n\nTITLE: Conditional Constraints and Indexes Definition\nDESCRIPTION: Shows how to define constraints and indexes that are conditionally included based on database dialect.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import CheckConstraint, Index\nfrom sqlalchemy import MetaData, Table, Column\nfrom sqlalchemy import Integer, String\n\nmeta = MetaData()\n\nmy_table = Table(\n    \"my_table\",\n    meta,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"num\", Integer),\n    Column(\"data\", String),\n    Index(\"my_pg_index\", \"data\").ddl_if(dialect=\"postgresql\"),\n    CheckConstraint(\"num > 5\").ddl_if(dialect=\"postgresql\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Session Usage Flow in Web Applications\nDESCRIPTION: Demonstrates the typical flow of Session operations in a web application context, including initialization, execution, and cleanup.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSession()\n\nSession.execute(select(MyClass))\n\nSession.add(some_object)\n\nSession.commit()\n\nSession.remove()\n```\n\n----------------------------------------\n\nTITLE: Defining Hybrid Properties in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to define a hybrid property in SQLAlchemy that combines two attributes into a single calculated attribute accessible at both the instance and class level.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.hybrid import hybrid_property\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        return self.firstname + \" \" + self.lastname\n\nsome_user = session.scalars(select(User).limit(1)).first()\nprint(some_user.fullname)\n\nsome_user = session.scalars(\n    select(User).where(User.fullname == \"John Smith\").limit(1)\n).first()\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized SQL Query with SQLAlchemy Connection\nDESCRIPTION: This snippet demonstrates how to execute a parameterized SQL query using SQLAlchemy's Connection object, including parameter binding and result iteration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT x, y FROM some_table WHERE y > :y\"), {\"y\": 2})\n    for row in result:\n        print(f\"x: {row.x}  y: {row.y}\")\n```\n\n----------------------------------------\n\nTITLE: Using aliased Construct with Select in SQLAlchemy 2.0\nDESCRIPTION: This snippet showcases the aliased construct with the select statement in SQLAlchemy 2.0. It builds a subquery using select, then creates aliased instances for User and Address against the subquery, and finally constructs the main select statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n\"from sqlalchemy.orm import aliased\n\nsubq = select(User, Address.email_address).join(User.addresses).subquery()\n\nua = aliased(User, subq)\n\naa = aliased(Address, subq)\n\nstmt = select(ua, aa).order_by(aa.email_address)\n\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Event Registration with listen() Function in Python\nDESCRIPTION: Demonstrates how to register a basic event listener using the listen() function for Pool connect events. Shows connecting a callback function to intercept database connection creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool\n\n\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n\n\nlisten(Pool, \"connect\", my_on_connect)\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Target Registration in Python\nDESCRIPTION: Demonstrates various ways to register event listeners with different target types including Pool, Engine, and specific instances. Shows the flexibility of event targeting in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.event import listen\nfrom sqlalchemy.pool import Pool, QueuePool\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.engine import Engine\nimport psycopg2\n\n\ndef connect():\n    return psycopg2.connect(user=\"ed\", host=\"127.0.0.1\", dbname=\"test\")\n\n\nmy_pool = QueuePool(connect)\nmy_engine = create_engine(\"postgresql+psycopg2://ed@localhost/test\")\n\n# associate listener with all instances of Pool\nlisten(Pool, \"connect\", my_on_connect)\n\n# associate listener with all instances of Pool\n# via the Engine class\nlisten(Engine, \"connect\", my_on_connect)\n\n# associate listener with my_pool\nlisten(my_pool, \"connect\", my_on_connect)\n\n# associate listener with my_engine.pool\nlisten(my_engine, \"connect\", my_on_connect)\n```\n\n----------------------------------------\n\nTITLE: Setting the Leftmost FROM Clause Using join_from in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to explicitly set the leftmost FROM clause in a join using join_from(). This method allows you to control the order of tables in the FROM clause when the default behavior is not suitable.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(Address).join_from(User, User.addresses).where(User.name == \"sandy\")\nprint(stmt)\n```\n\n----------------------------------------\n\nTITLE: Using Selectinload to Properly Load a Relationship with Raiseload\nDESCRIPTION: This snippet demonstrates the proper way to load a relationship configured with raiseload by explicitly using selectinload strategy to ensure related data is loaded efficiently.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> u1 = (\n...     session.execute(select(User).options(selectinload(User.addresses)))\n...     .scalars()\n...     .first()\n... )\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user_account.id\nFROM user_account\n\nSELECT address.user_id AS address_user_id, address.id AS address_id\nFROM address\nWHERE address.user_id IN (?, ?, ?, ?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Implementing Backrefs Validation Control in SQLAlchemy ORM\nDESCRIPTION: Example of using the include_backrefs=False option with the @validates decorator to prevent validator execution when an attribute is modified through a backref relationship, allowing for more controlled validation behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship, validates\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    bs = relationship(\"B\", backref=\"a\")\n\n    @validates(\"bs\")\n    def validate_bs(self, key, item):\n        print(\"A.bs validator\")\n        return item\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n\n    @validates(\"a\", include_backrefs=False)\n    def validate_a(self, key, item):\n        print(\"B.a validator\")\n        return item\n\n\na1 = A()\na1.bs.append(B())  # prints only \"A.bs validator\"\n```\n\n----------------------------------------\n\nTITLE: Using Query.update() with UPDATE FROM in SQLAlchemy\nDESCRIPTION: Shows how to use the Query.update() method with UPDATE...FROM functionality in SQLAlchemy, supporting updates against joined tables including joined-inheritance entities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nquery(SomeEntity).filter(SomeEntity.id == SomeOtherEntity.id).filter(\n    SomeOtherEntity.foo == \"bar\"\n).update({\"data\": \"x\"})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of INNER JOIN with ORDER BY - Python\nDESCRIPTION: Provides a corrected query structure that uses inner joins and allows for an ORDER BY on an address field by ensuring the necessary references are part of the FROM clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .filter(User.name == \"spongebob\")\n    .order_by(Address.email_address)\n)\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing Object with with_expression Option - Python SQLAlchemy\nDESCRIPTION: This code snippet demonstrates using the with_expression option with an ORM query in SQLAlchemy to load an existing object while ensuring the attribute is reloaded. The use of execution_options to populate existing attributes is highlighted.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nobj = session.scalars(\n        select(A)\n        .options(with_expression(A.expr, some_expr))\n        .execution_options(populate_existing=True)\n    ).first()\n```\n\n----------------------------------------\n\nTITLE: Custom Comparison for Composite Types using comparator_factory\nDESCRIPTION: Demonstrates how to redefine comparison operations for composite types using the `comparator_factory` argument in the `composite` function. This allows customizing comparison logic, like implementing a 'greater than' operator for a Point class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    import dataclasses\n\n    from sqlalchemy.orm import composite\n    from sqlalchemy.orm import CompositeProperty\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n    from sqlalchemy.sql import and_\n\n\n    @dataclasses.dataclass\n    class Point:\n        x: int\n        y: int\n\n\n    class PointComparator(CompositeProperty.Comparator):\n        def __gt__(self, other):\n            \"\"\"redefine the 'greater than' operation\"\"\"\n\n            return and_(\n                *[\n                    a > b\n                    for a, b in zip(\n                        self.__clause_element__().clauses,\n                        dataclasses.astuple(other),\n                    )\n                ]\n            )\n\n\n    class Base(DeclarativeBase):\n        pass\n\n\n    class Vertex(Base):\n        __tablename__ = \"vertices\"\n\n        id: Mapped[int] = mapped_column(primary_key=True)\n\n        start: Mapped[Point] = composite(\n            mapped_column(\"x1\"), mapped_column(\"y1\"), comparator_factory=PointComparator\n        )\n        end: Mapped[Point] = composite(\n            mapped_column(\"x2\"), mapped_column(\"y2\"), comparator_factory=PointComparator\n        )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Save-Update Cascade Behavior in SQLAlchemy (Python)\nDESCRIPTION: Illustrates the effect of save-update cascade on related objects when adding a parent object to a Session. Also shows how newly added related objects are automatically added to the Session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> user1 = User()\n>>> address1, address2 = Address(), Address()\n>>> user1.addresses = [address1, address2]\n\n>>> sess = Session()\n>>> sess.add(user1)\n>>> address1 in sess\nTrue\n\n>>> address3 = Address()\n>>> user1.addresses.append(address3)\n>>> address3 in sess\nTrue\n```\n\n----------------------------------------\n\nTITLE: Customizing Type Mapping in SQLAlchemy ORM with type_annotation_map\nDESCRIPTION: This example shows how to customize the mapping between Python types and SQL column types. It configures int to use BIGINT, datetime to use TIMESTAMP with timezone, and str to use String with an NVARCHAR variant for Microsoft SQL Server.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom sqlalchemy import BIGINT, NVARCHAR, String, TIMESTAMP\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        int: BIGINT,\n        datetime.datetime: TIMESTAMP(timezone=True),\n        str: String().with_variant(NVARCHAR, \"mssql\"),\n    }\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    date: Mapped[datetime.datetime]\n    status: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk UPDATE Operations by Primary Key in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use SQLAlchemy ORM's bulk UPDATE feature to update multiple records by primary key. The example shows updating fullname attributes for several User records in a single operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nsession.execute(\n    update(User),\n    [\n        {\"id\": 1, \"fullname\": \"Spongebob Squarepants\"},\n        {\"id\": 3, \"fullname\": \"Patrick Star\"},\n        {\"id\": 5, \"fullname\": \"Eugene H. Krabs\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships with SQLAlchemy ORM - Python\nDESCRIPTION: This snippet outlines the available functions related to defining relationships in the SQLAlchemy ORM, including 'relationship', 'backref', 'dynamic_loader', 'foreign', and 'remote'. These functions are essential for establishing connections between database tables in an object-oriented manner.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/relationship_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: sqlalchemy.orm\n\nRelationships API\n-----------------\n\n.. autofunction:: relationship\n\n.. autofunction:: backref\n\n.. autofunction:: dynamic_loader\n\n.. autofunction:: foreign\n\n.. autofunction:: remote\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Join Conditions in SQLAlchemy ORM\nDESCRIPTION: This example shows how to use the primaryjoin parameter in a SQLAlchemy ORM relationship to specify custom join conditions. It creates a relationship 'boston_addresses' that only loads Address objects with city 'Boston'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, ForeignKey, String, Column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n    boston_addresses = relationship(\n        \"Address\",\n        primaryjoin=\"and_(User.id==Address.user_id, Address.city=='Boston')\",\n    )\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\n    street = mapped_column(String)\n    city = mapped_column(String)\n    state = mapped_column(String)\n    zip = mapped_column(String)\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Remove Events in SQLAlchemy\nDESCRIPTION: This code demonstrates how to validate collection remove events using `include_removes=True` in the `validates` decorator. The validation function receives an additional `is_remove` boolean argument. The function should raise an exception if the removal is not allowed or if the address being removed is invalid.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import validates\n\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\", include_removes=True)\n    def validate_address(self, key, address, is_remove):\n        if is_remove:\n            raise ValueError(\"not allowed to remove items from the collection\")\n        else:\n            if \"@\" not in address.email:\n                raise ValueError(\"failed simplified email validation\")\n            return address\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with SQLAlchemy's Index Class\nDESCRIPTION: This snippet details creating an index using the `Index` class after a table has been defined. It showcases how the create method can be invoked to produce the corresponding SQL statement for the index in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ni = Index(\"someindex\", mytable.c.col5)\ni.create(engine)\n{execsql}CREATE INDEX someindex ON mytable (col5){stop}\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Function as Column Default Generator\nDESCRIPTION: Shows how to use a Python function as a default value generator for a primary key column, creating an incrementing counter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# a function which counts upwards\ni = 0\n\ndef mydefault():\n    global i\n    i += 1\n    return i\n\nt = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True, default=mydefault),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Session.begin() with Custom Isolation Level in SQLAlchemy\nDESCRIPTION: Demonstrates how to use Session.begin() in combination with Session.connection() to set a custom isolation level for a transaction block. This ensures the isolation level is set before any operations occur.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsess = Session(bind=engine)\n\nwith sess.begin():\n    # call connection() with options before any other operations proceed.\n    # this will procure a new connection from the bound engine and begin a\n    # real database transaction.\n    sess.connection(execution_options={\"isolation_level\": \"SERIALIZABLE\"})\n\n    # ... work with session in SERIALIZABLE isolation level...\n\n# outside the block, the transaction has been committed.  the connection is\n# released and reverted to its previous isolation level.\n```\n\n----------------------------------------\n\nTITLE: Joining SQLAlchemy Session into External Transaction for Testing\nDESCRIPTION: Illustrates how to integrate a SQLAlchemy Session into an external transaction, typically used in test suites. This allows ORM code to work with a Session while maintaining the ability to roll back all changes after the test.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy import create_engine\nfrom unittest import TestCase\n\n# global application scope.  create Session class, engine\nSession = sessionmaker()\n\nengine = create_engine(\"postgresql+psycopg2://...\")\n\n\nclass SomeTest(TestCase):\n    def setUp(self):\n        # connect to the database\n        self.connection = engine.connect()\n\n        # begin a non-ORM transaction\n        self.trans = self.connection.begin()\n\n        # bind an individual Session to the connection, selecting\n        # \"create_savepoint\" join_transaction_mode\n        self.session = Session(\n            bind=self.connection, join_transaction_mode=\"create_savepoint\"\n        )\n\n    def test_something(self):\n        # use the session in tests.\n\n        self.session.add(Foo())\n        self.session.commit()\n\n    def test_something_with_rollbacks(self):\n        self.session.add(Bar())\n        self.session.flush()\n        self.session.rollback()\n\n        self.session.add(Foo())\n        self.session.commit()\n\n    def tearDown(self):\n        self.session.close()\n\n        # rollback - everything that happened with the\n        # Session above (including calls to commit())\n        # is rolled back.\n        self.trans.rollback()\n\n        # return connection to the Engine\n        self.connection.close()\n```\n\n----------------------------------------\n\nTITLE: SQL output of chained joins with User and Address\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account`, `user_order`, `order_items`, `item` and `address`. The `User.addresses` relationship is added to our chain of joins. We can continue to add other elements to join FROM the ``User`` entity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nJOIN user_order ON user_account.id = user_order.user_id\nJOIN order_items AS order_items_1 ON user_order.id = order_items_1.order_id\nJOIN item ON item.id = order_items_1.item_id\nJOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Scoped Sessions\nDESCRIPTION: Demonstrates how to obtain session instances from the registry and verify their identity across multiple calls. Shows that the same session is returned within a thread until explicitly removed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> some_session = Session()\n>>> some_other_session = Session()\n>>> some_session is some_other_session\nTrue\n>>> Session.remove()\n>>> new_session = Session()\n>>> new_session is some_session\nFalse\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy's New Inspection System for ORM Classes\nDESCRIPTION: Demonstrates the usage of SQLAlchemy's new inspection system for ORM classes. This example shows how to inspect various aspects of a mapped class, including columns, primary keys, and relationships using the inspect() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> class User(Base):\n...     __tablename__ = \"user\"\n...     id = Column(Integer, primary_key=True)\n...     name = Column(String)\n...     name_syn = synonym(name)\n...     addresses = relationship(\"Address\")\n\n>>> # universal entry point is inspect()\n>>> b = inspect(User)\n\n>>> # b in this case is the Mapper\n>>> b\n<Mapper at 0x101521950; User>\n\n>>> # Column namespace\n>>> b.columns.id\nColumn('id', Integer(), table=<user>, primary_key=True, nullable=False)\n\n>>> # mapper's perspective of the primary key\n>>> b.primary_key\n(Column('id', Integer(), table=<user>, primary_key=True, nullable=False),)\n\n>>> # MapperProperties available from .attrs\n>>> b.attrs.keys()\n['name_syn', 'addresses', 'id', 'name']\n\n>>> # .column_attrs, .relationships, etc. filter this collection\n>>> b.column_attrs.keys()\n['id', 'name']\n\n>>> list(b.relationships)\n[<sqlalchemy.orm.properties.RelationshipProperty object at 0x1015212d0>]\n\n>>> # they are also namespaces\n>>> b.column_attrs.id\n<sqlalchemy.orm.properties.ColumnProperty object at 0x101525090>\n\n>>> b.relationships.addresses\n<sqlalchemy.orm.properties.RelationshipProperty object at 0x1015212d0>\n\n>>> # point inspect() at a mapped, class level attribute,\n>>> # returns the attribute itself\n>>> b = inspect(User.addresses)\n>>> b\n<sqlalchemy.orm.attributes.InstrumentedAttribute object at 0x101521fd0>\n\n>>> # From here we can get the mapper:\n>>> b.mapper\n<Mapper at 0x101525810; Address>\n\n>>> # the parent inspector, in this case a mapper\n>>> b.parent\n<Mapper at 0x101521950; User>\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type with Factorial Operator\nDESCRIPTION: Implements a unary factorial operator for PostgreSQL\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer\nfrom sqlalchemy.sql.expression import UnaryExpression\nfrom sqlalchemy.sql import operators\n\nclass MyInteger(Integer):\n    class comparator_factory(Integer.Comparator):\n        def factorial(self):\n            return UnaryExpression(\n                self.expr, modifier=operators.custom_op(\"!\"), type_=MyInteger\n            )\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Pre-Ping in SQLAlchemy Engine\nDESCRIPTION: Shows how to enable the new 'pre-ping' feature for connection pools, which tests connections for liveness before checkout to handle disconnections more gracefully.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine('postgresql://scott:tiger@localhost/mydatabase',\n                       pool_pre_ping=True)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records with RETURNING Clause - Python\nDESCRIPTION: This snippet demonstrates how to insert multiple user records into a user_account table while using the RETURNING clause to retrieve the generated user ids. It showcases how to maintain the order of input data using the sort_by_parameter_order parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> data = [\n...     {\"name\": \"pearl\", \"fullname\": \"Pearl Krabs\"},\n...     {\"name\": \"plankton\", \"fullname\": \"Plankton\"},\n...     {\"name\": \"gary\", \"fullname\": \"Gary\"},\n... ]\n>>> user_ids = session.scalars(\n...     insert(User).returning(User.id, sort_by_parameter_order=True), data\n... )\n{execsql}INSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id\n[... (insertmanyvalues) 1/3 (ordered; batch not supported)] ('pearl', 'Pearl Krabs')\nINSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id\n[insertmanyvalues 2/3 (ordered; batch not supported)] ('plankton', 'Plankton')\nINSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id\n[insertmanyvalues 3/3 (ordered; batch not supported)] ('gary', 'Gary')\n{stop}>>> for user_id, input_record in zip(user_ids, data):\n...     input_record[\"id\"] = user_id\n>>> print(data)\n[{'name': 'pearl', 'fullname': 'Pearl Krabs', 'id': 6},\n{'name': 'plankton', 'fullname': 'Plankton', 'id': 7},\n{'name': 'gary', 'fullname': 'Gary', 'id': 8}]\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLAlchemy Engine and Session\nDESCRIPTION: This snippet creates a SQLite in-memory database engine, creates all defined tables in the database, and sets up a session for database interactions. It also begins a transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\nBase.metadata.create_all(engine)\nconn = engine.connect()\nsession = Session(conn)\nconn.begin()\n```\n\n----------------------------------------\n\nTITLE: Using Bundles to Group Selected Attributes in SQLAlchemy Python\nDESCRIPTION: The code demonstrates the use of the Bundle construct to group selected attributes in a SQLAlchemy query. Bundles allow for grouping of columns in result sets for cleaner query results and are a flexible tool for creating custom column groupings. Requires the Bundle construct and an active ORM session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.orm import Bundle\nstmt = select(\n    Bundle(\"user\", User.name, User.fullname),\n    Bundle(\"email\", Address.email_address),\n).join_from(User, Address)\nfor row in session.execute(stmt):\n    print(f\"{row.user.name} {row.user.fullname} {row.email.email_address}\")\n```\n\n----------------------------------------\n\nTITLE: Subquery Eager Loading for Users and Addresses\nDESCRIPTION: Demonstrates subqueryload for loading related Address objects for Users with a specific name filter\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import subqueryload\n>>> stmt = select(User).options(subqueryload(User.addresses)).filter_by(name=\"spongebob\")\n>>> results = session.scalars(stmt).all()\n```\n\n----------------------------------------\n\nTITLE: Using yield_per with ORM Queries - Python\nDESCRIPTION: Demonstrates how to use the yield_per execution option to paginate ORM query results. Shows fetching User objects in batches of 10 records.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).execution_options(yield_per=10)\n>>> for partition in session.scalars(stmt).partitions():\n...     for user_obj in partition:\n...         print(user_obj)\n```\n\n----------------------------------------\n\nTITLE: Defining a SQLAlchemy Relationship with a Specific Loading Strategy\nDESCRIPTION: Shows how to define a relationship with a specific loading strategy (selectin) configured as the default for that relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\n\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\n        back_populates=\"user\", lazy=\"selectin\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Cascading @declared_attr for Inheritance-Aware Column Definitions\nDESCRIPTION: Illustrates the new @declared_attr.cascading modifier which invokes the decorated function individually for each class in the mapped inheritance hierarchy. This allows creating distinct columns per subclass based on inheritance position.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass HasIdMixin(object):\n    @declared_attr.cascading\n    def id(cls):\n        if has_inherited_table(cls):\n            return Column(ForeignKey(\"myclass.id\"), primary_key=True)\n        else:\n            return Column(Integer, primary_key=True)\n\n\nclass MyClass(HasIdMixin, Base):\n    __tablename__ = \"myclass\"\n    # ...\n\n\nclass MySubClass(MyClass):\n    \"\"\" \"\"\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using a Dynamic Relationship Query Interface\nDESCRIPTION: Example demonstrating how to use the dynamic relationship query interface to filter, slice, and modify collections without loading the entire collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\njack = session.get(User, id)\n\n# filter Jack's blog posts\nposts = jack.posts.filter(Post.headline == \"this is a post\")\n\n# apply array slices\nposts = jack.posts[5:20]\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Level for Individual Transactions in SQLAlchemy\nDESCRIPTION: Shows how to set the isolation level for a specific transaction using the Session.connection() method. This approach allows changing isolation levels on a per-transaction basis.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\n# assume session just constructed\nsess = Session(bind=engine)\n\n# call connection() with options before any other operations proceed.\n# this will procure a new connection from the bound engine and begin a real\n# database transaction.\nsess.connection(execution_options={\"isolation_level\": \"SERIALIZABLE\"})\n\n# ... work with session in SERIALIZABLE isolation level...\n\n# commit transaction.  the connection is released\n# and reverted to its previous isolation level.\nsess.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Metadata per Base Class in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to assign different MetaData objects to different classes when using the registry.mapped decorator. This allows tables to be organized into separate collections for different purposes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreg = registry()\n\n\nclass BaseOne:\n    metadata = MetaData()\n\n\nclass BaseTwo:\n    metadata = MetaData()\n\n\n@reg.mapped\nclass ClassOne:\n    __tablename__ = \"t1\"  # will use reg.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n\n@reg.mapped\nclass ClassTwo(BaseOne):\n    __tablename__ = \"t1\"  # will use BaseOne.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n\n\n@reg.mapped\nclass ClassThree(BaseTwo):\n    __tablename__ = \"t1\"  # will use BaseTwo.metadata\n\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping with Relationships in SQLAlchemy\nDESCRIPTION: This example expands on the previous imperative mapping example to include a relationship between User and Address. It creates an Address table and then uses the relationship function within the mapper_registry.map_imperatively call to define the relationship.  Backref and ordering are also configured.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id)\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```\n\n----------------------------------------\n\nTITLE: RETURNING Clause with ORM Update\nDESCRIPTION: Demonstrates using RETURNING clause with ORM-enabled UPDATE statement to update a user's fullname and return the updated record\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(fullname=\"Squidward Tentacles\")\n...     .returning(User)\n... )\n>>> result = session.scalars(stmt)\n```\n\n----------------------------------------\n\nTITLE: Async Engine Event Handlers\nDESCRIPTION: Example of implementing event handlers with async engine, including connection and execution events\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom sqlalchemy import event\nfrom sqlalchemy import text\nfrom sqlalchemy.engine import Engine\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\nengine = create_async_engine(\"postgresql+asyncpg://scott:tiger@localhost:5432/test\")\n\n\n# connect event on instance of Engine\n@event.listens_for(engine.sync_engine, \"connect\")\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n    cursor = dbapi_con.cursor()\n\n    # sync style API use for adapted DBAPI connection / cursor\n    cursor.execute(\"select 'execute from event'\")\n    print(cursor.fetchone()[0])\n\n\n# before_execute event on all Engine instances\n@event.listens_for(Engine, \"before_execute\")\ndef my_before_execute(\n    conn,\n    clauseelement,\n    multiparams,\n    params,\n    execution_options,\n):\n    print(\"before execute!\")\n\n\nasync def go():\n    async with engine.connect() as conn:\n        await conn.execute(text(\"select 1\"))\n    await engine.dispose()\n\n\nasyncio.run(go())\n```\n\n----------------------------------------\n\nTITLE: Unicode String Coercion TypeDecorator in SQLAlchemy\nDESCRIPTION: A TypeDecorator implementation that safely coerces Python bytestrings to Unicode before passing to the database. Useful for handling non-ASCII characters in Python 2 environments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.types import TypeDecorator, Unicode\n\nclass CoerceUTF8(TypeDecorator):\n    \"\"\"Safely coerce Python bytestrings to Unicode\n    before passing off to the database.\"\"\"\n\n    impl = Unicode\n\n    def process_bind_param(self, value, dialect):\n        if isinstance(value, str):\n            value = value.decode(\"utf-8\")\n        return value\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy ORM Relationship with Passive Updates Disabled\nDESCRIPTION: Example of SQLAlchemy ORM mapping showing a User-Address relationship with passive_updates=False. This configuration is necessary when the database doesn't support ON UPDATE CASCADE and primary keys need to be updated. The example demonstrates a one-to-many relationship between User and Address tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/relationship_persistence.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    username = mapped_column(String(50), primary_key=True)\n    fullname = mapped_column(String(100))\n\n    # passive_updates=False *only* needed if the database\n    # does not implement ON UPDATE CASCADE\n    addresses = relationship(\"Address\", passive_updates=False)\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    email = mapped_column(String(50), primary_key=True)\n    username = mapped_column(String(50), ForeignKey(\"user.username\"))\n```\n\n----------------------------------------\n\nTITLE: Type-Checking Import with Runtime Relationship Definition\nDESCRIPTION: Shows how to use type checking imports with a runtime specifier for the target class using SQLAlchemy's relationship configuration\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nif typing.TYPE_CHECKING:\n    from myapp.mymodel import Child\n\nclass Parent(Base):\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"myapp.mymodel.Child\",\n        order_by=\"desc(myapp.mymodel.Child.email_address)\",\n        primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relationship vs Foreign Key Attribute Priority\nDESCRIPTION: Code example showing how setting relationship attributes takes precedence over directly setting foreign key values, including the changed behavior with None values in SQLAlchemy 1.0 compared to 0.9.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\na1 = A(id=1)\na2 = A(id=2)\nsession.add_all([a1, a2])\nsession.flush()\n\nb1 = B()\nb1.a = a1  # we expect a_id to be '1'; takes precedence in 0.9 and 1.0\n\nb2 = B()\nb2.a = None  # we expect a_id to be None; takes precedence only in 1.0\n\nb1.a_id = 2\nb2.a_id = 2\n\nsession.add_all([b1, b2])\nsession.commit()\n\nassert b1.a is a1  # passes in both 0.9 and 1.0\nassert b2.a is None  # passes in 1.0, in 0.9 it's a2\n```\n\n----------------------------------------\n\nTITLE: Basic Declarative Base Setup in Python\nDESCRIPTION: Shows how to set up a basic declarative base class for SQLAlchemy ORM mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy ORM Models for User and Book in Python\nDESCRIPTION: This snippet defines two SQLAlchemy ORM models: User and Book. It demonstrates the use of Mapped types, relationships, and various column types including LargeBinary for storing binary data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_deferred_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\n    pass\nclass User(Base):\n    __tablename__ = \"user_account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    books: Mapped[List[\"Book\"]] = relationship(back_populates=\"owner\")\n\n    def __repr__(self) -> str:\n        return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\nclass Book(Base):\n    __tablename__ = \"book\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    title: Mapped[str]\n    summary: Mapped[str] = mapped_column(Text)\n    cover_photo: Mapped[bytes] = mapped_column(LargeBinary)\n    owner: Mapped[\"User\"] = relationship(back_populates=\"books\")\n\n    def __repr__(self) -> str:\n        return f\"Book(id={self.id!r}, title={self.title!r})\"\n```\n\n----------------------------------------\n\nTITLE: SQL output of chained joins\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account`, `user_order`, `order_items`, and `item`. Two :meth:`_sql.Select.join` calls will result in a JOIN first from ``User`` to ``Order``, and a second from ``Order`` to ``Item``.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nJOIN user_order ON user_account.id = user_order.user_id\nJOIN order_items AS order_items_1 ON user_order.id = order_items_1.order_id\nJOIN item ON item.id = order_items_1.item_id\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy Update Constructor\nDESCRIPTION: Illustrates the usage of the Update constructor. The Update class provides methods for constructing UPDATE statements, including specifying values to update, conditions with where(), and adding returning clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/dml.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nupdate_stmt = update(table).where(table.c.id == 5).values(name='John').returning(table.c.id)\n```\n\n----------------------------------------\n\nTITLE: Joining with Explicit On-Clause in SQLAlchemy Query\nDESCRIPTION: Demonstrates the new default method of using query.join() with an explicit on-clause in SQLAlchemy 0.7. This syntax no longer requires wrapping the arguments in a tuple.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nquery.join(SomeClass, SomeClass.id == ParentClass.some_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Relationship with AliasedClass\nDESCRIPTION: Demonstrates how to create a relationship involving multiple intermediate tables using SQLAlchemy's AliasedClass with complex join conditions. This technique allows for advanced mapping strategies when direct relationships are insufficient.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = mapped_column(Integer, primary_key=True)\n    b_id = mapped_column(ForeignKey(\"b.id\"))\n\nj = join(B, D, D.b_id == B.id).join(C, C.id == D.c_id)\nB_viacd = aliased(B, j, flat=True)\nA.b = relationship(B_viacd, primaryjoin=A.b_id == j.c.b_id)\n```\n\n----------------------------------------\n\nTITLE: Combining INSERT...FROM SELECT with RETURNING in SQLAlchemy\nDESCRIPTION: Shows how to use INSERT...FROM SELECT in combination with the RETURNING clause. This allows inserting data from one table into another while also retrieving specific columns from the inserted rows.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt.returning(address_table.c.id, address_table.c.email_address))\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO address (user_id, email_address)\nSELECT user_account.id, user_account.name || :name_1 AS anon_1\nFROM user_account RETURNING address.id, address.email_address\n```\n\n----------------------------------------\n\nTITLE: Managing Nested Transactions with SQLAlchemy Session in Python\nDESCRIPTION: This snippet explains the use of nested transactions in SQLAlchemy using the session's begin_nested method. It provides the capability to control smaller transactions within the broader session context with independent commit/rollback control.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nSession = sessionmaker(engine)\n\nwith Session.begin() as session:\n    savepoint = session.begin_nested()\n    session.add_all(\n        [\n            SomeClass(data=\"some data one\"),\n            SomeClass(data=\"some data two\"),\n            SomeClass(data=\"some data three\"),\n        ]\n    )\n    savepoint.commit()  # or rollback\n# commits automatically\n```\n\n----------------------------------------\n\nTITLE: Mixing in Relationships with SQLAlchemy ORM\nDESCRIPTION: Shows how to create a mixin class that adds a relationship and foreign key to multiple mapped classes. Uses declared_attr to properly handle relationship creation in the mixin context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass RefTargetMixin:\n    target_id: Mapped[int] = mapped_column(ForeignKey(\"target.id\"))\n\n    @declared_attr\n    def target(cls) -> Mapped[\"Target\"]:\n        return relationship(\"Target\")\n\n\nclass Foo(RefTargetMixin, Base):\n    __tablename__ = \"foo\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n\nclass Bar(RefTargetMixin, Base):\n    __tablename__ = \"bar\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n\nclass Target(Base):\n    __tablename__ = \"target\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Column Types with Annotated\nDESCRIPTION: Demonstrates creating reusable column configurations using Annotated types for integer primary keys, timestamps, and required string fields.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import func\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import mapped_column\n\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False, server_default=func.CURRENT_TIMESTAMP()),\n]\nrequired_name = Annotated[str, mapped_column(String(30), nullable=False)]\n```\n\n----------------------------------------\n\nTITLE: Using contains_eager for Nested Relationships\nDESCRIPTION: Demonstrates how to use contains_eager for loading nested relationships. The path must be a full path from the starting entity through each relationship level.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(User).options(contains_eager(User.orders).contains_eager(Order.items))\n```\n\n----------------------------------------\n\nTITLE: Using DeferredReflection for Delayed Table Reflection in Declarative SQLAlchemy\nDESCRIPTION: Demonstrates the DeferredReflection feature in SQLAlchemy Declarative, which allows the construction of mapped classes with placeholder Table metadata that gets populated during a prepare() step with database reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ReflectedOne(DeferredReflection, Base):\n    __abstract__ = True\n\n\nclass ReflectedTwo(DeferredReflection, Base):\n    __abstract__ = True\n\n\nclass MyClass(ReflectedOne):\n    __tablename__ = \"mytable\"\n\n\nclass MyOtherClass(ReflectedOne):\n    __tablename__ = \"myothertable\"\n\n\nclass YetAnotherClass(ReflectedTwo):\n    __tablename__ = \"yetanothertable\"\n\n\nReflectedOne.prepare(engine_one)\nReflectedTwo.prepare(engine_two)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata for Declarative Base in Python\nDESCRIPTION: Demonstrates how to set custom metadata for a declarative base class, specifying a schema for all tables derived from this base.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\nfrom sqlalchemy.orm import DeclarativeBase\n\nmetadata_obj = MetaData(schema=\"some_schema\")\n\n\nclass Base(DeclarativeBase):\n    metadata = metadata_obj\n\n\nclass MyClass(Base):\n    # will use \"some_schema\" by default\n    __tablename__ = \"sometable\"\n```\n\n----------------------------------------\n\nTITLE: Schema Translation with Identity Tokens - Python\nDESCRIPTION: Example of using schema translation and identity tokens to handle objects with same primary keys from different schemas. Shows table definition and session setup.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass MyTable(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Joined Eager Loading Example\nDESCRIPTION: Shows how to perform joined eager loading using the joinedload option\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nstmt = select(User).options(joinedload(User.addresses)).filter_by(name=\"spongebob\")\nspongebob = session.scalars(stmt).unique().all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Primary Key with Autoincrement\nDESCRIPTION: Example showing how to properly configure a Numeric column as an auto-incrementing primary key. The column must have an explicit scale of zero and autoincrement set to True.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_21/11811.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nColumn('id', Numeric(scale=0), primary_key=True, autoincrement=True)\n```\n\n----------------------------------------\n\nTITLE: Generating CREATE TABLE DDL as a String in SQLAlchemy\nDESCRIPTION: These snippets demonstrate how to generate CREATE TABLE DDL statements as strings, both generally and for a specific engine.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import CreateTable\n\nprint(CreateTable(mytable))\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(CreateTable(mytable).compile(engine))\n```\n\n----------------------------------------\n\nTITLE: Late-Evaluated Many-to-Many Relationship\nDESCRIPTION: Demonstrates late evaluation of secondary table in many-to-many relationships using lambda functions or string references\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"left_table\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(\n        \"Child\", \n        secondary=lambda: association_table\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Validators to ORM Attributes in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use the `validates` decorator to add a validation routine to an attribute. The validator can raise an exception to halt the mutation process or change the value. Validators are called by userland code, not during ORM object population.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import validates\n\n\nclass EmailAddress(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simple email validation\")\n        return address\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy DML Constructors\nDESCRIPTION: Shows how to import the delete, insert, and update constructors from SQLAlchemy's expression module. These are the top-level constructors for creating DML statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/dml.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql.expression import delete, insert, update\n```\n\n----------------------------------------\n\nTITLE: Reflecting a Table in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to reflect an existing database table into a SQLAlchemy Table object using the autoload_with parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> messages = Table(\"messages\", metadata_obj, autoload_with=engine)\n>>> [c.name for c in messages.columns]\n['message_id', 'message_name', 'date']\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed Columns in SQLAlchemy\nDESCRIPTION: This snippet demonstrates the construction of a SQLAlchemy Table with both regular and unique indexes defined. It uses the `Index` class to establish relationships between columns and improve query performance. Essential dependencies include the SQLAlchemy library.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\nmytable = Table(\n    \"mytable\",\n    metadata_obj,\n    # an indexed column, with index \"ix_mytable_col1\"\n    Column(\"col1\", Integer, index=True),\n    # a uniquely indexed column with index \"ix_mytable_col2\"\n    Column(\"col2\", Integer, index=True, unique=True),\n    Column(\"col3\", Integer),\n    Column(\"col4\", Integer),\n    Column(\"col5\", Integer),\n    Column(\"col6\", Integer),\n)\n\n# place an index on col3, col4\nIndex(\"idx_col34\", mytable.c.col3, mytable.c.col4)\n\n# place a unique index on col5, col6\nIndex(\"myindex\", mytable.c.col5, mytable.c.col6, unique=True)\n\nmytable.create(engine)\n{execsql}CREATE TABLE mytable (\n    col1 INTEGER,\n    col2 INTEGER,\n    col3 INTEGER,\n    col4 INTEGER,\n    col5 INTEGER,\n    col6 INTEGER\n)\nCREATE INDEX ix_mytable_col1 ON mytable (col1)\nCREATE UNIQUE INDEX ix_mytable_col2 ON mytable (col2)\nCREATE UNIQUE INDEX myindex ON mytable (col5, col6)\nCREATE INDEX idx_col34 ON mytable (col3, col4){stop}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Default Values in SQLAlchemy Table Creation\nDESCRIPTION: Demonstrates setting up server-side default values for columns using server_default parameter, including string literals, SQL functions, and constant values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nt = Table(\n    \"test\",\n    metadata_obj,\n    Column(\"abc\", String(20), server_default=\"abc\"),\n    Column(\"created_at\", DateTime, server_default=func.sysdate()),\n    Column(\"index_value\", Integer, server_default=text(\"0\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Items through Associations in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to create Parent and Association instances, linking them together within SQLAlchemy. It shows how to append children to the Parent through the Association instance and demonstrates iterating through the children while accessing associated attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# create parent, append a child via association\np = Parent()\na = Association(extra_data=\"some data\")\na.child = Child()\np.children.append(a)\n\n# iterate through child objects via association, including association\n# attributes\nfor assoc in p.children:\n    print(assoc.extra_data)\n    print(assoc.child)\n```\n\n----------------------------------------\n\nTITLE: Basic Dataclass Mapping with MappedAsDataclass Mixin\nDESCRIPTION: Demonstrates using MappedAsDataclass mixin with DeclarativeBase to create dataclass-enabled ORM mappings. Includes basic column definitions with Mapped types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\n\nclass Base(MappedAsDataclass, DeclarativeBase):\n    \"\"\"subclasses will be converted to dataclasses\"\"\"\n\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Recursive Object Relationship Walker in SQLAlchemy\nDESCRIPTION: Implementation of a utility function that walks through all related objects of a given SQLAlchemy ORM object, handling cycles and both single and collection relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect\n\n\ndef walk(obj):\n    deque = [obj]\n\n    seen = set()\n\n    while deque:\n        obj = deque.pop(0)\n        if obj in seen:\n            continue\n        else:\n            seen.add(obj)\n            yield obj\n        insp = inspect(obj)\n        for relationship in insp.mapper.relationships:\n            related = getattr(obj, relationship.key)\n            if relationship.uselist:\n                deque.extend(related)\n            elif related is not None:\n                deque.append(related)\n```\n\n----------------------------------------\n\nTITLE: Mapping Pre-existing Dataclasses Using Declarative With Imperative Table - Python\nDESCRIPTION: This snippet demonstrates how to map an existing dataclass using SQLAlchemy's ORM with Declarative combined with Imperative Table. The User and Address dataclasses are created with a join and concrete table definitions, including relationships defined in the mapper args.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\n\\nfrom dataclasses import dataclass, field\\nfrom typing import List, Optional\\n\\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table\\nfrom sqlalchemy.orm import registry, relationship\\n\\nmapper_registry = registry()\\n\\n\\n@mapper_registry.mapped\\n@dataclass\\nclass User:\\n    __table__ = Table(\\n        \"user\",\\n        mapper_registry.metadata,\\n        Column(\"id\", Integer, primary_key=True),\\n        Column(\"name\", String(50)),\\n        Column(\"fullname\", String(50)),\\n        Column(\"nickname\", String(12)),\\n    )\\n    id: int = field(init=False)\\n    name: Optional[str] = None\\n    fullname: Optional[str] = None\\n    nickname: Optional[str] = None\\n    addresses: List[Address] = field(default_factory=list)\\n\\n    __mapper_args__ = {  # type: ignore\\n        \"properties\": {\\n            \"addresses\": relationship(\"Address\"),\\n        }\\n    }\\n\\n\\n@mapper_registry.mapped\\n@dataclass\\nclass Address:\\n    __table__ = Table(\\n        \"address\",\\n        mapper_registry.metadata,\\n        Column(\"id\", Integer, primary_key=True),\\n        Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\\n        Column(\"email_address\", String(50)),\\n    )\\n    id: int = field(init=False)\\n    user_id: int = field(init=False)\\n    email_address: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Example of Session Merge Operations in SQLAlchemy\nDESCRIPTION: Demonstrates merge operations and potential issues with cascade behavior when merging Address objects with existing User relationships\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> u1 = User(name=\"ed\", addresses=[Address(email_address=\"ed@ed.com\")])\n>>> session.add(u1)\n>>> session.commit()\n\n>>> existing_a1 = u1.addresses[0]\n>>> a1 = Address(id=existing_a1.id)\n\n>>> a1.user = u1\n>>> a1 = session.merge(a1)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table with Vendor-Specific Types\nDESCRIPTION: Shows the SQL output for creating a MySQL table with specific datatypes like MEDIUMINT and TINYINT with MySQL-specific options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE my_table (\nid INTEGER(11) NOT NULL AUTO_INCREMENT,\ndata1 VARCHAR(50) CHARACTER SET latin1,\ndata2 MEDIUMINT(4),\ndata3 TINYINT(2),\nPRIMARY KEY (id)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n----------------------------------------\n\nTITLE: Commit-as-you-go Session Transaction Pattern\nDESCRIPTION: Shows the manual transaction management pattern where transactions are committed explicitly as needed. The Session automatically begins new transactions as required.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsession = Session(engine)\n\nsession.add(some_object())\nsession.add(some_other_object())\n\nsession.commit()  # commits\n\n# will automatically begin again\nresult = session.execute(text(\"< some select statement >\"))\nsession.add_all([more_objects, ...])\nsession.commit()  # commits\n\nsession.add(still_another_object)\nsession.flush()  # flush still_another_object\nsession.rollback()  # rolls back still_another_object\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Only Relationships with SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to configure a write-only relationship using SQLAlchemy ORM with the Declarative Base. It shows how to use the WriteOnlyMapped type to ensure that a relationship is writable but does not load its contents into memory.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from decimal import Decimal\n>>> from datetime import datetime\n\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import func\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n>>> from sqlalchemy.orm import Session\n>>> from sqlalchemy.orm import WriteOnlyMapped\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class Account(Base):\n...     __tablename__ = \"account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     identifier: Mapped[str]\n...     \n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         cascade=\"all, delete-orphan\",\n...         passive_deletes=True,\n...         order_by=\"AccountTransaction.timestamp\",\n...     )\n...     \n...     def __repr__(self):\n...         return f\"Account(identifier={self.identifier!r})\"\n\n>>> class AccountTransaction(Base):\n...     __tablename__ = \"account_transaction\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_id: Mapped[int] = mapped_column(\n...         ForeignKey(\"account.id\", ondelete=\"cascade\")\n...     )\n...     description: Mapped[str]\n...     amount: Mapped[Decimal]\n...     timestamp: Mapped[datetime] = mapped_column(default=func.now())\n...     \n...     def __repr__(self):\n...         return (\n...             f\"AccountTransaction(amount={self.amount:.2f}, \"\n...             f\"timestamp={self.timestamp.isoformat()!r})\"\n...         )\n...     \n...     __mapper_args__ = {\"eager_defaults\": True}\n```\n\n----------------------------------------\n\nTITLE: Using Commit-As-You-Go Pattern with 2.0 Style Engine\nDESCRIPTION: Demonstrates the new 'commit-as-you-go' pattern available in SQLAlchemy 2.0. This approach uses the autobegin behavior of the Connection object when executing statements, followed by an explicit commit call to persist the changes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    conn.execute(some_table.insert().values(foo=\"bar\"))\n    conn.execute(some_other_table.insert().values(bat=\"hoho\"))\n\n    conn.commit()\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Constraint Naming\nDESCRIPTION: Shows how to configure naming conventions for constraints generated by Boolean type columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData(\n    naming_convention={\"ck\": \"ck_%(table_name)s_%(constraint_name)s\"}\n)\n\nTable(\"foo\", metadata_obj, Column(\"flag\", Boolean(name=\"flag_bool\")))\n```\n\n----------------------------------------\n\nTITLE: Multi-Schema Database Operations - Python\nDESCRIPTION: Example of working with multiple schemas using execution options and schema translation maps to persist and query objects across schemas.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\n    \"postgresql+psycopg://scott:tiger@localhost/test\",\n)\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema one\"))\n    sess.commit()\n\nwith Session(\n    engine.execution_options(schema_translate_map={None: \"test_schema_2\"})\n) as sess:\n    sess.add(MyTable(name=\"this is schema two\"))\n    sess.commit()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Models with PEP-593 Annotated Types\nDESCRIPTION: Advanced implementation using PEP-593 Annotated types to create reusable column definitions and type mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Annotated\nfrom typing import List\nfrom typing import Optional\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nstr50 = Annotated[str, 50]\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        str50: String(50),\n    }\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\nuser_fk = Annotated[int, mapped_column(ForeignKey(\"user_account.id\"))]\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[intpk]\n    name: Mapped[str50]\n    fullname: Mapped[Optional[str]]\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id: Mapped[intpk]\n    email_address: Mapped[str50]\n    user_id: Mapped[user_fk]\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Custom List-Like Collection Implementation\nDESCRIPTION: Demonstrates a basic custom collection implementation that mimics list behavior with append, remove, and extend methods.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ListLike:\n    def __init__(self):\n        self.data = []\n\n    def append(self, item):\n        self.data.append(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def extend(self, items):\n        self.data.extend(items)\n\n    def __iter__(self):\n        return iter(self.data)\n\n    def foo(self):\n        return \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Employee Class Definition\nDESCRIPTION: SQLAlchemy ORM class definition for the base Employee class with polymorphic configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n```\n\n----------------------------------------\n\nTITLE: Using BLANK_SCHEMA with Default MetaData Schema\nDESCRIPTION: Shows how to override the default schema specified in MetaData for specific tables using the BLANK_SCHEMA symbol.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import BLANK_SCHEMA\n\nmetadata_obj = MetaData(schema=\"remote_banks\")\n\nfinancial_info = Table(\n    \"financial_info\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"value\", String(100), nullable=False),\n    schema=BLANK_SCHEMA,  # will not use \"remote_banks\"\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Reflected Columns in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to override specific columns when reflecting a table, useful for customizing data types or adding constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> mytable = Table(\n...     \"mytable\",\n...     metadata_obj,\n...     Column(\n...         \"id\", Integer, primary_key=True\n...     ),  # override reflected 'id' to have primary key\n...     Column(\"mydata\", Unicode(50)),  # override reflected 'mydata' to be Unicode\n...     # additional Column objects which require no change are reflected normally\n...     autoload_with=some_engine,\n... )\n```\n\n----------------------------------------\n\nTITLE: Overriding Type Annotation Nullability in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to override nullability implied by type annotations. The first example defines a column that accepts None in Python but is NOT NULL in the database schema, while the second creates a non-Optional type in Python that maps to a NULL column in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SomeClass(Base):\n    # ...\n\n    # will be String() NOT NULL, but can be None in Python\n    data: Mapped[Optional[str]] = mapped_column(nullable=False)\n\n    # will be String() NULL, but type checker will not expect\n    # the attribute to be None\n    data: Mapped[str] = mapped_column(nullable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Session with Multiple Engine Bindings in SQLAlchemy\nDESCRIPTION: Demonstrates how to configure a Session to use different engines for different base classes. Classes that inherit from BaseA will use engine1, while classes inheriting from BaseB will use engine2.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass User(BaseA): ...\n\n\nclass Address(BaseA): ...\n\n\nclass GameInfo(BaseB): ...\n\n\nclass GameStats(BaseB): ...\n\n\nSession = sessionmaker()\n\n# all User/Address operations will be on engine 1, all\n# Game operations will be on engine 2\nSession.configure(binds={BaseA: engine1, BaseB: engine2})\n```\n\n----------------------------------------\n\nTITLE: Mapping a Class against Arbitrary Subqueries in Python\nDESCRIPTION: This snippet illustrates how to map a class to a subquery in SQLAlchemy. It demonstrates creating a subquery that counts orders and finding a maximum price while keeping the relation to customers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/nonstandard_mappings.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select, func\n\nsubq = (\n    select(\n        func.count(orders.c.id).label(\"order_count\"),\n        func.max(orders.c.price).label(\"highest_order\"),\n        orders.c.customer_id,\n    )\n    .group_by(orders.c.customer_id)\n    .subquery()\n)\n\ncustomer_select = (\n    select(customers, subq)\n    .join_from(customers, subq, customers.c.id == subq.c.customer_id)\n    .subquery()\n)\n\n\nclass Customer(Base):\n    __table__ = customer_select\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Single-Table Inheritance with __table_cls__ in SQLAlchemy ORM\nDESCRIPTION: Demonstrates an advanced use of __table_cls__ to dynamically determine whether a class should use single-table inheritance based on the presence of primary key columns in its table definition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AutoTable:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__\n\n    @classmethod\n    def __table_cls__(cls, *arg, **kw):\n        for obj in arg[1:]:\n            if (isinstance(obj, Column) and obj.primary_key) or isinstance(\n                obj, PrimaryKeyConstraint\n            ):\n                return Table(*arg, **kw)\n\n        return None\n\n\nclass Person(AutoTable, Base):\n    id = mapped_column(Integer, primary_key=True)\n\n\nclass Employee(Person):\n    employee_name = mapped_column(String)\n```\n\n----------------------------------------\n\nTITLE: Using awaitable-only driver methods in connection pool and other events (Python)\nDESCRIPTION: This snippet demonstrates how to use awaitable-only driver methods, such as asyncpg's .set_type_codec(), within event handlers. It uses AdaptedConnection.run_async to execute an awaitable function in the synchronous context of the event handler, allowing access to the underlying driver connection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n    from sqlalchemy import event\n    from sqlalchemy.ext.asyncio import create_async_engine\n\n    engine = create_async_engine(...)\n\n\n    @event.listens_for(engine.sync_engine, \"connect\")\n    def register_custom_types(dbapi_connection, *args):\n        dbapi_connection.run_async(\n            lambda connection: connection.set_type_codec(\n                \"MyCustomType\",\n                encoder,\n                decoder,  # ...\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Handling Comparison Operations for JSONEncodedDict in SQLAlchemy\nDESCRIPTION: Demonstrates how to handle comparison operations like LIKE for the JSONEncodedDict type by overriding the coerce_compared_value method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import operators\nfrom sqlalchemy import String\n\n\nclass JSONEncodedDict(TypeDecorator):\n    impl = VARCHAR\n\n    cache_ok = True\n\n    def coerce_compared_value(self, op, value):\n        if op in (operators.like_op, operators.not_like_op):\n            return String()\n        else:\n            return self\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            value = json.dumps(value)\n\n        return value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            value = json.loads(value)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Individual Tables\nDESCRIPTION: Shows how to create and drop individual tables using SQLAlchemy's Table methods with execution options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite:///:memory:\")\n\nmetadata_obj = MetaData()\n\nemployees = Table(\n    \"employees\",\n    metadata_obj,\n    Column(\"employee_id\", Integer, primary_key=True),\n    Column(\"employee_name\", String(60), nullable=False, key=\"name\"),\n    Column(\"employee_dept\", Integer, ForeignKey(\"departments.department_id\")),\n)\nemployees.create(engine)\nemployees.drop(engine)\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship with Inner Join in SQLAlchemy - Python\nDESCRIPTION: Defines a mapped relationship for the Address model to the User model using an inner join for efficiency. This alignment ensures that the retrieved addresses are guaranteed to have related users.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Address(Base):\n    # ...\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[User] = relationship(lazy=\"joined\", innerjoin=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Column Loading in SQLAlchemy ORM\nDESCRIPTION: Shows how to use the deferred() function to configure a column to load only when accessed rather than in the initial query. This is useful for large columns like text fields that aren't always needed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import deferred\n\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n    Column(\"bio\", Text),\n)\n\n\nclass User(Base):\n    __table__ = user_table\n\n    bio = deferred(user_table.c.bio)\n```\n\n----------------------------------------\n\nTITLE: Initializing Scoped Session with Session Factory\nDESCRIPTION: Creates a thread-local session registry using scoped_session and sessionmaker. This sets up a factory that will create new Session objects on demand while maintaining thread safety.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import scoped_session\n>>> from sqlalchemy.orm import sessionmaker\n\n>>> session_factory = sessionmaker(bind=some_engine)\n>>> Session = scoped_session(session_factory)\n```\n\n----------------------------------------\n\nTITLE: Adding SQL Comments to Tables and Columns in SQLAlchemy\nDESCRIPTION: Demonstrates how to add SQL comments to Table and Column objects using the new 'comment' parameter, which will be included in DDL statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String, MetaData\n\nmetadata = MetaData()\n\nuser_table = Table('user', metadata,\n    Column('id', Integer, primary_key=True, comment='The user ID'),\n    Column('name', String(50), comment='The user name'),\n    comment='Table storing user information'\n)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Custom Join Condition with Backref\nDESCRIPTION: Demonstrates using backref with a custom join condition that filters addresses to only those starting with 'tony'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        primaryjoin=(\n            \"and_(User.id==Address.user_id, Address.email.startswith('tony'))\"\n        ),\n        backref=\"user\",\n    )\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n```\n\n----------------------------------------\n\nTITLE: INSERT with Scalar Subquery\nDESCRIPTION: This snippet demonstrates a more advanced INSERT statement using a scalar subquery to populate a column. The subquery selects the user ID based on the username, and the `bindparam` function is used to parameterize the username in the subquery.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n        >>> from sqlalchemy import select, bindparam\n        >>> scalar_subq = (\n        ...     select(user_table.c.id)\n        ...     .where(user_table.c.name == bindparam(\"username\"))\n        ...     .scalar_subquery()\n        ... )\n\n        >>> with engine.connect() as conn:\n        ...     result = conn.execute(\n        ...         insert(address_table).values(user_id=scalar_subq),\n        ...         [\n        ...             {\n        ...                 \"username\": \"spongebob\",\n        ...                 \"email_address\": \"spongebob@sqlalchemy.org\",\n        ...             },\n        ...             {\"username\": \"sandy\", \"email_address\": \"sandy@sqlalchemy.org\"},\n        ...             {\"username\": \"sandy\", \"email_address\": \"sandy@squirrelpower.org\"},\n        ...         ],\n        ...     )\n        ...     conn.commit()\n        {execsql}BEGIN (implicit)\n        INSERT INTO address (user_id, email_address) VALUES ((SELECT user_account.id\n        FROM user_account\n        WHERE user_account.name = ?), ?)\n        [...] [('spongebob', 'spongebob@sqlalchemy.org'), ('sandy', 'sandy@sqlalchemy.org'),\n        ('sandy', 'sandy@squirrelpower.org')]\n        COMMIT{stop}\n\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Subclass in Single Inheritance with SQLAlchemy ORM\nDESCRIPTION: This example shows how querying a specific subclass (Engineer) in a single inheritance hierarchy adds a WHERE clause to limit the rows to only that subclass type.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(Engineer).order_by(Engineer.id)\n>>> objects = session.scalars(stmt).all()\n{execsql}SELECT employee.id, employee.name, employee.type, employee.engineer_info\nFROM employee\nWHERE employee.type IN (?) ORDER BY employee.id\n[...] ('engineer',)\n{stop}>>> for obj in objects:\n...     print(f\"{obj}\")\nEngineer('SpongeBob')\nEngineer('Squidward')\n```\n\n----------------------------------------\n\nTITLE: Bulk INSERT for Joined Table Inheritance - Python\nDESCRIPTION: This snippet illustrates how to perform bulk inserts for an entity that uses joined table inheritance. It shows how to emit INSERT statements for each mapped table while transferring primary key values as needed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> managers = session.scalars(\n...     insert(Manager).returning(Manager),\n...     [\n...         {\"name\": \"sandy\", \"manager_name\": \"Sandy Cheeks\"},\n...         {\"name\": \"ehkrabs\", \"manager_name\": \"Eugene H. Krabs\"},\n...     ],\n... )\n{execsql}INSERT INTO employee (name, type) VALUES (?, ?) RETURNING id, name, type\n[... (insertmanyvalues) 1/2 (ordered; batch not supported)] ('sandy', 'manager')\nINSERT INTO employee (name, type) VALUES (?, ?) RETURNING id, name, type\n[insertmanyvalues 2/2 (ordered; batch not supported)] ('ehkrabs', 'manager')\n```\n\n----------------------------------------\n\nTITLE: Rolling back a transaction in SQLAlchemy\nDESCRIPTION: This code snippet demonstrates how to correctly rollback a transaction in SQLAlchemy. It is crucial to rollback the outer transaction to ensure data consistency when an inner transaction has already been rolled back.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n\"transaction1.rollback()\"\n```\n\n----------------------------------------\n\nTITLE: Querying Account Transactions with Select in SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to generate a SELECT statement for account transactions based on a parent's account ID using the SQLAlchemy ORM. It illustrates how to define selection criteria and order the results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> print(existing_account.account_transactions.select())\n{printsql}SELECT account_transaction.id, account_transaction.account_id, account_transaction.description,\naccount_transaction.amount, account_transaction.timestamp\nFROM account_transaction\nWHERE :param_1 = account_transaction.account_id ORDER BY account_transaction.timestamp\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> account_transactions = session.scalars(\n...     existing_account.account_transactions.select()\n...     .where(AccountTransaction.amount < 0)\n...     .limit(10)\n... ).all()\n{execsql}BEGIN (implicit)\nSELECT account_transaction.id, account_transaction.account_id, account_transaction.description,\naccount_transaction.amount, account_transaction.timestamp\nFROM account_transaction\nWHERE ? = account_transaction.account_id AND account_transaction.amount < ?\nORDER BY account_transaction.timestamp  LIMIT ? OFFSET ?\n[...] (1, 0, 10, 0)\n{stop}>>> print(account_transactions)\n[AccountTransaction(amount=-29.50, timestamp='...'), AccountTransaction(amount=-800.00, timestamp='...')]\n```\n\n----------------------------------------\n\nTITLE: Basic Mixin Implementation with SQLAlchemy ORM\nDESCRIPTION: Demonstrates implementing common mixins including CommonMixin for shared table attributes and HasLogRecord for logging functionality. Shows usage of mapped_column, relationship, and declared_attr decorators.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass CommonMixin:\n    \"\"\"define a series of common elements that may be applied to mapped\n    classes using this class as a mixin class.\"\"\"\n\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\n\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n    __mapper_args__ = {\"eager_defaults\": True}\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n\nclass HasLogRecord:\n    \"\"\"mark classes that have a many-to-one relationship to the\n    ``LogRecord`` class.\"\"\"\n\n    log_record_id: Mapped[int] = mapped_column(ForeignKey(\"logrecord.id\"))\n\n    @declared_attr\n    def log_record(self) -> Mapped[\"LogRecord\"]:\n        return relationship(\"LogRecord\")\n\n\nclass LogRecord(CommonMixin, Base):\n    log_info: Mapped[str]\n\n\nclass MyModel(CommonMixin, HasLogRecord, Base):\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple-Parameter INSERT with SQLAlchemy Connection\nDESCRIPTION: This snippet shows how to execute an INSERT statement with multiple parameter sets using SQLAlchemy's Connection object, demonstrating the executemany style.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    conn.execute(\n        text(\"INSERT INTO some_table (x, y) VALUES (:x, :y)\"),\n        [{\"x\": 11, \"y\": 12}, {\"x\": 13, \"y\": 14}],\n    )\n    conn.commit()\n```\n\n----------------------------------------\n\nTITLE: Computed Column DDL Support (SQL)\nDESCRIPTION: Added DDL support for computed columns, supporting both virtual (computed on SELECT) and stored (computed on INSERT/UPDATE) columns for PostgreSQL, MySQL, Oracle, SQL Server, and Firebird.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE example (\n    id INTEGER,\n    computed_column INTEGER GENERATED ALWAYS AS (id * 2) STORED\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Inheritance in SQLAlchemy ORM\nDESCRIPTION: This snippet defines a polymorphic inheritance hierarchy with Employee as the base class and Manager and Engineer as subclasses. It demonstrates the use of __mapper_args__ for configuring polymorphic identities and discriminators.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r})\"\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r}, manager_name={self.manager_name!r})\"\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info: Mapped[str]\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r}, engineer_info={self.engineer_info!r})\"\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Reflecting Multiple Tables for ORM Mapping in SQLAlchemy\nDESCRIPTION: Demonstrates how to reflect an entire database schema and then map classes to the reflected tables. This approach efficiently loads multiple table definitions in a single operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nBase.metadata.reflect(engine)\n\n\nclass MyClass(Base):\n    __table__ = Base.metadata.tables[\"mytable\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Classical Concrete Inheritance Mapping in SQLAlchemy\nDESCRIPTION: This code snippet shows how to implement a classical (non-Declarative) concrete inheritance mapping in SQLAlchemy. It defines classes without using Declarative and then maps them using mapper_registry.map_imperatively(), explicitly setting up the inheritance and polymorphic identity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass Employee:\n    def __init__(self, **kw):\n        for k in kw:\n            setattr(self, k, kw[k])\n\n\nclass Manager(Employee):\n    pass\n\n\nclass Engineer(Employee):\n    pass\n\n\nemployee_mapper = mapper_registry.map_imperatively(\n    Employee,\n    pjoin,\n    with_polymorphic=(\"*\", pjoin),\n    polymorphic_on=pjoin.c.type,\n)\nmanager_mapper = mapper_registry.map_imperatively(\n    Manager,\n    managers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"manager\",\n)\nengineer_mapper = mapper_registry.map_imperatively(\n    Engineer,\n    engineers_table,\n    inherits=employee_mapper,\n    concrete=True,\n    polymorphic_identity=\"engineer\",\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Constraint Creation with Database Checks\nDESCRIPTION: Illustrates creating conditional CHECK constraints by first checking the PostgreSQL catalog tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef should_create(ddl, target, connection, **kw):\n    row = connection.execute(\n        \"select conname from pg_constraint where conname='%s'\" % ddl.element.name\n    ).scalar()\n    return not bool(row)\n\n\ndef should_drop(ddl, target, connection, **kw):\n    return not should_create(ddl, target, connection, **kw)\n\n\nevent.listen(\n    users,\n    \"after_create\",\n    DDL(\n        \"ALTER TABLE users ADD CONSTRAINT \"\n        \"cst_user_name_length CHECK (length(user_name) >= 8)\"\n    ).execute_if(callable_=should_create),\n)\nevent.listen(\n    users,\n    \"before_drop\",\n    DDL(\"ALTER TABLE users DROP CONSTRAINT cst_user_name_length\").execute_if(\n        callable_=should_drop\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Information from a Table in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to access column information from a Table object using the .c attribute. It shows how to retrieve a specific column and how to retrieve the keys of all columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> user_table.c.name\nColumn('name', String(length=30), table=<user_account>)\n\n>>> user_table.c.keys()\n['id', 'name', 'fullname']\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Engine and Session with Event Listeners (Python)\nDESCRIPTION: This snippet demonstrates how to create an asynchronous SQLAlchemy engine and session, and then attach event listeners to the session for before_commit and after_commit events. These events allow you to execute custom logic before and after a transaction is committed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    engine = create_async_engine(\"postgresql+asyncpg://scott:tiger@localhost:5432/test\")\n\n    session = AsyncSession(engine)\n\n\n    # before_commit event on instance of Session\n    @event.listens_for(session.sync_session, \"before_commit\")\n    def my_before_commit(session):\n        print(\"before commit!\")\n\n        # sync style API use on Session\n        connection = session.connection()\n\n        # sync style API use on Connection\n        result = connection.execute(text(\"select 'execute from event'\"))\n        print(result.first())\n\n\n    # after_commit event on all Session instances\n    @event.listens_for(Session, \"after_commit\")\n    def my_after_commit(session):\n        print(\"after commit!\")\n\n\n    async def go():\n        await session.execute(text(\"select 1\"))\n        await session.commit()\n\n        await session.close()\n        await engine.dispose()\n\n\n    asyncio.run(go())\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Join Paths in SQLAlchemy ORM\nDESCRIPTION: This snippet demonstrates how to handle multiple foreign key paths between two tables using the foreign_keys parameter in a SQLAlchemy ORM relationship. It shows a Customer class with two foreign keys to an Address class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, ForeignKey, String, Column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Customer(Base):\n    __tablename__ = \"customer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    billing_address_id = mapped_column(Integer, ForeignKey(\"address.id\"))\n    shipping_address_id = mapped_column(Integer, ForeignKey(\"address.id\"))\n\n    billing_address = relationship(\"Address\", foreign_keys=[billing_address_id])\n    shipping_address = relationship(\"Address\", foreign_keys=[shipping_address_id])\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    street = mapped_column(String)\n    city = mapped_column(String)\n    state = mapped_column(String)\n    zip = mapped_column(String)\n```\n\n----------------------------------------\n\nTITLE: Conditional DDL Execution for PostgreSQL Triggers\nDESCRIPTION: Shows how to create database triggers conditionally for PostgreSQL using DDL constructs and execute_if method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"data\", String(50)),\n)\n\nfunc = DDL(\n    \"CREATE FUNCTION my_func() \"\n    \"RETURNS TRIGGER AS $$ \"\n    \"BEGIN \"\n    \"NEW.data := 'ins'; \"\n    \"RETURN NEW; \"\n    \"END; $$ LANGUAGE PLPGSQL\"\n)\n\ntrigger = DDL(\n    \"CREATE TRIGGER dt_ins BEFORE INSERT ON mytable \"\n    \"FOR EACH ROW EXECUTE PROCEDURE my_func();\"\n)\n\nevent.listen(mytable, \"after_create\", func.execute_if(dialect=\"postgresql\"))\n\nevent.listen(mytable, \"after_create\", trigger.execute_if(dialect=\"postgresql\"))\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Backref with Custom Arguments\nDESCRIPTION: Shows how to use the backref() function to specify custom arguments for the generated relationship, such as lazy loading options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import backref\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        backref=backref(\"user\", lazy=\"joined\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Event Registration with listens_for Decorator in Python\nDESCRIPTION: Shows how to use the @listens_for decorator to register an event listener. Provides an alternative syntax to the listen() function for the same Pool connect event.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n\n@listens_for(Pool, \"connect\")\ndef my_on_connect(dbapi_con, connection_record):\n    print(\"New DBAPI connection:\", dbapi_con)\n```\n\n----------------------------------------\n\nTITLE: Defining Subclasses in Joined Table Inheritance\nDESCRIPTION: Implementation of Engineer and Manager subclasses in a joined table inheritance hierarchy. Each subclass defines its own table with a foreign key reference to the parent table and specifies a unique polymorphic_identity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Records to Many-to-Many Collections in SQLAlchemy ORM\nDESCRIPTION: This snippet explains how to bulk insert records into a many-to-many collection in SQLAlchemy using a temporary joining table. It shows how to use the session to handle the insertion and associations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> new_transactions = session.scalars(\n...     existing_account.account_transactions.insert().returning(AccountTransaction),\n...     [\n...         {\"description\": \"odd trans 1\", \"amount\": Decimal(\"50000.00\")},\n...         {\"description\": \"odd trans 2\", \"amount\": Decimal(\"25000.00\")},\n...         {\"description\": \"odd trans 3\", \"amount\": Decimal(\"45.00\")},\n...     ],\n... ).all()\n{execsql}BEGIN (implicit)\nINSERT INTO account_transaction (account_id, description, amount, timestamp) VALUES\n(?, ?, ?, CURRENT_TIMESTAMP), (?, ?, ?, CURRENT_TIMESTAMP), (?, ?, ?, CURRENT_TIMESTAMP)\nRETURNING id, account_id, description, amount, timestamp\n[...] (1, 'odd trans 1', 50000.0, 1, 'odd trans 2', 25000.0, 1, 'odd trans 3', 45.0)\n{stop}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> bank_audit = BankAudit()\n>>> session.add(bank_audit)\n>>> bank_audit.account_transactions.add_all(new_transactions)\n>>> session.commit()\n{execsql}INSERT INTO audit DEFAULT VALUES\n[...] ()\nINSERT INTO audit_transaction (audit_id, transaction_id) VALUES (?, ?)\n[...] [(1, 10), (1, 11), (1, 12)]\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Parameterized UPDATE with Multiple Values\nDESCRIPTION: Shows how to create an UPDATE statement that can be executed multiple times with different parameter sets using bindparam.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import bindparam\nstmt = (\n    update(user_table)\n    .where(user_table.c.name == bindparam(\"oldname\"))\n    .values(name=bindparam(\"newname\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Using aliasing with with_polymorphic in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use aliasing with `with_polymorphic` in SQLAlchemy to query multiple polymorphic entities in a single statement. The `aliased=True` and `flat=True` parameters are used to create unique aliases for each polymorphic selectable, allowing them to be joined and queried independently. This is useful when you need to query the same class hierarchy in different contexts within the same query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True, flat=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True, flat=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> for manager, engineer in session.execute(stmt):\n...     print(f\"{manager} {engineer}\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    employee_1.id, employee_1.name, employee_1.type, employee_1.company_id,\n    manager_1.id AS id_1, manager_1.manager_name,\n    employee_2.id AS id_2, employee_2.name AS name_1, employee_2.type AS type_1,\n    employee_2.company_id AS company_id_1, engineer_1.id AS id_3, engineer_1.engineer_info\n    FROM employee AS employee_1\n    LEFT OUTER JOIN manager AS manager_1 ON employee_1.id = manager_1.id\n    JOIN\n       (employee AS employee_2 LEFT OUTER JOIN engineer AS engineer_1 ON employee_2.id = engineer_1.id)\n    ON employee_2.company_id = employee_1.company_id\n    WHERE employee_1.name = ? OR manager_1.manager_name = ?\n    ORDER BY employee_2.name, employee_1.name\n    [...] ('Mr. Krabs', 'Eugene H. Krabs')\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Typing with Tuples in SQLAlchemy 2.0\nDESCRIPTION: Examples showing how SQLAlchemy 2.0 packs SQL expressions into Tuple types for select statements and row-returning DML operations, preserving the Python type information for each element.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# (variable) stmt: Select[Tuple[str, int]]\nstmt = select(str_col, int_col)\n\n# (variable) stmt: ReturningInsert[Tuple[str, int]]\nins_stmt = insert(table(\"t\")).returning(str_col, int_col)\n```\n\n----------------------------------------\n\nTITLE: Mapping Pre-existing Dataclasses Using Fully Declarative Style - Python\nDESCRIPTION: This snippet illustrates the fully declarative mapping style for existing dataclasses. The attributes are associated with SQLAlchemy column constructs directly via class attributes, using Pydantic compatibility for dataclass fields. This style simplifies specifying attributes and relationships conveniently.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\\n\\nfrom dataclasses import dataclass, field\\nfrom typing import List\\n\\nfrom sqlalchemy import Column, ForeignKey, Integer, String\\nfrom sqlalchemy.orm import registry, relationship\\n\\nmapper_registry = registry()\\n\\n\\n@mapper_registry.mapped\\n@dataclass\\nclass User:\\n    __tablename__ = \"user\"\\n\\n    __sa_dataclass_metadata_key__ = \"sa\"\\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\\n    name: str = field(default=None, metadata={\"sa\": Column(String(50))})\\n    fullname: str = field(default=None, metadata={\"sa\": Column(String(50))})\\n    nickname: str = field(default=None, metadata={\"sa\": Column(String(12))})\\n    addresses: List[Address] = field(\\n        default_factory=list, metadata={\"sa\": relationship(\"Address\")}\\n    )\\n\\n\\n@mapper_registry.mapped\\n@dataclass\\nclass Address:\\n    __tablename__ = \"address\"\\n    __sa_dataclass_metadata_key__ = \"sa\"\n```\n\n----------------------------------------\n\nTITLE: Using FILTER Keyword with Aggregate Functions in PostgreSQL\nDESCRIPTION: Added support for the FILTER keyword as applied to aggregate functions, supported by PostgreSQL 9.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\naggregate_function(expression) FILTER (WHERE condition)\n```\n\n----------------------------------------\n\nTITLE: Enabling Active History for Column in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to enable active history tracking for a specific column using mapped_column in a declarative class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    important_identifier: Mapped[str] = mapped_column(active_history=True)\n```\n\n----------------------------------------\n\nTITLE: Global WHERE/ON Criteria Implementation\nDESCRIPTION: Shows how to add global WHERE criteria to all queries for specific entities using with_loader_criteria and do_orm_execute event.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import with_loader_criteria\n\nSession = sessionmaker(engine)\n\n@event.listens_for(Session, \"do_orm_execute\")\ndef _do_orm_execute(orm_execute_state):\n    if (\n        orm_execute_state.is_select\n        and not orm_execute_state.is_column_load\n        and not orm_execute_state.is_relationship_load\n    ):\n        orm_execute_state.statement = orm_execute_state.statement.options(\n            with_loader_criteria(MyEntity.public == True)\n        )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class-specific Wildcards in SQLAlchemy\nDESCRIPTION: Shows how to use wildcards with the Load class to set loading options for all relationships or columns on a given entity without affecting others. This provides a powerful way to control loading behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# lazyload all User relationships\nquery(User).options(Load(User).lazyload(\"*\"))\n\n# undefer all User columns\nquery(User).options(Load(User).undefer(\"*\"))\n\n# lazyload all Address relationships\nquery(User).options(defaultload(User.addresses).lazyload(\"*\"))\n\n# undefer all Address columns\nquery(User).options(defaultload(User.addresses).undefer(\"*\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Returning Column Descriptions in SQLAlchemy Update\nDESCRIPTION: Demonstrates how to access column descriptions for RETURNING clauses in SQLAlchemy updates. The returning_column_descriptions attribute provides metadata about columns including entity type, name, and SQL type information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> pprint(stmt.returning_column_descriptions)\n[{'aliased': False,\n  'entity': <class 'User'>,\n  'expr': <sqlalchemy.orm.attributes.InstrumentedAttribute ...>,\n  'name': 'id',\n  'type': Integer()}]\n```\n\n----------------------------------------\n\nTITLE: Chained Joins Replacement with Select in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet demonstrates how to replace chained joins using a select statement in SQLAlchemy 1.4/2.0. It uses individual calls to the join method on the select object to achieve the same result as chained joins, ensuring cross-compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = select(User).join(User.orders).join(Order.items).join(Item.keywords)\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Timezone-Aware DateTime TypeDecorator in SQLAlchemy\nDESCRIPTION: A TypeDecorator that converts timezone-aware timestamps to UTC timezone-naive format for storage and back to timezone-aware on retrieval.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nclass TZDateTime(TypeDecorator):\n    impl = DateTime\n    cache_ok = True\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            if not value.tzinfo or value.tzinfo.utcoffset(value) is None:\n                raise TypeError(\"tzinfo is required\")\n            value = value.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        return value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            value = value.replace(tzinfo=datetime.timezone.utc)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Using declared_attr.cascading for Inheriting Columns in SQLAlchemy ORM Python\nDESCRIPTION: Illustrates the use of declared_attr.cascading to create an id column that is appropriately defined for each class in an inheritance hierarchy, either as a primary key or a foreign key depending on the class's position in the hierarchy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass HasIdMixin:\n    @declared_attr.cascading\n    def id(cls) -> Mapped[int]:\n        if has_inherited_table(cls):\n            return mapped_column(ForeignKey(\"person.id\"), primary_key=True)\n        else:\n            return mapped_column(Integer, primary_key=True)\n\n\nclass Person(HasIdMixin, Base):\n    __tablename__ = \"person\"\n\n    discriminator: Mapped[str]\n    __mapper_args__ = {\"polymorphic_on\": \"discriminator\"}\n\n\nclass Engineer(Person):\n    __tablename__ = \"engineer\"\n\n    primary_language: Mapped[str]\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Async Session with Scalars\nDESCRIPTION: Example of using async session scalars to query user addresses with and without filters\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\naddresses = (await session.scalars(user.addresses.statement)).all()\nstmt = user.addresses.statement.where(Address.email_address.startswith(\"patrick\"))\naddresses_filter = (await session.scalars(stmt)).all()\n```\n\n----------------------------------------\n\nTITLE: Alternative Vertex Mapping with Direct Column Definitions\nDESCRIPTION: Shows an alternative approach to mapping composite columns by explicitly defining the individual columns before creating the composite attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import mapped_column, composite\n\n\nclass Vertex(Base):\n    __tablename__ = \"vertices\"\n\n    id = mapped_column(Integer, primary_key=True)\n    x1 = mapped_column(Integer)\n    y1 = mapped_column(Integer)\n    x2 = mapped_column(Integer)\n    y2 = mapped_column(Integer)\n\n    start = composite(Point, x1, y1)\n    end = composite(Point, x2, y2)\n```\n\n----------------------------------------\n\nTITLE: Executing Bulk UPDATE with Custom Parameters in SQLAlchemy ORM\nDESCRIPTION: Example of using session.execute() to perform a bulk UPDATE operation with custom parameters for multiple rows. The update() function is used to construct the UPDATE statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(\n    update(Manager),\n    [\n        {\n            \"id\": 1,\n            \"name\": \"scheeks\",\n            \"manager_name\": \"Sandy Cheeks, President\",\n        },\n        {\n            \"id\": 2,\n            \"name\": \"eugene\",\n            \"manager_name\": \"Eugene H. Krabs, VP Marketing\",\n        },\n    ],\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employee SET name=? WHERE employee.id = ?\n[...] [('scheeks', 1), ('eugene', 2)]\nUPDATE manager SET manager_name=? WHERE manager.id = ?\n[...] [('Sandy Cheeks, President', 1), ('Eugene H. Krabs, VP Marketing', 2)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Entity Wildcard Loading Strategies\nDESCRIPTION: Sets loading strategies on a per-entity basis using the Load object. This example applies lazy loading to all relationships on the Address entity while leaving User entity relationships unaffected.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Load\n\nstmt = select(User, Address).options(Load(Address).lazyload(\"*\"))\n```\n\n----------------------------------------\n\nTITLE: Custom GUID Version Counter Implementation\nDESCRIPTION: Shows how to implement a custom version counter using UUIDs instead of integers, utilizing the version_id_generator parameter to generate new version identifiers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\n        \"version_id_col\": version_uuid,\n        \"version_id_generator\": lambda version: uuid.uuid4().hex,\n    }\n```\n\n----------------------------------------\n\nTITLE: Joining Directly to Subclasses in SQLAlchemy ORM\nDESCRIPTION: Example showing how to join directly to a subclass entity (Engineer) through a relationship, which produces more efficient inner joins instead of LEFT OUTER JOINs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = (\n...     select(Company.name, Engineer.name)\n...     .join(Company.employees.of_type(Engineer))\n...     .where(\n...         or_(\n...             Engineer.name == \"SpongeBob\",\n...             Engineer.engineer_info == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\n{execsql}SELECT company.name, employee.name AS name_1\nFROM company JOIN (employee JOIN engineer ON employee.id = engineer.id) ON company.id = employee.company_id\nWHERE employee.name = ? OR engineer.engineer_info = ?\n[...] ('SpongeBob', 'Senior Customer Engagement Engineer')\n{stop}Krusty Krab SpongeBob\nKrusty Krab Squidward\n```\n\n----------------------------------------\n\nTITLE: Complex Composite Secondary Join in SQLAlchemy\nDESCRIPTION: Demonstrates an advanced case of joining multiple tables in a relationship using composite secondary joins. Shows how to handle complex join conditions involving multiple intermediate tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = mapped_column(Integer, primary_key=True)\n    b_id = mapped_column(ForeignKey(\"b.id\"))\n\n    d = relationship(\n        \"D\",\n        secondary=\"join(B, D, B.d_id == D.id).join(C, C.d_id == D.id)\",\n        primaryjoin=\"and_(A.b_id == B.id, A.id == C.a_id)\",\n        secondaryjoin=\"D.id == B.d_id\",\n        uselist=False,\n        viewonly=True,\n    )\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = mapped_column(Integer, primary_key=True)\n    d_id = mapped_column(ForeignKey(\"d.id\"))\n\n\nclass C(Base):\n    __tablename__ = \"c\"\n\n    id = mapped_column(Integer, primary_key=True)\n    a_id = mapped_column(ForeignKey(\"a.id\"))\n    d_id = mapped_column(ForeignKey(\"d.id\"))\n\n\nclass D(Base):\n    __tablename__ = \"d\"\n\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Using Sessionmaker with Begin Context Manager\nDESCRIPTION: Shows how to use the sessionmaker.begin() context manager in SQLAlchemy 2.0, which combines session creation with transaction management in a single pattern. This simplifies common session usage by handling both beginning and committing a transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import sessionmaker\n\nSession = sessionmaker(engine)\n\nwith Session.begin() as session:\n    session.add(MyObject())\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Expression Stringification in Python using SQLAlchemy\nDESCRIPTION: Demonstrates how to convert a simple SQLAlchemy select statement to a string using the str() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import table, column, select\n>>> t = table(\"my_table\", column(\"x\"))\n>>> statement = select(t)\n>>> print(str(statement))\nSELECT my_table.x\nFROM my_table\n```\n\n----------------------------------------\n\nTITLE: Bulk User Update with SQLAlchemy ORM\nDESCRIPTION: This snippet provides an example of performing bulk updates using SQLAlchemy’s ORM with the `executemany` feature for enhanced performance. While the feature does not support the `RETURNING` clause directly, it showcases how to use update statements with primary key values to make bulk updates efficiently.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy import update\n>>> session.execute(\n...     update(User),\n...     [\n...         {\"id\": 1, \"fullname\": \"Spongebob Squarepants\"},\n...         {\"id\": 3, \"fullname\": \"Patrick Star\"},\n...     ],\n... )\n```\n\n----------------------------------------\n\nTITLE: Querying Base Class in Inheritance Hierarchy with SQLAlchemy Python\nDESCRIPTION: Illustrates querying against the base 'Employee' class in a joined inheritance hierarchy, retrieving objects of all subclasses with base attributes loaded. Uses lazy loading for subclass-specific data. Prerequisites include SQLAlchemy setup and a session object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> objects = session.scalars(stmt).all()\n{execsql}BEGIN (implicit)\nSELECT employee.id, employee.name, employee.type, employee.company_id\nFROM employee ORDER BY employee.id\n[...] ()\n{stop}>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Class for Joined Table Inheritance in SQLAlchemy\nDESCRIPTION: Example of configuring a base Employee class in a joined table inheritance hierarchy using the polymorphic_identity and polymorphic_on parameters to enable polymorphic loading with a type discriminator column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name!r})\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session for an Object in SQLAlchemy ORM\nDESCRIPTION: This code shows two methods to retrieve the Session associated with a mapped object: using the object_session classmethod and using the inspection system. This is useful when you need to access the Session but don't have a direct reference to it.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsession = Session.object_session(someobject)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect\n\nsession = inspect(someobject).session\n```\n\n----------------------------------------\n\nTITLE: Handling NULL Values in Bulk INSERTs - Python\nDESCRIPTION: This snippet explains the default behavior of handling NULL values when performing bulk inserts. It also shows how to disable the handling of NULL values and send all parameter dictionaries in a single batch.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> session.execute(\n...     insert(User),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\n{execsql}INSERT INTO user_account (name, fullname, species) VALUES (?, ?, ?)\n[...] [('name_a', 'Employee A', 'Squid'), ('name_b', 'Employee B', 'Squirrel')]\nINSERT INTO user_account (name, fullname) VALUES (?, ?)\n[...] ('name_c', 'Employee C')\nINSERT INTO user_account (name, fullname, species) VALUES (?, ?, ?)\n[...] ('name_d', 'Employee D', 'Bluefish')\n...\n>>> session.execute(\n...     insert(User).execution_options(render_nulls=True),\n...     [\n...         {\n...             \"name\": \"name_a\",\n...             \"fullname\": \"Employee A\",\n...             \"species\": \"Squid\",\n...         },\n...         {\n...             \"name\": \"name_b\",\n...             \"fullname\": \"Employee B\",\n...             \"species\": \"Squirrel\",\n...         },\n...         {\n...             \"name\": \"name_c\",\n...             \"fullname\": \"Employee C\",\n...             \"species\": None,\n...         },\n...         {\n...             \"name\": \"name_d\",\n...             \"fullname\": \"Employee D\",\n...             \"species\": \"Bluefish\",\n...         },\n...     ],\n... )\n{execsql}INSERT INTO user_account (name, fullname, species) VALUES (?, ?, ?)\n[...] [('name_a', 'Employee A', 'Squid'), ('name_b', 'Employee B', 'Squirrel'), ('name_c', 'Employee C', None), ('name_d', 'Employee D', 'Bluefish')]\n```\n\n----------------------------------------\n\nTITLE: Basic SQLAlchemy Relationship with String-Based Type Hinting\nDESCRIPTION: Demonstrates defining a relationship with type hinting using string references and specifying order and join conditions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nchildren: Mapped[List[\"myapp.mymodel.Child\"]] = relationship(\n    order_by=\"desc(myapp.mymodel.Child.email_address)\",\n    primaryjoin=\"myapp.mymodel.Parent.id == myapp.mymodel.Child.parent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Standalone Sequence in SQLAlchemy\nDESCRIPTION: Example showing how to execute a sequence directly using an engine connection to get the next value.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith my_engine.connect() as conn:\n    seq = Sequence(\"some_sequence\", start=1)\n    nextid = conn.execute(seq)\n```\n\n----------------------------------------\n\nTITLE: Join From Usage in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet showcases the usage of join_from in SQLAlchemy 1.4/2.0 to explicitly define the left side of a join. It allows specifying the starting point for the join operation, providing more control over the join process.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = select(User).join_from(User, Order).join_from(Order, Item, Order.items)\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Base Classes with __abstract__ Flag in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use the __abstract__ flag to create a non-mapped base class that can provide methods and attributes to subclasses. The abstract class's table won't be created in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass SomeAbstractBase(Base):\n    __abstract__ = True\n\n    def some_helpful_method(self):\n        \"\"\" \"\"\"\n\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\"helpful mapper arguments\": True}\n\n\nclass MyMappedClass(SomeAbstractBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Attrs Integration with SQLAlchemy ORM\nDESCRIPTION: Demonstrates integration of attrs library with SQLAlchemy ORM using imperative mapping\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@define(slots=False)\nclass User:\n    id: int\n    name: str\n    fullname: str\n    nickname: str\n    addresses: List[Address]\n\n\n@define(slots=False)\nclass Address:\n    id: int\n    user_id: int\n    email_address: Optional[str]\n\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```\n\n----------------------------------------\n\nTITLE: Constructing a UNION Query with with_expression - Python SQLAlchemy\nDESCRIPTION: This code snippet illustrates how to combine two SELECT statements using UNION and apply with_expression to dynamically load additional SQL expressions for the ORM entity in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import union_all\ns1 = (\n    select(User, func.count(Book.id).label(\"book_count\"))\n    .join_from(User, Book)\n    .where(User.name == \"spongebob\")\n)\ns2 = (\n    select(User, func.count(Book.id).label(\"book_count\"))\n    .join_from(User, Book)\n    .where(User.name == \"sandy\")\n)\nunion_stmt = union_all(s1, s2)\norm_stmt = (\n    select(User)\n    .from_statement(union_stmt)\n    .options(with_expression(User.book_count, union_stmt.selected_columns.book_count))\n)\nfor user in session.scalars(orm_stmt):\n    print(f\"Username: {user.name}  Number of books: {user.book_count}\")\n```\n\n----------------------------------------\n\nTITLE: Dumping Entire Metadata Creation Sequence as String in SQLAlchemy\nDESCRIPTION: This code demonstrates how to use a mock engine to dump the entire metadata creation sequence as a string, useful for debugging or schema generation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_mock_engine\n\n\ndef dump(sql, *multiparams, **params):\n    print(sql.compile(dialect=engine.dialect))\n\n\nengine = create_mock_engine(\"postgresql+psycopg2://\", dump)\nmetadata_obj.create_all(engine, checkfirst=False)\n```\n\n----------------------------------------\n\nTITLE: Attribute Deletion in SQLAlchemy ORM\nDESCRIPTION: Shows how to use Python's del operator with mapped attributes in SQLAlchemy ORM. The deletion operation is equivalent to setting the attribute to None.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsome_object = session.query(SomeObject).get(5)\n\ndel some_object.some_attribute  # from a SQL perspective, works like \"= None\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Driven Expiration for SQLAlchemy Collections\nDESCRIPTION: Demonstrates how to configure event listeners to automatically expire a derived collection when the parent collection changes. Uses SQLAlchemy's event system to detect append, remove, and bulk_replace operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event, inspect\n\n\n@event.listens_for(User.all_tasks, \"append\")\n@event.listens_for(User.all_tasks, \"remove\")\n@event.listens_for(User.all_tasks, \"bulk_replace\")\ndef _expire_User_current_week_tasks(target, value, initiator):\n    inspect(target).session.expire(target, [\"current_week_tasks\"])\n```\n\n----------------------------------------\n\nTITLE: ORM Bulk Insert with SQL Expression in SQLAlchemy\nDESCRIPTION: This example demonstrates how to combine a fixed SQL expression with a bulk insert operation using SQLAlchemy's ORM. It defines a LogRecord model with a timestamp column and inserts multiple records, applying the 'now()' SQL function to the timestamp for each row.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"import datetime\n\n\nclass LogRecord(Base):\n    __tablename__ = \\\"log_record\\\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    message: Mapped[str]\n    code: Mapped[str]\n    timestamp: Mapped[datetime.datetime]\"\n```\n\nLANGUAGE: python\nCODE:\n```\n    \"from sqlalchemy import func\n    >>> log_record_result = session.scalars(\n    ...     insert(LogRecord).values(code=\\\"SQLA\\\", timestamp=func.now()).returning(LogRecord),\n    ...     [\n    ...         {\\\"message\\\": \\\"log message #1\\\"},\n    ...         {\\\"message\\\": \\\"log message #2\\\"},\n    ...         {\\\"message\\\": \\\"log message #3\\\"},\n    ...         {\\\"message\\\": \\\"log message #4\\\"},\n    ...     ],\n    ... )\"\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"{execsql}INSERT INTO log_record (message, code, timestamp)\n    VALUES (?, ?, CURRENT_TIMESTAMP), (?, ?, CURRENT_TIMESTAMP),\n    (?, ?, CURRENT_TIMESTAMP), (?, ?, CURRENT_TIMESTAMP)\n    RETURNING id, message, code, timestamp\n    [... (insertmanyvalues) 1/1 (unordered)] ('log message #1', 'SQLA', 'log message #2',\n    'SQLA', 'log message #3', 'SQLA', 'log message #4', 'SQLA')\"\n```\n\nLANGUAGE: python\nCODE:\n```\n    \"{stop}>>> print(log_record_result.all())\n    [LogRecord('log message #1', 'SQLA', datetime.datetime(...)),\n     LogRecord('log message #2', 'SQLA', datetime.datetime(...)),\n     LogRecord('log message #3', 'SQLA', datetime.datetime(...)),\n     LogRecord('log message #4', 'SQLA', datetime.datetime(...))]\"\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy Delete Constructor\nDESCRIPTION: Demonstrates the usage of the Delete constructor. The Delete class provides methods for constructing DELETE statements, including specifying conditions with where() and adding returning clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/dml.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndelete_stmt = delete(table).where(table.c.id == 5).returning(table.c.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Reset Behavior\nDESCRIPTION: Examples of configuring connection pool reset behavior for different database engines using SQLAlchemy's create_engine function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import QueuePool\n\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@localhost/myisam_database\",\n    pool=QueuePool(reset_on_return=False),\n)\n\nengine = create_engine(\n    \"mssql+pyodbc://scott:tiger@mydsn\", pool=QueuePool(reset_on_return=\"commit\")\n)\n```\n\n----------------------------------------\n\nTITLE: Method Chaining with SQLAlchemy Select\nDESCRIPTION: Demonstrates the generative method chaining pattern using SQLAlchemy's Select object to build a query with multiple WHERE clauses and ORDER BY.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(user.c.name)\n    .where(user.c.id > 5)\n    .where(user.c.name.like(\"e%\"))\n    .order_by(user.c.name)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Insert.from_select Method for SQL INSERT ... SELECT Statements\nDESCRIPTION: Example of using the from_select method on the insert construct to create INSERT INTO ... SELECT statements. This feature allows populating a table with data from a SELECT statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nInsert.from_select(columns, select)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema Objects with Async Connection in Python\nDESCRIPTION: The code snippet shows how to inspect schema objects using the SQLAlchemy Inspector within an asynchronous context. It utilizes the AsyncConnection.run_sync method to allow synchronous inspection methods to be executed in an async function while connected to a PostgreSQL database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom sqlalchemy import inspect\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\nengine = create_async_engine(\"postgresql+asyncpg://scott:tiger@localhost/test\")\n\n\ndef use_inspector(conn):\n    inspector = inspect(conn)\n    # use the inspector\n    print(inspector.get_view_names())\n    # return any value to the caller\n    return inspector.get_table_names()\n\n\nasync def async_main():\n    async with engine.connect() as conn:\n        tables = await conn.run_sync(use_inspector)\n\n\nasyncio.run(async_main())\n```\n\n----------------------------------------\n\nTITLE: Joining to Aliased Subqueries in SQLAlchemy ORM\nDESCRIPTION: Shows how to join to a subquery and include it in the result set by using the aliased construct. This approach allows both entities to be returned in the result, making the subquery entities accessible by name.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\naddress_subq = aliased(Address, subq, name=\"address\")\nstmt = select(User, address_subq).join(address_subq)\nfor row in session.execute(stmt):\n    print(f\"{row.User} {row.address}\")\n```\n\n----------------------------------------\n\nTITLE: Joining Tables Using Foreign Keys in SQLAlchemy\nDESCRIPTION: Shows how SQLAlchemy can automatically join tables based on foreign key constraints without explicitly using relationship objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> print(select(Address.email_address).join_from(User, Address))\n{printsql}SELECT address.email_address\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Relationship Instance Comparison Operators in SQLAlchemy\nDESCRIPTION: Shows various comparison operators for relationship instances including equals, not equals, contains, and with_parent() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nuser_obj = session.get(User, 1)\nprint(select(Address).where(Address.user == user_obj))\n\nprint(select(Address).where(Address.user != user_obj))\n\naddress_obj = session.get(Address, 1)\nprint(select(User).where(User.addresses.contains(address_obj)))\n\nfrom sqlalchemy.orm import with_parent\nprint(select(Address).where(with_parent(user_obj, User.addresses)))\n```\n\n----------------------------------------\n\nTITLE: Many-to-One Relationship in SQLAlchemy ORM\nDESCRIPTION: Defines a many-to-one relationship between Parent and Child classes using Declarative mapping with annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    child_id: Mapped[int] = mapped_column(ForeignKey(\"child_table.id\"))\n    child: Mapped[\"Child\"] = relationship()\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Event-Driven Expiration with Backref Mutations in SQLAlchemy\nDESCRIPTION: Demonstrates how event listeners also capture changes made through backreferences. When a Task's user attribute is set, the User's current_week_tasks collection is automatically expired and recalculated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> with Session(e) as sess:\n...     u1 = sess.scalar(select(User).where(User.id == 1))\n...     t1 = Task(task_date=datetime.datetime.now())\n...     t1.user = u1\n...     sess.add(t1)\n...     print(u1.current_week_tasks)\n[<__main__.Task object at 0x7f3b0c070d10>, <__main__.Task object at 0x7f3b0c057d10>]\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Engine with Connection Pool in Python\nDESCRIPTION: This snippet demonstrates how to create a SQLAlchemy Engine with a configured connection pool. It sets the pool size to 10 and max overflow to 20, allowing for a maximum of 30 concurrent connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"mysql+mysqldb://u:p@host/db\", pool_size=10, max_overflow=20)\n```\n\n----------------------------------------\n\nTITLE: Appending UserKeywordAssociation in Python\nDESCRIPTION: Demonstrates how to append Keyword objects to a User's association proxy, generating UserKeywordAssociation instances in a SQLAlchemy ORM context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser = User(\"log\")\nfor kw in (Keyword(\"new_from_blammo\"), Keyword(\"its_big\")):\n    user.keywords.append(kw)\nprint(user.keywords)\n[user.user_keyword_associations.append(\n    UserKeywordAssociation(keyword=Keyword(\"its_heavy\"))\n)]\nUserKeywordAssociation(\n    keyword=Keyword(\"its_wood\"), user=user, special_key=\"my special key\"\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with RETURNING Clause in SQLAlchemy\nDESCRIPTION: Demonstrates how to use the RETURNING clause with an INSERT statement in SQLAlchemy. This allows retrieving specific columns from the inserted row(s) without executing a separate SELECT query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> insert_stmt = insert(address_table).returning(\n...     address_table.c.id, address_table.c.email_address\n... )\n>>> print(insert_stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO address (id, user_id, email_address)\nVALUES (:id, :user_id, :email_address)\nRETURNING address.id, address.email_address\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Default Values with RETURNING Support in SQLAlchemy ORM\nDESCRIPTION: Example of configuring a model with server-generated default values when RETURNING is supported. This configuration marks timestamp and special_identifier columns with server_default and FetchedValue respectively, enabling automatic retrieval of these values during INSERT operations using RETURNING clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    # server-side SQL date function generates a new timestamp\n    timestamp = mapped_column(DateTime(), server_default=func.now())\n\n    # some other server-side function not named here, such as a trigger,\n    # populates a value into this column during INSERT\n    special_identifier = mapped_column(String(50), server_default=FetchedValue())\n\n    # set eager defaults to True.  This is usually optional, as if the\n    # backend supports RETURNING + insertmanyvalues, eager defaults\n    # will take place regardless on INSERT\n    __mapper_args__ = {\"eager_defaults\": True}\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Foreign Key Dependencies in SQLAlchemy\nDESCRIPTION: Demonstrates how to handle circular foreign key dependencies using the use_alter parameter in ForeignKeyConstraint.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nelement = Table(\n    \"element\",\n    metadata_obj,\n    Column(\"element_id\", Integer, primary_key=True),\n    Column(\"parent_node_id\", Integer),\n    ForeignKeyConstraint(\n        [\"parent_node_id\"],\n        [\"node.node_id\"],\n        use_alter=True,\n        name=\"fk_element_parent_node_id\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing Validation from Backrefs in SQLAlchemy\nDESCRIPTION: This example shows how to prevent validation functions from emitting when the event occurs as a result of a backref, using `include_backrefs=False` in the `validates` decorator. This is useful when mutually dependent validators are linked via a backref to avoid infinite loops or unexpected behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import validates\n\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\", backref=\"user\")\n\n    @validates(\"addresses\", include_backrefs=False)\n    def validate_address(self, key, address):\n        if \"@\" not in address:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```\n\n----------------------------------------\n\nTITLE: Refreshing Expired Objects in SQLAlchemy ORM (Python)\nDESCRIPTION: Demonstrates how an expired object is automatically refreshed when accessed, triggering a new database query. This snippet shows the behavior of the ORM when dealing with expired objects and how it fetches fresh data from the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> sandy.fullname\n{execsql}BEGIN (implicit)\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\nuser_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (2,){stop}\n'Sandy Cheeks'\n```\n\n----------------------------------------\n\nTITLE: Querying with Association Proxy and None Comparison\nDESCRIPTION: Example of a query that filters using an association proxy compared to None.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ns.query(A).filter(A.b_value == None).all()\n```\n\n----------------------------------------\n\nTITLE: UUID Type Mapping Configuration in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to configure type annotation mapping for UUID types in SQLAlchemy ORM declarative base class and usage in model definitions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        uuid.UUID: GUID,\n    }\n\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[uuid.UUID] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Using load_only on Related Objects in SQLAlchemy ORM\nDESCRIPTION: This example uses load_only with a relationship loader to restrict loaded columns in related entities. Dependencies include relationship configurations and SQLAlchemy ORM. It selectively optimizes queries for related objects by limiting loaded columns to improve performance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.orm import selectinload\nstmt = select(User).options(selectinload(User.books).load_only(Book.title))\nfor user in session.scalars(stmt):\n    print(f\"{user.fullname}   {[b.title for b in user.books]}\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.orm import defaultload\nstmt = select(User).options(defaultload(User.books).load_only(Book.title))\nfor user in session.scalars(stmt):\n    print(f\"{user.fullname}   {[b.title for b in user.books]}\")\n```\n\n----------------------------------------\n\nTITLE: Populate Existing Objects with SQLAlchemy ORM Session\nDESCRIPTION: Utilizes the 'populate_existing' execution option in SQLAlchemy ORM to forcefully reload object attributes with data from the database, ensuring the object reflects current database state unconditionally.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nu2 = session.scalars(\n    select(User).where(User.id == 5).execution_options(populate_existing=True)\n).one()\n```\n\n----------------------------------------\n\nTITLE: Chained Joins Replacement in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to replace chained joins in SQLAlchemy with individual calls to the join method. It replaces a single chained join call with multiple individual calls, ensuring compatibility between SQLAlchemy 1.x and 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n\"q = session.query(User).join(User.orders).join(Order.items).join(Item.keywords)\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShardedSession Class in SQLAlchemy\nDESCRIPTION: This snippet defines the ShardedSession class, which is responsible for managing sessions across multiple shards of a database in SQLAlchemy. It allows for seamless interaction with data distributed over separate database instances.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/horizontal_shard.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ShardedSession\n   :members:\n\n```\n\n----------------------------------------\n\nTITLE: Building and Caching a Query with BakedQuery - Python\nDESCRIPTION: This snippet shows how to build a query using BakedQuery and cache its construction steps. The function uses the bakery object to define the query structure as lambdas. Parameters like username and email are bound using bindparam. The BakedQuery ensures that query construction steps are cached and reused, reducing overhead for repeated executions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import bindparam\n\n\ndef search_for_user(session, username, email=None):\n    baked_query = bakery(lambda session: session.query(User))\n    baked_query += lambda q: q.filter(User.name == bindparam(\"username\"))\n\n    baked_query += lambda q: q.order_by(User.id)\n\n    if email:\n        baked_query += lambda q: q.filter(User.email == bindparam(\"email\"))\n\n    result = baked_query(session).params(username=username, email=email).all()\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Instrumented Dictionary Collection\nDESCRIPTION: Shows implementation of a custom KeyFuncDict subclass with properly instrumented setitem and delitem methods.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyKeyFuncDict(KeyFuncDict):\n    \"\"\"Use @internally_instrumented when your methods\n    call down to already-instrumented methods.\n    \"\"\"\n\n    @collection.internally_instrumented\n    def __setitem__(self, key, value, _sa_initiator=None):\n        # do something with key, value\n        super(MyKeyFuncDict, self).__setitem__(key, value, _sa_initiator)\n\n    @collection.internally_instrumented\n    def __delitem__(self, key, _sa_initiator=None):\n        # do something with key\n```\n\n----------------------------------------\n\nTITLE: SQL output of simple relationship join\nDESCRIPTION: This SQL statement is the result of a simple join between two entities, `user_account` and `address`, using the `User.addresses` relationship. The `join` method infers the ON clause from the relationship, creating an SQL JOIN based on the foreign key relationship between the tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Polymorphic Loading with polymorphic_load Parameter\nDESCRIPTION: This code snippet demonstrates how to configure single inheritance mappings with the polymorphic_load='inline' parameter for subclasses, which automatically includes their specific attributes in base class queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> class Base(DeclarativeBase):\n...     pass\n>>> class Employee(Base):\n...     __tablename__ = \"employee\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     type: Mapped[str]\n...\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}({self.name!r})\"\n...\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"employee\",\n...         \"polymorphic_on\": \"type\",\n...     }\n>>> class Manager(Employee):\n...     manager_name: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"manager\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n>>> class Engineer(Employee):\n...     engineer_info: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"engineer\",\n...         \"polymorphic_load\": \"inline\",\n...     }\n```\n\n----------------------------------------\n\nTITLE: Mapping Dataclass with Pydantic Compatibility in SQLAlchemy ORM - Python\nDESCRIPTION: This snippet shows how to define a SQLAlchemy ORM model as a dataclass while using Pydantic for compatibility. The `Base` class inherits from `MappedAsDataclass` and uses Pydantic's dataclass decorator. The `User` class is mapped with corresponding attributes to create a user table in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\\nfrom sqlalchemy.orm import Mapped\\nfrom sqlalchemy.orm import mapped_column\\nfrom sqlalchemy.orm import MappedAsDataclass\\nfrom sqlalchemy.orm import registry\\n\\n\\nclass Base(\\n    MappedAsDataclass,\\n    DeclarativeBase,\\n    dataclass_callable=pydantic.dataclasses.dataclass,\\n):\\n    pass\\n\\n\\nclass User(Base):\\n    __tablename__ = \"user\"\\n\\n    id: Mapped[int] = mapped_column(primary_key=True)\\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL ExcludeConstraint Implementation\nDESCRIPTION: Example demonstrating how to define an EXCLUDE constraint in SQLAlchemy using the ExcludeConstraint class with a room booking use case that prevents overlapping time ranges for the same room.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import ExcludeConstraint, TSRANGE\n\nclass RoomBooking(Base):\n    __tablename__ = \"room_booking\"\n\n    room = Column(Integer(), primary_key=True)\n    during = Column(TSRANGE())\n\n    __table_args__ = (ExcludeConstraint((\"room\", \"=\"), (\"during\", \"&&\")),)\n```\n\n----------------------------------------\n\nTITLE: Using FetchedValue for Triggered Columns\nDESCRIPTION: Shows how to mark columns that automatically generate values through database triggers or timestamp mechanisms using FetchedValue marker.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import FetchedValue\n\nt = Table(\n    \"test\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"abc\", TIMESTAMP, server_default=FetchedValue()),\n    Column(\"def\", String(20), server_onupdate=FetchedValue()),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Types in SQLAlchemy\nDESCRIPTION: Demonstrates how to define a table with String datatypes, including both parameterized and non-parameterized versions. This example shows the basic usage of CamelCase types in table metadata creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import Table, Column, Integer, String\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"user_name\", String, primary_key=True),\n    Column(\"email_address\", String(60)),\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Relationship Loader in Declarative Form\nDESCRIPTION: Example showing how to declare a dynamic relationship using DynamicMapped annotation class, which returns a Query object instead of loading all collection items.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DynamicMapped\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    posts: DynamicMapped[Post] = relationship()\n```\n\n----------------------------------------\n\nTITLE: Creating Engine and Populating Database with STI Data\nDESCRIPTION: This snippet creates a SQLite in-memory database engine using `create_engine`. It then creates all tables defined in the `Base` metadata. Subsequently, it creates a session, adds instances of `Manager` and `Engineer` classes to the session, and commits the transaction, populating the database with sample data for the single table inheritance example.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> engine = create_engine(\"sqlite://\", echo=True)\n>>>\n>>> Base.metadata.create_all(engine)\nBEGIN ...\n\n>>> conn = engine.connect()\n>>> from sqlalchemy.orm import Session\n>>> session = Session(conn)\n>>> session.add_all(\n...     [\n...         Manager(\n...             name=\"Mr. Krabs\",\n...             manager_name=\"Eugene H. Krabs\",\n...         ),\n...         Engineer(name=\"SpongeBob\", engineer_info=\"Krabby Patty Master\"),\n...         Engineer(\n...             name=\"Squidward\",\n...             engineer_info=\"Senior Customer Engagement Engineer\",\n...         ),\n...     ],\n... )\n>>> session.commit()\nBEGIN ...\n```\n\n----------------------------------------\n\nTITLE: Migrated SQLAlchemy 2.0-Compatible Code in Python\nDESCRIPTION: This snippet demonstrates the same functionality as the previous example, but using SQLAlchemy 2.0 compatible patterns. It uses connection.execute() instead of engine.execute(), explicit transactions with engine.begin(), and the new calling style for select().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import select\nfrom sqlalchemy import table\nfrom sqlalchemy import text\n\n\nengine = create_engine(\"sqlite://\")\n\n# don't rely on autocommit for DML and DDL\nwith engine.begin() as connection:\n    # use connection.execute(), not engine.execute()\n    # use the text() construct to execute textual SQL\n    connection.execute(text(\"CREATE TABLE foo (id integer)\"))\n    connection.execute(text(\"INSERT INTO foo (id) VALUES (1)\"))\n\n\nfoo = table(\"foo\", column(\"id\"))\n\nwith engine.connect() as connection:\n    # use connection.execute(), not engine.execute()\n    # select() now accepts column / table expressions positionally\n    result = connection.execute(select(foo.c.id))\n\n    print(result.fetchall())\n```\n\n----------------------------------------\n\nTITLE: Direct Class Dataclass Mapping\nDESCRIPTION: Shows how to apply MappedAsDataclass directly to individual classes rather than the base class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(MappedAsDataclass, Base):\n    \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Implementing Engineer Class with Concrete Inheritance in SQLAlchemy ORM\nDESCRIPTION: Defines an Engineer class using SQLAlchemy ORM with concrete inheritance. The class establishes its own table with a primary key, name, specialized engineer_info field, and a relationship to Company. The __mapper_args__ configures concrete table inheritance with a polymorphic identity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n    company = relationship(\"Company\", back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Mixins with Column Copying\nDESCRIPTION: Shows how to use improved declarative mixins with @declared_attr to access mixin-established columns. The example demonstrates that @declared_attr functions are now called after mixin-based column copies are generated, allowing access to the correct Column objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HasFooBar(object):\n    foobar = Column(Integer)\n\n    @declared_attr\n    def foobar_prop(cls):\n        return column_property(\"foobar: \" + cls.foobar)\n\n\nclass SomeClass(HasFooBar, Base):\n    __tablename__ = \"some_table\"\n    id = Column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Selectin Loading with Address and User\nDESCRIPTION: Shows selectinload for loading related User objects when querying Addresses, demonstrating simple many-to-one relationship loading\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Address).options(selectinload(Address.user))\n>>> result = session.scalars(stmt).all()\n```\n\n----------------------------------------\n\nTITLE: Table definition using dialect-specific types in SQLAlchemy\nDESCRIPTION: This code snippet demonstrates how to define a table using types imported directly from a dialect (postgresql in this example).  It uses INTEGER and VARCHAR from sqlalchemy.types via the PG dialect, as well as a PG-specific type, INET. This approach ensures that the schema definition uses the actual type names as they exist in the target backend.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/dialects/type_migration_guidelines.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import base as pg\n\n   t = Table('mytable', metadata,\n              Column('id', pg.INTEGER, primary_key=True),\n              Column('name', pg.VARCHAR(300)),\n              Column('inetaddr', pg.INET)\n   )\n```\n\n----------------------------------------\n\nTITLE: New AttributeEvents Handlers for Collection Management in SQLAlchemy ORM\nDESCRIPTION: Added new event handlers AttributeEvents.init_collection() and AttributeEvents.dispose_collection(), which track when a collection is first associated with an instance and when it is replaced. These handlers supersede the collection.linker annotation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nAttributeEvents.init_collection()\n```\n\nLANGUAGE: python\nCODE:\n```\nAttributeEvents.dispose_collection()\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Polymorphic Subtypes in SQLAlchemy ORM\nDESCRIPTION: Example demonstrating how to use selectinload with of_type to eagerly load polymorphic entities from all subtypes when querying the base class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> all_employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(Company).options(selectinload(Company.employees.of_type(all_employees)))\n>>> for company in session.scalars(stmt):\n...     print(f\"company: {company.name}\")\n...     print(f\"employees: {company.employees}\")\n{execsql}SELECT company.id, company.name\nFROM company\n[...] ()\nSELECT employee.company_id AS employee_company_id, employee.id AS employee_id,\nemployee.name AS employee_name, employee.type AS employee_type, manager.id AS manager_id,\nmanager.manager_name AS manager_manager_name, engineer.id AS engineer_id,\nengineer.engineer_info AS engineer_engineer_info\nFROM employee\nLEFT OUTER JOIN manager ON employee.id = manager.id\nLEFT OUTER JOIN engineer ON employee.id = engineer.id\nWHERE employee.company_id IN (?)\n[...] (1,)\ncompany: Krusty Krab\nemployees: [Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Model Definition with Relationships\nDESCRIPTION: Example of SQLAlchemy model definitions showing relationship configurations between multiple classes using the declarative base pattern.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    bs = relationship(\"B\", backref=\"a\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n    c_id = Column(ForeignKey(\"c.id\"))\n    c = relationship(\"C\", backref=\"bs\")\n\n\nclass C(Base):\n    __tablename__ = \"c\"\n    id = Column(Integer, primary_key=True)\n\n\na1 = A(bs=[B(), B(c=C())])\n\n\nfor obj in walk(a1):\n    print(obj)\n```\n\n----------------------------------------\n\nTITLE: Functional Approach to SQLAlchemy Relationship Configuration\nDESCRIPTION: Demonstrates using Python functions and lambdas to resolve model references and define dynamic relationship parameters\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom sqlalchemy import desc\n\nif typing.TYPE_CHECKING:\n    from myapplication import Child\n\ndef _resolve_child_model():\n    from myapplication import Child\n    return Child\n\nclass Parent(Base):\n    children: Mapped[List[\"Child\"]] = relationship(\n        _resolve_child_model,\n        order_by=lambda: desc(_resolve_child_model().email_address),\n        primaryjoin=lambda: Parent.id == _resolve_child_model().parent_id\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Delete Cascade Configuration in SQLAlchemy ORM\nDESCRIPTION: Demonstrates configuring cascade delete on a User-Address relationship where deleting the User will also delete related Address objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    # ...\n    addresses = relationship(\"Address\", cascade=\"all, delete\")\n```\n\n----------------------------------------\n\nTITLE: Literal Type Mapping Example\nDESCRIPTION: Demonstrates using typing.Literal for enum-like column definitions in SQLAlchemy ORM mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```\n\n----------------------------------------\n\nTITLE: Joining with Relationship Aliases Using of_type in SQLAlchemy ORM\nDESCRIPTION: Demonstrates using the of_type() modifier with relationship attributes to create joins to the same table with different alias targets. This pattern allows for more concise query construction when joining the same relationship multiple times with different conditions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    select(User)\n    .join(User.addresses.of_type(address_alias_1))\n    .where(address_alias_1.email_address == \"patrick@aol.com\")\n    .join(User.addresses.of_type(address_alias_2))\n    .where(address_alias_2.email_address == \"patrick@gmail.com\")\n)\n```\n\n----------------------------------------\n\nTITLE: ORM DELETE with Custom WHERE Criteria in SQLAlchemy\nDESCRIPTION: Example of using delete() with custom WHERE criteria to perform a DELETE operation affecting multiple rows at once. The where() method is used to specify the criteria for deletion.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import delete\nstmt = delete(User).where(User.name.in_([\"squidward\", \"sandy\"]))\nsession.execute(stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM user_account WHERE user_account.name IN (?, ?)\n[...] ('squidward', 'sandy')\n```\n\n----------------------------------------\n\nTITLE: Configuring with_polymorphic() on mappers in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to configure `with_polymorphic` on SQLAlchemy mappers using the `polymorphic_load` parameter. By setting `polymorphic_load` to `\"inline\"` on the base class mapper, you can enable inline loading of polymorphic subclasses. The example defines `Employee`, `Engineer` classes with mapper configurations demonstrating the use of `polymorphic_identity` and `polymorphic_on`.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\"polymorphic_identity\": \"employee\", \"polymorphic_on\": type}\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n```\n\n----------------------------------------\n\nTITLE: Hybrid Declarative Mapping with Imperative Table in SQLAlchemy\nDESCRIPTION: Demonstrates how to use a pre-existing Table object with a declarative mapped class in SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nuser_table = Table(\n    \"user\",\n    Base.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n    Column(\"fullname\", String),\n    Column(\"nickname\", String),\n)\n\n\nclass User(Base):\n    __table__ = user_table\n```\n\n----------------------------------------\n\nTITLE: Joining to Specific Subtypes with with_polymorphic in SQLAlchemy\nDESCRIPTION: Example demonstrating how to join to polymorphic entities using with_polymorphic and the of_type method to target specific subtypes in a relationship join.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> employee_plus_engineer = with_polymorphic(Employee, [Engineer])\n>>> stmt = (\n...     select(Company.name, employee_plus_engineer.name)\n...     .join(Company.employees.of_type(employee_plus_engineer))\n...     .where(\n...         or_(\n...             employee_plus_engineer.name == \"SpongeBob\",\n...             employee_plus_engineer.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n... )\n>>> for company_name, emp_name in session.execute(stmt):\n...     print(f\"{company_name} {emp_name}\")\n{execsql}SELECT company.name, employee.name AS name_1\nFROM company JOIN (employee LEFT OUTER JOIN engineer ON employee.id = engineer.id) ON company.id = employee.company_id\nWHERE employee.name = ? OR engineer.engineer_info = ?\n[...] ('SpongeBob', 'Senior Customer Engagement Engineer')\n{stop}Krusty Krab SpongeBob\nKrusty Krab Squidward\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic Mapping in SQLAlchemy\nDESCRIPTION: Example showing how to define a polymorphic mapping with SQLAlchemy, which previously had issues with order_by label generation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    type = Column(String)\n\n    __mapper_args__ = {\"polymorphic_on\": type, \"with_polymorphic\": \"*\"}\n```\n\n----------------------------------------\n\nTITLE: Row-Limited Relationship with Window Functions\nDESCRIPTION: Creates a relationship that uses window functions to limit the number of related rows, demonstrating an advanced technique for paginating or restricting relationship results using SQLAlchemy's ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npartition = select(\n    B, func.row_number().over(order_by=B.id, partition_by=B.a_id).label(\"index\")\n).alias()\n\npartitioned_b = aliased(B, partition)\n\nA.partitioned_bs = relationship(\n    partitioned_b, \n    primaryjoin=and_(partitioned_b.a_id == A.id, partition.c.index < 10)\n)\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Delete Cascade Configuration\nDESCRIPTION: Shows how to configure cascade delete behavior in a many-to-many relationship using an association table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassociation_table = Table(\n    \"association\",\n    Base.metadata,\n    Column(\"left_id\", Integer, ForeignKey(\"left.id\")),\n    Column(\"right_id\", Integer, ForeignKey(\"right.id\")),\n)\n\n\nclass Parent(Base):\n    __tablename__ = \"left\"\n    id = mapped_column(Integer, primary_key=True)\n    children = relationship(\n        \"Child\",\n        secondary=association_table,\n        back_populates=\"parents\",\n        cascade=\"all, delete\",\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"right\"\n    id = mapped_column(Integer, primary_key=True)\n    parents = relationship(\n        \"Parent\",\n        secondary=association_table,\n        back_populates=\"children\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy Automap Extension for Database Reflection\nDESCRIPTION: Demonstrates the automap extension which automatically generates mapped ORM classes and relationships from existing database tables. This allows for rapid development with existing database schemas without manually defining all classes and relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.automap import automap_base\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import create_engine\n\nBase = automap_base()\n\n# engine, suppose it has two tables 'user' and 'address' set up\nengine = create_engine(\"sqlite:///mydatabase.db\")\n\n# reflect the tables\nBase.prepare(engine, reflect=True)\n\n# mapped classes are now created with names matching that of the table\n# name.\nUser = Base.classes.user\nAddress = Base.classes.address\n\nsession = Session(engine)\n\n# rudimentary relationships are produced\nsession.add(Address(email_address=\"foo@bar.com\", user=User(name=\"foo\")))\nsession.commit()\n\n# collection-based relationships are by default named \"<classname>_collection\"\nprint(u1.address_collection)\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Only with Raiseload in SQLAlchemy\nDESCRIPTION: Example showing how to use load_only() with raiseload=True to specify which columns to load and raise exceptions for accessing other columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbook = session.scalar(\n    select(Book).options(load_only(Book.title, raiseload=True)).where(Book.id == 5)\n)\n```\n\n----------------------------------------\n\nTITLE: Python Inspector Interface Example\nDESCRIPTION: Shows how to use SQLAlchemy's Inspector interface for low-level database schema inspection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import inspect\n\nengine = create_engine(\"...\")\ninsp = inspect(engine)\nprint(insp.get_table_names())\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Connection Pool\nDESCRIPTION: Example showing how to enable debug logging for SQLAlchemy's connection pool to see events like connection checkout and reset-on-return.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\"postgresql://scott:tiger@localhost/test\", echo_pool=\"debug\")\n```\n\n----------------------------------------\n\nTITLE: Refactoring for Preferred Transaction Management Pattern\nDESCRIPTION: This snippet demonstrates refactoring the method calls to use a single transaction block at the outermost level, thus simplifying transaction management and ensuring clearer transaction demarcation in the code.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\ndef method_a(session):\n    method_b(session)\n\ndef method_b(session):\n    session.add(SomeObject(\"bat\", \"lala\"))\n\nSession = sessionmaker(engine)\n\n# create a Session and call method_a\nwith Session() as session:\n    with session.begin():\n        method_a(session)\n```\n\n----------------------------------------\n\nTITLE: Complex Query with Multiple Joins - Python\nDESCRIPTION: Demonstrates a more complex query with multiple joins, where both specific filtering on one relationship and joined loading on another relationship occur simultaneously.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .options(joinedload(User.addresses))\n    .filter(User.name == \"spongebob\")\n    .filter(Address.email_address == \"someaddress@foo.com\")\n)\n```\n\n----------------------------------------\n\nTITLE: Event Listener with Return Value Modifier in Python\nDESCRIPTION: Shows how to create an event listener that returns a value using the retval=True modifier. Demonstrates modifying attribute values through event handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef validate_phone(target, value, oldvalue, initiator):\n    \"\"\"Strip non-numeric characters from a phone number\"\"\"\n\n    return re.sub(r\"\\D\", \"\", value)\n\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, \"set\", validate_phone, retval=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncAttrs Mixin for Asynchronous ORM Class Definition in Python\nDESCRIPTION: Python code defining SQLAlchemy ORM classes using the AsyncAttrs mixin for asynchronous attribute access. Shows how to create a Base class and two related model classes with async-friendly relationship definitions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom sqlalchemy.ext.asyncio import AsyncAttrs\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(AsyncAttrs, DeclarativeBase):\n    pass\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    # ... rest of mapping ...\n\n    bs: Mapped[List[B]] = relationship()\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    # ... rest of mapping ...\n```\n\n----------------------------------------\n\nTITLE: SQL DDL for Identity Column with PostgreSQL\nDESCRIPTION: Shows the SQL DDL generated for a table with an identity column on a PostgreSQL 12 backend. This snippet demonstrates the creation of a table incorporating identity columns for automatic value generation starting from a specific value. A key parameter is `START WITH` indicating where the sequence should begin. It outputs SQL statements ready for execution on a PostgreSQL server.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE data (\n    id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 42 CYCLE) NOT NULL,\n    data VARCHAR,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Connection Binding in SQLAlchemy\nDESCRIPTION: Shows how to explicitly bind MetaData and Session objects to a specific database connection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nconn = engine.connect()\nsess = create_session(bind=conn)\n```\n\n----------------------------------------\n\nTITLE: Defining Table with Sequence-Generated Primary Key\nDESCRIPTION: Illustrates creating a table with a primary key column that uses a sequence for value generation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntable = Table(\n    \"cartitems\",\n    metadata_obj,\n    Column(\n        \"cart_id\",\n        Integer,\n        Sequence(\"cart_id_seq\", start=1),\n        primary_key=True,\n    ),\n    Column(\"description\", String(40)),\n    Column(\"createdate\", DateTime()),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Department and Employee Classes (One to Many)\nDESCRIPTION: This Python snippet shows how to define the Department and Employee classes in SQLAlchemy, mapping them to the 'department' and 'employee' tables respectively.  The 'employees' attribute in the Department class establishes a one-to-many relationship with the Employee class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"class Department(Base):\n    __tablename__ = \\\"department\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    employees = relationship(\\\"Employee\\\")\n\n\nclass Employee(Base):\n    __tablename__ = \\\"employee\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    dep_id = Column(Integer, ForeignKey(\\\"department.id\\\"))\"\n```\n\n----------------------------------------\n\nTITLE: Populating User Table with Sample Data in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to add multiple User instances along with their associated Address instances to the session, demonstrating the data input process in SQLAlchemy. It includes committing these changes to persist the data in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsession.add_all(\n    [\n        User(\n            name=\"spongebob\",\n            fullname=\"Spongebob Squarepants\",\n            addresses=[Address(email_address=\"spongebob@sqlalchemy.org\")],\n        ),\n        User(\n            name=\"sandy\",\n            fullname=\"Sandy Cheeks\",\n            addresses=[\n                Address(email_address=\"sandy@sqlalchemy.org\"),\n                Address(email_address=\"squirrel@squirrelpower.org\"),\n            ],\n        ),\n        User(\n            name=\"patrick\",\n            fullname=\"Patrick Star\",\n            addresses=[Address(email_address=\"pat999@aol.com\")],\n        ),\n        User(\n            name=\"squidward\",\n            fullname=\"Squidward Tentacles\",\n            addresses=[Address(email_address=\"stentcl@sqlalchemy.org\")],\n        ),\n        User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\"),\n    ]\n)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Unloaded Column Access using SQLAlchemy ORM\nDESCRIPTION: The code snippet shows how accessing an unloaded column with lazy loading enabled causes a SQL statement to be emitted to load that column's data. Requires a SQLAlchemy session and an entity in a persistent state. It allows for deferred data retrieval, conserving resources until the attribute is accessed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimg_data = books[0].cover_photo\n```\n\n----------------------------------------\n\nTITLE: Using Expanding Bindparam for IN Expressions in SQLAlchemy\nDESCRIPTION: Shows how to use the new 'expanding' bindparam feature for IN expressions, allowing dynamic lists to be bound as parameters at execution time rather than compilation time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import bindparam\n\nstmt = select([users]).where(users.c.name.in_(bindparam('names', expanding=True)))\nconn.execute(stmt, {'names': ['alice', 'bob', 'charlie']})\n```\n\n----------------------------------------\n\nTITLE: Reflecting Tables from Multiple Schemas in SQLAlchemy\nDESCRIPTION: This example shows how to reflect tables from multiple schemas by calling MetaData.reflect() multiple times with different schema parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> metadata_obj = MetaData()\n>>> metadata_obj.reflect(someengine, schema=\"project\")\n>>> # add tables from the \"customer\" schema\n>>> metadata_obj.reflect(someengine, schema=\"customer\")\n>>> # add tables from the default schema\n>>> metadata_obj.reflect(someengine)\n```\n\n----------------------------------------\n\nTITLE: String Comparison Operators in SQLAlchemy\nDESCRIPTION: Shows how to use like(), ilike(), notlike(), and notilike() methods for string comparisons in SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").like(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx LIKE :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").ilike(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nlower(x) LIKE lower(:x_1)\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").notlike(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx NOT LIKE :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").notilike(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nlower(x) NOT LIKE lower(:x_1)\n```\n\n----------------------------------------\n\nTITLE: Defining User, UserKeywordAssociation, and Keyword Classes with Association Proxies\nDESCRIPTION: Defines SQLAlchemy ORM classes for User, UserKeywordAssociation, and Keyword, including association proxies for keywords and special keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[UserKeywordAssociation] = relationship(\n        cascade=\"all, delete-orphan\",\n    )\n\n    # object-targeted association proxy\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n    )\n\n    # column-targeted association proxy\n    special_keys: AssociationProxy[List[str]] = association_proxy(\n        \"user_keyword_associations\", \"special_key\"\n    )\n\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str] = mapped_column(String(64))\n    keyword: Mapped[Keyword] = relationship()\n\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n```\n\n----------------------------------------\n\nTITLE: Merging Objects in SQLAlchemy Session\nDESCRIPTION: Example of using the session.merge() method to transfer state from an outside object into a session-bound instance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmerged_object = session.merge(existing_object)\n```\n\n----------------------------------------\n\nTITLE: Correlated Subquery in WHERE Clause for Email Selection in SQL\nDESCRIPTION: This SQL snippet demonstrates a correlated subquery that selects email records. It joins user_account and email_address tables, and uses a correlated subquery in the WHERE clause to find the minimum email_address id for each user.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user_account.name, email_address.email\n FROM user_account\n JOIN email_address ON user_account.id=email_address.user_account_id\n WHERE email_address.id = (\n    SELECT MIN(a.id) FROM email_address AS a\n    WHERE a.user_account_id=user_account.id\n )\n```\n\n----------------------------------------\n\nTITLE: Connecting and Inserting using SQLAlchemy Engine in Python\nDESCRIPTION: The code snippet demonstrates creating an SQLAlchemy Engine instance and inserting data into a PostgreSQL database table using a connection context manager. The connection is explicitly committed, necessitating handling of database credentials and connection URL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nengine = create_engine(\"postgresql+psycopg2://user:pass@host/dbname\")\n\nwith engine.connect() as conn:\n    conn.execute(\n        some_table.insert(),\n        [\n            {\"data\": \"some data one\"},\n            {\"data\": \"some data two\"},\n            {\"data\": \"some data three\"},\n        ],\n    )\n    conn.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Association Proxy with Association Object in SQLAlchemy\nDESCRIPTION: This example demonstrates the use of `association_proxy` with an association object, `UserKeywordAssociation`. The `User` class has a relationship to `UserKeywordAssociation`, which in turn has a relationship to `Keyword`. The `association_proxy` on the `User` class's `keywords` attribute allows direct access to the `Keyword` objects associated with a user through the `UserKeywordAssociation` object. The creator lambda is used to instantiate the association object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import List\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[List[UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        cascade=\"all, delete-orphan\",\n    )\n\n    # association proxy of \"user_keyword_associations\" collection\n    # to \"keyword\" attribute\n    keywords: AssociationProxy[List[Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda keyword_obj: UserKeywordAssociation(keyword=keyword_obj),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[Optional[str]] = mapped_column(String(50))\n\n    user: Mapped[User] = relationship(back_populates=\"user_keyword_associations\")\n\n    keyword: Mapped[Keyword] = relationship()\n\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(\"keyword\", String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic LIMIT/OFFSET Parameter Binding in Python\nDESCRIPTION: Example showing how to use bound parameters for LIMIT and OFFSET values in SQLAlchemy select statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsel = select([table]).limit(bindparam(\"mylimit\")).offset(bindparam(\"myoffset\"))\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Association Proxy in SQLAlchemy 0.9\nDESCRIPTION: Improved SQL generated in SQLAlchemy 0.9 for a query using an association proxy compared to None, which now properly handles NULL associations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.b_id AS a_b_id\nFROM a\nWHERE (EXISTS (SELECT 1\nFROM b\nWHERE b.id = a.b_id AND b.value IS NULL)) OR a.b_id IS NULL\n```\n\n----------------------------------------\n\nTITLE: Custom Descriptor Property in SQLAlchemy\nDESCRIPTION: Shows how to create a custom property descriptor that executes a SQL query to count related addresses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import object_session\nfrom sqlalchemy import select, func\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @property\n    def address_count(self):\n        return object_session(self).scalar(\n            select(func.count(Address.id)).where(Address.user_id == self.id)\n        )\n```\n\n----------------------------------------\n\nTITLE: String Matching Operators in SQLAlchemy\nDESCRIPTION: Shows how to use match() and regexp_match() methods for database-specific string matching operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").match(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx MATCH :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects import postgresql\nprint(column(\"x\").regexp_match(\"word\").compile(dialect=postgresql.dialect()))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx ~ %(x_1)s\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects import mysql\nprint(column(\"x\").regexp_match(\"word\").compile(dialect=mysql.dialect()))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx REGEXP %s\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Models with Single Table Inheritance (STI)\nDESCRIPTION: This snippet defines the SQLAlchemy models for demonstrating single table inheritance (STI). It includes a base class `Base`, a parent class `Employee`, and two child classes `Manager` and `Engineer`. The `__mapper_args__` attribute is used to configure the polymorphic identity and the discriminator column (`type`).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_single_inheritance.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n>>> from sqlalchemy.orm import Session\n>>>\n>>>\n>>> class Base(DeclarativeBase):\n...     pass\n>>> class Employee(Base):\n...     __tablename__ = \"employee\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     name: Mapped[str]\n...     type: Mapped[str]\n...\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}({self.name!r})\"\n...\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"employee\",\n...         \"polymorphic_on\": \"type\",\n...     }\n>>> class Manager(Employee):\n...     manager_name: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"manager\",\n...     }\n>>> class Engineer(Employee):\n...     engineer_info: Mapped[str] = mapped_column(nullable=True)\n...     __mapper_args__ = {\n...         \"polymorphic_identity\": \"engineer\",\n...     }\n```\n\n----------------------------------------\n\nTITLE: Converting MySQL Types to Generic Types Using Event Handler\nDESCRIPTION: Demonstrates setting up an event listener on MetaData to automatically convert vendor-specific types to generic SQLAlchemy types during reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\nmetadata_obj = MetaData()\n\n@event.listens_for(metadata_obj, \"column_reflect\")\ndef genericize_datatypes(inspector, tablename, column_dict):\n    column_dict[\"type\"] = column_dict[\"type\"].as_generic()\n\nmy_generic_table = Table(\"my_table\", metadata_obj, autoload_with=mysql_engine)\n```\n\n----------------------------------------\n\nTITLE: Column Defaults with SQL Functions\nDESCRIPTION: Shows how to configure column defaults using SQL functions while maintaining optional constructor parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        insert_default=func.utc_timestamp(), default=None\n    )\n```\n\n----------------------------------------\n\nTITLE: Correct ORM Join Patterns\nDESCRIPTION: Demonstrates recommended ways to perform joins in SQLAlchemy ORM using mapped classes and aliased objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# normal join to relationship entity\nq = s.query(User).join(User.addresses).filter(Address.email_address == \"ed@foo.com\")\n\n# name Address target explicitly, not necessary but legal\nq = (\n    s.query(User)\n    .join(Address, User.addresses)\n    .filter(Address.email_address == \"ed@foo.com\")\n)\n```\n\n----------------------------------------\n\nTITLE: Custom BindParameter Compiler in SQLAlchemy\nDESCRIPTION: Implementation of a custom compiler for BindParameter that allows conditional literal value rendering based on compiler kwargs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@compiles(BindParameter)\ndef _render_literal_bindparam(element, compiler, use_my_literal_recipe=False, **kw):\n    if not use_my_literal_recipe:\n        # use normal bindparam processing\n        return compiler.visit_bindparam(element, **kw)\n\n    # if use_my_literal_recipe was passed to compiler_kwargs,\n    # render the value directly\n    return repr(element.value)\n```\n\n----------------------------------------\n\nTITLE: Resolving Column Conflicts in SQLAlchemy ORM Inheritance\nDESCRIPTION: This snippet demonstrates how to resolve column conflicts in single table inheritance using the use_existing_column parameter of mapped_column(). It shows how to handle cases where multiple subclasses define the same column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n        \"polymorphic_identity\": \"employee\",\n    }\n\n\nclass Engineer(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n\n\nclass Manager(Employee):\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n    start_date: Mapped[datetime] = mapped_column(\n        nullable=True, use_existing_column=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Inserting Heterogeneous Parameter Dictionaries - Python\nDESCRIPTION: This snippet shows how to handle heterogeneous parameter dictionaries while inserting records into the user_account table. It explains how dictionaries with different keys are grouped and processed into separate INSERT statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> users = session.scalars(\n...     insert(User).returning(User),\n...     [\n...         {\n...             \"name\": \"spongebob\",\n...             \"fullname\": \"Spongebob Squarepants\",\n...             \"species\": \"Sea Sponge\",\n...         },\n...         {\"name\": \"sandy\", \"fullname\": \"Sandy Cheeks\", \"species\": \"Squirrel\"},\n...         {\"name\": \"patrick\", \"species\": \"Starfish\"},\n...         {\n...             \"name\": \"squidward\",\n...             \"fullname\": \"Squidward Tentacles\",\n...             \"species\": \"Squid\",\n...         },\n...         {\"name\": \"ehkrabs\", \"fullname\": \"Eugene H. Krabs\", \"species\": \"Crab\"},\n...     ],\n... )\n{execsql}INSERT INTO user_account (name, fullname, species)\nVALUES (?, ?, ?), (?, ?, ?) RETURNING id, name, fullname, species\n[... (insertmanyvalues) 1/1 (unordered)] ('spongebob', 'Spongebob Squarepants', 'Sea Sponge',\n'sandy', 'Sandy Cheeks', 'Squirrel')\nINSERT INTO user_account (name, species)\nVALUES (?, ?) RETURNING id, name, fullname, species\n[...] ('patrick', 'Starfish')\nINSERT INTO user_account (name, fullname, species)\nVALUES (?, ?, ?), (?, ?, ?) RETURNING id, name, fullname, species\n[... (insertmanyvalues) 1/1 (unordered)] ('squidward', 'Squidward Tentacles',\n'Squid', 'ehkrabs', 'Eugene H. Krabs', 'Crab')\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Constraints in SQLAlchemy\nDESCRIPTION: This snippet shows how to create unique constraints in SQLAlchemy, both as column-level anonymous constraints and as explicitly named table-level constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import UniqueConstraint\n\nmetadata_obj = MetaData()\nmytable = Table(\n    \"mytable\",\n    metadata_obj,\n    # per-column anonymous unique constraint\n    Column(\"col1\", Integer, unique=True),\n    Column(\"col2\", Integer),\n    Column(\"col3\", Integer),\n    # explicit/composite unique constraint.  'name' is optional.\n    UniqueConstraint(\"col2\", \"col3\", name=\"uix_1\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying with Joined Load and Inner Join - Python\nDESCRIPTION: Demonstrates how to execute a query that retrieves Address instances while loading related User instances through joined loading with an inner join, enhancing query efficiency.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Address).options(joinedload(Address.user, innerjoin=True))\n```\n\n----------------------------------------\n\nTITLE: Using EXISTS Subqueries with any() Method in SQLAlchemy\nDESCRIPTION: Shows how to create EXISTS subqueries using the any() method on one-to-many relationships. Includes examples of positive and negative EXISTS queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(User.fullname).where(\n    User.addresses.any(Address.email_address == \"squirrel@squirrelpower.org\")\n)\n\nstmt = select(User.fullname).where(~User.addresses.any())\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Mapped Column with Enum Type\nDESCRIPTION: This snippet shows how to use SQLAlchemy's mapped_column to define a table with an Enum status field. The mapped_column function integrates with SQLAlchemy's DeclarativeBase class to map a status Enum, requiring SQLAlchemy, Typing, and Enum libraries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status] = mapped_column(\n        sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\")\n    )\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by SQLAlchemy 1.4/2.0 for Disambiguation\nDESCRIPTION: This snippet showcases the SQL generated by SQLAlchemy 1.4/2.0 when selecting from entities with overlapping column names. The output demonstrates how SQLAlchemy automatically disambiguates columns, in this case the 'id' column from User and Address.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT anon_1.id AS anon_1_id, anon_1.id_1 AS anon_1_id_1,\n       anon_1.user_id AS anon_1_user_id,\n       anon_1.email_address AS anon_1_email_address\nFROM (\n  SELECT \\\"user\\\".id AS id, address.id AS id_1,\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pending to Persistent State Change in SQLAlchemy\nDESCRIPTION: Tracks the transition of a pending object to a persistent state when an INSERT statement is executed during session flush.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(sessionmaker, \"pending_to_persistent\")\ndef intercept_pending_to_persistent(session, object_):\n    print(\"pending to persistent: %s\" % object_)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Row Typing in SQLAlchemy 2.1\nDESCRIPTION: Shows how SELECT statements are now typed using PEP 646 integration instead of Tuple types, allowing for direct representation of column types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(column(\"x\", Integer), column(\"y\", String))\n```\n\n----------------------------------------\n\nTITLE: Literal Rendering for Date/Time Types in SQLAlchemy\nDESCRIPTION: Illustrates how to render date and time literals for different database backends using `literal_binds`. The code creates a datetime object, wraps it in `literal`, and then compiles it for PostgreSQL and Oracle dialects, showing the different SQL output for each.  The example uses SQLAlchemy's `literal` function in combination with compile and dialect objects to generate the appropriate database-specific representation of the datetime value.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n    >>> import datetime\n\n    >>> from sqlalchemy import DATETIME\n    >>> from sqlalchemy import literal\n    >>> from sqlalchemy.dialects import oracle\n    >>> from sqlalchemy.dialects import postgresql\n\n    >>> date_literal = literal(datetime.datetime.now(), DATETIME)\n\n    >>> print(\n    ...     date_literal.compile(\n    ...         dialect=postgresql.dialect(), compile_kwargs={\"literal_binds\": True}\n    ...     )\n    ... )\n    {printsql}'2022-12-17 11:02:13.575789'{stop}\n\n    >>> print(\n    ...     date_literal.compile(\n    ...         dialect=oracle.dialect(), compile_kwargs={\"literal_binds\": True}\n    ...     )\n    ... )\n    {printsql}TO_TIMESTAMP('2022-12-17 11:02:13.575789', 'YYYY-MM-DD HH24:MI:SS.FF'){stop}\n```\n\n----------------------------------------\n\nTITLE: Implementing Geometry Type with SQL-level Processing in SQLAlchemy\nDESCRIPTION: Creates a custom Geometry type that applies PostGIS functions ST_GeomFromText and ST_AsText for outgoing and incoming data respectively.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func\nfrom sqlalchemy.types import UserDefinedType\n\n\nclass Geometry(UserDefinedType):\n    def get_col_spec(self):\n        return \"GEOMETRY\"\n\n    def bind_expression(self, bindvalue):\n        return func.ST_GeomFromText(bindvalue, type_=self)\n\n    def column_expression(self, col):\n        return func.ST_AsText(col, type_=self)\n```\n\n----------------------------------------\n\nTITLE: Dataclass Mapping with Non-Init Fields\nDESCRIPTION: Demonstrates how to define ORM-mapped dataclasses with fields that have defaults but are not part of __init__\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Base(MappedAsDataclass, DeclarativeBase):\n    pass\n\n\nclass SomeObject(Base):\n    __tablename__ = \"parent\"\n    id: Mapped[int] = mapped_column(primary_key=True, init=False)\n    status: Mapped[str] = mapped_column(default=\"default_status\", init=False)\n\n>>> so = SomeObject()\n>>> so.status\ndefault_status\n```\n\n----------------------------------------\n\nTITLE: Defining Department and Employee Classes with Backref\nDESCRIPTION: This Python snippet defines Department and Employee classes using SQLAlchemy, establishing a bidirectional relationship with a backref. The 'employees' relationship in the Department class uses 'backref=\"department\"' to automatically create a 'department' attribute in the Employee class, allowing navigation from Employee to Department.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"class Department(Base):\n    __tablename__ = \\\"department\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    employees = relationship(\\\"Employee\\\", backref=\\\"department\\\")\n\n\nclass Employee(Base):\n    __tablename__ = \\\"employee\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    dep_id = Column(Integer, ForeignKey(\\\"department.id\\\"))\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Rows Using SQLAlchemy Result Object in Python\nDESCRIPTION: This code snippet explains how to fetch rows from a table using SQLAlchemy's Result object. Rows are printed in a loop, demonstrating the use of the Result and Row objects. Requires a valid SQLAlchemy Engine and a table with data. Outputs are printed row data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> with engine.connect() as conn:\n...     result = conn.execute(text(\"SELECT x, y FROM some_table\"))\n...     for row in result:\n...         print(f\"x: {row.x}  y: {row.y}\")\n{execsql}BEGIN (implicit)\nSELECT x, y FROM some_table\n[...] ()\n{stop}x: 1  y: 1\nx: 2  y: 4\nx: 6  y: 8\nx: 9  y: 10\n{execsql}ROLLBACK{stop}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Object in SQLAlchemy ORM - Python\nDESCRIPTION: This snippet demonstrates how to create a Query object from an existing session in SQLAlchemy ORM. The Query object is essential for executing database queries using ORM classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/query.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nq = session.query(SomeMappedClass)\n```\n\n----------------------------------------\n\nTITLE: Resolving Hanging Issues with Table Drop Operations in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to properly close connections before dropping a table to avoid hanging issues, especially with PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/metadata_schema.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconnection = engine.connect()\nresult = connection.execute(mytable.select())\n\n# fully read result sets\nresult.fetchall()\n\n# close connections\nconnection.close()\n\n# now locks are removed\nmytable.drop(engine)\n```\n\n----------------------------------------\n\nTITLE: Custom Dictionary Collection Implementation\nDESCRIPTION: Implements a custom dictionary-based collection using KeyFuncDict for Node objects, keyed by name attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyNodeMap(KeyFuncDict):\n    \"\"\"Holds 'Node' objects, keyed by the 'name' attribute.\"\"\"\n\n    def __init__(self, *args, **kw):\n        super().__init__(keyfunc=lambda node: node.name)\n        dict.__init__(self, *args, **kw)\n```\n\n----------------------------------------\n\nTITLE: Using the Inspector API for Database Reflection (Python)\nDESCRIPTION: Demonstrates the new Inspector API for database reflection in SQLAlchemy 0.6. This API provides direct access to database metadata like schema names without requiring Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.engine.reflection import Inspector\n\ninsp = Inspector.from_engine(my_engine)\n\nprint(insp.get_schema_names())\n```\n\n----------------------------------------\n\nTITLE: Using of_type() with Various ORM Query Methods in SQLAlchemy\nDESCRIPTION: Shows how to use of_type() method with SQLAlchemy relationship attributes to target specific polymorphic subtypes in queries, including with loader functions like joinedload and comparison methods like any() and has().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# use eager loading in conjunction with with_polymorphic targets\nJob_P = with_polymorphic(Job, [SubJob, ExtraJob], aliased=True)\nq = (\n    s.query(DataContainer)\n    .join(DataContainer.jobs.of_type(Job_P))\n    .options(contains_eager(DataContainer.jobs.of_type(Job_P)))\n)\n\n# pass subclasses to eager loads (implicitly applies with_polymorphic)\nq = s.query(ParentThing).options(\n    joinedload_all(ParentThing.container, DataContainer.jobs.of_type(SubJob))\n)\n\n# control self-referential aliasing with any()/has()\nJob_A = aliased(Job)\nq = (\n    s.query(Job)\n    .join(DataContainer.jobs)\n    .filter(\n        DataContainer.jobs.of_type(Job_A).any(\n            and_(Job_A.id < Job.id, Job_A.type == \"fred\")\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SQLAlchemy Logging with Python Logging Module\nDESCRIPTION: Demonstrates how to configure basic logging for SQLAlchemy to log SQL queries using the Python logging module. Sets logging level for SQLAlchemy engine to INFO to capture SQL query information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Implementing Process-Safe Connection Pool Event Handlers\nDESCRIPTION: Example demonstrating how to implement event handlers that prevent connection sharing across process boundaries by tracking process IDs and invalidating connections when detected in wrong processes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\nfrom sqlalchemy import exc\nimport os\n\nengine = create_engine(\"...\")\n\n\n@event.listens_for(engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    connection_record.info[\"pid\"] = os.getpid()\n\n\n@event.listens_for(engine, \"checkout\")\ndef checkout(dbapi_connection, connection_record, connection_proxy):\n    pid = os.getpid()\n    if connection_record.info[\"pid\"] != pid:\n        connection_record.dbapi_connection = connection_proxy.dbapi_connection = None\n        raise exc.DisconnectionError(\n            \"Connection record belongs to pid %s, \"\n            \"attempting to check out in pid %s\" % (connection_record.info[\"pid\"], pid)\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing PGPString Type with PostgreSQL Encryption in SQLAlchemy\nDESCRIPTION: Defines a PGPString type that uses PostgreSQL's pgcrypto extension to encrypt and decrypt values transparently.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import (\n    create_engine,\n    String,\n    select,\n    func,\n    MetaData,\n    Table,\n    Column,\n    type_coerce,\n    TypeDecorator,\n)\n\nfrom sqlalchemy.dialects.postgresql import BYTEA\n\n\nclass PGPString(TypeDecorator):\n    impl = BYTEA\n\n    cache_ok = True\n\n    def __init__(self, passphrase):\n        super(PGPString, self).__init__()\n\n        self.passphrase = passphrase\n\n    def bind_expression(self, bindvalue):\n        # convert the bind's type from PGPString to\n        # String, so that it's passed to psycopg2 as is without\n        # a dbapi.Binary wrapper\n        bindvalue = type_coerce(bindvalue, String)\n        return func.pgp_sym_encrypt(bindvalue, self.passphrase)\n\n    def column_expression(self, col):\n        return func.pgp_sym_decrypt(col, self.passphrase)\n```\n\n----------------------------------------\n\nTITLE: Updating User Without Incrementing Version in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to update a User object without incrementing the version counter. The UPDATE statement will still check against the previous value, which can be useful for specific update scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# will leave version_uuid unchanged\nu1.name = \"u3\"\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping with Dataclasses\nDESCRIPTION: Shows how to map pre-existing dataclasses using imperative mapping approach with explicit Table definitions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n    id: int = field(init=False)\n    name: str = None\n    fullname: str = None\n    nickname: str = None\n    addresses: List[Address] = field(default_factory=list)\n\n\n@dataclass\nclass Address:\n    id: int = field(init=False)\n    user_id: int = field(init=False)\n    email_address: str = None\n\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"fullname\", String(50)),\n    Column(\"nickname\", String(12)),\n)\n\naddress = Table(\n    \"address\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"user_id\", Integer, ForeignKey(\"user.id\")),\n    Column(\"email_address\", String(50)),\n)\n\nmapper_registry.map_imperatively(\n    User,\n    user,\n    properties={\n        \"addresses\": relationship(Address, backref=\"user\", order_by=address.c.id),\n    },\n)\n\nmapper_registry.map_imperatively(Address, address)\n```\n\n----------------------------------------\n\nTITLE: Mapping User Associations as Dictionary in SQLAlchemy\nDESCRIPTION: Illustrates the configuration of associations using a dictionary collection class keyed by a special column with SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Dict\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(\n        back_populates=\"user\",\n        collection_class=attribute_keyed_dict(\"special_key\"),\n        cascade=\"all, delete-orphan\",\n    )\n    keywords: AssociationProxy[Dict[str, Keyword]] = association_proxy(\n        \"user_keyword_associations\",\n        \"keyword\",\n        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),\n    )\n\n    def __init__(self, name: str):\n        self.name = name\n\nclass UserKeywordAssociation(Base):\n    __tablename__ = \"user_keyword\"\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id: Mapped[int] = mapped_column(ForeignKey(\"keyword.id\"), primary_key=True)\n    special_key: Mapped[str]\n\n    user: Mapped[User] = relationship(\n        back_populates=\"user_keyword_associations\",\n    )\n    keyword: Mapped[Keyword] = relationship()\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    keyword: Mapped[str] = mapped_column(String(64))\n\n    def __init__(self, keyword: str):\n        self.keyword = keyword\n\n    def __repr__(self) -> str:\n        return f\"Keyword({self.keyword!r})\"\n```\n\n----------------------------------------\n\nTITLE: Using Query.options() with Eager Loading in SQLAlchemy\nDESCRIPTION: Example of using Query.options() functions like eagerload_all() with variable-length arguments to specify relationships to be eager loaded. This demonstrates the new *args syntax for specifying load paths using descriptors.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery.options(eagerload_all(User.orders, Order.items, Item.keywords))\n```\n\n----------------------------------------\n\nTITLE: Performance Testing ORM Object Fetching in SQLAlchemy\nDESCRIPTION: A script that demonstrates performance improvements in SQLAlchemy 1.0 where raw loading of rows now populates ORM-based objects about 25% faster. The example shows how to use yield_per to efficiently fetch large result sets.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom sqlalchemy import Integer, Column, create_engine, Table\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass Foo(Base):\n    __table__ = Table(\n        \"foo\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"a\", Integer(), nullable=False),\n        Column(\"b\", Integer(), nullable=False),\n        Column(\"c\", Integer(), nullable=False),\n    )\n\n\nengine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo=True)\n\nsess = Session(engine)\n\nnow = time.time()\n\n# avoid using all() so that we don't have the overhead of building\n# a large list of full objects in memory\nfor obj in sess.query(Foo).yield_per(100).limit(1000000):\n    pass\n\nprint(\"Total time: %d\" % (time.time() - now))\n```\n\n----------------------------------------\n\nTITLE: Using with_expression in SQLAlchemy ORM with Expressions - Python SQLAlchemy\nDESCRIPTION: This snippet shows how to define and use expressions within a SQLAlchemy ORM query while leveraging the with_expression option. It emphasizes the importance of assigning expressions to variables for reuse in filters and ordering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\na_expr = A.x + A.y\nstmt = (\n    select(A)\n    .options(with_expression(A.expr, a_expr))\n    .filter(a_expr > 5)\n    .order_by(a_expr)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Auto-generated Primary Key in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to define a SQLAlchemy ORM model with an auto-generated primary key using mapped_column. It demonstrates the use of String and mapped_column for defining columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndata: Mapped[str] = mapped_column(String(50))\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Autoflush Option - Python SQLAlchemy\nDESCRIPTION: This snippet illustrates how to disable the autoflush behavior by executing a statement with the `autoflush` execution option set to False. This is essential for controlling when changes are flushed to the database during query execution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(User).execution_options(autoflush=False)\nsession.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Defining User and Address Model Classes in SQLAlchemy ORM\nDESCRIPTION: Example showing class definitions for User and Address models with a one-to-many relationship using SQLAlchemy ORM mapped classes\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    addresses = relationship(\"Address\", backref=\"user\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    id = mapped_column(Integer, primary_key=True)\n    email_address = mapped_column(String(50), nullable=False)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"), nullable=False)\n```\n\n----------------------------------------\n\nTITLE: Handling Detached Objects in SQLAlchemy ORM (Python)\nDESCRIPTION: Illustrates the behavior of detached objects after a session is closed. Attempting to access attributes of detached objects results in an error. The snippet also shows how to re-attach objects to a session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> squidward.name\nTraceback (most recent call last):\n  ...\nsqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x...> is not bound to a Session; attribute refresh operation cannot proceed\n\n>>> session.add(squidward)\n>>> squidward.name\n{execsql}BEGIN (implicit)\nSELECT user_account.id AS user_account_id, user_account.name AS user_account_name, user_account.fullname AS user_account_fullname\nFROM user_account\nWHERE user_account.id = ?\n[...] (4,){stop}\n'squidward'\n```\n\n----------------------------------------\n\nTITLE: Binary Comparison Function in ORM Relationship\nDESCRIPTION: Shows how to use a SQL function as a comparison object in an ORM relationship using the as_comparison() modifier.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Venue(Base):\n    __tablename__ = \"venue\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    descendants = relationship(\n        \"Venue\",\n        primaryjoin=func.instr(remote(foreign(name)), name + \"/\").as_comparison(1, 2)\n        == 1,\n        viewonly=True,\n        order_by=name,\n    )\n```\n\n----------------------------------------\n\nTITLE: Reflecting Views in SQLAlchemy\nDESCRIPTION: This example shows how to reflect a database view, including how to specify primary key and foreign key constraints that may not be detected automatically.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_view = Table(\n    \"some_view\",\n    metadata,\n    Column(\"view_id\", Integer, primary_key=True),\n    Column(\"related_thing\", Integer, ForeignKey(\"othertable.thing_id\")),\n    autoload_with=engine,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table with SQLite ON CONFLICT\nDESCRIPTION: This example shows how to define a table with SQLite's `ON CONFLICT` clause using SQLAlchemy. The `sqlite_on_conflict` keyword is used for `UniqueConstraint`, and `sqlite_on_conflict_primary_key` is used for the primary key constraint. This allows specifying the conflict resolution strategy for each constraint.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"some_table = Table(\n        \\\"some_table\\\",\n        metadata_obj,\n        Column(\\\"id\\\", Integer, primary_key=True, sqlite_on_conflict_primary_key=\\\"FAIL\\\"),\n        Column(\\\"data\\\", Integer),\n        UniqueConstraint(\\\"id\\\", \\\"data\\\", sqlite_on_conflict=\\\"IGNORE\\\"),\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring delete-orphan Cascade in SQLAlchemy One-to-Many Relationship\nDESCRIPTION: Example showing how to configure a one-to-many relationship with delete-orphan cascade, which automatically deletes child objects when they're removed from the parent's collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    # ...\n\n    addresses = relationship(\"Address\", cascade=\"all, delete-orphan\")\n\n\n# ...\n\ndel user.addresses[1]\nsession.flush()\n```\n\n----------------------------------------\n\nTITLE: Filtering with Parent Relationship in SQLAlchemy\nDESCRIPTION: This snippet shows how to filter entities based on a parent relationship using with_parent in SQLAlchemy. It filters Address entities to find those associated with a specific User instance (u1) through the User.addresses relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"q = session.query(Address).filter(with_parent(u1, User.addresses))\"\n```\n\n----------------------------------------\n\nTITLE: Using defer to Omit Specific Columns in SQLAlchemy ORM\nDESCRIPTION: This snippet applies the defer loader option to exclude specific columns from loading by default, marking them for on-demand loading. Requires SQLAlchemy and set up entities. Deferring unnecessary data until accessed optimizes performance and resource usage.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.orm import defer\nstmt = select(Book).where(Book.owner_id == 2).options(defer(Book.cover_photo))\nbooks = session.scalars(stmt).all()\nfor book in books:\n    print(f\"{book.title}: {book.summary}\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nimg_data = books[0].cover_photo\n```\n\n----------------------------------------\n\nTITLE: Post-Connect Configuration with Event Listener\nDESCRIPTION: Example of running commands after connection establishment using the connect event.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    cursor_obj = dbapi_connection.cursor()\n    cursor_obj.execute(\"SET some session variables\")\n    cursor_obj.close()\n```\n\n----------------------------------------\n\nTITLE: Selecting from Subquery using Query.select_entity_from()\nDESCRIPTION: Example showing migration from legacy Query.select_entity_from() to using aliased() in both 1.x and 2.0 styles. The 2.0 style requires explicit limit and scalars() usage.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsubquery = session.query(User).filter(User.id == 5).subquery()\n\nuser = session.query(User).select_entity_from(subquery).first()\n```\n\n----------------------------------------\n\nTITLE: Configuring Eager Fetching of Client-Invoked SQL Expressions in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to configure a SQLAlchemy ORM model to eagerly fetch client-invoked SQL expressions used for INSERT or UPDATE. It uses FetchedValue with server_default and server_onupdate.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    created = mapped_column(\n        DateTime(), default=func.now(), server_default=FetchedValue()\n    )\n    updated = mapped_column(\n        DateTime(),\n        onupdate=func.now(),\n        server_default=FetchedValue(),\n        server_onupdate=FetchedValue(),\n    )\n\n    __mapper_args__ = {\"eager_defaults\": True}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hierarchical Path-Based Relationship in SQLAlchemy\nDESCRIPTION: Defines an Element class with a self-referential relationship using path-based querying. The relationship uses the remote() and foreign() functions to establish a one-to-many hierarchical structure.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Element(Base):\n    __tablename__ = \"element\"\n\n    path = mapped_column(String, primary_key=True)\n\n    descendants = relationship(\n        \"Element\",\n        primaryjoin=remote(foreign(path)).like(path.concat(\"/%\")),\n        viewonly=True,\n        order_by=path,\n    )\n```\n\n----------------------------------------\n\nTITLE: String Alteration Operators in SQLAlchemy\nDESCRIPTION: Demonstrates string concatenation, regular expression replacement, and collation operations in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").concat(\"some string\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx || :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\", String) + \"some string\")\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx || :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint((column(\"x\", String) + \"some string\").compile(dialect=mysql.dialect()))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nconcat(x, %s)\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").regexp_replace(\"foo\", \"bar\").compile(dialect=postgresql.dialect()))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nREGEXP_REPLACE(x, %(x_1)s, %(x_2)s)\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(\n    (column(\"x\").collate(\"latin1_german2_ci\") == \"Müller\").compile(\n        dialect=mysql.dialect()\n    )\n)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n(x COLLATE latin1_german2_ci) = %s\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import literal\nprint(\n    (literal(\"Müller\").collate(\"latin1_german2_ci\") == column(\"x\")).compile(\n        dialect=mysql.dialect()\n    )\n)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n(%s COLLATE latin1_german2_ci) = x\n```\n\n----------------------------------------\n\nTITLE: Implementing array_agg function in PostgreSQL with SQLAlchemy\nDESCRIPTION: This snippet highlights the addition of the array_agg function in SQLAlchemy for PostgreSQL, which returns an ARRAY of the correct type.  It also introduces support for index/slice operations on the returned array. The aggregate_order_by construct is added to support the ORDER BY extension within array aggregation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: PostgreSQL HSTORE Type Usage\nDESCRIPTION: This snippet showcases the use of the `HSTORE` type from `sqlalchemy.dialects.postgresql`. It defines a table with an `HSTORE` column and then demonstrates how to access individual keys within the HSTORE column using index access syntax. It also illustrates accessing the matrix representation of the HSTORE data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import HSTORE\n\ndata = Table(\n    \"data_table\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"hstore_data\", HSTORE),\n)\n\nengine.execute(select([data.c.hstore_data[\"some_key\"]])).scalar()\n\nengine.execute(select([data.c.hstore_data.matrix()])).scalar()\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Name Generation for SQLAlchemy ORM Inheritance in Python\nDESCRIPTION: Shows how to use the has_inherited_table helper to conditionally generate table names, defaulting to single table inheritance unless explicitly overridden. This approach reverses the default behavior from the previous example.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import has_inherited_table\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Tablename:\n    @declared_attr.directive\n    def __tablename__(cls):\n        if has_inherited_table(cls):\n            return None\n        return cls.__name__.lower()\n\n\nclass Person(Tablename, Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    discriminator: Mapped[str]\n    __mapper_args__ = {\"polymorphic_on\": \"discriminator\"}\n\n\nclass Engineer(Person):\n    @declared_attr.directive\n    def __tablename__(cls):\n        \"\"\"override __tablename__ so that Engineer is joined-inheritance to Person\"\"\"\n\n        return cls.__name__.lower()\n\n    id: Mapped[int] = mapped_column(ForeignKey(\"person.id\"), primary_key=True)\n\n    primary_language: Mapped[str]\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\n\nclass Manager(Person):\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n```\n\n----------------------------------------\n\nTITLE: ORM Bulk Insert using Legacy Session Method in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to replace the legacy Session.bulk_insert_mappings method with the new API. It shows how to use insert(User) along with Session.execute to perform a bulk insert operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"session.bulk_insert_mappings(User, [{\\\"name\\\": \\\"u1\\\"}, {\\\"name\\\": \\\"u2\\\"}, {\\\"name\\\": \\\"u3\\\"}])\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"from sqlalchemy import insert\n\n    session.execute(insert(User), [{\\\"name\\\": \\\"u1\\\"}, {\\\"name\\\": \\\"u2\\\"}, {\\\"name\\\": \\\"u3\\\"}])\"\n```\n\n----------------------------------------\n\nTITLE: Composite Foreign Key Constraint in SQLAlchemy Models\nDESCRIPTION: This example demonstrates how to implement a composite foreign key constraint in SQLAlchemy, ensuring that a Widget's favorite_entry_id references an Entry that also refers back to the Widget, including foreign key management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/relationship_persistence.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import (\n    Integer,\n    ForeignKey,\n    String,\n    UniqueConstraint,\n    ForeignKeyConstraint,\n)\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Entry(Base):\n    __tablename__ = \"entry\"\n    entry_id = mapped_column(Integer, primary_key=True)\n    widget_id = mapped_column(Integer, ForeignKey(\"widget.widget_id\"))\n    name = mapped_column(String(50))\n    __table_args__ = (UniqueConstraint(\"entry_id\", \"widget_id\"),)\n\n\nclass Widget(Base):\n    __tablename__ = \"widget\"\n\n    widget_id = mapped_column(Integer, autoincrement=\"ignore_fk\", primary_key=True)\n    favorite_entry_id = mapped_column(Integer)\n\n    name = mapped_column(String(50))\n\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"widget_id\", \"favorite_entry_id\"],\n            [\"entry.widget_id\", \"entry.entry_id\"],\n            name=\"fk_favorite_entry\",\n        ),\n    )\n\n    entries = relationship(\n        Entry, primaryjoin=widget_id == Entry.widget_id, foreign_keys=Entry.widget_id\n    )\n    favorite_entry = relationship(\n        Entry,\n        primaryjoin=favorite_entry_id == Entry.entry_id,\n        foreign_keys=favorite_entry_id,\n        post_update=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Engine with fast_executemany (pyodbc)\nDESCRIPTION: This example demonstrates how to enable `fast_executemany` mode in the pyodbc dialect for SQL Server in SQLAlchemy. The `fast_executemany=True` parameter is passed to the `create_engine` function. This improves performance when executing many insert or update statements by using the Microsoft ODBC driver.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"engine = create_engine(\n        \\\"mssql+pyodbc://scott:tiger@mssql2017:1433/test?driver=ODBC+Driver+13+for+SQL+Server\\\",\n        fast_executemany=True,\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mixin to Exclude Columns with Custom Info Flag in SQLAlchemy ORM\nDESCRIPTION: Demonstrates creating a mixin class that provides a __mapper_args__ method to exclude columns from ORM operations based on Column.info flags. The mixin scans for columns with {\"exclude\": True} in their info dictionary and adds them to exclude_properties.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import select\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\n\n\nclass ExcludeColsWFlag:\n    @declared_attr\n    def __mapper_args__(cls):\n        return {\n            \"exclude_properties\": [\n                column.key\n                for column in cls.__table__.c\n                if column.info.get(\"exclude\", False)\n            ]\n        }\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomeClass(ExcludeColsWFlag, Base):\n    __tablename__ = \"some_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    data = mapped_column(String)\n    not_needed = mapped_column(String, info={\"exclude\": True})\n```\n\n----------------------------------------\n\nTITLE: Querying Individual Columns in SQLAlchemy\nDESCRIPTION: Example of querying specific columns from a SQLAlchemy model, which now properly passes the Mapper to Session.get_bind().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User.id, User.name).all()\n```\n\n----------------------------------------\n\nTITLE: Inline Parameter Rendering for SQL Expressions in SQLAlchemy\nDESCRIPTION: Demonstrates how to render bound parameters inline when stringifying a SQLAlchemy statement, with a warning about security implications.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import table, column, select\n\nt = table(\"t\", column(\"x\"))\n\ns = select(t).where(t.c.x == 5)\n\n# **do not use** with untrusted input!!!\nprint(s.compile(compile_kwargs={\"literal_binds\": True}))\n\n# to render for a specific dialect\nprint(s.compile(dialect=dialect, compile_kwargs={\"literal_binds\": True}))\n\n# or if you have an Engine, pass as first argument\nprint(s.compile(some_engine, compile_kwargs={\"literal_binds\": True}))\n```\n\n----------------------------------------\n\nTITLE: Creating ORM Aliases in SQLAlchemy Python\nDESCRIPTION: Demonstrates creating SQL aliases for ORM entities using the aliased() construct, with options for anonymous and named aliases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\nu1 = aliased(User)\nprint(select(u1).order_by(u1.id))\n\n# With explicit name\nu1 = aliased(User, name=\"u1\")\nstmt = select(u1).order_by(u1.id)\nrow = session.execute(stmt).first()\n```\n\n----------------------------------------\n\nTITLE: Conditional Baked Query with Function-Based Criteria in Python\nDESCRIPTION: Demonstrates how baked queries can handle conditional logic more elegantly using the with_criteria method, eliminating the need for manual cache key management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbakery = baked.bakery()\n\n\ndef lookup(session, id_argument, include_frobnizzle=False):\n    def create_model_query(session):\n        return session.query(Model).filter(Model.id == bindparam(\"id\"))\n\n    parameterized_query = bakery.bake(create_model_query)\n\n    if include_frobnizzle:\n\n        def include_frobnizzle_in_query(query):\n            return query.filter(Model.frobnizzle == True)\n\n        parameterized_query = parameterized_query.with_criteria(\n            include_frobnizzle_in_query\n        )\n\n    return parameterized_query(session).params(id=id_argument).all()\n```\n\n----------------------------------------\n\nTITLE: Server-Side Sequence Default Configuration\nDESCRIPTION: Shows how to configure a Sequence as both Python-side and server-side default generator for a column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncart_id_seq = Sequence(\"cart_id_seq\", metadata=metadata_obj, start=1)\ntable = Table(\n    \"cartitems\",\n    metadata_obj,\n    Column(\n        \"cart_id\",\n        Integer,\n        cart_id_seq,\n        server_default=cart_id_seq.next_value(),\n        primary_key=True,\n    ),\n    Column(\"description\", String(40)),\n    Column(\"createdate\", DateTime()),\n)\n```\n\n----------------------------------------\n\nTITLE: Intercepting Column Reflection in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use an event listener to intercept column reflection and modify column attributes, such as adding a custom key prefix.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n@event.listens_for(Base.metadata, \"column_reflect\")\ndef column_reflect(inspector, table, column_info):\n    # set column.key = \"attr_<lower_case_name>\"\n    column_info[\"key\"] = \"attr_%s\" % column_info[\"name\"].lower()\n```\n\n----------------------------------------\n\nTITLE: Fixing Race Condition in ORM Lazy Loading (Python)\nDESCRIPTION: Fixed a regression in SQLAlchemy 1.2 where a race condition could occur when generating lazy loading queries, causing the related criteria to be None. The fix ensures parameter names are fixed before generating new clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Object-Based Association Proxy Example - Python\nDESCRIPTION: Demonstrates an object-based association proxy implementation with collection membership testing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(Integer, primary_key=True)\n    user_elements = relationship(\"UserElement\")\n\n    # object-based association proxy\n    elements = association_proxy(\"user_elements\", \"element\")\n\n\nclass UserElement(Base):\n    __tablename__ = \"user_element\"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(ForeignKey(\"user.id\"))\n    element_id = Column(ForeignKey(\"element.id\"))\n    element = relationship(\"Element\")\n\n\nclass Element(Base):\n    __tablename__ = \"element\"\n\n    id = Column(Integer, primary_key=True)\n    value = Column(String)\n```\n\n----------------------------------------\n\nTITLE: Improved post_update Behavior with onupdate Columns in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how post_update now properly preserves explicit values and handles onupdate columns. The example shows a relationship with post_update that correctly maintains the user-set value during the UPDATE operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    favorite_b_id = Column(ForeignKey(\"b.id\", name=\"favorite_b_fk\"))\n    bs = relationship(\"B\", primaryjoin=\"A.id == B.a_id\")\n    favorite_b = relationship(\n        \"B\", primaryjoin=\"A.favorite_b_id == B.id\", post_update=True\n    )\n    updated = Column(Integer, onupdate=my_onupdate_function)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\", name=\"a_fk\"))\n\n\na1 = A()\nb1 = B()\n\na1.bs.append(b1)\na1.favorite_b = b1\na1.updated = 5\ns.add(a1)\ns.flush()\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO a (favorite_b_id, updated) VALUES (?, ?)\n(None, 5)\nINSERT INTO b (a_id) VALUES (?)\n(1,)\nUPDATE a SET favorite_b_id=?, updated=? WHERE a.id = ?\n(1, 5, 1)\n```\n\n----------------------------------------\n\nTITLE: Filtering Subclass Attributes with with_polymorphic() in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to filter attributes of subclasses when using `with_polymorphic` in SQLAlchemy. It uses the `or_` construct to create criteria against both the `Engineer` and `Manager` classes simultaneously within a single query. This allows for querying across multiple subclass types based on their specific attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import or_\n>>> employee_poly = with_polymorphic(Employee, [Engineer, Manager])\n>>> stmt = (\n...     select(employee_poly)\n...     .where(\n...         or_(\n...             employee_poly.Manager.manager_name == \"Eugene H. Krabs\",\n...             employee_poly.Engineer.engineer_info\n...             == \"Senior Customer Engagement Engineer\",\n...         )\n...     )\n...     .order_by(employee_poly.id)\n... )\n>>> objects = session.scalars(stmt).all()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT employee.id, employee.name, employee.type, employee.company_id, manager.id AS id_1,\n    manager.manager_name, engineer.id AS id_2, engineer.engineer_info\n    FROM employee\n    LEFT OUTER JOIN manager ON employee.id = manager.id\n    LEFT OUTER JOIN engineer ON employee.id = engineer.id\n    WHERE manager.manager_name = ? OR engineer.engineer_info = ?\n    ORDER BY employee.id\n    [...] ('Eugene H. Krabs', 'Senior Customer Engagement Engineer')\n```\n\n----------------------------------------\n\nTITLE: Defining Mapped Class with Event Listener in SQLAlchemy\nDESCRIPTION: Example showing a Point class mapped with SQLAlchemy ORM, including a custom event listener that maintains a calculated attribute x_plus_y. The listener responds to load events to ensure the calculated field stays synchronized.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\nclass Point(Base):\n    __tablename__ = \"point\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    x: Mapped[int]\n    y: Mapped[int]\n\n    def __init__(self, x, y, **kw):\n        super().__init__(x=x, y=y, **kw)\n        self.x_plus_y = x + y\n\n@event.listens_for(Point, \"load\")\ndef receive_load(target, context):\n    target.x_plus_y = target.x + target.y\n```\n\n----------------------------------------\n\nTITLE: Disabling Autobegin in SQLAlchemy ORM Session\nDESCRIPTION: Demonstrates creating a SQLAlchemy session with autobegin disabled, requiring explicit transaction initiation through 'begin' to prevent implicit transaction creation on operations. Shows error handling for missed 'begin' calls.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine, autobegin=False) as session:\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    session.add(User(name=\"u1\"))\n    session.commit()\n\n    session.begin()  # <-- required, else InvalidRequestError raised on next call\n\n    u1 = session.scalar(select(User).filter_by(name=\"u1\"))\n```\n\n----------------------------------------\n\nTITLE: Disabling Bulk ORM Update for UPDATE Statements with Multiple Parameter Sets\nDESCRIPTION: Shows how to bypass the automatic ORM Bulk Update by Primary Key feature by executing the statement directly against the Connection. This approach uses bind parameters with explicit WHERE criteria instead of primary key-based updates.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import bindparam\nsession.connection().execute(\n    update(User).where(User.name == bindparam(\"u_name\")),\n    [\n        {\"u_name\": \"spongebob\", \"fullname\": \"Spongebob Squarepants\"},\n        {\"u_name\": \"patrick\", \"fullname\": \"Patrick Star\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Loading ORM Relationships After Commit\nDESCRIPTION: This snippet describes how accessing attributes post-commit triggers SELECT statements to load fresh data. The snippet requires executed ORM transactions and involves refreshing objects to view the transaction's effects, such as retrieving primary keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_4\n\nLANGUAGE: pycon+sql\nCODE:\n```\n\n  >>> u1.id\n  {execsql}BEGIN (implicit)\n  SELECT user_account.id AS user_account_id, user_account.name AS user_account_name,\n  user_account.fullname AS user_account_fullname\n  FROM user_account\n  WHERE user_account.id = ?\n  [...] (6,){stop}\n  6\n```\n\n----------------------------------------\n\nTITLE: Defining Employee and Project Classes with Many-to-Many\nDESCRIPTION: This Python snippet demonstrates how to define a many-to-many relationship between Employee and Project classes using SQLAlchemy.  It uses a secondary table 'employee_project' to link the two classes, and plain table metadata is used to represent this many-to-many relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"class Employee(Base):\n    __tablename__ = \\\"employee\\\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n\n    projects = relationship(\n        \\\"Project\\\",\n        secondary=Table(\n            \\\"employee_project\\\",\n            Base.metadata,\n            Column(\\\"employee_id\\\", Integer, ForeignKey(\\\"employee.id\\\"), primary_key=True),\n            Column(\\\"project_id\\\", Integer, ForeignKey(\\\"project.id\\\"), primary_key=True),\n        ),\n        backref=\\\"employees\\\",\n    )\n\n\nclass Project(Base):\n    __tablename__ = \\\"project\\\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\"\n```\n\n----------------------------------------\n\nTITLE: AsyncSession Event Handler Setup\nDESCRIPTION: Basic setup for ORM events using AsyncSession with imports\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom sqlalchemy import event\nfrom sqlalchemy import text\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.ext.asyncio import create_async_engine\nfrom sqlalchemy.orm import Session\n```\n\n----------------------------------------\n\nTITLE: Safe Numeric TypeDecorator with Rounding in SQLAlchemy\nDESCRIPTION: A TypeDecorator that handles rounding of Decimal numbers to prevent errors with database connectors that don't handle excessive decimal places well.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.types import TypeDecorator, Numeric\nfrom decimal import Decimal\n\nclass SafeNumeric(TypeDecorator):\n    \"\"\"Adds quantization to Numeric.\"\"\"\n\n    impl = Numeric\n\n    def __init__(self, *arg, **kw):\n        TypeDecorator.__init__(self, *arg, **kw)\n        self.quantize_int = -self.impl.scale\n        self.quantize = Decimal(10) ** self.quantize_int\n\n    def process_bind_param(self, value, dialect):\n        if isinstance(value, Decimal) and value.as_tuple()[2] < self.quantize_int:\n            value = value.quantize(self.quantize)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Relationships with Custom Join Conditions in SQLAlchemy\nDESCRIPTION: Illustrates how to define a relationship with complex join conditions, including function calls and type casting. This example shows a self-referential relationship in a HostEntry class where the join condition involves casting and comparing IP addresses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass HostEntry(Base):\n    __tablename__ = \"host_entry\"\n\n    id = Column(Integer, primary_key=True)\n    ip_address = Column(INET)\n    content = Column(String(50))\n\n    # relationship() using explicit foreign_keys, remote_side\n    parent_host = relationship(\n        \"HostEntry\",\n        primaryjoin=ip_address == cast(content, INET),\n        foreign_keys=content,\n        remote_side=ip_address,\n    )\n```\n\n----------------------------------------\n\nTITLE: Loading Filtered Collections with contains_eager\nDESCRIPTION: Shows how to load a subset of related collection items by applying filters to the join and using contains_eager with populate_existing to ensure collections are properly populated with the filtered data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .filter(Address.email_address.like(\"%@aol.com\"))\n    .options(contains_eager(User.addresses))\n    .execution_options(populate_existing=True)\n)\n```\n\n----------------------------------------\n\nTITLE: INSERT...FROM SELECT in SQLAlchemy\nDESCRIPTION: Demonstrates how to use INSERT...FROM SELECT to copy data from one table to another without fetching and re-sending the data from the client. This example inserts user IDs and generated email addresses into the address table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> select_stmt = select(user_table.c.id, user_table.c.name + \"@aol.com\")\n>>> insert_stmt = insert(address_table).from_select(\n...     [\"user_id\", \"email_address\"], select_stmt\n... )\n>>> print(insert_stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO address (user_id, email_address)\nSELECT user_account.id, user_account.name || :name_1 AS anon_1\nFROM user_account\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi-Classical Concrete Inheritance Mapping in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to set up a semi-classical concrete inheritance mapping using SQLAlchemy. It defines Table objects explicitly and uses polymorphic_union to create a union of these tables. The classes are then mapped using Declarative style with __table__ and __mapper_args__.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = Base.metadata\n\nemployees_table = Table(\n    \"employee\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\nmanagers_table = Table(\n    \"manager\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"manager_data\", String(50)),\n)\n\nengineers_table = Table(\n    \"engineer\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n    Column(\"engineer_info\", String(50)),\n)\n\nfrom sqlalchemy.orm import polymorphic_union\n\npjoin = polymorphic_union(\n    {\n        \"employee\": employees_table,\n        \"manager\": managers_table,\n        \"engineer\": engineers_table,\n    },\n    \"type\",\n    \"pjoin\",\n)\n\nclass Employee(Base):\n    __table__ = employee_table\n    __mapper_args__ = {\n        \"polymorphic_on\": pjoin.c.type,\n        \"with_polymorphic\": (\"*\", pjoin),\n        \"polymorphic_identity\": \"employee\",\n    }\n\n\nclass Engineer(Employee):\n    __table__ = engineer_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\n\nclass Manager(Employee):\n    __table__ = manager_table\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Session.get instead of Query.get in SQLAlchemy Python\nDESCRIPTION: Illustrates the shift from using _orm.Query.get to _orm.Session.get for fetching single ORM objects based on their primary key. The updated method aligns with the SQLAlchemy 2.0 migration strategy, offering a more intuitive interface within the session's context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nuser_obj = session.get(User, 5)\n```\n\n----------------------------------------\n\nTITLE: Using with_polymorphic to Optimize Attribute Loading in Single Inheritance\nDESCRIPTION: This example shows how to use the with_polymorphic function to include all subclass columns in the initial query, avoiding additional SELECTs when accessing subclass-specific attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> employees = with_polymorphic(Employee, \"*\")\n>>> stmt = select(employees).order_by(employees.id)\n>>> objects = session.scalars(stmt).all()\n{execsql}BEGIN (implicit)\nSELECT employee.id, employee.name, employee.type,\nemployee.manager_name, employee.engineer_info\nFROM employee ORDER BY employee.id\n[...] ()\n{stop}>>> for obj in objects:\n...     print(f\"{obj}\")\nManager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n>>> objects[0].manager_name\n'Eugene H. Krabs'\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationships with Concrete Inheritance in SQLAlchemy\nDESCRIPTION: This example demonstrates how to set up relationships in a concrete inheritance scenario using SQLAlchemy. It shows a Company class with a one-to-many relationship to Employee, where Employee is the base class for concrete inheritance subclasses Manager and Engineer.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import ConcreteBase\n\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    employees = relationship(\"Employee\")\n\n\nclass Employee(ConcreteBase, Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"concrete\": True,\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n    company_id = mapped_column(ForeignKey(\"company.id\"))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Subqueries in SQLAlchemy\nDESCRIPTION: Demonstrates how to create and use subqueries with EXISTS clause in SQLAlchemy queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsubq = (\n    session.query(Keyword.id.label(\"keyword_id\"))\n    .filter(Keyword.name.in_([\"beans\", \"carrots\"]))\n    .subquery()\n)\nrecipes = session.query(Recipe).filter(\n    exists()\n    .where(Recipe.id == recipe_keywords.c.recipe_id)\n    .where(recipe_keywords.c.keyword_id == subq.c.keyword_id)\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Constraint Configuration with Naming Conventions\nDESCRIPTION: Implements a comprehensive SQLAlchemy model system with custom naming conventions for constraints, including unique, check, and primary key constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import UUID\n\nfrom sqlalchemy import CheckConstraint\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nconstraint_naming_conventions = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\n\n\nclass Base(DeclarativeBase):\n    metadata = MetaData(naming_convention=constraint_naming_conventions)\n\n\nclass MyAbstractBase(Base):\n    __abstract__ = True\n\n    @declared_attr.directive\n    def __table_args__(cls):\n        return (\n            UniqueConstraint(\"uuid\"),\n            CheckConstraint(\"x > 0 OR y < 100\", name=\"xy_chk\"),\n        )\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    uuid: Mapped[UUID]\n    x: Mapped[int]\n    y: Mapped[int]\n\n\nclass ModelAlpha(MyAbstractBase):\n    __tablename__ = \"alpha\"\n\n\nclass ModelBeta(MyAbstractBase):\n    __tablename__ = \"beta\"\n```\n\n----------------------------------------\n\nTITLE: String Containment Operators in SQLAlchemy\nDESCRIPTION: Demonstrates the use of startswith(), endswith(), and contains() methods for string containment checks in SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").startswith(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx LIKE :x_1 || '%'\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").endswith(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx LIKE '%' || :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").contains(\"word\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx LIKE '%' || :x_1 || '%'\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized SQL Query with SQLAlchemy ORM Session\nDESCRIPTION: This snippet demonstrates how to execute a parameterized SQL query using SQLAlchemy's ORM Session object, showing similarity to the Connection usage.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\nstmt = text(\"SELECT x, y FROM some_table WHERE y > :y ORDER BY x, y\")\nwith Session(engine) as session:\n    result = session.execute(stmt, {\"y\": 6})\n    for row in result:\n        print(f\"x: {row.x}  y: {row.y}\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Autocommit Engine in SQLAlchemy Session\nDESCRIPTION: Shows how to create an engine with AUTOCOMMIT isolation and use it in a specific Session. This overrides the default engine binding for that session instance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nplain_engine = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n\nautocommit_engine = plain_engine.execution_options(isolation_level=\"AUTOCOMMIT\")\n\n# will normally use plain_engine\nSession = sessionmaker(plain_engine)\n\n# make a specific Session that will use the \"autocommit\" engine\nwith Session(bind=autocommit_engine) as session:\n    # work with session\n    ...\n```\n\n----------------------------------------\n\nTITLE: Mixing in Column Properties with SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use a mixin to add a computed column property to multiple mapped classes. Uses declared_attr to properly generate the column property in the context of each class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomethingMixin:\n    x: Mapped[int]\n    y: Mapped[int]\n\n    @declared_attr\n    def x_plus_y(cls) -> Mapped[int]:\n        return column_property(cls.x + cls.y)\n\n\nclass Something(SomethingMixin, Base):\n    __tablename__ = \"something\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Mapping to Explicit Primary Key Columns in SQLAlchemy\nDESCRIPTION: This example shows how to map a table without a declared primary key by explicitly specifying the primary key columns in the mapper arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nmetadata = MetaData()\ngroup_users = Table(\n    \"group_users\",\n    metadata,\n    Column(\"user_id\", String(40), nullable=False),\n    Column(\"group_id\", String(40), nullable=False),\n    UniqueConstraint(\"user_id\", \"group_id\"),\n)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass GroupUsers(Base):\n    __table__ = group_users\n    __mapper_args__ = {\"primary_key\": [group_users.c.user_id, group_users.c.group_id]}\n```\n\n----------------------------------------\n\nTITLE: Using NOW() Function in SQLAlchemy\nDESCRIPTION: Shows the usage of the new now() function, which provides a database-agnostic way to get the current timestamp. It compiles to appropriate syntax for each supported database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfunc.now()\n```\n\n----------------------------------------\n\nTITLE: Defining Department and Employee Classes (Many to One)\nDESCRIPTION: This Python code snippet demonstrates how to define the Department and Employee classes using SQLAlchemy, mapping them to the 'department' and 'employee' tables. The 'department' attribute in the Employee class establishes a many-to-one relationship with the Department class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"class Department(Base):\n    __tablename__ = \\\"department\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n\n\nclass Employee(Base):\n    __tablename__ = \\\"employee\\\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    dep_id = Column(Integer, ForeignKey(\\\"department.id\\\"))\n    department = relationship(\\\"Department\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Validation with @validates in SQLAlchemy ORM\nDESCRIPTION: Shows how the @validates decorator now processes all members of a collection during bulk set operations. The validator receives both new and existing members, enabling proper validation and conversion of non-ORM objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    bs = relationship(\"B\")\n\n    @validates(\"bs\")\n    def convert_dict_to_b(self, key, value):\n        return B(data=value[\"data\"])\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n    data = Column(String)\n```\n\nLANGUAGE: python\nCODE:\n```\na1 = A()\na1.bs.append({\"data\": \"b1\"})\n```\n\nLANGUAGE: python\nCODE:\n```\na1 = A()\na1.bs = [{\"data\": \"b1\"}]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    # ...\n\n    @validates(\"bs\")\n    def validate_b(self, key, value):\n        assert value.data is not None\n        return value\n```\n\nLANGUAGE: python\nCODE:\n```\na1 = A()\n\nb1, b2 = B(data=\"one\"), B(data=\"two\")\na1.bs = [b1, b2]\n```\n\nLANGUAGE: python\nCODE:\n```\nb3 = B(data=\"three\")\na1.bs = [b2, b3]\n```\n\n----------------------------------------\n\nTITLE: Querying a Base Class with Single Inheritance in SQLAlchemy ORM\nDESCRIPTION: This example demonstrates querying the Employee base class with single inheritance, which returns objects of all types (Manager, Engineer, and Employee) from a single table with a simple SELECT statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(Employee).order_by(Employee.id)\n>>> for obj in session.scalars(stmt):\n...     print(f\"{obj}\")\n{execsql}BEGIN (implicit)\nSELECT employee.id, employee.name, employee.type\nFROM employee ORDER BY employee.id\n[...] ()\n{stop}Manager('Mr. Krabs')\nEngineer('SpongeBob')\nEngineer('Squidward')\n```\n\n----------------------------------------\n\nTITLE: Mapping to a Subquery in SQLAlchemy ORM\nDESCRIPTION: Shows how to map a declarative class to a complex subquery instead of a simple table in SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func, select\n\nsubq = (\n    select(\n        func.count(orders.c.id).label(\"order_count\"),\n        func.max(orders.c.price).label(\"highest_order\"),\n        orders.c.customer_id,\n    )\n    .group_by(orders.c.customer_id)\n    .subquery()\n)\n\ncustomer_select = (\n    select(customers, subq)\n    .join_from(customers, subq, customers.c.id == subq.c.customer_id)\n    .subquery()\n)\n\n\nclass Customer(Base):\n    __table__ = customer_select\n```\n\n----------------------------------------\n\nTITLE: Distinct Query with Additional Columns in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet demonstrates how to handle distinct queries with additional columns in SQLAlchemy 1.4/2.0. It explicitly selects the additional column (Address.email_address) and uses the columns method to return only the main entity object (User).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = (\n    select(User, Address.email_address)\n    .join(User.addresses)\n    .distinct()\n    .order_by(Address.email_address)\n)\n\nresult = session.execute(stmt).columns(User).all()\"\n```\n\n----------------------------------------\n\nTITLE: Join Without Aliasing Behavior in SQL\nDESCRIPTION: Depicts the rendered SQL when automatic aliasing is not applied, indicating possible database errors due to lack of disambiguation in the joins.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.id AS a_id\nFROM a JOIN b ON b.a_id = a.id JOIN b ON b.a_id = a.id\n```\n\n----------------------------------------\n\nTITLE: Late-Defined Relationship Assignment\nDESCRIPTION: Shows how to add relationships to mapped classes after initial declaration, useful for circular dependencies or modular design\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base): ...\n\nclass Child(Base): ...\n\nfrom module_a import Parent\n\n# Assign relationship after class definition\nParent.children = relationship(Child, primaryjoin=Child.parent_id == Parent.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for All Relationships\nDESCRIPTION: Applies lazy loading to all relationships in a query by using the '*' wildcard with lazyload option. This overrides any default loading strategies defined in relationship configurations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(MyClass).options(lazyload(\"*\"))\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Context Management with SQLAlchemy Session\nDESCRIPTION: This code snippet suggests the use of a context manager to explicitly control the beginning of a transaction in SQLAlchemy sessions. It simplifies transaction management and improves code readability by combining session opening and transaction control in Python applications.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nSession = sessionmaker(bind=engine)\nsession = Session()\nwith session.begin():\n    item1 = session.get(Item, 1)\n    item2 = session.get(Item, 2)\n    item1.foo = \"bar\"\n    item2.bar = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with Populate Existing\nDESCRIPTION: Shows how to use populate_existing execution option with lazy loading to ensure criteria is applied even if collection is already loaded\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = (\n    select(A)\n    .options(lazyload(A.bs.and_(B.id > 5)))\n    .execution_options(populate_existing=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Single Parent Violation Error in SQLAlchemy\nDESCRIPTION: Example showing how using the single_parent constraint causes an error when attempting to assign the same parent object to multiple children, enforcing the constraint that each parent can have only one child.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> b1 = B()\n>>> b2 = B()\n>>> a1 = A()\n>>> b1.a = a1\n>>> b2.a = a1\nsqlalchemy.exc.InvalidRequestError: Instance <A at 0x7eff44359350> is\nalready associated with an instance of <class '__main__.B'> via its\nB.a attribute, and is only allowed a single parent.\n```\n\n----------------------------------------\n\nTITLE: Mapping Typing.Literal to SQLAlchemy Enum\nDESCRIPTION: This snippet demonstrates how to map a Typing.Literal to a SQLAlchemy Enum inside a type annotation map to ensure correct handling by the ORM. It requires SQLAlchemy and Typing libraries and maps the Status Literal to a SQLAlchemy Enum, with fields defined as 'pending', 'received', and 'completed'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nimport typing\n\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nStatus = Literal[\"pending\", \"received\", \"completed\"]\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(\"pending\", \"received\", \"completed\", name=\"status_enum\"),\n    }\n```\n\n----------------------------------------\n\nTITLE: Corrected Alias Usage in Polymorphic Queries in Python\nDESCRIPTION: Demonstrates how to correctly use aliases to disambiguate SQL queries involving multiple subclasses of a single-table inheritance hierarchy, thereby avoiding implicit aliasing errors.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nasub2_alias = aliased(ASub2)\n\nprint(s.query(ASub1).join(B, ASub1.b).join(asub2_alias, B.a.of_type(asub2_alias)))\n```\n\n----------------------------------------\n\nTITLE: Negating Conditions with SQLAlchemy Not_ Function in Python\nDESCRIPTION: This code snippet shows how to use the not_ function from SQLAlchemy to invert conditions in SQL queries, effectively applying the NOT operator. The example negates a comparison and applies the NOT keyword to a boolean column, demonstrating both unary and keyword uses of NOT. The prerequisite is the SQLAlchemy library.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import not_\nprint(not_(column(\"x\") == 5))\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Boolean\nprint(not_(column(\"x\", Boolean)))\n```\n\n----------------------------------------\n\nTITLE: Result and Row Typing in SQLAlchemy 2.0\nDESCRIPTION: Example demonstrating how type information flows from SQL statements through Result objects to Row objects, and how to unpack typed values from Row objects using the tuple accessor.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    # (variable) stmt: Select[Tuple[str, int]]\n    stmt = select(str_col, int_col)\n\n    # (variable) result: Result[Tuple[str, int]]\n    result = conn.execute(stmt)\n\n    # (variable) row: Row[Tuple[str, int]] | None\n    row = result.first()\n\n    if row is not None:\n        # for typed tuple unpacking or indexed access,\n        # use row.tuple() or row.t  (this is the small typing-oriented accessor)\n        strval, intval = row.t\n\n        # (variable) strval: str\n        strval\n\n        # (variable) intval: int\n        intval\n```\n\n----------------------------------------\n\nTITLE: Defining ORM Mappings with SQLAlchemy in Python\nDESCRIPTION: This code snippet defines ORM mappings for classes A and B using SQLAlchemy, establishing relationships between them. It demonstrates the use of the `declarative_base` to create a base class and defines relationships between entities. Key dependencies include SQLAlchemy ORM components such as `Column`, `String`, `Integer`, `ForeignKey`, and `relationship`.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Integer, Column, String, ForeignKey\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    bs = relationship(\"B\")\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Custom Version Control in SQLAlchemy\nDESCRIPTION: This snippet defines a User model with a custom version identifier using UUID. It demonstrates how to set up the model with a version_uuid column and configure it as the version identifier in the mapper arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    version_uuid = mapped_column(String(32), nullable=False)\n    name = mapped_column(String(50), nullable=False)\n\n    __mapper_args__ = {\"version_id_col\": version_uuid, \"version_id_generator\": False}\n```\n\n----------------------------------------\n\nTITLE: Using Backend-Specific Types with Type Variants in SQLAlchemy\nDESCRIPTION: Shows how to use the with_variant() method to create a column that behaves differently on specific database backends. This example defines a String type that uses MySQL-specific VARCHAR with charset options when used with MySQL or MariaDB.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import Table, Column, Integer, String\nfrom sqlalchemy.dialects.mysql import VARCHAR\n\nmetadata_obj = MetaData()\n\nuser = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"user_name\", String(100), primary_key=True),\n    Column(\n        \"bio\",\n        String(255).with_variant(VARCHAR(255, charset=\"utf8\"), \"mysql\", \"mariadb\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Collection with Attribute Keys in SQLAlchemy ORM\nDESCRIPTION: Example demonstrating dictionary collection configuration using attribute_keyed_dict to map Note objects keyed by a keyword attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import attribute_keyed_dict\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"keyword\"),\n        cascade=\"all, delete-orphan\",\n    )\n\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[Optional[str]]\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```\n\n----------------------------------------\n\nTITLE: Classical Mapping Changes in SQLAlchemy 2.0\nDESCRIPTION: Shows migration from legacy mapper() function to new registry-based mapping patterns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Old style\nfrom sqlalchemy.orm import mapper\n\nmapper(SomeClass, some_table, properties={\"related\": relationship(SomeRelatedClass)})\n\n# New style\nfrom sqlalchemy.orm import registry\n\nmapper_reg = registry()\n\nmapper_reg.map_imperatively(\n    SomeClass, some_table, properties={\"related\": relationship(SomeRelatedClass)}\n)\n```\n\n----------------------------------------\n\nTITLE: Using selectin_polymorphic() for Eager Loading in SQLAlchemy Python\nDESCRIPTION: Showcases the use of selectin_polymorphic() to eagerly load subclass attributes, reducing the N+1 problem by fetching additional attributes in bulk. Involves executing additional SELECT statements. SQLAlchemy and predefined ORM mappings are prerequisites.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy.orm import selectin_polymorphic\n>>> loader_opt = selectin_polymorphic(Employee, [Manager, Engineer])\n>>> stmt = select(Employee).order_by(Employee.id).options(loader_opt)\n>>> objects = session.scalars(stmt).all()\n{execsql}BEGIN (implicit)\nSELECT employee.id, employee.name, employee.type, employee.company_id\nFROM employee ORDER BY employee.id\n[...] ()\nSELECT manager.id AS manager_id, employee.id AS employee_id,\nemployee.type AS employee_type, manager.manager_name AS manager_manager_name\nFROM employee JOIN manager ON employee.id = manager.id\nWHERE employee.id IN (?) ORDER BY employee.id\n[...] (1,)\nSELECT engineer.id AS engineer_id, employee.id AS employee_id,\nemployee.type AS employee_type, engineer.engineer_info AS engineer_engineer_info\nFROM employee JOIN engineer ON employee.id = engineer.id\nWHERE employee.id IN (?, ?) ORDER BY employee.id\n[...] (2, 3)\n{stop}>>> print(objects)\n[Manager('Mr. Krabs'), Engineer('SpongeBob'), Engineer('Squidward')]\n```\n\n----------------------------------------\n\nTITLE: Deleting All Rows Using Reflected Tables in SQLAlchemy\nDESCRIPTION: This example shows how to use reflected tables to delete all rows from all tables in a database in the correct order.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData()\nmetadata_obj.reflect(bind=someengine)\nwith someengine.begin() as conn:\n    for table in reversed(metadata_obj.sorted_tables):\n        conn.execute(table.delete())\n```\n\n----------------------------------------\n\nTITLE: Abstract Concrete Base Class with Polymorphic Loading in SQLAlchemy\nDESCRIPTION: Demonstrates using AbstractConcreteBase to create an abstract base class that supports polymorphic loading. The base class is not mapped to a table, but queries against it will return instances of concrete subclasses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import AbstractConcreteBase\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Employee(AbstractConcreteBase, Base):\n    strict_attrs = True\n\n    name = mapped_column(String(50))\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"concrete\": True,\n    }\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n        \"concrete\": True,\n    }\n\n\nBase.registry.configure()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sequence in SQLAlchemy 1.3/2.0\nDESCRIPTION: Demonstrates creating a basic sequence object and its SQL representation in SQLAlchemy 1.3 and 2.0 without explicit parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# SQLAlchemy 1.3 (and 2.0)\nfrom sqlalchemy import Sequence\nfrom sqlalchemy.schema import CreateSequence\nprint(CreateSequence(Sequence(\"my_seq\")))\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Python Property Instead of Viewonly Relationship\nDESCRIPTION: An improved example that replaces the viewonly relationship with a Python property that dynamically filters tasks from the current week. This approach handles in-Python mutations correctly and does not require database queries for filtering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str | None]\n\n    all_tasks: Mapped[list[Task]] = relationship(back_populates=\"user\")\n\n    @property\n    def current_week_tasks(self) -> list[Task]:\n        past_seven_days = datetime.datetime.now() - datetime.timedelta(days=7)\n        return [t for t in self.all_tasks if t.task_date >= past_seven_days]\n\n\nclass Task(Base):\n    __tablename__ = \"task\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_account_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    description: Mapped[str | None]\n    task_date: Mapped[datetime.datetime] = mapped_column(server_default=func.now())\n\n    user: Mapped[User] = relationship(back_populates=\"all_tasks\")\n```\n\n----------------------------------------\n\nTITLE: Default Lazy Loading of Subclass Attributes in Single Inheritance\nDESCRIPTION: This snippet demonstrates the default behavior where subclass-specific attributes (like manager_name) are not loaded initially when querying the base class, causing an additional SELECT when accessed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> mr_krabs = session.scalars(select(Employee).where(Employee.name == \"Mr. Krabs\")).one()\n{execsql}BEGIN (implicit)\nSELECT employee.id, employee.name, employee.type\nFROM employee\nWHERE employee.name = ?\n[...] ('Mr. Krabs',)\n{stop}>>> mr_krabs.manager_name\n{execsql}SELECT employee.manager_name AS employee_manager_name\nFROM employee\nWHERE employee.id = ? AND employee.type IN (?)\n[...] (1, 'manager')\n{stop}'Eugene H. Krabs'\n```\n\n----------------------------------------\n\nTITLE: Multi-table DELETE Statement\nDESCRIPTION: Example of a DELETE statement with multiple-table criteria support for PostgreSQL, MySQL and SQL Server backends.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    users.delete()\n    .where(users.c.id == addresses.c.id)\n    .where(addresses.c.email_address.startswith(\"ed%\"))\n)\nconn.execute(stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM users USING addresses\nWHERE users.id = addresses.id\nAND (addresses.email_address LIKE %(email_address_1)s || '%%')\n```\n\n----------------------------------------\n\nTITLE: Column Ordering Example with ORM Declarative Mixin in Python\nDESCRIPTION: Example demonstrating the column ordering change in SQLAlchemy 2.0 with ORM Declarative. Columns from the declared class now appear before columns from mixins and base classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    col1 = mapped_column(Integer)\n    col3 = mapped_column(Integer)\n\n\nclass Bar:\n    col2 = mapped_column(Integer)\n    col4 = mapped_column(Integer)\n\n\nclass Model(Base, Foo, Bar):\n    id = mapped_column(Integer, primary_key=True)\n    __tablename__ = \"model\"\n```\n\n----------------------------------------\n\nTITLE: Custom Array Casting for JSON/JSONB Types\nDESCRIPTION: Implementation of a custom array type that handles proper casting for JSON/JSONB array columns in PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CastingArray(ARRAY):\n    def bind_expression(self, bindvalue):\n        return sa.cast(bindvalue, self)\n```\n\n----------------------------------------\n\nTITLE: SQL output of join to target entity\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account` and `address`. The `join` method attempts to infer the ON clause based on the foreign key relationships between the involved tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Persistence in Collections After Deletion in SQLAlchemy\nDESCRIPTION: This example shows that after marking an Address object for deletion with session.delete(), it remains in the parent User's addresses collection until the session is committed and collections are expired.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/cascades.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> address = user.addresses[1]\n>>> session.delete(address)\n>>> session.flush()\n>>> address in user.addresses\nTrue\n\n>>> session.commit()\n>>> address in user.addresses\nFalse\n```\n\n----------------------------------------\n\nTITLE: SAVEPOINT Transaction Management\nDESCRIPTION: Demonstrates the use of SAVEPOINT transactions for nested transaction handling. Shows how to manage partial rollbacks while maintaining the outer transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor record in records:\n    try:\n        with session.begin_nested():\n            session.merge(record)\n    except:\n        print(\"Skipped record %s\" % record)\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Using load_only() ORM Load Option in Python\nDESCRIPTION: Demonstrates the new load_only() ORM load option introduced in SQLAlchemy 0.9. This allows specifying a series of column names to load, deferring the rest.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nload_only(\"column1\", \"column2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Association Table with Composite Primary Key\nDESCRIPTION: SQL example showing creation of a many-to-many association table with a composite primary key.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE my_association (\n  user_id INTEGER REFERENCES user(id),\n  account_id INTEGER REFERENCES account(id),\n  PRIMARY KEY (user_id, account_id)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating User with Custom Version in SQLAlchemy\nDESCRIPTION: This snippet shows how to create a new User instance with a custom version UUID, add it to the session, and commit. It then demonstrates updating the user's name and version UUID before committing again.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nu1 = User(name=\"u1\", version_uuid=uuid.uuid4())\n\nsession.add(u1)\n\nsession.commit()\n\nu1.name = \"u2\"\nu1.version_uuid = uuid.uuid4()\n\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Configuring List Collection in SQLAlchemy ORM\nDESCRIPTION: Example showing how to configure a one-to-many relationship using a list collection type with Mapped annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a list\n    children: Mapped[list[\"Child\"]] = relationship()\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```\n\n----------------------------------------\n\nTITLE: Handling Pending Objects in SQLAlchemy Session\nDESCRIPTION: Demonstrates behavior of pending objects before they are persisted to the database, showing how relationship loading works differently for non-persistent objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnew_obj = SomeClass()\nnew_obj.foo_id = 7\n\nSession.add(new_obj)\n\n# returns None but this is not a \"lazyload\", as the object is not\n# persistent in the DB yet, and the None value is not part of the\n# object's state\nassert new_obj.foo is None\n\nSession.flush()  # emits INSERT\n\nassert new_obj.foo is foo_7  # now it loads\n```\n\n----------------------------------------\n\nTITLE: Collection Replacement Behavior in SQLAlchemy ORM\nDESCRIPTION: Illustrates how previous collections are no longer mutated when replaced with a new collection. This change ensures the original collection remains intact after replacement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> a1, a2, a3 = Address(\"a1\"), Address(\"a2\"), Address(\"a3\")\n>>> user.addresses = [a1, a2]\n\n>>> previous_collection = user.addresses\n\n# replace the collection with a new one\n>>> user.addresses = [a2, a3]\n\n>>> previous_collection\n[Address('a1'), Address('a2')]\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw DBAPI Connection with Sync Engine\nDESCRIPTION: Demonstrates how to access the raw DBAPI connection from a SQLAlchemy Engine connection, including both the pool-proxied connection and the underlying DBAPI connection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(...)\nconn = engine.connect()\n\n# pep-249 style PoolProxiedConnection (historically called a \"connection fairy\")\nconnection_fairy = conn.connection\n\n# typically to run statements one would get a cursor() from this\n# object\ncursor_obj = connection_fairy.cursor()\n# ... work with cursor_obj\n\n# to bypass \"connection_fairy\", such as to set attributes on the\n# unproxied pep-249 DBAPI connection, use .dbapi_connection\nraw_dbapi_connection = connection_fairy.dbapi_connection\n\n# the same thing is available as .driver_connection (more on this\n# in the next section)\nalso_raw_dbapi_connection = connection_fairy.driver_connection\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy ORM Queries to _sql.select in SQLAlchemy with Python\nDESCRIPTION: This snippet showcases the process of migrating from legacy _orm.Query patterns to the new _sql.select approach in SQLAlchemy. It focuses on ensuring compatibility with version 2.0 by demonstrating equivalent operations such as filtering, joining, and ordering on ORM entities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsession = Session(engine)\n\nuser = session.execute(select(User).filter_by(name=\"some user\")).scalar_one()\n\nuser = (\n    session.execute(select(User).filter_by(name=\"some user\").limit(1)).scalars().first()\n)\n\nuser = session.get(User, 5)\n\nfor user in session.execute(\n    select(User).join(User.addresses).filter(Address.email == \"some@email.case\")\n).scalars():\n    ...\n\nusers = (\n    session.execute(select(User).options(joinedload(User.addresses)).order_by(User.id))\n    .unique()\n    .all()\n)\n\nusers = (\n    session.execute(select(User).from_statement(text(\"select * from users\")))\n    .scalars()\n    .all()\n)\n```\n\n----------------------------------------\n\nTITLE: IN Operator with List of Values in SQLAlchemy\nDESCRIPTION: Demonstrates using the IN operator in SQLAlchemy with a list of values, showing both the SQL compilation and actual execution with bound parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(column(\"x\").in_([1, 2, 3]))\n{printsql}x IN (__[POSTCOMPILE_x_1])\n\n>>> stmt = select(User.id).where(User.id.in_([1, 2, 3]))\n>>> result = conn.execute(stmt)\n{execsql}SELECT user_account.id\nFROM user_account\nWHERE user_account.id IN (?, ?, ?)\n[...] (1, 2, 3){stop}\n```\n\n----------------------------------------\n\nTITLE: Using Query Update with Session Synchronization\nDESCRIPTION: Example of using the update() method on a SQLAlchemy Query object with fetch synchronization strategy, demonstrating a scenario where the Mapper is now properly passed to Session.get_bind().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User).filter(User.id == 15).update(\n    {\"name\": \"foob\"}, synchronize_session=\"fetch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Session Strong Reference Usage Examples\nDESCRIPTION: Examples showing how to apply strong referencing behavior to individual Sessions and sessionmaker instances.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\nmy_session = Session()\nstrong_reference_session(my_session)\n\nfrom sqlalchemy.orm import sessionmaker\n\nmaker = sessionmaker()\nstrong_reference_session(maker)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Engine with Custom Connection Arguments in Python\nDESCRIPTION: Demonstrates how to create a SQLAlchemy Engine for MySQL with custom connection arguments, either using the connect_args parameter or by including them in the connection URL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ne = create_engine(\n    \"mysql+mysqldb://scott:tiger@localhost/test\", connect_args={\"encoding\": \"utf8\"}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ne = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test?encoding=utf8\")\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Rollback After Connection Invalidation in Python\nDESCRIPTION: Demonstrates the need to explicitly rollback a transaction when a database connection is invalidated. This is necessary to remove the invalid transaction from the Connection object before proceeding.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql://user:pass@host/dbname\")\nconn = engine.connect()\n\ntry:\n    # Some database operations\n    conn.execute(some_sql)\nexcept Exception:\n    conn.invalidate()\n    # Must explicitly rollback the transaction\n    conn.rollback()\n\n# Now the connection can be used again\nconn.execute(some_other_sql)\n```\n\n----------------------------------------\n\nTITLE: Importing Oracle Data Types in SQLAlchemy\nDESCRIPTION: Example showing how to import Oracle-specific data types from SQLAlchemy's Oracle dialect. These types include standard SQL types and Oracle-specific types that can be used when defining database schemas.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/oracle.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.oracle import (\n    BFILE,\n    BLOB,\n    CHAR,\n    CLOB,\n    DATE,\n    DOUBLE_PRECISION,\n    FLOAT,\n    INTERVAL,\n    LONG,\n    NCLOB,\n    NCHAR,\n    NUMBER,\n    NVARCHAR,\n    NVARCHAR2,\n    RAW,\n    TIMESTAMP,\n    VARCHAR,\n    VARCHAR2,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy with asyncio Support\nDESCRIPTION: This snippet provides the command to install SQLAlchemy with asyncio support, ensuring that the 'greenlet' library is also installed as a dependency, via setuptools extras. This is crucial for platforms lacking a pre-built wheel file for 'greenlet'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install sqlalchemy[asyncio]\n```\n\n----------------------------------------\n\nTITLE: Implementing Manager Class with Concrete Inheritance in SQLAlchemy ORM\nDESCRIPTION: Defines a Manager class using SQLAlchemy ORM with concrete inheritance. The class establishes its own table with required columns and a relationship to Company. The __mapper_args__ specifies a polymorphic identity and sets concrete=True to implement concrete table inheritance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmanager_data = mapped_column(String(40))\ncompany_id = mapped_column(ForeignKey(\"company.id\"))\ncompany = relationship(\"Company\", back_populates=\"employees\")\n\n__mapper_args__ = {\n    \"polymorphic_identity\": \"manager\",\n    \"concrete\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Referential Relationships in Python with SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to define a self-referential relationship using SQLAlchemy ORM, specifically for a Folder class that references itself as a parent-child hierarchy. This snippet showcases the new ability to handle relationships where a column points to itself within a composite foreign key.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Folder(Base):\n    __tablename__ = \"folder\"\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"account_id\", \"parent_id\"], [\"folder.account_id\", \"folder.folder_id\"]\n        ),\n    )\n\n    account_id = Column(Integer, primary_key=True)\n    folder_id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer)\n    name = Column(String)\n\n    parent_folder = relationship(\n        \"Folder\", backref=\"child_folders\", remote_side=[account_id, folder_id]\n    )\n```\n\n----------------------------------------\n\nTITLE: Server-Side Version Counter with PostgreSQL xmin\nDESCRIPTION: Demonstrates how to utilize PostgreSQL's xmin system column as a server-side version counter, configured to automatically update on each transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/versioning.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import FetchedValue\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50), nullable=False)\n    xmin = mapped_column(\"xmin\", String, system=True, server_default=FetchedValue())\n\n    __mapper_args__ = {\"version_id_col\": xmin, \"version_id_generator\": False}\n```\n\n----------------------------------------\n\nTITLE: Using Python Properties as Descriptors in SQLAlchemy\nDESCRIPTION: This snippet shows how to use Python properties as descriptors to control attribute access and modification. It creates a plain descriptor that reads/writes from a mapped attribute with a different name. This provides more control over attribute behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass EmailAddress(Base):\n    __tablename__ = \"email_address\"\n\n    id = mapped_column(Integer, primary_key=True)\n\n    # name the attribute with an underscore,\n    # different from the column name\n    _email = mapped_column(\"email\", String)\n\n    # then create an \".email\" attribute\n    # to get/set \"._email\"\n    @property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, email):\n        self._email = email\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Expression Typing with Column Objects in SQLAlchemy 2.0\nDESCRIPTION: Examples of basic SQL expression typing in SQLAlchemy 2.0, showing how column expressions are typed directly to Python types like str and int, with comments indicating what typing tools would display.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# (variable) str_col: ColumnClause[str]\nstr_col = column(\"a\", String)\n\n# (variable) int_col: ColumnClause[int]\nint_col = column(\"a\", Integer)\n\n# (variable) expr1: ColumnElement[str]\nexpr1 = str_col + \"x\"\n\n# (variable) expr2: ColumnElement[int]\nexpr2 = int_col + 10\n\n# (variable) expr3: ColumnElement[bool]\nexpr3 = int_col == 15\n```\n\n----------------------------------------\n\nTITLE: Examining Object State in SQLAlchemy ORM (Python)\nDESCRIPTION: Shows how to inspect the internal state of an ORM object after it has been refreshed. This snippet demonstrates that the full database row is populated into the object's __dict__ after a refresh operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> sandy.__dict__  # doctest: +SKIP\n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x...>,\n 'id': 2, 'name': 'sandy', 'fullname': 'Sandy Cheeks'}\n```\n\n----------------------------------------\n\nTITLE: Joined Table Inheritance Update with Subquery\nDESCRIPTION: Demonstrates updating a joined-table inheritance mapping using a subquery to reference the base table\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = (\n...     update(Manager)\n...     .where(\n...         Manager.id\n...         == select(Employee.id).where(Employee.name == \"sandy\").scalar_subquery()\n...     )\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Using ILIKE Operator in SQLAlchemy\nDESCRIPTION: Demonstrates the new ilike() operator for case-insensitive LIKE comparisons. It compiles to ILIKE on PostgreSQL and lower(x) LIKE lower(y) on other databases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncolumn.ilike('value')\n```\n\n----------------------------------------\n\nTITLE: Using Event-Driven Expiration with Direct Collection Modification\nDESCRIPTION: Shows how event listeners automatically expire the derived 'current_week_tasks' collection when an item is appended to the 'all_tasks' collection. This ensures the derived data is recalculated when accessed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> with Session(e) as sess:\n...     u1 = sess.scalar(select(User).where(User.id == 1))\n...     u1.all_tasks.append(Task(task_date=datetime.datetime.now()))\n...     print(u1.current_week_tasks)\n[<__main__.Task object at 0x7f66d093ccb0>, <__main__.Task object at 0x7f66d093cce0>]\n```\n\n----------------------------------------\n\nTITLE: Adding column_property Post-Class Definition\nDESCRIPTION: This snippet describes how to assign a column_property to an already defined Declarative mapped class, demonstrating dynamic property addition via SQLAlchemy's ORM system.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# only works if a declarative base class is in use\nUser.address_count = column_property(\n    select(func.count(Address.id)).where(Address.user_id == User.id).scalar_subquery()\n)\n```\n\n----------------------------------------\n\nTITLE: Timestamp Mixin with Global Criteria\nDESCRIPTION: Demonstrates implementing a timestamp mixin class and applying global criteria to filter entities based on timestamp values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nclass HasTimestamp:\n    timestamp = mapped_column(DateTime, default=datetime.datetime.now)\n\nclass SomeEntity(HasTimestamp, Base):\n    __tablename__ = \"some_entity\"\n    id = mapped_column(Integer, primary_key=True)\n\nclass SomeOtherEntity(HasTimestamp, Base):\n    __tablename__ = \"some_entity\"\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Joins with User and Address with SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to add on the `User.addresses` relationship to our chain of joins. We can continue to add other elements to join FROM the ``User`` entity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(User.orders).join(Order.items).join(User.addresses)\n```\n\n----------------------------------------\n\nTITLE: Reflecting Database Tables in SQLAlchemy Python\nDESCRIPTION: Demonstrates how to use MetaData to reflect all tables from a database without declaring them in advance. This feature allows for dynamic schema introspection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nMetaData(engine, reflect=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nmetadata.reflect()\n```\n\n----------------------------------------\n\nTITLE: Point Class Definition with Comparison Methods in Python\nDESCRIPTION: Defines a Point class with x and y attributes, along with methods for equality, inequality, and string representation. These methods are crucial for comparing Point objects within the ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n        def __composite_values__(self):\n            return self.x, self.y\n\n        def __repr__(self):\n            return f\"Point(x={self.x!r}, y={self.y!r})\"\n\n        def __eq__(self, other):\n            return isinstance(other, Point) and other.x == self.x and other.y == self.y\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n```\n\n----------------------------------------\n\nTITLE: Invalid Column Property Usage Example\nDESCRIPTION: Demonstrates incorrect and correct usage of deferred column properties in class definitions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Bar(Base):\n    __tablename__ = \"bar\"\n\n    id = Column(Integer, primary_key=True)\n    cprop = deferred(Column(Integer))\n\n    __table_args__ = (CheckConstraint(cprop.expression > 5),)\n```\n\n----------------------------------------\n\nTITLE: Check Constraint Naming Convention\nDESCRIPTION: Demonstrates how to configure naming conventions for CHECK constraints, including both table-level and column-level constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData(\n    naming_convention={\"ck\": \"ck_%(table_name)s_%(constraint_name)s\"}\n)\n\nTable(\n    \"foo\",\n    metadata_obj,\n    Column(\"value\", Integer),\n    CheckConstraint(\"value > 5\", name=\"value_gt_5\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using overlaps Parameter for Intentional Relationship Overlaps in SQLAlchemy\nDESCRIPTION: Example showing how to use the overlaps parameter to silence warnings for intentionally overlapping relationships that have custom conditions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n    c1 = relationship(\n        \"Child\",\n        primaryjoin=\"and_(Parent.id == Child.parent_id, Child.flag == 0)\",\n        backref=\"parent\",\n        overlaps=\"c2, parent\",\n    )\n    c2 = relationship(\n        \"Child\",\n        primaryjoin=\"and_(Parent.id == Child.parent_id, Child.flag == 1)\",\n        overlaps=\"c1, parent\",\n    )\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(ForeignKey(\"parent.id\"))\n\n    flag = Column(Integer)\n```\n\n----------------------------------------\n\nTITLE: ORM UPDATE with Bundled Execution Options in SQLAlchemy\nDESCRIPTION: Example of bundling execution options with an UPDATE statement using the execution_options() method. This allows specifying options like synchronization strategy directly on the statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nstmt = (\n    update(User)\n    .where(User.name == \"squidward\")\n    .values(fullname=\"Squidward Tentacles\")\n    .execution_options(synchronize_session=False)\n)\nsession.execute(stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user_account SET fullname=? WHERE user_account.name = ?\n[...] ('Squidward Tentacles', 'squidward')\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Column Property Mapping in SQLAlchemy ORM\nDESCRIPTION: Shows how to use column_property with PEP 484 typing to provide type-safe attribute references when mapping existing table columns. This approach ensures proper type annotations for static type checkers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import Mapped\n\n\nclass User(Base):\n    __table__ = user_table\n\n    id: Mapped[int] = column_property(user_table.c.user_id)\n    name: Mapped[str] = column_property(user_table.c.user_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Property for Query Functionality in SQLAlchemy\nDESCRIPTION: A code example showing how to create a custom Python property that uses query functionality instead of a relationship. This approach allows for complex filtering logic that may not be directly persistable through regular relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n\n    @property\n    def addresses(self):\n        return object_session(self).query(Address).with_parent(self).filter(...).all()\n```\n\n----------------------------------------\n\nTITLE: Missing back_populates Relationship Configuration in SQLAlchemy\nDESCRIPTION: Example showing a relationship configuration that will generate warnings due to conflicting relationships that write to the same columns without being properly coordinated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(ForeignKey(\"parent.id\"))\n    parent = relationship(\"Parent\")\n```\n\n----------------------------------------\n\nTITLE: Query Example with Abstract Concrete Base Class in SQLAlchemy\nDESCRIPTION: Shows a query example using the Employee abstract concrete base class. The query is constructed in terms of the base class but produces a UNION ALL query that retrieves data from all concrete subclass tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_17\n\nLANGUAGE: pycon+sql\nCODE:\n```\n>>> stmt = select(Employee).where(Employee.name == \"n1\")\n>>> print(stmt)\n{printsql}SELECT pjoin.id, pjoin.name, pjoin.type, pjoin.manager_data, pjoin.engineer_info\nFROM (\n  SELECT engineer.id AS id, engineer.name AS name, engineer.engineer_info AS engineer_info,\n  CAST(NULL AS VARCHAR(40)) AS manager_data, 'engineer' AS type\n  FROM engineer\n  UNION ALL\n  SELECT manager.id AS id, manager.name AS name, CAST(NULL AS VARCHAR(40)) AS engineer_info,\n  manager.manager_data AS manager_data, 'manager' AS type\n  FROM manager\n) AS pjoin\nWHERE pjoin.name = :name_1\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Levels in SQLAlchemy Python\nDESCRIPTION: This code demonstrates configuring transaction isolation levels such as 'REPEATABLE READ' and 'AUTOCOMMIT' for SQLAlchemy engines. Isolation levels are essential for controlling how transactions interact with each other in concurrent environments in Python database applications.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\neng = create_engine(\n    \"postgresql+psycopg2://scott:tiger@localhost/test\",\n    isolation_level=\"REPEATABLE READ\",\n)\n\nSession = sessionmaker(eng)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\neng = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n\nautocommit_engine = eng.execution_options(isolation_level=\"AUTOCOMMIT\")\n\ntransactional_session = sessionmaker(eng)\nautocommit_session = sessionmaker(autocommit_engine)\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Columns with Select in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet illustrates how to select from multiple entities with overlapping column names in SQLAlchemy 1.4/2.0. It creates a subquery and aliases for User and Address, demonstrating that even if both have an 'id' column, they can be disambiguated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n\"# 1.4 / 2.0 code\n\nsubq = select(User, Address).join(User.addresses).subquery()\n\nua = aliased(User, subq)\naa = aliased(Address, subq)\n\nstmt = select(ua, aa).order_by(aa.email_address)\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Using .MapperEvents.before_update to Insert into Related Table in Python\nDESCRIPTION: This snippet shows how to listen for before_update events in SQLAlchemy to insert a row into a related table if it does not exist. It demonstrates the event-driven approach of SQLAlchemy for managing complex relationships during updates.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/nonstandard_mappings.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\n\n@event.listens_for(PtoQ, \"before_update\")\ndef receive_before_update(mapper, connection, target):\n    if target.some_required_attr_on_q is None:\n        connection.execute(q_table.insert(), {\"id\": target.id})\n```\n\n----------------------------------------\n\nTITLE: Chaining Loader Options in SQLAlchemy ORM Queries\nDESCRIPTION: Shows how to use the new Load object to chain loader options like joinedload and subqueryload for specifying options down a path in SQLAlchemy 0.9 ORM queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\njoinedload(\"foo\").subqueryload(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session Transaction Compatibility with Nested Savepoints in Python\nDESCRIPTION: Example showing how a Session can be bound to a Connection with an active savepoint. The Session can be committed without affecting the outer transaction or savepoint, allowing for proper nested transaction control.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"...\")\n\n# setup outer connection with a transaction and a SAVEPOINT\nconn = engine.connect()\ntrans = conn.begin()\nnested = conn.begin_nested()\n\n# bind a Session to that connection and operate upon it, including\n# a commit\nsession = Session(conn)\nsession.connection()\nsession.commit()\nsession.close()\n\n# assert both SAVEPOINT and transaction remain active\nassert nested.is_active\nnested.rollback()\ntrans.rollback()\n```\n\n----------------------------------------\n\nTITLE: Declarative Base with Registry\nDESCRIPTION: Demonstrates creating a Declarative Base class with an explicit registry instance assigned.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_styles.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n# declarative base class\nclass Base(DeclarativeBase):\n    registry = reg\n```\n\n----------------------------------------\n\nTITLE: Using IN Expressions with Baked Queries in Python\nDESCRIPTION: Demonstrates how to use the 'expanding' parameter with bindparam to safely use IN expressions in baked queries, allowing the list of elements to be rendered at execution time rather than compilation time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbakery = baked.bakery()\n\nbaked_query = bakery(lambda session: session.query(User))\nbaked_query += lambda q: q.filter(User.name.in_(bindparam(\"username\", expanding=True)))\n\nresult = baked_query.with_session(session).params(username=[\"ed\", \"fred\"]).all()\n```\n\n----------------------------------------\n\nTITLE: Enabling Two-Phase Commit in SQLAlchemy with Python Sessions\nDESCRIPTION: The snippet outlines setting up two-phase commit transactions using SQLAlchemy's sessionmaker with PostgreSQL. This process involves managing interrelated transactions across multiple databases to maintain atomicity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nengine1 = create_engine(\"postgresql+psycopg2://db1\")\nengine2 = create_engine(\"postgresql+psycopg2://db2\")\n\nSession = sessionmaker(twophase=True)\n\n# bind User operations to engine 1, Account operations to engine 2\nSession.configure(binds={User: engine1, Account: engine2})\n\nsession = Session()\n\n# .... work with accounts and users\n\n# commit.  session will issue a flush to all DBs, and a prepare step to all DBs,\n# before committing both transactions\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Using __declare_first__ Hook in SQLAlchemy ORM\nDESCRIPTION: Shows how to implement the __declare_first__ class method hook that gets called before mappings are configured. This method is triggered by the MapperEvents.before_configured event.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(Base):\n    @classmethod\n    def __declare_first__(cls):\n        \"\"\" \"\"\"\n        # do something before mappings are configured\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL INSERT Statement with RETURNING Clause for Server Defaults\nDESCRIPTION: Example of the SQL generated by SQLAlchemy when inserting into a table with server-generated default values on PostgreSQL. The RETURNING clause includes all columns with server defaults to fetch their values in a single operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO my_table DEFAULT VALUES RETURNING my_table.id, my_table.timestamp, my_table.special_identifier\n```\n\n----------------------------------------\n\nTITLE: ORM Events on async_sessionmaker (Python)\nDESCRIPTION: This snippet demonstrates how to attach event listeners to an async_sessionmaker instance. It uses a sync_session_class which is a sessionmaker, and then assigns it to async_sessionmaker. The example adds a before_commit listener to the sync_maker.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    import asyncio\n\n    from sqlalchemy import event\n    from sqlalchemy.ext.asyncio import async_sessionmaker\n    from sqlalchemy.orm import sessionmaker\n\n    sync_maker = sessionmaker()\n    maker = async_sessionmaker(sync_session_class=sync_maker)\n\n\n    @event.listens_for(sync_maker, \"before_commit\")\n    def before_commit(session):\n        print(\"before commit\")\n\n\n    async def main():\n        async_session = maker()\n\n        await async_session.commit()\n\n\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Profiling Bulk Insert Performance in SQLAlchemy Python\nDESCRIPTION: This snippet demonstrates the use of the SQLAlchemy ORM to batch insert rows into a database and flush the changes. A session from the SQLAlchemy ORM is used to add instances of the Customer object. Each instance represents a row to be inserted. The `flush` method is used for bulk inserts, which benefits performance especially with database drivers supporting RETURNING.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n@Profiler.profile\ndef test_flush_no_pk(n):\n    \"\"\"INSERT statements via the ORM (batched with RETURNING if available),\n    fetching generated row id\"\"\"\n    session = Session(bind=engine)\n    for chunk in range(0, n, 1000):\n        session.add_all(\n            [\n                Customer(\n                    name=\"customer name %d\" % i,\n                    description=\"customer description %d\" % i,\n                )\n                for i in range(chunk, chunk + 1000)\n            ]\n        )\n        session.flush()\n    session.commit()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Session Cleanup\nDESCRIPTION: Cleanup code for closing SQLAlchemy session and connection objects with rollback.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> session.close()\n>>> conn.close()\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Creating Engine with Echo and Pool Logging Flags\nDESCRIPTION: Shows how to create a SQLAlchemy engine with echo and pool logging enabled, which provides immediate logging to stdout. Demonstrates logging of connection pool and SQL query activities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine, text\n>>> e = create_engine(\"sqlite://\", echo=True, echo_pool=\"debug\")\n>>> with e.connect() as conn:\n...     print(conn.scalar(text(\"select 'hi'\")))\n```\n\n----------------------------------------\n\nTITLE: Handling orphan objects in SQLAlchemy ORM in Python\nDESCRIPTION: Changes ORM's behavior regarding orphaned objects. Previously, pending objects were only expunged when disassociated from all parents; now they are removed as soon as disassociated from any parent. The script provides an example demonstrating these changes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import relationship, backref\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(64))\n\nclass UserKeyword(Base):\n    __tablename__ = \"user_keyword\"\n    user_id = Column(Integer, ForeignKey(\"user.id\"), primary_key=True)\n    keyword_id = Column(Integer, ForeignKey(\"keyword.id\"), primary_key=True)\n    user = relationship(\n        User, backref=backref(\"user_keywords\", cascade=\"all, delete-orphan\")\n    )\n    keyword = relationship(\n        \"Keyword\", backref=backref(\"user_keywords\", cascade=\"all, delete-orphan\")\n    )\n    # uncomment this to enable the old behavior\n    # __mapper_args__ = {\"legacy_is_orphan\": True}\n\nclass Keyword(Base):\n    __tablename__ = \"keyword\"\n    id = Column(Integer, primary_key=True)\n    keyword = Column(\"keyword\", String(64))\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import Session\n\ne = create_engine(\"postgresql://scott:tiger@localhost/test\", echo=True)\nBase.metadata.drop_all(e)\nBase.metadata.create_all(e)\nsession = Session(e)\nu1 = User(name=\"u1\")\nk1 = Keyword(keyword=\"k1\")\nsession.add_all([u1, k1])\nuk1 = UserKeyword(keyword=k1, user=u1)\n# previously, if session.flush() were called here,\n# this operation would succeed, but if session.flush()\n# were not called here, the operation fails with an\n# integrity error.\n# session.flush()\ndel u1.user_keywords[0]\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining datetime and date columns with specific formats in SQLAlchemy Python\nDESCRIPTION: Defines custom column types using SQLAlchemy's sqlite.DATETIME and sqlite.DATE, specifying custom storage formats and regular expressions for parsing. These definitions are part of a database schema, requiring SQLAlchemy as a dependency.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nColumn(\"sometimestamp\", sqlite.DATETIME(truncate_microseconds=True))\nColumn(\n    \"sometimestamp\",\n    sqlite.DATETIME(\n        storage_format=(\n            \"%(year)04d%(month)02d%(day)02d\"\n            \"%(hour)02d%(minute)02d%(second)02d%(microsecond)06d\"\n        ),\n        regexp=\"(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{6})\",\n    ),\n)\nColumn(\n    \"somedate\",\n    sqlite.DATE(\n        storage_format=\"%(month)02d/%(day)02d/%(year)04d\",\n        regexp=\"(?P<month>\\d+)/(?P<day>\\d+)/(?P<year>\\d+)\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Column Property Usage in SQLAlchemy\nDESCRIPTION: Shows how to define computed columns using column_property() for file path generation and querying.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilename = column_property(name + \".\" + extension)\npath = column_property(\"C:/\" + filename.expression)\n\nstmt = select(File.path).where(File.filename == \"foo.txt\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Modern Context Manager Connection Pattern\nDESCRIPTION: Example showing the current recommended connection pattern using Python context managers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwith engine.begin() as conn:\n    conn.execute(table.insert(), parameters)\n    result = conn.execute(table.select())\n\n    conn.execute(table.update(), parameters)\n```\n\n----------------------------------------\n\nTITLE: Joined Table Inheritance Update - Single Table\nDESCRIPTION: Shows how to update a joined-table inheritance subclass by referring to the sub-table alone\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == 1)\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Creating Project and Employee instances and associating them\nDESCRIPTION: This Python snippet illustrates how to create instances of the Project and Employee classes and establish a many-to-many relationship between them.  The `extend` method is used to add multiple employee objects to a project's `employees` collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"proj = Project(name=\\\"Client A\\\")\n\nemp1 = Employee(name=\\\"emp1\\\")\nemp2 = Employee(name=\\\"emp2\\\")\n\nproj.employees.extend([emp1, emp2])\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Column Naming in SQLAlchemy ORM Declarative Mapping\nDESCRIPTION: Shows how to specify explicit column names different from attribute names in a declarative mapped class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(\"user_id\", primary_key=True)\n    name: Mapped[str] = mapped_column(\"user_name\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loader Relations in SQLAlchemy\nDESCRIPTION: Shows how to use dynamic_loader for relations that return live Query objects for read operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmapper(\n    Foo,\n    foo_table,\n    properties={\n        \"bars\": dynamic_loader(\n            Bar,\n            backref=\"foo\",\n            # <other relation() opts>\n        )\n    },\n)\n\nsession = create_session(autoflush=True)\nfoo = session.query(Foo).first()\n\nfoo.bars.append(Bar(name=\"lala\"))\n\nfor bar in foo.bars.filter(Bar.name == \"lala\"):\n    print(bar)\n\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Customizing Connection Parameters with Event Listener\nDESCRIPTION: Example of using the do_connect event to modify connection parameters before connecting.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    cparams[\"connection_factory\"] = MyConnectionFactory\n```\n\n----------------------------------------\n\nTITLE: Implementing UNION Operations with ORM Entities in SQLAlchemy\nDESCRIPTION: Shows how to perform UNION and other set operations with ORM entities using both direct from_statement() and subquery approaches.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import union_all\nu = union_all(\n    select(User).where(User.id < 2), select(User).where(User.id == 3)\n).order_by(User.id)\nstmt = select(User).from_statement(u)\n\n# Using subquery approach\nsubq = union_all(\n    select(User).where(User.id < 2), select(User).where(User.id == 3)\n).subquery()\nuser_alias = aliased(User, subq)\nstmt = select(user_alias).order_by(user_alias.id)\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy synonym_for Decorator with Declarative Syntax\nDESCRIPTION: Shows a more concise way to create synonyms using the synonym_for decorator in combination with @property in SQLAlchemy's declarative syntax.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import synonym_for\n\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @synonym_for(\"status\")\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n```\n\n----------------------------------------\n\nTITLE: Session Iterator Example in SQLAlchemy\nDESCRIPTION: Demonstrates how to iterate over all objects in a SQLAlchemy session and check for object presence using contains syntax.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor obj in session:\n    print(obj)\n\nif obj in session:\n    print(\"Object is present\")\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Append Events in SQLAlchemy\nDESCRIPTION: This example shows how to validate items added to a collection using the `validates` decorator. The validator receives the key and the address being appended. The validation function can raise an exception if the address is invalid.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import validates\n\n\nclass User(Base):\n    # ...\n\n    addresses = relationship(\"Address\")\n\n    @validates(\"addresses\")\n    def validate_address(self, key, address):\n        if \"@\" not in address.email:\n            raise ValueError(\"failed simplified email validation\")\n        return address\n```\n\n----------------------------------------\n\nTITLE: Scalar Relationships with Association Proxies\nDESCRIPTION: Demonstrates the use of association proxies with scalar relationships, accessing attributes of related objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.associationproxy import AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Recipe(Base):\n    __tablename__ = \"recipe\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(64))\n\n    steps: Mapped[List[Step]] = relationship(back_populates=\"recipe\")\n    step_descriptions: AssociationProxy[List[str]] = association_proxy(\n        \"steps\", \"description\"\n    )\n\n\nclass Step(Base):\n    __tablename__ = \"step\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    description: Mapped[str]\n    recipe_id: Mapped[int] = mapped_column(ForeignKey(\"recipe.id\"))\n    recipe: Mapped[Recipe] = relationship(back_populates=\"steps\")\n\n    recipe_name: AssociationProxy[str] = association_proxy(\"recipe\", \"name\")\n\n    def __init__(self, description: str) -> None:\n        self.description = description\n\n\nmy_snack = Recipe(\n    name=\"afternoon snack\",\n    step_descriptions=[\n        \"slice bread\",\n        \"spread peanut butted\",\n        \"eat sandwich\",\n    ],\n)\n\n>>> for i, step in enumerate(my_snack.steps, 1):\n...     print(f\"Step {i} of {step.recipe_name!r}: {step.description}\")\nStep 1 of 'afternoon snack': slice bread\nStep 2 of 'afternoon snack': spread peanut butted\nStep 3 of 'afternoon snack': eat sandwich\n```\n\n----------------------------------------\n\nTITLE: Problematic Subqueryload with LIMIT\nDESCRIPTION: Demonstrates potential issues when using LIMIT without ORDER BY in subqueryload operations, which can result in mismatched data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nuser = session.scalars(\n    select(User).options(subqueryload(User.addresses)).limit(1)\n).first()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.id AS users_id\nFROM users\n LIMIT 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT addresses.id AS addresses_id,\n       addresses.user_id AS addresses_user_id,\n       anon_1.users_id AS anon_1_users_id\nFROM (SELECT users.id AS users_id FROM users LIMIT 1) AS anon_1\nJOIN addresses ON anon_1.users_id = addresses.user_id\nORDER BY anon_1.users_id\n```\n\n----------------------------------------\n\nTITLE: Assigning SQL Expressions to Primary Key Attributes in ORM Flush\nDESCRIPTION: SQL expressions can now be assigned to primary key attributes for ORM flush operations. The expression will be evaluated and returned using RETURNING, or cursor.lastrowid for pysqlite.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nobj = MyClass()\nobj.id = sql_expression\nsession.add(obj)\nsession.flush()\n```\n\n----------------------------------------\n\nTITLE: Using EXISTS Subqueries with has() Method in SQLAlchemy\nDESCRIPTION: Demonstrates using the has() method to create EXISTS subqueries for many-to-one relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nstmt = select(Address.email_address).where(Address.user.has(User.name == \"sandy\"))\n```\n\n----------------------------------------\n\nTITLE: SQL output of join to target with ON clause\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account` and `address` with an explicit ON clause.  The expression specifies how `user_account` and `address` should be joined based on `user_account.id` and `address.user_id`.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n{printsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account JOIN address ON user_account.id = address.user_id\n```\n\n----------------------------------------\n\nTITLE: Tracking Transient to Pending State Transition in SQLAlchemy\nDESCRIPTION: Captures the event when a transient object becomes pending by being added to a SQLAlchemy session. Provides logging of object state change.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(sessionmaker, \"transient_to_pending\")\ndef intercept_transient_to_pending(session, object_):\n    print(\"transient to pending: %s\" % object_)\n```\n\n----------------------------------------\n\nTITLE: URL Parsing with Database Name Escaping\nDESCRIPTION: Demonstrates the new URL parsing behavior that handles escaped characters in database names\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import make_url\n>>> u = make_url(\"driver://user:pass@host/database%3Fname\")\n>>> u.database\n'database?name'\n\n>>> from sqlalchemy import URL\n>>> u = URL.create(\"driver\", database=\"a?b=c\")\n>>> str(u)\n'driver:///a%3Fb%3Dc'\n\n>>> make_url(str(u))\ndriver:///a%3Fb%3Dc\n>>> make_url(str(u)).database == u.database\nTrue\n```\n\n----------------------------------------\n\nTITLE: Preparing DeferredReflection Classes with Engine in SQLAlchemy\nDESCRIPTION: Demonstrates how to finalize deferred reflection by calling the prepare() method with a database engine. This completes the mapping process for classes using the DeferredReflection mixin.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/my_existing_database\")\nReflected.prepare(engine)\n```\n\n----------------------------------------\n\nTITLE: SQL Subquery Examples\nDESCRIPTION: Demonstrates two types of subqueries: a correlated subquery in the columns clause and a scalar subquery in the WHERE clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, (SELECT name FROM address WHERE address.user_id=user.id)\nFROM user\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM user\n```\n\n----------------------------------------\n\nTITLE: Using with_variant() Method for Database-Specific Type Behaviors\nDESCRIPTION: Demonstrates the use of with_variant() to apply database-specific type behaviors, now returning the original type instance for better type checking compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom sqlalchemy import String\nfrom sqlalchemy.dialects.mysql import VARCHAR\n\ntype_ = String(255).with_variant(VARCHAR(255), \"mysql\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting DBAPI Connection Arguments\nDESCRIPTION: Example showing how to inspect the exact arguments that will be passed to the DBAPI connect() function for a given URL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     \"mysql+pymysql://some_user:some_pass@some_host/test?charset=utf8mb4\"\n... )\n>>> args, kwargs = engine.dialect.create_connect_args(engine.url)\n>>> args, kwargs\n([], {'host': 'some_host', 'database': 'test', 'user': 'some_user', 'password': 'some_pass', 'charset': 'utf8mb4', 'client_flag': 2})\n```\n\n----------------------------------------\n\nTITLE: Using ANY and ALL Operators with PostgreSQL Arrays in SQLAlchemy\nDESCRIPTION: Added any() and all() methods to the PostgreSQL ARRAY type comparator, as well as standalone expression constructs for use with PostgreSQL array columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npostgresql.ARRAY.Comparator.any()\npostgresql.ARRAY.Comparator.all()\n```\n\n----------------------------------------\n\nTITLE: Using Window Functions in SQLAlchemy\nDESCRIPTION: Demonstrates how to use window functions in SQLAlchemy, specifically showing an average salary calculation partitioned by department.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import table, column, select, func\n\nempsalary = table(\"empsalary\", column(\"depname\"), column(\"empno\"), column(\"salary\"))\n\ns = select(\n    [\n        empsalary,\n        func.avg(empsalary.c.salary)\n        .over(partition_by=empsalary.c.depname)\n        .label(\"avg\"),\n    ]\n)\n\nprint(s)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Dataclass with Annotated Type\nDESCRIPTION: Shows how to use Annotated types with SQLAlchemy ORM dataclasses. Demonstrates that dataclass-specific arguments like 'init' must be used directly with mapped_column, not within Annotated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nintpk = Annotated[int, mapped_column(primary_key=True)]\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    # init=False and other pep-681 arguments must be inline\n    id: Mapped[intpk] = mapped_column(init=False)\n\n\nu1 = User()\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLAlchemy Declarative Base and Imports\nDESCRIPTION: Imports necessary SQLAlchemy modules and sets up a DeclarativeBase class for ORM mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Expressions for Hybrid Properties in SQLAlchemy\nDESCRIPTION: Demonstrates how to use the hybrid_property.update_expression decorator to break a value into multiple columns/expressions for UPDATE operations, allowing hybrid properties to be used with session.query().update().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Person(Base):\n    # ...\n\n    first_name = Column(String(10))\n    last_name = Column(String(10))\n\n    @hybrid.hybrid_property\n    def name(self):\n        return self.first_name + \" \" + self.last_name\n\n    @name.expression\n    def name(cls):\n        return func.concat(cls.first_name, \" \", cls.last_name)\n\n    @name.update_expression\n    def name(cls, value):\n        f, l = value.split(\" \", 1)\n        return [(cls.first_name, f), (cls.last_name, l)]\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Engine and Session for SQLAlchemy\nDESCRIPTION: This snippet initializes a SQLite in-memory database engine and establishes a session for database operations, allowing for further manipulation of the defined ORM models. It effectively sets the groundwork for performing CRUD operations within the session context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite+pysqlite:///:memory:\", echo=True)\nBase.metadata.create_all(engine)\nconn = engine.connect()\nsession = Session(conn)\n```\n\n----------------------------------------\n\nTITLE: Using Autocommit Session for Read-Only Operations in SQLAlchemy\nDESCRIPTION: Demonstrates how to use a Session with AUTOCOMMIT isolation in a read-only fashion. The session executes statements and automatically closes the connection after use.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwith autocommit_session() as session:\n    some_objects = session.execute(text(\"<statement>\"))\n    some_other_objects = session.execute(text(\"<statement>\"))\n\n# closes connection\n```\n\n----------------------------------------\n\nTITLE: Custom DBAPI Connection Implementation\nDESCRIPTION: Example of completely replacing the DBAPI connect() function using an event listener.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\nengine = create_engine(\"postgresql+psycopg2://user:pass@hostname/dbname\")\n\n@event.listens_for(engine, \"do_connect\")\ndef receive_do_connect(dialect, conn_rec, cargs, cparams):\n    # return the new DBAPI connection with whatever we'd like to\n    # do\n    return psycopg2.connect(*cargs, **cparams)\n```\n\n----------------------------------------\n\nTITLE: Using text() construct in expr.in_()\nDESCRIPTION: Demonstrates how to use a text() construct as an argument to expr.in_(). Grouping parentheses are added automatically.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncol.in_(text(\"select id from table\"))\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Function for Column Updates\nDESCRIPTION: Demonstrates setting up automatic timestamp updates using Python's datetime.now function as an onupdate handler.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nt = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    # define 'last_updated' to be populated with datetime.now()\n    Column(\"last_updated\", DateTime, onupdate=datetime.datetime.now),\n)\n```\n\n----------------------------------------\n\nTITLE: Composite Adjacency List Implementation\nDESCRIPTION: Demonstrates a composite primary key self-referential relationship with multiple columns in the join condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Folder(Base):\n    __tablename__ = \"folder\"\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"account_id\", \"parent_id\"], [\"folder.account_id\", \"folder.folder_id\"]\n        ),\n    )\n\n    account_id = mapped_column(Integer, primary_key=True)\n    folder_id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer)\n    name = mapped_column(String)\n\n    parent_folder = relationship(\n        \"Folder\", back_populates=\"child_folders\", remote_side=[account_id, folder_id]\n    )\n\n    child_folders = relationship(\"Folder\", back_populates=\"parent_folder\")\n```\n\n----------------------------------------\n\nTITLE: Using Hybrid Properties in UPDATE Statements with SQLAlchemy\nDESCRIPTION: Shows how to use a hybrid property with update_expression in an actual UPDATE statement, demonstrating how the ORM translates the property to component columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Person).filter(Person.id == 5).update({Person.name: \"Dr. No\"})\n```\n\n----------------------------------------\n\nTITLE: Adding info Parameter to Schema Constructs in Python\nDESCRIPTION: This change adds the 'info' parameter as a constructor argument to various schema constructs like MetaData, Index, ForeignKey, and constraints. It enables attaching custom metadata to these objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nMetaData(..., info={...})\nIndex(..., info={...})\nForeignKey(..., info={...})\nForeignKeyConstraint(..., info={...})\nUniqueConstraint(..., info={...})\nPrimaryKeyConstraint(..., info={...})\nCheckConstraint(..., info={...})\n```\n\n----------------------------------------\n\nTITLE: Structural vs Data Elements in SQLAlchemy\nDESCRIPTION: Demonstrates the difference between structural elements like table columns and data elements like literal values in SQLAlchemy queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# table columns for CREATE TABLE - structural\ntable = Table(\"table\", metadata_obj, Column(\"x\", Integer), Column(\"y\", Integer))\n\n# columns in a SELECT statement - structural\nstmt = select(table.c.x, table.c.y)\n\n# literal elements in an IN clause - data\nstmt = stmt.where(table.c.y.in_([1, 2, 3]))\n```\n\n----------------------------------------\n\nTITLE: Applying Prefix to SELECT Statements in SQLAlchemy\nDESCRIPTION: Demonstrates how to add a prefix to a SELECT statement using the with_prefix method. This allows for custom keywords or clauses to be placed before the columns clause of the SELECT.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nselect().with_prefix('foo')\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary for Primary Key in Query.get() Method\nDESCRIPTION: The Query.get() method now accepts a dictionary of attribute keys and values to specify the primary key, useful for composite primary keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsession.query(MyClass).get({\"id\": 1, \"type\": \"foo\"})\n```\n\n----------------------------------------\n\nTITLE: Basic Node Class Implementation in SQLAlchemy\nDESCRIPTION: Defines a basic self-referential Node class using SQLAlchemy ORM with a one-to-many relationship to itself.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\")\n```\n\n----------------------------------------\n\nTITLE: Using OUT Parameters in SQLAlchemy with Oracle\nDESCRIPTION: Shows how to set up and use OUT parameters for Oracle databases in SQLAlchemy. This allows for retrieving values from stored procedures or functions that return data through parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsql.outparam(name, type)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult.out_parameters\n```\n\n----------------------------------------\n\nTITLE: Computed Column Definition\nDESCRIPTION: Example of defining computed columns using the Computed construct for automatically calculated values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, MetaData, Integer, Computed\n\nmetadata_obj = MetaData()\n\nsquare = Table(\n    \"square\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"side\", Integer),\n    Column(\"area\", Integer, Computed(\"side * side\")),\n    Column(\"perimeter\", Integer, Computed(\"4 * side\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Pre-Ping Implementation\nDESCRIPTION: Legacy implementation of connection pre-ping using engine events for custom disconnect handling\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(some_engine, \"engine_connect\")\ndef ping_connection(connection, branch):\n    if branch:\n        return\n\n    try:\n        connection.scalar(select(1))\n    except exc.DBAPIError as err:\n        if err.connection_invalidated:\n            connection.scalar(select(1))\n        else:\n            raise\n```\n\n----------------------------------------\n\nTITLE: Custom Scoped Session Implementation\nDESCRIPTION: Shows how to implement a custom scoped session using a web framework's request context. Demonstrates integration with request lifecycle management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/contextual.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom my_web_framework import get_current_request, on_request_end\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nSession = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)\n\n\n@on_request_end\ndef remove_session(req):\n    Session.remove()\n```\n\n----------------------------------------\n\nTITLE: Legacy Join Pattern with Table Reference\nDESCRIPTION: Shows a deprecated pattern of joining using table references instead of ORM entities, along with filter conditions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\na1 = Address.__table__\n\nq = (\n    s.query(User)\n    .join(a1, User.addresses)\n    .filter(Address.email_address == \"ed@foo.com\")\n    .all()\n)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Dataclass with Non-Mapped Fields\nDESCRIPTION: Shows how to include non-mapped fields in SQLAlchemy ORM dataclasses. These fields are part of the dataclass but not persisted by the ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass Data:\n    __tablename__ = \"data\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    status: Mapped[str]\n\n    ctrl_one: Optional[str] = None\n    ctrl_two: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: JSON Datatype Accessors (Python/SQL)\nDESCRIPTION: New accessors added to JSON type expressions for specific datatype access and comparison, including strings, integers, numeric, and boolean elements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import JSON\n\n# Example usage\njson_col = table.c.data.astext.cast(JSON)\njson_col['key'].as_integer() == 5\n```\n\n----------------------------------------\n\nTITLE: Conditional DDL for Constraints/Indexes in SQLAlchemy\nDESCRIPTION: Demonstrates using `ddl_if` to conditionally create a `CheckConstraint` and `Index` based on the dialect.  The example shows how the constraint and index are only created when using a PostgreSQL backend. The code includes setting up the metadata, table definition with conditional index and check constraint, and creating engines for SQLite (where the DDL is skipped) and PostgreSQL (where the DDL is applied).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n    meta = MetaData()\n\n\n    my_table = Table(\n        \"my_table\",\n        meta,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"num\", Integer),\n        Column(\"data\", String),\n        Index(\"my_pg_index\", \"data\").ddl_if(dialect=\"postgresql\"),\n        CheckConstraint(\"num > 5\").ddl_if(dialect=\"postgresql\"),\n    )\n\n    e1 = create_engine(\"sqlite://\", echo=True)\n    meta.create_all(e1)  # will not generate CHECK and INDEX\n\n\n    e2 = create_engine(\"postgresql://scott:tiger@localhost/test\", echo=True)\n    meta.create_all(e2)  # will generate CHECK and INDEX\n```\n\n----------------------------------------\n\nTITLE: Setting MSSQL Connection Timeout\nDESCRIPTION: Example of setting a connection timeout for MSSQL using connect_args parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\n    \"mssql+pyodbc://user:pass@sqlsrvr?driver=ODBC+Driver+13+for+SQL+Server\",\n    connect_args={\"timeout\": 30},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Indexes with Storage Parameters in SQLAlchemy\nDESCRIPTION: Added support for storage parameters in CREATE INDEX statements using the new 'postgresql_with' keyword argument. Also added reflection support for both 'postgresql_with' and 'postgresql_using' flags on Index objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Index\n\n# Example usage (not provided in original text)\nIndex('my_index', my_table.c.my_column, postgresql_with={'fillfactor': 90})\n```\n\n----------------------------------------\n\nTITLE: Explicit Aliasing for Joins in SQLAlchemy 2.0\nDESCRIPTION: This snippet demonstrates how to use explicit aliases to replace the aliased=True option on joins in SQLAlchemy 2.0. It defines aliases for the Node entity and uses them in join operations to avoid automatic aliasing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n\"n1 = aliased(Node)\nn2 = aliased(Node)\n\nq = (\n    select(Node)\n    .join(Node.children.of_type(n1))\n    .where(n1.name == \\\"some sub child\\\")\n    .join(n1.children.of_type(n2))\n    .where(n2.name == \\\"some sub child\\\")\n)\"\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Collections in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to remove an individual item from a collection in SQLAlchemy ORM. It includes how to mark an item for removal and submit the change to the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> existing_transaction = account_transactions[0]\n>>> existing_account.account_transactions.remove(existing_transaction)\n>>> session.commit()\n{execsql}DELETE FROM account_transaction WHERE account_transaction.id = ?\n[...] (3,)\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Binding Metadata in SQLAlchemy 2.0 Sessions\nDESCRIPTION: This code snippet describes the changes in associating an ORM session with an engine in SQLAlchemy 2.0, as legacy bound metadata is removed. It shows the new way to instantiate a session with a direct engine association.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite://\")\nSession = sessionmaker(engine)\nBase = declarative_base()\n\nclass MyClass(Base): ...\n\nsession = Session()\nsession.add(MyClass())\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Joining Relationships with Attributes in SQLAlchemy ORM Python\nDESCRIPTION: This migration snippet highlights the transition from using string attribute names to class attributes for joining relationships and setting query options in SQLAlchemy ORM. SQLAlchemy 2.0 no longer supports string-based references, providing a more robust and error-resistant approach to ORM queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nq = session.query(User).join(User.addresses)\n```\n\n----------------------------------------\n\nTITLE: SQL Data Insertion Operations with RETURNING Clauses\nDESCRIPTION: SQL INSERT statements demonstrating data insertion into tables 'a' and 'b', using parameter binding and the RETURNING clause to fetch generated IDs and timestamps.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN (implicit)\nINSERT INTO a (data) VALUES (?) RETURNING id, create_date\n[...] ('a1',)\n...\nINSERT INTO b (a_id, data) VALUES (?, ?) RETURNING id\n[...] (1, 'b2')\n...\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Checking SQLAlchemy version\nDESCRIPTION: This code snippet checks the installed SQLAlchemy version.  It imports the sqlalchemy module and then accesses the __version__ attribute to retrieve the version number. The expected output is 2.1.0, indicating compatibility with the tutorial.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: pycon+sql\nCODE:\n```\n>>> import sqlalchemy\n>>> sqlalchemy.__version__  # doctest: +SKIP\n2.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DDL with Event Listeners in Python\nDESCRIPTION: Demonstrates how to create custom DDL using the DDL construct and event listeners to add a CHECK constraint after table creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nevent.listen(\n    metadata,\n    \"after_create\",\n    DDL(\n        \"ALTER TABLE users ADD CONSTRAINT \"\n        \"cst_user_name_length \"\n        \" CHECK (length(user_name) >= 8)\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL 14+ Specific Index Creation in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to create a conditional DDL event hook that only applies to PostgreSQL version 14 or higher. It defines a function to check the database version and uses it with the ddl_if method when creating an index.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef only_pg_14(ddl_element, target, bind, dialect, **kw):\n    return dialect.name == \"postgresql\" and dialect.server_version_info >= (14,)\n\n\nmy_table = Table(\n    \"my_table\",\n    meta,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"num\", Integer),\n    Column(\"data\", String),\n    Index(\"my_pg_index\", \"data\").ddl_if(callable_=only_pg_14),\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Comment Support for Tables and Columns\nDESCRIPTION: Shows how to add comments to tables and columns using the comment parameter, which will be included in DDL and available via reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nTable(\n    \"my_table\",\n    metadata,\n    Column(\"q\", Integer, comment=\"the Q value\"),\n    comment=\"my Q table\"\n)\n```\n\n----------------------------------------\n\nTITLE: Explicit Engine Usage for Schema Operations in SQLAlchemy 2.0\nDESCRIPTION: Demonstrates explicit use of Engine for schema-level operations like creating tables and reflecting schema in SQLAlchemy 2.0\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\n\nmetadata_obj = MetaData()\n\n# engine level:\n\n# create tables\nmetadata_obj.create_all(engine)\n\n# reflect all tables\nmetadata_obj.reflect(engine)\n\n# reflect individual table\nt = Table(\"t\", metadata_obj, autoload_with=engine)\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Database Schema Using Connection Event\nDESCRIPTION: Example showing how to set the CURRENT_SCHEMA in Oracle Database using SQLAlchemy's connection event handler. The code creates an engine and attaches an event listener that executes an ALTER SESSION command when a new connection is established.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n    \"oracle+oracledb://scott:tiger@localhost:1521?service_name=freepdb1\"\n)\n\n\n@event.listens_for(engine, \"connect\", insert=True)\ndef set_current_schema(dbapi_connection, connection_record):\n    cursor_obj = dbapi_connection.cursor()\n    cursor_obj.execute(\"ALTER SESSION SET CURRENT_SCHEMA=%s\" % schema_name)\n    cursor_obj.close()\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type with Boolean Comparison\nDESCRIPTION: Implements a custom comparison operator that returns boolean results\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MyInt(Integer):\n    class comparator_factory(Integer.Comparator):\n        def is_frobnozzled(self, other):\n            return self.op(\"--is_frobnozzled->\", is_comparison=True)(other)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Array Type Declaration\nDESCRIPTION: PostgreSQL ARRAY type usage that supports TypeEngine.python_type accessor for array types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n_postgresql.ARRAY\n```\n\n----------------------------------------\n\nTITLE: SQL Stringification using DBAPI-specific Functions in SQLAlchemy\nDESCRIPTION: Shows how to use DBAPI-specific functions like psycopg2's mogrify() to stringify SQL with inline parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ne = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n\nwith e.connect() as conn:\n    cursor = conn.connection.cursor()\n    compiled = stmt.compile(e)\n\n    print(cursor.mogrify(str(compiled), compiled.params))\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling with NullPool\nDESCRIPTION: Example showing how to disable connection pooling in SQLAlchemy by using the NullPool implementation instead of the default QueuePool.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.pool import NullPool\n\nengine = create_engine(\n    \"postgresql+psycopg2://scott:tiger@localhost/test\", poolclass=NullPool\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing NULL on a Column with Default in SQLAlchemy ORM\nDESCRIPTION: Explains how to force a NULL value on a column that has a default value, either by using the null() SQL construct or by configuring the column type with evaluates_none().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import null\n\nobj = MyObject(id=1, data=null())\nsession.add(obj)\nsession.commit()  # INSERT with the 'data' column explicitly set as null()\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyObject(Base):\n    __tablename__ = \"my_table\"\n    id = mapped_column(Integer, primary_key=True)\n    data = mapped_column(\n        String(50).evaluates_none(),  # indicate that None should always be passed\n        nullable=True,\n        server_default=\"default\",\n    )\n\n\nobj = MyObject(id=1, data=None)\nsession.add(obj)\nsession.commit()  # INSERT with the 'data' column explicitly set to None\n```\n\n----------------------------------------\n\nTITLE: Basic Concrete Inheritance Implementation in SQLAlchemy\nDESCRIPTION: Shows a basic concrete inheritance implementation with Employee, Manager, and Engineer classes. Each class is mapped to its own table with all columns defined explicitly. This implementation does not include polymorphic loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nname = mapped_column(String(50))\nmanager_data = mapped_column(String(50))\n\n__mapper_args__ = {\n    \"concrete\": True,\n}\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"concrete\": True,\n    }\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Custom Operator Join Condition\nDESCRIPTION: Creates a relationship using a custom PostgreSQL boolean operator for INET and CIDR types\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnetwork = relationship(\n    \"Network\",\n    primaryjoin=\"IPA.v4address.bool_op('<<')(foreign(Network.v4representation))\",\n    viewonly=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Aliased Constructs for Table Aliases in SQLAlchemy Query\nDESCRIPTION: Example demonstrating how to use the aliased construct to target table aliases in Query objects. This replaces the removed 'id' keyword argument in join methods.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\n\naddress_alias = aliased(Address)\nprint(session.query(User, address_alias).join((address_alias, User.addresses)).all())\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Load Class and load_only in SQLAlchemy\nDESCRIPTION: Illustrates the usage of the new Load class and load_only function in SQLAlchemy. These features provide more control over which columns are loaded and how relationships are loaded.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Load\n\nquery(User, Address).options(Load(Address).joinedload(\"entries\"))\n\nfrom sqlalchemy.orm import load_only\n\nquery(User).options(load_only(\"name\", \"fullname\"))\n\n# specify explicit parent entity\nquery(User, Address).options(Load(User).load_only(\"name\", \"fullname\"))\n\n# specify path\nquery(User).options(joinedload(User.addresses).load_only(\"email_address\"))\n```\n\n----------------------------------------\n\nTITLE: Filtering on Subclass Attributes in Polymorphic Queries\nDESCRIPTION: Example showing how to create a query against a base class (Employee) that filters on attributes from subclasses (Manager, Engineer) when polymorphic loading is configured.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    select(Employee).where(\n        or_(Manager.manager_name == \"x\", Engineer.engineer_info == \"y\")\n    )\n)\n{printsql}SELECT employee.id, employee.name, employee.type, engineer.id AS id_1,\nengineer.engineer_info, manager.id AS id_2, manager.manager_name\nFROM employee\nLEFT OUTER JOIN engineer ON employee.id = engineer.id\nLEFT OUTER JOIN manager ON employee.id = manager.id\nWHERE manager.manager_name = :manager_name_1\nOR engineer.engineer_info = :engineer_info_1\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy 0.6 Expression Language Examples\nDESCRIPTION: Demonstrates boolean evaluation behavior changes in expression language and proper clause element comparisons.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.sql import column\n>>> column(\"foo\") == 5\n<sqlalchemy.sql.expression._BinaryExpression object at 0x1252490>\n\n>>> str(column(\"foo\") == 5)\n'foo = :foo_1'\n\n>>> bool(column(\"foo\") == 5)\nFalse\n>>> bool(column(\"foo\") == column(\"foo\"))\nFalse\n>>> c = column(\"foo\")\n>>> bool(c == c)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Primary Key with Oracle in SQLAlchemy ORM\nDESCRIPTION: Model configuration using Identity for a primary key with Oracle Database. Oracle will automatically use RETURNING to fetch the newly generated primary key value after INSERT.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyOracleModel(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(Identity(), primary_key=True)\n    data: Mapped[str] = mapped_column(String(50))\n```\n\n----------------------------------------\n\nTITLE: Abstract Base Class without Inheritance in SQLAlchemy\nDESCRIPTION: Shows how to create an abstract base class that doesn't use SQLAlchemy's inheritance mapping. This approach defines the base class with the __abstract__ flag but doesn't support polymorphic loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Employee(Base):\n    __abstract__ = True\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    manager_data = mapped_column(String(40))\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    engineer_info = mapped_column(String(40))\n```\n\n----------------------------------------\n\nTITLE: Adding Statement-Level Hints in SQLAlchemy Queries\nDESCRIPTION: New methods Select.with_statement_hint() and Query.with_statement_hint() have been added to support statement-level hints that are not specific to a table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nSelect.with_statement_hint()\n```\n\nLANGUAGE: python\nCODE:\n```\nQuery.with_statement_hint()\n```\n\n----------------------------------------\n\nTITLE: Using 'bind' Parameter in SQLAlchemy 0.4 Python API\nDESCRIPTION: Demonstrates the use of the 'bind' parameter in various SQLAlchemy 0.4 operations, replacing older parameters like 'engine', 'connectable', and 'bind_to'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmyengine = create_engine(\"sqlite://\")\n\nmeta = MetaData(myengine)\n\nmeta2 = MetaData()\nmeta2.bind = myengine\n\nsession = create_session(bind=myengine)\n\nstatement = select([table], bind=myengine)\n```\n\n----------------------------------------\n\nTITLE: Linking Literal Types to JSON in SQLAlchemy\nDESCRIPTION: Shows how to link specific Literal types to the SQLAlchemy JSON datatype using a type annotation map. It uses SQLAlchemy's DeclarativeBase class and Typing to map non-string Literals to JSON.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\nfrom sqlalchemy import JSON\nfrom sqlalchemy.orm import DeclarativeBase\n\nmy_literal = Literal[0, 1, True, False, \"true\", \"false\"]\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {my_literal: JSON}\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Column with SQLAlchemy Schema in Python\nDESCRIPTION: Illustrates how to define a table with an identity column using SQLAlchemy's schema module. It showcases setting up Metadata and Table with specific column definitions, including usage of the Identity construct. Dependencies include SQLAlchemy library and a suitable database connection. The key parameters include `start` indicating starting value and `cycle` which determines if the sequence should repeat. The output is a SQLAlchemy Table object ready for data insertions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, MetaData, Integer, Identity, String\n\nmetadata_obj = MetaData()\n\ndata = Table(\n    \"data\",\n    metadata_obj,\n    Column(\"id\", Integer, Identity(start=42, cycle=True), primary_key=True),\n    Column(\"data\", String),\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Objects with SQLAlchemy ORM Populate Existing Feature\nDESCRIPTION: This snippet demonstrates the 'populate_existing' execution option for refreshing ORM objects in a session with data from the database using a SELECT statement. This feature allows you to execute complex queries and automatically refresh the objects with the fetched data. The required setup includes a valid SQLAlchemy ORM query, and a session in which the query is executed. The primary input is the ORM query statement, and the output is refreshed domain objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nstmt = (\n    select(User)\n    .execution_options(populate_existing=True)\n    .where((User.name.in_([\"a\", \"b\", \"c\"])))\n)\nfor user in session.execute(stmt).scalars():\n    print(user)  # will be refreshed for those columns that came back from the query\n```\n\n----------------------------------------\n\nTITLE: Type-Aware Session Queries\nDESCRIPTION: Shows typed query execution using Session objects with various select statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    # (variable) stmt: Select[Tuple[int, str]]\n    stmt_1 = select(User.id, User.name)\n\n    # (variable) result_1: Result[Tuple[int, str]]\n    result_1 = session.execute(stmt_1)\n\n    # (variable) intval: int\n    # (variable) strval: str\n    intval, strval = result_1.one().t\n```\n\n----------------------------------------\n\nTITLE: Applying Events to Unmapped Superclasses in SQLAlchemy\nDESCRIPTION: Demonstrates how to apply mapper and instance events to unmapped superclasses in SQLAlchemy, where the events will be propagated to mapped subclasses. This allows attaching events to a declarative base class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\n@event.listens_for(\"load\", Base, propagate=True)\ndef on_load(target, context):\n    print(\"New instance loaded:\", target)\n\n\n# on_load() will be applied to SomeClass\nclass SomeClass(Base):\n    __tablename__ = \"sometable\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Declared Attribute Cascading Example in SQLAlchemy\nDESCRIPTION: This code snippet demonstrates how to use the `declared_attr.cascading` modifier in SQLAlchemy to ensure that a column is configured distinctly per mapped subclass within a mapped-inheritance scenario. This is especially useful when dealing with inherited tables and foreign key relationships. It showcases defining a mixin class `HasIdMixin` with a cascading `id` attribute that establishes a primary key column, referencing a foreign key to the parent class's `id` column in subclasses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"class HasIdMixin:\n    @declared_attr.cascading\n    def id(cls) -> Mapped[int]:\n        if has_inherited_table(cls):\n            return mapped_column(ForeignKey(\"myclass.id\"), primary_key=True)\n        else:\n            return mapped_column(Integer, primary_key=True)\n\n\n    class MyClass(HasIdMixin, Base):\n        __tablename__ = \"myclass\"\n        # ...\n\n\n    class MySubClass(MyClass):\n        \"\"\" \"\"\"\n\n        # ...\"\n```\n\n----------------------------------------\n\nTITLE: Complex Correlated Subquery with Nested FROM Clause in SQL\nDESCRIPTION: This SQL snippet demonstrates a complex correlated subquery with a nested FROM clause. The main query selects parent.id where there exists a match from a nested subquery that contains another subquery in its FROM clause, ordered and limited to 3 records.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parent.id FROM parent\nWHERE EXISTS (\n    SELECT * FROM (\n        SELECT child.id AS id, child.parent_id AS parent_id, child.pos AS pos\n        FROM child\n        WHERE child.parent_id = parent.id ORDER BY child.pos\n    LIMIT 3)\nWHERE id = 7)\n```\n\n----------------------------------------\n\nTITLE: Handling Backref Cascade Behavior in SQLAlchemy 2.0\nDESCRIPTION: This snippet addresses the deprecated feature of 'cascade backrefs' in SQLAlchemy versions earlier than 2.0, explaining how to disable this behavior and how to implement the recommended alternatives for maintaining compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Older configuration for disabling cascade backrefs\nrelationship = relationship('MyClass', backref='mybackref', cascade_backrefs=False)\n\n# Future mode with Session\nsession = Session(future=True)\n# Adding MyClass instance\nsession.add(MyClass())\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Loading Query Expression Example\nDESCRIPTION: Demonstrates using with_expression() to load a count of books per user onto User objects\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .join_from(User, Book)\n    .group_by(Book.owner_id)\n    .options(with_expression(User.book_count, func.count(Book.id)))\n)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Back_populates Equivalent Example\nDESCRIPTION: Shows the equivalent relationship configuration using back_populates instead of backref, which is the preferred approach.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping with Default Constructor\nDESCRIPTION: Demonstrates creating an imperative mapping with a default constructor using SQLAlchemy registry\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nuser_table = Table(\n    \"user\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50)),\n)\n\n\nclass User:\n    pass\n\n\nmapper_registry.map_imperatively(User, user_table)\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Connection Pool\nDESCRIPTION: Example of creating and using a QueuePool directly, without an Engine. This demonstrates how to set up a custom connection function and configure pool parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sqlalchemy.pool as pool\nimport psycopg2\n\n\ndef getconn():\n    c = psycopg2.connect(user=\"ed\", host=\"127.0.0.1\", dbname=\"test\")\n    return c\n\n\nmypool = pool.QueuePool(getconn, max_overflow=10, pool_size=5)\n```\n\n----------------------------------------\n\nTITLE: Configuring __allow_unmapped__ for Type Annotations in ORM Models\nDESCRIPTION: Demonstrates how to configure the __allow_unmapped__ attribute to support legacy-style type annotations in ORM models without using the Mapped container. This allows existing code with explicit type annotations to work without modification in SQLAlchemy 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# qualify the base with __allow_unmapped__.  Can also be\n# applied to classes directly if preferred\nclass Base:\n    __allow_unmapped__ = True\n\n\nBase = declarative_base(cls=Base)\n\n\n# existing mapping proceeds, Declarative will ignore any annotations\n# which don't include ``Mapped[]``\nclass Foo(Base):\n    __tablename__ = \"foo\"\n\n    id: int = Column(Integer, primary_key=True)\n\n    bars: List[\"Bar\"] = relationship(\"Bar\", back_populates=\"foo\")\n\n\nclass Bar(Base):\n    __tablename__ = \"bar\"\n\n    id: int = Column(Integer, primary_key=True)\n    foo_id = Column(ForeignKey(\"foo.id\"))\n\n    foo: Foo = relationship(Foo, back_populates=\"bars\", cascade=\"all\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Class with Post Update and Versioning\nDESCRIPTION: Example showing how to configure a Node class with post_update relationship and version counter using SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = Column(Integer, primary_key=True)\n    version_id = Column(Integer, default=0)\n    parent_id = Column(ForeignKey(\"node.id\"))\n    favorite_node_id = Column(ForeignKey(\"node.id\"))\n\n    nodes = relationship(\"Node\", primaryjoin=remote(parent_id) == id)\n    favorite_node = relationship(\n        \"Node\", primaryjoin=favorite_node_id == remote(id), post_update=True\n    )\n\n    __mapper_args__ = {\"version_id_col\": version_id}\n```\n\n----------------------------------------\n\nTITLE: Single-Table Inheritance and Polymorphic Queries in Python\nDESCRIPTION: Defines ORM mappings for single-table inheritance using polymorphic identity and shows how to construct queries involving multiple subclasses, emphasizing the need for explicit aliasing to avoid ambiguous SQL rendering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Integer, Column, String, ForeignKey\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    type = Column(String)\n\n    __mapper_args__ = {\"polymorphic_on\": type, \"polymorphic_identity\": \"a\"}\n\nclass ASub1(A):\n    __mapper_args__ = {\"polymorphic_identity\": \"asub1\"}\n\nclass ASub2(A):\n    __mapper_args__ = {\"polymorphic_identity\": \"asub2\"}\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n\n    a = relationship(\"A\", primaryjoin=\"B.a_id == A.id\", backref=\"b\")\n\ns = Session()\n\nprint(s.query(ASub1).join(B, ASub1.b).join(ASub2, B.a))\n\nprint(s.query(ASub1).join(B, ASub1.b).join(ASub2, ASub2.id == B.a_id))\n```\n\n----------------------------------------\n\nTITLE: Aliased ORM Queries with Type Information\nDESCRIPTION: Shows usage of aliased entities in queries while maintaining proper type information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    # this is in fact an Annotated type, but typing tools don't\n    # generally display this\n\n    # (variable) u1: Type[User]\n    u1 = aliased(User)\n\n    # (variable) stmt: Select[Tuple[User, User, str]]\n    stmt = select(User, u1, User.name).filter(User.id == 5)\n\n    # (variable) result: Result[Tuple[User, User, str]]\n    result = session.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Using Baked Queries with SQLAlchemy ORM for Query Caching\nDESCRIPTION: Demonstrates the new 'baked' query feature which reduces Python function call overhead by more than 75% through caching query operations as a series of lambdas. The example shows how to set up a bakery and create a reusable query with conditional filtering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext import baked\nfrom sqlalchemy import bindparam\n\nbakery = baked.bakery()\n\n\ndef search_for_user(session, username, email=None):\n    baked_query = bakery(lambda session: session.query(User))\n    baked_query += lambda q: q.filter(User.name == bindparam(\"username\"))\n\n    baked_query += lambda q: q.order_by(User.id)\n\n    if email:\n        baked_query += lambda q: q.filter(User.email == bindparam(\"email\"))\n\n    result = baked_query(session).params(username=username, email=email).all()\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Join Aliasing in SQLAlchemy 0.4 ORM Queries\nDESCRIPTION: Shows how to use automatic join aliasing in SQLAlchemy 0.4, allowing for more complex queries involving multiple joins on the same table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Order).join(\"items\", aliased=True).filter(Item.name=\"item 1\").join(\n    \"items\", aliased=True\n).filter(Item.name == \"item 3\")\n\nsession.query(Order).join(\"items\", id=\"j1\", aliased=True).filter(\n    Item.name == \"item 1\"\n).join(\"items\", aliased=True, id=\"j2\").filter(Item.name == \"item 3\").add_entity(\n    Item, id=\"j1\"\n).add_entity(\n    Item, id=\"j2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Manual SQL Parameter Rendering in SQLAlchemy for PostgreSQL\nDESCRIPTION: Demonstrates manual rendering of SQL parameters for PostgreSQL using SQLAlchemy's compilation features.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ne = create_engine(\"postgresql+psycopg2://\")\n\n# will use pyformat style, i.e. %(paramname)s for param\ncompiled = stmt.compile(e, compile_kwargs={\"render_postcompile\": True})\n\nprint(str(compiled) % compiled.params)\n```\n\n----------------------------------------\n\nTITLE: Querying with null() constants in SQLAlchemy Core\nDESCRIPTION: Demonstrates how multiple null() constants are now rendered uniquely in a SELECT query, addressing a change from version 0.9 where they were singletons.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nselect([null(), null()])\n```\n\n----------------------------------------\n\nTITLE: Defining Deferred SQL Expressions in SQLAlchemy\nDESCRIPTION: Example showing how to use deferred() with SQL expressions in column properties.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    firstname: Mapped[str] = mapped_column()\n    lastname: Mapped[str] = mapped_column()\n    fullname: Mapped[str] = deferred(firstname + \" \" + lastname)\n```\n\n----------------------------------------\n\nTITLE: Using sort_order to Control Column Ordering in Python\nDESCRIPTION: Example showing how to use the new sort_order parameter of mapped_column to explicitly control the order of columns in a table, overriding the default ordering behavior in SQLAlchemy 2.0.4+.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    id = mapped_column(Integer, primary_key=True, sort_order=-10)\n    col1 = mapped_column(Integer, sort_order=-1)\n    col3 = mapped_column(Integer)\n\n\nclass Model(Foo, Base):\n    col2 = mapped_column(Integer)\n    col4 = mapped_column(Integer)\n    __tablename__ = \"model\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Non-Table Constructs in SQLAlchemy ORM\nDESCRIPTION: Shows how to map a Python class to a non-Table construct like a function call using SQLAlchemy ORM mapper. The example maps a Subset class to a select statement from a database function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select, func\nfrom sqlalchemy.orm import mapper\n\nclass Subset(object):\n    pass\n\nselectable = select(['x', 'y', 'z']).select_from(func.some_db_function()).alias()\nmapper(Subset, selectable, primary_key=[selectable.c.x])\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach for URL Passing in Python\nDESCRIPTION: The recommended approach for passing engine URLs between engine instances is to pass the URL object directly rather than stringifying it, avoiding password obfuscation issues.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> e1 = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n>>> e2 = create_engine(e1.url)\n```\n\n----------------------------------------\n\nTITLE: Contrasting Non-Equivalent SQLAlchemy Expressions with Different Operator Placement\nDESCRIPTION: Examples demonstrating how operator placement changes the resulting SQL expression. Shows the difference between applying the operator to a column versus applying it to a compound expression.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(column(\"q\") - column(\"y\").op(\"+\", precedence=100)(column(\"z\")))\n```\n\nLANGUAGE: sql\nCODE:\n```\nq - y + z\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(column(\"q\") - column(\"y\").op(\"+\")(column(\"z\")))\n```\n\nLANGUAGE: sql\nCODE:\n```\nq - (y + z)\n```\n\n----------------------------------------\n\nTITLE: Using func.count() for Simple Count Queries in SQLAlchemy\nDESCRIPTION: Demonstrates how to use func.count() for simple count queries in SQLAlchemy, which can be more efficient for some databases like MySQL with MyISAM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func\n\nsession.query(func.count(MyClass.id)).scalar()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func, literal_column\n\nsession.query(func.count(literal_column(\"*\"))).select_from(MyClass).scalar()\n```\n\n----------------------------------------\n\nTITLE: Importing MSSQL Data Types in SQLAlchemy\nDESCRIPTION: Example showing how to import all supported SQL Server data types from the SQLAlchemy MSSQL dialect. These types can be used when defining database schemas and models.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/mssql.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.mssql import (\n    BIGINT,\n    BINARY,\n    BIT,\n    CHAR,\n    DATE,\n    DATETIME,\n    DATETIME2,\n    DATETIMEOFFSET,\n    DECIMAL,\n    DOUBLE_PRECISION,\n    FLOAT,\n    IMAGE,\n    INTEGER,\n    JSON,\n    MONEY,\n    NCHAR,\n    NTEXT,\n    NUMERIC,\n    NVARCHAR,\n    REAL,\n    SMALLDATETIME,\n    SMALLINT,\n    SMALLMONEY,\n    SQL_VARIANT,\n    TEXT,\n    TIME,\n    TIMESTAMP,\n    TINYINT,\n    UNIQUEIDENTIFIER,\n    VARBINARY,\n    VARCHAR,\n)\n```\n\n----------------------------------------\n\nTITLE: SQL DDL for Always Identity Column in PostgreSQL\nDESCRIPTION: Indicates how to generate DDL when the identity column must always be used by the database to assign values, ignoring any manual assignments. It demonstrates modifying the table definition to enforce this rule using the `ALWAYS` keyword with PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE data (\n    id INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 42 CYCLE) NOT NULL,\n    data VARCHAR,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONEncodedDict Type in SQLAlchemy\nDESCRIPTION: Defines a custom JSONEncodedDict type that represents an immutable structure as a JSON-encoded string. It handles serialization and deserialization of JSON data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass JSONEncodedDict(TypeDecorator):\n    \"\"\"Represents an immutable structure as a json-encoded string.\n\n    Usage:\n\n        JSONEncodedDict(255)\n\n    \"\"\"\n\n    impl = VARCHAR\n\n    cache_ok = True\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            value = json.dumps(value)\n\n        return value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            value = json.loads(value)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Using In-place Mutation Operators with Mutable Collections in SQLAlchemy\nDESCRIPTION: Example of using in-place mutation operators with SQLAlchemy's MutableSet and MutableList classes, which now properly emit change events.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmodel = session.query(MyModel).first()\nmodel.json_set &= {1, 3}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Employee-Project Relationship in SQL\nDESCRIPTION: SQL DDL statements to create tables for a many-to-many relationship between employees and projects with an additional role attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE employee (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE project (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE employee_project (\n    employee_id INTEGER PRIMARY KEY,\n    project_id INTEGER PRIMARY KEY,\n    role_name VARCHAR(30),\n    FOREIGN KEY employee_id REFERENCES employee(id),\n    FOREIGN KEY project_id REFERENCES project(id)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Column Loading in SQLAlchemy ORM\nDESCRIPTION: Shows how to set up deferred column loading for a specific column using mapped_column in a declarative class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    bio: Mapped[str] = mapped_column(Text, deferred=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Deferred Columns in SQLAlchemy Declarative Mapping\nDESCRIPTION: Example of defining a Book model with deferred columns using mapped_column(deferred=True) for summary and cover_photo attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Base):\n    __tablename__ = \"book\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    title: Mapped[str]\n    summary: Mapped[str] = mapped_column(Text, deferred=True)\n    cover_photo: Mapped[bytes] = mapped_column(LargeBinary, deferred=True)\n\n    def __repr__(self) -> str:\n        return f\"Book(id={self.id!r}, title={self.title!r})\"\n```\n\n----------------------------------------\n\nTITLE: Declarative Base Class with Default Constructor\nDESCRIPTION: Example of creating a declarative base class with a default constructor that allows optional keyword arguments for mapped attributes\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Base Employee Model with Polymorphic Configuration\nDESCRIPTION: Creates a base Employee model with polymorphic mapping, supporting inheritance and type-based discrimination\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\\n    __tablename__ = \"employee\"\\n    id: Mapped[int] = mapped_column(primary_key=True)\\n    name: Mapped[str]\\n    type: Mapped[str]\\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\\n    __mapper_args__ = {\\n        \"polymorphic_identity\": \"employee\",\\n        \"polymorphic_on\": \"type\",\\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Composite Values in Bulk UPDATE with SQLAlchemy\nDESCRIPTION: Example of using composite values in a bulk UPDATE operation where composite values are broken out into individual columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Vertex).update({Edge.start: Point(3, 4)})\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Classes with Inline Loading in SQLAlchemy ORM\nDESCRIPTION: Code snippet showing the definition of Engineer and Manager classes that inherit from Employee with polymorphic_load set to 'inline', enabling automatic polymorphic loading when querying the base class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nid = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\nengineer_info = mapped_column(String(30))\n\n__mapper_args__ = {\n    \"polymorphic_load\": \"inline\",\n    \"polymorphic_identity\": \"engineer\",\n}\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"inline\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL ENUM type without explicit MetaData\nDESCRIPTION: Shows how an ENUM type is created and dropped automatically when associated with a Table, but without an explicit MetaData object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ntable = Table(\n    \"sometable\", metadata, Column(\"some_enum\", ENUM(\"a\", \"b\", \"c\", name=\"myenum\"))\n)\n\ntable.create(engine)  # will emit CREATE TYPE and CREATE TABLE\ntable.drop(engine)  # will emit DROP TABLE and DROP TYPE - new for 1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Tokens for Connection Tracking\nDESCRIPTION: Shows how to use logging tokens to track individual connections or transactions in log messages. Provides a way to add custom identifiers to log entries for better traceability.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> e = create_engine(\"sqlite://\", echo=\"debug\")\n>>> with e.connect().execution_options(logging_token=\"track1\") as conn:\n...     conn.execute(text(\"select 1\")).all()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL ARRAY Type with Dimension\nDESCRIPTION: This example demonstrates the use of the `ARRAY` type from `sqlalchemy.dialects.postgresql` with an optional `dimension` argument. It showcases the new way to define ARRAY columns with a fixed number of dimensions, which improves efficiency.  It also mentions the older way that is still supported.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# old way, still works since PG supports N-dimensions per row:\nColumn(\"my_array\", postgresql.ARRAY(Integer))\n\n# new way, will render ARRAY with correct number of [] in DDL,\n# will process binds and results more efficiently as we don't need\n# to guess how many levels deep to go\nColumn(\"my_array\", postgresql.ARRAY(Integer, dimensions=2))\n```\n\n----------------------------------------\n\nTITLE: Declaring Primary Key Columns in SQLAlchemy Models\nDESCRIPTION: Demonstrates declaring primary key columns using Column with primary_key=True flag in a model class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SomeClass(Base):\n    __tablename__ = \"some_table_with_no_pk\"\n\n    uid = Column(Integer, primary_key=True)\n    bar = Column(String, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Pool Connection Recycle Time\nDESCRIPTION: Example of configuring connection recycling to invalidate connections after a specified time period\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\ne = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", pool_recycle=3600)\n```\n\n----------------------------------------\n\nTITLE: Proper back_populates Relationship Configuration in SQLAlchemy\nDESCRIPTION: Example showing the correct way to configure bidirectional relationships using back_populates, which resolves conflicting relationships warnings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(ForeignKey(\"parent.id\"))\n    parent = relationship(\"Parent\", back_populates=\"children\")\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries with Baked Queries in Python\nDESCRIPTION: Shows how to use baked queries as subqueries by converting them to regular Query objects with the to_query method, allowing for complex nested query structures.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbakery = baked.bakery()\n\n# a baked query that will end up being used as a subquery\nmy_subq = bakery(lambda s: s.query(User.id))\nmy_subq += lambda q: q.filter(User.id == Address.user_id)\n\n# select a correlated subquery in the top columns list,\n# we have the \"session\" argument, pass that\nmy_q = bakery(lambda s: s.query(Address.id, my_subq.to_query(s).as_scalar()))\n\n# use a correlated subquery in some of the criteria, we have\n# the \"query\" argument, pass that.\nmy_q += lambda q: q.filter(my_subq.to_query(q).exists())\n```\n\n----------------------------------------\n\nTITLE: GROUPING SETS SQL Function\nDESCRIPTION: Demonstrates the use of GROUPING SETS function for grouped queries with multiple grouping combinations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select, table, column, func, tuple_\nt = table(\"t\", column(\"value\"), column(\"x\"), column(\"y\"), column(\"z\"), column(\"q\"))\nstmt = select([func.sum(t.c.value)]).group_by(\n    func.grouping_sets(\n        tuple_(t.c.x, t.c.y),\n        tuple_(t.c.z, t.c.q),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Company Model with Employee Relationship\nDESCRIPTION: Defines a Company model with a one-to-many relationship to Employees, using mapped columns and relationship configurations\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Company(Base):\\n    __tablename__ = \"company\"\\n    id: Mapped[int] = mapped_column(primary_key=True)\\n    name: Mapped[str]\\n    employees: Mapped[List[\"Employee\"]] = relationship(back_populates=\"company\")\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Type Definition and Mapping\nDESCRIPTION: Shows how to define and use custom enum types with SQLAlchemy ORM mappings using Python's enum.Enum class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport enum\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[Status]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataclass Features with Class Parameters\nDESCRIPTION: Shows how to configure dataclass features using class-level parameters with the mixin approach.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(MappedAsDataclass, Base, repr=False, unsafe_hash=True):\n    \"\"\"User class will be converted to a dataclass\"\"\"\n\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Test Subset with Custom Database URI\nDESCRIPTION: Example of running a specific test file against a PostgreSQL database with custom connection parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest --dburi=postgresql+psycopg2://scott:tiger@localhost/test  test/sql/test_query.py\n```\n\n----------------------------------------\n\nTITLE: Adding New Items to Existing Write Only Collections in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to add new items to an existing write-only collection of a persistent object using the add_all method specific to the WriteOnlyCollection in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import select\n>>> session = Session(engine, expire_on_commit=False)\n>>> existing_account = session.scalar(select(Account).filter_by(identifier=\"account_01\"))\n    {execsql}BEGIN (implicit)\n    SELECT account.id, account.identifier\n    FROM account\n    WHERE account.identifier = ?\n    [...] ('account_01',)\n    {stop}\n>>> existing_account.account_transactions.add_all(\n...     [\n...         AccountTransaction(description=\"paycheck\", amount=Decimal(\"2000.00\")),\n...         AccountTransaction(description=\"rent\", amount=Decimal(\"-800.00\")),\n...     ]\n... )\n>>> session.commit()\n    {execsql}INSERT INTO account_transaction (account_id, description, amount, timestamp)\n    VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id, timestamp\n    [... (insertmanyvalues) 1/2 (ordered; batch not supported)] (1, 'paycheck', 2000.0)\n    INSERT INTO account_transaction (account_id, description, amount, timestamp)\n    VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id, timestamp\n    [insertmanyvalues 2/2 (ordered; batch not supported)] (1, 'rent', -800.0)\n    COMMIT\n```\n\n----------------------------------------\n\nTITLE: Adding DialectEvents.do_connect Event in SQLAlchemy Engine\nDESCRIPTION: Adds a new event DialectEvents.do_connect that allows interception or replacement of the Dialect.connect hook used to create a DBAPI connection. Also adds dialect plugin hooks Dialect.get_dialect_cls and Dialect.engine_created to allow external plugins to add events to existing dialects using entry points.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDialectEvents.do_connect\n```\n\nLANGUAGE: python\nCODE:\n```\nDialect.get_dialect_cls\n```\n\nLANGUAGE: python\nCODE:\n```\nDialect.engine_created\n```\n\n----------------------------------------\n\nTITLE: Defining Base Classes for Database Partitioning in SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to define base classes for database partitioning in SQLAlchemy ORM. These base classes can be used to distinguish between operations destined for different database connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Session\n\n\nclass BaseA(DeclarativeBase):\n    pass\n\n\nclass BaseB(DeclarativeBase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Index with Declarative Mixins in SQLAlchemy\nDESCRIPTION: Shows how to use Index with declarative mixins in SQLAlchemy, utilizing the __table_args__ attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass HasNameMixin(object):\n    name = Column(\"name\", String(50), nullable=False)\n\n    @declared_attr\n    def __table_args__(cls):\n        return (Index(\"name\"), {})\n\n\nclass User(HasNameMixin, Base):\n    __tablename__ = \"user\"\n    id = Column(\"id\", Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Baked Query Implementation in Python\nDESCRIPTION: Demonstrates how to set up a basic baked query using the bakery approach. This replaces the simple caching approach with a more efficient method that caches query construction steps.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbakery = baked.bakery()\n\n\ndef lookup(session, id_argument):\n    def create_model_query(session):\n        return session.query(Model).filter(Model.id == bindparam(\"id\"))\n\n    parameterized_query = bakery.bake(create_model_query)\n    return parameterized_query(session).params(id=id_argument).all()\n```\n\n----------------------------------------\n\nTITLE: Using literal_column() for Labeling Literal Columns in SQL\nDESCRIPTION: To create labels for literal columns in SQL queries, you can use either 'somecol AS somelabel' syntax or the literal_column() function with a label.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nliteral_column(\"somecol\").label(\"somelabel\")\n```\n\n----------------------------------------\n\nTITLE: Core Inspection System Example\nDESCRIPTION: This code snippet demonstrates how to use the `inspect` function with a SQLAlchemy Engine object. It creates an engine connected to a PostgreSQL database and then uses `inspect` to obtain an `Inspector` object.  The inspector is used to retrieve and print a list of table names present in the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"postgresql://scott:tiger@localhost/test\")\ninsp = inspect(engine)\nprint(insp.get_table_names())\n```\n\n----------------------------------------\n\nTITLE: Working with Subqueries Referencing Multiple Entities in SQLAlchemy ORM\nDESCRIPTION: Shows how to create and use subqueries that reference multiple entities. Multiple aliased constructs can reference the same subquery while treating them as separate entities in the query context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nuser_address_subq = (\n    select(User.id, User.name, User.fullname, Address.id, Address.email_address)\n    .join_from(User, Address)\n    .where(Address.email_address.in_([\"pat999@aol.com\", \"squirrel@squirrelpower.org\"]))\n    .subquery()\n)\n\nuser_alias = aliased(User, user_address_subq, name=\"user\")\naddress_alias = aliased(Address, user_address_subq, name=\"address\")\n\nstmt = select(user_alias, address_alias).where(user_alias.name == \"sandy\")\nfor row in session.execute(stmt):\n    print(f\"{row.user} {row.address}\")\n```\n\n----------------------------------------\n\nTITLE: Vertex Mapping with Type Annotations and String References\nDESCRIPTION: Demonstrates a fully type-annotated version of the Vertex class where composite columns are referenced by string names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import mapped_column, composite, Mapped\n\n\nclass Vertex(Base):\n    __tablename__ = \"vertices\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    x1: Mapped[int]\n    y1: Mapped[int]\n    x2: Mapped[int]\n    y2: Mapped[int]\n\n    start: Mapped[Point] = composite(\"x1\", \"y1\")\n    end: Mapped[Point] = composite(\"x2\", \"y2\")\n```\n\n----------------------------------------\n\nTITLE: Full Outer Join Support\nDESCRIPTION: Implementation of FULL OUTER JOIN syntax support in both Core and ORM layers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nFULL OUTER JOIN\n```\n\n----------------------------------------\n\nTITLE: NOT IN Operator in SQLAlchemy\nDESCRIPTION: Examples of using the NOT IN operator in SQLAlchemy, either with the explicit not_in() method or by negating an in_() expression with the ~ operator.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> print(column(\"x\").not_in([1, 2, 3]))\n{printsql}(x NOT IN (__[POSTCOMPILE_x_1]))\n\n>>> print(~column(\"x\").in_([1, 2, 3]))\n{printsql}(x NOT IN (__[POSTCOMPILE_x_1]))\n```\n\n----------------------------------------\n\nTITLE: Reflecting Oracle Unique and Check Constraints\nDESCRIPTION: The Oracle dialect now supports inspecting unique and check constraints using Inspector methods. Reflected Tables will not have UniqueConstraint objects as Oracle doesn't separate them from unique Indexes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nInspector.get_unique_constraints()\nInspector.get_check_constraints()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Database Configuration for SQLAlchemy Tests\nDESCRIPTION: Example of a custom test.cfg file that defines a custom database URL for testing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# test.cfg file\n[db]\nmy_postgresql=postgresql+psycopg2://username:pass@hostname/dbname\n```\n\n----------------------------------------\n\nTITLE: Querying Existence of Related Objects in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to query for the existence of related objects using A.b_value.has() in SQLAlchemy ORM. This is equivalent to A.b.has() but allows querying against b_value directly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ns.query(A).filter(A.b_value.has()).all()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.b_id AS a_b_id\nFROM a\nWHERE EXISTS (SELECT 1\nFROM b\nWHERE b.id = a.b_id)\n```\n\n----------------------------------------\n\nTITLE: Handling Column Addition to Multiple Tables in SQLAlchemy\nDESCRIPTION: Fixed a bug where an error was not raised when a column was added to more than one table at a time. This now raises an ArgumentError, consistent with the behavior for Column and Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_sql.column()\n_sql.table()\n```\n\n----------------------------------------\n\nTITLE: Basic Query Interception using Session Events in Python\nDESCRIPTION: Demonstrates how to intercept and modify ORM queries using the do_orm_execute event. Shows adding populate_existing option and custom ordering to SELECT statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSession = sessionmaker(engine)\n\n@event.listens_for(Session, \"do_orm_execute\")\ndef _do_orm_execute(orm_execute_state):\n    if orm_execute_state.is_select:\n        # add populate_existing for all SELECT statements\n        orm_execute_state.update_execution_options(populate_existing=True)\n\n        # check if the SELECT is against a certain entity and add an\n        # ORDER BY if so\n        col_descriptions = orm_execute_state.statement.column_descriptions\n\n        if col_descriptions[0][\"entity\"] is MyEntity:\n            orm_execute_state.statement = statement.order_by(MyEntity.name)\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLAlchemy Table Object in Python\nDESCRIPTION: This snippet demonstrates the correct way to instantiate a Table object in SQLAlchemy. It now requires the 'name' and 'metadata' arguments to be passed positionally, raising an informative error if they are not provided correctly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_13/6135.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, MetaData\n\nmetadata = MetaData()\ntable = Table('my_table', metadata)\n```\n\n----------------------------------------\n\nTITLE: Reflecting Materialized Views and Foreign Tables in PostgreSQL\nDESCRIPTION: Added support for reflection of materialized views and foreign tables in PostgreSQL. New method PGInspector.get_foreign_table_names() is available on the PostgreSQL version of Inspector.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nPGInspector.get_foreign_table_names()\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Subclass Attributes in SQLAlchemy Python\nDESCRIPTION: Demonstrates lazy loading for subclass-specific attributes, such as 'manager_name' for 'Manager'. Automatically queries data when attributes are accessed. Requires SQLAlchemy with session management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> mr_krabs = objects[0]\n>>> print(mr_krabs.manager_name)\n{execsql}SELECT manager.manager_name AS manager_manager_name\nFROM manager\nWHERE ? = manager.id\n[...] (1,)\n{stop}Eugene H. Krabs\n```\n\n----------------------------------------\n\nTITLE: PEP-593 Annotated Type Mapping Example\nDESCRIPTION: Shows how to use Annotated types to map different SQL type configurations to the same Python type.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom decimal import Decimal\n\nfrom typing_extensions import Annotated\n\nfrom sqlalchemy import Numeric\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nstr_30 = Annotated[str, 30]\nstr_50 = Annotated[str, 50]\nnum_12_4 = Annotated[Decimal, 12]\nnum_6_2 = Annotated[Decimal, 6]\n\n\nclass Base(DeclarativeBase):\n    registry = registry(\n        type_annotation_map={\n            str_30: String(30),\n            str_50: String(50),\n            num_12_4: Numeric(12, 4),\n            num_6_2: Numeric(6, 2),\n        }\n    )\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    short_name: Mapped[str_30] = mapped_column(primary_key=True)\n    long_name: Mapped[str_50]\n    num_value: Mapped[num_12_4]\n    short_num_value: Mapped[num_6_2]\n```\n\n----------------------------------------\n\nTITLE: Viewing Connection Pool Debug Output\nDESCRIPTION: Example showing the debug output produced when connections are checked out from and returned to the pool with logging enabled.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> c1 = engine.connect()\nDEBUG sqlalchemy.pool.impl.QueuePool Created new connection <connection object ...>\nDEBUG sqlalchemy.pool.impl.QueuePool Connection <connection object ...> checked out from pool\n>>> c1.close()\n```\n\n----------------------------------------\n\nTITLE: Defining ShardedQuery Class in SQLAlchemy\nDESCRIPTION: This snippet describes the ShardedQuery class, which extends the capabilities of queries in SQLAlchemy to handle querying across multiple shards. This class allows for the execution of queries that target specific shards or multiple shards simultaneously.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/horizontal_shard.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ShardedQuery\n   :members:\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SQLAlchemy Synonym with Property Descriptor\nDESCRIPTION: Demonstrates how to create a synonym property with a custom descriptor using the @property decorator. The example shows mapping a 'job_status' property as a synonym for a 'status' column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    status = mapped_column(String(50))\n\n    @property\n    def job_status(self):\n        return \"Status: \" + self.status\n\n    job_status = synonym(\"status\", descriptor=job_status)\n```\n\n----------------------------------------\n\nTITLE: Many-to-One Self-Referential Relationship\nDESCRIPTION: Demonstrates how to configure a many-to-one self-referential relationship using remote_side parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    parent = relationship(\"Node\", remote_side=[id])\n```\n\n----------------------------------------\n\nTITLE: Multi-Table Reflection in SQLAlchemy\nDESCRIPTION: Shows how to automatically load and create Table objects from an entire database schema using MetaData reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> metadata = MetaData(myengine, reflect=True)\n>>> metadata.tables.keys()\n['table_a', 'table_b', 'table_c', '...']\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy 0.8 Incorrect SQL from select_from\nDESCRIPTION: Example of incorrect SQL generated by select_from in SQLAlchemy 0.8 and earlier, which would replace the entity incorrectly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- SQLAlchemy 0.8 and earlier...\nSELECT anon_1.id AS anon_1_id, anon_1.name AS anon_1_name\nFROM (SELECT \"user\".id AS id, \"user\".name AS name\nFROM \"user\"\nWHERE \"user\".id = :id_1) AS anon_1 JOIN \"user\" ON anon_1.id = anon_1.id\nWHERE anon_1.name = :name_1\n```\n\n----------------------------------------\n\nTITLE: Context-Sensitive Default Function Implementation\nDESCRIPTION: Shows how to create a default value generator that uses statement context to access other column values during INSERT or UPDATE operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef mydefault(context):\n    return context.get_current_parameters()[\"counter\"] + 12\n\nt = Table(\n    \"mytable\",\n    metadata_obj,\n    Column(\"counter\", Integer),\n    Column(\"counter_plus_twelve\", Integer, default=mydefault, onupdate=mydefault),\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Pool Class in SQLAlchemy\nDESCRIPTION: Shows how to create a connection pool with a specific pool implementation class using NullPool as an example.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_pool_from_url\nfrom sqlalchemy import NullPool\n\nmy_pool = create_pool_from_url(\"mysql+mysqldb://\", poolclass=NullPool)\n```\n\n----------------------------------------\n\nTITLE: Basic ORM Entity Relationship Definition\nDESCRIPTION: Defines two SQLAlchemy ORM entities A and B with a one-to-many relationship using attribute-keyed dictionary collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[str]\n\n    a: Mapped[\"A\"] = relationship(back_populates=\"bs\")\n```\n\n----------------------------------------\n\nTITLE: Basic Table Inheritance with Index Generation\nDESCRIPTION: Demonstrates creating tables with inherited indexes using SQLAlchemy mixins and declared attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@declared_attr.directive\ndef __table_args__(cls):\n    return (Index(f\"test_idx_{cls.__tablename__}\", \"a\", \"b\"),)\n\n\nclass MyModelA(MyMixin, Base):\n    __tablename__ = \"table_a\"\n    id = mapped_column(Integer, primary_key=True)\n\n\nclass MyModelB(MyMixin, Base):\n    __tablename__ = \"table_b\"\n    id = mapped_column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Overriding SQLite Binary Type Compilation in SQLAlchemy\nDESCRIPTION: Demonstrates how to override type compilation for the BINARY type specifically for SQLite to render as BLOB instead of BINARY using the @compiles decorator.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import BINARY\n\n@compiles(BINARY, \"sqlite\")\ndef compile_binary_sqlite(type_, compiler, **kw):\n    return \"BLOB\"\n```\n\n----------------------------------------\n\nTITLE: Python Backref Relationship Example\nDESCRIPTION: Demonstrates how backref handlers propagate relationship changes between Parent and Child objects, including the removal from previous relationships\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", backref=\"parent\")\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(ForeignKey(\"parent.id\"))\n\n\np1 = Parent()\np2 = Parent()\nc1 = Child()\n\np1.children.append(c1)\n\nassert c1.parent is p1  # backref event establishes c1.parent as p1\n\np2.children.append(c1)\n\nassert c1.parent is p2  # backref event establishes c1.parent as p2\nassert c1 not in p1.children  # second backref event removes c1 from p1.children\n```\n\n----------------------------------------\n\nTITLE: Defining Book Model with Deferred Columns\nDESCRIPTION: Defines a SQLAlchemy ORM Book model with deferred loading for summary and cover_photo columns using the deferred_group parameter\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Base):\n    __tablename__ = \"book\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    title: Mapped[str]\n    summary: Mapped[str] = mapped_column(Text, deferred=True, deferred_group=\"book_attrs\")\n    cover_photo: Mapped[bytes] = mapped_column(\n        LargeBinary, deferred=True, deferred_group=\"book_attrs\"\n    )\n\n    def __repr__(self) -> str:\n        return f\"Book(id={self.id!r}, title={self.title!r})\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Table Delete Query\nDESCRIPTION: Example showing ORM support for multiple-table DELETE operations using Query.delete() with joined filtering criteria.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery(SomeEntity).filter(SomeEntity.id == SomeOtherEntity.id).filter(\n    SomeOtherEntity.foo == \"bar\"\n).delete()\n```\n\n----------------------------------------\n\nTITLE: Executing Insert Statement with Counter Values in SQLAlchemy Core\nDESCRIPTION: Demonstrates executing an INSERT statement with multiple rows of counter values using SQLAlchemy Core's insert() method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nstmt = mytable.insert().values([{\"counter\": 5}, {\"counter\": 18}, {\"counter\": 20}])\n\nconn.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Using aggregate_order_by with multiple ORDER BY elements in PostgreSQL\nDESCRIPTION: Added support for the aggregate_order_by function to receive multiple ORDER BY elements, previously only a single element was accepted.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import aggregate_order_by\n\n# Example usage with multiple ORDER BY elements:\nresult = session.query(\n    aggregate_order_by(func.array_agg(Table.column),\n                      Table.order_col1,\n                      Table.order_col2)\n).scalar()\n```\n\n----------------------------------------\n\nTITLE: Optimistic Disconnect Handling Example\nDESCRIPTION: Example showing how SQLAlchemy handles database disconnects optimistically by invalidating and recreating connections\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine, exc\n\ne = create_engine(...)\nc = e.connect()\n\ntry:\n    # suppose the database has been restarted.\n    c.execute(text(\"SELECT * FROM table\"))\n    c.close()\nexcept exc.DBAPIError as e:\n    # an exception is raised, Connection is invalidated.\n    if e.connection_invalidated:\n        print(\"Connection was invalidated!\")\n\n# after the invalidate event, a new connection\n# starts with a new Pool\nc = e.connect()\nc.execute(text(\"SELECT * FROM table\"))\n```\n\n----------------------------------------\n\nTITLE: Stacking Listeners for Object Lifecycle Events\nDESCRIPTION: This example demonstrates how to stack multiple event listeners on a single function using `sqlalchemy.event` and `sqlalchemy.orm.sessionmaker`. It shows how to track all objects that are entering the persistent state by listening for multiple events (pending_to_persistent, deleted_to_persistent, detached_to_persistent, loaded_as_persistent) and associating them with the same function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n@event.listens_for(maker, \\\"pending_to_persistent\\\")\n@event.listens_for(maker, \\\"deleted_to_persistent\\\")\n@event.listens_for(maker, \\\"detached_to_persistent\\\")\n@event.listens_for(maker, \\\"loaded_as_persistent\\\")\ndef detect_all_persistent(session, instance):\n    print(\\\"object is now persistent: %s\\\" % instance)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using InstanceState Info Dictionary in SQLAlchemy\nDESCRIPTION: Demonstrates how to use the .info dictionary feature added to InstanceState for storing custom object metadata.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect\n\nu1 = User(id=7, name=\"ed\")\n\ninspect(u1).info[\"user_info\"] = \"7|ed\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequence-Based Primary Key with Oracle in SQLAlchemy ORM\nDESCRIPTION: Model configuration using an explicit Sequence for a primary key with Oracle Database. This approach is used for non-integer values or integer values from constructs outside the table itself.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyOracleModel(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(Sequence(\"my_oracle_seq\"), primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Basic SQLAlchemy Backref Example\nDESCRIPTION: Demonstrates basic usage of backref to create bidirectional relationships between User and Address models using SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/backref.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\"Address\", backref=\"user\")\n\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Objects in SQLAlchemy Python\nDESCRIPTION: This snippet demonstrates the usage of transaction objects in SQLAlchemy, showing that a transaction cannot be reused after a rollback.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntx = session.begin(); tx.rollback(); tx.begin()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Mapping for Employee-Project Relationship\nDESCRIPTION: Python code showing SQLAlchemy declarative mapping classes for employee-project relationship with additional role attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n\n\nclass Project(Base):\n    __tablename__ = \"project\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n\n\nclass EmployeeProject(Base):\n    __tablename__ = \"employee_project\"\n\n    employee_id = Column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    project_id = Column(Integer, ForeignKey(\"project.id\"), primary_key=True)\n    role_name = Column(String(30))\n\n    project = relationship(\"Project\", backref=\"project_employees\")\n    employee = relationship(\"Employee\", backref=\"employee_projects\")\n```\n\n----------------------------------------\n\nTITLE: Using Association Proxy in Python SQLAlchemy\nDESCRIPTION: Shows the usage of an association proxy to transform a User object’s keyword mapping into a dictionary of special keys and string keywords.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nuser = User(\"log\")\nuser.keywords = {\"sk1\": \"kw1\", \"sk2\": \"kw2\"}\nprint(user.keywords)\nuser.keywords[\"sk3\"] = \"kw3\"\ndel user.keywords[\"sk2\"]\nprint(user.keywords)\n```\n\n----------------------------------------\n\nTITLE: Legacy Query API with Type Information\nDESCRIPTION: Shows type support for the legacy Query API including both scalar and tuple results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# (variable) users1: Sequence[User]\nusers1 = session.scalars(select(User)).all()\n\n# (variable) user: User\nuser = session.query(User).one()\n\n# (variable) user_iter: Iterator[User]\nuser_iter = iter(session.scalars(select(User)))\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Concrete Inheritance with Table Binding\nDESCRIPTION: An example showing how to set up concrete table inheritance in SQLAlchemy and bind different tables to different engines in a Session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BaseClass(Base):\n    __tablename__ = \"base\"\n\n    # ...\n\n\nclass ConcreteSubClass(BaseClass):\n    __tablename__ = \"concrete\"\n\n    # ...\n\n    __mapper_args__ = {\"concrete\": True}\n\n\nsession = Session(binds={base_table: some_engine, concrete_table: some_other_engine})\n```\n\n----------------------------------------\n\nTITLE: Reflecting UniqueConstraint in SQLAlchemy Table Objects\nDESCRIPTION: The UniqueConstraint construct is now included when reflecting a Table object for supported databases. MySQL and PostgreSQL have improved detection of duplicate indexes and unique constraints during reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nUniqueConstraint()\n```\n\nLANGUAGE: python\nCODE:\n```\nTable()\n```\n\n----------------------------------------\n\nTITLE: Updating TypeEngine.python_type Default Return Type in SQLAlchemy\nDESCRIPTION: Modification of the TypeEngine.python_type attribute to return 'object' instead of raising NotImplementedError, and changes to SQL JSON type to use the generic implementation rather than returning 'dict'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_21/10646.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTypeEngine.python_type = object  # Changed from raising NotImplementedError\nJSON.python_type = object    # Changed from returning dict\n```\n\n----------------------------------------\n\nTITLE: Using IS DISTINCT FROM in SQLAlchemy\nDESCRIPTION: Demonstrates how to use the is_distinct_from() method to generate SQL IS DISTINCT FROM expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").is_distinct_from(\"some value\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx IS DISTINCT FROM :x_1\n```\n\n----------------------------------------\n\nTITLE: Documenting MutableComposite Class in reStructuredText\nDESCRIPTION: This snippet documents the MutableComposite class and its members using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: MutableComposite\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Switching from Legacy to New Style select() in SQLAlchemy\nDESCRIPTION: This snippet showcases the differences between legacy and new calling styles for the select() construct in SQLAlchemy, illustrating the adoption of a streamlined usage model in version 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# New style\nstmt = select(table1.c.myid).where(table1.c.myid == table2.c.otherid)\n\n# Legacy style\nstmt = select([table1.c.myid], whereclause=table1.c.myid == table2.c.otherid)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Contains Eager Query Usage in Python SQLAlchemy\nDESCRIPTION: Demonstrates the simplified syntax for using contains_eager() with multiple paths in SQLAlchemy queries. Shows how multiple eager loads can be chained in a single contains_eager() call.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsession.query(A).options(contains_eager(A.b, B.c))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DELETE CASCADE Behavior with ORM Session Example\nDESCRIPTION: Demonstrates how the ORM automatically handles setting foreign keys to NULL when deleting parent objects, which may not always be desirable behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> session.delete(b1)\n>>> session.commit()\n{execsql}\nUPDATE b SET a_id=? WHERE b.id = ?\n(None, 2)\nDELETE FROM b WHERE b.id = ?\n(1,)\nDELETE FROM a WHERE a.id = ?\n(1,)\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Defaults without RETURNING Support in SQLAlchemy ORM\nDESCRIPTION: Model configuration for databases that don't support RETURNING or when it's not needed. Without eager_defaults, the server-generated values are marked as expired after INSERT and fetched only when accessed.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    timestamp = mapped_column(DateTime(), server_default=func.now())\n\n    # assume a database trigger populates a value into this column\n    # during INSERT\n    special_identifier = mapped_column(String(50), server_default=FetchedValue())\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Self-Referential Relationship\nDESCRIPTION: Shows how to set up bidirectional self-referential relationships using back_populates parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\", back_populates=\"parent\")\n    parent = relationship(\"Node\", back_populates=\"children\", remote_side=[id])\n```\n\n----------------------------------------\n\nTITLE: Using Conjunctions in SQLAlchemy Queries\nDESCRIPTION: Shows how to use AND conjunctions in SQLAlchemy select statements using the where() method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nprint(\n    select(address_table.c.email_address)\n    .where(user_table.c.name == \"squidward\")\n    .where(address_table.c.user_id == user_table.c.id)\n)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT address.email_address\nFROM address, user_account\nWHERE user_account.name = :name_1 AND address.user_id = user_account.id\n```\n\n----------------------------------------\n\nTITLE: Using prefix with SQLAlchemy update and delete operations in Python\nDESCRIPTION: MySQL-specific 'prefix' operation has been added to update and delete constructs in SQLAlchemy. This enables setting SQL execution modifiers such as 'LOW_PRIORITY' for specific SQL dialects. Existing on insert and select operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nstmt = table.delete().prefix_with(\"LOW_PRIORITY\", dialect=\"mysql\")\n\nstmt = table.update().prefix_with(\"LOW_PRIORITY\", dialect=\"mysql\")\n```\n\n----------------------------------------\n\nTITLE: Reflecting Tables from Specific Schema in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to reflect tables from a specific database schema using the schema parameter in MetaData and Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> metadata_obj = MetaData(schema=\"project\")\n>>> metadata_obj.reflect(someengine)\n>>> metadata_obj.tables[\"project.messages\"]\nTable('messages', MetaData(), Column('message_id', INTEGER(), table=<messages>), schema='project')\n```\n\n----------------------------------------\n\nTITLE: Accessing AssociationProxy State Example - Python\nDESCRIPTION: Demonstrates how to access AssociationProxy state using the new for_class() method, which provides direct access to class-specific AssociationProxyInstance objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    # ...\n\n    keywords = association_proxy(\"kws\", \"keyword\")\n\n\nproxy_state = inspect(User).all_orm_descriptors[\"keywords\"].for_class(User)\n\n>>> proxy_state.target_class\nKeyword\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Composite Mapping in SQLAlchemy\nDESCRIPTION: Shows how to create a table definition for vertices and map it to a Vertex class using composite types with Point objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nvertices = Table(\n    \"vertices\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"x1\", Integer),\n    Column(\"y1\", Integer),\n    Column(\"x2\", Integer),\n    Column(\"y2\", Integer),\n)\n\nclass Vertex(object):\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\nmapper(\n    Vertex,\n    vertices,\n    properties={\n        \"start\": composite(Point, vertices.c.x1, vertices.c.y1),\n        \"end\": composite(Point, vertices.c.x2, vertices.c.y2),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Employees to Project with Roles in SQLAlchemy\nDESCRIPTION: Python code demonstrating how to add employees to a project with specific roles using the SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nproj = Project(name=\"Client A\")\n\nemp1 = Employee(name=\"emp1\")\nemp2 = Employee(name=\"emp2\")\n\nproj.project_employees.extend([\n    EmployeeProject(employee=emp1, role_name=\"tech lead\"),\n    EmployeeProject(employee=emp2, role_name=\"account executive\"),\n])\n```\n\n----------------------------------------\n\nTITLE: Various Forms of query.join() in SQLAlchemy\nDESCRIPTION: Shows different ways to use query.join() in SQLAlchemy, including joining on relationships, string names, and target classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery.join(MyClass.somerelation)\nquery.join(\"somerelation\")\nquery.join(MyTarget)\n# ... etc\n```\n\n----------------------------------------\n\nTITLE: Basic Lazy Loading Query with Filter\nDESCRIPTION: Demonstrates basic lazy loading configuration with filtering criteria on a relationship\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(A).options(lazyload(A.bs.and_(B.id > 5)))\n```\n\n----------------------------------------\n\nTITLE: Using Column Properties with Subqueries\nDESCRIPTION: Example showing how to define a column_property using a subquery with correlation, demonstrating improvements to aliases and order_by behavior with column properties.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n\n\nA.b = column_property(select([func.max(B.id)]).where(B.a_id == A.id).correlate(A))\n```\n\n----------------------------------------\n\nTITLE: Using CTE with Oracle-specific Suffixes\nDESCRIPTION: Example of using Common Table Expressions (CTEs) with Oracle's special directives via the with_suffixes() method. This demonstrates how to apply Oracle-specific features like 'search depth first' and 'cycle' detection when using recursive CTEs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nincluded_parts = (\n    select([part.c.sub_part, part.c.part, part.c.quantity])\n    .where(part.c.part == \"p1\")\n    .cte(name=\"included_parts\", recursive=True)\n    .suffix_with(\n        \"search depth first by part set ord1\",\n        \"cycle part set y_cycle to 1 default 0\",\n        dialect=\"oracle\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Primary Key Constraint Example in SQL\nDESCRIPTION: SQL DDL example showing how to define a primary key constraint in a table creation statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE employee (\n     emp_id INTEGER,\n     emp_name VARCHAR(30),\n     dep_id INTEGER,\n     PRIMARY KEY (emp_id)\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Query Caching Example in Python\nDESCRIPTION: Shows a basic implementation of query caching where a query is stored in a cache dictionary and reused with different parameters. This is presented as the initial approach before introducing baked queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_simple_cache[\"my_key\"] = query.with_session(None).bake()\nelse:\n    query = my_simple_cache[\"my_key\"].with_session(session)\n\nreturn query.params(id=id_argument).all()\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Eager Loading Configuration\nDESCRIPTION: Shows how to configure eager loading for self-referential relationships using join_depth parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/self_referential.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\", lazy=\"joined\", join_depth=2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Groups in SQLAlchemy\nDESCRIPTION: Example demonstrating how to configure deferred column groups using deferred_group parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Base):\n    __tablename__ = \"book\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    title: Mapped[str]\n    summary: Mapped[str] = mapped_column(\n        Text, deferred=True, deferred_group=\"book_attrs\"\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Coercion in cx_Oracle Dialect for SQLAlchemy\nDESCRIPTION: Adds a new engine option 'coerce_to_unicode=True' to the cx_Oracle dialect, restoring unconditional unicode conversion for string values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncoerce_to_unicode=True\n```\n\n----------------------------------------\n\nTITLE: Querying Column Level Expressions in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to create specific SELECT statements using Query to obtain named tuples with column expressions and aggregates.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User.name, func.count(Address.id).label(\"numaddresses\")).join(\n    Address\n).group_by(User.name)\n```\n\n----------------------------------------\n\nTITLE: Using a Connection from a Standalone Pool\nDESCRIPTION: Example showing how to get a connection from a standalone pool, use it to execute SQL, and return it to the pool properly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# get a connection\nconn = mypool.connect()\n\n# use it\ncursor_obj = conn.cursor()\ncursor_obj.execute(\"select foo\")\n\n# \"close\" the connection.  Returns\n# it to the pool.\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Expiration of Derived Collections in SQLAlchemy\nDESCRIPTION: Shows how expiring a derived 'current_week_tasks' attribute triggers autoflush when accessed. Expiration ensures that derived data is recalculated after related collections are modified.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> with Session(e) as sess:\n...     u1 = sess.scalar(select(User).where(User.id == 1))\n...     u1.all_tasks.append(Task(task_date=datetime.datetime.now()))\n...     sess.expire(u1, [\"current_week_tasks\"])\n...     print(u1.current_week_tasks)  # triggers autoflush before querying\n[<__main__.Task object at 0x7fd95a4c8c50>, <__main__.Task object at 0x7fd95a4c8c80>]\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy Column Element Modifier Functions\nDESCRIPTION: This snippet shows how to import functions used for modifying column elements in SQLAlchemy. These functions are often available as methods on ColumnElement objects but can also be used standalone.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/sqlelement.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import all_, any_, asc, between, collate, desc, funcfilter, label, nulls_first, nulls_last, over, within_group\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Class Definitions with One-to-One Relationship\nDESCRIPTION: Defines two SQLAlchemy ORM classes A and B with a one-to-one relationship, including table definitions and foreign key constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    b = relationship(\"B\", uselist=False)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n```\n\n----------------------------------------\n\nTITLE: Using Memoized @declared_attr Functions in Declarative Mixins\nDESCRIPTION: Demonstrates the memoization behavior of @declared_attr in SQLAlchemy 1.0, where repeated calls to the same attribute return the same value. This ensures consistent column references when one declared attribute references another.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass HasFooBar(object):\n    @declared_attr\n    def foobar(cls):\n        return Column(Integer)\n\n    @declared_attr\n    def foobar_prop(cls):\n        return column_property(\"foobar: \" + cls.foobar)\n\n\nclass SomeClass(HasFooBar, Base):\n    __tablename__ = \"some_table\"\n    id = Column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Chained Joins with Eager Loading - Python\nDESCRIPTION: Illustrates the chaining of multiple joins in a SQLAlchemy query using eager loading, demonstrating how inner joins can be applied across relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(User).options(\n    joinedload(User.addresses).joinedload(Address.widgets, innerjoin=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Composite Columns in SQLAlchemy ORM Queries\nDESCRIPTION: Demonstrates how to select from a composite column which will expand out in SQLAlchemy 0.9, using the clauses attribute of the composite.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nMyClass.some_composite.clauses\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL ARRAY Indexed Access\nDESCRIPTION: This snippet shows new operator support for PostgreSQL ARRAY types. It showcases indexed access in SELECT statements and slice access in SELECT and UPDATE statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nresult = conn.execute(select([mytable.c.arraycol[2]]))\n\nresult = conn.execute(select([mytable.c.arraycol[2:4]]))\n\nconn.execute(mytable.update().values({mytable.c.arraycol[2:3]: [7, 8]}))\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraint for One-to-One Relationship in SQLAlchemy\nDESCRIPTION: This snippet shows how to add a unique constraint to the Child table to ensure a true one-to-one relationship at the database level. It uses the __table_args__ attribute to define the constraint.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import UniqueConstraint\n\n\nclass Child(Base):\n    __tablename__ = \"child_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent_table.id\"))\n    parent: Mapped[\"Parent\"] = relationship(back_populates=\"child\")\n\n    __table_args__ = (UniqueConstraint(\"parent_id\"),)\n```\n\n----------------------------------------\n\nTITLE: Resolving numpy Datatype Issues in SQLAlchemy Queries\nDESCRIPTION: This snippet demonstrates how to resolve issues with numpy datatypes by converting them to standard Python types before using them in SQLAlchemy operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = numpy.int64(10)\n\nsession.add(A(data=int(data)))\n\nresult = session.execute(select(A.data).where(int(data) == A.data))\n\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Single-Table Inheritance with select_from() in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how single-table inheritance now properly considers the discriminator column when using select_from() method, generating appropriate WHERE clauses for inheritance-based queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsess.query(Manager.id)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT employee.id FROM employee WHERE employee.type IN ('manager')\n```\n\nLANGUAGE: python\nCODE:\n```\nsess.query(func.count(1)).select_from(Manager)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(1) FROM employee WHERE employee.type IN ('manager')\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Join on Relationship Query\nDESCRIPTION: Demonstrates how to use the 'innerjoin=True' parameter in SQLAlchemy to enforce INNER JOIN in relationship queries. This can improve query performance significantly when using non-nullable foreign keys. The snippet requires an active SQLAlchemy session and the defined mapper configuration for 'Parent' and 'Child' classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n    mapper(Child, child)\n    mapper(\n        Parent,\n        parent,\n        properties={\"child\": relationship(Child, lazy=\"joined\", innerjoin=True)},\n    )\n```\n\nLANGUAGE: Python\nCODE:\n```\n    session.query(Parent).options(joinedload(Parent.child, innerjoin=True)).all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationships with Parent Class in Joined Inheritance\nDESCRIPTION: Example of setting up bidirectional relationships between a Company class and the Employee base class in a joined inheritance hierarchy. The relationship is established with the base class since the foreign key constraint is on the employee table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom sqlalchemy.orm import relationship\n\n\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    employees: Mapped[List[Employee]] = relationship(back_populates=\"company\")\n\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n    company: Mapped[Company] = relationship(back_populates=\"employees\")\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n\nclass Manager(Employee): ...\n\n\nclass Engineer(Employee): ...\n```\n\n----------------------------------------\n\nTITLE: Using with_polymorphic at Mapper Level in SQLAlchemy ORM\nDESCRIPTION: Example defining polymorphic inheritance using the with_polymorphic parameter at the mapper level to control how polymorphic loading is performed, using '*' to join all subtables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(50))\n    type = mapped_column(String(50))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"with_polymorphic\": \"*\",\n        \"polymorphic_on\": type,\n    }\n\n\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"engineer\",\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting RaiseLoad on a Relationship\nDESCRIPTION: Example of configuring a relationship with lazy=\"raise\" strategy, which raises an InvalidRequestError if accessed without being previously loaded.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(Base):\n    __tablename__ = \"some_table\"\n\n    # ...\n\n    children: Mapped[List[MyRelatedClass]] = relationship(lazy=\"raise\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Query Join with User and Address\nDESCRIPTION: Shows explicit join handling between User and Address entities using aliased tables and ON clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nu_alias = aliased(User)\nsession.query(User, u_alias).join(Address)\n```\n\n----------------------------------------\n\nTITLE: Legacy Exception Module Reference\nDESCRIPTION: Reference to the deprecated exceptions module that was replaced by sqlalchemy.exc.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nsqlalchemy.exceptions\n```\n\n----------------------------------------\n\nTITLE: Combining Relationship with Custom ON Criteria\nDESCRIPTION: This snippet shows how to augment the ON clause generated by a relationship with additional criteria using `.and_()`.  It adds a condition that limits the join to only addresses with a specific email address.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User.fullname).join(\n...     User.addresses.and_(Address.email_address == \"squirrel@squirrelpower.org\")\n... )\n```\n\n----------------------------------------\n\nTITLE: Reusing Hybrid Properties in Subclasses with SQLAlchemy\nDESCRIPTION: Demonstrates how to repurpose hybrid properties across subclasses using the @getter, @setter, and @expression decorators, allowing specialized behavior in derived classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass FirstNameOnly(Base):\n    # ...\n\n    first_name = Column(String)\n\n    @hybrid_property\n    def name(self):\n        return self.first_name\n\n    @name.setter\n    def name(self, value):\n        self.first_name = value\n\n\nclass FirstNameLastName(FirstNameOnly):\n    # ...\n\n    last_name = Column(String)\n\n    @FirstNameOnly.name.getter\n    def name(self):\n        return self.first_name + \" \" + self.last_name\n\n    @name.setter\n    def name(self, value):\n        self.first_name, self.last_name = value.split(\" \", maxsplit=1)\n\n    @name.expression\n    def name(cls):\n        return func.concat(cls.first_name, \" \", cls.last_name)\n```\n\n----------------------------------------\n\nTITLE: Dataclass Mapping with Foreign Keys\nDESCRIPTION: Demonstrates new dataclass mapping behavior where defaults are not automatically populated in __dict__, allowing for proper foreign key handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Base(MappedAsDataclass, DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, init=False)\n    related_id: Mapped[int | None] = mapped_column(ForeignKey(\"child.id\"), default=None)\n    related: Mapped[Child | None] = relationship(default=None)\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, init=False)\n```\n\n----------------------------------------\n\nTITLE: Improving Error Messages for Enum Constraint Violations\nDESCRIPTION: Enhanced the LookupError message to provide up to four possible values that a column is constrained to via the Enum class. This improves the clarity of error messages when enum constraints are violated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Inspecting Object Identity Key in SQLAlchemy\nDESCRIPTION: Demonstrates how to view the identity key of an ORM-mapped object using the inspect() API. The identity key contains the class name, primary key value, and additional state information.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import inspect\n>>> inspect(some_object).key\n(<class '__main__.MyTable'>, (1,), None)\n```\n\n----------------------------------------\n\nTITLE: Engineer Subclass with Specialized Information\nDESCRIPTION: Creates an Engineer subclass of Employee with unique attributes and polymorphic identity\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Engineer(Employee):\\n    __tablename__ = \"engineer\"\\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\\n    engineer_info: Mapped[str]\\n    __mapper_args__ = {\\n        \"polymorphic_identity\": \"engineer\",\\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Declarative Base with Type Hints\nDESCRIPTION: Creates a base class for SQLAlchemy ORM models using DeclarativeBase with type hints and mapped columns\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\\n    pass\n```\n\n----------------------------------------\n\nTITLE: Custom Type Stringification with TypeDecorator\nDESCRIPTION: Implementation of a custom UUID type decorator that provides specialized string representation of UUID values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import TypeDecorator\n\nclass UUIDStringify(TypeDecorator):\n    impl = UUID\n\n    def process_literal_param(self, value, dialect):\n        return repr(value)\n```\n\n----------------------------------------\n\nTITLE: Using Optional Types with Annotated Columns\nDESCRIPTION: Example of using Optional type modifier with Annotated mapped columns while maintaining NOT NULL constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Annotated\n\nimport datetime\nfrom typing import Optional\n\nfrom sqlalchemy.orm import DeclarativeBase\n\ntimestamp = Annotated[\n    datetime.datetime,\n    mapped_column(nullable=False),\n]\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass SomeClass(Base):\n    # pep-484 type will be Optional, but column will be\n    # NOT NULL\n    created_at: Mapped[Optional[timestamp]]\n```\n\n----------------------------------------\n\nTITLE: Adding New InstanceEvents.refresh_flush Event in SQLAlchemy ORM\nDESCRIPTION: Adds a new event InstanceEvents.refresh_flush that is invoked when an INSERT or UPDATE level default value is fetched via RETURNING or Python-side default within the flush process. This provides a hook that was removed as a result of changes in attribute and validation event handling during flushing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nInstanceEvents.refresh_flush\n```\n\n----------------------------------------\n\nTITLE: Server Default Literal Values in PostgreSQL Array\nDESCRIPTION: Demonstrates how server defaults now render literal values correctly, particularly for PostgreSQL arrays. The example shows proper DDL generation with array literals.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, MetaData, Text\nfrom sqlalchemy.schema import CreateTable\nfrom sqlalchemy.dialects.postgresql import ARRAY, array\nfrom sqlalchemy.dialects import postgresql\n\nmetadata = MetaData()\n\ntbl = Table(\n    \"derp\",\n    metadata,\n    Column(\"arr\", ARRAY(Text), server_default=array([\"foo\", \"bar\", \"baz\"])),\n)\n\nprint(CreateTable(tbl).compile(dialect=postgresql.dialect()))\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE derp (\n    arr TEXT[] DEFAULT ARRAY['foo', 'bar', 'baz']\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model with SQLAlchemy ORM\nDESCRIPTION: This snippet defines the Item model consisting of an id, name, and description. It represents items that can be ordered and tracked within the database, ensuring a structured approach to item management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_plain_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Item(Base):\n    __tablename__ = \"item\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    description: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Applying Naming Convention to CheckConstraint in SQLAlchemy\nDESCRIPTION: Demonstrates how the naming_convention feature now applies to CheckConstraint objects associated directly with a Column, not just on the Table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMetaData.naming_convention\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-One Relationships in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to create and execute a query comparing a many-to-one relationship to an object value, showing both basic usage and handling of detached objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nu1 = session.query(User).get(5)\n\nquery = session.query(Address).filter(Address.user == u1)\n```\n\n----------------------------------------\n\nTITLE: Using Case Function with Dictionary in SQLAlchemy SQL\nDESCRIPTION: Demonstrates how to use the case() function in SQLAlchemy with a dictionary for the 'whens' parameter. It also explains how string values are interpreted as bound values by default.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncase([(x==y, \"foo\")])\n```\n\n----------------------------------------\n\nTITLE: Set-Like Collection with Explicit Interface\nDESCRIPTION: Shows a custom collection that emulates set behavior using the __emulates__ attribute for explicit interface declaration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    @collection.appender\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```\n\n----------------------------------------\n\nTITLE: Using the Count Method with Session.get_bind()\nDESCRIPTION: Example of using the count() method on a SQLAlchemy Query object, which now properly passes the Mapper to Session.get_bind().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User).count()\n```\n\n----------------------------------------\n\nTITLE: Complex Overlapping Foreign Keys Relationship\nDESCRIPTION: Handles a complex scenario with multiple relationships involving overlapping foreign key columns\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwriter = relationship(\n    \"Writer\",\n    primaryjoin=\"and_(Writer.id == foreign(Article.writer_id), \"\n    \"Writer.magazine_id == Article.magazine_id)\",\n)\n```\n\n----------------------------------------\n\nTITLE: Bindparam Type Upgrades in SQLAlchemy Expressions\nDESCRIPTION: This snippet showcases improvements in handling untyped bind parameters in expressions. When used within an expression or statement, bindparams are copied and automatically assigned types based on associated columns, ensuring integrity during execution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nbp = bindparam(\"some_col\")\nexpr = mytable.c.col == bp\nstmt = mytable.update().values(col=bp)\ncompiled = stmt.compile()\ncompiled.binds[\"some_col\"].type\n```\n\n----------------------------------------\n\nTITLE: Filtering with Parent Relationship in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet shows how to filter entities based on a parent relationship using with_parent in a SQLAlchemy 1.4/2.0 compatible select statement. It filters Address entities to retrieve those associated with a specific User instance (u1) through the User.addresses relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = select(Address).where(with_parent(u1, User.addresses))\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Aliased Entities Example - Python/SQLAlchemy\nDESCRIPTION: Demonstrates using aliased entities with Query.select_from() to join a table to itself while maintaining proper column selection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nua = aliased(User)\nsession.query(User.name).select_from(ua).join(User, User.name > ua.name)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.name AS users_name FROM users AS users_1\nJOIN users ON users.name < users_1.name\n```\n\n----------------------------------------\n\nTITLE: Adding scalar() and value() Methods to SQLAlchemy ORM Query\nDESCRIPTION: Introduced scalar() and value() methods to Query for returning single scalar values. scalar() is equivalent to first()[0], while value(expr) is similar to values(expr).next()[0].\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nQuery.scalar()\nQuery.value(expr)\n```\n\n----------------------------------------\n\nTITLE: Using UPDATE FROM with Joined Inheritance in SQLAlchemy\nDESCRIPTION: Demonstrates using Query.update() with joined inheritance tables in SQLAlchemy, allowing updates to be applied to joined-inheritance entities through parent-child relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery(Engineer).filter(Person.id == Engineer.id).filter(\n    Person.name == \"dilbert\"\n).update({\"engineer_data\": \"java\"})\n```\n\n----------------------------------------\n\nTITLE: Mixed Named Argument Style Event Listener in Python\nDESCRIPTION: Shows how to mix specific named arguments with **kw catch-all in event listeners. Demonstrates flexible argument handling while maintaining named argument style.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(dbapi_connection, **kw):\n    print(\"New DBAPI connection:\", dbapi_connection)\n    print(\"Connection record:\", kw[\"connection_record\"])\n```\n\n----------------------------------------\n\nTITLE: Relationship Configuration with Mapper Events\nDESCRIPTION: Uses SQLAlchemy's mapper events to configure relationships dynamically, allowing late initialization and integration with typing systems. This approach helps resolve dependencies and avoid early mapper configuration issues.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/join_conditions.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(A, \"before_mapper_configured\")\ndef _configure_ab_relationship(mapper, cls):\n    j = join(B, D, D.b_id == B.id).join(C, C.id == D.c_id)\n    B_viacd = aliased(B, j, flat=True)\n    A.b = relationship(B_viacd, primaryjoin=A.b_id == j.c.b_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raiseload with Deferred Columns in SQLAlchemy\nDESCRIPTION: Example demonstrating how to use defer() with raiseload=True to prevent lazy loading of deferred columns and raise exceptions on access.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbook = session.scalar(\n    select(Book).options(defer(Book.cover_photo, raiseload=True)).where(Book.id == 4)\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New text() Capabilities in SQLAlchemy\nDESCRIPTION: Illustrates the new capabilities of the text() construct in SQLAlchemy, including binding parameters and specifying column types. These enhancements provide more flexibility when working with raw SQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# setup values\nstmt = text(\n    \"SELECT id, name FROM user WHERE name=:name AND timestamp=:timestamp\"\n).bindparams(name=\"ed\", timestamp=datetime(2012, 11, 10, 15, 12, 35))\n\n# setup types and/or values\nstmt = (\n    text(\"SELECT id, name FROM user WHERE name=:name AND timestamp=:timestamp\")\n    .bindparams(bindparam(\"name\", value=\"ed\"), bindparam(\"timestamp\", type_=DateTime()))\n    .bindparam(timestamp=datetime(2012, 11, 10, 15, 12, 35))\n)\n\n# turn a text() into an alias(), with a .c. collection:\nstmt = text(\"SELECT id, name FROM user\").columns(id=Integer, name=String)\nstmt = stmt.alias()\n\nstmt = select([addresses]).select_from(\n    addresses.join(stmt), addresses.c.user_id == stmt.c.id\n)\n\n\n# or into a cte():\nstmt = text(\"SELECT id, name FROM user\").columns(id=Integer, name=String)\nstmt = stmt.cte(\"x\")\n\nstmt = select([addresses]).select_from(\n    addresses.join(stmt), addresses.c.user_id == stmt.c.id\n)\n```\n\n----------------------------------------\n\nTITLE: Using flag_dirty() to Mark Objects as Modified in SQLAlchemy ORM\nDESCRIPTION: Demonstrates the new flag_dirty() function for marking objects as dirty without specifying attributes, and shows how flag_modified() now raises exceptions for unloaded attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\na1 = A(data=\"adf\")\ns.add(a1)\n\ns.flush()\n\n# expire, similarly as though we said s.commit()\ns.expire(a1, \"data\")\n\n# will raise InvalidRequestError\nattributes.flag_modified(a1, \"data\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import attributes\n\nattributes.flag_dirty(a1)\n```\n\n----------------------------------------\n\nTITLE: Using with_for_update in SQLAlchemy Select Statements\nDESCRIPTION: Demonstrates how to create a SELECT statement with FOR UPDATE/SHARE clause with read, nowait, and of parameters. This generates specialized locking behaviors in database systems like PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nstmt = select([table]).with_for_update(read=True, nowait=True, of=table)\n```\n\n----------------------------------------\n\nTITLE: Database-Specific SQL Stringification using SQLAlchemy Engine in Python\nDESCRIPTION: Illustrates how to stringify a SQLAlchemy statement for a specific database using an Engine object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"mysql+pymysql://scott:tiger@localhost/test\")\nprint(statement.compile(engine))\n```\n\n----------------------------------------\n\nTITLE: Using ORM Classes with Core SQL Constructs in SQLAlchemy\nDESCRIPTION: Demonstrates how mapped ORM classes can be accepted directly by SQLAlchemy Core constructs like select(), select_from(), and correlate(), where they expand into the underlying Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\n\nstmt = select([User]).where(User.id == 5)\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators in SQLAlchemy\nDESCRIPTION: Shows how to use arithmetic operators like addition, subtraction, multiplication, division, and modulus in SQLAlchemy expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") + 5)\nprint(5 + column(\"x\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx + :x_1\n:x_1 + x\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") - 5)\nprint(5 - column(\"x\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx - :x_1\n:x_1 - x\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") * 5)\nprint(5 * column(\"x\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx * :x_1\n:x_1 * x\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") / 5)\nprint(5 / column(\"x\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx / CAST(:x_1 AS NUMERIC)\n:x_1 / CAST(x AS NUMERIC)\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") // 5)\nprint(5 // column(\"x\", Integer))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx / :x_1\n:x_1 / x\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") // 5.5)\nprint(5 // column(\"x\", Numeric))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nFLOOR(x / :x_1)\nFLOOR(:x_1 / x)\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\") % 5)\nprint(5 % column(\"x\"))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx % :x_1\n:x_1 % x\n```\n\n----------------------------------------\n\nTITLE: Mapping to Joins with Same-Named Columns in Python\nDESCRIPTION: Illustrates how to map a class to a join of two tables that have same-named columns in SQLAlchemy 0.7. Explicit column-to-attribute mapping is now required to avoid ambiguity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfoobar = foo.join(bar, foo.c.id == bar.c.foo_id)\nmapper(FooBar, foobar, properties={\"id\": [foo.c.id, bar.c.id]})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Session Closure Issues with Result Objects in SQLAlchemy\nDESCRIPTION: Example demonstrating how trying to use a Result object after the originating Session has been closed leads to errors. Shows the problem scenario where objects can't be converted to persistent state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# context manager creates new Session\nwith Session(engine) as session_obj:\n    result = sess.execute(select(User).where(User.id == 7))\n\n# context manager is closed, so session_obj above is closed, identity\n# map is replaced\n\n# iterating the result object can't associate the object with the\n# Session, raises this error.\nuser = result.first()\n```\n\n----------------------------------------\n\nTITLE: Using declared_attr.cascading on Mapped Classes\nDESCRIPTION: A warning is emitted when using the declared_attr.cascading modifier on a declarative attribute declared on a mapped class instead of a mixin or abstract class. The modifier currently only applies to mixin/abstract classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndeclared_attr.cascading\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operators in SQLAlchemy\nDESCRIPTION: Demonstrates the use of bitwise operators like NOT, AND, OR, XOR, and bit shifts in SQLAlchemy expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").bitwise_not())\n```\n\nLANGUAGE: SQL\nCODE:\n```\n~x\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import bitwise_not\nprint(bitwise_not(column(\"x\")))\n```\n\nLANGUAGE: SQL\nCODE:\n```\n~x\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").bitwise_and(5))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx & :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").bitwise_or(5))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx | :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").bitwise_xor(5))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx ^ :x_1\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects import postgresql\nprint(column(\"x\").bitwise_xor(5).compile(dialect=postgresql.dialect()))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx # %(x_1)s\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(column(\"x\").bitwise_rshift(5))\nprint(column(\"x\").bitwise_lshift(5))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nx >> :x_1\nx << :x_1\n```\n\n----------------------------------------\n\nTITLE: Association Proxy in SQLAlchemy with Scalar Values\nDESCRIPTION: Definition of classes using association proxy to refer to a scalar value on a scalar relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\n    b_id = Column(Integer, ForeignKey(\"b.id\"), primary_key=True)\n    b = relationship(\"B\")\n    b_value = association_proxy(\"b\", \"value\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    value = Column(String)\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite Data Types in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to import SQLite-specific data types from the SQLAlchemy dialect. It includes a comprehensive list of supported data types that are valid for use with SQLite.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/sqlite.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects.sqlite import (\n    BLOB,\n    BOOLEAN,\n    CHAR,\n    DATE,\n    DATETIME,\n    DECIMAL,\n    FLOAT,\n    INTEGER,\n    NUMERIC,\n    JSON,\n    SMALLINT,\n    TEXT,\n    TIME,\n    TIMESTAMP,\n    VARCHAR,\n)\n```\n\n----------------------------------------\n\nTITLE: Joined Eager Load with Table Aliasing\nDESCRIPTION: Example of joined eager loading with individual table aliasing instead of ANON_1 wrapping.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parent.*, base_table_1.*, subclass_table_1.* FROM parent\n    LEFT OUTER JOIN (\n        base_table AS base_table_1 JOIN subclass_table AS subclass_table_1\n        ON base_table_1.id = subclass_table_1.id)\n        ON parent.id = base_table_1.parent_id\n```\n\n----------------------------------------\n\nTITLE: Using FOR UPDATE with Session.refresh in SQLAlchemy\nDESCRIPTION: Demonstrates the new with_for_update parameter for Session.refresh method, allowing row locking during object refresh operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsession.refresh(some_object, with_for_update=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nsession.refresh(some_objects, with_for_update={\"read\": True})\n```\n\n----------------------------------------\n\nTITLE: Adding TypeEngine.compare_against_backend Method in SQLAlchemy SQL\nDESCRIPTION: Adds a placeholder method TypeEngine.compare_against_backend that is consumed by Alembic migrations. User-defined types can implement this method to assist in comparing a type against one reflected from the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nTypeEngine.compare_against_backend\n```\n\n----------------------------------------\n\nTITLE: SQL for Association Proxy Not Equal to None in 0.9\nDESCRIPTION: Improved SQL generated in SQLAlchemy 0.9 for a query using an association proxy compared with not equal to None, ensuring both that the association row exists and that the value is not NULL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.b_id AS a_b_id\nFROM a\nWHERE EXISTS (SELECT 1\nFROM b\nWHERE b.id = a.b_id AND b.value IS NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Index in SQLAlchemy Table Definition\nDESCRIPTION: Demonstrates how to create an Index inline within a Table definition in SQLAlchemy, using strings as column names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTable(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(50), nullable=False),\n    Index(\"idx_name\", \"name\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Boolean Operator Usage Example\nDESCRIPTION: Example demonstrating the use of bool_op for creating custom boolean operators in SQLAlchemy expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nprint(column(\"x\", types.Integer).bool_op(\"-%>\")(5))\n```\n\n----------------------------------------\n\nTITLE: Using Query.join() with Variable Arguments in SQLAlchemy\nDESCRIPTION: Example of using Query.join() and Query.outerjoin() methods with both string relationship names and class descriptors. These methods now accept variable-length arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nquery.join(\"orders\", \"items\")\nquery.join(User.orders, Order.items)\n```\n\n----------------------------------------\n\nTITLE: Division Operator Examples with Integer Literals\nDESCRIPTION: Shows true division and floor division operations using SQLAlchemy's expression language, which now produce consistent results across all database backends.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nexpr = literal(5, Integer) / literal(10, Integer)\n\n# Floor division example\nexpr = literal(5, Integer) // literal(10, Integer)\n\n# Pre-2.0 compatible floor division\nexpr = func.floor(literal(5, Integer) / literal(10, Integer))\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Inactive Transactions in SQLAlchemy 1.4\nDESCRIPTION: This snippet explains a condition that arises during transaction management in SQLAlchemy, particularly focusing on the execution of commands when a connection is associated with an inactive transaction that needs to be rolled back, introduced in version 1.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nconnection = engine.connect()\ntransaction1 = connection.begin()\ntransaction2 = connection.begin()\ntransaction2.rollback()\n# transaction1 must still be rolled back before proceeding\nconnection.execute(text(\"select 1\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Testing Framework in setup.cfg\nDESCRIPTION: Configuration file setup for pytest and SQLAlchemy testing framework including test requirements and database profiles\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[tool:pytest]\naddopts= --tb native -v -r fxX --maxfail=25 -p no:warnings\npython_files=test/*test_*.py\n\n[sqla_testing]\nrequirement_cls=sqlalchemy_access.requirements:Requirements\nprofile_file=test/profiles.txt\n\n[db]\ndefault=access+pyodbc://admin@access_test\nsqlite=sqlite:///:memory:\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Logic in Hybrid Properties\nDESCRIPTION: This snippet showcases a hybrid property that incorporates conditional logic for generating the fullname, differentiating between SQL expressions and Python expressions using the `@fullname.expression` decorator.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_sql_expr.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.sql import case\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    firstname = mapped_column(String(50))\n    lastname = mapped_column(String(50))\n\n    @hybrid_property\n    def fullname(self):\n        if self.firstname is not None:\n            return self.firstname + \" \" + self.lastname\n        else:\n            return self.lastname\n\n    @fullname.expression\n    def fullname(cls):\n        return case(\n            (cls.firstname != None, cls.firstname + \" \" + cls.lastname),\n            else_=cls.lastname,\n        )\n```\n\n----------------------------------------\n\nTITLE: Joined Table Inheritance Update with FROM\nDESCRIPTION: Shows how to update a joined-table inheritance mapping using UPDATE...FROM syntax for supported backends\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = (\n...     update(Manager)\n...     .where(Manager.id == Employee.id, Employee.name == \"sandy\")\n...     .values(manager_name=\"Sandy Cheeks, President\")\n... )\n>>> session.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Disabling Reset-on-Return for Non-Transactional Connections\nDESCRIPTION: Example of creating an engine with reset-on-return disabled and AUTOCOMMIT isolation level, suitable for non-ACID databases or connections that don't need transaction state reset.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnon_acid_engine = create_engine(\n    \"mysql://scott:tiger@host/db\",\n    pool_reset_on_return=None,\n    isolation_level=\"AUTOCOMMIT\",\n)\n```\n\n----------------------------------------\n\nTITLE: Property Descriptor for Dynamic Attribute Computation\nDESCRIPTION: Example of using a Python property decorator to dynamically compute an attribute value based on mapped attributes\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Point(Base):\n    __tablename__ = \"point\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    x: Mapped[int]\n    y: Mapped[int]\n\n    @property\n    def x_plus_y(self):\n        return self.x + self.y\n```\n\n----------------------------------------\n\nTITLE: Warning System with Parameterized Messages in SQLAlchemy\nDESCRIPTION: Demonstrates the new warning system that safely handles parameterized warning messages without unbounded growth of the warning registry. Shows Unicode warning example.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine, Unicode, select, cast\nimport random\nimport warnings\n\ne = create_engine(\"sqlite://\")\n\nwarnings.filterwarnings(\"once\")\n\nfor i in range(1000):\n    e.execute(\n        select([cast((\"foo_%d\" % random.randint(0, 1000000)).encode(\"ascii\"), Unicode)])\n    )\n```\n\n----------------------------------------\n\nTITLE: Hybrid Table Style Declarative Mapping in SQLAlchemy\nDESCRIPTION: Demonstrates hybrid table style mapping where Table objects are defined separately from the class and referenced via __table__. Shows relationship configuration and deferred column loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, ForeignKey, Integer, String, Table, Text\nfrom sqlalchemy.orm import column_property\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import deferred\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"firstname\", String(50)),\n        Column(\"lastname\", String(50)),\n    )\n\n    fullname = column_property(__table__.c.firstname + \" \" + __table__.c.lastname)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\n\nclass Address(Base):\n    __table__ = Table(\n        \"address\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"user_id\", ForeignKey(\"user.id\")),\n        Column(\"email_address\", String),\n        Column(\"address_statistics\", Text),\n    )\n\n    address_statistics = deferred(__table__.c.address_statistics)\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n```\n\n----------------------------------------\n\nTITLE: Creating Employee, Project, and Employee_Project Tables\nDESCRIPTION: This SQL snippet defines the database schema for a many-to-many relationship between employees and projects, utilizing a junction table called 'employee_project'. The 'employee_project' table contains foreign keys referencing both 'employee' and 'project' tables, creating a composite primary key.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE employee (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE project (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE employee_project (\n    employee_id INTEGER PRIMARY KEY,\n    project_id INTEGER PRIMARY KEY,\n    FOREIGN KEY employee_id REFERENCES employee(id),\n    FOREIGN KEY project_id REFERENCES project(id)\n)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching for Custom Types in SQLAlchemy\nDESCRIPTION: Demonstrates how to enable SQL compilation caching for custom types by setting the cache_ok attribute to True. This should only be done if the custom type does not include additional state attributes that affect SQL rendering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomType(TypeDecorator):\n    cache_ok = True\n    impl = String\n```\n\n----------------------------------------\n\nTITLE: Binding Specific Mapper to Autocommit Engine in SQLAlchemy Session\nDESCRIPTION: Demonstrates how to bind a specific mapper to an autocommit engine within a session. This allows for fine-grained control over isolation levels for different parts of the application.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwith Session() as session:\n    session.bind_mapper(User, autocommit_engine)\n```\n\n----------------------------------------\n\nTITLE: Using Synonyms for ORM Attributes in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to use `synonym` to create an additional name for an existing attribute on a mapped class. Both attributes will behave as one, at both the expression and instance levels. This is an easy way to make an attribute available by an additional name.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapped_attributes.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import synonym\n\n\nclass MyClass(Base):\n    __tablename__ = \"my_table\"\n\n    id = mapped_column(Integer, primary_key=True)\n    job_status = mapped_column(String(50))\n\n    status = synonym(\"job_status\")\n```\n\n----------------------------------------\n\nTITLE: GUID with Hyphens TypeDecorator in SQLAlchemy\nDESCRIPTION: An extension of the GUID TypeDecorator that stores UUIDs with hyphens using CHAR(36) instead of the hex format.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass GUIDHyphens(GUID):\n    \"\"\"Platform-independent GUID type.\n\n    Uses PostgreSQL's UUID type or MSSQL's UNIQUEIDENTIFIER,\n    otherwise uses CHAR(36), storing as stringified uuid values.\n    \"\"\"\n\n    _default_type = CHAR(36)\n    _uuid_as_str = str\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Loading with Selectin Strategy\nDESCRIPTION: Example demonstrating selectin polymorphic loading for Employee class hierarchy, loading subclass attributes through separate IN queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery = session.query(Employee).options(\n    selectin_polymorphic(Employee, [Manager, Engineer])\n)\n\nquery.all()\n```\n\n----------------------------------------\n\nTITLE: Advanced Attribute Configuration Example\nDESCRIPTION: Demonstrates advanced attribute configuration with init and default values for field customization.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[str] = mapped_column(default=None)\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Window Function Example\nDESCRIPTION: Shows the SQL output generated by the window function example in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT empsalary.depname, empsalary.empno, empsalary.salary,\navg(empsalary.salary) OVER (PARTITION BY empsalary.depname) AS avg\nFROM empsalary\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MySQL ON DUPLICATE KEY UPDATE Ordering\nDESCRIPTION: Example showing how to explicitly control parameter ordering in MySQL's ON DUPLICATE KEY UPDATE clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.mysql import insert\n\ninsert_stmt = insert(my_table).values(id=\"some_existing_id\", data=\"inserted value\")\n\non_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n    [\n        (\"data\", \"some data\"),\n        (\"updated_at\", func.current_timestamp()),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relationship Comparison Behavior with Changed Values\nDESCRIPTION: Code snippet showing how relationship comparisons behave when an object's primary key is changed but not flushed. It demonstrates how the filter criteria in queries use either the current or previous value depending on context.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ns = Session(autoflush=False)\na1 = A(id=7)\ns.add(a1)\ns.commit()\n\na1.id = 10\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table with Engine-Specific Options\nDESCRIPTION: Demonstrates how to create a table in MySQL with backend-specific options using SQLAlchemy. The example shows setting the storage engine to InnoDB while defining table structure with columns and foreign key constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\naddresses = Table(\n    \"engine_email_addresses\",\n    metadata_obj,\n    Column(\"address_id\", Integer, primary_key=True),\n    Column(\"remote_user_id\", Integer, ForeignKey(users.c.user_id)),\n    Column(\"email_address\", String(20)),\n    mysql_engine=\"InnoDB\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding NCHAR Datatype Support for Oracle (SQL)\nDESCRIPTION: Added support for reflecting the NCHAR datatype in the Oracle dialect and added NCHAR to the list of exported types for Oracle.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Using Derived Table Subquery in FROM Clause with Alias in SQL\nDESCRIPTION: This SQL snippet demonstrates a derived table subquery in the FROM clause with an alias. It joins the user table with a subquery that selects user_id and email_address from the address table where address_type is 'Q'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.id, user.name, ad_subq.email_address\nFROM\n    user JOIN\n    (select user_id, email_address FROM address WHERE address_type='Q') AS ad_subq\n    ON user.id = ad_subq.user_id\n```\n\n----------------------------------------\n\nTITLE: Accessing Object State in after_rollback Session Event in SQLAlchemy ORM\nDESCRIPTION: Shows how the after_rollback() event now emits before object expiration, allowing access to attribute state similar to after_commit(). This code demonstrates event listeners for both rollback and commit scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsess = Session()\n\nuser = sess.query(User).filter_by(name=\"x\").first()\n\n\n@event.listens_for(sess, \"after_rollback\")\ndef after_rollback(session):\n    # 'user.name' is now present, assuming it was already\n    # loaded.  previously this would raise upon trying\n    # to emit a lazy load.\n    print(\"user name: %s\" % user.name)\n\n\n@event.listens_for(sess, \"after_commit\")\ndef after_commit(session):\n    # 'user.name' is present, assuming it was already\n    # loaded.  this is the existing behavior.\n    print(\"user name: %s\" % user.name)\n\n\nif should_rollback:\n    sess.rollback()\nelse:\n    sess.commit()\n```\n\n----------------------------------------\n\nTITLE: Named Argument Style Event Listener in Python\nDESCRIPTION: Demonstrates using named argument style for event listeners with the named=True parameter. Shows how to receive event arguments as keyword arguments instead of positional arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/event.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.event import listens_for\nfrom sqlalchemy.pool import Pool\n\n\n@listens_for(Pool, \"connect\", named=True)\ndef my_on_connect(**kw):\n    print(\"New DBAPI connection:\", kw[\"dbapi_connection\"])\n```\n\n----------------------------------------\n\nTITLE: SQL Comparison with Scalar Subquery in MS-SQL\nDESCRIPTION: Demonstrates the changed behavior in MS-SQL dialect for comparing against scalar subqueries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nscalar_subq = select([someothertable.c.id]).where(someothertable.c.data == \"foo\")\nselect([sometable]).where(sometable.c.id == scalar_subq)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Basic Relationship Mapping\nDESCRIPTION: Demonstrates basic one-to-many relationship mapping between two classes A and B with back references.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    bs = relationship(\"B\", backref=\"a\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid ORDER BY on Joined Load - Python\nDESCRIPTION: Shows an incorrect example where an ORDER BY clause attempts to reference an alias not present in the query's FROM clause, illustrating the limitations of joined eager loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstmt = (\n    select(User)\n    .options(joinedload(User.addresses))\n    .filter(User.name == \"spongebob\")\n    .order_by(Address.email_address)\n)\n```\n\n----------------------------------------\n\nTITLE: Fixing COLLATE Keyword Usage in MySQL CREATE TABLE Statements\nDESCRIPTION: Addressed an issue where CREATE TABLE statements were not specifying the COLLATE keyword correctly in MySQL. This ensures proper collation settings are applied when creating tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: User Model with Query Expression\nDESCRIPTION: Defines a User model with a book_count attribute that can receive SQL expressions at query time\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user_account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    fullname: Mapped[Optional[str]]\n    book_count: Mapped[int] = query_expression()\n\n    def __repr__(self) -> str:\n        return f\"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})\"\n```\n\n----------------------------------------\n\nTITLE: Adding only_return_tuples Method to Query Class in SQLAlchemy ORM\nDESCRIPTION: Adds a new method only_return_tuples() to the Query class, which causes the Query to return keyed tuple objects unconditionally, even for queries against a single entity. This feature was contributed via pull request by Eric Atkin.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nQuery.only_return_tuples()\n```\n\n----------------------------------------\n\nTITLE: Range Type Model Definition Example\nDESCRIPTION: Example of defining a SQLAlchemy model using PostgreSQL's TSRANGE type with the Range class for datetime ranges.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom sqlalchemy.dialects.postgresql import Range\nfrom sqlalchemy.dialects.postgresql import TSRANGE\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass RoomBooking(Base):\n    __tablename__ = \"room_booking\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    room: Mapped[str]\n    during: Mapped[Range[datetime]] = mapped_column(TSRANGE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence with Default Start Value in SQLAlchemy 1.4\nDESCRIPTION: Shows how SQLAlchemy 1.4 handled sequence creation with an implicit start value of 1.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# SQLAlchemy 1.4 (only)\nfrom sqlalchemy import Sequence\nfrom sqlalchemy.schema import CreateSequence\nprint(CreateSequence(Sequence(\"my_seq\")))\n```\n\n----------------------------------------\n\nTITLE: Custom Slow Type Decorator Example\nDESCRIPTION: Example implementation of a SQLAlchemy TypeDecorator that artificially adds processing time to demonstrate how to identify type-level processing bottlenecks in profiling output.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import TypeDecorator\nimport time\n\nclass Foo(TypeDecorator):\n    impl = String\n\n    def process_result_value(self, value, thing):\n        # intentionally add slowness for illustration purposes\n        time.sleep(0.001)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Logging for Testing\nDESCRIPTION: Command to run pytest with specific SQLAlchemy logging enabled. This example shows how to direct SQLAlchemy's pool and engine logs to the console for debugging purposes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ ./pytest test/orm/test_unitofwork.py -s \\\n  --log-debug=sqlalchemy.pool --log-info=sqlalchemy.engine\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Mapper Configuration with Inline Table in SQLAlchemy\nDESCRIPTION: Demonstrates how to set up a polymorphic mapper configuration using an inline Table definition in a declarative mapped class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass Person(Base):\n    __table__ = Table(\n        \"person\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String(50)),\n        Column(\"type\", String(50)),\n    )\n\n    __mapper_args__ = {\n        \"polymorphic_on\": __table__.c.type,\n        \"polymorphic_identity\": \"person\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Clause with Insert Statements (Python)\nDESCRIPTION: Example of using the new returning() method with an insert statement to retrieve generated values from supported databases (PostgreSQL, Oracle, MS-SQL, Firebird). This allows fetching auto-generated values in a single operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresult = connection.execute(\n    table.insert().values(data=\"some data\").returning(table.c.id, table.c.timestamp)\n)\nrow = result.first()\n```\n\n----------------------------------------\n\nTITLE: Querying with Polymorphic Filtering in Python\nDESCRIPTION: Shows how querying behavior has changed in SQLAlchemy 0.7 when filtering on a column from a child class in a polymorphic query. Demonstrates the use of with_polymorphic() to achieve correct results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Parent).filter(Child.id > 7)\n\nprint(s.query(Parent).with_polymorphic([Child]).filter(Child.id > 7))\n```\n\n----------------------------------------\n\nTITLE: Scalar Value Typing in SQLAlchemy 2.0\nDESCRIPTION: Example showing type handling for scalar values with single-column statements, demonstrating proper typing with methods like scalar() and scalars().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# (variable) data: Sequence[str]\n```\n\n----------------------------------------\n\nTITLE: Importing nullsfirst and nullslast Functions in SQLAlchemy\nDESCRIPTION: Added nullsfirst and nullslast as top level imports in the sqlalchemy and sqlalchemy.sql namespace for easier access to these SQL ordering functions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import nullsfirst, nullslast\n```\n\n----------------------------------------\n\nTITLE: Using Engine Transaction Context Manager in Python\nDESCRIPTION: Demonstrates how to use the new context manager for Engine transactions in SQLAlchemy. This allows for automatic connection handling and transaction management.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith engine.begin() as conn:\n    # <work with conn in a transaction>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Property-Based Expressions in SQLAlchemy 0.4 ORM Queries\nDESCRIPTION: Illustrates the new property-based expression constructs in SQLAlchemy 0.4, allowing for more intuitive and powerful querying capabilities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User).filter(and_(User.name == \"fred\", User.id > 17))\n\n# comparison of scalar relations to an instance\nfilter(Address.user == user)\n\n# return all users who contain a particular address\nfilter(User.addresses.contains(address))\n\n# return all users who *dont* contain the address\nfilter(~User.address.contains(address))\n\n# return all users who contain a particular address with\n# the email_address like '%foo%'\nfilter(User.addresses.any(Address.email_address.like(\"%foo%\")))\n\n# same, email address equals 'foo@bar.com'.  can fall back to keyword\n# args for simple comparisons\nfilter(User.addresses.any(email_address=\"foo@bar.com\"))\n\n# return all Addresses whose user attribute has the username 'ed'\nfilter(Address.user.has(name=\"ed\"))\n\n# return all Addresses whose user attribute has the username 'ed'\n# and an id > 5 (mixing clauses with kwargs)\nfilter(Address.user.has(User.id > 5, name=\"ed\"))\n```\n\n----------------------------------------\n\nTITLE: Using the 'modified' Event with SQLAlchemy's Mutable Extension\nDESCRIPTION: Shows how to set up an event listener for the 'modified' event triggered by SQLAlchemy's mutable extension, which is called when a mutable object is modified in-place.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.mutable import MutableDict\nfrom sqlalchemy import event\n\nBase = declarative_base()\n\n\nclass MyDataClass(Base):\n    __tablename__ = \"my_data\"\n    id = Column(Integer, primary_key=True)\n    data = Column(MutableDict.as_mutable(JSONEncodedDict))\n\n\n@event.listens_for(MyDataClass.data, \"modified\")\ndef modified_json(instance):\n    print(\"json value modified:\", instance.data)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dialect Arguments to SQLAlchemy Constructs\nDESCRIPTION: Demonstrates how to add and use custom dialect-specific arguments for schema constructs like Index using the new argument_for method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nIndex.argument_for(\"mysql\", \"someargument\", False)\n\nidx = Index(\"a\", \"b\", mysql_someargument=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DDL Elements with Compiler Extensions (Python)\nDESCRIPTION: Example of creating a custom DDL element (AlterColumn) using the sqlalchemy.ext.compiler extension. This allows for dialect-specific DDL operations that aren't natively supported by SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import DDLElement\nfrom sqlalchemy.ext.compiler import compiles\n\n\nclass AlterColumn(DDLElement):\n    def __init__(self, column, cmd):\n        self.column = column\n        self.cmd = cmd\n\n\n@compiles(AlterColumn)\ndef visit_alter_column(element, compiler, **kw):\n    return \"ALTER TABLE %s ALTER COLUMN %s %s ...\" % (\n        element.column.table.name,\n        element.column.name,\n        element.cmd,\n    )\n\n\nengine.execute(AlterColumn(table.c.mycolumn, \"SET DEFAULT 'test'\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Statement Caching\nDESCRIPTION: Shows how to implement a caching system for ORM queries using do_orm_execute event and result freezing functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import loading\n\ncache = {}\n\n@event.listens_for(Session, \"do_orm_execute\")\ndef _do_orm_execute(orm_execute_state):\n    if \"my_cache_key\" in orm_execute_state.execution_options:\n        cache_key = orm_execute_state.execution_options[\"my_cache_key\"]\n\n        if cache_key in cache:\n            frozen_result = cache[cache_key]\n        else:\n            frozen_result = orm_execute_state.invoke_statement().freeze()\n            cache[cache_key] = frozen_result\n\n        return loading.merge_frozen_result(\n            orm_execute_state.session,\n            orm_execute_state.statement,\n            frozen_result,\n            load=False,\n        )\n```\n\n----------------------------------------\n\nTITLE: Using with_polymorphic() for Polymorphic Entity Queries in SQLAlchemy\nDESCRIPTION: Demonstrates the with_polymorphic() function for creating polymorphic aliases of entities that can be used anywhere in queries, allowing polymorphic loading control for joined-table inheritance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import with_polymorphic\n\npalias = with_polymorphic(Person, [Engineer, Manager])\nsession.query(Company).join(palias, Company.employees).filter(\n    or_(Engineer.language == \"java\", Manager.hair == \"pointy\")\n)\n```\n\n----------------------------------------\n\nTITLE: Cascading Scalar Deletes with Association Proxies\nDESCRIPTION: Illustrates the use of cascade_scalar_deletes parameter in association proxies for automatic removal of association objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.associationproxy import association_proxy, AssociationProxy\nfrom sqlalchemy.orm import DeclarativeBase, relationship\nfrom sqlalchemy.orm.collections import attribute_keyed_dict\nfrom sqlalchemy.orm.collections import Mapped\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass A(Base):\n    __tablename__ = \"test_a\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    ab: Mapped[AB] = relationship(uselist=False)\n    b: AssociationProxy[B] = association_proxy(\n        \"ab\", \"b\", creator=lambda b: AB(b=b), cascade_scalar_deletes=True\n    )\n\n\nclass B(Base):\n    __tablename__ = \"test_b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n\nclass AB(Base):\n    __tablename__ = \"test_ab\"\n    a_id: Mapped[int] = mapped_column(ForeignKey(A.id), primary_key=True)\n    b_id: Mapped[int] = mapped_column(ForeignKey(B.id), primary_key=True)\n\n    b: Mapped[B] = relationship()\n```\n\n----------------------------------------\n\nTITLE: Simple Row Data Print\nDESCRIPTION: Prints ID and timestamp values from a database row dictionary.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint(\"ID:\", row[\"id\"], \"Timestamp:\", row[\"timestamp\"])\n```\n\n----------------------------------------\n\nTITLE: Table Reflection in Python and SQL\nDESCRIPTION: Illustrates table reflection by creating a Table object that represents an existing table in the database. It uses the autoload_with parameter to automatically load table information from the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> some_table = Table(\"some_table\", metadata_obj, autoload_with=engine)\n```\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN (implicit)\nPRAGMA main.table_...info(\"some_table\")\n[raw sql] ()\nSELECT sql FROM  (SELECT * FROM sqlite_master UNION ALL   SELECT * FROM sqlite_temp_master) WHERE name = ? AND type in ('table', 'view')\n[raw sql] ('some_table',)\nPRAGMA main.foreign_key_list(\"some_table\")\n...\nPRAGMA main.index_list(\"some_table\")\n...\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships with Local Column References in Python\nDESCRIPTION: Demonstrates how to define a relationship in SQLAlchemy 0.7 using a primaryjoin condition that references the local Child.id column instead of the inherited Parent.id column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n    some_related = relationship(\n        \"SomeRelated\", primaryjoin=\"Child.id==SomeRelated.child_id\"\n    )\n\n\nclass SomeRelated(Base):\n    __tablename__ = \"some_related\"\n    id = Column(Integer, primary_key=True)\n    child_id = Column(Integer, ForeignKey(\"child.id\"))\n```\n\n----------------------------------------\n\nTITLE: Decorator-style Dataclass Mapping\nDESCRIPTION: Illustrates using the registry.mapped_as_dataclass decorator approach for creating dataclass-enabled ORM mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Documenting MutableDict Class in reStructuredText\nDESCRIPTION: This snippet documents the MutableDict class, including its members and undocumented members, using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: MutableDict\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: SQL Table Join Example\nDESCRIPTION: Shows two equivalent SQL queries - one using comma-separated FROM clause and another using explicit JOIN syntax.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.name, address.email_address\nFROM user, address\nWHERE user.id=address.user_id\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.name, address.email_address\nFROM user JOIN address ON user.id=address.user_id\n```\n\n----------------------------------------\n\nTITLE: Using Column Default with Method in SQLAlchemy\nDESCRIPTION: Shows how to use a class or object method as a default value for a Column, which will detect if the 'context' argument is accepted.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    def default_method(self):\n        return 'default value'\n\nColumn('my_column', String, default=MyClass.default_method)\n```\n\n----------------------------------------\n\nTITLE: Single Table Inheritance Example\nDESCRIPTION: Demonstrates single table inheritance mapping with a Widget base class and FooWidget subclass.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass Widget(Base):\n    __table__ = \"widget_table\"\n\n\nclass FooWidget(Widget):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting up Ordered Backrefs in SQLAlchemy\nDESCRIPTION: Demonstrates how to configure ordering on backref relations using the backref() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"keywords\": relation(\n    Keyword,\n    secondary=item_keywords,\n    order_by=keywords.c.name,\n    backref=backref(\"items\", order_by=items.c.id),\n)\n```\n\n----------------------------------------\n\nTITLE: String to Text Conversion Warning\nDESCRIPTION: Emitting warnings when strings are implicitly converted to text constructs in select and query methods\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Implicit conversion now warns with plain string\n```\n\n----------------------------------------\n\nTITLE: Adding New MutableBase._get_listen_keys Method in SQLAlchemy Extensions\nDESCRIPTION: Adds a new semi-public method MutableBase._get_listen_keys to the MutableBase class. This method is needed for MutableBase subclasses that require events to propagate for attribute keys other than the key associated with the mutable type, when intercepting InstanceEvents.refresh or InstanceEvents.refresh_flush events.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMutableBase._get_listen_keys\n```\n\n----------------------------------------\n\nTITLE: Database-Specific SQL Stringification using SQLAlchemy Dialect in Python\nDESCRIPTION: Shows how to stringify a SQLAlchemy statement for a specific database using a Dialect object directly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects import postgresql\n\nprint(statement.compile(dialect=postgresql.dialect()))\n```\n\n----------------------------------------\n\nTITLE: Book Model with Raiseload Behavior\nDESCRIPTION: Defines a Book model where deferred columns will raise an error on access unless explicitly undeferred\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Base):\n    __tablename__ = \"book\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    owner_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n    title: Mapped[str]\n    summary: Mapped[str] = mapped_column(Text, deferred=True, deferred_raiseload=True)\n    cover_photo: Mapped[bytes] = mapped_column(\n        LargeBinary, deferred=True, deferred_raiseload=True\n    )\n\n    def __repr__(self) -> str:\n        return f\"Book(id={self.id!r}, title={self.title!r})\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Oracle Container for SQLAlchemy Testing\nDESCRIPTION: Bash commands to create and configure an Oracle database Docker container for SQLAlchemy testing using the oracle-free image. Creates users, grants permissions, and configures database links.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# create the container with the proper configuration for sqlalchemy\ndocker run --rm --name oracle -p 127.0.0.1:1521:1521 -d -e ORACLE_PASSWORD=tiger -e ORACLE_DATABASE=test -e APP_USER=scott -e APP_USER_PASSWORD=tiger gvenzl/oracle-free:23-slim\n\n# enter the database container and run the command\ndocker exec -ti oracle bash\n>> sqlplus system/tiger@//localhost/FREEPDB1 <<EOF\nCREATE USER test_schema IDENTIFIED BY tiger;\nGRANT DBA TO SCOTT;\nGRANT CREATE TABLE TO scott;\nGRANT CREATE TABLE TO test_schema;\nGRANT UNLIMITED TABLESPACE TO scott;\nGRANT UNLIMITED TABLESPACE TO test_schema;\nGRANT CREATE SESSION TO test_schema;\nCREATE PUBLIC DATABASE LINK test_link CONNECT TO scott IDENTIFIED BY tiger USING 'FREEPDB1';\nCREATE PUBLIC DATABASE LINK test_link2 CONNECT TO test_schema IDENTIFIED BY tiger USING 'FREEPDB1';\nEOF\n\n# To stop the container. It will also remove it.\ndocker stop oracle\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type with Log Function\nDESCRIPTION: Adds a custom log function to Integer type\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, func\n\nclass MyInt(Integer):\n    class comparator_factory(Integer.Comparator):\n        def log(self, other):\n            return func.log(self.expr, other)\n```\n\n----------------------------------------\n\nTITLE: Declared Attribute Directive Example in SQLAlchemy\nDESCRIPTION: This snippet demonstrates the use of `declared_attr.directive` to decorate a Declarative directive, specifically `__tablename__`, allowing it to have a return type that is not using the `Mapped` generic class. This is primarily for supporting PEP 484 typing tools, allowing static type checkers to correctly interpret the return type of the decorated function. At runtime, `declared_attr.directive` returns the `declared_attr` class unmodified.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"class CreateTableName:\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\"\n```\n\n----------------------------------------\n\nTITLE: Using New Query Methods in SQLAlchemy ORM\nDESCRIPTION: New methods have been added to the Query object in SQLAlchemy ORM, providing 'generative' behavior. These methods include filter(), filter_by(), avg(), join(), outerjoin(), limit(), offset(), distinct(), and list(). They allow for more flexible and chainable query construction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Foo).filter(...).join(...).limit(...).offset(...).distinct().list()\n```\n\n----------------------------------------\n\nTITLE: Altering SQLAlchemy Enum Configuration\nDESCRIPTION: Demonstrates altering the default configuration of SQLAlchemy enums, particularly forcing non-native enums by default. It utilizes SQLAlchemy's DeclarativeBase and Typing libraries to adjust the type_annotation_map for enum.Enum and typing.Literal.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nimport typing\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        enum.Enum: sqlalchemy.Enum(enum.Enum, native_enum=False),\n        typing.Literal: sqlalchemy.Enum(enum.Enum, native_enum=False),\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating PostgreSQL Constraint Reflection Query (SQL)\nDESCRIPTION: Revised the query used for reflecting CHECK constraints in PostgreSQL to use the pg_get_constraintdef function, as the consrc column is being deprecated in PostgreSQL 12.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Select.correlate_except example\nDESCRIPTION: This snippet demonstrates the usage of `correlate_except` method. It creates two classes, `SnortEvent` and `Signature`. The `Signature` class uses a `column_property` which contains a subquery to count related `SnortEvent` entries. The `correlate_except` method ensures the subquery correlates with all FROM clauses except the `SnortEvent` table, which is the target selectable.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass SnortEvent(Base):\n    __tablename__ = \"event\"\n\n    id = Column(Integer, primary_key=True)\n    signature = Column(Integer, ForeignKey(\"signature.id\"))\n\n    signatures = relationship(\"Signature\", lazy=False)\n\n\nclass Signature(Base):\n    __tablename__ = \"signature\"\n\n    id = Column(Integer, primary_key=True)\n\n    sig_count = column_property(\n        select([func.count(\"*\")])\n        .where(SnortEvent.signature == id)\n        .correlate_except(SnortEvent)\n    )\n```\n\n----------------------------------------\n\nTITLE: Controlling IS Comparisons in TypeDecorator\nDESCRIPTION: Added a new TypeDecorator attribute 'coerce_to_is_types' to control how comparisons using == or != to None and boolean types produce IS expressions or plain equality with bound parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyType(TypeDecorator):\n    impl = String\n    coerce_to_is_types = (type(None), bool)\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT After INSERT with eager_defaults Enabled\nDESCRIPTION: Example of SQL generated for MySQL when eager_defaults is set to True but RETURNING is not supported. This shows the additional SELECT statement issued immediately after INSERT to fetch the server-generated values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO my_table () VALUES ()\n\n-- when eager_defaults **is** used, but RETURNING is not supported\nSELECT my_table.timestamp AS my_table_timestamp, my_table.special_identifier AS my_table_special_identifier\nFROM my_table WHERE my_table.id = %s\n```\n\n----------------------------------------\n\nTITLE: SQL Between Expression With Symmetric Flag\nDESCRIPTION: SQL BETWEEN expression with new symmetric flag option and NOT BETWEEN negation support.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncol BETWEEN SYMMETRIC x AND y\n```\n\n----------------------------------------\n\nTITLE: Optimized Many-to-Many Join\nDESCRIPTION: Improved many-to-many join syntax with right-nested secondary and right tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT order.id, order.name\nFROM order LEFT OUTER JOIN\n(order_item JOIN item ON order_item.item_id = item.id AND item.type = 'subitem')\nON order_item.order_id = order.id\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Raiseload Error When Accessing Lazy-loaded Relationship\nDESCRIPTION: This example shows the error raised when attempting to access a relationship configured with raiseload, preventing unintended lazy loading that would cause the N+1 query problem.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> u1 = session.execute(select(User)).scalars().first()\n>>> u1.addresses\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user_account.id FROM user_account\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session Error Handling in SQLAlchemy\nDESCRIPTION: This code snippet illustrates an incorrect way of handling errors during a session commit, which leads to the 'transaction has been rolled back' error. It creates a SQLite database, defines a Foo model, and attempts to insert duplicate primary keys without proper error handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine, Column, Integer\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base(create_engine(\"sqlite://\"))\n\n\nclass Foo(Base):\n    __tablename__ = \"foo\"\n    id = Column(Integer, primary_key=True)\n\n\nBase.metadata.create_all()\n\nsession = sessionmaker()()\n\n# constraint violation\nsession.add_all([Foo(id=1), Foo(id=1)])\n\ntry:\n    session.commit()\nexcept:\n    # ignore error\n    pass\n\n# continue using session without rolling back\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy ORM Dataclass with InitVar and Post-Init Processing\nDESCRIPTION: Demonstrates use of dataclass InitVar for non-persisted init-only fields, and __post_init__ for custom initialization logic in SQLAlchemy ORM dataclasses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import InitVar\nfrom typing import Optional\n\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import registry\n\nreg = registry()\n\n\n@reg.mapped_as_dataclass\nclass User:\n    __tablename__ = \"user_account\"\n\n    id: Mapped[int] = mapped_column(init=False, primary_key=True)\n    name: Mapped[str]\n\n    password: InitVar[str]\n    repeat_password: InitVar[str]\n\n    password_hash: Mapped[str] = mapped_column(init=False, nullable=False)\n\n    def __post_init__(self, password: str, repeat_password: str):\n        if password != repeat_password:\n            raise ValueError(\"passwords do not match\")\n\n        self.password_hash = your_crypt_function_here(password)\n```\n\n----------------------------------------\n\nTITLE: Selecting Entity From in ORM Queries\nDESCRIPTION: Added a new Query method 'select_entity_from' to replace part of the functionality of 'select_from' in 0.9. In 0.8, both methods perform the same function to allow for code migration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = session.query(User).select_entity_from(user_table)\n```\n\n----------------------------------------\n\nTITLE: Using prebuffer_rows to Handle Result Objects Outside Session Context\nDESCRIPTION: Example showing how to use the prebuffer_rows execution option to pre-fetch ORM objects so they can be used after a Session is closed, though they will be in a detached state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# context manager creates new Session\nwith Session(engine) as session_obj:\n    # result internally pre-fetches all objects\n    result = sess.execute(\n        select(User).where(User.id == 7), execution_options={\"prebuffer_rows\": True}\n    )\n\n# context manager is closed, so session_obj above is closed, identity\n# map is replaced\n\n# pre-buffered objects are returned\nuser = result.first()\n\n# however they are detached from the session, which has been closed\nassert inspect(user).detached\nassert inspect(user).session is None\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQLAlchemy Inspection API with Instance State\nDESCRIPTION: This code demonstrates how to use SQLAlchemy's inspection API to examine various aspects of mapped instances, including attribute state, session state, identity information, and persistence status.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# an expression\nprint(b.expression)\n{printsql}\"user\".id = address.user_id{stop}\n\n# inspect works on instances\nu1 = User(id=3, name=\"x\")\nb = inspect(u1)\n\n# it returns the InstanceState\nb\n<sqlalchemy.orm.state.InstanceState object at 0x10152bed0>\n\n# similar attrs accessor refers to the\nb.attrs.keys()\n['id', 'name_syn', 'addresses', 'name']\n\n# attribute interface - from attrs, you get a state object\nb.attrs.id\n<sqlalchemy.orm.state.AttributeState object at 0x10152bf90>\n\n# this object can give you, current value...\nb.attrs.id.value\n3\n\n# ... current history\nb.attrs.id.history\nHistory(added=[3], unchanged=(), deleted=())\n\n# InstanceState can also provide session state information\n# lets assume the object is persistent\ns = Session()\ns.add(u1)\ns.commit()\n\n# now we can get primary key identity, always\n# works in query.get()\nb.identity\n(3,)\n\n# the mapper level key\nb.identity_key\n(<class '__main__.User'>, (3,))\n\n# state within the session\nb.persistent, b.transient, b.deleted, b.detached\n(True, False, False, False)\n\n# owning session\nb.session\n<sqlalchemy.orm.session.Session object at 0x101701150>\n```\n\n----------------------------------------\n\nTITLE: Late-expanded IN Parameter Binding in SQLAlchemy\nDESCRIPTION: Demonstrates the use of expanding bind parameters for IN expressions, allowing single parameter name to handle multiple values and enabling query caching.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nstmt = select([table]).where(table.c.col.in_(bindparam(\"foo\", expanding=True)))\nconn.execute(stmt, {\"foo\": [1, 2, 3]})\n```\n\n----------------------------------------\n\nTITLE: Skip Locked Feature Addition for PostgreSQL and Oracle\nDESCRIPTION: Documents the addition of skip_locked parameter for GenerativeSelect.with_for_update(), enabling SKIP LOCKED phrase for FOR UPDATE/FOR SHARE locks on PostgreSQL and Oracle backends.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nFOR UPDATE SKIP LOCKED\n```\n\n----------------------------------------\n\nTITLE: Importing PostgreSQL Types in SQLAlchemy 0.6\nDESCRIPTION: Example showing how to import PostgreSQL-specific data types from the new dialect structure in SQLAlchemy 0.6.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import (\n    INTEGER,\n    BIGINT, \n    SMALLINT,\n    VARCHAR,\n    MACADDR,\n    DATE,\n    BYTEA,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Joined-Table Inheritance in Python\nDESCRIPTION: Shows how to define a Parent and Child class using SQLAlchemy's declarative syntax, demonstrating joined-table inheritance. Illustrates changes in how mapped column attributes reference columns in version 0.7.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(Base):\n    __tablename__ = \"parent\"\n    id = Column(Integer, primary_key=True)\n\n\nclass Child(Parent):\n    __tablename__ = \"child\"\n    id = Column(Integer, ForeignKey(\"parent.id\"), primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Unique Constraint Naming in SQLAlchemy\nDESCRIPTION: Demonstrates how unique constraints are automatically named using the default naming convention when creating a table with unique columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nuser_table = Table(\n    \"user\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String(30), nullable=False, unique=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying User Addresses with Selectin Load\nDESCRIPTION: Example showing the new selectin eager loading for User-Address relationship, which uses simpler SQL with IN clauses instead of subqueries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nq = (session.query(User)\n    .filter(User.name.like(\"%ed%\"))\n    .options(selectinload(User.addresses)))\n```\n\n----------------------------------------\n\nTITLE: DateTime Format Example in Python\nDESCRIPTION: Demonstrates the new datetime microseconds formatting in SQLAlchemy 0.5 compared to 0.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndt = datetime.datetime(2008, 6, 27, 12, 0, 0, 125)  # 125 usec\n\n# old way\n\"2008-06-27 12:00:00.125\"\n\n# new way\n\"2008-06-27 12:00:00.000125\"\n```\n\n----------------------------------------\n\nTITLE: Generating Table Names with Mixin for SQLAlchemy ORM Mappings in Python\nDESCRIPTION: Demonstrates a mixin class that generates table names based on class names, applied to a Person-Engineer-Manager inheritance hierarchy. It shows how to control table generation for joined and single table inheritance.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Tablename:\n    @declared_attr.directive\n    def __tablename__(cls) -> Optional[str]:\n        return cls.__name__.lower()\n\n\nclass Person(Tablename, Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    discriminator: Mapped[str]\n    __mapper_args__ = {\"polymorphic_on\": \"discriminator\"}\n\n\nclass Engineer(Person):\n    id: Mapped[int] = mapped_column(ForeignKey(\"person.id\"), primary_key=True)\n\n    primary_language: Mapped[str]\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\n\nclass Manager(Person):\n    @declared_attr.directive\n    def __tablename__(cls) -> Optional[str]:\n        \"\"\"override __tablename__ so that Manager is single-inheritance to Person\"\"\"\n\n        return None\n\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n```\n\n----------------------------------------\n\nTITLE: Joined Class Queries with Type Information\nDESCRIPTION: Demonstrates querying multiple mapped classes with proper type hints for results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as session:\n    # (variable) stmt: Select[Tuple[User, Address]]\n    stmt_2 = select(User, Address).join_from(User, Address)\n\n    # (variable) result_2: Result[Tuple[User, Address]]\n    result_2 = session.execute(stmt_2)\n\n    # (variable) user_obj: User\n    # (variable) address_obj: Address\n    user_obj, address_obj = result_2.one().t\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listeners for SQLAlchemy Mapped Class\nDESCRIPTION: Demonstrates stacking multiple event listeners (load, refresh, refresh_flush) on a single callback function to handle various refresh scenarios for maintaining calculated attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/mapping_styles.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(Point, \"load\")\n@event.listens_for(Point, \"refresh\")\n@event.listens_for(Point, \"refresh_flush\")\ndef receive_load(target, context, attrs=None):\n    target.x_plus_y = target.x + target.y\n```\n\n----------------------------------------\n\nTITLE: Company Relationships with Abstract Classes\nDESCRIPTION: Demonstrates relationship mappings between Company and abstract base classes Executive and Technologist.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Company(Base):\n    __tablename__ = \"company\"\n    id = Column(Integer, primary_key=True)\n\n    executives: Mapped[List[Executive]] = relationship()\n    technologists: Mapped[List[Technologist]] = relationship()\n\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # foreign key to \"company.id\" is added\n    company_id: Mapped[int] = mapped_column(ForeignKey(\"company.id\"))\n\n    # rest of mapping is the same\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_on\": \"type\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Replacing Session.load() with populate_existing() in SQLAlchemy\nDESCRIPTION: Example of how to replace the removed load() method by using populate_existing() with get(). This provides equivalent functionality for refreshing an existing entity from the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nx = session.query(SomeClass).populate_existing().get(7)\n```\n\n----------------------------------------\n\nTITLE: Fixing Return Type for PostgreSQL RANGE Comparison Operators\nDESCRIPTION: Corrected the return type for PostgreSQL RANGE comparison operators to be BOOLEAN instead of the RANGE type itself. This ensures correct behavior when using TypeDecorators with result processing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Customizing Table Creation with __table_cls__ in SQLAlchemy ORM\nDESCRIPTION: Shows how to customize Table creation by implementing the __table_cls__ class method. This example adds a prefix to all table names generated for classes with this mixin.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyMixin:\n    @classmethod\n    def __table_cls__(cls, name, metadata_obj, *arg, **kw):\n        return Table(f\"my_{name}\", metadata_obj, *arg, **kw)\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Schema Objects - Python\nDESCRIPTION: Shows how to query objects across different schemas in a single session using schema translation and identity tokens to differentiate objects with same primary keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/api.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith Session(engine) as sess:\n    obj1 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema\"},\n            identity_token=\"test_schema\",\n        )\n    )\n    obj2 = sess.scalar(\n        select(MyTable)\n        .where(MyTable.id == 1)\n        .execution_options(\n            schema_translate_map={None: \"test_schema_2\"},\n            identity_token=\"test_schema_2\", \n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Improving Name Escaping in SQLAlchemy Inspector Methods\nDESCRIPTION: Applied fixes across all included dialects to ensure names containing single or double quotes are properly escaped when querying system tables. This affects all Inspector methods that accept object names as arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Generating NULL-safe IN clause in SQL\nDESCRIPTION: Calling <column>.in_() with no arguments returns a CASE statement that handles NULL values, returning NULL or False in all cases rather than throwing an error.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCASE WHEN (<column> IS NULL) THEN NULL ELSE 0 END = 1\n```\n\n----------------------------------------\n\nTITLE: Stringifying SQLAlchemy Expression Fragments in Python\nDESCRIPTION: Shows how to convert a SQLAlchemy expression fragment to a string representation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import column\n>>> print(column(\"x\") == \"some value\")\nx = :x_1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Value Behavior in SQLAlchemy ORM\nDESCRIPTION: Shows how default values are handled for ORM-mapped objects, where defaults are delivered via descriptor but not stored in __dict__\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# object is constructed with no value for ``status``\n>>> s1 = SomeObject()\n\n# the default value is not placed in ``__dict__``\n>>> s1.__dict__\n{'_sa_instance_state': ...}\n\n# but the default value is delivered at the object level via descriptor\n>>> s1.status\n'default_status'\n\n# the value still remains unpopulated in ``__dict__``\n>>> s1.__dict__\n{'_sa_instance_state': ...}\n```\n\n----------------------------------------\n\nTITLE: Abstract Polymorphic Inheritance Hierarchy\nDESCRIPTION: Shows how to build deeper inheritance hierarchies using polymorphic_abstract, with Executive and Technologist as abstract base classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n\nclass Executive(Employee):\n    \"\"\"An executive of the company\"\"\"\n\n    executive_background: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\n\nclass Technologist(Employee):\n    \"\"\"An employee who works with technology\"\"\"\n\n    competencies: Mapped[str] = mapped_column(nullable=True)\n\n    __mapper_args__ = {\"polymorphic_abstract\": True}\n\n\nclass Manager(Executive):\n    \"\"\"a manager\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"manager\"}\n\n\nclass Principal(Executive):\n    \"\"\"a principal of the company\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"principal\"}\n\n\nclass Engineer(Technologist):\n    \"\"\"an engineer\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"engineer\"}\n\n\nclass SysAdmin(Technologist):\n    \"\"\"a systems administrator\"\"\"\n\n    __mapper_args__ = {\"polymorphic_identity\": \"sysadmin\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Order By in SQLAlchemy Mappings\nDESCRIPTION: Shows how to configure explicit ordering on mappers and relations to replace implicit ordering behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmapper(\n    User,\n    users,\n    properties={\"addresses\": relation(Address, order_by=addresses.c.id)},\n    order_by=users.c.id,\n)\n```\n\n----------------------------------------\n\nTITLE: Using select_from with Query in SQLAlchemy\nDESCRIPTION: Example demonstrating how to use select_from to control JOIN behavior in a query against a User mapping.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nselect_stmt = select([User]).where(User.id == 7).alias()\n\nq = (\n    session.query(User)\n    .join(select_stmt, User.id == select_stmt.c.id)\n    .filter(User.name == \"ed\")\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table with IDENTITY Start and Increment\nDESCRIPTION: This example illustrates how to define a table with a primary key column that has a custom `IDENTITY` start and increment value in SQL Server using SQLAlchemy. The `mssql_identity_start` and `mssql_identity_increment` parameters are used on the `Column` object. This allows fine-grained control over the identity column's behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"test = Table(\n        \\\"test\\\",\n        metadata_obj,\n        Column(\n            \\\"id\\\",\n            Integer,\n            primary_key=True,\n            mssql_identity_start=100,\n            mssql_identity_increment=10,\n        ),\n        Column(\\\"name\\\", String(20)),\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Custom Numeric Type with Logarithm Support\nDESCRIPTION: This example demonstrates how to extend the `Numeric` type in SQLAlchemy to add custom operator support. It defines a `CustomNumeric` type with a custom comparator that provides a `log` method, which leverages the `func.log` SQL function. This allows applying logarithm operations directly on columns of this custom numeric type within SQL expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.types import Numeric\nfrom sqlalchemy.sql import func\n\n\nclass CustomNumeric(Numeric):\n    class comparator_factory(Numeric.Comparator):\n        def log(self, other):\n            return func.log(self.expr, other)\n```\n\n----------------------------------------\n\nTITLE: Collection API and Mapped Relations\nDESCRIPTION: Examples of using dictionary-based collections and mapped relations with various collection types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# use a dictionary relation keyed by a column\nrelation(Item, collection_class=column_mapped_collection(items.c.keyword))\n# or named attribute\nrelation(Item, collection_class=attribute_mapped_collection(\"keyword\"))\n# or any function you like\nrelation(Item, collection_class=mapped_collection(lambda entity: entity.a + entity.b))\n```\n\n----------------------------------------\n\nTITLE: Updating Many-to-Many Collection with Multi-Table Syntax\nDESCRIPTION: Example of updating AccountTransaction objects through a many-to-many BankAudit.account_transactions collection using UPDATE..FROM syntax.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(\n    bank_audit.account_transactions.update().values(\n        description=AccountTransaction.description + \" (audited)\"\n    )\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE account_transaction SET description=(account_transaction.description || ?)\nFROM audit_transaction WHERE ? = audit_transaction.audit_id\nAND account_transaction.id = audit_transaction.transaction_id RETURNING id\n[...] (' (audited)', 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Department and Employee Tables (Many to One)\nDESCRIPTION: This SQL snippet defines two tables, 'department' and 'employee', setting up a many-to-one relationship where multiple employees can belong to the same department. The 'dep_id' column in the 'employee' table is a foreign key that points to the 'id' column of the 'department' table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE department (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30)\n)\n\nCREATE TABLE employee (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(30),\n    dep_id INTEGER REFERENCES department(id)\n)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Query delete() and update() Methods in SQLAlchemy ORM\nDESCRIPTION: Added delete() and update(values) methods to the Query object, allowing bulk delete and update operations to be performed using the Query API.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQuery.delete()\nQuery.update(values)\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy session events: after_attach and before_attach\nDESCRIPTION: Improvement of session event handling where after_attach now occurs after instance-session association. before_attach suits scenarios requiring the instance to not yet be in a session, e.g., preemptively loading state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(Session, \"after_attach\")\ndef after_attach(session, instance):\n    assert instance in session\n\n@event.listens_for(Session, \"before_attach\")\ndef before_attach(session, instance):\n    instance.some_necessary_attribute = (\n        session.query(Widget).filter_by(instance.widget_name).first()\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Subqueryload Query Pattern in SQLAlchemy ORM\nDESCRIPTION: Shows the SQL queries generated when using subqueryload() without ORDER BY, which can lead to inconsistent results when combined with LIMIT.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsession.scalars(select(User).options(subqueryload(User.addresses))).all()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users.id AS users_id\nFROM users\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT addresses.id AS addresses_id,\n       addresses.user_id AS addresses_user_id,\n       anon_1.users_id AS anon_1_users_id\nFROM (SELECT users.id AS users_id FROM users) AS anon_1\nJOIN addresses ON anon_1.users_id = addresses.user_id\nORDER BY anon_1.users_id\n```\n\n----------------------------------------\n\nTITLE: Using Float with Variant for Oracle Compatibility\nDESCRIPTION: Shows how to specify a Float datatype with explicit precision that works across different databases while providing Oracle-specific handling using the with_variant method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.types import Float\nfrom sqlalchemy.dialects import oracle\n\nTable(\n    \"some_table\",\n    metadata,\n    Column(\"value\", Float(5).with_variant(oracle.FLOAT(16), \"oracle\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating User Instance with Declarative Mapping in Python\nDESCRIPTION: Demonstrates creating a User instance using the automatically generated __init__() method from a declarative mapping. The method accepts attribute names as optional keyword arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsandy = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\n```\n\n----------------------------------------\n\nTITLE: Listening for Table Column Reflection in SQLAlchemy\nDESCRIPTION: This snippet defines an event listener that modifies the type of BLOB columns to PickleType during table reflection. It sets up a global rule to ensure that the datatype conversion occurs consistently across the application before any table reflection is initiated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import BLOB\\nfrom sqlalchemy import event\\nfrom sqlalchemy import PickleType\\nfrom sqlalchemy import Table\\n\\n\\n@event.listens_for(Table, \"column_reflect\")\\ndef _setup_pickletype(inspector, table, column_info):\\n    if isinstance(column_info[\"type\"], BLOB):\\n        column_info[\"type\"] = PickleType()\n```\n\n----------------------------------------\n\nTITLE: Using New Query API in SQLAlchemy 0.4 ORM\nDESCRIPTION: Demonstrates the updated Query API in SQLAlchemy 0.4, showing how to replace deprecated methods with their new equivalents.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nUser.query.filter_by(**kwargs).first()\n\nUser.query.filter_by(**kwargs).all()\n\nUser.query.filter(xxx).all()\n```\n\n----------------------------------------\n\nTITLE: Declarative Mapping without Type Annotations in Python\nDESCRIPTION: Shows how to create a declarative mapping using mapped_column without type annotations. This approach is compatible with typing tools while maintaining the traditional column definition style.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String(30), nullable=False)\n    fullname = mapped_column(String)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\n    # ... definition continues\n```\n\n----------------------------------------\n\nTITLE: Lateral Join Feature Addition for PostgreSQL\nDESCRIPTION: Addition of LATERAL keyword support for PostgreSQL through Select.lateral() method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nLATERAL\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reset-on-Return for SQL Server\nDESCRIPTION: Example showing how to implement a custom reset-on-return scheme for Microsoft SQL Server using the sp_reset_connection stored procedure via the reset event hook.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import event\n\nmssql_engine = create_engine(\n    \"mssql+pyodbc://scott:tiger^5HHH@mssql2017:1433/test?driver=ODBC+Driver+17+for+SQL+Server\",\n    # disable default reset-on-return scheme\n    pool_reset_on_return=None,\n)\n\n\n@event.listens_for(mssql_engine, \"reset\")\ndef _reset_mssql(dbapi_connection, connection_record, reset_state):\n    if not reset_state.terminate_only:\n        dbapi_connection.execute(\"{call sys.sp_reset_connection}\")\n\n    # so that the DBAPI itself knows that the connection has been\n    # reset\n    dbapi_connection.rollback()\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy Documentation Dependencies\nDESCRIPTION: Requirements file specifying external dependencies needed for building SQLAlchemy documentation, including custom Sphinx extensions from sqlalchemyorg GitHub repositories and additional tools like sphinx-copybutton\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ngit+https://github.com/sqlalchemyorg/changelog.git#egg=changelog\ngit+https://github.com/sqlalchemyorg/sphinx-paramlinks.git#egg=sphinx-paramlinks\ngit+https://github.com/sqlalchemyorg/zzzeeksphinx.git#egg=zzzeeksphinx\nsphinx-copybutton==0.5.1\nsphinx-autobuild\ntyping-extensions\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Schema with Named Constraints\nDESCRIPTION: Shows the resulting SQL DDL generated from the SQLAlchemy models, demonstrating how the naming conventions are applied to constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE alpha (\n    id INTEGER NOT NULL,\n    uuid CHAR(32) NOT NULL,\n    x INTEGER NOT NULL,\n    y INTEGER NOT NULL,\n    CONSTRAINT pk_alpha PRIMARY KEY (id),\n    CONSTRAINT uq_alpha_uuid UNIQUE (uuid),\n    CONSTRAINT ck_alpha_xy_chk CHECK (x > 0 OR y < 100)\n)\n\n\nCREATE TABLE beta (\n    id INTEGER NOT NULL,\n    uuid CHAR(32) NOT NULL,\n    x INTEGER NOT NULL,\n    y INTEGER NOT NULL,\n    CONSTRAINT pk_beta PRIMARY KEY (id),\n    CONSTRAINT uq_beta_uuid UNIQUE (uuid),\n    CONSTRAINT ck_beta_xy_chk CHECK (x > 0 OR y < 100)\n)\n```\n\n----------------------------------------\n\nTITLE: Using AttributeState.load_history() in SQLAlchemy ORM\nDESCRIPTION: Demonstrates the new AttributeState.load_history() method, which works like AttributeState.history but also fires loader callables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nstate = inspect(instance).attrs.some_attribute\nhistory = state.load_history()\n```\n\n----------------------------------------\n\nTITLE: MySQL ON DUPLICATE KEY UPDATE Example\nDESCRIPTION: Example showing how to use MySQL's INSERT ON DUPLICATE KEY UPDATE syntax with SQLAlchemy dialect-specific features.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.mysql import insert\n\ninsert_stmt = insert(my_table).values(id=\"some_id\", data=\"some data to insert\")\n\non_conflict_stmt = insert_stmt.on_duplicate_key_update(\n    data=insert_stmt.inserted.data, status=\"U\"\n)\n```\n\n----------------------------------------\n\nTITLE: Associating Sequence with MetaData\nDESCRIPTION: Demonstrates how to associate a Sequence with MetaData and use it with table columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nseq = Sequence(\"my_general_seq\", metadata=metadata_obj, start=1)\n\ntable = Table(\n    \"cartitems\",\n    metadata_obj,\n    seq,\n    Column(\"description\", String(40)),\n    Column(\"createdate\", DateTime()),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Engine Connection Context Manager in Python\nDESCRIPTION: Shows how to use the new context manager for Engine connections in SQLAlchemy. This ensures proper connection handling and closure.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    # <work with conn>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy Column Element Typing Utilities\nDESCRIPTION: This snippet demonstrates how to import utility functions for improving type checking support in SQLAlchemy. These functions are used to specify nullable and non-nullable column types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/sqlelement.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import NotNullable, Nullable\n```\n\n----------------------------------------\n\nTITLE: Using select_entity_from or aliased as Alternatives\nDESCRIPTION: Example showing how to use select_entity_from or aliased as alternatives for the old select_from behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nselect_stmt = select([User]).where(User.id == 7)\nuser_from_stmt = aliased(User, select_stmt.alias())\n\nq = session.query(user_from_stmt).filter(user_from_stmt.name == \"ed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Database Disconnect Detection in Oracle\nDESCRIPTION: Example showing how to add custom Oracle error codes DPY-1001 and DPY-4011 as disconnect indicators using event handling. The code sets up an engine and adds an event listener to process these specific error codes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/pooling.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n    \"oracle+oracledb://scott:tiger@localhost:1521?service_name=freepdb1\"\n)\n\n\n@event.listens_for(engine, \"handle_error\")\ndef handle_exception(context: ExceptionContext) -> None:\n    if not context.is_disconnect and re.match(\n        r\"^(?:DPY-1001|DPY-4011)\", str(context.original_exception)\n    ):\n        context.is_disconnect = True\n\n    return None\n```\n\n----------------------------------------\n\nTITLE: Caching BakedQuery with before_compile Event (Python)\nDESCRIPTION: BakedQuery will not cache queries modified by QueryEvents.before_compile event. A new flag 'bake_ok' is added to re-enable caching for such queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Example usage of bake_ok flag\n@event.listens_for(Query, \"before_compile\", retval=True)\ndef my_before_compile(query):\n    # modify query\n    query._execution_options[\"bake_ok\"] = True\n    return query\n```\n\n----------------------------------------\n\nTITLE: Order By using Labels in SQL Queries - SQLAlchemy SQL\nDESCRIPTION: This snippet illustrates the rendering behavior of SQL queries when using labeled expressions in both the SELECT and ORDER BY clauses. Using labels only in the ORDER BY clause simplifies query readability and enhances DBMS compatibility, provided the database dialect supports this feature.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT foo(t.c1) + t.c2 AS expr\nFROM t ORDER BY expr\n```\n\n----------------------------------------\n\nTITLE: Defining Required Keyword Arguments in Python 3\nDESCRIPTION: Example of Python 3 syntax for defining required keyword arguments in function signatures, which is now supported by SQLAlchemy's ORM instrumentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfn(a, b, *, c, d)\nfn(a, b, *args, c, d)\n```\n\n----------------------------------------\n\nTITLE: Using DESCRIBE for Table Existence Check in MySQL\nDESCRIPTION: MySQL uses 'DESCRIBE <tablename>' to determine if a table exists, catching exceptions if the table doesn't exist. This supports unicode table names and schema names, tested with MySQL 5 but should work with 4.1 series as well.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE <tablename>\n```\n\n----------------------------------------\n\nTITLE: Configuring Set Collection in SQLAlchemy ORM\nDESCRIPTION: Example showing how to configure a one-to-many relationship using a set collection type with Mapped annotations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a set\n    children: Mapped[set[\"Child\"]] = relationship()\n\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Name for Multiple Engine Instances\nDESCRIPTION: Demonstrates how to set a custom logging name for a SQLAlchemy engine to distinguish between multiple engine instances in logging output. This is useful for applications with multiple database connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> from sqlalchemy import create_engine\n>>> from sqlalchemy import text\n>>> logging.basicConfig()\n>>> logging.getLogger(\"sqlalchemy.engine.Engine.myengine\").setLevel(logging.INFO)\n>>> e = create_engine(\"sqlite://\", logging_name=\"myengine\")\n>>> with e.connect() as conn:\n...     conn.execute(text(\"select 'hi'\"))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Subquery Label Tracking\nDESCRIPTION: Shows how SQL subquery labels are tracked in ORDER BY clauses using max() aggregates.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.type AS a_type, (SELECT max(b.id) AS max_1\nFROM b WHERE b.a_id = a.id) AS anon_1\nFROM a ORDER BY (SELECT max(b.id) AS max_2\nFROM b WHERE b.a_id = a.id)\n```\n\n----------------------------------------\n\nTITLE: Using Insert.from_select with Python and SQL Expression Defaults in SQLAlchemy\nDESCRIPTION: The from_select method of Insert now includes Python and SQL-expression defaults if otherwise unspecified. Non-server column defaults are now rendered as constants into the SELECT statement for INSERT FROM SELECT operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nInsert.from_select()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Removal API in SQLAlchemy\nDESCRIPTION: Illustrates the new event removal API in SQLAlchemy. It shows how to set up an event listener using @event.listens_for and then remove it using event.remove(). This allows for dynamic management of event listeners.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(MyClass, \"before_insert\", propagate=True)\ndef my_before_insert(mapper, connection, target):\n    \"\"\"listen for before_insert\"\"\"\n    # ...\n\n\nevent.remove(MyClass, \"before_insert\", my_before_insert)\n```\n\n----------------------------------------\n\nTITLE: Implementing False and True SQL Expressions in SQLite\nDESCRIPTION: Adds compilation support for sql.false() and sql.true() to compile to 0 and 1 respectively in SQLite dialect.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsql.false() # compiles to 0 in SQLite\nsql.true()  # compiles to 1 in SQLite\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Inner Joins in SQLAlchemy ORM Relationships\nDESCRIPTION: Introduces a new 'nested' option for relationship.innerjoin to parenthesize inner joins on the right side of existing outer joins.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n_orm.relationship.innerjoin\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Clause for INSERT Operations in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates the RETURNING clause in PostgreSQL, which returns specified columns after an INSERT operation. This example inserts a new name into user_account table and returns the id and timestamp columns which may contain server-generated default values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO user_account (name) VALUES ('new name') RETURNING id, timestamp\n```\n\n----------------------------------------\n\nTITLE: Creating temporary tables in PostgreSQL with checkfirst\nDESCRIPTION: Demonstrates how the has_table() method now works for temporary tables in PostgreSQL, allowing for proper behavior with checkfirst=True.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import *\n\nmetadata = MetaData()\nuser_tmp = Table(\n    \"user_tmp\",\n    metadata,\n    Column(\"id\", INT, primary_key=True),\n    Column(\"name\", VARCHAR(50)),\n    prefixes=[\"TEMPORARY\"],\n)\n\ne = create_engine(\"postgresql://scott:tiger@localhost/test\", echo=\"debug\")\nwith e.begin() as conn:\n    user_tmp.create(conn, checkfirst=True)\n\n    # checkfirst will succeed\n    user_tmp.create(conn, checkfirst=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key Column in SQLAlchemy Declarative\nDESCRIPTION: Demonstrates how to define a primary key column in SQLAlchemy's declarative extension without explicitly specifying a column name.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(Base):\n    __tablename__ = 'foos'\n    id = Column(Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Improving TypeDecorator Functionality in SQLAlchemy SQL Layer\nDESCRIPTION: Multiple enhancements to TypeDecorator including improved dialect-specific type handling, support for constructed type specification as impl, and better type coercion behavior in binary expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Joined Table Inheritance Delete Operations\nDESCRIPTION: Demonstrates how to delete rows from both base and derived tables in a joined-table inheritance setup\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import delete\n>>> session.execute(delete(Manager).where(Manager.id == 1))\n>>> session.execute(delete(Employee).where(Employee.id == 1))\n```\n\n----------------------------------------\n\nTITLE: Commit and Rollback with Future Connection in SQLAlchemy 2.0\nDESCRIPTION: Shows how to use commit and rollback methods with a 'future' Connection object in SQLAlchemy 2.0, including engine creation with the 'future' flag\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\n\nengine = create_engine(..., future=True)\n\nwith engine.connect() as conn:\n    conn.execute(some_table.insert().values(foo=\"bar\"))\n    conn.commit()\n\n    conn.execute(text(\"some other SQL\"))\n    conn.rollback()\n```\n\n----------------------------------------\n\nTITLE: Deleting Account Transactions with Criteria using WriteOnlyCollection\nDESCRIPTION: Example of using a WriteOnlyCollection's delete method with a WHERE clause to remove account transactions with amounts between 0 and 30.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nexisting_account.account_transactions.delete().where(\n    AccountTransaction.amount.between(0, 30)\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM account_transaction WHERE ? = account_transaction.account_id\nAND account_transaction.amount BETWEEN ? AND ? RETURNING id\n[...] (1, 0, 30)\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Disconnect Code\nDESCRIPTION: Added MariaDB code 1927 to the list of \"disconnect\" codes. This code is used by recent MariaDB versions when the database server is stopped, improving connection handling for MariaDB.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Disabling SQLAlchemy Session Autoflush\nDESCRIPTION: Shows how to temporarily disable autoflush behavior using the no_autoflush context manager.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith mysession.no_autoflush:\n    mysession.add(some_object)\n    mysession.flush()\n```\n\n----------------------------------------\n\nTITLE: Adding Initiator Parameter to set_attribute Function in SQLAlchemy ORM\nDESCRIPTION: Added a new argument 'initiator' to the attributes.set_attribute function, allowing an event token received from a listener function to be propagated to subsequent set events.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nattributes.set_attribute(..., initiator=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete-Orphan Cascade in SQLAlchemy ORM with Python\nDESCRIPTION: This snippet demonstrates the incorrect and correct configuration of the delete-orphan cascade option in SQLAlchemy relationships for a one-to-many relationship. Originally, it shows a problematic setup causing an error by placing delete-orphan cascade on the 'many' side of a many-to-one relationship, which is not supported. It then corrects this by moving the cascade configuration to the 'one' side of the relationship. Dependencies include SQLAlchemy ORM with properly defined models and mapped classes. The snippet highlights the need for proper parent-child relationship configuration in ORM to avoid unexpected data deletions and application errors.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\n    bs = relationship(\"B\", back_populates=\"a\", cascade=\"all, delete-orphan\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n\n    a = relationship(\"A\", back_populates=\"bs\")\n\n\nconfigure_mappers()\n```\n\n----------------------------------------\n\nTITLE: Python Table Reflection with Schema Examples\nDESCRIPTION: Demonstrates reflecting the same table with and without schema qualification, showing how this creates distinct Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# reflect in non-schema qualified fashion\nmessages_table_1 = Table(\"messages\", metadata_obj, autoload_with=someengine)\n# reflect in schema qualified fashion\nmessages_table_2 = Table(\n    \"messages\", metadata_obj, schema=\"project\", autoload_with=someengine\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Row Count from UPDATE\nDESCRIPTION: Demonstrates how to execute an UPDATE statement and retrieve the number of affected rows using the rowcount attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_update.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith engine.begin() as conn:\n    result = conn.execute(\n        update(user_table)\n        .values(fullname=\"Patrick McStar\")\n        .where(user_table.c.name == \"patrick\")\n    )\n    print(result.rowcount)\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL with Character Encoding via URL Parameters\nDESCRIPTION: Example of creating a MySQL engine with UTF-8 character encoding specified in the URL query string.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"mysql+pymysql://user:pass@host/test?charset=utf8mb4\")\n```\n\n----------------------------------------\n\nTITLE: Using fold_equivalents Argument in Join.select()\nDESCRIPTION: Added 'fold_equivalents' boolean argument to Join.select(), which removes 'duplicate' columns from the resulting column clause that are known to be equivalent based on the join condition. Useful for constructing subqueries of joins which Postgres complains about if duplicate column names are present.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nJoin.select(fold_equivalents=True)\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Query Parameters in SQLAlchemy URL Object\nDESCRIPTION: Modified the URL object to allow query keys to be specified multiple times, with values joined into a list. This supports the plugins feature documented in CreateEnginePlugin. Additionally, plugin names can now be passed to create_engine() outside of the URL using the new plugins parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ncreate_engine(..., plugins=[])\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest Plugin in conftest.py\nDESCRIPTION: Bootstrap script that registers the dialect and configures SQLAlchemy's pytest plugin\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects import registry\nimport pytest\n\nregistry.register(\"access.pyodbc\", \"sqlalchemy_access.pyodbc\", \"AccessDialect_pyodbc\")\n\npytest.register_assert_rewrite(\"sqlalchemy.testing.assertions\")\n\nfrom sqlalchemy.testing.plugin.pytestplugin import *\n```\n\n----------------------------------------\n\nTITLE: Setting Scalar Default Values in SQLAlchemy Column Definition\nDESCRIPTION: Demonstrates how to set a simple scalar default value for a column that will be used during INSERT operations when no value is provided.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/defaults.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTable(\"mytable\", metadata_obj, Column(\"somecolumn\", Integer, default=12))\n```\n\n----------------------------------------\n\nTITLE: Accessing bound parameters from compiled statement\nDESCRIPTION: This snippet retrieves the bound parameters from the compiled INSERT statement. The parameters are stored in a dictionary where keys are the parameter names and values are the parameter values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    >>> compiled.params\n    {'name': 'spongebob', 'fullname': 'Spongebob Squarepants'}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Transient Object with Event Listener in SQLAlchemy Python\nDESCRIPTION: Demonstrates intercepting object initialization for a declarative base class using SQLAlchemy event system. Prints details of newly created transient objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy import event\n\nclass Base(DeclarativeBase):\n    pass\n\n@event.listens_for(Base, \"init\", propagate=True)\ndef intercept_init(instance, args, kwargs):\n    print(\"new transient: %s\" % instance)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Query with Joined Loading\nDESCRIPTION: Demonstrates querying class A with joined eager loading of relationship B and a limit applied.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ns = Session()\nprint(s.query(A).options(joinedload(A.b)).limit(5))\n```\n\n----------------------------------------\n\nTITLE: Defining set_shard_id Function in SQLAlchemy\nDESCRIPTION: This snippet outlines the set_shard_id function, which is used to specify the current shard identifier during data operations in a sharded environment. This allows queries and transactions to be directed to the appropriate shard based on the given ID.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/horizontal_shard.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: set_shard_id\n   :members:\n\n```\n\n----------------------------------------\n\nTITLE: Generating MOD operator in Oracle SQL\nDESCRIPTION: The modulo operator '%' is translated to the MOD function in Oracle SQL dialect.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nMOD\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key GUID Naming Convention\nDESCRIPTION: Shows how to implement a custom naming convention that generates GUID-based names for foreign key constraints using a custom token function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\ndef fk_guid(constraint, table):\n    str_tokens = (\n        [table.name,]\n        + [element.parent.name for element in constraint.elements]\n        + [element.target_fullname for element in constraint.elements]\n    )\n    guid = uuid.uuid5(uuid.NAMESPACE_OID, \"_\".join(str_tokens).encode(\"ascii\"))\n    return str(guid)\n\nconvention = {\n    \"fk_guid\": fk_guid,\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"fk\": \"fk_%(fk_guid)s\",\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Bulk UPDATE using bulk_update_mappings() in SQLAlchemy ORM\nDESCRIPTION: Example of using the legacy bulk_update_mappings() method to perform a bulk UPDATE operation. This method is now internally used by the ORM when interpreting an update() statement with primary key parameters.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/dml.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsession.bulk_update_mappings(\n    User,\n    [\n        {\"id\": 1, \"name\": \"scheeks\", \"manager_name\": \"Sandy Cheeks, President\"},\n        {\"id\": 2, \"name\": \"eugene\", \"manager_name\": \"Eugene H. Krabs, VP Marketing\"},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using SQL Functions with Column Properties\nDESCRIPTION: Example showing how to define and query a column_property using SQL functions, demonstrating a case where the Mapper is now properly passed to Session.get_bind().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    ...\n\n    score = column_property(func.coalesce(self.tables.users.c.name, None))\n\n\nsession.query(func.max(User.score)).scalar()\n```\n\n----------------------------------------\n\nTITLE: SQL Subquery with DISTINCT\nDESCRIPTION: Example of how SQLAlchemy applies DISTINCT keyword when subquery loading on a many-to-one relationship\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nSELECT b.id AS b_id, b.name AS b_name, anon_1.b_id AS a_b_id\nFROM (SELECT DISTINCT a_b_id FROM a) AS anon_1\nJOIN b ON b.id = anon_1.a_b_id\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Database Configuration for SQLAlchemy Tests\nDESCRIPTION: Example of overriding an existing database configuration in test.cfg to use with tox.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# test.cfg file\n[db]\npostgresql=postgresql+psycopg2://username:pass@hostname/dbname\n```\n\n----------------------------------------\n\nTITLE: Using Non-Integer Arguments for Select Limit and Offset in Python\nDESCRIPTION: This change allows the Select.limit() and Select.offset() methods to accept any SQL expression, including bound parameters, as arguments. It enables more flexible limit and offset operations in SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nselect(...).limit(bindparam('limit_value'))\nselect(...).offset(bindparam('offset_value'))\n```\n\n----------------------------------------\n\nTITLE: Inline Table Definition in Hybrid Declarative Mapping\nDESCRIPTION: Shows how to define a Table object inline within a declarative mapped class in SQLAlchemy ORM.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __table__ = Table(\n        \"user\",\n        Base.metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"name\", String),\n        Column(\"fullname\", String),\n        Column(\"nickname\", String),\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session.expunge() Behavior with Deleted Objects\nDESCRIPTION: Code showing the bug fix in how session.expunge() fully detaches deleted objects. Prior to the fix, the object would still be associated with the session in inspect(obj).session even after expunge was called.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nu1 = sess.query(User).first()\nsess.delete(u1)\n\nsess.flush()\n\nassert u1 not in sess\nassert inspect(u1).session is sess  # this is normal before commit\n\nsess.expunge(u1)\n\nassert u1 not in sess\nassert inspect(u1).session is None  # would fail\n```\n\n----------------------------------------\n\nTITLE: Using Single Parent Validator in SQLAlchemy Relationship with Python\nDESCRIPTION: This snippet illustrates how to use the single_parent option in SQLAlchemy to enforce that a relationship can only have one parent in a many-to-one setup. When configured, it validates that only one instance of the child can be associated with the parent at a time. Dependencies include SQLAlchemy framework with Base and session setup. The snippet demonstrates raising an InvalidRequestError if the constraint is violated, showcasing a use case in legacy databases or specific scenarios requiring strict parent-child constraints.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\n    bs = relationship(\"B\", back_populates=\"a\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n\n    a = relationship(\n        \"A\",\n        back_populates=\"bs\",\n        single_parent=True,\n        cascade=\"all, delete-orphan\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Augmented Base Class Implementation\nDESCRIPTION: Shows how to implement common functionality by augmenting the base class instead of using pure mixins. Demonstrates moving common attributes and methods into the base class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base(DeclarativeBase):\n    \"\"\"define a series of common elements that may be applied to mapped\n    classes using this class as a base class.\"\"\"\n\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\n\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n    __mapper_args__ = {\"eager_defaults\": True}\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n\nclass HasLogRecord:\n    \"\"\"mark classes that have a many-to-one relationship to the\n    ``LogRecord`` class.\"\"\"\n\n    log_record_id: Mapped[int] = mapped_column(ForeignKey(\"logrecord.id\"))\n\n    @declared_attr\n    def log_record(self) -> Mapped[\"LogRecord\"]:\n        return relationship(\"LogRecord\")\n\n\nclass LogRecord(Base):\n    log_info: Mapped[str]\n\n\nclass MyModel(HasLogRecord, Base):\n    name: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Using MySQL LIMIT with SQLAlchemy UPDATE and DELETE\nDESCRIPTION: Demonstrates the usage of the new _mysql.limit() function to add LIMIT clauses to SQLAlchemy UPDATE and DELETE operations for MySQL. This construct replaces the deprecated 'mysql_limit' dialect keyword argument.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_21/mysql_limit.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n_mysql.limit()\n```\n\nLANGUAGE: Python\nCODE:\n```\n_sql.update()\n```\n\nLANGUAGE: Python\nCODE:\n```\n_sql.delete()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Password Obfuscation in Python\nDESCRIPTION: Example showing the new password obfuscation behavior in SQLAlchemy 2.0. The str() method on URL objects now obfuscates passwords by default, requiring explicit render_as_string() calls to expose cleartext passwords.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> e1 = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n>>> e2 = create_engine(str(e1.url))\n```\n\n----------------------------------------\n\nTITLE: Resolving Column Name Conflicts in Inheritance Mapping\nDESCRIPTION: Demonstrates how to handle column name conflicts in SQLAlchemy inheritance mapping using explicit naming.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n\nclass B(A):\n    __tablename__ = \"b\"\n    b_id = Column(\"id\", Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n```\n\n----------------------------------------\n\nTITLE: Parenthesizing Functional Index Expressions for MySQL 8\nDESCRIPTION: Adjusted the MySQL dialect to correctly parenthesize functional index expressions as accepted by MySQL 8. This improves compatibility with MySQL 8's syntax for functional indexes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Verifying Object Identity in SQLAlchemy ORM (Python/SQL)\nDESCRIPTION: Demonstrates how to verify that a previously deleted object has been restored to the session and the database. This snippet shows how to use a SELECT query to confirm that the object's identity is intact.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> session.execute(select(User).where(User.name == \"patrick\")).scalar_one() is patrick\n{execsql}SELECT user_account.id, user_account.name, user_account.fullname\nFROM user_account\nWHERE user_account.name = ?\n[...] ('patrick',){stop}\nTrue\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Baked Queries Session-wide\nDESCRIPTION: Added a new flag to the Session to allow baked queries to be disabled session-wide, reducing memory use. Also added a Bakery wrapper to inspect the bakery returned by BakedQuery.bakery.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nSession.enable_baked_queries\nBakedQuery.bakery\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoload Replace Feature for Table Reflection\nDESCRIPTION: Adds a new 'autoload_replace' parameter to Table constructor. When set to False, existing columns are not replaced during autoloading, allowing more flexible table reflection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, MetaData\n\nmetadata = MetaData()\nTable('mytable', metadata, autoload=True, autoload_replace=False)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy JOIN with FOR UPDATE Example\nDESCRIPTION: Demonstrates query with joined eager loading and FOR UPDATE clause showing subquery generation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsession.query(A).options(joinedload(A.b)).limit(5)\n```\n\n----------------------------------------\n\nTITLE: Checking for Deleted Objects in SQLAlchemy ORM\nDESCRIPTION: New helper function was_deleted() to check if an object was deleted from a session. Returns True if the given object was the subject of a Session.delete() operation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwas_deleted(obj)\n```\n\n----------------------------------------\n\nTITLE: Using lazyload and enable_eagerloads with yield_per\nDESCRIPTION: Code examples showing how to properly use yield_per with lazyload and enable_eagerloads to avoid issues with eager loading. These techniques are necessary because joined/subquery eager loading is explicitly disallowed with yield_per.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nq = sess.query(Object).options(lazyload(\"*\")).yield_per(100)\n```\n\nLANGUAGE: python\nCODE:\n```\nq = sess.query(Object).enable_eagerloads(False).yield_per(100)\n```\n\nLANGUAGE: python\nCODE:\n```\nq = (\n    sess.query(Object)\n    .options(lazyload(\"*\"), joinedload(\"some_manytoone\"))\n    .yield_per(100)\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Subqueryload Pattern with ORDER BY\nDESCRIPTION: Shows the recommended way to use subqueryload with LIMIT by including ORDER BY on a unique column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession.scalars(\n    select(User).options(subqueryload(User.addresses)).order_by(User.id).limit(1)\n).first()\n```\n\n----------------------------------------\n\nTITLE: Handling None Primary Key in Query.get() (Python)\nDESCRIPTION: A warning is now emitted if a primary key value consisting of all None values is passed to Query.get(). The fix coerces a single None into a tuple for consistent handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nQuery.get(None)  # Now emits a warning\n```\n\n----------------------------------------\n\nTITLE: Setting Up MariaDB Container for SQLAlchemy Testing\nDESCRIPTION: Bash commands to create and configure a MariaDB Docker container for SQLAlchemy testing. Similar to MySQL configuration but uses the MariaDB image with UTF-8 character encoding.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# create the container with the proper configuration for sqlalchemy\ndocker run --rm -e MARIADB_USER='scott' -e MARIADB_PASSWORD='tiger' -e MARIADB_DATABASE='test' -e MARIADB_ROOT_PASSWORD='password' -p 127.0.0.1:3306:3306 -d --name mariadb mariadb --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# configure the database\nsleep 20\ndocker exec -ti mariadb mariadb -u root -ppassword -w -e \"CREATE DATABASE test_schema CHARSET utf8mb4; GRANT ALL ON test_schema.* TO scott;\"\n\n# To stop the container. It will also remove it.\ndocker stop mariadb\n```\n\n----------------------------------------\n\nTITLE: Setting the retaining flag in SQLAlchemy's Firebird dialect\nDESCRIPTION: Example of how to control the 'retaining' transaction flag when creating a SQLAlchemy engine for Firebird. The flag is set to True or False via the 'retaining' parameter in the create_engine function call.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nretaining=True\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated for Self-Referential Relationship in SQLAlchemy\nDESCRIPTION: Shows the SQL query generated by SQLAlchemy for a basic eager load of the self-referential Folder relationship. This demonstrates how SQLAlchemy handles the complex join conditions, including the aliasing of the self-referencing table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    folder.account_id AS folder_account_id,\n    folder.folder_id AS folder_folder_id,\n    folder.parent_id AS folder_parent_id,\n    folder.name AS folder_name,\n    folder_1.account_id AS folder_1_account_id,\n    folder_1.folder_id AS folder_1_folder_id,\n    folder_1.parent_id AS folder_1_parent_id,\n    folder_1.name AS folder_1_name\nFROM folder\n    LEFT OUTER JOIN folder AS folder_1\n    ON\n        folder_1.account_id = folder.account_id\n        AND folder.folder_id = folder_1.parent_id\n\nWHERE folder.folder_id = ? AND folder.account_id = ?\n```\n\n----------------------------------------\n\nTITLE: Legacy Declarative Base Implementation\nDESCRIPTION: Demonstrates implementing mixins using the legacy declarative_base() approach. Shows how to achieve the same functionality without using the newer DeclarativeBase class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_mixins.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import declared_attr\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\n\nclass Base:\n    \"\"\"define a series of common elements that may be applied to mapped\n    classes using this class as a base class.\"\"\"\n\n    @declared_attr.directive\n    def __tablename__(cls):\n        return cls.__name__.lower()\n\n    __table_args__ = {\"mysql_engine\": \"InnoDB\"}\n    __mapper_args__ = {\"eager_defaults\": True}\n\n    id = mapped_column(Integer, primary_key=True)\n\n\nBase = declarative_base(cls=Base)\n\n\nclass HasLogRecord:\n    \"\"\"mark classes that have a many-to-one relationship to the\n    ``LogRecord`` class.\"\"\"\n\n    log_record_id = mapped_column(ForeignKey(\"logrecord.id\"))\n\n    @declared_attr\n    def log_record(self):\n        return relationship(\"LogRecord\")\n\n\nclass LogRecord(Base):\n    log_info = mapped_column(String)\n\n\nclass MyModel(HasLogRecord, Base):\n    name = mapped_column(String)\n```\n\n----------------------------------------\n\nTITLE: SQL Boolean Expression in SELECT\nDESCRIPTION: Demonstrates using and_() and or_() to generate boolean expressions as result columns in a SELECT statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect([and_(1, 0)])\n```\n\n----------------------------------------\n\nTITLE: Using exists() as a Standalone Selectable in SQL\nDESCRIPTION: The exists() function can now be used as a standalone selectable, not just in a WHERE clause. This allows for more flexible query construction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nexists([columns], criterion).select()\n```\n\n----------------------------------------\n\nTITLE: Setting Query Property Example - Python\nDESCRIPTION: Example showing how to set up a query property on a class using Session.query_property()\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nMyClass.query = Session.query_property()\n```\n\n----------------------------------------\n\nTITLE: Querying Mapped Classes in Python\nDESCRIPTION: Demonstrates querying two mapped classes Foo and Bar, each with a 'spam' column, and unioning the results. Shows how column labeling has changed in SQLAlchemy 0.7.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nqa = session.query(Foo.spam)\nqb = session.query(Bar.spam)\n\nqu = qa.union(qb)\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Partition By in Table Definitions\nDESCRIPTION: Added support for PostgreSQL's PARTITION BY clause in table definitions using the 'postgresql_partition_by' parameter. This feature was added in SQLAlchemy 1.2.6.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"postgresql_partition_by\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Vertical Partitioning in SQLAlchemy ORM\nDESCRIPTION: This example demonstrates how to configure simple vertical partitioning in SQLAlchemy ORM, where different classes are mapped to different database engines using Session.configure().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nengine1 = create_engine(\"postgresql+psycopg2://db1\")\nengine2 = create_engine(\"postgresql+psycopg2://db2\")\n\nSession = sessionmaker()\n\n# bind User operations to engine 1, Account operations to engine 2\nSession.configure(binds={User: engine1, Account: engine2})\n\nsession = Session()\n```\n\n----------------------------------------\n\nTITLE: Using aliasing without flat parameter with with_polymorphic in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to use aliasing with `with_polymorphic` without the `flat` parameter, resulting in subqueries. When `flat=True` is omitted, each polymorphic selectable is enclosed within a subquery. The omission of the `flat` parameter produces a more verbose SQL statement. It also shows that each polymorphic selectable is enclosed within a subquery.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> manager_employee = with_polymorphic(Employee, [Manager], aliased=True)\n>>> engineer_employee = with_polymorphic(Employee, [Engineer], aliased=True)\n>>> stmt = (\n...     select(manager_employee, engineer_employee)\n...     .join(\n...         engineer_employee,\n...         engineer_employee.company_id == manager_employee.company_id,\n...     )\n...     .where(\n...         or_(\n...             manager_employee.name == \"Mr. Krabs\",\n...             manager_employee.Manager.manager_name == \"Eugene H. Krabs\",\n...         )\n...     )\n...     .order_by(engineer_employee.name, manager_employee.name)\n... )\n>>> print(stmt)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT anon_1.employee_id, anon_1.employee_name, anon_1.employee_type,\n    anon_1.employee_company_id, anon_1.manager_id, anon_1.manager_manager_name, anon_2.employee_id AS employee_id_1,\n    anon_2.employee_name AS employee_name_1, anon_2.employee_type AS employee_type_1,\n    anon_2.employee_company_id AS employee_company_id_1, anon_2.engineer_id, anon_2.engineer_engineer_info\n    FROM\n    (SELECT employee.id AS employee_id, employee.name AS employee_name, employee.type AS employee_type,\n    employee.company_id AS employee_company_id,\n    manager.id AS manager_id, manager.manager_name AS manager_manager_name\n    FROM employee LEFT OUTER JOIN manager ON employee.id = manager.id) AS anon_1\n    JOIN\n    (SELECT employee.id AS employee_id, employee.name AS employee_name, employee.type AS employee_type,\n    employee.company_id AS employee_company_id, engineer.id AS engineer_id, engineer.engineer_info AS engineer_engineer_info\n    FROM employee LEFT OUTER JOIN engineer ON employee.id = engineer.id) AS anon_2\n    ON anon_2.employee_company_id = anon_1.employee_company_id\n    WHERE anon_1.employee_name = :employee_name_2 OR anon_1.manager_manager_name = :manager_manager_name_1\n    ORDER BY anon_2.employee_name, anon_1.employee_name\n```\n\n----------------------------------------\n\nTITLE: Using Basic Custom Operator with op()\nDESCRIPTION: Demonstrates using the op() method to create a custom SQL operator\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import column\n>>> expr = column(\"x\").op(\">>\")(column(\"y\"))\n>>> print(expr)\n```\n\n----------------------------------------\n\nTITLE: Manager Subclass Definition with Selectin Loading\nDESCRIPTION: SQLAlchemy ORM definition for Manager subclass with selectin polymorphic loading configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    manager_name = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"manager\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Column Default Functions in SQLAlchemy\nDESCRIPTION: Shows how to access other bind parameter values within a Column default or onupdate function using the ExecutionContext. This allows for more complex default value logic based on other column values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncontext.parameters[someparam]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Tables and Relationships in SQL\nDESCRIPTION: SQL DDL statements defining two related tables 'a' and 'b'. Table 'a' contains id, data, and create_date columns, while table 'b' contains id, a_id, and data columns with a foreign key relationship to table 'a'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE a (\n    id INTEGER NOT NULL,\n    data VARCHAR NOT NULL,\n    create_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    PRIMARY KEY (id)\n)\n...\nCREATE TABLE b (\n    id INTEGER NOT NULL,\n    a_id INTEGER NOT NULL,\n    data VARCHAR NOT NULL,\n    PRIMARY KEY (id),\n    FOREIGN KEY(a_id) REFERENCES a (id)\n)\n...\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Adding Distinct Function to Column Elements in Python\nDESCRIPTION: This snippet adds a distinct() function to column elements in SQLAlchemy, allowing for operations like func.count(mycol.distinct()).\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfunc.count(mycol.distinct())\n```\n\n----------------------------------------\n\nTITLE: Automatically correlating SQLAlchemy queries in Python\nDESCRIPTION: SQLAlchemy now auto-correlates subqueries like `select()`. The update eliminates manual 'correlate' calls, allowing seamless subquery integration. By default, subquery entities will correlate unless disabled.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsubq = session.query(Entity.value).filter(Entity.id == Parent.entity_id).as_scalar()\nsession.query(Parent).filter(subq == \"some value\")\n```\n\n----------------------------------------\n\nTITLE: Using WITHIN GROUP for set-aggregate functions in SQL\nDESCRIPTION: This snippet describes the addition of support for SQL set-aggregate functions using the WITHIN GROUP clause in SQLAlchemy. It allows ordering criteria within the aggregate function for functions like percentile_cont and dense_rank. This is achieved using the FunctionElement.within_group method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Creating and Persisting New Write Only Collections in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to create and persist a new account object along with its associated transactions in a SQLAlchemy session, highlighting the use of write-only collections for transient objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> new_account = Account(\n...     identifier=\"account_01\",\n...     account_transactions=[\n...         AccountTransaction(description=\"initial deposit\", amount=Decimal(\"500.00\")),\n...         AccountTransaction(description=\"transfer\", amount=Decimal(\"1000.00\")),\n...         AccountTransaction(description=\"withdrawal\", amount=Decimal(\"-29.50\")),\n...     ],\n... )\n\n>>> with Session(engine) as session:\n...     session.add(new_account)\n...     session.commit()\n    {execsql}BEGIN (implicit)\n    INSERT INTO account (identifier) VALUES (?)\n    [...] ('account_01',)\n    INSERT INTO account_transaction (account_id, description, amount, timestamp)\n    VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id, timestamp\n    [... (insertmanyvalues) 1/3 (ordered; batch not supported)] (1, 'initial deposit', 500.0)\n    INSERT INTO account_transaction (account_id, description, amount, timestamp)\n    VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id, timestamp\n    [insertmanyvalues 2/3 (ordered; batch not supported)] (1, 'transfer', 1000.0)\n    INSERT INTO account_transaction (account_id, description, amount, timestamp)\n    VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id, timestamp\n    [insertmanyvalues 3/3 (ordered; batch not supported)] (1, 'withdrawal', -29.5)\n    COMMIT\n```\n\n----------------------------------------\n\nTITLE: Query Migration using Aliased Objects - 1.x Style\nDESCRIPTION: Using aliased() objects to select from a subquery in 1.x style, which provides clearer semantics than select_entity_from().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\n\nsubquery = session.query(User).filter(User.name.like(\"%somename%\")).subquery()\n\nua = aliased(User, subquery)\n\nuser = session.query(ua).order_by(ua.id).first()\n```\n\n----------------------------------------\n\nTITLE: Adding ON DELETE Options for Oracle Foreign Keys in SQLAlchemy\nDESCRIPTION: Implemented reflection of ON DELETE options for foreign keys in Oracle. Oracle does not support ON UPDATE cascades. This feature was contributed via pull request by Miroslav Shubernetskiy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# No specific code provided, refers to Oracle dialect implementation\n```\n\n----------------------------------------\n\nTITLE: Relationship Back Populates with Lambda\nDESCRIPTION: Example showing how relationship back_populates parameter now accepts both direct references and lambda functions for more flexible type checking and IDE support.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    bs: Mapped[list[B]] = relationship(back_populates=lambda: B.a)\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    a: Mapped[A] = relationship(back_populates=A.bs)\n```\n\n----------------------------------------\n\nTITLE: Session Autocommit Migration Example\nDESCRIPTION: Demonstrates migration from autocommit mode to explicit transaction control using Session.begin() in SQLAlchemy 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import Session\n\nsess = Session(engine)\n\nsess.begin()  # begin explicitly; if not called, will autobegin\n# when database access is needed\n\nsess.add(obj)\n\nsess.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining Deferred Column in SQLAlchemy Declarative\nDESCRIPTION: Shows how to use the deferred() function with Column in SQLAlchemy's declarative extension to create a deferred column.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = deferred(Column(Text))\n```\n\n----------------------------------------\n\nTITLE: Querying with Aliased Objects and Order By Column Property\nDESCRIPTION: Example showing how to query a model with an alias and order by a column property, which now correctly renders the SQL with proper ordering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(sess.query(A, a1).order_by(a1.b))\n```\n\n----------------------------------------\n\nTITLE: Using Declarative as_declarative Class Decorator\nDESCRIPTION: Example of the as_declarative class decorator that serves as a wrapper for declarative_base. This allows applying the declarative functionality to an existing base class using a class decorator approach.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@as_declarative\n```\n\n----------------------------------------\n\nTITLE: Configuring AUTOCOMMIT Isolation for PostgreSQL with psycopg2\nDESCRIPTION: Added support for 'AUTOCOMMIT' isolation when using the psycopg2 DBAPI with PostgreSQL. The isolation level can be set using the 'isolation_level' execution option.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nengine.execute(some_statement, isolation_level=\"AUTOCOMMIT\")\n```\n\n----------------------------------------\n\nTITLE: Using RETURNING Clause with cx_Oracle\nDESCRIPTION: Example of executing an INSERT statement with a RETURNING clause to retrieve specific columns after insertion. This demonstrates the fixed behavior where column keys in the result now match the actual column names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nresult = conn.execute(table.insert().values(x=5).returning(table.c.a, table.c.b))\n```\n\n----------------------------------------\n\nTITLE: Mapping Subset of Table Columns in SQLAlchemy\nDESCRIPTION: These snippets demonstrate how to map only a subset of columns from a table using include_properties and exclude_properties mapper arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\"include_properties\": [\"user_id\", \"user_name\"]}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Address(Base):\n    __table__ = address_table\n    __mapper_args__ = {\"exclude_properties\": [\"street\", \"city\", \"state\", \"zip\"]}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    __table__ = user_table\n    __mapper_args__ = {\n        \"include_properties\": [user_table.c.user_id, user_table.c.user_name]\n    }\n```\n\n----------------------------------------\n\nTITLE: Type Expression Example with LowerString\nDESCRIPTION: This example builds upon the previous one using the LowerString type.  A SELECT statement demonstrates how the `LowerString` type automatically applies the `lower` function to the `data` column.  It also demonstrates the use of lower on the bind parameter.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n>>> print(select([test_table]).where(test_table.c.data == \"HI\"))\n{printsql}SELECT lower(test_table.data) AS data\nFROM test_table\nWHERE test_table.data = lower(:data_1)\n```\n\n----------------------------------------\n\nTITLE: Querying Composite Attributes in SQLAlchemy 0.9\nDESCRIPTION: Example demonstrating how composite attributes are now returned as their object form when queried on a per-attribute basis in SQLAlchemy 0.9. To get individual columns, the .clauses accessor must now be used.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> session.query(Vertex.start, Vertex.end).filter(Vertex.start == Point(3, 4)).all()\n[(Point(x=3, y=4), Point(x=5, y=6))]\n```\n\n----------------------------------------\n\nTITLE: Using Query Delete with Session Synchronization\nDESCRIPTION: Example of using the delete() method on a SQLAlchemy Query object with fetch synchronization strategy, showing another case where the Mapper is now properly passed to Session.get_bind().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User).filter(User.id == 15).delete(synchronize_session=\"fetch\")\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for SQLAlchemy 0.4 in Python\nDESCRIPTION: Shows the correct way to import SQLAlchemy modules in version 0.4, including the ORM. This change is required as 0.4 no longer imports sub-modules into the namespace automatically.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import *\nfrom sqlalchemy.orm import *\n```\n\n----------------------------------------\n\nTITLE: Overriding Query.get() with a Custom Query Subclass in SQLAlchemy\nDESCRIPTION: Example showing how to override the functionality of Query.get() by creating a custom Query subclass. This replaces the removed MapperExtension.get() functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MyQuery(Query):\n    def get(self, ident): ...\n\n\nsession = sessionmaker(query_cls=MyQuery)()\n\nad1 = session.query(Address).get(1)\n```\n\n----------------------------------------\n\nTITLE: Basic Dataclass Field Definitions with SQLAlchemy\nDESCRIPTION: Shows basic field definitions for a dataclass using SQLAlchemy Column metadata\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nid: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\nuser_id: int = field(init=False, metadata={\"sa\": Column(ForeignKey(\"user.id\"))})\nemail_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n```\n\n----------------------------------------\n\nTITLE: Creating Table with SQLite ON CONFLICT (SQL)\nDESCRIPTION: This SQL code shows the rendered CREATE TABLE statement from the previous python code. It demonstrates how `sqlite_on_conflict` and `sqlite_on_conflict_primary_key` are translated into SQL's `ON CONFLICT` clauses for `PRIMARY KEY` and `UNIQUE` constraints. This is specific to SQLite dialect in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE some_table (\\n    id INTEGER NOT NULL,\\n    data INTEGER,\\n    PRIMARY KEY (id) ON CONFLICT FAIL,\\n    UNIQUE (id, data) ON CONFLICT IGNORE\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Session with create_savepoint Join Transaction Mode in Python\nDESCRIPTION: Example of configuring a TestCase that connects to a database with a non-ORM transaction and binds a Session with 'create_savepoint' join_transaction_mode. This ensures the Session creates a savepoint without affecting the outer transaction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass SomeTest(TestCase):\n    def setUp(self):\n        # connect to the database\n        self.connection = engine.connect()\n\n        # begin a non-ORM transaction\n        self.trans = self.connection.begin()\n\n        # bind an individual Session to the connection, selecting\n        # \"create_savepoint\" join_transaction_mode\n        self.session = Session(\n            bind=self.connection, join_transaction_mode=\"create_savepoint\"\n        )\n\n    def tearDown(self):\n        self.session.close()\n\n        # rollback non-ORM transaction\n        self.trans.rollback()\n\n        # return connection to the Engine\n        self.connection.close()\n```\n\n----------------------------------------\n\nTITLE: Oracle INSERT with RETURNING for Identity Primary Key\nDESCRIPTION: Example of the SQL generated by SQLAlchemy for Oracle Database when inserting a row with an Identity primary key. The RETURNING clause is used to fetch the server-generated ID value.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO my_table (data) VALUES (:data) RETURNING my_table.id INTO :ret_0\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type with Special Addition Function\nDESCRIPTION: Implements a custom Integer type that uses a special_addition function for addition operations\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer\n\nclass MyInt(Integer):\n    class comparator_factory(Integer.Comparator):\n        def __add__(self, other):\n            return func.special_addition(self.expr, other)\n```\n\n----------------------------------------\n\nTITLE: Attribute History Querying in SQLAlchemy ORM\nDESCRIPTION: Shows how attributes.get_history() now queries the database for an unloaded value by default, and demonstrates the new AttributeState.load_history() method for complementing the AttributeState.history attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, String, create_engine, inspect\nfrom sqlalchemy.orm import Session, attributes\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    data = Column(String)\n\n\ne = create_engine(\"sqlite://\", echo=True)\nBase.metadata.create_all(e)\n\nsess = Session(e)\n\na1 = A(data=\"a1\")\nsess.add(a1)\nsess.commit()  # a1 is now expired\n\n# history doesn't emit loader callables\nassert inspect(a1).attrs.data.history == (None, None, None)\n\n# in 0.8, this would fail to load the unloaded state.\nassert attributes.get_history(a1, \"data\") == (\n    (),\n    [\n        \"a1\",\n    ],\n    (),\n)\n\n# load_history() is now equivalent to get_history() with\n# passive=PASSIVE_OFF ^ INIT_OK\nassert inspect(a1).attrs.data.load_history() == (\n    (),\n    [\n        \"a1\",\n    ],\n    ()\n)\n```\n\n----------------------------------------\n\nTITLE: Manual SQL Parameter Rendering in SQLAlchemy for SQLite\nDESCRIPTION: Shows how to manually render SQL parameters for SQLite using SQLAlchemy's compilation features and regular expressions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\ne = create_engine(\"sqlite+pysqlite://\")\n\n# will use qmark style, i.e. ? for param\ncompiled = stmt.compile(e, compile_kwargs={\"render_postcompile\": True})\n\n# params in positional order\nparams = (repr(compiled.params[name]) for name in compiled.positiontup)\n\nprint(re.sub(r\"\\?\", lambda m: next(params), str(compiled)))\n```\n\n----------------------------------------\n\nTITLE: Comparing KeyedTuple Performance in SQLAlchemy ORM\nDESCRIPTION: A code snippet showing how to perform a basic query with Foo objects that returns a KeyedTuple. This example is used to demonstrate performance comparisons between different tuple implementations in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrows = sess.query(Foo.a, Foo.b, Foo.c).all()\n```\n\n----------------------------------------\n\nTITLE: Employee-Engineer Join Query with Multiple Columns\nDESCRIPTION: Complex SQL query selecting multiple columns from employee and engineer tables with JOIN and WHERE conditions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT engineer.id AS engineer_id, employee.id AS employee_id,\nemployee.type AS employee_type,\nengineer.engineer_info AS engineer_engineer_info\nFROM employee JOIN engineer ON employee.id = engineer.id\nWHERE employee.id IN (?, ?) ORDER BY employee.id\n```\n\n----------------------------------------\n\nTITLE: Interpreting 'None' in SQL Queries - SQLAlchemy Pycon+SQL\nDESCRIPTION: This snippet demonstrates how SQLAlchemy renders SQL queries with 'None' conditions, ensuring consistency in query outputs even when logical constructs are provided as 'None'. The examples show SQL translation outcomes when different 'None' conditions are combined using logical operators.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\n>>> print(select([t1.c.x]).where(None))\n{printsql}SELECT t.x FROM t WHERE NULL{stop}\n\n>>> print(select([t1.c.x]).where(None).where(None))\n{printsql}SELECT t.x FROM t WHERE NULL AND NULL{stop}\n\n>>> print(select([t1.c.x]).where(and_(None, None)))\n{printsql}SELECT t.x FROM t WHERE NULL AND NULL{stop}\n```\n\n----------------------------------------\n\nTITLE: Emitting DDL to Database from ORM Mapping in Python and SQL\nDESCRIPTION: Demonstrates how to emit DDL (Data Definition Language) to the database using the metadata associated with the ORM Declarative Base class. This example shows PRAGMA statements being executed, but no new tables are created as they already exist.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> Base.metadata.create_all(engine)\n```\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN (implicit)\nPRAGMA main.table_...info(\"user_account\")\n...\nPRAGMA main.table_...info(\"address\")\n...\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Query Options API in SQLAlchemy\nDESCRIPTION: Shows examples of the new query options API in SQLAlchemy, comparing old and new ways of specifying loader options. The new API provides a more explicit and flexible way to define loading strategies for relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Old Way\nquery(User).options(joinedload_all(\"orders.items.keywords\"))\n\n# New Way\nquery(User).options(joinedload(\"orders\").joinedload(\"items\").joinedload(\"keywords\"))\n\n# Old Way\nsession.query(Company).options(\n    subqueryload_all(Company.employees.of_type(Engineer), Engineer.machines)\n)\n\n# New Way\nsession.query(Company).options(\n    subqueryload(Company.employees.of_type(Engineer)).subqueryload(\"machines\")\n)\n\n# Old Way\nquery(User).options(defer(\"orders.description\"), defer(\"orders.isopen\"))\n\n# New Way\nquery(User).options(defaultload(\"orders\").defer(\"description\").defer(\"isopen\"))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Numeric Type in a Table\nDESCRIPTION: This snippet showcases how to use the `CustomNumeric` type defined in the previous example within a table definition.  It defines a `Table` named 'data' with columns 'x' and 'y' that both utilize the `CustomNumeric` type. It then constructs a select statement that uses the custom `log` operator to calculate the logarithm of column 'x' with respect to column 'y', illustrating the use of the custom operator in a query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndata = Table(\n    \"data\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"x\", CustomNumeric(10, 5)),\n    Column(\"y\", CustomNumeric(10, 5)),\n)\n\nstmt = select([data.c.x.log(data.c.y)]).where(data.c.x.log(2) < value)\nprint(conn.execute(stmt).fetchall())\n```\n\n----------------------------------------\n\nTITLE: Adding Value Persistence Support for Python PEP-435 Enums in SQLAlchemy\nDESCRIPTION: Added support for Enum to persist the values of enumeration, rather than the keys, when using a Python PEP-435 style enumerated object. Users can supply a callable function to return the string values to be persisted, allowing enumerations against non-string values to be value-persistable as well. Contributed via pull request by Jon Snyder.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Enum()\n```\n\n----------------------------------------\n\nTITLE: Optimizing Query Count in SQLAlchemy ORM\nDESCRIPTION: Refactored implementation of query.count() to use a consistent approach of wrapping the full query in a subquery and counting. The new implementation uses 'select count(1) from (<full query>)' pattern for all cases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery.from_self(func.count(literal_column('1'))).scalar()\n```\n\n----------------------------------------\n\nTITLE: Specifying MySQL Index Length\nDESCRIPTION: Added 'mysql_length' parameter to Index construct in SQLAlchemy, allowing specification of index length for MySQL databases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nIndex('index_name', 'column_name', mysql_length=10)\n```\n\n----------------------------------------\n\nTITLE: Supporting PEP 487 in SQLAlchemy DeclarativeMeta\nDESCRIPTION: Added a **kw argument to the DeclarativeMeta.__init__ method, allowing classes to support the PEP 487 metaclass hook __init_subclass__. This improves compatibility with Python's class initialization features.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDeclarativeMeta.__init__(**kw)\n```\n\n----------------------------------------\n\nTITLE: Query Rendering with Implicit Aliasing in SQL\nDESCRIPTION: Shows previously rendered SQL that implicitly used aliasing, which could be problematic. The query reflects the changes between SQLAlchemy versions with respect to automatically generating aliases.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.id AS a_id\nFROM a JOIN b ON b.a_id = a.id JOIN b AS b_1 ON b_1.a_id = a.id\n```\n\n----------------------------------------\n\nTITLE: Defining a SQLAlchemy Class with Mixin Binding\nDESCRIPTION: A code example demonstrating how to define a SQLAlchemy class that inherits from a mixin class, which can be used with Session binding to associate the mixin with a specific engine.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(SomeMixin, Base):\n    __tablename__ = \"my_table\"\n    # ...\n\n\nsession = Session(binds={SomeMixin: some_engine})\n```\n\n----------------------------------------\n\nTITLE: Using Database-Specific Inspector Capabilities (Python)\nDESCRIPTION: Shows how to use database-specific inspector capabilities, such as PostgreSQL's get_table_oid method. The from_engine method provides a backend-specific inspector with additional functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_engine = create_engine(\"postgresql://...\")\npg_insp = Inspector.from_engine(my_engine)\n\nprint(pg_insp.get_table_oid(\"my_table\"))\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Eager Loading in SQLAlchemy 0.4 ORM\nDESCRIPTION: Illustrates how to set up self-referential and cyclical eager loading in SQLAlchemy 0.4, using the join_depth parameter to control the depth of eager loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnodes = Table(\n    \"nodes\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"parent_id\", Integer, ForeignKey(\"nodes.id\")),\n    Column(\"name\", String(30)),\n)\n\n\nclass TreeNode(object):\n    pass\n\n\nmapper(\n    TreeNode,\n    nodes,\n    properties={\"children\": relation(TreeNode, lazy=False, join_depth=3)},\n)\n\ncreate_session().query(TreeNode).all()\n```\n\n----------------------------------------\n\nTITLE: Connection Context Manager Usage Example\nDESCRIPTION: Demonstrates the usage of Connection objects as context managers, showing both styles that either preserve or close the connection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith conn.connect() as c:  # leaves the Connection open\n    c.execute(\"...\")\n\nwith engine.connect() as c:  # closes the Connection\n    c.execute(\"...\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Test Suite Incompatibilities with Pytest 6.x\nDESCRIPTION: Addressed incompatibilities in the SQLAlchemy test suite when running against Pytest 6.x. This ensures the test suite remains compatible with the latest versions of Pytest.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: PostgreSQL ARRAY Literal and Concatenation\nDESCRIPTION: This example shows how to use array literals and concatenation with PostgreSQL arrays in SQLAlchemy.  The first example shows how two array literals can be concatenated directly in a query. The second example shows the array concatenation operator and how a Python list is implicitly converted to a PostgreSQL array.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.dialects import postgresql\n>>> conn.scalar(select([postgresql.array([1, 2]) + postgresql.array([3, 4, 5])]))\n[1, 2, 3, 4, 5]\n\nselect([mytable.c.arraycol + [4, 5, 6]])\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Metadata in SQLAlchemy\nDESCRIPTION: Examples of accessing table metadata and columns from mapped classes after removal of .c. attribute.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable = class_mapper(someclass).mapped_table\n\nfor col in table.c:\n    print(col)\n\ntable.c.somecolumn\n```\n\n----------------------------------------\n\nTITLE: Dataclass Default Value Handling\nDESCRIPTION: Shows how dataclass defaults are now handled through descriptors rather than direct __dict__ population.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_21.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Base(MappedAsDataclass, DeclarativeBase):\n    pass\n\nclass SomeObject(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, init=False)\n    status: Mapped[str] = mapped_column(default=\"default_status\")\n```\n\n----------------------------------------\n\nTITLE: Handling AsyncAdaptedQueuePool with Asyncio Engine in Python\nDESCRIPTION: Explains the usage of AsyncAdaptedQueuePool with async engines in SQLAlchemy. This pool class is automatically used with create_async_engine() and does not need to be specified explicitly. NullPool and StaticPool are also suitable for async engines.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.asyncio import create_async_engine\nfrom sqlalchemy.pool import AsyncAdaptedQueuePool, NullPool, StaticPool\n\n# AsyncAdaptedQueuePool is used automatically\nengine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\")\n\n# NullPool and StaticPool can also be used\nengine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", poolclass=NullPool)\n```\n\n----------------------------------------\n\nTITLE: Improving Attribute Ordering in SQLAlchemy ORM Descriptors\nDESCRIPTION: Adjusted the Mapper.all_orm_descriptors accessor to represent attributes in a deterministic order, based on their declaration order in Python 3.6+. This provides more consistent and predictable attribute ordering.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nMapper.all_orm_descriptors\n```\n\n----------------------------------------\n\nTITLE: Executing Statements with Bound Metadata in SQLAlchemy\nDESCRIPTION: This snippet outlines the requirement for statements to be associated with an engine or connection in SQLAlchemy 2.0, illustrating the transformation from legacy bound metadata usage to the current method of using engine connections directly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwith engine.connect() as conn:\n    result = conn.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationships with Subclass in Joined Inheritance\nDESCRIPTION: Example of setting up relationships between a Company class and a Manager subclass in a joined inheritance hierarchy. The relationship targets the subclass because the foreign key constraint is on the manager table rather than the base employee table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Company(Base):\n    __tablename__ = \"company\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    managers: Mapped[List[Manager]] = relationship(back_populates=\"company\")\n\n\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    type: Mapped[str]\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": \"type\",\n    }\n\n\nclass Manager(Employee):\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Stringification with UUID in SQLAlchemy and PostgreSQL\nDESCRIPTION: Provides an example of stringifying a SQLAlchemy statement involving a PostgreSQL UUID datatype, demonstrating more complex scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Integer\nfrom sqlalchemy import select\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import declarative_base\n\n\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    data = Column(UUID)\n\n\nstmt = select(A).where(A.data == uuid.uuid4())\n```\n\n----------------------------------------\n\nTITLE: Customizing GROUP BY clause rendering in SQLAlchemy\nDESCRIPTION: Refactored SQLCompiler to expose a group_by_clause method similar to order_by_clause and limit_clause methods, which can be overridden by dialects to customize how GROUP BY renders.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CustomCompiler(SQLCompiler):\n    def group_by_clause(self, group_by_clause):\n        # Custom implementation\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with SQL Server TIMESTAMP Primary Key in SQLAlchemy ORM\nDESCRIPTION: This example demonstrates how to define a SQLAlchemy ORM model using a SQL Server TIMESTAMP column as the primary key. It uses FetchedValue to indicate that the value is generated by the database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MySQLServerModel(Base):\n    __tablename__ = \"my_table\"\n\n    timestamp: Mapped[datetime.datetime] = mapped_column(\n        TIMESTAMP(), server_default=FetchedValue(), primary_key=True\n    )\n    data: Mapped[str] = mapped_column(String(50))\n```\n\n----------------------------------------\n\nTITLE: Chained Association Proxies for Complex Relationship Mapping in SQLAlchemy\nDESCRIPTION: Defines a data model with chained association proxies to demonstrate complex relationships between entities, where association proxies point to other association proxies.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n\n    b_values = association_proxy(\"atob\", \"b_value\")\n    c_values = association_proxy(\"atob\", \"c_value\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n    value = Column(String)\n\n    c = relationship(\"C\")\n\n\nclass C(Base):\n    __tablename__ = \"c\"\n    id = Column(Integer, primary_key=True)\n    b_id = Column(ForeignKey(\"b.id\"))\n    value = Column(String)\n\n\nclass AtoB(Base):\n    __tablename__ = \"atob\"\n\n    a_id = Column(ForeignKey(\"a.id\"), primary_key=True)\n    b_id = Column(ForeignKey(\"b.id\"), primary_key=True)\n\n    a = relationship(\"A\", backref=\"atob\")\n    b = relationship(\"B\", backref=\"atob\")\n\n    b_value = association_proxy(\"b\", \"value\")\n    c_value = association_proxy(\"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Initializing a Bakery in SQLAlchemy - Python\nDESCRIPTION: This snippet demonstrates how to create a bakery, which is used to cache query string construction steps for improved performance. The bakery stores cached data in an LRU cache, defaulting to 200 elements. It allows constructing a query as a series of Python callables using lambdas. Dependencies include sqlalchemy.ext.baked and sqlalchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.ext import baked\n\nbakery = baked.bakery()\n```\n\n----------------------------------------\n\nTITLE: ORM Relationship Improvements in SQLAlchemy\nDESCRIPTION: Various improvements to relationship handling including new flags like load_on_pending and cascade_backrefs, improved lazy loading behavior, and better handling of passive updates and deletes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Session Management Pattern in Python\nDESCRIPTION: Example showing the wrong approach to session management where session creation and management is embedded within a class method rather than being managed externally.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n### this is the **wrong way to do it** ###\n\n\nclass ThingOne:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(FooBar).values(x=5))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n```\n\n----------------------------------------\n\nTITLE: Flattening Empty Conjunctions in ORM\nDESCRIPTION: Behavioral improvement in SQLAlchemy ORM where empty conjunctions like and_() and or_() are flattened when inside an enclosing conjunction. For example, and_(x, or_()) now produces 'X' instead of 'X AND ()'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nand_(x, or_())\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with TIMESTAMP Primary Key in MySQL using SQLAlchemy ORM\nDESCRIPTION: This example demonstrates how to define a SQLAlchemy ORM model with a TIMESTAMP column as the primary key in MySQL. It uses CAST and Binary to handle the binary nature of TIMESTAMP in MySQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import cast, Binary\n\n\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    timestamp = mapped_column(\n        TIMESTAMP(), default=cast(func.now(), Binary), primary_key=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Select From Subquery Example - Python/SQLAlchemy\nDESCRIPTION: Shows how to use Query.select_from() with a subquery to filter results before selection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsession.query(User.name).select_from(user_table.select().where(user_table.c.id > 5))\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT anon_1.name AS anon_1_name FROM (SELECT users.id AS id,\nusers.name AS name FROM users WHERE users.id > :id_1) AS anon_1\n```\n\n----------------------------------------\n\nTITLE: Adding Validator Decorator in SQLAlchemy ORM\nDESCRIPTION: Introduced a Validator AttributeExtension and @validates decorator for marking methods that validate one or more mapped attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@validates('attribute_name')\ndef validate_attribute(self, key, value):\n    # Validation logic here\n    return value\n```\n\n----------------------------------------\n\nTITLE: Fixing URL Comparison in SQLAlchemy Engine (Python)\nDESCRIPTION: Fixed an issue where comparing two URL objects did not take port number into account. Port comparison is now added to the __eq__() method, and __ne__() is implemented for Python 2 compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Next Value SQL Function\nDESCRIPTION: Implementation of generic next_value() function that works with Sequence objects to generate appropriate 'next value' strings for different database platforms.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nfunc.next_value()\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Engine Connection in SQLAlchemy 0.6\nDESCRIPTION: Examples showing how to create database engine connections using both default and explicit DBAPI implementations in SQLAlchemy 0.6.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncreate_engine(\"postgresql://scott:tiger@localhost/test\")\n\ncreate_engine(\"postgresql+pg8000://scott:tiger@localhost/test\")\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table with Generic Types\nDESCRIPTION: Shows the resulting SQL when creating the reflected table in PostgreSQL, with MySQL-specific types converted to standard SQL types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE my_table (\n    id SERIAL NOT NULL,\n    data1 VARCHAR(50),\n    data2 INTEGER,\n    data3 INTEGER,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Optimized Joined Loading\nDESCRIPTION: Shows the optimized SQL query generated for joined eager loading with uselist=False relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, b_1.id AS b_1_id, b_1.a_id AS b_1_a_id\nFROM a LEFT OUTER JOIN b AS b_1 ON a.id = b_1.a_id\nLIMIT :param_1\n```\n\n----------------------------------------\n\nTITLE: SQL Server INSERT without RETURNING for Trigger-Generated Values\nDESCRIPTION: Example of SQL generated for SQL Server with pyodbc driver when RETURNING is disabled. Instead of RETURNING, it uses scope_identity() to fetch the newly generated primary key value after INSERT.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO my_table (data) VALUES (?); select scope_identity()\n```\n\n----------------------------------------\n\nTITLE: Database Setup and Session Creation\nDESCRIPTION: Configures SQLAlchemy engine, creates database schema, and initializes a session for ORM operations\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\"sqlite://\", echo=True)\\nBase.metadata.create_all(engine)\\nsession = Session(engine.connect())\\nsession.add(\\n    Company(\\n        name=\"Krusty Krab\",\\n        employees=[\\n            Manager(...),\\n            Engineer(...),\\n            Engineer(...)\\n        ]\\n    )\\n)\\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ORM Annotations in SQLAlchemy Select Statement\nDESCRIPTION: Shows the structure of annotations dictionary on a SQLAlchemy ORM-enabled select statement, containing entity namespace, parententity, and parentmapper information for a User model.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt._raw_columns[0]._annotations\nimmutabledict({\n  'entity_namespace': <Mapper at 0x7f4dd8098c10; User>,\n  'parententity': <Mapper at 0x7f4dd8098c10; User>,\n  'parentmapper': <Mapper at 0x7f4dd8098c10; User>\n})\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy 0.9 Correct SQL from select_from\nDESCRIPTION: Example of correct SQL generated by select_from in SQLAlchemy 0.9, which properly maintains the entity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- SQLAlchemy 0.9\nSELECT \"user\".id AS user_id, \"user\".name AS user_name\nFROM (SELECT \"user\".id AS id, \"user\".name AS name\nFROM \"user\"\nWHERE \"user\".id = :id_1) AS anon_1 JOIN \"user\" ON \"user\".id = id\nWHERE \"user\".name = :name_1\n```\n\n----------------------------------------\n\nTITLE: Using Mapper Properties with AbstractConcreteBase\nDESCRIPTION: Shows the improved AbstractConcreteBase class which now allows relationships and other mapper properties to be set up inline on the abstract base. The example demonstrates defining columns and relationships that will be properly configured for both abstract and concrete classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import (\n    declarative_base,\n    declared_attr,\n    AbstractConcreteBase,\n)\n\nBase = declarative_base()\n\n\nclass Something(Base):\n    __tablename__ = \"something\"\n    id = Column(Integer, primary_key=True)\n\n\nclass Abstract(AbstractConcreteBase, Base):\n    id = Column(Integer, primary_key=True)\n\n    @declared_attr\n    def something_id(cls):\n        return Column(ForeignKey(Something.id))\n\n    @declared_attr\n    def something(cls):\n        return relationship(Something)\n\n\nclass Concrete(Abstract):\n    __tablename__ = \"cca\"\n    __mapper_args__ = {\"polymorphic_identity\": \"cca\", \"concrete\": True}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over ResultProxy in Python\nDESCRIPTION: This snippet shows how to use the iterator interface of ResultProxy to iterate over query results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor row in result:\n```\n\n----------------------------------------\n\nTITLE: Bulk Replace with AssociationProxy - Python\nDESCRIPTION: Illustrates bulk replacement functionality for sets and dictionaries with AssociationProxy, showing proper handling of existing associations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"test_a\"\n\n    id = Column(Integer, primary_key=True)\n    b_rel = relationship(\n        \"B\",\n        collection_class=set,\n        cascade=\"all, delete-orphan\",\n    )\n    b = association_proxy(\"b_rel\", \"value\", creator=lambda x: B(value=x))\n\n\nclass B(Base):\n    __tablename__ = \"test_b\"\n    __table_args__ = (UniqueConstraint(\"a_id\", \"value\"),)\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"test_a.id\"), nullable=False)\n    value = Column(String)\n```\n\n----------------------------------------\n\nTITLE: Setting execution options for Engine\nDESCRIPTION: Demonstrates how to set execution options for an Engine that will apply to all connections generated by this engine.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEngine(execution_options={})\nEngine.update_execution_options()\n```\n\n----------------------------------------\n\nTITLE: Customize Enum Subtype Configuration in SQLAlchemy\nDESCRIPTION: Illustrates customizing a specific Enum subtype configuration, setting a string length and forcing non-native enums. This requires SQLAlchemy and Enum libraries and defines a specific configuration in the type_annotation_map.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nimport sqlalchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Status(enum.Enum):\n    PENDING = \"pending\"\n    RECEIVED = \"received\"\n    COMPLETED = \"completed\"\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        Status: sqlalchemy.Enum(Status, length=50, native_enum=False)\n    }\n```\n\n----------------------------------------\n\nTITLE: Type Inference from Foreign Keys in SQLAlchemy\nDESCRIPTION: The document explains how SQLAlchemy columns can inherit their type from referenced columns via foreign keys. Recent updates ensure reliable type propagation once foreign key constraints are established, eliminating \"NullType\" defaults.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Table, MetaData, Column, Integer, ForeignKey\nmetadata = MetaData()\nt2 = Table(\"t2\", metadata, Column(\"t1id\", ForeignKey(\"t1.id\")))\nt2.c.t1id.type\n\nt1 = Table(\"t1\", metadata, Column(\"id\", Integer, primary_key=True))\nt2.c.t1id.type\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Table, MetaData, Column, Integer, ForeignKeyConstraint\nmetadata = MetaData()\nt2 = Table(\n    \"t2\",\n    metadata,\n    Column(\"t1a\"),\n    Column(\"t1b\"),\n    ForeignKeyConstraint([\"t1a\", \"t1b\"], [\"t1.a\", \"t1.b\"]),\n)\nt2.c.t1a.type\nt2.c.t1b.type\n\nt1 = Table(\n    \"t1\",\n    metadata,\n    Column(\"a\", Integer, primary_key=True),\n    Column(\"b\", Integer, primary_key=True),\n)\nt2.c.t1a.type\nt2.c.t1b.type\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import Table, MetaData, Column, Integer, ForeignKey\nmetadata = MetaData()\nt2 = Table(\"t2\", metadata, Column(\"t1id\", ForeignKey(\"t1.id\")))\nt3 = Table(\"t3\", metadata, Column(\"t2t1id\", ForeignKey(\"t2.t1id\")))\nt2.c.t1id.type\nt3.c.t2t1id.type\n\nt1 = Table(\"t1\", metadata, Column(\"id\", Integer, primary_key=True))\nt2.c.t1id.type\nt3.c.t2t1id.type\n```\n\n----------------------------------------\n\nTITLE: Fixing Object Name Escaping in MSSQL Dialect\nDESCRIPTION: Fixed a bug where the MSSQL dialect incorrectly escaped object names containing ']' characters. This ensures proper quoting of object names in SQL Server queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL ENUM information using inspect\nDESCRIPTION: Shows how to use the new get_enums() method to retrieve information about all available ENUM types in a PostgreSQL database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect, create_engine\n\nengine = create_engine(\"postgresql+psycopg2://host/dbname\")\ninsp = inspect(engine)\nprint(insp.get_enums())\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL Output for Joined Query in SQL\nDESCRIPTION: This snippet shows the SQL output from a join operation that deduplicates redundant joins. The SQL illustrates how SQLAlchemy optimizes joins by removing redundant relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.id AS a_id\nFROM a JOIN b ON a.id = b.a_id\n```\n\n----------------------------------------\n\nTITLE: Declarative Table Arguments Configuration\nDESCRIPTION: Example of using __table_args__ class variable in SQLAlchemy declarative models to pass arguments to Table constructor.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n__table_args__ = (arg1, arg2, ..., {\"kwarg1\": value, ...})\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping with Deferred Columns in SQLAlchemy\nDESCRIPTION: Example of using deferred() function with imperative mapping to configure deferred loading of columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/columns.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Blob\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import Table\nfrom sqlalchemy import Text\nfrom sqlalchemy.orm import registry\n\nmapper_registry = registry()\n\nbook_table = Table(\n    \"book\",\n    mapper_registry.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"title\", String(50)),\n    Column(\"summary\", Text),\n    Column(\"cover_image\", Blob),\n)\n\n\nclass Book:\n    pass\n\n\nmapper_registry.map_imperatively(\n    Book,\n    book_table,\n    properties={\n        \"summary\": deferred(book_table.c.summary),\n        \"cover_image\": deferred(book_table.c.cover_image),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL Data Types in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to import all supported MySQL data types from the SQLAlchemy MySQL dialect. It includes standard SQL types as well as MySQL-specific types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/mysql.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects.mysql import (\n    BIGINT,\n    BINARY,\n    BIT,\n    BLOB,\n    BOOLEAN,\n    CHAR,\n    DATE,\n    DATETIME,\n    DECIMAL,\n    DECIMAL,\n    DOUBLE,\n    ENUM,\n    FLOAT,\n    INTEGER,\n    LONGBLOB,\n    LONGTEXT,\n    MEDIUMBLOB,\n    MEDIUMINT,\n    MEDIUMTEXT,\n    NCHAR,\n    NUMERIC,\n    NVARCHAR,\n    REAL,\n    SET,\n    SMALLINT,\n    TEXT,\n    TIME,\n    TIMESTAMP,\n    TINYBLOB,\n    TINYINT,\n    TINYTEXT,\n    VARBINARY,\n    VARCHAR,\n    YEAR,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with DateTime Primary Key in MySQL using SQLAlchemy ORM\nDESCRIPTION: This snippet shows how to define a SQLAlchemy ORM model with a DateTime column as the primary key in MySQL. It uses the NOW() function as an explicit pre-execute-supported default.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    timestamp = mapped_column(DateTime(), default=func.now(), primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Using Mapping Access for SQLAlchemy Result Rows\nDESCRIPTION: This snippet shows how to transform a SQLAlchemy Result object into a MappingResult, allowing dictionary-like access to row data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = conn.execute(text(\"select x, y from some_table\"))\n\nfor dict_row in result.mappings():\n    x = dict_row[\"x\"]\n    y = dict_row[\"y\"]\n```\n\n----------------------------------------\n\nTITLE: Legacy vs Modern Import Patterns in SQLAlchemy\nDESCRIPTION: Shows changes in import patterns between SQLAlchemy 1.x and 2.0 for declarative base and attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Old imports\nfrom sqlalchemy.ext import declarative_base, declared_attr\n\n# New imports\nfrom sqlalchemy.orm import declarative_base, declared_attr\n```\n\n----------------------------------------\n\nTITLE: Reflecting Temporary Tables and Views in SQLAlchemy\nDESCRIPTION: Added Inspector.get_temp_table_names() and Inspector.get_temp_view_names() methods. SQLite and Oracle dialects support these methods. Temporary table and view names have been removed from get_table_names() and get_view_names() for these dialects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nInspector.get_temp_table_names()\n```\n\nLANGUAGE: python\nCODE:\n```\nInspector.get_temp_view_names()\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to ScopedSession in SQLAlchemy 0.4.7p1 (Python)\nDESCRIPTION: Workaround code for adding 'add()' and 'add_all()' methods to the ScopedSession class in SQLAlchemy 0.4.7p1. This patch imports necessary functions and uses setattr to dynamically add the missing methods to the ScopedSession class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm.scoping import ScopedSession, instrument\n\nsetattr(ScopedSession, \"add\", instrument(\"add\"))\nsetattr(ScopedSession, \"add_all\", instrument(\"add_all\"))\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Expression with ORM Lazyload\nDESCRIPTION: Example of using lazyload with wildcard expression '*' that previously caused assertion errors when queries didn't contain actual entities.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n_orm.lazyload(\"*\")\n```\n\n----------------------------------------\n\nTITLE: Improving Schema Translation for PostgreSQL ENUM Types\nDESCRIPTION: Fixed issues with the PostgreSQL ENUM type not consulting the schema translate map when emitting CREATE TYPE or DROP TYPE, and optimized the caching of enum existence checks during DDL sequences.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL ENUM type with explicit MetaData\nDESCRIPTION: Demonstrates the behavior of ENUM types when explicitly associated with a MetaData object, showing different creation and dropping scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nmy_enum = ENUM(\"a\", \"b\", \"c\", name=\"myenum\", metadata=metadata)\n\ntable = Table(\"sometable\", metadata, Column(\"some_enum\", my_enum))\n\n# will fail: ENUM 'my_enum' does not exist\ntable.create(engine)\n\n# will check for enum and emit CREATE TYPE\ntable.create(engine, checkfirst=True)\n\ntable.drop(engine)  # will emit DROP TABLE, *not* DROP TYPE\n\nmetadata.drop_all(engine)  # will emit DROP TYPE\n\nmetadata.create_all(engine)  # will emit CREATE TYPE\n```\n\n----------------------------------------\n\nTITLE: Multiple Sub-Options with Load.options()\nDESCRIPTION: Demonstrates specifying multiple sub-options simultaneously using the Load.options() method\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(A).options(\n    defaultload(A.atob).options(joinedload(B.btoc), joinedload(B.btod))\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Connection Factory\nDESCRIPTION: Example of using connect_args to specify a custom connection factory for PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\n    \"postgresql+psycopg2://user:pass@hostname/dbname\",\n    connect_args={\"connection_factory\": MyConnectionFactory},\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified Baked Query with Lambda Expressions in Python\nDESCRIPTION: Shows a more concise implementation of baked queries using lambda expressions and operator overloading, which simplifies the code while maintaining all performance benefits.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbakery = baked.bakery()\n\n\ndef lookup(session, id_argument, include_frobnizzle=False):\n    parameterized_query = bakery.bake(\n        lambda s: s.query(Model).filter(Model.id == bindparam(\"id\"))\n    )\n\n    if include_frobnizzle:\n        parameterized_query += lambda q: q.filter(Model.frobnizzle == True)\n\n    return parameterized_query(session).params(id=id_argument).all()\n```\n\n----------------------------------------\n\nTITLE: Generating VARCHAR2 for Oracle String Type\nDESCRIPTION: Changed the String type in SQLAlchemy to generate VARCHAR2 on Oracle, which is recommended as the default VARCHAR. Added explicit VARCHAR2 and NVARCHAR2 types to the Oracle dialect.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nColumn('name', String())  # Generates VARCHAR2 on Oracle\n```\n\n----------------------------------------\n\nTITLE: Legacy Non-Dataclass Point Implementation\nDESCRIPTION: Shows how to implement the Point class without using dataclasses, requiring manual implementation of constructor and attribute handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n```\n\n----------------------------------------\n\nTITLE: Custom UTF8 String Type Definition\nDESCRIPTION: TypeDecorator implementation that converts Unicode values to UTF-8 encoded strings. Used to handle cases where non-unicode strings are required.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass UTF8Encoded(TypeDecorator):\n    \"\"\"Unicode type which coerces to utf-8.\"\"\"\n\n    impl = sa.VARCHAR\n\n    def process_result_value(self, value, dialect):\n        if isinstance(value, unicode):\n            value = value.encode(\"utf-8\")\n        return value\n```\n\n----------------------------------------\n\nTITLE: Unicode Type Handling with cx_Oracle in Python\nDESCRIPTION: Example showing cursor.var() usage with Python unicode primitive in cx_Oracle, demonstrating performance overhead in Python 2.x versus Python 3.x implementations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncursor.var(unicode)\n```\n\n----------------------------------------\n\nTITLE: Ordering with Column Labels in SQLAlchemy\nDESCRIPTION: Improvement in handling column label ordering with support for multiple column references in order_by method\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\norder_by(Entity.some_prop, entity_alias.some_prop)\n```\n\n----------------------------------------\n\nTITLE: Setting Up MSSQL Container for SQLAlchemy Testing\nDESCRIPTION: Bash commands to create and configure a Microsoft SQL Server Docker container for SQLAlchemy testing. Creates a container with the Developer version and configures snapshot isolation for testing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# create the container with the proper configuration for sqlalchemy\n# it will use the Developer version\ndocker run --rm -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 127.0.0.1:1433:1433 -d --name mssql mcr.microsoft.com/mssql/server\n\n# configure the database\nsleep 20\ndocker exec -it mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'yourStrong(!)Password' -Q \"sp_configure 'contained database authentication', 1; RECONFIGURE; CREATE DATABASE test CONTAINMENT = PARTIAL; ALTER DATABASE test SET ALLOW_SNAPSHOT_ISOLATION ON; ALTER DATABASE test SET READ_COMMITTED_SNAPSHOT ON; CREATE LOGIN scott WITH PASSWORD = 'tiger^5HHH'; ALTER SERVER ROLE sysadmin ADD MEMBER scott;\"\ndocker exec -it mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'yourStrong(!)Password' -d test -Q \"CREATE SCHEMA test_schema\"\ndocker exec -it mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'yourStrong(!)Password' -d test -Q \"CREATE SCHEMA test_schema_2\"\n\n# To stop the container. It will also remove it.\ndocker stop mssql\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes Without Triggering Events in SQLAlchemy Python\nDESCRIPTION: This snippet shows how to use setattr_clean and append_clean methods of SmartProperty to set attributes without triggering 'dirty' events or history.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmyclass.prop1.setattr_clean(myobject, 'hi')\n```\n\n----------------------------------------\n\nTITLE: Using __abstract__ Flag with Multiple MetaData Collections in SQLAlchemy ORM\nDESCRIPTION: Shows how to create abstract base classes with the __abstract__ flag to organize tables into different MetaData collections. This allows tables to be created in different databases or schemas.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_config.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Base(DeclarativeBase):\n    pass\n\n\nclass DefaultBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n\n\nclass OtherBase(Base):\n    __abstract__ = True\n    metadata = MetaData()\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Type Behavior with create_engine\nDESCRIPTION: Example showing how to configure the engine to normalize network type handling across different DBAPIs by disabling native inet types, causing all DBAPIs to return strings for network address types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ne = create_engine(\"postgresql+psycopg://scott:tiger@host/dbname\", native_inet_types=False)\n```\n\n----------------------------------------\n\nTITLE: SQL output of combining relationship with custom ON criteria\nDESCRIPTION: The generated SQL demonstrates joining between tables `user_account` and `address` with an additional criteria using `.and_()`.  It adds a condition that limits the join to only addresses with a specific email address.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\n{execsql}SELECT user_account.fullname\nFROM user_account\nJOIN address ON user_account.id = address.user_id AND address.email_address = ?\n[...] ('squirrel@squirrelpower.org',){stop}\n[('Sandy Cheeks',)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence with Explicit Start Value\nDESCRIPTION: Shows the recommended approach for creating a sequence with an explicit start value of 1 across all SQLAlchemy versions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# All SQLAlchemy versions\nfrom sqlalchemy import Sequence\nfrom sqlalchemy.schema import CreateSequence\nprint(CreateSequence(Sequence(\"my_seq\", start=1)))\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Index Column Lengths\nDESCRIPTION: The mysql_length parameter for Index can now be passed as a dictionary of column names and lengths for composite indexes on MySQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nIndex('my_index', my_table.c.col1, my_table.c.col2,\n      mysql_length={'col1': 10, 'col2': 20})\n```\n\n----------------------------------------\n\nTITLE: Adding DefaultDialect.dbapi_exception_translation_map in SQLAlchemy Engine\nDESCRIPTION: Adds support for DBAPIs with exception names linked to different exception classes by implementing a new accessor DefaultDialect.dbapi_exception_translation_map. This allows SQLAlchemy's exception wrapping to work properly with such DBAPIs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDefaultDialect.dbapi_exception_translation_map\n```\n\n----------------------------------------\n\nTITLE: Imperative Mapping for Parent-Child Relationship\nDESCRIPTION: Demonstrates SQLAlchemy's original Imperative mapping form for a Parent-Child relationship.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/basic_relationships.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nregistry.map_imperatively(\n    Parent,\n    parent_table,\n    properties={\"children\": relationship(\"Child\", back_populates=\"parent\")},\n)\n\nregistry.map_imperatively(\n    Child,\n    child_table,\n    properties={\"parent\": relationship(\"Parent\", back_populates=\"children\")},\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy DML Constructor Arguments in SQLAlchemy\nDESCRIPTION: Shows deprecated constructor argument patterns for insert/update/delete operations in SQLAlchemy 1.x.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# no longer supported\nstmt = insert(table, values={\"x\": 10, \"y\": 15}, inline=True)\n\n# no longer supported\nstmt = insert(table, values={\"x\": 10, \"y\": 15}, returning=[table.c.x])\n\n# no longer supported\nstmt = table.delete(table.c.x > 15)\n\n# no longer supported\nstmt = table.update(table.c.x < 15, preserve_parameter_order=True).values(\n    [(table.c.y, 20), (table.c.x, table.c.y + 10)]\n)\n```\n\n----------------------------------------\n\nTITLE: MappedCollection Bulk Assignment Example in Python\nDESCRIPTION: Demonstrates how custom collections can specify conversion methods for bulk assignment operations in SQLAlchemy ORM. Shows the syntax for assigning multiple values to a collection or dictionary collection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nobj.col =\n# or\nobj.dictcol = {'foo': newval1, 'bar': newval2}\n```\n\n----------------------------------------\n\nTITLE: Disabling RETURNING for Trigger-Generated Values in SQLAlchemy ORM\nDESCRIPTION: Configuration to disable the use of RETURNING clause for a table where server-generated values are not compatible with RETURNING (e.g., trigger-generated values on certain databases). This setting ensures SQLAlchemy won't attempt to use RETURNING with this particular table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Base):\n    __tablename__ = \"my_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    data: Mapped[str] = mapped_column(String(50))\n\n    # assume a database trigger populates a value into this column\n    # during INSERT\n    special_identifier = mapped_column(String(50), server_default=FetchedValue())\n\n    # disable all use of RETURNING for the table\n    __table_args__ = {\"implicit_returning\": False}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Query.count() Functionality in SQLAlchemy ORM\nDESCRIPTION: Improved Query.count() to handle multiple-entity and column-based queries correctly. For column-based queries, it now uses a subquery to get the accurate row count.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nquery(A, B).count()\nquery(func.count(A.name)).count()\n```\n\n----------------------------------------\n\nTITLE: Importing MariaDB-Specific Data Types in SQLAlchemy\nDESCRIPTION: This snippet shows how to import MariaDB-specific data types (INET4 and INET6) from the SQLAlchemy MySQL dialect. These types are unique to MariaDB and not available in standard MySQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/mysql.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.dialects.mysql import (\n    INET4,\n    INET6,\n)\n```\n\n----------------------------------------\n\nTITLE: Table Sort Example - Python SQLAlchemy \nDESCRIPTION: Example showing the MetaData.sorted_tables collection which produces deterministic ordering of Table objects based on names and dependencies.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nMetaData.sorted_tables\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Join Query Example - Python\nDESCRIPTION: Example demonstrating how to construct joins to subclasses in a polymorphic relation\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery(Company).join(['employees', Engineer.name])\n```\n\n----------------------------------------\n\nTITLE: Adding ARRAY type to SQLAlchemy Core\nDESCRIPTION: This snippet describes the addition of the ARRAY type to SQLAlchemy Core, which serves as the base for the PostgreSQL ARRAY type. It facilitates SQL-standard array-supporting features. Additionally, any_ and all_ operators have been added, which supports arrays on PostgreSQL and subqueries on MySQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Default Type Mapping Dictionary in Python\nDESCRIPTION: Demonstrates the default type mapping dictionary used by SQLAlchemy to map Python types to SQL column types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Type\n\nimport datetime\nimport decimal\nimport uuid\n\nfrom sqlalchemy import types\n\ntype_map: Dict[Type[Any], TypeEngine[Any]] = {\n    bool: types.Boolean(),\n    bytes: types.LargeBinary(),\n    datetime.date: types.Date(),\n    datetime.datetime: types.DateTime(),\n    datetime.time: types.Time(),\n    datetime.timedelta: types.Interval(),\n    decimal.Decimal: types.Numeric(),\n    float: types.Float(),\n    int: types.Integer(),\n    str: types.String(),\n    uuid.UUID: types.Uuid(),\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Association Proxies in SQLAlchemy\nDESCRIPTION: SQL query examples showing the use of association proxies and EXISTS clauses to query across multiple related tables\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id\nFROM a\nWHERE EXISTS (SELECT 1\nFROM atob\nWHERE a.id = atob.a_id AND (EXISTS (SELECT 1\nFROM b\nWHERE b.id = atob.b_id AND b.value = :value_1)))\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id\nFROM a\nWHERE EXISTS (SELECT 1\nFROM atob\nWHERE a.id = atob.a_id AND (EXISTS (SELECT 1\nFROM b\nWHERE b.id = atob.b_id AND (EXISTS (SELECT 1\nFROM c\nWHERE b.id = c.b_id AND c.value = :value_1)))))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Primary Key Constraint in SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to inspect the primary key constraint on a Table object. The primary_key attribute provides access to the PrimaryKeyConstraint object.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> user_table.primary_key\nPrimaryKeyConstraint(Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False))\n```\n\n----------------------------------------\n\nTITLE: Join with Implicit Aliasing in SQLAlchemy in Python\nDESCRIPTION: Shows the impact of implicit aliasing in SQLAlchemy when the same join target is used multiple times. This snippet illustrates how queries are rendered in different versions and the implications of aliasing on database errors.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nprint(s.query(A).join(B, B.a_id == A.id).join(B, B.a_id == A.id))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PostgreSQL ENUM Quoting in SQLAlchemy\nDESCRIPTION: Shows how the PostgreSQL ENUM type now applies escaping to single quote signs within enumerated values. This example creates an ENUM type with quoted values and prints the resulting SQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.dialects import postgresql\n>>> type = postgresql.ENUM(\"one\", \"two\", \"three's\", name=\"myenum\")\n>>> from sqlalchemy.dialects.postgresql import base\n>>> print(base.CreateEnumType(type).compile(dialect=postgresql.dialect()))\n{printsql}CREATE TYPE myenum AS ENUM ('one','two','three''s')\n```\n\n----------------------------------------\n\nTITLE: Declarative Mixin with Lambda Functions\nDESCRIPTION: Demonstrates using declarative mixins with dataclasses using lambda functions for relationship definitions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass UserMixin:\n    __tablename__ = \"user\"\n\n    __sa_dataclass_metadata_key__ = \"sa\"\n\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n\n    addresses: List[Address] = field(\n        default_factory=list, metadata={\"sa\": lambda: relationship(\"Address\")}\n    )\n\n\n@dataclass\nclass AddressMixin:\n    __tablename__ = \"address\"\n    __sa_dataclass_metadata_key__ = \"sa\"\n    id: int = field(init=False, metadata={\"sa\": Column(Integer, primary_key=True)})\n    user_id: int = field(\n        init=False, metadata={\"sa\": lambda: Column(ForeignKey(\"user.id\"))}\n    )\n    email_address: str = field(default=None, metadata={\"sa\": Column(String(50))})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Un-proxied Usage in Python\nDESCRIPTION: Demonstrates accessing a keyword through a user's keyword association without using a proxy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> # illustrate un-proxied usage\n... print(user.user_keyword_associations[\"sk3\"].kw)\n<__main__.Keyword object at 0x12ceb90>\n```\n\n----------------------------------------\n\nTITLE: Adding info Parameter to SynonymProperty and ComparableProperty in Python\nDESCRIPTION: This change adds the 'info' parameter to the constructors of SynonymProperty and ComparableProperty classes in the ORM. It allows attaching custom metadata to these properties.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nSynonymProperty(..., info={...})\nComparableProperty(..., info={...})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ODBC AutoTranslate Parameter in MSSQL\nDESCRIPTION: Shows the format of how the odbc_autotranslate parameter is passed to the ODBC connection string when connecting to a MSSQL database. This parameter controls the automatic translation of character data between client and server character sets.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"AutoTranslate=%s\" % odbc_autotranslate\n```\n\n----------------------------------------\n\nTITLE: Using before_compile Event with Baked Queries in Python\nDESCRIPTION: Shows how to use the before_compile event with baked queries by setting bake_ok=True, allowing the event to modify queries while still enabling caching for consistent modifications.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(Query, \"before_compile\", retval=True, bake_ok=True)\ndef my_event(query):\n    for desc in query.column_descriptions:\n        if desc[\"type\"] is User:\n            entity = desc[\"entity\"]\n            query = query.filter(entity.deleted == False)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw DBAPI Connection with Async Engine\nDESCRIPTION: Shows how to access the raw connection when using an async SQLAlchemy driver, including both the sync-style adapter and the actual async connection.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    engine = create_async_engine(...)\n    conn = await engine.connect()\n\n    # pep-249 style ConnectionFairy connection pool proxy object\n    # presents a sync interface\n    connection_fairy = await conn.get_raw_connection()\n\n    # beneath that proxy is a second proxy which adapts the\n    # asyncio driver into a pep-249 connection object, accessible\n    # via .dbapi_connection as is the same with a sync API\n    sqla_sync_conn = connection_fairy.dbapi_connection\n\n    # the really-real innermost driver connection is available\n    # from the .driver_connection attribute\n    raw_asyncio_connection = connection_fairy.driver_connection\n\n    # work with raw asyncio connection\n    result = await raw_asyncio_connection.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Expression Stringification Example in Python\nDESCRIPTION: Demonstrates how to properly stringify a basic SQL expression using SQLAlchemy's column construct\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from sqlalchemy import column\n>>> print(column(\"x\") == 5)\n{printsql}x = :x_1\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Relationships with Type Annotations in SQLAlchemy ORM\nDESCRIPTION: Shows how to use the legacy dynamic relationship pattern with modern type annotations using the DynamicMapped class. This maintains compatibility for existing code while providing proper type hinting support.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DynamicMapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Account(Base):\n    __tablename__ = \"account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    identifier: Mapped[str]\n    account_transactions: DynamicMapped[\"AccountTransaction\"] = relationship(\n        cascade=\"all, delete-orphan\",\n        passive_deletes=True,\n        order_by=\"AccountTransaction.timestamp\",\n    )\n\nclass AccountTransaction(Base):\n    __tablename__ = \"account_transaction\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    account_id: Mapped[int] = mapped_column(\n        ForeignKey(\"account.id\", ondelete=\"cascade\")\n    )\n    description: Mapped[str]\n    amount: Mapped[Decimal]\n    timestamp: Mapped[datetime] = mapped_column(default=func.now())\n```\n\n----------------------------------------\n\nTITLE: INSERT statement without explicit values clause\nDESCRIPTION: This example demonstrates that if `.values()` is not called on an `Insert` object, the insert statement is created for every column in the table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    >>> print(insert(user_table))\n    {printsql}INSERT INTO user_account (id, name, fullname) VALUES (:id, :name, :fullname)\n\n```\n\n----------------------------------------\n\nTITLE: Improved Error Handling for Invalid Loader Options in SQLAlchemy ORM\nDESCRIPTION: Fixed an issue where using a loader option against a string attribute name that is not actually a mapped attribute would raise an uninformative AttributeError. A more descriptive error is now raised in this case.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Associating Custom DDL with Database Objects (Python)\nDESCRIPTION: Example of how to create custom DDL strings and associate them with metadata objects using the execute_at method. This allows for automatic execution of DDL statements at specific points in the lifecycle.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import DDL\n\nDDL(\"CREATE TRIGGER users_trigger ...\").execute_at(\"after-create\", metadata)\n```\n\n----------------------------------------\n\nTITLE: Using in_ Function with Sequences in SQLAlchemy\nDESCRIPTION: Demonstrates the updated in_ function syntax that accepts sequences or selectables, replacing the deprecated positional arguments approach.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmy_table.select(my_table.c.id.in_([1, 2, 3]))\nmy_table.select(my_table.c.id.in_(listOfIds))\n```\n\n----------------------------------------\n\nTITLE: Basic SQLAlchemy ORM Session Usage with Python\nDESCRIPTION: Demonstrates a simple SQLAlchemy ORM session operation, adding a User object and committing the transaction. Shows the SQL statements executed implicitly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/dataclasses.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> with Session(e) as session:\n...     session.add(User())\n...     session.commit()\n{execsql}BEGIN (implicit)\nINSERT INTO user_account (created_at) VALUES (utc_timestamp())\n[generated in 0.00010s] ()\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Manager Subclass with Additional Attributes\nDESCRIPTION: Defines a Manager subclass of Employee with specific attributes and polymorphic identity\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_inheritance_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Manager(Employee):\\n    __tablename__ = \"manager\"\\n    id: Mapped[int] = mapped_column(ForeignKey(\"employee.id\"), primary_key=True)\\n    manager_name: Mapped[str]\\n    paperwork: Mapped[List[\"Paperwork\"]] = relationship()\\n    __mapper_args__ = {\\n        \"polymorphic_identity\": \"manager\",\\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Transactional Decorator Function in Python\nDESCRIPTION: This snippet demonstrates how to create a transactional decorator function using engine.transaction() with *args and **kwargs pass-through.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nengine.transaction(func)\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Return Scale for MySQL DOUBLE Type\nDESCRIPTION: Shows how to configure precision for floating point to Decimal conversion using the decimal_return_scale parameter on a MySQL DOUBLE column. This controls the number of decimal places preserved when retrieving floating point values as Decimal objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.mysql import DOUBLE\nimport decimal\n\ndata = Table(\n    \"data\",\n    metadata,\n    Column(\"double_value\", mysql.DOUBLE(decimal_return_scale=12, asdecimal=True)),\n)\n\nconn.execute(\n    data.insert(),\n    double_value=45.768392065789,\n)\nresult = conn.scalar(select([data.c.double_value]))\n\n# previously, this would typically be Decimal(\"45.7683920658\"),\n# e.g. trimmed to 10 decimal places\n\n# now we get 12, as requested, as MySQL can support this\n# much precision for DOUBLE\nassert result == decimal.Decimal(\"45.768392065789\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy AND Expression with Generator\nDESCRIPTION: Example demonstrating use of Python generators with SQLAlchemy's and_() conjunction.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nand_(x == y for x, y in tuples)\n```\n\n----------------------------------------\n\nTITLE: Sharding Support with Identity Keys in SQLAlchemy\nDESCRIPTION: Example demonstrating how identity keys support sharding by allowing identical primary keys from different shards to coexist in the same identity map\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntokyo = WeatherLocation(\"Asia\", \"Tokyo\")\nnewyork = WeatherLocation(\"North America\", \"New York\")\n\ntokyo.reports.append(Report(80.0))\nnewyork.reports.append(Report(75))\n\nsess = create_session()\n\nsess.add_all([tokyo, newyork, quito])\n\nsess.commit()\n\nnewyork_report = newyork.reports[0]\ntokyo_report = tokyo.reports[0]\n\nassert inspect(newyork_report).identity_key == (Report, (1,), \"north_america\")\nassert inspect(tokyo_report).identity_key == (Report, (1,), \"asia\")\n\nassert inspect(newyork_report).identity_token == \"north_america\"\nassert inspect(tokyo_report).identity_token == \"asia\"\n```\n\n----------------------------------------\n\nTITLE: Using DDL Objects as ClauseElements (Python)\nDESCRIPTION: Shows how DDL objects in SQLAlchemy 0.6 can be used as regular ClauseElement objects. This allows for both string representation and direct execution of DDL statements like CreateTable.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import CreateTable\n\ncreate = CreateTable(mytable)\n\n# dumps the CREATE TABLE as a string\nprint(create)\n\n# executes the CREATE TABLE statement\nengine.execute(create)\n```\n\n----------------------------------------\n\nTITLE: Enhancing Query Result Naming in SQLAlchemy ORM\nDESCRIPTION: Improved naming of RowTuple objects returned by Query(*cols), prioritizing mapped attribute names over column keys and names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nQuery(Class.foo, Class.bar)\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Column Values from Composite Attributes\nDESCRIPTION: Example showing how to access individual column values from composite attributes in SQLAlchemy 0.9 using the .clauses accessor.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> session.query(Vertex.start.clauses, Vertex.end.clauses).filter(\n...     Vertex.start == Point(3, 4)\n... ).all()\n[(3, 4, 5, 6)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Class in SQLAlchemy\nDESCRIPTION: Shows how to use the custom RoutingSession class with sessionmaker to create Session instances that will automatically route operations to the appropriate engines.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/persistence_techniques.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nSession = sessionmaker(class_=RoutingSession)\n```\n\n----------------------------------------\n\nTITLE: Adding WITH FOR UPDATE to Session.refresh Method\nDESCRIPTION: Added new argument with_for_update to the Session.refresh method to support locking options, replacing the deprecated Query.with_lockmode method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nSession.refresh(with_for_update=...)\n```\n\n----------------------------------------\n\nTITLE: Using Aliased Joins in SQLAlchemy ORM\nDESCRIPTION: Shows how to create explicit ORM aliases for self-referential joins using the aliased() function.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFriend = aliased(Person)\nsession.query(Person, Friend).join((Friend, Person.friends)).all()\n```\n\n----------------------------------------\n\nTITLE: Boolean Expression Comparison Example in Python\nDESCRIPTION: Example showing a boolean comparison of SQL expressions that previously had issues with auto-grouping in BinaryExpression class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nexpr1 = mycolumn > 2\nbool(expr1 == expr1)\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entry with reStructuredText in SQLAlchemy\nDESCRIPTION: This example demonstrates how to create a properly formatted changelog entry using reStructuredText and Sphinx markup. It shows how to specify tags, ticket references, and properly format method, parameter, and class references with appropriate indentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. change::\n    :tags: bug, sql, orm\n    :tickets: 4839, 3257\n\n    Please use reStructuredText and Sphinx markup when possible.  For example\n    method :meth:`.Index.create` and parameter\n    :paramref:`.Index.create.checkfirst`, and :class:`.Table` which will\n    subject to the relevant markup.  Also please note the indentions required\n    for the text.\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy Session Module\nDESCRIPTION: Module import declaration for SQLAlchemy's ORM session module, which contains the Session class and related functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: sqlalchemy.orm.session\n```\n\n----------------------------------------\n\nTITLE: Using database_principal_id() With SQL Server\nDESCRIPTION: SQL Server query pattern using database_principal_id() function with sys.database_principals view to determine default schema independent of login type.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndatabase_principal_id()\n```\n\n----------------------------------------\n\nTITLE: Adding False and True Expression Constructs to SQLAlchemy SQL Namespace\nDESCRIPTION: Adds 'false()' and 'true()' expression constructs to the sqlalchemy.sql namespace, though not included in __all__ yet.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import false, true\n\nfalse_expr = false()\ntrue_expr = true()\n```\n\n----------------------------------------\n\nTITLE: Documenting AssociationProxyExtensionType Class Using Sphinx\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the AssociationProxyExtensionType class and all its members using the autoclass directive.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/associationproxy.rst#2025-04-21_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: AssociationProxyExtensionType\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Backend Tests Against MySQL\nDESCRIPTION: Command to run only backend tests against a MySQL database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py311-mysql-backendonly\n```\n\n----------------------------------------\n\nTITLE: Python MySQL Table Reflection Example\nDESCRIPTION: Demonstrates reflecting a MySQL table with vendor-specific types into SQLAlchemy Table objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData, Table, create_engine\nmysql_engine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\")\nmetadata_obj = MetaData()\nmy_mysql_table = Table(\"my_table\", metadata_obj, autoload_with=mysql_engine)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pre-Context Manager Connection Pattern\nDESCRIPTION: Example showing the explicit connection and transaction management pattern before Python context managers were available.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nconn = engine.connect()\ntry:\n    trans = conn.begin()\n\n    conn.execute(table.insert(), parameters)\n    result = conn.execute(table.select())\n\n    conn.execute(table.update(), parameters)\n\n    trans.commit()\nexcept:\n    trans.rollback()\n    raise\nfinally:\n    conn.close()\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters with Type Specification in SQLAlchemy\nDESCRIPTION: Example showing the renamed type_ parameter usage in bindparam() function, replacing the previous type keyword argument.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nb = bindparam(\"foo\", type_=String)\n```\n\n----------------------------------------\n\nTITLE: Handling Loaded Persistent Objects in SQLAlchemy\nDESCRIPTION: Intercepts objects as they are loaded into the persistent state from the database, providing a session-level event hook.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_events.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@event.listens_for(sessionmaker, \"loaded_as_persistent\")\ndef intercept_loaded_as_persistent(session, object_):\n    print(\"object loaded into persistent state: %s\" % object_)\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type with Overridden Addition Operator\nDESCRIPTION: Creates a custom Integer type that overrides the addition operator to use a 'goofy' operator\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer\n\nclass MyInt(Integer):\n    class comparator_factory(Integer.Comparator):\n        def __add__(self, other):\n            return self.op(\"goofy\")(other)\n```\n\n----------------------------------------\n\nTITLE: Python Code Profiling Context Manager\nDESCRIPTION: Context manager implementation using cProfile to profile code execution. Provides detailed breakdown of time spent in different function calls and outputs stats sorted by cumulative time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/performance.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cProfile\nimport io\nimport pstats\nimport contextlib\n\n@contextlib.contextmanager\ndef profiled():\n    pr = cProfile.Profile()\n    pr.enable()\n    yield\n    pr.disable()\n    s = io.StringIO()\n    ps = pstats.Stats(pr, stream=s).sort_stats(\"cumulative\")\n    ps.print_stats()\n    # uncomment this to see who's calling what\n    # ps.print_callers()\n    print(s.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Tuple-Sorting Behavior in RowProxy Objects - SQLAlchemy Python\nDESCRIPTION: Demonstrates the new tuple-sorting behavior of RowProxy objects in SQLAlchemy. Updated comparison methods allow RowProxy objects to function like tuples for sorting operations, enhancing data handling capabilities and consistency when fetching multiple rows.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nusers.insert().execute(\n    dict(user_id=1, user_name=\"foo\"),\n    dict(user_id=2, user_name=\"bar\"),\n    dict(user_id=3, user_name=\"def\"),\n)\n\nrows = users.select().order_by(users.c.user_name).execute().fetchall()\n\neq_(rows, [(2, \"bar\"), (3, \"def\"), (1, \"foo\")])\n\neq_(sorted(rows), [(1, \"foo\"), (2, \"bar\"), (3, \"def\")])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inefficient Query with Redundant Joins\nDESCRIPTION: This snippet shows an inefficient query pattern where both an explicit join and joinedload are used, resulting in unnecessary duplicate joins in the generated SQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(joinedload(Address.user))\n...     .order_by(Address.id)\n... )\n>>> print(stmt)  # SELECT has a JOIN and LEFT OUTER JOIN unnecessarily\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT address.id, address.email_address, address.user_id,\nuser_account_1.id AS id_1, user_account_1.name, user_account_1.fullname\nFROM address JOIN user_account ON user_account.id = address.user_id\nLEFT OUTER JOIN user_account AS user_account_1 ON user_account_1.id = address.user_id\nWHERE user_account.name = :name_1 ORDER BY address.id\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy with asyncio support using pip\nDESCRIPTION: This command installs SQLAlchemy with the asyncio extra, which includes the greenlet dependency. This is necessary for CPU architectures where greenlet doesn't provide pre-built binary wheels, such as Apple M1.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install sqlalchemy[asyncio]\n```\n\n----------------------------------------\n\nTITLE: Displaying Reflected Table Information in Python\nDESCRIPTION: Shows how to display the information of a Table object that has been created through reflection. The output includes the table name, associated MetaData object, and column definitions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/metadata.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> some_table\nTable('some_table', MetaData(),\n    Column('x', INTEGER(), table=<some_table>),\n    Column('y', INTEGER(), table=<some_table>),\n    schema=None)\n```\n\n----------------------------------------\n\nTITLE: SQL Schema-Qualified vs Non-Qualified Queries\nDESCRIPTION: Examples showing equivalent schema-qualified and non-schema-qualified SQL queries accessing a table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- schema qualified\nSELECT message_id FROM project.messages\n\n-- non-schema qualified\nSELECT message_id FROM messages\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dataclass Mixin Error\nDESCRIPTION: Example showing incorrect usage of non-dataclass mixin with SQLAlchemy ORM Mapped Dataclasses that triggers a warning. The code demonstrates how attributes from non-dataclass mixins are not properly handled.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport inspect\nfrom typing import Optional\nfrom uuid import uuid4\n\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import MappedAsDataclass\n\n\nclass Mixin:\n    create_user: Mapped[int] = mapped_column()\n    update_user: Mapped[Optional[int]] = mapped_column(default=None, init=False)\n\n\nclass Base(DeclarativeBase, MappedAsDataclass):\n    pass\n\n\nclass User(Base, Mixin):\n    __tablename__ = \"sys_user\"\n\n    uid: Mapped[str] = mapped_column(\n        String(50), init=False, default_factory=uuid4, primary_key=True\n    )\n    username: Mapped[str] = mapped_column()\n    email: Mapped[str] = mapped_column()\n```\n\n----------------------------------------\n\nTITLE: Using conv() Function for Constraint Naming in SQLAlchemy\nDESCRIPTION: Introduces the new conv() function used to mark constraint names as already having had a naming convention applied, useful for Alembic migrations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n_schema.conv\n```\n\n----------------------------------------\n\nTITLE: SQL Rendering of select_from Query in SQLAlchemy 0.9\nDESCRIPTION: The SQL output generated by a query using join with a subselect in SQLAlchemy 0.9.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"user\".id AS user_id, \"user\".name AS user_name\nFROM \"user\" JOIN (SELECT \"user\".id AS id, \"user\".name AS name\nFROM \"user\"\nWHERE \"user\".id = :id_1) AS anon_1 ON \"user\".id = anon_1.id\nWHERE \"user\".name = :name_1\n```\n\n----------------------------------------\n\nTITLE: Engineer Subclass Definition with Selectin Loading\nDESCRIPTION: SQLAlchemy ORM definition for Engineer subclass with selectin polymorphic loading configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Engineer(Employee):\n    __tablename__ = \"engineer\"\n    id = mapped_column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n    engineer_info = mapped_column(String(30))\n\n    __mapper_args__ = {\n        \"polymorphic_load\": \"selectin\",\n        \"polymorphic_identity\": \"engineer\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Foreign Keys in SQL\nDESCRIPTION: SQL example showing how foreign key constraints are typically rendered inline within CREATE TABLE statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/constraints.rst#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE addresses (\n    id INTEGER NOT NULL,\n    user_id INTEGER,\n    email_address VARCHAR NOT NULL,\n    PRIMARY KEY (id),\n    CONSTRAINT user_id_fk FOREIGN KEY(user_id) REFERENCES users (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating viewonly=True on relationships in SQLAlchemy 0.9\nDESCRIPTION: Example showing how viewonly=True on relationships prevents history from taking effect in SQLAlchemy 0.9, preventing the parent object from being marked as dirty.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, ForeignKey, create_engine\nfrom sqlalchemy.orm import backref, relationship, Session\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import inspect\n\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n    a = relationship(\"A\", backref=backref(\"bs\", viewonly=True))\n\n\ne = create_engine(\"sqlite://\")\nBase.metadata.create_all(e)\n\na = A()\nb = B()\n\nsess = Session(e)\nsess.add_all([a, b])\nsess.commit()\n\nb.a = a\n\nassert b in sess.dirty\n\n# before 0.9.0\n# assert a in sess.dirty\n# assert inspect(a).attrs.bs.history.has_changes()\n\n# after 0.9.0\nassert a not in sess.dirty\nassert not inspect(a).attrs.bs.history.has_changes()\n```\n\n----------------------------------------\n\nTITLE: Session Configuration and Usage\nDESCRIPTION: Demonstrates new session creation paradigms and configuration options in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine(\"myengine://\")\nSession = sessionmaker(bind=engine, autoflush=True, transactional=True)\n\n# use the new Session() freely\nsess = Session()\nsess.save(someobject)\nsess.flush()\n\n# Configure session later\nSession.configure(bind=create_engine(...))\n```\n\n----------------------------------------\n\nTITLE: Using Built-in DDL Constructs with Events (Python)\nDESCRIPTION: Demonstrates how to use SQLAlchemy's built-in DDL constructs like AddConstraint with the execute_at event system. This allows for automatic execution of constraints after table creation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import Constraint, AddConstraint\n\nAddContraint(CheckConstraint(\"value > 5\")).execute_at(\"after-create\", mytable)\n```\n\n----------------------------------------\n\nTITLE: Column-Based Association Proxy Example - Python\nDESCRIPTION: Shows the implementation of a column-based association proxy with standard column operators like 'like' and 'equals'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass User(Base):\n    # ...\n\n    elements = relationship(\"Element\")\n\n    # column-based association proxy\n    values = association_proxy(\"elements\", \"value\")\n\n\nclass Element(Base):\n    # ...\n\n    value = Column(String)\n```\n\n----------------------------------------\n\nTITLE: Parameter Binding Example with Executemany\nDESCRIPTION: Shows correct parameter binding for bulk insert operations\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nm = MetaData()\nt = Table(\"t\", m, Column(\"a\", Integer), Column(\"b\", Integer), Column(\"c\", Integer))\n\ne.execute(\n    t.insert(),\n    [\n        {\"a\": 1, \"b\": 2, \"c\": 3},\n        {\"a\": 2, \"b\": None, \"c\": 4},\n        {\"a\": 3, \"b\": 4, \"c\": 5},\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Parameter Stringification for SQLite\nDESCRIPTION: Example of rendering inline bound parameters for SQLite using position-based parameter substitution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sqlexpressions.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport re\ne = create_engine(\"sqlite+pysqlite://\")\ncompiled = stmt.compile(e, compile_kwargs={\"render_postcompile\": True})\nparams = (repr(compiled.params[name]) for name in compiled.positiontup)\nprint(re.sub(r\"\\?\", lambda m: next(params), str(compiled)))\n```\n\n----------------------------------------\n\nTITLE: MySQL Distinct Query with Prefixes\nDESCRIPTION: Shows the deprecated and new way to specify distinct queries with prefixes in MySQL using SQLAlchemy select statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nselect([mytable], distinct=\"ALL\", prefixes=[\"HIGH_PRIORITY\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nselect([mytable]).prefix_with(\"HIGH_PRIORITY\", \"ALL\")\n```\n\n----------------------------------------\n\nTITLE: Simplified SQL Using Anonymous Label\nDESCRIPTION: Demonstrates simplified query using the anonymous label in ORDER BY clause after label tracking improvements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.type AS a_type, (SELECT max(b.id) AS max_1\nFROM b WHERE b.a_id = a.id) AS anon_1\nFROM a ORDER BY anon_1\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeExtension in SQLAlchemy ORM\nDESCRIPTION: Refined AttributeExtension to fire events before mutations occur and require append() and set() methods to return the given value. This allows for validating listeners that can modify values before use.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolumn_property(extension=AttributeExtension())\ncomposite_property(extension=AttributeExtension())\nrelation(extension=AttributeExtension())\n```\n\n----------------------------------------\n\nTITLE: Query Expression Attribute Usage\nDESCRIPTION: Example showing how to use the new query_expression attribute type that can receive ad-hoc SQL expressions at query time using with_expression.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n    x = Column(Integer)\n    y = Column(Integer)\n\n    # will be None normally...\n    expr = query_expression()\n\n# but let's give it x + y\na1 = session.query(A).options(with_expression(A.expr, A.x + A.y)).first()\nprint(a1.expr)\n```\n\n----------------------------------------\n\nTITLE: Handling SSL SYSCALL Timeout Error in PostgreSQL Dialect\nDESCRIPTION: Added 'SSL SYSCALL error: Operation timed out' to the list of messages that trigger a 'disconnect' scenario for the psycopg2 driver in the PostgreSQL dialect.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"SSL SYSCALL error: Operation timed out\"\n```\n\n----------------------------------------\n\nTITLE: Using Type Conversion Adapter Mixin in Python\nDESCRIPTION: Example showing how to apply the AdaptOldConvertMethods mixin to a custom type engine class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyType(AdaptOldConvertMethods, TypeEngine): ...\n```\n\n----------------------------------------\n\nTITLE: Using select_from to Change Join Order in SQLAlchemy\nDESCRIPTION: Example showing how to use select_from to reverse the order of join elements in a query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nq = (\n    session.query(User)\n    .select_from(select_stmt)\n    .join(User, User.id == select_stmt.c.id)\n    .filter(User.name == \"ed\")\n)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy 0.6 Executemany Operations\nDESCRIPTION: Shows proper usage of executemany operations with consistent parameter sets and binding requirements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconnection.execute(table.insert(), {\"data\": \"row1\"}, {\"data\": \"row2\"}, {\"data\": \"row3\"})\n\nconnection.execute(\n    table.insert(),\n    {\"timestamp\": today, \"data\": \"row1\"},\n    {\"timestamp\": today, \"data\": \"row2\"},\n    {\"data\": \"row3\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Threadlocal Engine Usage Pattern\nDESCRIPTION: Example showing the original SQLAlchemy 0.1 threadlocal-based usage pattern that is now deprecated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nengine.begin()\n\ntable.insert().execute(parameters)\nresult = table.select().execute()\n\ntable.update().execute(parameters)\n\nengine.commit()\n```\n\n----------------------------------------\n\nTITLE: SQL Table Definition with Primary Key\nDESCRIPTION: SQL definition for a table with an integer primary key and several integer columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nid INTEGER NOT NULL,\n      col1 INTEGER,\n      col2 INTEGER,\n      col4 INTEGER,\n      col3 INTEGER,\n      PRIMARY KEY (id)\n```\n\n----------------------------------------\n\nTITLE: Accepting TRUNCATE as Autocommit Keyword in PostgreSQL Dialect\nDESCRIPTION: Added 'TRUNCATE' to the list of keywords accepted by the PostgreSQL dialect as an 'autocommit'-triggering keyword, allowing automatic commits for TRUNCATE operations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE\n```\n\n----------------------------------------\n\nTITLE: Scoped Sessions and Thread-Local Configuration\nDESCRIPTION: Shows how to use scoped_session for thread-local session management and mapper configuration.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nSession = scoped_session(sessionmaker(autoflush=True, transactional=True))\nSession.configure(bind=engine)\n\nu = User(name=\"wendy\")\n\nsess = Session()\nsess.save(u)\nsess.commit()\n\n# Session constructor is thread-locally scoped.\nsess2 = Session()\nassert sess is sess2\n\n# \"assignmapper\"-like functionality\nSession.mapper(User, users_table)\n\nu = User(name=\"wendy\")\n\nSession.commit()\n```\n\n----------------------------------------\n\nTITLE: SQLite Compatible Parent-Subclass Join\nDESCRIPTION: SQLite-specific rewrite of parent-subclass join using nested SELECT statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parent.id AS parent_id\n    FROM parent JOIN (\n        SELECT base_table.id AS base_table_id,\n                base_table.parent_id AS base_table_parent_id,\n                subclass_table.id AS subclass_table_id\n        FROM base_table JOIN subclass_table ON base_table.id = subclass_table.id\n    ) AS anon_1 ON parent.id = anon_1.base_table_parent_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Delete-Orphan in SQLAlchemy Automap Extension\nDESCRIPTION: The automap extension now automatically sets cascade=\"all, delete-orphan\" on one-to-many relationships where the foreign key is non-nullable. It also sets passive_deletes=True if ondelete=\"CASCADE\" or \"SET NULL\" is specified in the ForeignKeyConstraint.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nautomap.generate_relationship()\n```\n\n----------------------------------------\n\nTITLE: Updating ORM Entities with SQL Expression Update Construct\nDESCRIPTION: Examples of using SQL expression update, insert, and delete constructs with ORM entities as target tables. This allows direct operations on mapped classes using SQLAlchemy's expression language.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import insert, update, delete\n\nins = insert(SomeMappedClass).values(x=5)\n\ndel_ = delete(SomeMappedClass).where(SomeMappedClass.id == 5)\n\nupd = update(SomeMappedClass).where(SomeMappedClass.id == 5).values(name=\"ed\")\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Tests with Pytest and Multiprocessing\nDESCRIPTION: Command to run the full test suite against SQLite using pytest directly with 4 parallel processes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest -n4\n```\n\n----------------------------------------\n\nTITLE: SQL Count Function Usage\nDESCRIPTION: Shows the syntax for using func.count() without arguments to generate COUNT(*) in SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nfunc.count()\n```\n\n----------------------------------------\n\nTITLE: Adding New MySQL 8 Reserved Words in SQLAlchemy\nDESCRIPTION: Added new MySQL reserved words 'cube' and 'lateral' introduced in MySQL 8.0.1 and 8.0.14 respectively. These terms will now be quoted if used as table or column identifier names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: SQL Generated for Association Proxy in SQLAlchemy 0.8\nDESCRIPTION: SQL generated in SQLAlchemy 0.8 for a query using an association proxy compared to None.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.b_id AS a_b_id\nFROM a\nWHERE EXISTS (SELECT 1\nFROM b\nWHERE b.id = a.b_id AND b.value IS NULL)\n```\n\n----------------------------------------\n\nTITLE: Importing Types Module in SQLAlchemy 0.4 Python\nDESCRIPTION: Shows how to correctly import the types module in SQLAlchemy 0.4, which is necessary for defining custom types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import *\nfrom sqlalchemy import types\n\n\nclass UTCDateTime(types.TypeDecorator):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Query Join Example - Python SQLAlchemy\nDESCRIPTION: Example of query filtering syntax showing comparison between negated and non-negated cases. The non-negated case query(B).filter(B.a == A(id=7)) uses current value and allows transient object comparisons.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery(B).filter(B.a == A(id=7))\n```\n\n----------------------------------------\n\nTITLE: Adding write_timeout support for MySQL in Python\nDESCRIPTION: Added support for the write_timeout flag accepted by mysqlclient and pymysql to be passed in the URL string for MySQL connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Example usage:\nengine = create_engine(\"mysql://user:pass@host/db?write_timeout=30\")\n```\n\n----------------------------------------\n\nTITLE: Oracle Out Parameters in SQLAlchemy\nDESCRIPTION: Example of using output parameters with Oracle stored procedures, demonstrating parameter binding and result handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresult = engine.execute(\n    text(\n        \"begin foo(:x, :y, :z); end;\",\n        bindparams=[\n            bindparam(\"x\", Numeric),\n            outparam(\"y\", Numeric),\n            outparam(\"z\", Numeric),\n        ],\n    ),\n    x=5,\n)\nassert result.out_parameters == {\"y\": 10, \"z\": 75}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Types in SQLAlchemy 0.4 ORM\nDESCRIPTION: Shows how to define a composite type in SQLAlchemy 0.4, which allows for custom datatypes composed of multiple columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __composite_values__(self):\n        return self.x, self.y\n\n    def __eq__(self, other):\n        return other.x == self.x and other.y == self.y\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy Exceptions Module\nDESCRIPTION: Demonstrates the recommended way to import SQLAlchemy's exceptions module using 'exc' instead of the deprecated 'exceptions' name.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import exc\n```\n\n----------------------------------------\n\nTITLE: String Expression with Deprecated Ordering Syntax\nDESCRIPTION: Example showing deprecated syntax for ordering that was affected by the joined eager loading regression.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\norder_by(\"name desc\")\n```\n\n----------------------------------------\n\nTITLE: Deprecating noload and lazy='noload' in SQLAlchemy ORM\nDESCRIPTION: The noload relationship loader option and lazy='noload' setting are being deprecated in SQLAlchemy ORM. These options were originally intended for custom loader patterns that are no longer applicable in modern SQLAlchemy. They will be removed in a future release.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_21/11045.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_orm.noload\n```\n\nLANGUAGE: python\nCODE:\n```\nlazy='noload'\n```\n\n----------------------------------------\n\nTITLE: StatementError formatting old (text)\nDESCRIPTION: This shows how StatementError formatting used to be before it was improved to enhance readability.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n\"sqlalchemy.exc.StatementError: (sqlalchemy.exc.InvalidRequestError) A value is\\n    required for bind parameter 'id' [SQL: 'select * from reviews\\nwhere id = ?']\\n    (Background on this error at: https://sqlalche.me/e/cd3x)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Installed SQLAlchemy Version in Python\nDESCRIPTION: This code snippet demonstrates how to check the installed version of SQLAlchemy using Python's interactive prompt. It imports the sqlalchemy module and prints the version number.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import sqlalchemy\n>>> sqlalchemy.__version__  # doctest: +SKIP\n2.1.0\n```\n\n----------------------------------------\n\nTITLE: Selecting with Join in SQLAlchemy 1.4/2.0\nDESCRIPTION: This snippet demonstrates how to perform a join operation using SQLAlchemy 1.4/2.0 compatible syntax using the select statement. It selects User entities and joins them with their addresses relationship, executing the query within a session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n\"stmt = select(User).join(User.addresses)\nresult = session.execute(stmt)\"\n```\n\n----------------------------------------\n\nTITLE: Check Constraint Example in SQL\nDESCRIPTION: SQL DDL example showing how to add a check constraint to validate zipcode length.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5)\n```\n\n----------------------------------------\n\nTITLE: Generating an Empty INSERT Statement\nDESCRIPTION: This snippet illustrates how to generate an \"empty\" INSERT statement that inserts only the default values for a table. This is achieved by calling :meth:`_sql.Insert.values` with no arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/data_insert.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    >>> print(insert(user_table).values().compile(engine))\n    {printsql}INSERT INTO user_account DEFAULT VALUES\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Item from Instrumented Dictionary\nDESCRIPTION: Example of deleting an item from a custom dictionary with SQLAlchemy ORM instrumentation, using the super() method with an optional initiator parameter\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsuper(MyKeyFuncDict, self).__delitem__(key, _sa_initiator)\n```\n\n----------------------------------------\n\nTITLE: Empty IN Expressions in SQLAlchemy\nDESCRIPTION: Shows how SQLAlchemy handles empty IN expressions by generating a subquery that returns no rows, allowing for mathematically valid results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/operators.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User.id).where(User.id.in_([]))\n>>> result = conn.execute(stmt)\n{execsql}SELECT user_account.id\nFROM user_account\nWHERE user_account.id IN (SELECT 1 FROM (SELECT 1) WHERE 1!=1)\n[...] ()\n```\n\n----------------------------------------\n\nTITLE: Database Engine Configuration Updates\nDESCRIPTION: Enhancements to engine configuration including improved logging, view reflection support, and expanded configuration options through engine_from_config().\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Documenting MutableList Class in reStructuredText\nDESCRIPTION: This snippet documents the MutableList class, including its members and undocumented members, using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: MutableList\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Rendering with Correlated Subqueries in SQLAlchemy\nDESCRIPTION: Shows how SQLAlchemy handles correlated subqueries in SELECT statements and the improved SQL rendering behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import table, column, select\n\nt1 = table(\"t1\", column(\"x\"))\nt2 = table(\"t2\", column(\"y\"))\ns = select([t1, t2]).correlate(t1)\n\nprint(s)\n```\n\nLANGUAGE: python\nCODE:\n```\ns2 = select([t1, t2]).where(t1.c.x == t2.c.y).where(t1.c.x == s)\nprint(s2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutable PickleType in SQLAlchemy\nDESCRIPTION: Example showing how to configure a PickleType column with mutability enabled. Demonstrates setting mutable=True flag when defining the column to restore pre-0.7 behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTable('mytable', metadata,\n    # ....\n    Column('pickled_data', PickleType(mutable=True))\n)\n```\n\n----------------------------------------\n\nTITLE: UNION Query Generated by Polymorphic Concrete Inheritance\nDESCRIPTION: Shows the SQL UNION query that is generated when querying the Employee base class with polymorphic loading. The query combines data from all concrete subclass tables with NULL placeholders for columns not present in each table.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance.rst#2025-04-21_snippet_14\n\nLANGUAGE: python+sql\nCODE:\n```\nsession.scalars(select(Employee)).all()\n{execsql}\nSELECT\n    pjoin.id,\n    pjoin.name,\n    pjoin.type,\n    pjoin.manager_data,\n    pjoin.engineer_info\nFROM (\n    SELECT\n        employee.id AS id,\n        employee.name AS name,\n        CAST(NULL AS VARCHAR(40)) AS manager_data,\n        CAST(NULL AS VARCHAR(40)) AS engineer_info,\n        'employee' AS type\n    FROM employee\n    UNION ALL\n    SELECT\n        manager.id AS id,\n        manager.name AS name,\n        manager.manager_data AS manager_data,\n        CAST(NULL AS VARCHAR(40)) AS engineer_info,\n        'manager' AS type\n    FROM manager\n    UNION ALL\n    SELECT\n        engineer.id AS id,\n        engineer.name AS name,\n        CAST(NULL AS VARCHAR(40)) AS manager_data,\n        engineer.engineer_info AS engineer_info,\n        'engineer' AS type\n    FROM engineer\n) AS pjoin\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL USING Clause in Index Creation\nDESCRIPTION: Added 'postgresql_using' argument to Index() constructor in SQLAlchemy, allowing specification of the USING clause for PostgreSQL index implementation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_07.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nIndex('index_name', 'column_name', postgresql_using='btree')\n```\n\n----------------------------------------\n\nTITLE: Using REGCLASS Type in PostgreSQL\nDESCRIPTION: Example of the new PostgreSQL REGCLASS type added in version 1.2.7 to assist in casting table names to OID values. This type helps in working with PostgreSQL object identifiers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n_postgresql.REGCLASS\n```\n\n----------------------------------------\n\nTITLE: Defining External Dialect Table in reStructuredText\nDESCRIPTION: This code snippet creates a table in reStructuredText format to list external dialect projects for SQLAlchemy. It includes columns for the database name and the corresponding dialect project.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+------------------------------------------------+---------------------------------------+\n| Database                                       | Dialect                               |\n+================================================+=======================================+\n| Actian Data Platform, Vector, Actian X, Ingres | sqlalchemy-ingres_                    |\n+------------------------------------------------+---------------------------------------+\n| Amazon Athena                                  | pyathena_                             |\n+------------------------------------------------+---------------------------------------+\n| Amazon Redshift (via psycopg2)                 | sqlalchemy-redshift_                  |\n+------------------------------------------------+---------------------------------------+\n| Apache Drill                                   | sqlalchemy-drill_                     |\n+------------------------------------------------+---------------------------------------+\n| Apache Druid                                   | pydruid_                              |\n+------------------------------------------------+---------------------------------------+\n| Apache Hive and Presto                         | PyHive_                               |\n+------------------------------------------------+---------------------------------------+\n| Apache Solr                                    | sqlalchemy-solr_                      |\n+------------------------------------------------+---------------------------------------+\n| Clickhouse                                     | clickhouse-sqlalchemy_                |\n+------------------------------------------------+---------------------------------------+\n| CockroachDB                                    | sqlalchemy-cockroachdb_               |\n+------------------------------------------------+---------------------------------------+\n| CrateDB                                        | sqlalchemy-cratedb_                   |\n+------------------------------------------------+---------------------------------------+\n| Databend                                       | databend-sqlalchemy_                  |\n+------------------------------------------------+---------------------------------------+\n| Databricks                                     | databricks_                           |\n+------------------------------------------------+---------------------------------------+\n| EXASolution                                    | sqlalchemy_exasol_                    |\n+------------------------------------------------+---------------------------------------+\n| Elasticsearch (readonly)                       | elasticsearch-dbapi_                  |\n+------------------------------------------------+---------------------------------------+\n| Firebird                                       | sqlalchemy-firebird_                  |\n+------------------------------------------------+---------------------------------------+\n| Firebolt                                       | firebolt-sqlalchemy_                  |\n+------------------------------------------------+---------------------------------------+\n| Google BigQuery                                | sqlalchemy-bigquery_                  |\n+------------------------------------------------+---------------------------------------+\n| Google Sheets                                  | gsheets_                              |\n+------------------------------------------------+---------------------------------------+\n| Greenplum                                      | sqlalchemy-greenplum_                 |\n+------------------------------------------------+---------------------------------------+\n| HyperSQL (hsqldb)                              | sqlalchemy-hsqldb_                    |\n+------------------------------------------------+---------------------------------------+\n| IBM DB2 and Informix                           | ibm-db-sa_                            |\n+------------------------------------------------+---------------------------------------+\n| IBM Netezza Performance Server [1]_            | nzalchemy_                            |\n+------------------------------------------------+---------------------------------------+\n| Impala                                         | impyla_                               |\n+------------------------------------------------+---------------------------------------+\n| Kinetica                                       | sqlalchemy-kinetica_                  |\n+------------------------------------------------+---------------------------------------+\n| Microsoft Access (via pyodbc)                  | sqlalchemy-access_                    |\n+------------------------------------------------+---------------------------------------+\n| Microsoft SQL Server (via python-tds)          | sqlalchemy-pytds_                     |\n+------------------------------------------------+---------------------------------------+\n| Microsoft SQL Server (via turbodbc)            | sqlalchemy-turbodbc_                  |\n+------------------------------------------------+---------------------------------------+\n| MonetDB                                        | sqlalchemy-monetdb_                   |\n+------------------------------------------------+---------------------------------------+\n| OpenGauss                                      | openGauss-sqlalchemy_                 |\n+------------------------------------------------+---------------------------------------+\n| Rockset                                        | rockset-sqlalchemy_                   |\n+------------------------------------------------+---------------------------------------+\n| SAP ASE (fork of former Sybase dialect)        | sqlalchemy-sybase_                    |\n+------------------------------------------------+---------------------------------------+\n| SAP Hana [1]_                                  | sqlalchemy-hana_                      |\n+------------------------------------------------+---------------------------------------+\n| SAP Sybase SQL Anywhere                        | sqlalchemy-sqlany_                    |\n+------------------------------------------------+---------------------------------------+\n| Snowflake                                      | snowflake-sqlalchemy_                 |\n+------------------------------------------------+---------------------------------------+\n| Teradata Vantage                               | teradatasqlalchemy_                   |\n+------------------------------------------------+---------------------------------------+\n| TiDB                                           | sqlalchemy-tidb_                      |\n+------------------------------------------------+---------------------------------------+\n| YDB                                            | ydb-sqlalchemy_                       |\n+------------------------------------------------+---------------------------------------+\n| YugabyteDB                                     | sqlalchemy-yugabytedb_                |\n+------------------------------------------------+---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Python Length Iterator Example\nDESCRIPTION: Demonstrates why Query doesn't implement __len__() by showing how list() would trigger multiple SQL calls.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Iterates:\n    def __len__(self):\n        print(\"LEN!\")\n        return 5\n\n    def __iter__(self):\n        print(\"ITER!\")\n        return iter([1, 2, 3, 4, 5])\n\n\nlist(Iterates())\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Reference Links for SQLAlchemy Database Dialects\nDESCRIPTION: A collection of RestructuredText reference link definitions that map shortened reference names to their corresponding SQLAlchemy database dialect/driver repositories and documentation URLs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _sqlalchemy-monetdb: https://github.com/MonetDB/sqlalchemy-monetdb\n.. _snowflake-sqlalchemy: https://github.com/snowflakedb/snowflake-sqlalchemy\n.. _sqlalchemy-pytds: https://pypi.org/project/sqlalchemy-pytds/\n.. _sqlalchemy-cratedb: https://github.com/crate/sqlalchemy-cratedb\n.. _sqlalchemy-access: https://pypi.org/project/sqlalchemy-access/\n.. _elasticsearch-dbapi: https://github.com/preset-io/elasticsearch-dbapi/\n.. _pydruid: https://github.com/druid-io/pydruid\n.. _gsheets: https://github.com/betodealmeida/gsheets-db-api\n.. _sqlalchemy-firebird: https://github.com/pauldex/sqlalchemy-firebird\n.. _sqlalchemy-cockroachdb: https://github.com/cockroachdb/sqlalchemy-cockroachdb\n.. _sqlalchemy-turbodbc: https://pypi.org/project/sqlalchemy-turbodbc/\n.. _sqlalchemy-sybase: https://pypi.org/project/sqlalchemy-sybase/\n.. _firebolt-sqlalchemy: https://pypi.org/project/firebolt-sqlalchemy/\n.. _pyathena: https://github.com/laughingman7743/PyAthena/\n.. _sqlalchemy-yugabytedb: https://pypi.org/project/sqlalchemy-yugabytedb/\n.. _impyla: https://pypi.org/project/impyla/\n.. _databend-sqlalchemy: https://github.com/datafuselabs/databend-sqlalchemy\n.. _sqlalchemy-greenplum: https://github.com/PlaidCloud/sqlalchemy-greenplum\n.. _sqlalchemy-hsqldb: https://pypi.org/project/sqlalchemy-hsqldb/\n.. _databricks: https://docs.databricks.com/en/dev-tools/sqlalchemy.html\n.. _clickhouse-sqlalchemy: https://pypi.org/project/clickhouse-sqlalchemy/\n.. _sqlalchemy-kinetica: https://github.com/kineticadb/sqlalchemy-kinetica/\n.. _sqlalchemy-tidb: https://github.com/pingcap/sqlalchemy-tidb\n.. _ydb-sqlalchemy: https://github.com/ydb-platform/ydb-sqlalchemy/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating INSERT from SELECT in SQLAlchemy\nDESCRIPTION: Shows how to use the new from_select method to perform an INSERT from SELECT operation in SQLAlchemy. This feature allows for inserting data from one table into another based on a SELECT statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.sql import table, column\n>>> t1 = table(\"t1\", column(\"a\"), column(\"b\"))\n>>> t2 = table(\"t2\", column(\"x\"), column(\"y\"))\n>>> print(t1.insert().from_select([\"a\", \"b\"], t2.select().where(t2.c.y == 5)))\n{printsql}INSERT INTO t1 (a, b) SELECT t2.x, t2.y\nFROM t2\nWHERE t2.y = :y_1\n\ns = Session()\nq = s.query(User.id, User.name).filter_by(name=\"ed\")\nins = insert(Address).from_select((Address.id, Address.email_address), q)\n```\n\n----------------------------------------\n\nTITLE: MySQL CAST Expression with Character Set\nDESCRIPTION: Example showing MySQL CAST syntax with character set specification for string type conversion.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCAST(t.col AS CHAR CHARACTER SET utf8)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String Examples\nDESCRIPTION: Examples showing the new PostgreSQL connection string format after renaming 'postgres' dialect to 'postgresql', including support for different drivers like pg8000.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npostgresql://scott:tiger@localhost/test\npostgresql+pg8000://scott:tiger@localhost/test\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL ON CONFLICT WHERE Clause Fix\nDESCRIPTION: Code fix to remove table name qualification from ON CONFLICT WHERE clause while maintaining it in DO UPDATE WHERE clause for PostgreSQL's upsert functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT ... ON CONFLICT ... DO UPDATE WHERE table_name.column = value\n```\n\n----------------------------------------\n\nTITLE: Disabling Baked Queries Session-wide in Python\nDESCRIPTION: Shows how to disable baked queries for an entire session by setting the enable_baked_queries flag to False, which can be useful for debugging cache key conflicts or other baked query issues.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsession = Session(engine, enable_baked_queries=False)\n```\n\n----------------------------------------\n\nTITLE: Using identity_key() Method in Session\nDESCRIPTION: Added a multi-use 'identity_key()' method to Session, allowing the generation of identity keys for primary key values, instances, and rows.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsession.identity_key(class_, primary_key_value)\n```\n\n----------------------------------------\n\nTITLE: Strong Reference Session Implementation\nDESCRIPTION: Event-based implementation for maintaining strong references to persistent objects in a SQLAlchemy session. Uses event listeners to track objects entering and leaving the persistent state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_state_management.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import event\n\ndef strong_reference_session(session):\n    @event.listens_for(session, \"pending_to_persistent\")\n    @event.listens_for(session, \"deleted_to_persistent\")\n    @event.listens_for(session, \"detached_to_persistent\")\n    @event.listens_for(session, \"loaded_as_persistent\")\n    def strong_ref_object(sess, instance):\n        if \"refs\" not in sess.info:\n            sess.info[\"refs\"] = refs = set()\n        else:\n            refs = sess.info[\"refs\"]\n\n        refs.add(instance)\n\n    @event.listens_for(session, \"persistent_to_detached\")\n    @event.listens_for(session, \"persistent_to_deleted\")\n    @event.listens_for(session, \"persistent_to_transient\")\n    def deref_object(sess, instance):\n        sess.info[\"refs\"].discard(instance)\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Tests Against Multiple Databases\nDESCRIPTION: Command to run the test suite against both PostgreSQL and MySQL simultaneously using 4 processes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest -n4 --db postgresql --db mysql\n```\n\n----------------------------------------\n\nTITLE: Removed 'scope' Keyword from scoped_session in SQLAlchemy ORM\nDESCRIPTION: Shows the removed and previously undocumented 'scope' keyword from scoped_session, which will now raise TypeError if encountered.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import scoped_session\n\nSession = scoped_session(sessionmaker())\n\nsession = Session(scope=None)\n```\n\n----------------------------------------\n\nTITLE: Single Parent Relationship Configuration Example in SQLAlchemy\nDESCRIPTION: Example of a SQLAlchemy mapping that uses the single_parent flag on a relationship. This configuration enforces that a child object can only be associated with one parent at a time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n\n    a = relationship(\n        \"A\",\n        single_parent=True,\n        cascade=\"all, delete-orphan\",\n    )\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Query.count() in SQLAlchemy 0.7\nDESCRIPTION: Shows the SQL generated by Query.count() in SQLAlchemy 0.7, which now uses a subquery approach.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(1) AS count_1 FROM (\n    SELECT user.id AS user_id, user.name AS user_name from user\n) AS anon_1\n```\n\n----------------------------------------\n\nTITLE: Joined Inheritance Mapping Example\nDESCRIPTION: Shows how to set up joined table inheritance mapping between Employee and Manager classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Employee(Base):\n    __tablename__ = \"employee\"\n    id = Column(Integer, primary_key=True)\n    manager_id = Column(ForeignKey(\"manager.id\"))\n    name = Column(String(50))\n    type = Column(String(50))\n\n    reports_to = relationship(\"Manager\", foreign_keys=manager_id)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"employee\",\n        \"polymorphic_on\": type,\n    }\n\n\nclass Manager(Employee):\n    __tablename__ = \"manager\"\n    id = Column(Integer, ForeignKey(\"employee.id\"), primary_key=True)\n\n    __mapper_args__ = {\n        \"polymorphic_identity\": \"manager\",\n        \"inherit_condition\": id == Employee.id,\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for SQLAlchemy Exceptions Module in RST\nDESCRIPTION: reStructuredText directive to automatically generate documentation for all members of the sqlalchemy.exc module that contains core exception classes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: sqlalchemy.exc\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Type Reflection Example with PickleType\nDESCRIPTION: Demonstrates table creation and reflection with custom types\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/custom_types.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import (\n...     Table,\n...     Column,\n...     MetaData,\n...     create_engine,\n...     PickleType,\n...     Integer,\n... )\n>>> metadata = MetaData()\n>>> my_table = Table(\n...     \"my_table\", metadata, Column(\"id\", Integer), Column(\"data\", PickleType)\n... )\n>>> engine = create_engine(\"sqlite://\", echo=\"debug\")\n>>> my_table.create(engine)\n```\n\n----------------------------------------\n\nTITLE: Handling Bulk Replace Events in SQLAlchemy ORM\nDESCRIPTION: Example of using the bulk_replace and append events to handle collection modifications, showing how to process values during both bulk replacement and individual appends.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm.attributes import OP_BULK_REPLACE\n\n\n@event.listens_for(SomeObject.collection, \"bulk_replace\")\ndef process_collection(target, values, initiator):\n    values[:] = [_make_value(value) for value in values]\n\n\n@event.listens_for(SomeObject.collection, \"append\", retval=True)\ndef process_collection(target, value, initiator):\n    # make sure bulk_replace didn't already do it\n    if initiator is None or initiator.op is not OP_BULK_REPLACE:\n        return _make_value(value)\n    else:\n        return value\n```\n\n----------------------------------------\n\nTITLE: Declarative Order By Configuration in SQLAlchemy\nDESCRIPTION: Shows how to configure ordering using string expressions in declarative mappings.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(MyDeclarativeBase):\n    ...\n    \"addresses\": relation(\"Address\", order_by=\"Address.id\")\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Type Cast Expression\nDESCRIPTION: Example showing SQLAlchemy's casting syntax for MySQL TEXT type with UTF-8 charset specification.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncast(x, mysql.TEXT(charset='utf8'))\n```\n\n----------------------------------------\n\nTITLE: MySQL Autocommit Support\nDESCRIPTION: Addition of autocommit support for MySQL drivers via AUTOCOMMIT isolation level setting.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nAUTOCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Adding table dependency with add_is_dependent_on()\nDESCRIPTION: Shows how to manually place dependency rules between two Table objects for use within create_all(), drop_all(), and sorted_tables.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable.add_is_dependent_on(othertable)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for SQLAlchemy Compiler Extension and SyntaxExtension\nDESCRIPTION: A reStructuredText documentation file that uses Sphinx directives to generate documentation for SQLAlchemy's compiler extension module and SyntaxExtension class. The file establishes a reference anchor and creates documentation sections that will be populated by the autodoc system.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/compiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _sqlalchemy.ext.compiler_toplevel:\n\nCustom SQL Constructs and Compilation Extension\n===============================================\n\n.. automodule:: sqlalchemy.ext.compiler\n    :members:\n\n\n.. autoclass:: sqlalchemy.sql.SyntaxExtension\n    :members:\n\n```\n\n----------------------------------------\n\nTITLE: Handling Long Identifier Names in Python\nDESCRIPTION: Example showing how SQLAlchemy handles identifier names that exceed database length limits, including error handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import Table\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.dialects import postgresql\nfrom sqlalchemy.schema import AddConstraint\n\nm = MetaData()\nt = Table(\"t\", m, Column(\"x\", Integer))\nuq = UniqueConstraint(\n    t.c.x,\n    name=\"this_is_too_long_of_a_name_for_any_database_backend_even_postgresql\",\n)\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Queries in SQLAlchemy 0.4 ORM\nDESCRIPTION: Demonstrates how to perform self-referential queries in SQLAlchemy 0.4 using aliased joins, without the need for explicit Alias objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# standard self-referential TreeNode mapper with backref\nmapper(\n    TreeNode,\n    tree_nodes,\n    properties={\n        \"children\": relation(\n            TreeNode, backref=backref(\"parent\", remote_side=tree_nodes.id)\n        )\n    },\n)\n\n# query for node with child containing \"bar\" two levels deep\nsession.query(TreeNode).join([\"children\", \"children\"], aliased=True).filter_by(\n    name=\"bar\"\n)\n\n# search for the treenode along the path \"n1/n12/n122\"\n\n# first find a Node with name=\"n122\"\nq = sess.query(Node).filter_by(name=\"n122\")\n\n# then join to parent with \"n12\"\nq = q.join(\"parent\", aliased=True).filter_by(name=\"n12\")\n\n# join again to the next parent with 'n1'.  use 'from_joinpoint'\n# so we join from the previous point, instead of joining off the\n# root table\nq = q.join(\"parent\", aliased=True, from_joinpoint=True).filter_by(name=\"n1\")\n\nnode = q.first()\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relationship Join\nDESCRIPTION: Example showing a traditional many-to-many relationship join with special criteria in the ON clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT order.id, order.name\nFROM order LEFT OUTER JOIN order_item ON order.id = order_item.order_id\nLEFT OUTER JOIN item ON order_item.item_id = item.id AND item.type = 'subitem'\n```\n\n----------------------------------------\n\nTITLE: Using Callable for BindParameter Value in SQLAlchemy\nDESCRIPTION: Shows how to use a callable as the value for a bindparam() in SQLAlchemy SQL expressions. The callable is evaluated at statement execution time.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbindparam('param', callable_function)\n```\n\n----------------------------------------\n\nTITLE: Using Bracketed Schema Names in SQL Server\nDESCRIPTION: Examples of defining tables with schema names containing dots in SQL Server. The first example shows how to handle a single schema name with dots, while the second demonstrates referring to both database and owner names with dots.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nTable(\"some_table\", metadata, Column(\"q\", String(50)), schema=\"[MyDataBase.dbo]\")\n```\n\nLANGUAGE: python\nCODE:\n```\nTable(\n    \"some_table\",\n    metadata,\n    Column(\"q\", String(50)),\n    schema=\"[MyDataBase.SomeDB].[MyDB.owner]\",\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Creation Example\nDESCRIPTION: SQL example showing creation of a MySQL table with vendor-specific data types and options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/reflection.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS my_table (\n    id INTEGER PRIMARY KEY AUTO_INCREMENT,\n    data1 VARCHAR(50) CHARACTER SET latin1,\n    data2 MEDIUMINT(4),\n    data3 TINYINT(2)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialect Requirements Class\nDESCRIPTION: Requirements class that specifies dialect capabilities for test suite configuration\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.testing.requirements import SuiteRequirements\nfrom sqlalchemy.testing import exclusions\n\nclass Requirements(SuiteRequirements):\n    @property\n    def nullable_booleans(self):\n        \"\"\"Target database allows boolean columns to store NULL.\"\"\"\n        # Access Yes/No doesn't allow null\n        return exclusions.closed()\n\n    @property\n    def returning(self):\n        return exclusions.open()\n```\n\n----------------------------------------\n\nTITLE: Legacy Query Tuple Typing\nDESCRIPTION: Demonstrates type hints for tuple results using the legacy Query API.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# (variable) q1: RowReturningQuery[Tuple[int, str]]\nq1 = session.query(User.id, User.name)\n\n# (variable) rows: List[Row[Tuple[int, str]]]\nrows = q1.all()\n\n# (variable) q2: Query[User]\nq2 = session.query(User)\n\n# (variable) users: List[User]\nusers = q2.all()\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy SQL Visitors Module\nDESCRIPTION: This code snippet demonstrates how to import the sqlalchemy.sql.visitors module in Python. It's typically used internally by SQLAlchemy for traversing and manipulating SQL expression structures.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/visitors.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy.sql import visitors\n```\n\n----------------------------------------\n\nTITLE: Python Standard Dataclass Inheritance Example\nDESCRIPTION: Example demonstrating how Python's standard dataclass behavior handles inheritance from non-dataclass mixins, where attributes from non-dataclass parents are ignored.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom dataclasses import field\nimport inspect\nfrom typing import Optional\nfrom uuid import uuid4\n\n\nclass Mixin:\n    create_user: int\n    update_user: Optional[int] = field(default=None)\n\n\n@dataclass\nclass User(Mixin):\n    uid: str = field(init=False, default_factory=lambda: str(uuid4()))\n    username: str\n    password: str \n    email: str\n```\n\n----------------------------------------\n\nTITLE: Liberal Boolean Type Implementation in SQLAlchemy\nDESCRIPTION: Custom TypeDecorator implementation that provides more flexible boolean value interpretation compared to the strict Boolean type\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Boolean\nfrom sqlalchemy import TypeDecorator\n\n\nclass LiberalBoolean(TypeDecorator):\n    impl = Boolean\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            value = bool(int(value))\n        return value\n```\n\n----------------------------------------\n\nTITLE: Column-Level Query without Deduplication in SQLAlchemy\nDESCRIPTION: Shows how querying individual columns does not trigger ORM deduplication behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> session.query(User.id, User.name).outerjoin(User.addresses).filter(\n...     User.name == \"jack\"\n... ).all()\n[(5, 'jack'), (5, 'jack')]\n```\n\n----------------------------------------\n\nTITLE: Documenting Mutable Class in reStructuredText\nDESCRIPTION: This snippet documents the Mutable class, including all its members, inherited members, and private members, using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: Mutable\n    :members:\n    :inherited-members:\n    :private-members:\n```\n\n----------------------------------------\n\nTITLE: Creating a Trivial Subclass for Collection Instrumentation\nDESCRIPTION: Demonstrates how to create a trivial subclass of a library collection class to restrict SQLAlchemy ORM decorations to specific relationship usage\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/collection_api.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeList(some.great.library.AwesomeList):\n    pass\n\n# ... relationship(..., collection_class=MyAwesomeList)\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy DateTime Mode in Python\nDESCRIPTION: Code to enable legacy microseconds handling for backward compatibility with SQLAlchemy 0.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.databases.sqlite import DateTimeMixin\n\nDateTimeMixin.__legacy_microseconds__ = True\n```\n\n----------------------------------------\n\nTITLE: Fixing Azure DW Connection String for ActiveDirectoryIntegrated Authentication\nDESCRIPTION: Fixed an issue where a SQLAlchemy connection URI for Azure DW with ActiveDirectoryIntegrated authentication was not constructing the ODBC connection string correctly. This ensures proper connection to Azure DW instances using this authentication method.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Type Affinity Comparison Example\nDESCRIPTION: Demonstrates how to compare SQLAlchemy type affinities across different database-specific type implementations.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_06.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> String(50)._compare_type_affinity(postgresql.VARCHAR(50))\nTrue\n>>> Integer()._compare_type_affinity(mysql.REAL)\nFalse\n```\n\n----------------------------------------\n\nTITLE: Using autoload_with Flag for Table Autoloading in Python\nDESCRIPTION: This change makes the 'autoload_with' flag imply that 'autoload' should be True when creating a Table object. It simplifies the syntax for autoloading table metadata from a database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nTable(..., autoload_with=engine)\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Tuple Results in SQLAlchemy Query\nDESCRIPTION: Shows how to iterate through named tuple results from a multi-column query with aggregates.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor row in (\n    session.query(User.name, func.count(Address.id).label(\"numaddresses\"))\n    .join(Address)\n    .group_by(User.name)\n):\n    print(\"name\", row.name, \"number\", row.numaddresses)\n```\n\n----------------------------------------\n\nTITLE: Session State Access Function\nDESCRIPTION: Function that returns the InstanceState for a mapped object. This is an internal version of object_state(), where object_state() or inspect() are preferred as they provide better error messages for unmapped objects.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef instance_state():\n    \"\"\"Return the :class:`.InstanceState` for a given\n    mapped object.\n\n    This function is the internal version\n    of :func:`.object_state`.   The\n    :func:`.object_state` and/or the\n    :func:`_sa.inspect` function is preferred here\n    as they each emit an informative exception\n    if the given object is not mapped.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Schema in MetaData\nDESCRIPTION: Demonstrates how to set a default schema name at the MetaData level which will apply to all tables that don't specify their own schema.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmetadata_obj = MetaData(schema=\"remote_banks\")\n\nfinancial_info = Table(\n    \"financial_info\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"value\", String(100), nullable=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Sub-Options with Defaultload\nDESCRIPTION: Example showing how to use defaultload to preserve existing loader styles while specifying additional options\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/relationships.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\n\nstmt = select(A).options(defaultload(A.atob).joinedload(B.btoc))\n```\n\n----------------------------------------\n\nTITLE: Association Proxy Handling of Missing Scalar Values in SQLAlchemy\nDESCRIPTION: Illustrates how association proxies from scalar attributes to scalars now return None if the proxied object isn't present, consistent with SQLAlchemy's behavior for missing many-to-ones.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.associationproxy import association_proxy\n\nBase = declarative_base()\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    b = relationship(\"B\", uselist=False)\n\n    bname = association_proxy(\"b\", \"name\")\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(Integer, ForeignKey(\"a.id\"))\n    name = Column(String)\n\n\na1 = A()\n\n# this is how m2o's always have worked\nassert a1.b is None\n\n# but prior to 0.9, this would raise AttributeError,\n# now returns None just like the proxied value.\nassert a1.bname is None\n```\n\n----------------------------------------\n\nTITLE: Creating DSN-less SQL Server Connection with PyODBC\nDESCRIPTION: Example of creating a SQL Server connection using PyODBC with an explicit hostname. Now requires specifying a driver name parameter to avoid SQLAlchemy attempting to guess a default driver.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nengine = create_engine(\n    \"mssql+pyodbc://scott:tiger@myhost:port/databasename?driver=SQL+Server+Native+Client+10.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Loading with of_type() in SQLAlchemy ORM\nDESCRIPTION: Shows how to use the of_type() method to specify loading a particular subclass in a polymorphic query. This example demonstrates loading Company objects, their employees, and specifically accessing the 'machines' collection of employees who are Engineers.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCompany.employees.of_type(Engineer), 'machines'\n```\n\n----------------------------------------\n\nTITLE: Closing Session and Connection in SQLAlchemy - Python\nDESCRIPTION: This code snippet demonstrates closing a database session and connection in SQLAlchemy. The operations are critical for resource management in SQLAlchemy, ensuring that the database session and connection are properly closed. No explicit dependencies are specified beyond SQLAlchemy itself. There are no inputs or outputs for these operations, as they are commands to release resources.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_end_doctest.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> session.close()\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> conn.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key References with Schema Names\nDESCRIPTION: Shows how to create foreign key relationships between tables in the same schema using fully qualified schema names.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/metadata.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncustomer = Table(\n    \"customer\",\n    metadata_obj,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"financial_info_id\", ForeignKey(\"remote_banks.financial_info.id\")),\n    schema=\"remote_banks\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Subquery in WHERE Clause for Status Code Filtering in SQL\nDESCRIPTION: This SQL snippet demonstrates a subquery in the WHERE clause to filter records based on a status code. It compares a status column with a subquery that retrieves a status_id from the status_code table where the code is 'C'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWHERE status=(SELECT status_id FROM status_code WHERE code='C')\n```\n\n----------------------------------------\n\nTITLE: Simplified Parent-Subclass Join\nDESCRIPTION: Optimized join expression for parent-subclass relationships in SQLAlchemy 0.9+.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT parent.id AS parent_id\nFROM parent JOIN (\n        base_table JOIN subclass_table\n        ON base_table.id = subclass_table.id) ON parent.id = base_table.parent_id\n```\n\n----------------------------------------\n\nTITLE: Beaker Caching Query Patch\nDESCRIPTION: This diff illustrates a necessary change in the Beaker caching example within SQLAlchemy. It modifies how the key is extracted from the query's current path when using relationship options.  The original code extracts the mapper and the key, while the patched version correctly extracts the mapper and the property, and then derives the key from the property.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n\"--- examples/beaker_caching/caching_query.py\n+++\\texamples/beaker_caching/caching_query.py\n@@ -222,7 +222,8 @@\n\n\\t\\t\\t\\\"\"\"\n\\t\\t\\tif query._current_path:\n-\\t\\t\\t\\tmapper, key = query._current_path[-2:]\n+\\t\\t\\t\\tmapper, prop = query._current_path[-2:]\n+\\t\\t\\t\\tkey = prop.key\n\n\\t\\t\\t\\tfor cls in mapper.class_.__mro__:\n\\t\\t\\t\\t\\tif (cls, key) in self._relationship_options:\"\n```\n\n----------------------------------------\n\nTITLE: Using collate in SQLAlchemy Query Statements in Python\nDESCRIPTION: The 'collate' keyword in SQLAlchemy has been extended to support all String types and is included in any backend SQL as needed. Example provided shows casting a table column with a collation in a select statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST(sometable.somechar AS VARCHAR(20) COLLATE \"utf8\") AS anon_1\nFROM sometable\n```\n\n----------------------------------------\n\nTITLE: SQL for Association Proxy Not Equal to None in 0.8\nDESCRIPTION: SQL generated in SQLAlchemy 0.8 for a query using an association proxy compared with not equal to None, which has incorrect behavior.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.id AS a_id, a.b_id AS a_b_id\nFROM a\nWHERE NOT (EXISTS (SELECT 1\nFROM b\nWHERE b.id = a.b_id AND b.value IS NULL))\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Legacy Microseconds Behavior\nDESCRIPTION: Code snippet showing how to configure SQLite datetime microseconds handling globally or per instance. Allows compatibility with pre-0.5 SQLite datetime storage format.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_05.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.databases.sqlite import DateTimeMixin\nDateTimeMixin.__legacy_microseconds__ = True\n\n# Per instance configuration\nt = sqlite.SLDateTime()\nt.__legacy_microseconds__ = True\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for SQLAlchemy Core API\nDESCRIPTION: ReStructuredText directive that creates a table of contents tree with maximum depth of 2 levels, including links to documentation sections for events, inspection, exceptions, and internals.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/api_basics.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    event\n    inspection\n    exceptions\n    internals\n```\n\n----------------------------------------\n\nTITLE: Listing Available Database Configurations for SQLAlchemy Tests\nDESCRIPTION: Command to display all built-in database configurations available for testing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --dbs\n```\n\n----------------------------------------\n\nTITLE: Using Built-in CreateTable DDL Element\nDESCRIPTION: Demonstrates using the built-in CreateTable DDL construct to generate CREATE TABLE statements.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/ddl.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.schema import CreateTable\n\nwith engine.connect() as conn:\n    conn.execute(CreateTable(mytable))\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for SQL Datatype Objects in reStructuredText\nDESCRIPTION: This code snippet defines a documentation page for SQL Datatype Objects in SQLAlchemy using reStructuredText format. It establishes a reference anchor and creates a table of contents with links to three related pages: type basics, custom types, and type API.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/types.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _types_toplevel:\n\nSQL Datatype Objects\n=====================\n\n.. toctree::\n    :maxdepth: 3\n\n    type_basics\n    custom_types\n    type_api\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Data Type Declarations\nDESCRIPTION: Sphinx/RST documentation declarations for SQLAlchemy data type classes. These autodoc directives generate reference documentation for built-in SQLAlchemy types that map to standard SQL data types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_basics.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: sqlalchemy.types.INTEGER\n\n.. autoclass:: NCHAR\n\n.. autoclass:: NVARCHAR\n\n.. autoclass:: NUMERIC\n\n.. autoclass:: REAL\n\n.. autoclass:: SMALLINT\n\n.. autoclass:: TEXT\n\n.. autoclass:: TIME\n\n.. autoclass:: TIMESTAMP\n    :members:\n\n.. autoclass:: UUID\n\n.. autoclass:: VARBINARY\n\n.. autoclass:: VARCHAR\n```\n\n----------------------------------------\n\nTITLE: Code References in Changelog\nDESCRIPTION: This changelog documentation does not contain explicit code snippets, but rather references to code-level changes and fixes across different SQLAlchemy components including ORM, SQL dialects (MySQL, PostgreSQL, MSSQL), and core engine functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_08.rst#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Base Type Classes - Python/RST\nDESCRIPTION: ReStructuredText documentation markup defining the SQLAlchemy base type API documentation section, including key classes for type engine functionality, concatenation, indexing, and variant types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/type_api.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: sqlalchemy.types\n\n.. _types_api:\n\nBase Type API\n-------------\n\n.. autoclass:: TypeEngine\n   :members:\n\n\n.. autoclass:: Concatenable\n   :members:\n\n\n.. autoclass:: Indexable\n   :members:\n\n.. autoclass:: NullType\n\n.. autoclass:: ExternalType\n    :members:\n\n.. autoclass:: Variant\n   :members: with_variant, __init__\n```\n\n----------------------------------------\n\nTITLE: Complex Join Construction - Python\nDESCRIPTION: Example showing how to construct joins using tuples of attribute name and selectable\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nquery(Company).join(('employees', people.join(engineer)), Engineer.name)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Changelog Documentation\nDESCRIPTION: ReStructuredText formatted changelog entries detailing changes in SQLAlchemy versions 0.2.8 and 0.2.7. Includes version numbers, release dates, and categorized changes with ticket references.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_02.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=============\n0.2 Changelog\n=============\n\n\n.. changelog::\n    :version: 0.2.8\n    :released: Tue Sep 05 2006\n\n    .. change::\n        :tags:\n        :tickets:\n\n      cleanup on connection methods + documentation...\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Caching with Cache Keys in Python\nDESCRIPTION: Shows how naive query caching requires manually managing cache keys when adding conditional logic to queries. This approach becomes increasingly complex as query conditions grow.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/baked.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmy_simple_cache = {}\n\n\ndef lookup(session, id_argument, include_frobnizzle=False):\n    if include_frobnizzle:\n        cache_key = \"my_key_with_frobnizzle\"\n    else:\n        cache_key = \"my_key_without_frobnizzle\"\n\n    if cache_key not in my_simple_cache:\n        query = session.query(Model).filter(Model.id == bindparam(\"id\"))\n        if include_frobnizzle:\n            query = query.filter(Model.frobnizzle == True)\n\n        my_simple_cache[cache_key] = query.with_session(None).bake()\n    else:\n        query = my_simple_cache[cache_key].with_session(session)\n\n    return query.params(id=id_argument).all()\n```\n\n----------------------------------------\n\nTITLE: Using Composite Types in Queries\nDESCRIPTION: Demonstrates how to use composite types in queries and as primary keys.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nv = Vertex(Point(3, 4), Point(26, 15))\nsession.save(v)\nsession.flush()\n\n# works in queries too\nq = session.query(Vertex).filter(Vertex.start == Point(3, 4))\n\n# a Document class which uses a composite Version\n# object as primary key\ndocument = query.get(Version(1, \"a\"))\n```\n\n----------------------------------------\n\nTITLE: Improving SQLite DDL for Server-Side Defaults (SQL)\nDESCRIPTION: Fixed a bug in SQLite DDL where expressions used as server-side defaults needed to be contained within parentheses to be accepted by the SQLite parser.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Documenting MutableBase Class in reStructuredText\nDESCRIPTION: This snippet documents the MutableBase class, including its members _parents and coerce, using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: MutableBase\n    :members: _parents, coerce\n```\n\n----------------------------------------\n\nTITLE: Filtering Query with Polymorphic Subclass in SQLAlchemy ORM\nDESCRIPTION: Demonstrates using the new of_type() operator to filter a query with a polymorphic subclass. This allows specifying subclass-specific criteria in filters and joins.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nquery.filter(Company.employees.of_type(Engineer).\n  any(Engineer.name=='foo'))\n\nor\n\nquery.join(Company.employees.of_type(Engineer)).\n  filter(Engineer.name=='foo')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AssociationProxy Behavior in Python\nDESCRIPTION: This snippet demonstrates the new behavior of association proxy returning None when fetching a scalar attribute off a None scalar relationship, instead of raising AttributeError.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nscalar_relationship = None\nassoc_proxy = association_proxy('scalar_relationship', 'scalar_attribute')\nresult = assoc_proxy  # Now returns None instead of raising AttributeError\n```\n\n----------------------------------------\n\nTITLE: Explicit Aliasing with Joined Inheritance\nDESCRIPTION: Shows the recommended approach for joining inherited classes using explicit aliasing.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/errors.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\nmanager_alias = aliased(Manager, flat=True)\nstmt = select(Employee, manager_alias).join(Employee.reports_to.of_type(manager_alias))\n\nstmt = (\n    select(Employee)\n    .join(Employee.reports_to.of_type(manager_alias))\n    .options(contains_eager(Employee.reports_to.of_type(manager_alias)))\n)\n```\n\n----------------------------------------\n\nTITLE: Adding FROM DUAL for MySQL SELECT Statements with WHERE Clause\nDESCRIPTION: The MySQL dialect now renders FROM DUAL for SELECT statements that have no FROM clause but have a WHERE clause. This allows for queries like \"SELECT 1 WHERE EXISTS (subquery)\" to be used correctly.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 WHERE EXISTS (subquery)\n```\n\n----------------------------------------\n\nTITLE: Python Boolean Table Definition\nDESCRIPTION: Example table definition using Boolean and Integer columns to demonstrate boolean constant rendering\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Boolean, Integer, Column, MetaData\n\nt1 = Table(\"t\", MetaData(), Column(\"x\", Boolean()), Column(\"y\", Integer))\n```\n\n----------------------------------------\n\nTITLE: Changelog Includes\nDESCRIPTION: RST directives to include changelog files from previous versions\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. changelog_imports::\n\n    .. include:: changelog_09.rst\n        :start-line: 5\n\n\n    .. include:: changelog_08.rst\n        :start-line: 5\n\n\n    .. include:: changelog_07.rst\n        :start-line: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle FLOAT Type with Binary Precision\nDESCRIPTION: Demonstrates how to use the new Oracle-specific FLOAT type with binary precision parameter. The example shows table creation with a FLOAT column having precision of 126.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects import oracle\n\nTable(\"some_table\", metadata, Column(\"value\", oracle.FLOAT(126)))\n```\n\n----------------------------------------\n\nTITLE: Using @@SCOPE_IDENTITY Instead of @@IDENTITY in MSSQL\nDESCRIPTION: The @@SCOPE_IDENTITY is now used instead of @@IDENTITY in MSSQL. This behavior can be overridden with the engine_connect 'use_scope_identity' keyword parameter, which may also be specified in the dburi.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n@@SCOPE_IDENTITY\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Tracking Module in reStructuredText\nDESCRIPTION: This snippet defines the module and section for mutation tracking in SQLAlchemy documentation using reStructuredText markup.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _mutable_toplevel:\n\nMutation Tracking\n=================\n\n.. automodule:: sqlalchemy.ext.mutable\n```\n\n----------------------------------------\n\nTITLE: Deprecated Query Join Syntax\nDESCRIPTION: Illustrates the deprecated list-based syntax for query joins and eager loading, and shows the current recommended approach using *args.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_07.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# old way, deprecated since 0.5\nsession.query(Houses).join([Houses.rooms, Room.closets])\nsession.query(Houses).options(eagerload_all([Houses.rooms, Room.closets]))\n```\n\nLANGUAGE: python\nCODE:\n```\n# current way, in place since 0.5\nsession.query(Houses).join(Houses.rooms, Room.closets)\nsession.query(Houses).options(eagerload_all(Houses.rooms, Room.closets))\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for SQLAlchemy ORM Setup in Python\nDESCRIPTION: This snippet imports necessary modules and classes from SQLAlchemy and the Python standard library for setting up ORM models and database connections.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/_dml_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom typing import Optional\nimport datetime\n\nfrom sqlalchemy import Column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Table\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.orm import Session\n```\n\n----------------------------------------\n\nTITLE: Importing Legacy InstrumentationManager Reference\nDESCRIPTION: References to the deprecated instrumentation system that was moved to ext module. The system remains dormant until InstrumentationManager is imported, at which point it replaces the default InstrumentationFactory.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nInstrumentationManager\n```\n\n----------------------------------------\n\nTITLE: Importing SQLAlchemy SQL Expression Functions\nDESCRIPTION: This snippet demonstrates how to import common SQLAlchemy functions used for building SQL Expression Language constructs. These functions are foundational for creating column elements and expressions in SQLAlchemy.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/sqlelement.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import and_, bindparam, bitwise_not, case, cast, column, distinct, extract, false, func, lambda_stmt, literal, literal_column, not_, null, or_, outparam, text, true, try_cast, tuple_, type_coerce\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Join Example\nDESCRIPTION: Example of a nested join query that SQLAlchemy historically used to handle joined-table inheritance structures.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_09.rst#2025-04-21_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.*, anon_1.* FROM a LEFT OUTER JOIN (\n                    SELECT b.id AS b_id, c.id AS c_id\n                    FROM b JOIN c ON b.id = c.id\n                ) AS anon_1 ON a.id=anon_1.b_id\n```\n\n----------------------------------------\n\nTITLE: Updating Many-to-Many Collection with Subquery for Databases without Multi-Table Support\nDESCRIPTION: Example using a scalar subquery with WriteOnlyCollection.select() to update a many-to-many relationship where multi-table syntax is not available.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/large_collections.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import update\nsubq = bank_audit.account_transactions.select().with_only_columns(AccountTransaction.id)\nsession.execute(\n    update(AccountTransaction)\n    .values(description=AccountTransaction.description + \" (audited)\")\n    .where(AccountTransaction.id.in_(subq))\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE account_transaction SET description=(account_transaction.description || ?)\nWHERE account_transaction.id IN (SELECT account_transaction.id\nFROM audit_transaction\nWHERE ? = audit_transaction.audit_id AND account_transaction.id = audit_transaction.transaction_id)\nRETURNING id\n[...] (' (audited)', 1)\n```\n\n----------------------------------------\n\nTITLE: Invalidating Objects in SQLAlchemy Session Python\nDESCRIPTION: This snippet demonstrates how to invalidate objects in a SQLAlchemy session, causing them to refresh upon the next attribute access.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_01.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_session().invalidate(*obj)\n```\n\n----------------------------------------\n\nTITLE: Hidden Table of Contents in RST Documentation\nDESCRIPTION: RST directive that creates a hidden table of contents tree, including a reference to the mapping_columns documentation section.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/scalar_mapping.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    mapping_columns\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for SQLAlchemy Serializer Extension\nDESCRIPTION: A reStructuredText (RST) directive that configures Sphinx to automatically generate documentation for the SQLAlchemy serializer extension module. The directive includes all members and undocumented members of the module.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/serializer.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sqlalchemy.ext.serializer\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Suite Module\nDESCRIPTION: Test module that imports SQLAlchemy's test suite and provides custom test implementations\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.testing.suite import *\n\nfrom sqlalchemy.testing.suite import IntegerTest as _IntegerTest\n\nclass IntegerTest(_IntegerTest):\n    @testing.skip(\"access\")\n    def test_huge_int(self):\n        # bypass this test because Access ODBC fails with\n        # [ODBC Microsoft Access Driver] Optional feature not implemented.\n        return\n```\n\n----------------------------------------\n\nTITLE: Mapping Table Without Primary Key in SQLAlchemy ORM\nDESCRIPTION: Shows how to map a table that lacks a primary key by explicitly specifying primary key columns in mapper arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SomeClass(Base):\n    __table__ = some_table_with_no_pk\n    __mapper_args__ = {\n        \"primary_key\": [some_table_with_no_pk.c.uid, some_table_with_no_pk.c.bar]\n    }\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema Translation for Sequence.next_value in Column.server_default\nDESCRIPTION: Addressed an issue where the schema_translate_map execution option would not take effect when using Sequence.next_value in Column.server_default during table creation DDL. This ensures proper schema translation in these scenarios.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nSequence.next_value()\nColumn.server_default\n```\n\n----------------------------------------\n\nTITLE: Using Case Statement with Zero as else_ Parameter\nDESCRIPTION: The 'else_' parameter to the case statement now properly works when set to zero, allowing for more flexible conditional logic in SQL queries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncase(..., else_=0)\n```\n\n----------------------------------------\n\nTITLE: Running Basic SQLAlchemy Tests with Tox\nDESCRIPTION: Basic command to run the SQLAlchemy test suite using tox against the default Python interpreter and SQLite database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Documentation Structure with reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for SQLAlchemy using reStructuredText directives. It creates a table of contents with major sections organized hierarchically, including a reference to a high-level overview and sets up the toctree with specific display options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/contents.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _contents:\n\nTable of Contents\n=================\n\nFull table of contents.  For a high level overview of all\ndocumentation, see :ref:`index_toplevel`.\n\n.. toctree::\n   :titlesonly:\n   :includehidden:\n\n   intro\n   tutorial/index\n   orm/index\n   core/index\n   dialects/index\n   faq/index\n   errors\n   changelog/index\n\nIndices and tables\n------------------\n\n* :ref:`glossary`\n* :ref:`genindex`\n```\n\n----------------------------------------\n\nTITLE: Setting Info Dictionary on Hybrid Properties\nDESCRIPTION: Example demonstrating how to set values in the .info dictionary of a hybrid_property using the inspection API.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass SomeObject(Base):\n    # ...\n\n    @hybrid_property\n    def some_prop(self):\n        return self.value + 5\n\n\ninspect(SomeObject).all_orm_descriptors.some_prop.info[\"foo\"] = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Creating Long-Named Table in Python\nDESCRIPTION: Shows how to create a table with long column names that would exceed database identifier length limits.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlong_names = Table(\n    \"long_names\",\n    metadata_obj,\n    Column(\"information_channel_code\", Integer, key=\"a\"),\n    Column(\"billing_convention_name\", Integer, key=\"b\"),\n    Column(\"product_identifier\", Integer, key=\"c\"),\n    UniqueConstraint(\"a\", \"b\", \"c\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Closing All Sessions in SQLAlchemy ORM\nDESCRIPTION: Introduces a new function close_all_sessions() to replace the deprecated Session.close_all() classmethod. This function closes all active sessions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import close_all_sessions\n\nclose_all_sessions()\n```\n\n----------------------------------------\n\nTITLE: SQLite DateTime Column Update SQL\nDESCRIPTION: SQL statement to update existing SQLite datetime columns to the new microseconds format.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE mytable SET somedatecol =\n  substr(somedatecol, 0, 19) || '.' || substr((substr(somedatecol, 21, -1) / 1000000), 3, -1);\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation\nDESCRIPTION: Configures automatic documentation generation for the SQLAlchemy ORM exceptions module using Sphinx automodule directive.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/exceptions.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: sqlalchemy.orm.exc\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL Snapshot Isolation\nDESCRIPTION: SQL commands required to enable snapshot isolation in MSSQL databases to prevent deadlocks during tests with multiple connections. This feature is only available with MSSQL 2005 and later versions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE MyDatabase SET ALLOW_SNAPSHOT_ISOLATION ON\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE MyDatabase SET READ_COMMITTED_SNAPSHOT ON\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Entities with SQLAlchemy ORM\nDESCRIPTION: Example of automatic polymorphic queries where selecting from the Employee class implicitly joins to subclass tables and allows filtering on subclass attributes.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nprint(select(Employee))\n{printsql}SELECT employee.id, employee.name, employee.type, engineer.id AS id_1,\nengineer.engineer_info, manager.id AS id_2, manager.manager_name\nFROM employee\nLEFT OUTER JOIN engineer ON employee.id = engineer.id\nLEFT OUTER JOIN manager ON employee.id = manager.id\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Descriptor Usage in SQLAlchemy ORM\nDESCRIPTION: Shows how to define a mapped class with Column attributes that will be converted to descriptors by SQLAlchemy's instrumentation system.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(Base):\n    __tablename__ = \"foo\"\n\n    id = Column(Integer, primary_key=True)\n    data = Column(String)\n```\n\n----------------------------------------\n\nTITLE: Simple A and B Class Mapping for Attribute Change Tracking\nDESCRIPTION: Basic SQLAlchemy ORM class mapping used to demonstrate how relationship-bound attributes interact with foreign key attributes, particularly in the context of setting values to None.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"table_a\"\n\n    id = Column(Integer, primary_key=True)\n\n\nclass B(Base):\n    __tablename__ = \"table_b\"\n\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"table_a.id\"))\n    a = relationship(A)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy SQLAlchemy 1.4 Patterns in Python\nDESCRIPTION: This snippet shows a SQLAlchemy 1.4 program using deprecated patterns such as engine.execute() and the legacy calling style of select(). It serves as an example of code that needs to be updated for SQLAlchemy 2.0 compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_20.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sqlalchemy import column\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import select\nfrom sqlalchemy import table\n\n\nengine = create_engine(\"sqlite://\")\n\nengine.execute(\"CREATE TABLE foo (id integer)\")\nengine.execute(\"INSERT INTO foo (id) VALUES (1)\")\n\n\nfoo = table(\"foo\", column(\"id\"))\nresult = engine.execute(select([foo.c.id]))\n\nprint(result.fetchall())\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialect Entry Points in setup.py\nDESCRIPTION: Setup script configuration that registers dialect entry points to enable usage with create_engine()\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.dialects.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentry_points = {\n    \"sqlalchemy.dialects\": [\n        \"access.pyodbc = sqlalchemy_access.pyodbc:AccessDialect_pyodbc\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: RST Redirect Notice for SQLAlchemy ORM Documentation\nDESCRIPTION: RST markup that marks the page as orphaned and creates a redirect reference to the ORM imperative mapping documentation section.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/classical.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\nMoved!   :ref:`orm_imperative_mapping`\n```\n\n----------------------------------------\n\nTITLE: Basic NewType Definition in Python\nDESCRIPTION: Demonstrates creating new type aliases using typing.NewType for string types with different lengths.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NewType\n\nnstr30 = NewType(\"nstr30\", str)\nnstr50 = NewType(\"nstr50\", str)\n```\n\n----------------------------------------\n\nTITLE: Querying with Aliased Synonym-Mapped Attributes in SQLAlchemy ORM\nDESCRIPTION: Fixed a 1.0 regression where the 'parent entity' of a synonym-mapped attribute on top of an aliased object would resolve incorrectly, causing issues with query construction. This affects queries that rely on such attributes to determine the correct FROM clause.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import aliased\n\n# Example usage (not provided in original text)\naliased_entity = aliased(SomeEntity)\nquery = session.query(aliased_entity.synonym_attribute)\n```\n\n----------------------------------------\n\nTITLE: Reflecting PostgreSQL array domains in Python\nDESCRIPTION: Fixed issue where reflection of a PostgreSQL domain expressed as an array would fail to be recognized. This allows proper reflection of custom array types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Example of reflecting a table with an array domain column:\nmetadata = MetaData()\nTable('mytable', metadata, autoload=True, autoload_with=engine)\n```\n\n----------------------------------------\n\nTITLE: Resetting join point in SQLAlchemy ORM Query\nDESCRIPTION: Added reset_joinpoint() method to Query to move the \"join point\" back to the starting mapper. This is an interim method for backwards compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery.reset_joinpoint()\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Tests with Multiple Database Backends\nDESCRIPTION: Command to run tests against SQLite with backend tests also running against PostgreSQL.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py311-sqlite-postgresql\n```\n\n----------------------------------------\n\nTITLE: Accessing Row Attributes in SQLAlchemy Result\nDESCRIPTION: This snippet demonstrates how to access row attributes from a SQLAlchemy result set using named tuple-like access and f-string formatting.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/dbapi_transactions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = conn.execute(text(\"select x, y from some_table\"))\n\nfor row in result:\n    y = row.y\n\n    # illustrate use with Python f-strings\n    print(f\"Row: {row.x} {y}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting MutableSet Class in reStructuredText\nDESCRIPTION: This snippet documents the MutableSet class, including its members and undocumented members, using reStructuredText directives for API documentation.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/mutable.rst#2025-04-21_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: MutableSet\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Demonstrating numpy.int64 Integration Issue with SQLAlchemy\nDESCRIPTION: This snippet illustrates the problem of using numpy.int64 with SQLAlchemy, which can cause errors due to incompatibility with some database backends like psycopg2.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\n\n\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    data = Column(Integer)\n\n\n# .. later\nsession.add(A(data=numpy.int64(10)))\nsession.commit()\n```\n\n----------------------------------------\n\nTITLE: Specifying multiple joins in SQLAlchemy ORM Query\nDESCRIPTION: Ensuring joins across multiple relations are specified using a single join() call for forwards compatibility.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\njoin(['a', 'b', 'c'])\n```\n\n----------------------------------------\n\nTITLE: Querying Match Expressions with MySQL Float Return Values\nDESCRIPTION: A code example showing how the match() operator now returns a MatchType that's compatible with MySQL's floating point return value. The query selects matches for 'Agile Ruby Programming' and 'Dive Python' against title columns, demonstrating how MySQL returns floating point relevance scores.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nconnection.execute(\n    select(\n        [\n            matchtable.c.title.match(\"Agile Ruby Programming\").label(\"ruby\"),\n            matchtable.c.title.match(\"Dive Python\").label(\"python\"),\n            matchtable.c.title,\n        ]\n    ).order_by(matchtable.c.id)\n)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Example of the RST format used for changelog entries including version, release date, and changes\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. changelog::\n    :version: 1.0.19\n    :released: August 3, 2017\n\n    .. change::\n        :tags: bug, oracle, performance, py2k\n        :tickets: 4035\n        :versions: 1.0.19, 1.1.13, 1.2.0b3\n```\n\n----------------------------------------\n\nTITLE: Querying Across Chained Association Proxies in SQLAlchemy\nDESCRIPTION: Shows how to query across chained association proxies using the contains method to filter across multiple levels of relationships.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> s.query(A).filter(A.b_values.contains(\"hi\")).all()\n```\n\n----------------------------------------\n\nTITLE: Querying User Addresses with Subquery Load\nDESCRIPTION: Example demonstrating subquery eager loading for User-Address relationship using SQLAlchemy ORM query with filter and options.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_12.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nq = (session.query(User)\n    .filter(User.name.like(\"%ed%\"))\n    .options(subqueryload(User.addresses)))\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Inheritance Query Guide in SQLAlchemy Documentation\nDESCRIPTION: This restructured text directive creates a link to the 'queryguide/inheritance' document within the SQLAlchemy documentation. It's used to redirect readers from an outdated or moved page to the current location of the content.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/inheritance_loading.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:doc:`queryguide/inheritance`\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Session Lifecycle Management in SQLAlchemy ORM\nDESCRIPTION: This code demonstrates a problematic pattern where each class manages its own Session lifecycle. This approach creates separate transactions that don't coordinate with each other, potentially leading to inconsistent database state.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_basics.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass ThingTwo:\n    def go(self):\n        session = Session()\n        try:\n            session.execute(update(Widget).values(q=18))\n            session.commit()\n        except:\n            session.rollback()\n            raise\n\n\ndef run_my_program():\n    ThingOne().go()\n    ThingTwo().go()\n```\n\n----------------------------------------\n\nTITLE: Using populate_existing() in SQLAlchemy 0.4 ORM Queries\nDESCRIPTION: Shows how to use the new populate_existing() method in SQLAlchemy 0.4 to refresh all instances loaded from a query, including eagerly loaded items.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession.query(Blah).populate_existing().all()\n```\n\n----------------------------------------\n\nTITLE: SQL DDL Pragma Directive for SQLCipher\nDESCRIPTION: Modification to add quotes around PRAGMA directives in the pysqlcipher dialect to properly support additional cipher arguments.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nPRAGMA key = 'secret'\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Documentation Structure\nDESCRIPTION: Sets up the documentation structure using ReStructuredText format, creating a table of contents that links to key SQLAlchemy connection management topics.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/engines_connections.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\t:maxdepth: 3\n\n\tengines\n\tconnections\n\tpooling\n\tevents\n```\n\n----------------------------------------\n\nTITLE: Query with String-based Ordering Example\nDESCRIPTION: Example of a query using string-based ordering that was affected by regression related to joined eager loading and subqueries.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery(User).order_by('name').limit(1)\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in SQLAlchemy's Type Annotation Map\nDESCRIPTION: This example demonstrates how to map union types to specific SQL column types like JSON and JSONB. It shows both new-style (pipe operator) and old-style (Union[]) syntax for defining union types and how they match SQLAlchemy column types.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nfrom sqlalchemy import JSON\nfrom sqlalchemy.dialects import postgresql\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom sqlalchemy.schema import CreateTable\n\n# new style Union using a pipe operator\njson_list = list[int] | list[str]\n\n# old style Union using Union explicitly\njson_scalar = Union[float, str, bool]\n\n\nclass Base(DeclarativeBase):\n    type_annotation_map = {\n        json_list: postgresql.JSONB,\n        json_scalar: JSON,\n    }\n\n\nclass SomeClass(Base):\n    __tablename__ = \"some_table\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    list_col: Mapped[list[str] | list[int]]\n\n    # uses JSON\n    scalar_col: Mapped[json_scalar]\n\n    # uses JSON and is also nullable=True\n    scalar_col_nullable: Mapped[json_scalar | None]\n\n    # these forms all use JSON as well due to the json_scalar entry\n    scalar_col_newstyle: Mapped[float | str | bool]\n    scalar_col_oldstyle: Mapped[Union[float, str, bool]]\n    scalar_col_mixedstyle: Mapped[Optional[float | str | bool]]\n```\n\n----------------------------------------\n\nTITLE: Using DISTINCT modifier in SQL query with SQLAlchemy\nDESCRIPTION: Added 'modifier' keyword to apply SQL modifiers like DISTINCT without adding parentheses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nselect([modifier.DISTINCT(...)])\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Core Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for SQLAlchemy's SQL Expression Language foundational components.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/foundation.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _core_foundation_toplevel:\n\n=================================================\nSQL Expression Language Foundational Constructs\n=================================================\n\nBase classes and mixins that are used to compose SQL Expression Language\nelements.\n\n.. currentmodule:: sqlalchemy.sql.expression\n\n.. autoclass:: CacheKey\n   :members:\n\n.. autoclass:: ClauseElement\n   :members:\n   :inherited-members:\n\n\n.. autoclass:: sqlalchemy.sql.base.DialectKWArgs\n   :members:\n\n\n.. autoclass:: sqlalchemy.sql.traversals.HasCacheKey\n    :members:\n\n.. autoclass:: LambdaElement\n   :members:\n\n.. autoclass:: StatementLambdaElement\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Nesting Composites: Vertex and Point Example in SQLAlchemy\nDESCRIPTION: Illustrates how to nest composite objects in SQLAlchemy. The example defines a Vertex class composed of two Point objects, utilizing a custom construction method `_generate` and a `__composite_values__` method for serialization.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/composites.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    from __future__ import annotations\n\n    import dataclasses\n    from typing import Any\n    from typing import Tuple\n\n    from sqlalchemy.orm import composite\n    from sqlalchemy.orm import DeclarativeBase\n    from sqlalchemy.orm import Mapped\n    from sqlalchemy.orm import mapped_column\n\n\n    @dataclasses.dataclass\n    class Point:\n        x: int\n        y: int\n\n\n    @dataclasses.dataclass\n    class Vertex:\n        start: Point\n        end: Point\n\n        @classmethod\n        def _generate(cls, x1: int, y1: int, x2: int, y2: int) -> Vertex:\n            \"\"\"generate a Vertex from a row\"\"\"\n            return Vertex(Point(x1, y1), Point(x2, y2))\n\n        def __composite_values__(self) -> Tuple[Any, ...]:\n            \"\"\"generate a row from a Vertex\"\"\"\n            return dataclasses.astuple(self.start) + dataclasses.astuple(self.end)\n\n\n    class Base(DeclarativeBase):\n        pass\n\n\n    class HasVertex(Base):\n        __tablename__ = \"has_vertex\"\n        id: Mapped[int] = mapped_column(primary_key=True)\n        x1: Mapped[int]\n        y1: Mapped[int]\n        x2: Mapped[int]\n        y2: Mapped[int]\n\n        vertex: Mapped[Vertex] = composite(Vertex._generate, \"x1\", \"y1\", \"x2\", \"y2\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating numpy.int64 Equality Comparison Issue with SQLAlchemy\nDESCRIPTION: This snippet shows how numpy.int64 overrides the __eq__() method, causing issues with SQLAlchemy's expression language when comparing values.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/thirdparty.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy\n>>> from sqlalchemy import column, Integer\n>>> print(column(\"x\", Integer) == numpy.int64(10))  # works\n{printsql}x = :x_1{stop}\n>>> print(numpy.int64(10) == column(\"x\", Integer))  # breaks\nFalse\n```\n\n----------------------------------------\n\nTITLE: Alternative Column Ordering Example with ORM Declarative in Python\nDESCRIPTION: Example showing the column ordering in a different scenario where the primary key is defined in a base class. This demonstrates a potential issue with the new ordering behavior in SQLAlchemy 2.0.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    id = mapped_column(Integer, primary_key=True)\n    col1 = mapped_column(Integer)\n    col3 = mapped_column(Integer)\n\n\nclass Model(Foo, Base):\n    col2 = mapped_column(Integer)\n    col4 = mapped_column(Integer)\n    __tablename__ = \"model\"\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Entry in reStructuredText\nDESCRIPTION: This snippet demonstrates how to define a changelog entry using reStructuredText directives. It includes version information, release date, and individual change entries with tags and ticket references.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. changelog::\n    :version: 0.3.11\n    :released: Sun Oct 14 2007\n\n    .. change::\n        :tags: sql\n        :tickets: \n\n      tweak DISTINCT precedence for clauses like\n      `func.count(t.c.col.distinct())`\n\n    .. change::\n        :tags: sql\n        :tickets: 719\n\n      Fixed detection of internal '$' characters in :bind$params\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Link Reference\nDESCRIPTION: Defines a documentation anchor point for the ORM exceptions section using ReStructuredText syntax.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _orm_exceptions_toplevel:\n```\n\n----------------------------------------\n\nTITLE: Multiple-VALUES Insert Example\nDESCRIPTION: This code demonstrates the use of the `values` method with a list of dictionaries for performing a multi-VALUES INSERT operation.  This syntax is supported by backends such as PostgreSQL, SQLite, and MySQL. The example shows inserting multiple rows into the 'users' table in a single statement using this feature.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nusers.insert().values(\n    [\n        {\"name\": \"some name\"},\n        {\"name\": \"some other name\"},\n        {\"name\": \"yet another name\"},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: SQLite Data Type Reflection\nDESCRIPTION: Example of SQLite type pattern that would be reflected, showing INTEGER type with precision that gets normalized.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nINTEGER(5)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Reconnecting Engine\nDESCRIPTION: A proof of concept script demonstrating the usage of the reconnecting engine. It executes a SELECT statement every 5 seconds to test the reconnection functionality.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/connections.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import select\n\nif __name__ == \"__main__\":\n    engine = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo_pool=True)\n\n    def do_a_thing(engine):\n        with engine.begin() as conn:\n            while True:\n                print(\"ping: %s\" % conn.execute(select([1])).scalar())\n                time.sleep(5)\n\n    e = reconnecting_engine(\n        create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo_pool=True),\n        num_retries=5,\n        retry_interval=2,\n    )\n\n    do_a_thing(e)\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Error Events for Internal MySQL Queries in Python\nDESCRIPTION: This change introduces an execution option 'skip_user_error_events' for the MySQL dialect to disable ConnectionEvents.handle_error events for internal queries used to detect table existence.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nconnection.execution_options(skip_user_error_events=True)\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Constraint Example in SQL\nDESCRIPTION: SQL DDL example showing how to add a foreign key constraint using ALTER TABLE statement.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE employee ADD CONSTRAINT dep_id_fk\nFOREIGN KEY (employee) REFERENCES department (dep_id)\n```\n\n----------------------------------------\n\nTITLE: Query Deduplication Example in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how SQLAlchemy ORM deduplicates query results based on primary key when returning full entities vs. individual columns.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/sessions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nq = session.query(User).outerjoin(User.addresses).filter(User.name == \"jack\")\n\n>>> q.count()\n2\n\n>>> q.all()\n[User(id=5, name='jack', ...)]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ORM Select Statement with User Class\nDESCRIPTION: Example showing how to create a SELECT statement using SQLAlchemy ORM with a User class mapping, demonstrating how ORM-annotated objects are internally represented.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/glossary.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt._raw_columns\n[Table('user_account', MetaData(), Column('id', Integer(), ...)]\n```\n\n----------------------------------------\n\nTITLE: Using Dotted Names for Class References in Declarative SQLAlchemy\nDESCRIPTION: Shows how to refer to classes using their module-qualified dotted names in SQLAlchemy's declarative mapping. The registry of class names is sensitive to the owning module and package of a given class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Snack(Base):\n    # ...\n\n    peanuts = relationship(\n        \"nuts.Peanut\", primaryjoin=\"nuts.Peanut.snack_id == Snack.id\"\n    )\n```\n\n----------------------------------------\n\nTITLE: MySQL Boolean Symbol Usage\nDESCRIPTION: Re-enabling MySQL boolean symbol support for 'IS' and 'IS NOT' operations without native boolean type\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ncolumn.is_(true())\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Core Internal Classes Documentation Structure\nDESCRIPTION: RestructuredText documentation defining the structure and organization of SQLAlchemy's core internal classes documentation. Includes autoclass directives for key components like dialects, compilers, and database interfaces.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/core/internals.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _core_internal_toplevel:\n\nCore Internals\n==============\n\nSome key internal constructs are listed here.\n\n.. currentmodule:: sqlalchemy\n\n.. autoclass:: sqlalchemy.engine.BindTyping\n    :members:\n\n.. autoclass:: sqlalchemy.engine.Compiled\n    :members:\n\n.. autoclass:: sqlalchemy.engine.interfaces.DBAPIConnection\n    :members:\n    :undoc-members:\n\n.. autoclass:: sqlalchemy.engine.interfaces.DBAPICursor\n    :members:\n    :undoc-members:\n\n.. autoclass:: sqlalchemy.engine.interfaces.DBAPIType\n    :members:\n    :undoc-members:\n\n.. autoclass:: sqlalchemy.sql.compiler.DDLCompiler\n    :members:\n    :inherited-members:\n\n.. autoclass:: sqlalchemy.engine.default.DefaultDialect\n    :members:\n    :inherited-members:\n\n.. autoclass:: sqlalchemy.engine.Dialect\n    :members:\n\n.. autoclass:: sqlalchemy.engine.default.DefaultExecutionContext\n    :members:\n\n.. autoclass:: sqlalchemy.engine.ExecutionContext\n    :members:\n\n.. autoclass:: sqlalchemy.sql.compiler.ExpandedState\n    :members:\n\n.. autoclass:: sqlalchemy.sql.compiler.GenericTypeCompiler\n    :members:\n    :inherited-members:\n\n.. autoclass:: sqlalchemy.log.Identified\n    :members:\n\n.. autoclass:: sqlalchemy.sql.compiler.IdentifierPreparer\n    :members:\n\n.. autoclass:: sqlalchemy.sql.compiler.SQLCompiler\n    :members:\n\n.. autoclass:: sqlalchemy.sql.compiler.StrSQLCompiler\n    :members:\n\n.. autoclass:: sqlalchemy.engine.AdaptedConnection\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Engine from Dictionary\nDESCRIPTION: Fixed a bug where known boolean values used by engine_from_config were not being parsed correctly. This affected options like 'pool_threadlocal' and the psycopg2 argument 'use_native_unicode'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import engine_from_config\n\n# Example usage (not provided in original text)\nconfig = {\n    'sqlalchemy.url': 'postgresql://user:pass@localhost/dbname',\n    'sqlalchemy.pool_threadlocal': 'true'\n}\nengine = engine_from_config(config, prefix='sqlalchemy.')\n```\n\n----------------------------------------\n\nTITLE: Using SqlSoup with custom base class\nDESCRIPTION: Shows how to use the SqlSoup constructor with a custom base class for mapped classes, defaulting to 'object'.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_06.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSqlSoup(base=object)\n```\n\n----------------------------------------\n\nTITLE: Fixing Late Import in SQLAlchemy Exception Module\nDESCRIPTION: Repaired a function-level import in the sqlalchemy.exc module that was not using SQLAlchemy's standard late-import system. This ensures consistent import behavior across the library.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing JSON Type Attribute in SQLAlchemy (Python)\nDESCRIPTION: Fixed an issue where the JSON type had a read-only should_evaluate_none attribute, causing failures when using the evaluates_none() method. The attribute is now writable.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Embedding SQL Clauses in Updates/Inserts in SQLAlchemy 0.4 ORM\nDESCRIPTION: Demonstrates how to embed SQL clauses directly in updates or inserts during a flush() operation in SQLAlchemy 0.4.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_04.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmyobject.foo = mytable.c.value + 1\n\nuser.pwhash = func.md5(password)\n\norder.hash = text(\"select hash from hashing_table\")\n```\n\n----------------------------------------\n\nTITLE: StatementError formatting (text)\nDESCRIPTION: This shows how StatementError formatting is improved to enhance readability by adding newlines to separate detail and SQL portions of the error message.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n\"sqlalchemy.exc.StatementError: (sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter 'id'\\n[SQL: select * from reviews\\nwhere id = ?]\\n(Background on this error at: https://sqlalche.me/e/cd3x)\"\n```\n\n----------------------------------------\n\nTITLE: Handling Enum Aliases in SQLAlchemy SQL Module\nDESCRIPTION: Fixed a bug where the Enum type wouldn't correctly handle enum 'aliases' when multiple keys refer to the same value. This fix was contributed via pull request by Daniel Knell.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Enum()\n```\n\n----------------------------------------\n\nTITLE: Type Expression with LowerString Type\nDESCRIPTION: This example shows how to create a custom type `LowerString` that automatically applies the SQL `lower` function when the column is used in expressions. The `bind_expression` method transforms bind values to lowercase, while `column_expression` transforms the column itself to lowercase in SELECT statements. This ensures that all queries against columns of this type are case-insensitive.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.types import String\nfrom sqlalchemy import func, Table, Column, MetaData\n\n\nclass LowerString(String):\n    def bind_expression(self, bindvalue):\n        return func.lower(bindvalue)\n\n    def column_expression(self, col):\n        return func.lower(col)\n\n\nmetadata = MetaData()\ntest_table = Table(\"test_table\", metadata, Column(\"data\", LowerString))\n```\n\n----------------------------------------\n\nTITLE: Customizing Virtual Column Name in AbstractConcreteBase and ConcreteBase\nDESCRIPTION: Added the ability to customize the name of the virtual column used in AbstractConcreteBase and ConcreteBase classes. This allows for models that have a column actually named \"type\".\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nAbstractConcreteBase\nConcreteBase\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definition using PEP-695\nDESCRIPTION: Shows how to create type aliases using the new type keyword introduced in Python 3.12 via PEP-695.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/declarative_tables.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntype SmallInt = int\ntype BigInt = int\ntype JsonScalar = str | float | bool | None\n```\n\n----------------------------------------\n\nTITLE: Defining Dialect Support Table in reStructuredText\nDESCRIPTION: This code snippet defines a table in reStructuredText format to display supported database versions for included dialects in SQLAlchemy. It uses a custom directive 'dialect-table' to create the table structure.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. dialect-table:: **Supported database versions for included dialects**\n  :header-rows: 1\n```\n\n----------------------------------------\n\nTITLE: EXISTS Query Syntax Example\nDESCRIPTION: Reference to a SELECT EXISTS query format that had type mapping issues, affecting boolean result handling.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_10.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nquery(B).filter(B.a != A(id=7))\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT and UPDATE Operations with Parameter Binding\nDESCRIPTION: SQL SELECT queries retrieving data from tables 'a' and 'b', including filtering with IN clause and parameter binding, followed by an UPDATE statement to modify data.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/extensions/asyncio.rst#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN (implicit)\nSELECT a.id, a.data, a.create_date\nFROM a ORDER BY a.id\n[...] ()\nSELECT b.a_id AS b_a_id, b.id AS b_id, b.data AS b_data\nFROM b\nWHERE b.a_id IN (?, ?, ?)\n[...] (1, 2, 3)\n<A object at ...> a1\ncreated at: ...\n<B object at ...> b1\n<B object at ...> b2\n<A object at ...> a2\ncreated at: ...\n<A object at ...> a3\ncreated at: ...\n<B object at ...> b3\n<B object at ...> b4\nSELECT a.id, a.data, a.create_date\nFROM a ORDER BY a.id\nLIMIT ? OFFSET ?\n[...] (1, 0)\nUPDATE a SET data=? WHERE a.id = ?\n[...] ('new data', 1)\nCOMMIT\nnew data\n<B object at ...> b1\n<B object at ...> b2\n```\n\n----------------------------------------\n\nTITLE: Updating User Entries with WHERE and RETURNING in SQLAlchemy\nDESCRIPTION: This snippet illustrates how to perform an update operation on the User table using SQLAlchemy, including a WHERE clause and the RETURNING feature. It demonstrates synchronizing ORM session state with the database using the `fetch` strategy, ensuring session objects are updated with the changes executed by the query.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> from sqlalchemy import update\n>>> stmt = (\n...     update(User)\n...     .where(User.name == \"squidward\")\n...     .values(name=\"spongebob\")\n...     .returning(User)\n... )\n>>> result = session.scalars(stmt, execution_options={\"synchronize_session\": \"fetch\"})\n>>> print(result.all())\n```\n\n----------------------------------------\n\nTITLE: Rendering URL with Cleartext Password in Python\nDESCRIPTION: When a string representation with cleartext password is needed, the render_as_string method can be used with hide_password=False parameter to expose the password in the string.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> e1 = create_engine(\"postgresql+psycopg2://scott:tiger@localhost/test\")\n>>> url_string = e1.url.render_as_string(hide_password=False)\n>>> e2 = create_engine(url_string)\n```\n\n----------------------------------------\n\nTITLE: Extended Instrumentation Registry Implementation\nDESCRIPTION: Reference to the replacement instrumentation system that takes over when the legacy system is activated.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nExtendedInstrumentationRegistry\n```\n\n----------------------------------------\n\nTITLE: Implementing Write-Only Relationships with Type Annotations in SQLAlchemy ORM\nDESCRIPTION: Demonstrates the new write-only relationship pattern that replaces dynamic relationships. Shows how to define models with write-only collections using type annotations and the WriteOnlyMapped class.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import WriteOnlyMapped\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Account(Base):\n    __tablename__ = \"account\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    identifier: Mapped[str]\n    account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n        cascade=\"all, delete-orphan\",\n        passive_deletes=True,\n        order_by=\"AccountTransaction.timestamp\",\n    )\n\nclass AccountTransaction(Base):\n    __tablename__ = \"account_transaction\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    account_id: Mapped[int] = mapped_column(\n        ForeignKey(\"account.id\", ondelete=\"cascade\")\n    )\n    description: Mapped[str]\n    amount: Mapped[Decimal]\n    timestamp: Mapped[datetime] = mapped_column(default=func.now())\n```\n\n----------------------------------------\n\nTITLE: Defining Table with IDENTITY on Non-Primary Key\nDESCRIPTION: This example demonstrates how to define a table with an `IDENTITY` column that is *not* a primary key in SQL Server using SQLAlchemy. The `autoincrement` flag is set to `True` on the target column and `False` on the primary key column. This is a less common use case, but it is supported.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_13.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"test = Table(\n        \\\"test\\\",\n        metadata_obj,\n        Column(\\\"id\\\", Integer, primary_key=True, autoincrement=False),\n        Column(\\\"number\\\", Integer, autoincrement=True),\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Container for SQLAlchemy Testing\nDESCRIPTION: Bash commands to create and configure a PostgreSQL Docker container for SQLAlchemy testing. Creates a container with the scott/tiger user credentials, test database, and required schemas and extensions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# create the container with the proper configuration for sqlalchemy\ndocker run --rm -e POSTGRES_USER='scott' -e POSTGRES_PASSWORD='tiger' -e POSTGRES_DB='test' -p 127.0.0.1:5432:5432 -d --name postgres postgres\n\n# configure the database\nsleep 10\ndocker exec -ti postgres psql -U scott -c 'CREATE SCHEMA test_schema; CREATE SCHEMA test_schema_2;CREATE EXTENSION hstore;CREATE EXTENSION citext;' test\n# this last command is optional\ndocker exec -ti postgres sed -i 's/#max_prepared_transactions = 0/max_prepared_transactions = 10/g' /var/lib/postgresql/data/postgresql.conf\n\n# To stop the container. It will also remove it.\ndocker stop postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Raiseload in SQLAlchemy ORM Relationship Definitions\nDESCRIPTION: This code demonstrates how to configure relationships with raiseload strategy to prevent the N+1 query problem by raising exceptions when SQL would be emitted for lazy loading.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_related_objects.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import relationship\n\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", lazy=\"raise_on_sql\"\n...     )\n\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\", lazy=\"raise_on_sql\")\n```\n\n----------------------------------------\n\nTITLE: Flushing Changes to the Database - Python SQLAlchemy\nDESCRIPTION: This snippet demonstrates the flush process of a SQLAlchemy Session, where it emits SQL commands to insert the pending objects into the database. It provides a view into the underlying SQL operations that occur during the flush.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/tutorial/orm_data_manipulation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> session.flush()\n{execsql}BEGIN (implicit)\nINSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id\n[..., (insertmanyvalues) 1/2 (ordered; batch not supported)] ('squidward', 'Squidward Tentacles')\nINSERT INTO user_account (name, fullname) VALUES (?, ?) RETURNING id\n[insertmanyvalues 2/2 (ordered; batch not supported)] ('ehkrabs', 'Eugene H. Krabs')\n```\n\n----------------------------------------\n\nTITLE: Using Session Merge for Object Retrieval in SQLAlchemy ORM\nDESCRIPTION: Demonstrates how to use session.merge() to retrieve an existing object by primary key. This code shows a typical pattern where an object with a specific ID is created and then merged into the session, which will load the actual object from the database if it exists.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = MyObject(id=1)\nx = sess.query(x)\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Container for SQLAlchemy Testing\nDESCRIPTION: Bash commands to create and configure a MySQL Docker container for SQLAlchemy testing. Creates a container with specified user credentials, test database, and UTF-8 character encoding.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# create the container with the proper configuration for sqlalchemy\ndocker run --rm -e MYSQL_USER='scott' -e MYSQL_PASSWORD='tiger' -e MYSQL_DATABASE='test' -e MYSQL_ROOT_PASSWORD='password' -p 127.0.0.1:3306:3306 -d --name mysql mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# configure the database\nsleep 20\ndocker exec -ti mysql mysql -u root -ppassword -w -e \"CREATE DATABASE test_schema CHARSET utf8mb4; GRANT ALL ON test_schema.* TO scott;\"\n\n# To stop the container. It will also remove it.\ndocker stop mysql\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Annotations in SQLAlchemy Relationships\nDESCRIPTION: Demonstrates the use of explicit foreign() and remote() annotations in SQLAlchemy relationships. This approach provides more control and clarity for complex join conditions, bypassing the usual join-inspection heuristics.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_08.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import foreign, remote\n\n\nclass HostEntry(Base):\n    __tablename__ = \"host_entry\"\n\n    id = Column(Integer, primary_key=True)\n    ip_address = Column(INET)\n    content = Column(String(50))\n\n    # relationship() using explicit foreign() and remote() annotations\n    # in lieu of separate arguments\n    parent_host = relationship(\n        \"HostEntry\",\n        primaryjoin=remote(ip_address) == cast(foreign(content), INET),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Type Conversion Adapter in Python\nDESCRIPTION: Adapter class that helps migrate SQLAlchemy 0.3-style type conversion methods to the new 0.5 style processor methods. Provides bind_processor and result_processor methods that wrap the old convert methods.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_05.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AdaptOldConvertMethods(object):\n    \"\"\"A mixin which adapts 0.3-style convert_bind_param and\n    convert_result_value methods\n\n    \"\"\"\n\n    def bind_processor(self, dialect):\n        def convert(value):\n            return self.convert_bind_param(value, dialect)\n\n        return convert\n\n    def result_processor(self, dialect):\n        def convert(value):\n            return self.convert_result_value(value, dialect)\n\n        return convert\n\n    def convert_result_value(self, value, dialect):\n        return value\n\n    def convert_bind_param(self, value, dialect):\n        return value\n```\n\n----------------------------------------\n\nTITLE: Selecting Individual Attributes in SQLAlchemy Python\nDESCRIPTION: This snippet shows how to select individual attributes of ORM entities, which results in rows containing only the specified columns rather than full ORM-mapped objects. It requires the SQLAlchemy library and an active ORM session.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresult = session.execute(\n    select(User.name, Address.email_address)\n    .join(User.addresses)\n    .order_by(User.id, Address.id)\n)\nfor row in result:\n    print(f\"{row.name}  {row.email_address}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Array of ENUM Type in PostgreSQL\nDESCRIPTION: Custom type decorator implementation to support arrays of ENUM types in PostgreSQL. Handles type casting and result processing for ENUM arrays.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import TypeDecorator\nfrom sqlalchemy.dialects.postgresql import ARRAY\n\nclass ArrayOfEnum(TypeDecorator):\n    impl = ARRAY\n\n    def bind_expression(self, bindvalue):\n        return sa.cast(bindvalue, self)\n\n    def result_processor(self, dialect, coltype):\n        super_rp = super(ArrayOfEnum, self).result_processor(dialect, coltype)\n\n        def handle_raw_string(value):\n            inner = re.match(r\"^{(.*)}$\", value).group(1)\n            return inner.split(\",\") if inner else []\n\n        def process(value):\n            if value is None:\n                return None\n            return super_rp(handle_raw_string(value))\n\n        return process\n```\n\n----------------------------------------\n\nTITLE: Using add_entity() and add_column() Methods in Query\nDESCRIPTION: Query now has add_entity() and add_column() generative methods. These will add the given mapper/class or ColumnElement to the query at compile time, and apply them to the instances() method. The user is responsible for constructing reasonable join conditions.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_03.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery.add_entity(SomeClass).add_column(some_column)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple ORM Relationship Between A and B Classes in Python\nDESCRIPTION: Example of basic SQLAlchemy ORM mapping with a one-to-many relationship between two classes. Class A has a primary key, while class B has a foreign key referencing A's primary key and a relationship to A.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/migration_10.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass A(Base):\n    __tablename__ = \"a\"\n    id = Column(Integer, primary_key=True)\n\n\nclass B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n    a = relationship(\"A\")\n```\n\n----------------------------------------\n\nTITLE: Including Changelog Content in RST Documentation\nDESCRIPTION: RST directives used to import changelog information from another file (changelog_20.rst) starting from line 5, and to define the current changelog version as 2.1.0b1, including notes from the unreleased_21 tag.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_21.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. changelog_imports::\n\n    .. include:: changelog_20.rst\n        :start-line: 5\n\n\n.. changelog::\n    :version: 2.1.0b1\n    :include_notes_from: unreleased_21\n```\n\n----------------------------------------\n\nTITLE: Documenting Removal of Legacy Event Handler Signatures in SQLAlchemy ORM\nDESCRIPTION: This is a change documentation entry that describes the removal of legacy method signatures from after_bulk_update and after_bulk_delete session event handlers that have been deprecated since SQLAlchemy 0.9.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/unreleased_21/10721.rst#2025-04-21_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\n.. change::\n    :tags: change, orm\n    :tickets: 10721\n\n    Removed legacy signatures dating back to 0.9 release from the\n    :meth:`_orm.SessionEvents.after_bulk_update` and\n    :meth:`_orm.SessionEvents.after_bulk_delete`.\n```\n\n----------------------------------------\n\nTITLE: Multirange Type Model Definition Example\nDESCRIPTION: Example of defining a SQLAlchemy model using PostgreSQL's TSMULTIRANGE type for handling multiple datetime ranges.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/dialects/postgresql.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import List\nfrom sqlalchemy.dialects.postgresql import Range\nfrom sqlalchemy.dialects.postgresql import TSMULTIRANGE\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass EventCalendar(Base):\n    __tablename__ = \"event_calendar\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    event_name: Mapped[str]\n    added: Mapped[datetime]\n    in_session_periods: Mapped[List[Range[datetime]]] = mapped_column(TSMULTIRANGE)\n```\n\n----------------------------------------\n\nTITLE: Defining FAQ Table of Contents in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the SQLAlchemy FAQ section using reStructuredText directives. It includes a section title, brief description, and a toctree directive listing various FAQ topics.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _faq_toplevel:\n\n==========================\nFrequently Asked Questions\n==========================\n\nThe Frequently Asked Questions section is a growing collection of commonly\nobserved questions to well-known issues.\n\n.. toctree::\n    :maxdepth: 2\n\n    installation\n    connections\n    metadata_schema\n    sqlexpressions\n    ormconfiguration\n    performance\n    sessions\n    thirdparty\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Column Inclusion with polymorphic_load='inline'\nDESCRIPTION: This example shows how using the polymorphic_load='inline' option causes all subclass columns to be automatically included in SELECT statements against the base Employee entity.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> print(select(Employee))\n{printsql}SELECT employee.id, employee.name, employee.type,\nemployee.manager_name, employee.engineer_info\nFROM employee\n```\n\n----------------------------------------\n\nTITLE: Handling Integrity Errors with SAVEPOINT\nDESCRIPTION: Shows how to use SAVEPOINT transactions to handle database integrity errors gracefully, allowing the main transaction to continue when duplicate records are encountered.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/session_transaction.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import exc\n\nwith session.begin():\n    for record in records:\n        try:\n            with session.begin_nested():\n                obj = SomeRecord(id=record[\"identifier\"], name=record[\"name\"])\n                session.add(obj)\n        except exc.IntegrityError:\n            print(f\"Skipped record {record} - row already exists\")\n```\n\n----------------------------------------\n\nTITLE: Improving ORDER BY Clause Rendering in SQLAlchemy\nDESCRIPTION: Fixed an issue where the ORDER BY clause would fail to render a complete expression in certain cases, particularly important for SQL Server. This improves the accuracy of query generation, especially for complex ORDER BY clauses.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_13.rst#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Querying MySQL Server Version in SQLAlchemy Dialects\nDESCRIPTION: MySQL dialects now query the server version using 'SELECT @@version' explicitly to ensure correct version information is retrieved, avoiding issues with proxy servers like MaxScale interfering with DBAPI connection.server_version.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_11.rst#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT @@version\n```\n\n----------------------------------------\n\nTITLE: Join to a Target with Relationship ON Clause\nDESCRIPTION: This snippet uses the `User.addresses` relationship as the ON clause for a join. It achieves the same result as the simple relationship join, explicitly passing the relationship as the join condition.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/select.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> stmt = select(User).join(Address, User.addresses)\n```\n\n----------------------------------------\n\nTITLE: Defining DDL Statements in SQLAlchemy\nDESCRIPTION: Shows how to create and use the new DDL class for executing free-form DDL statements. DDL objects can be executed directly or attached to Table/MetaData for automatic execution.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_04.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nschema.DDL\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL INTERVAL with Fields in Python\nDESCRIPTION: Demonstrates the new 'fields' parameter for the PostgreSQL INTERVAL datatype, allowing specification of interval qualifiers like 'YEAR', 'MONTH', etc.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_12.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.dialects.postgresql import INTERVAL\n\nINTERVAL(fields='DAY TO MINUTE')\n```\n\n----------------------------------------\n\nTITLE: Basic Employee-Manager SQL Join Query\nDESCRIPTION: SQL query joining employee and manager tables with a WHERE clause filtering on employee IDs.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/orm/queryguide/inheritance.rst#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nFROM employee JOIN manager ON employee.id = manager.id\nWHERE employee.id IN (?) ORDER BY employee.id\n```\n\n----------------------------------------\n\nTITLE: Creating an Insert from Select Statement in SQLAlchemy\nDESCRIPTION: Shows how to use the new from_select() method on Insert to create an INSERT INTO ... SELECT statement in SQLAlchemy 0.9.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/changelog_09.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ninsert(table).from_select([columns], select_statement)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mapped Class Properties in SQLAlchemy\nDESCRIPTION: Shows how to use SQLAlchemy's inspect function to access mapper information and class properties.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/faq/ormconfiguration.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import inspect\n\nmapper = inspect(MyClass)\n```\n\n----------------------------------------\n\nTITLE: Running SQLAlchemy Tests Against Specific Python Version and Database\nDESCRIPTION: Command to run tests against Python 3.11 using an in-memory SQLite database.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/README.unittests.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py311-sqlite\n```\n\n----------------------------------------\n\nTITLE: Basic Select Query Execution in SQLAlchemy\nDESCRIPTION: Demonstrates executing a basic select query using a connection object and retrieving scalar results.\nSOURCE: https://github.com/sqlalchemy/sqlalchemy/blob/main/doc/build/changelog/whatsnew_20.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = connection.execute(select(str_col)).scalars().all()\n```"
  }
]