[
  {
    "owner": "microsoftdocs",
    "repo": "wsl",
    "content": "TITLE: Setting Default Linux Distribution for WSL\nDESCRIPTION: This command sets the default Linux distribution to be used with the wsl command. Replace <DistributionName> with the desired distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nwsl -s <DistributionName>\n```\n\n----------------------------------------\n\nTITLE: Installing WSL using PowerShell\nDESCRIPTION: This command installs WSL with the default Ubuntu distribution. It enables necessary features and requires administrator privileges.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Installing WSL with Ubuntu Distribution in PowerShell\nDESCRIPTION: Command to install WSL with the default Ubuntu distribution. Several options are available including specifying a different distribution, disabling auto-launch, using web download, and enabling WSL1.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Installing WSL using PowerShell\nDESCRIPTION: Command to install Windows Subsystem for Linux with default Ubuntu distribution. This enables WSL components, installs Linux kernel, sets WSL 2 as default, and installs Ubuntu.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL2 Settings in .wslconfig File (Bash)\nDESCRIPTION: This snippet demonstrates a sample .wslconfig file with various WSL2 configuration options. It includes settings for memory limits, processors, custom kernel, swap space, networking, and experimental features.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Settings apply across all Linux distros running on WSL 2\n[wsl2]\n\n# Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB\nmemory=4GB \n\n# Sets the VM to use two virtual processors\nprocessors=2\n\n# Specify a custom Linux kernel to use with your installed distros. The default kernel used can be found at https://github.com/microsoft/WSL2-Linux-Kernel\nkernel=C:\\\\temp\\\\myCustomKernel\n\n# Specify the modules VHD for the custum Linux kernel to use with your installed distros.\nkernelModules=C:\\\\temp\\\\modules.vhdx\n\n# Sets additional kernel parameters, in this case enabling older Linux base images such as Centos 6\nkernelCommandLine = vsyscall=emulate\n\n# Sets amount of swap storage space to 8GB, default is 25% of available RAM\nswap=8GB\n\n# Sets swapfile path location, default is %USERPROFILE%\\AppData\\Local\\Temp\\swap.vhdx\nswapfile=C:\\\\temp\\\\wsl-swap.vhdx\n\n# Disable page reporting so WSL retains all allocated memory claimed from Windows and releases none back when free\npageReporting=false\n\n# Turn on default connection to bind WSL 2 localhost to Windows localhost. Setting is ignored when networkingMode=mirrored\nlocalhostforwarding=true\n\n# Disables nested virtualization\nnestedVirtualization=false\n\n# Turns on output console showing contents of dmesg when opening a WSL 2 distro for debugging\ndebugConsole=true\n\n# Enable experimental features\n[experimental]\nsparseVhd=true\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Linux Distributions with Details in PowerShell\nDESCRIPTION: Command to display installed Linux distributions along with their state (running or stopped) and WSL version (1 or 2). Additional options include --all, --running, and --quiet.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --list --verbose\n```\n\n----------------------------------------\n\nTITLE: Setting WSL Version for a Distribution in PowerShell\nDESCRIPTION: Command to set a specific WSL version (1 or 2) for a Linux distribution. Requires the distribution name and desired version number as parameters.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-version <distribution name> <versionNumber>\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring PostgreSQL on Ubuntu WSL\nDESCRIPTION: Steps for installing PostgreSQL on Ubuntu WSL, including package updates, installation commands, service management, and connecting to the PostgreSQL shell.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install postgresql postgresql-contrib\npsql --version\nsudo service postgresql status\nsudo service postgresql start\nsudo service postgresql stop\nsudo passwd postgres\nsudo -u postgres psql\n```\n\n----------------------------------------\n\nTITLE: Updating WSL in PowerShell\nDESCRIPTION: Command to update WSL to the latest version. The --web-download option allows downloading the update from GitHub rather than the Microsoft Store.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --update\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring MySQL on Ubuntu WSL\nDESCRIPTION: Commands for installing MySQL on Ubuntu WSL, including updating packages, installing MySQL server, checking version, starting the service, and basic database operations.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install mysql-server\nmysql --version\nsystemctl status mysql\nsudo mysql\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DATABASES;\nCREATE DATABASE database_name;\nDROP DATABASE database_name;\n```\n\n----------------------------------------\n\nTITLE: Checking WSL Status in PowerShell\nDESCRIPTION: Command to display general information about the WSL configuration, including default distribution type, default distribution, and kernel version.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --status\n```\n\n----------------------------------------\n\nTITLE: Setting Default WSL Version in PowerShell\nDESCRIPTION: Command to set the default WSL version (1 or 2) for new Linux distribution installations. This setting applies to all future installations until changed.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-default-version <Version>\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL Distribution Settings with wsl.conf\nDESCRIPTION: Example wsl.conf file demonstrating various configuration options including automount settings, network configuration, interop settings, user defaults, and boot commands. This file should be placed at /etc/wsl.conf within the WSL distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Automatically mount Windows drive when the distribution is launched\n[automount]\n\n# Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won't be mounted automatically, but need to be mounted manually or with fstab.\nenabled = true\n\n# Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c. \nroot = /\n\n# DrvFs-specific options can be specified.  \noptions = \"metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off\"\n\n# Sets the `/etc/fstab` file to be processed when a WSL distribution is launched.\nmountFsTab = true\n\n# Network host settings that enable the DNS server used by WSL 2. This example changes the hostname, sets generateHosts to false, preventing WSL from the default behavior of auto-generating /etc/hosts, and sets generateResolvConf to false, preventing WSL from auto-generating /etc/resolv.conf, so that you can create your own (ie. nameserver 1.1.1.1).\n[network]\nhostname = DemoHost\ngenerateHosts = false\ngenerateResolvConf = false\n\n# Set whether WSL supports interop processes like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.\n[interop]\nenabled = false\nappendWindowsPath = false\n\n# Set the user when launching a distribution with WSL.\n[user]\ndefault = DemoUser\n\n# Set a command to run when a new WSL instance launches. This example starts the Docker container service.\n[boot]\ncommand = service docker start\n```\n\n----------------------------------------\n\nTITLE: Listing Available Linux Distributions for WSL in PowerShell\nDESCRIPTION: Command to display a list of Linux distributions available through the online store. Can also be entered as 'wsl -l -o'.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --list --online\n```\n\n----------------------------------------\n\nTITLE: Basic Docker CLI Commands\nDESCRIPTION: A collection of fundamental Docker commands for viewing Docker information, listing images, and managing containers within WSL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker\ndocker <COMMAND> --help\ndocker image ls --all\ndocker container ls --all\ndocker ps -a\ndocker info\n```\n\n----------------------------------------\n\nTITLE: Enabling systemd in WSL Configuration\nDESCRIPTION: Configuration to enable systemd support in a WSL distribution by adding entries to the wsl.conf file. This makes the WSL environment more similar to traditional Linux systems by enabling the systemd service manager.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[boot]\nsystemd=true\n```\n\n----------------------------------------\n\nTITLE: Checking WSL Version and Installed Distributions\nDESCRIPTION: This command lists installed Linux distributions and their corresponding WSL versions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl -l -v\n```\n\n----------------------------------------\n\nTITLE: Enabling systemd in WSL by editing wsl.conf\nDESCRIPTION: Configuration snippet to enable systemd for a Linux distribution in WSL. This requires adding the systemd=true setting under the [boot] section in the /etc/wsl.conf file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/systemd.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[boot]\nsystemd=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Subsystem for Linux in PowerShell\nDESCRIPTION: This PowerShell command enables the Windows Subsystem for Linux optional feature. It should be run as Administrator.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n----------------------------------------\n\nTITLE: Setting Default Linux Distribution in PowerShell\nDESCRIPTION: Command to set the default Linux distribution that WSL commands will use when no specific distribution is specified. Requires the name of the preferred Linux distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-default <Distribution Name>\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Machine Platform in PowerShell\nDESCRIPTION: This PowerShell command enables the Virtual Machine Platform optional feature, which is required for WSL 2. It should be run as Administrator.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n----------------------------------------\n\nTITLE: Changing to Home Directory in WSL from PowerShell\nDESCRIPTION: Command to start WSL in the user's home directory. The tilde (~) shortcut can be used from within WSL to navigate to the home directory.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nwsl ~\n```\n\n----------------------------------------\n\nTITLE: Installing and Using SQLite on Ubuntu WSL\nDESCRIPTION: Instructions for installing SQLite on Ubuntu WSL, creating a test database, and performing basic operations.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install sqlite3\nsqlite3 --version\nsqlite3 example.db\n```\n\nLANGUAGE: sql\nCODE:\n```\n.databases\n.dbinfo ?DB?\nCREATE TABLE empty (kol INTEGER);\n.exit\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Linux Distribution with a Specific User in PowerShell\nDESCRIPTION: Command to launch a specific Linux distribution with a specific user account. Both the distribution name and user name must be valid, existing values.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --distribution <Distribution Name> --user <User Name>\n```\n\n----------------------------------------\n\nTITLE: Checking WSL Distribution Version in PowerShell\nDESCRIPTION: Command to check which WSL version (1 or 2) your Linux distributions are running. Used to verify that distributions are using WSL 2 mode which is required for Docker Desktop integration.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl -l -v\n```\n\n----------------------------------------\n\nTITLE: Checking WSL Version in PowerShell\nDESCRIPTION: Command to display version information about WSL and its components. Provides detailed version numbers for the WSL subsystem.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --version\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Ubuntu/Debian in WSL\nDESCRIPTION: Command to install the latest stable Git version on Ubuntu or Debian distributions through apt package manager.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-git.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Displaying WSL Help Information in PowerShell\nDESCRIPTION: Command to display a list of available options and commands for WSL. Provides a quick reference for WSL command syntax and options.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --help\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for WSL2 Network Access\nDESCRIPTION: This PowerShell command uses Netsh to set up port forwarding, allowing access to WSL2 applications from the local area network. It forwards a specified port from the host to the WSL2 VM's IP address.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/networking.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnetsh interface portproxy add v4tov4 listenport=<yourPortToForward> listenaddress=0.0.0.0 connectport=<yourPortToConnectToInWSL> connectaddress=(wsl hostname -I)\n```\n\n----------------------------------------\n\nTITLE: Changing Default User for a WSL Distribution in PowerShell\nDESCRIPTION: Command to change the default user for a specific WSL distribution. The specified user must already exist inside the distribution to become the default user.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n<DistributionName> config --default-user <Username>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Linux Distribution for WSL\nDESCRIPTION: This command installs a specific Linux distribution. Replace <Distribution Name> with the desired distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install -d <Distribution Name>\n```\n\n----------------------------------------\n\nTITLE: Terminating a Specific WSL Distribution in PowerShell\nDESCRIPTION: Command to terminate or stop a specific WSL distribution from running. Requires the name of the targeted distribution as a parameter.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --terminate <Distribution Name>\n```\n\n----------------------------------------\n\nTITLE: Shutting Down All WSL Distributions in PowerShell\nDESCRIPTION: Command to immediately terminate all running distributions and the WSL 2 lightweight utility virtual machine. Useful when needing to restart the WSL 2 VM environment.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --shutdown\n```\n\n----------------------------------------\n\nTITLE: Exporting a WSL Distribution in PowerShell\nDESCRIPTION: Command to export a snapshot of a specified distribution as a new distribution file. Defaults to tar format, but can also export as a .vhdx file with the --vhd option.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --export <Distribution Name> <FileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents\nDESCRIPTION: Display the contents of the current directory using the ls command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Importing a WSL Distribution in PowerShell\nDESCRIPTION: Command to import a tar file as a new WSL distribution. Options include specifying a .vhdx file instead and choosing between WSL 1 and WSL 2 for the imported distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --import <Distribution Name> <InstallLocation> <FileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Details\nDESCRIPTION: Display detailed information about directory contents, including permissions and modification times.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nls -l\n```\n\n----------------------------------------\n\nTITLE: Importing a WSL Distribution In-Place in PowerShell\nDESCRIPTION: Command to import a .vhdx file as a new WSL distribution. The virtual hard disk must be formatted with the ext4 filesystem type.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --import-in-place <Distribution Name> <FileName>\n```\n\n----------------------------------------\n\nTITLE: Creating a New File\nDESCRIPTION: Create a new empty file named 'hello_world.txt' using the touch command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntouch hello_world.txt\n```\n\n----------------------------------------\n\nTITLE: Mounting Disks in WSL\nDESCRIPTION: Command to attach and mount a physical disk in all WSL2 distributions. Supports various options including custom naming, filesystem type specification, and partition selection.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --mount <DiskPath>\n```\n\n----------------------------------------\n\nTITLE: Editing a File with VS Code\nDESCRIPTION: Open the file 'hello_world.txt' for editing in Visual Studio Code.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncode hello_world.txt\n```\n\n----------------------------------------\n\nTITLE: Unmounting Disks in WSL\nDESCRIPTION: Command to unmount a specific disk or all mounted disks in WSL. If no disk path is provided, it unmounts and detaches all mounted disks.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --unmount <DiskPath>\n```\n\n----------------------------------------\n\nTITLE: Displaying File Contents\nDESCRIPTION: View the contents of the file 'hello_world.txt' in the terminal using the cat command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat hello_world.txt\n```\n\n----------------------------------------\n\nTITLE: Sorting File Contents\nDESCRIPTION: Display the sorted contents of the file 'fruits.txt' using cat and sort commands with a pipe.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncat fruits.txt | sort\n```\n\n----------------------------------------\n\nTITLE: Searching File Contents\nDESCRIPTION: Search for lines containing 'P' in the file 'fruits.txt' using cat and grep commands with a pipe.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncat fruits.txt | grep P\n```\n\n----------------------------------------\n\nTITLE: Sorting and Saving File Contents\nDESCRIPTION: Sort the contents of 'fruits.txt' and save the result to a new file 'sorted_fruit.txt'.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncat fruits.txt | sort > sorted_fruit.txt\n```\n\n----------------------------------------\n\nTITLE: Locating a WSL Distribution's VHDX File Path\nDESCRIPTION: PowerShell script to find the path to a specific Linux distribution's ext4.vhdx file by querying the Windows registry. This path is needed for mounting and repairing the distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n(Get-ChildItem -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss | Where-Object { $_.GetValue(\"DistributionName\") -eq '<distribution-name>' }).GetValue(\"BasePath\") + \"\\ext4.vhdx\"\n```\n\n----------------------------------------\n\nTITLE: Repairing a WSL Distribution's File System\nDESCRIPTION: Command to repair a WSL distribution's ext4 file system using the e2fsck utility. This checks for and fixes errors in the file system.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe sudo e2fsck -f /dev/<device>\n```\n\n----------------------------------------\n\nTITLE: Mounting a WSL Distribution VHD File for Repair\nDESCRIPTION: PowerShell command to mount a WSL distribution's VHD file for repair purposes. The path to the ext4.vhdx file must be specified.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe --mount <path-to-ext4.vhdx> --vhd --bare\n```\n\n----------------------------------------\n\nTITLE: Shutting Down All WSL Distributions\nDESCRIPTION: PowerShell command to shut down all running WSL distributions. This is a necessary step before attempting to repair a distribution with a disk mount error.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe --shutdown\n```\n\n----------------------------------------\n\nTITLE: File System Write Error in Read-only WSL Distribution\nDESCRIPTION: Error message that appears when attempting to write to a filesystem in a WSL distribution that has been mounted as read-only.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ touch file\ntouch: cannot touch 'file': Read-only file system\n```\n\n----------------------------------------\n\nTITLE: Read-only Fallback Error Message in WSL\nDESCRIPTION: Error message displayed when WSL encounters a mounting error and sets the distribution to read-only mode as a fallback mechanism.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAn error occurred mounting the distribution disk, it was mounted read-only as a fallback.\n```\n\n----------------------------------------\n\nTITLE: Viewing Block Device Information with lsblk in WSL\nDESCRIPTION: Sample output of the lsblk command in WSL, which displays information about all block devices connected to the Linux distribution including their names, sizes, and mount points.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAME MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda    8:0    0 363.1M  1 disk\nsdb    8:16   0     8G  0 disk [SWAP]\nsdc    8:32   0   1.5T  0 disk\nsdd    8:48   0     1T  0 disk /mnt/wslg/distro\n```\n\n----------------------------------------\n\nTITLE: Disabling Case Sensitivity for WSL Mounted Drive\nDESCRIPTION: This bash command disables case-sensitivity on a directory of a drive mounted to a WSL distribution, returning it to the case-insensitive default.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfsutil.exe file setCaseSensitiveInfo <path> disable\n```\n\n----------------------------------------\n\nTITLE: Listing USB Devices in PowerShell\nDESCRIPTION: Lists all USB devices connected to Windows using the usbipd command. This helps identify the bus ID of the device you want to connect to WSL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/connect-usb.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nusbipd list\n```\n\n----------------------------------------\n\nTITLE: Enabling Case Sensitivity for WSL Mounted Drive\nDESCRIPTION: This bash command enables case-sensitivity on a directory of a drive mounted to a WSL distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfsutil.exe file setCaseSensitiveInfo <path> enable\n```\n\n----------------------------------------\n\nTITLE: Binding USB Device for WSL Use\nDESCRIPTION: Binds a USB device to make it available for sharing with WSL. This command requires administrator privileges and specifies the bus ID of the device to be shared.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/connect-usb.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nusbipd bind --busid 4-4\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Sensitivity in WSL Config File\nDESCRIPTION: These bash snippets show different options for configuring case sensitivity in the WSL config file (/etc/wsl.conf) when mounting a drive.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[automount]\noptions = case = dir\n```\n\nLANGUAGE: bash\nCODE:\n```\n[automount]\noptions = case = off\n```\n\nLANGUAGE: bash\nCODE:\n```\n[automount]\noptions = case = force\n```\n\n----------------------------------------\n\nTITLE: Attaching USB Device to WSL\nDESCRIPTION: Attaches a USB device to WSL by its bus ID. This command connects the device to the WSL 2 virtual machine, making it available to all WSL 2 distributions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/connect-usb.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nusbipd attach --wsl --busid <busid>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Case Sensitivity in Windows File System\nDESCRIPTION: This PowerShell command checks if a directory is case sensitive in the Windows filesystem. Replace <path> with the target file path.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfsutil.exe file queryCaseSensitiveInfo <path>\n```\n\n----------------------------------------\n\nTITLE: Listing USB Devices in Linux\nDESCRIPTION: Lists all USB devices connected to the Linux distribution using the lsusb command. This verifies that the attached device is recognized by the Linux system.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/connect-usb.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlsusb\n```\n\n----------------------------------------\n\nTITLE: Shutting Down All WSL Distributions\nDESCRIPTION: Command to shut down all running WSL instances to apply global configuration changes made in .wslconfig. This terminates all WSL distributions and releases resources.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwsl.exe --shutdown\n```\n\n----------------------------------------\n\nTITLE: Detaching USB Device from WSL\nDESCRIPTION: Detaches a USB device from WSL by its bus ID. This command disconnects the device from the WSL 2 virtual machine, making it available again for Windows to use.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/connect-usb.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nusbipd detach --busid <busid>\n```\n\n----------------------------------------\n\nTITLE: Terminating a Specific WSL Distribution\nDESCRIPTION: Command to terminate a specific WSL distribution to apply configuration changes made in wsl.conf. This allows the distribution to restart with the new settings.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwsl.exe --terminate <distroName>\n```\n\n----------------------------------------\n\nTITLE: Enabling Case Sensitivity for Windows Directory\nDESCRIPTION: This PowerShell command changes a directory in the Windows file system to be case-sensitive. It requires elevated permissions (run as Administrator).\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfsutil.exe file setCaseSensitiveInfo <path> enable\n```\n\n----------------------------------------\n\nTITLE: Configuring Default WSL User Settings\nDESCRIPTION: Configuration snippet for setting the default username in WSL via /etc/wsl.conf file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_3\n\nLANGUAGE: config\nCODE:\n```\n[user]\ndefault=<string>\n```\n\n----------------------------------------\n\nTITLE: Disabling Case Sensitivity for Windows Directory\nDESCRIPTION: This PowerShell command changes a directory in the Windows file system back to case-insensitive. It requires elevated permissions (run as Administrator).\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfsutil.exe file setCaseSensitiveInfo <path> disable\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL2 Kernel Command Line in .wslconfig\nDESCRIPTION: Configuration option for user profile .wslconfig that allows specifying additional kernel command line parameters for the WSL2 Linux kernel, enabling advanced customization of the kernel behavior.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[wsl2]\nkernelCommandLine = <string> # Additional kernel command line arguments\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Case Sensitivity\nDESCRIPTION: These Git commands configure the core.ignorecase setting to adjust case sensitivity for files in Git repositories.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.ignorecase false\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.ignorecase true\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL2 Memory Management in .wslconfig\nDESCRIPTION: Configuration options for user profile .wslconfig that control memory management features in WSL2. These settings allow enabling/disabling memory page reporting and setting idle thresholds for memory compaction.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[wsl2]\npageReporting = <bool>    # Enable or disable the free memory page reporting feature (default true).\nidleThreshold = <integer> # Set the idle threshold for memory compaction, 0 disables the feature (default 1).\n```\n\n----------------------------------------\n\nTITLE: Opening Windows File Explorer from Command Line for Directory Permissions\nDESCRIPTION: Command to open the current directory in Windows File Explorer to access the properties dialog for checking or modifying directory permissions. This is useful when troubleshooting access denied errors when changing case sensitivity settings.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/case-sensitivity.md#2025-04-06_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexplorer.exe .\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL Boot Commands in wsl.conf\nDESCRIPTION: Configuration option for /etc/wsl.conf that enables setting startup commands to execute whenever a WSL instance boots. This allows automating initialization tasks in the Linux environment.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[boot]\ncommand=<string>\n```\n\n----------------------------------------\n\nTITLE: Creating WSL Distribution Configuration File in Bash\nDESCRIPTION: Sample content for the /etc/wsl-distribution.conf file, which defines how the Linux distribution should be configured when first launched by the user. It includes settings for the out-of-box experience, shortcuts, and Windows Terminal integration.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# /etc/wsl-distribution.conf\n\n[oobe]\ncommand = /etc/oobe.sh\ndefaultUid = 1000\ndefaultName = my-distro\n\n[shortcut]\nenabled = true\nicon = /usr/lib/wsl/my-icon.ico\n\n[windowsterminal]\nenabled = true\nProfileTemplate = /usr/lib/wsl/terminal-profile.json\n```\n\n----------------------------------------\n\nTITLE: Removing a WSL Plugin via Registry in PowerShell\nDESCRIPTION: Registry command to uninstall a WSL plugin by removing its entry from the Windows Registry. Requires restarting the WSL service to take effect.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nReg.exe delete HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Lxss\\Plugins /v demo-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Out-of-Box Experience (OOBE) Script in Bash\nDESCRIPTION: A sample bash script for creating the out-of-box experience (OOBE) for the WSL distribution. It prompts the user to create a default UNIX user account with specific settings and permissions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -ue\n\nDEFAULT_GROUPS='adm,cdrom,sudo,dip,plugdev'\nDEFAULT_UID='1000'\n\necho 'Please create a default UNIX user account. The username does not need to match your Windows username.'\necho 'For more information visit: https://aka.ms/wslusers'\n\nif getent passwd \"$DEFAULT_UID\" > /dev/null ; then\n  echo 'User account already exists, skipping creation'\n  exit 0\nfi\n\nwhile true; do\n\n  # Prompt from the username\n  read -p 'Enter new UNIX username: ' username\n\n  # Create the user\n  if /usr/sbin/adduser --uid \"$DEFAULT_UID\" --quiet --gecos ''  \"$username\"; then\n\n    if /usr/sbin/usermod \"$username\" -aG \"$DEFAULT_GROUPS\"; then\n      break\n    else\n      /usr/sbin/deluser \"$username\"\n    fi\n  fi\ndone\n```\n\n----------------------------------------\n\nTITLE: Restarting WSL Service to Load Plugins in PowerShell\nDESCRIPTION: Commands to restart the WSL service and test that it's working, which is necessary after installing or modifying a WSL plugin to ensure changes take effect.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nsc.exe stop wslservice\nwsl.exe echo \"test\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Windows Terminal Profile for WSL Distribution in JSON\nDESCRIPTION: An example JSON configuration for customizing the Windows Terminal profile generated for the WSL distribution. It includes settings for antialiasing, font weight, color scheme, and custom color definitions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profiles\": [\n    {\n      \"antialiasingMode\": \"aliased\",\n      \"fontWeight\": \"bold\",\n      \"colorScheme\": \"Postmodern Tango Light\"\n    }\n  ],\n  \"schemes\": [\n    {\n      \"name\": \"Postmodern Tango Light\",\n      \"black\": \"#0C0C0C\",\n      \"red\": \"#C50F1F\",\n      \"green\": \"#13A10E\",\n      \"yellow\": \"#C19C00\",\n      \"blue\": \"#0037DA\",\n      \"purple\": \"#881798\",\n      \"cyan\": \"#3A96DD\",\n      \"white\": \"#CCCCCC\",\n      \"brightBlack\": \"#767676\",\n      \"brightRed\": \"#E74856\",\n      \"brightGreen\": \"#16C60C\",\n      \"brightYellow\": \"#F9F1A5\",\n      \"brightBlue\": \"#3B78FF\",\n      \"brightPurple\": \"#B4009E\",\n      \"brightCyan\": \"#61D6D6\",\n      \"brightWhite\": \"#F2F2F2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a WSL Plugin via Registry in PowerShell\nDESCRIPTION: Registry command to install a WSL plugin by adding its path to the Windows Registry. This makes the plugin available to WSL when the service starts.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nReg.exe add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Lxss\\Plugins /v demo-plugin /t REG_SZ /d C:\\Path\\to\\plugin.dll  /f\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Settings in WSL Configuration File\nDESCRIPTION: Example of how to configure systemd settings in the /etc/wsl.conf file for local settings on a per-distribution basis. This snippet shows how to enable or disable systemd by default.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# /etc/wsl.conf\n\n[boot]\nsystemd=true|false\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Certificate to Trusted Root in PowerShell\nDESCRIPTION: Command to import a self-signed certificate into the Trusted Root Certification Authority store, which is required for Windows to trust the certificate used to sign WSL plugins.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncertutil -addstore \"Root\" \".\\$certname.cer\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Tar File for WSL Distribution in Bash\nDESCRIPTION: Command to create a compressed tar file of the root filesystem for the WSL distribution. This command uses numeric owner IDs, preserves absolute paths, and applies gzip compression.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/rootfs\n$ tar --numeric-owner --absolute-names -c  * | gzip --best > ../install.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Test Certificate for WSL Plugins in PowerShell\nDESCRIPTION: Script to create a self-signed certificate for testing WSL plugins, export it to a file, and sign a WSL plugin DLL. This is necessary because WSL plugins require digital signatures to run.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Create the cert\n$certname = \"WSLPluginTestCert\"\n$cert = New-SelfSignedCertificate -Subject \"CN=$certname\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256 -Type CodeSigningCert\n\n# Export it to a local path\nExport-Certificate -Cert $cert -FilePath \".\\$certname.cer\"\n\n# Sign the DLL file\nSet-AuthenticodeSignature -FilePath \"C:\\dev\\Path\\To\\Your\\WSLPlugin.dll\" -Certificate $cert\n```\n\n----------------------------------------\n\nTITLE: Defining WSL Distribution Manifest Structure in JSON\nDESCRIPTION: This JSON structure defines the format for the WSL distribution manifest, which contains metadata about available distributions for installation via 'wsl --install <distribution>'. It includes fields for the distribution name, friendly name, default status, and download URLs for different architectures.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ModernDistributions\": {\n\n\"<flavor>\": [\n    \n    {\n    \"Name\": \"<version name>\",\n    \"FriendlyName\": \"<friendly name>\",\n    \"Default\": true | false,\n    \"Amd64Url\": {\n        \"Url\": \"<tar url>\",\n        \"Sha256\": \"<tar sha265 hash>\"\n        },\n    \"Arm64Url\": {\n        \"Url\": \"<tar url>\",\n        \"Sha256\": \"<tar sha265 hash>\"\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Signing for WSL Plugin Development in PowerShell\nDESCRIPTION: Command to enable test signing mode on Windows, which is required for testing unsigned WSL plugins. May require disabling Secure Boot in BIOS if protected by Secure Boot policy.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-plugins.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n## If this command results in \"The value is protected by Secure Boot policy and cannot be modified or deleted\"\n## Then reboot the PC, go into BIOS settings, and disable Secure Boot. BitLocker may also affect your ability to modify this setting.\nBcdedit.exe -set TESTSIGNING ON\n```\n\n----------------------------------------\n\nTITLE: Sample WSL Distribution Manifest in JSON\nDESCRIPTION: This JSON snippet provides a sample WSL distribution manifest for a hypothetical distribution called 'my-distro'. It demonstrates how to define multiple versions of a distribution, including setting one as the default.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ModernDistributions\": {\n        \"my-distro\": [\n            {\n                \"Name\": \"my-distro-v3\", \n                \"Default\": true,\n                \"FriendlyName\": \"My distribution version 3 (latest)\"\n                 [...]\n            },\n            {\n                \"Name\": \"my-distro-v2\", \n                \"Default\": false,\n                \"FriendlyName\": \"My distribution version 2\"\n                 [...]\n            }\n    }        \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Certificates and wget in WSL\nDESCRIPTION: Command to install wget (web content retrieval tool) and SSL certificates for secure connections in WSL Linux distribution. These are common dependencies required for VS Code server functionality.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-vscode.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install wget ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Overriding WSL Distribution Manifest with PowerShell\nDESCRIPTION: This PowerShell script allows testing of a custom distribution tar by overriding the WSL distribution manifest. It creates a local manifest file and sets the necessary registry key to use this file instead of the default manifest.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/build-custom-distro.md#2025-04-06_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n#Requires -RunAsAdministrator\n\n[cmdletbinding(PositionalBinding = $false)]\nparam (\n    [Parameter(Mandatory = $true)][string]$TarPath,\n    [string]$Flavor = \"test-distro\",\n    [string]$Version = \"test-distro-v1\",\n    [string]$FriendlyName = \"Test distribution version 1\")\n\nSet-StrictMode -Version latest\n\n$TarPath = Resolve-Path $TarPath\n$hash = (Get-Filehash $TarPath -Algorithm SHA256).Hash\n\n\n$manifest= @{\n    ModernDistributions=@{\n        \"$Flavor\" = @(\n            @{\n                \"Name\" = \"$Version\"\n                Default = $true\n                FriendlyName = \"$FriendlyName\"\n                Amd64Url = @{\n                    Url = \"file://$TarPath\"\n                    Sha256 = \"0x$hash\"\n                }\n            })\n        }\n    }\n\n$manifestFile = \"$PSScriptRoot/manifest.json\"\n$manifest | ConvertTo-Json -Depth 5 | Out-File -encoding ascii $manifestFile\n\n\nSet-ItemProperty -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Lxss\" -Name DistributionListUrl -Value \"file://$manifestFile\" -Type String -Force \n```\n\n----------------------------------------\n\nTITLE: Updating Linux Package Repository in WSL\nDESCRIPTION: Command to update the package repository in Debian/Ubuntu-based Linux distributions within WSL. This ensures the package list is current before installing new packages.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-vscode.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross Distribution Mounts in WSL2\nDESCRIPTION: Configuration for enabling cross distribution mounts in WSL2 to support Docker Desktop, specified in /etc/wsl.conf file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_4\n\nLANGUAGE: config\nCODE:\n```\n[automount]\ncrossDistro = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Azure DevOps in WSL\nDESCRIPTION: Additional Git configuration required when working with Azure Repos or Azure DevOps, enabling proper path-based authentication.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-git.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global credential.https://dev.azure.com.useHttpPath true\n```\n\n----------------------------------------\n\nTITLE: WSL2 Global Configuration Settings\nDESCRIPTION: Configuration options for WSL2 settings including memory, processors, kernel path, and networking options, specified in %UserProfile%\\.wslconfig file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_5\n\nLANGUAGE: config\nCODE:\n```\n[wsl2]\nkernel=<path>              # An absolute Windows path to a custom Linux kernel.\nmemory=<size>              # How much memory to assign to the WSL2 VM.\nprocessors=<number>        # How many processors to assign to the WSL2 VM.\nswap=<size>                # How much swap space to add to the WSL2 VM. 0 for no swap file.\nswapFile=<path>            # An absolute Windows path to the swap vhd.\nlocalhostForwarding=<bool> # Boolean specifying if ports bound to wildcard or localhost in the WSL2 VM should be connectable from the host via localhost:port (default true).\n\n# <path> entries must be absolute Windows paths with escaped backslashes, for example C:\\\\Users\\\\Ben\\\\kernel\n# <size> entries must be size followed by unit, for example 8GB or 512MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Manager for Git ≥ v2.36.1 in WSL\nDESCRIPTION: Command to set up Git Credential Manager for WSL when using Git version 2.36.1 or newer but less than 2.39.0, pointing to the Windows GCM executable.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-git.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe\"\n```\n\n----------------------------------------\n\nTITLE: WSL Command Line Usage Documentation\nDESCRIPTION: Comprehensive documentation of wsl.exe command line arguments and options, including distribution management and execution controls.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nUsage: wsl.exe [Argument] [Options...] [CommandLine]\n\nArguments to run Linux binaries:\n\n    If no command line is provided, wsl.exe launches the default shell.\n\n    --exec, -e <CommandLine>\n        Execute the specified command without using the default Linux shell.\n\n    --\n        Pass the remaining command line as is.\n\nOptions:\n    --distribution, -d <DistributionName>\n        Run the specified distribution.\n\n    --user, -u <UserName>\n        Run as the specified user.\n\nArguments to manage Windows Subsystem for Linux:\n\n    --export <DistributionName> <FileName>\n        Exports the distribution to a tar file.\n        The filename can be - for standard output.\n\n    --import <DistributionName> <InstallLocation> <FileName>\n        Imports the specified tar file as a new distribution.\n        The filename can be - for standard input.\n\n    --list, -l [Options]\n        Lists distributions.\n\n        Options:\n            --all\n                List all distributions, including distributions that are currently\n                being installed or uninstalled.\n\n            --running\n                List only distributions that are currently running.\n\n    -setdefault, -s <DistributionName>\n        Sets the distribution as the default.\n\n    --terminate, -t <DistributionName>\n        Terminates the distribution.\n\n    --unregister <DistributionName>\n        Unregisters the distribution.\n\n    --upgrade <DistributionName>\n        Upgrades the distribution to the WslFs file system format.\n\n    --help\n        Display usage information.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Manager for Git ≥ v2.39.0 in WSL\nDESCRIPTION: Command to set up Git Credential Manager for WSL when using Git version 2.39.0 or newer, pointing to the Windows GCM executable.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-git.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe\"\n```\n\n----------------------------------------\n\nTITLE: Terminating a WSL Distribution with wslconfig.exe\nDESCRIPTION: Command to immediately terminate a specific WSL distribution using wslconfig.exe. This allows users to forcefully close a distribution rather than waiting for the normal 15-second timeout period.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwslconfig.exe /terminate <DistributionName>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Username in WSL\nDESCRIPTION: Command to set up your global Git username configuration. This is used to identify who made changes in commit history.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-git.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Interop Behavior in wsl.conf\nDESCRIPTION: Configuration entries for the wsl.conf file that control Windows interoperability behavior. These settings allow disabling Windows binary execution and controlling whether the Windows PATH is appended to the Linux PATH environment variable.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[interop]\n\nenabled=false # enable launch of Windows binaries; default is true\n\nappendWindowsPath=false # append Windows path to $PATH variable; default is true\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Selection\nDESCRIPTION: Command to set the environment variable for selecting a specific GPU in a multi-GPU system.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/gpu-compute.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport MESA_D3D12_DEFAULT_ADAPTER_NAME=\"<NameFromDeviceManager>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL Interop Behavior\nDESCRIPTION: Configuration entries in wsl.conf for controlling Windows interop behavior, including options to enable/disable Windows binary launching and PATH variable modification\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n[interop]\n\nenabled=false # enable launch of Windows binaries; default is true\n\nappendWindowsPath=false # append Windows path to $PATH variable; default is true\n```\n\n----------------------------------------\n\nTITLE: Setting up NVIDIA Container Toolkit Repository\nDESCRIPTION: Commands to configure the NVIDIA Container Toolkit repository and install required packages.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/gpu-compute.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-docker-keyring.gpg\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-docker-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y nvidia-docker2\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Firewall Rule for WSL Python\nDESCRIPTION: Command to add a Windows firewall rule allowing WSL Python process to listen on any port using netsh.exe from an elevated Windows command prompt\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnetsh.exe advfirewall firewall add rule name=wsl_python dir=in action=allow program=\"C:\\users\\<username>\\appdata\\local\\packages\\canonicalgrouplimited.ubuntuonwindows_79rhkp1fndgsc\\localstate\\rootfs\\usr\\bin\\python2.7\" enable=yes\n```\n\n----------------------------------------\n\nTITLE: Installing GIMP Image Editor\nDESCRIPTION: Command to install GIMP, a free and open-source raster graphics editor for image manipulation and editing.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/gui-apps.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install gimp -y\n```\n\n----------------------------------------\n\nTITLE: Mounting DrvFs with Case Sensitivity Options in WSL\nDESCRIPTION: Example command for mounting a Windows drive in WSL with case sensitivity options. The 'case=dir' option ensures only directories with the per-directory case sensitivity flag are treated as case sensitive.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -t drvfs C: /mnt/c -o case=dir\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code in WSL\nDESCRIPTION: Command to open the current directory in VS Code while connected to WSL\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Mounting DrvFs with Unix Metadata Support in WSL\nDESCRIPTION: Command to mount a Windows drive (C:) with Linux metadata support in WSL. This enables setting owner and permissions with chmod/chown and creation of special files like fifos and unix sockets.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmount -t drvfs C: /mnt/c -o metadata\n```\n\n----------------------------------------\n\nTITLE: Cloning Django Project in WSL\nDESCRIPTION: Command to navigate to the Django project directory in WSL environment\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd helloworld-django\n```\n\n----------------------------------------\n\nTITLE: Mounting DrvFs with Custom Permissions in WSL\nDESCRIPTION: Example showing how to mount a Windows drive with specific user ID, group ID, and permission masks. This allows fine-grained control over file permissions for files without metadata.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmount -t drvfs C: /mnt/c -o uid=1000,gid=1000,umask=22,fmask=111\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Installation with Hello World Container\nDESCRIPTION: Command to test that Docker is working correctly by running the simple built-in hello-world container image.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring WSLENV for Environment Variable Sharing\nDESCRIPTION: Example of setting the WSLENV variable to control how environment variables are shared between WSL and Windows. Includes path translation, list formatting, and directional control flags.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nWSLENV=GOPATH/l:USERPROFILE/pu:DISPLAY\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version in WSL\nDESCRIPTION: Command to verify Docker installation by displaying the version and build number of Docker within a WSL distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\n```\n\n----------------------------------------\n\nTITLE: Using wslpath for WSL/Windows Path Conversion in Bash\nDESCRIPTION: Demonstrates usage of the wslpath command to convert between WSL and Windows paths. Includes options for forcing absolute paths, translating to/from Windows paths, and using forward slashes.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwslpath usage:\n  -a    force result to absolute path format\n  -u    translate from a Windows path to a WSL path (default)\n  -w    translate from a WSL path to a Windows path\n  -m    translate from a WSL path to a Windows path, with '/' instead of '\\\\'\n\n  EX: wslpath 'c:\\users'\n```\n\n----------------------------------------\n\nTITLE: Setting WSL Version for a Distribution in PowerShell\nDESCRIPTION: Command to set a specific Linux distribution to use WSL version 2. This is necessary for Docker Desktop integration as Docker requires WSL 2 for full functionality.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-containers.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-version <distro> 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Ctrl+C Alternative in WSL\nDESCRIPTION: Bash command to map Ctrl+K as an alternative to Ctrl+C due to console input recognition issues. This mapping needs to be done per terminal session or added to .bashrc file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nstty intr \\^k\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aliases in WSL .profile\nDESCRIPTION: Instructions for setting up custom aliases in the .profile file to create shortcuts for frequently used commands, specifically for database services like PostgreSQL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano .profile\n```\n\nLANGUAGE: bash\nCODE:\n```\n# My Aliases\nalias start-pg='sudo service postgresql start'\nalias run-pg='sudo -u postgres psql'\n```\n\n----------------------------------------\n\nTITLE: WSL Network Interface Command\nDESCRIPTION: Example command for adding IP addresses to network interfaces in WSL. Requires Windows admin privileges.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nip addr add\n```\n\n----------------------------------------\n\nTITLE: Checking Running Services in WSL\nDESCRIPTION: Command to display all services currently running on a WSL distribution, helpful for monitoring and managing system services.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nservice --status-all\n```\n\n----------------------------------------\n\nTITLE: WSL Network Route Configuration\nDESCRIPTION: Example command for managing network routes in WSL. Requires Windows admin privileges.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nip route add\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Ubuntu WSL\nDESCRIPTION: Commands for installing Redis on WSL Ubuntu, including updating packages, installing the Redis server, verifying installation, and basic server control commands.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install redis-server\n```\n\nLANGUAGE: bash\nCODE:\n```\nredis-server --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo service redis-server start\n```\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli ping\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo service redis-server stop\n```\n\n----------------------------------------\n\nTITLE: Invoking Windows Binaries from WSL Command Line\nDESCRIPTION: Example demonstrating Windows/Ubuntu interoperability introduced in build 14951. Shows how to add Windows executables to the PATH and invoke Windows commands like notepad, ipconfig, findstr, and cmd directly from the WSL bash shell.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=$PATH:/mnt/c/Windows/System32\n$ notepad.exe\n$ ipconfig.exe | grep IPv4 | cut -d: -f2\n$ ls -la | findstr.exe foo.txt\n$ cmd.exe /c dir\n```\n\n----------------------------------------\n\nTITLE: Managing PostgreSQL Users and Databases\nDESCRIPTION: Commands for viewing PostgreSQL user accounts and exiting the PostgreSQL shell.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/wsl-database.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npsql --command=\"\\du\"\n\\q\n```\n\n----------------------------------------\n\nTITLE: Example Linux Command for File Movement\nDESCRIPTION: Example showing fixed trailing slash behavior in file movement commands.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ mv a/c/ a/b/\n```\n\n----------------------------------------\n\nTITLE: Updating WSL to Pre-release Version via Command Line\nDESCRIPTION: Command to update WSL to the latest preview release without joining the Windows Insider Program. This allows testing of pre-release features while maintaining stable Windows installation.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwsl --update --pre-release\n```\n\n----------------------------------------\n\nTITLE: Example Linux Command for Piping\nDESCRIPTION: Example demonstrating Linux process stdin/stdout pipe redirection between CMD and bash.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n>dir | bash -c \"grep foo\"\n```\n\n----------------------------------------\n\nTITLE: Changing WSL Version for Installed Distribution\nDESCRIPTION: This command changes the WSL version for an installed Linux distribution. Replace <distro name> with the distribution name and the number with the desired WSL version.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-version <distro name> 2\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Syscalls in WSL Build 14328\nDESCRIPTION: Comprehensive list of syscalls implemented in WSL Build 14328. These syscalls have at least some level of implementation, though not all parameters may be supported for every call.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n`ACCEPT`<br/>\n`ACCEPT4`<br/>\n`ACCESS`<br/>\n`ALARM`<br/>\n`ARCH_PRCTL`<br/>\n`BIND`<br/>\n`BRK`<br/>\n`CAPGET`<br/>\n`CAPSET`<br/>\n`CHDIR`<br/>\n`CHMOD`<br/>\n`CHOWN`<br/>\n`CLOCK_GETRES`<br/>\n`CLOCK_GETTIME`<br/>\n`CLOCK_NANOSLEEP`<br/>\n`CLONE`<br/>\n`CLOSE`<br/>\n`CONNECT`<br/>\n`CREAT`<br/>\n`DUP`<br/>\n`DUP2`<br/>\n`DUP3`<br/>\n`EPOLL_CREATE`<br/>\n`EPOLL_CREATE1`<br/>\n`EPOLL_CTL`<br/>\n`EPOLL_WAIT`<br/>\n`EVENTFD`<br/>\n`EVENTFD2`<br/>\n`EXECVE`<br/>\n`EXIT`<br/>\n`EXIT_GROUP`<br/>\n`FACCESSAT`<br/>\n`FADVISE64`<br/>\n`FCHDIR`<br/>\n`FCHMOD`<br/>\n`FCHMODAT`<br/>\n`FCHOWN`<br/>\n`FCHOWNAT`<br/>\n`FCNTL64`<br/>\n`FDATASYNC`<br/>\n`FLOCK`<br/>\n`FORK`<br/>\n`FSETXATTR`<br/>\n`FSTAT64`<br/>\n`FSTATAT64`<br/>\n`FSTATFS64`<br/>\n`FSYNC`<br/>\n`FTRUNCATE`<br/>\n`FTRUNCATE64`<br/>\n`FUTEX`<br/>\n`GETCPU`<br/>\n`GETCWD`<br/>\n`GETDENTS`<br/>\n`GETDENTS64`<br/>\n`GETEGID`<br/>\n`GETEGID16`<br/>\n`GETEUID`<br/>\n`GETEUID16`<br/>\n`GETGID`<br/>\n`GETGID16`<br/>\n`GETGROUPS`<br/>\n`GETPEERNAME`<br/>\n`GETPGID`<br/>\n`GETPGRP`<br/>\n`GETPID`<br/>\n`GETPPID`<br/>\n`GETPRIORITY`<br/>\n`GETRESGID`<br/>\n`GETRESGID16`<br/>\n`GETRESUID`<br/>\n`GETRESUID16`<br/>\n`GETRLIMIT`<br/>\n`GETRUSAGE`<br/>\n`GETSID`<br/>\n`GETSOCKNAME`<br/>\n`GETSOCKOPT`<br/>\n`GETTID`<br/>\n`GETTIMEOFDAY`<br/>\n`GETUID`<br/>\n`GETUID16`<br/>\n`GETXATTR`<br/>\n`GET_ROBUST_LIST`<br/>\n`GET_THREAD_AREA`<br/>\n`INOTIFY_ADD_WATCH`<br/>\n`INOTIFY_INIT`<br/>\n`INOTIFY_RM_WATCH`<br/>\n`IOCTL`<br/>\n`IOPRIO_GET`<br/>\n`IOPRIO_SET`<br/>\n`KEYCTL`<br/>\n`KILL`<br/>\n`LCHOWN`<br/>\n`LINK`<br/>\n`LINKAT`<br/>\n`LISTEN`<br/>\n`LLSEEK`<br/>\n`LSEEK`<br/>\n`LSTAT64`<br/>\n`MADVISE`<br/>\n`MKDIR`<br/>\n`MKDIRAT`<br/>\n`MKNOD`<br/>\n`MLOCK`<br/>\n`MMAP`<br/>\n`MMAP2`<br/>\n`MOUNT`<br/>\n`MPROTECT`<br/>\n`MREMAP`<br/>\n`MSYNC`<br/>\n`MUNLOCK`<br/>\n`MUNMAP`<br/>\n`NANOSLEEP`<br/>\n`NEWUNAME`<br/>\n`OPEN`<br/>\n`OPENAT`<br/>\n`PAUSE`<br/>\n`PERF_EVENT_OPEN`<br/>\n`PERSONALITY`<br/>\n`PIPE`<br/>\n`PIPE2`<br/>\n`POLL`<br/>\n`PPOLL`<br/>\n`PRCTL`<br/>\n`PREAD64`<br/>\n`PROCESS_VM_READV`<br/>\n`PROCESS_VM_WRITEV`<br/>\n`PSELECT6`<br/>\n`PTRACE`<br/>\n`PWRITE64`<br/>\n`READ`<br/>\n`READLINK`<br/>\n`READV`<br/>\n`REBOOT`<br/>\n`RECV`<br/>\n`RECVFROM`<br/>\n`RECVMSG`<br/>\n`RENAME`<br/>\n`RMDIR`<br/>\n`RT_SIGACTION`<br/>\n`RT_SIGPENDING`<br/>\n`RT_SIGPROCMASK`<br/>\n`RT_SIGRETURN`<br/>\n`RT_SIGSUSPEND`<br/>\n`RT_SIGTIMEDWAIT`<br/>\n`SCHED_GETAFFINITY`<br/>\n`SCHED_GETPARAM`<br/>\n`SCHED_GETSCHEDULER`<br/>\n`SCHED_GET_PRIORITY_MAX`<br/>\n`SCHED_GET_PRIORITY_MIN`<br/>\n`SCHED_SETAFFINITY`<br/>\n`SCHED_SETPARAM`<br/>\n`SCHED_SETSCHEDULER`<br/>\n`SCHED_YIELD`<br/>\n`SELECT`<br/>\n`SEND`<br/>\n`SENDMMSG`<br/>\n`SENDMSG`<br/>\n`SENDTO`<br/>\n`SETDOMAINNAME`<br/>\n`SETGID`<br/>\n`SETGROUPS`<br/>\n`SETHOSTNAME`<br/>\n`SETITIMER`<br/>\n`SETPGID`<br/>\n`SETPRIORITY`<br/>\n`SETREGID`<br/>\n`SETRESGID`<br/>\n`SETRESUID`<br/>\n`SETREUID`<br/>\n`SETRLIMIT`<br/>\n`SETSID`<br/>\n`SETSOCKOPT`<br/>\n`SETTIMEOFDAY`<br/>\n`SETUID`<br/>\n`SETXATTR`<br/>\n`SET_ROBUST_LIST`<br/>\n`SET_THREAD_AREA`<br/>\n`SET_TID_ADDRESS`<br/>\n`SHUTDOWN`<br/>\n`SIGACTION`<br/>\n`SIGALTSTACK`<br/>\n`SIGPENDING`<br/>\n`SIGPROCMASK`<br/>\n`SIGRETURN`<br/>\n`SIGSUSPEND`<br/>\n`SOCKET`<br/>\n`SOCKETCALL`<br/>\n`SOCKETPAIR`<br/>\n`SPLICE`<br/>\n`STAT64`<br/>\n`STATFS64`<br/>\n`SYMLINK`<br/>\n`SYMLINKAT`<br/>\n`SYNC`<br/>\n`SYSINFO`<br/>\n`TEE`<br/>\n`TGKILL`<br/>\n`TIME`<br/>\n`TIMERFD_CREATE`<br/>\n`TIMERFD_GETTIME`<br/>\n`TIMERFD_SETTIME`<br/>\n`TIMES`<br/>\n`TKILL`<br/>\n`TRUNCATE`<br/>\n`TRUNCATE64`<br/>\n`UMASK`<br/>\n`UMOUNT`<br/>\n`UMOUNT2`<br/>\n`UNLINK`<br/>\n`UNLINKAT`<br/>\n`UNSHARE`<br/>\n`UTIME`<br/>\n`UTIMENSAT`<br/>\n`UTIMES`<br/>\n`VFORK`<br/>\n`WAIT4`<br/>\n`WAITPID`<br/>\n`WRITE`<br/>\n`WRITEV`<br/>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Linux Distribution in WSL\nDESCRIPTION: This command runs a specific Linux distribution without changing the default. Replace <DistributionName> with the desired distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nwsl -d <DistributionName>\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Syscalls in Earlier WSL Build\nDESCRIPTION: List of newly implemented syscalls in an earlier version of WSL. These syscalls have at least some level of implementation, though not all parameters may be fully supported.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n`FCHOWNAT`<br/>\n`GETEUID`<br/>\n`GETGID`<br/>\n`GETRESUID`<br/>\n`GETXATTR`<br/>\n`PTRACE`<br/>\n`SETGID`<br/>\n`SETGROUPS`<br/>\n`SETHOSTNAME`<br/>\n`SETXATTR`<br/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default WSL Version\nDESCRIPTION: This command sets the default WSL version for new Linux distribution installations. Replace <Version#> with 1 or 2.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-default-version <Version#>\n```\n\n----------------------------------------\n\nTITLE: Listing New Syscall in WSL Build 14332\nDESCRIPTION: The single new syscall implemented in WSL Build 14332. This syscall has at least some level of implementation, though all parameters may not be fully supported.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/release-notes.md#2025-04-06_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n`READLINKAT`<br/>\n```\n\n----------------------------------------\n\nTITLE: Unregistering a WSL Distribution in PowerShell\nDESCRIPTION: Command to unregister and uninstall a WSL distribution. This permanently removes all data, settings, and software associated with the distribution. The distribution can be reinstalled from the Microsoft Store.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --unregister <DistributionName>\n```\n\n----------------------------------------\n\nTITLE: Installing Software in Ubuntu using apt-get\nDESCRIPTION: Use the apt-get package manager to install software in Ubuntu. First update the package list, then install the desired application.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install <app_name>\n```\n\n----------------------------------------\n\nTITLE: Running WSL as a Specific User in PowerShell\nDESCRIPTION: Command to run WSL as a specified user account. The user must already exist within the WSL distribution being launched.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --user <Username>\n```\n\n----------------------------------------\n\nTITLE: Updating Installed Software in Ubuntu\nDESCRIPTION: Update the package list and upgrade all installed packages to their latest versions in Ubuntu.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Unmounting a WSL VHD File After Repair\nDESCRIPTION: PowerShell command to unmount a WSL distribution's VHD file after completing the repair process.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/disk-space.md#2025-04-06_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe --unmount\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Directory Path\nDESCRIPTION: Display the full path of the current working directory using the pwd command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npwd\n```\n\n----------------------------------------\n\nTITLE: Import WSL Distribution Command\nDESCRIPTION: Command to import a WSL distribution from a tar file. Requires distribution name, installation location, and source filename.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/enterprise.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --import <Distro> <InstallLocation> <FileName>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Directory\nDESCRIPTION: Create a new directory named 'hello_world' using the mkdir command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello_world\n```\n\n----------------------------------------\n\nTITLE: Export WSL Distribution Command\nDESCRIPTION: Command to export a WSL distribution to a tar file for distribution across machines. Requires distribution name and output filename.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/enterprise.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --export <Distro> <FileName>\n```\n\n----------------------------------------\n\nTITLE: Changing Directories\nDESCRIPTION: Navigate to the 'hello_world' directory using the cd command.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd hello_world\n```\n\n----------------------------------------\n\nTITLE: Disabling and re-enabling WSL interoperability\nDESCRIPTION: These commands show how to disable and re-enable the ability to run Windows tools in a WSL session.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho 0 > /proc/sys/fs/binfmt_misc/WSLInterop\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 1 > /proc/sys/fs/binfmt_misc/WSLInterop\n```\n\n----------------------------------------\n\nTITLE: Editing a File with Notepad\nDESCRIPTION: Open the file 'hello_world.txt' for editing in Windows Notepad.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/tutorials/linux.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnotepad.exe hello_world.txt\n```\n\n----------------------------------------\n\nTITLE: Executing Windows CMD commands from Linux\nDESCRIPTION: These commands demonstrate how to run Windows CMD commands and use Windows tools from a Linux distribution in WSL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncmd.exe /C dir\n```\n\nLANGUAGE: bash\nCODE:\n```\nping.exe www.microsoft.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotepad.exe \"C:\\temp\\foo.txt\"\n```\n\n----------------------------------------\n\nTITLE: Running Windows commands from Linux\nDESCRIPTION: This example shows how to run Windows commands and combine them with Linux commands in a WSL distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nipconfig.exe | grep IPv4 | cut -d: -f2\n```\n\nLANGUAGE: bash\nCODE:\n```\nls -la | findstr.exe foo.txt\n```\n\n----------------------------------------\n\nTITLE: Combining Windows and Linux commands in PowerShell\nDESCRIPTION: These examples demonstrate how to combine Windows and Linux commands using pipes in PowerShell.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl ls -la | findstr \"git\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> dir | wsl grep git\n```\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> wsl ls -la > out.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Packages via APT\nDESCRIPTION: Command to update and upgrade Ubuntu/Debian packages using the apt package manager. Requires sudo privileges and combines both update and upgrade operations.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating Linux distribution using sudo from Windows\nDESCRIPTION: This command shows how to update the default Linux distribution using sudo from a Windows command line.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> wsl sudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Opening Current Directory in VS Code with WSL\nDESCRIPTION: Command to open the current directory in Visual Studio Code using a WSL remote server. This allows for seamless development in the WSL environment using VS Code's full feature set.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Running Linux commands from Windows PowerShell\nDESCRIPTION: This example demonstrates how to run the Linux 'ls' command from Windows PowerShell using WSL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> wsl ls -la\n```\n\n----------------------------------------\n\nTITLE: Running Linux Commands from Windows PowerShell\nDESCRIPTION: Example of running a Linux command (ls -la) from a Windows PowerShell prompt using WSL. This demonstrates the interoperability between Windows and Linux commands in WSL.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl ls -la\n```\n\n----------------------------------------\n\nTITLE: Opening Windows File Explorer from WSL\nDESCRIPTION: This command opens the current directory in Windows File Explorer from a WSL command line.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexplorer.exe .\n```\n\n----------------------------------------\n\nTITLE: Mixing Linux and Windows Commands in PowerShell\nDESCRIPTION: Examples of combining Linux and Windows commands in PowerShell using WSL. These commands demonstrate how to use Linux commands to filter output from Windows commands and vice versa.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nwsl ls -la | findstr \"git\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\ndir | wsl grep git\n```\n\n----------------------------------------\n\nTITLE: Installing WSL Linux Distribution Package with PowerShell\nDESCRIPTION: PowerShell command to install a downloaded Linux distribution package (.appx file) for WSL. This command uses Add-AppxPackage to install the package, where app_name should be replaced with the actual filename.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-AppxPackage .\\app_name.appx\n```\n\n----------------------------------------\n\nTITLE: Running Windows Tools from WSL Bash\nDESCRIPTION: Examples of running Windows executables directly from the WSL Bash command line. This includes opening Windows applications and using Windows tools in combination with Linux commands.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnotepad.exe .bashrc\n```\n\nLANGUAGE: bash\nCODE:\n```\nipconfig.exe | grep IPv4 | cut -d: -f2\n```\n\n----------------------------------------\n\nTITLE: Downloading Ubuntu 20.04 Using curl Command-Line Utility\nDESCRIPTION: Command to download Ubuntu 20.04 Linux distribution for WSL using the curl utility. The command specifies curl.exe to ensure the actual curl executable is used rather than PowerShell's alias.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncurl.exe -L -o ubuntu-2004.appx https://aka.ms/wslubuntu2004\n```\n\n----------------------------------------\n\nTITLE: Running Windows Tools with Linux Commands in PowerShell\nDESCRIPTION: Example of running a Windows tool (ipconfig) and piping its output through Linux commands (grep and cut) using WSL in PowerShell. This demonstrates advanced command mixing between Windows and Linux.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/setup/environment.md#2025-04-06_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nipconfig.exe | wsl grep IPv4 | wsl cut -d: -f2\n```\n\n----------------------------------------\n\nTITLE: Setting WSL 2 as Default Version in PowerShell\nDESCRIPTION: This PowerShell command sets WSL 2 as the default version when installing new Linux distributions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --set-default-version 2\n```\n\n----------------------------------------\n\nTITLE: Deprecated WSL Configuration Command\nDESCRIPTION: Legacy command previously used for configuring WSL Linux distributions. This has been replaced with the wsl.exe command syntax.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\nwslconfig.exe [Argument] [Options]\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Distribution Package\nDESCRIPTION: PowerShell command to install a Linux distribution package using Add-AppxPackage cmdlet.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-on-server.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-AppxPackage .\\app_name.appx\n```\n\n----------------------------------------\n\nTITLE: Deprecated Bash Command for WSL\nDESCRIPTION: Legacy command previously used to launch Bash in WSL. This has been replaced with the wsl.exe command syntax.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\nbash [Options]\n```\n\n----------------------------------------\n\nTITLE: Extracting Linux Distribution Package\nDESCRIPTION: PowerShell commands to rename and extract the contents of a downloaded Linux distribution package file.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-on-server.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRename-Item .\\Ubuntu.appx .\\Ubuntu.zip\nExpand-Archive .\\Ubuntu.zip .\\Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Deprecated lxrun Command for WSL\nDESCRIPTION: Legacy command previously used for managing WSL distributions. This has been replaced with the wsl.exe command syntax.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/basic-commands.md#2025-04-06_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\nlxrun /[Argument]\n```\n\n----------------------------------------\n\nTITLE: Installing WSL on Windows Server 2022\nDESCRIPTION: Simple command to install WSL on Windows Server 2022 that enables required components, downloads Linux kernel, sets WSL 2 as default, and installs Ubuntu distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-on-server.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Installing WSL from Microsoft Store using PowerShell\nDESCRIPTION: This command installs the WSL servicing update from the Microsoft Store on Windows version 19044 or higher.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/compare-versions.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe --install\n```\n\n----------------------------------------\n\nTITLE: WSL Mount Command Example\nDESCRIPTION: Example of the WSL mount command that can be controlled via Intune settings\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/intune.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwsl --mount\n```\n\n----------------------------------------\n\nTITLE: Updating WSL from Microsoft Store using PowerShell\nDESCRIPTION: This command updates WSL to ensure you're receiving the latest features and servicing from the Microsoft Store.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/compare-versions.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl.exe --update\n```\n\n----------------------------------------\n\nTITLE: WSL Debug Shell Command Example\nDESCRIPTION: Example of the WSL debug shell command that can be controlled via Intune settings\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/intune.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwsl.exe --debug-shell\n```\n\n----------------------------------------\n\nTITLE: Updating WSL without Microsoft Store access using PowerShell\nDESCRIPTION: This command updates WSL by downloading directly from the web, bypassing the Microsoft Store. This method requires manual updates for each new release.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/compare-versions.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --update --web-download\n```\n\n----------------------------------------\n\nTITLE: Navigating to WSL Settings in Intune\nDESCRIPTION: Path navigation sequence to access WSL settings in the Microsoft Intune admin center portal\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/intune.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDevices -> Configuration Profiles -> Create -> New Policy -> Windows 10 and later -> Settings catalog\n```\n\n----------------------------------------\n\nTITLE: Downloading Ubuntu 20.04 Using PowerShell Invoke-WebRequest\nDESCRIPTION: PowerShell command to download Ubuntu 20.04 Linux distribution for WSL using the Invoke-WebRequest cmdlet. The command downloads the appx package and saves it as Ubuntu.appx in the current directory.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-manual.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n```\n\n----------------------------------------\n\nTITLE: Querying Windows Host IP Address from WSL2\nDESCRIPTION: This Bash command retrieves the IP address of the Windows host from within a WSL2 Linux distribution. It uses 'ip route' to show the routing table and extracts the default gateway address.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/networking.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nip route show | grep -i default | awk '{ print $3}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Subsystem for Linux Feature\nDESCRIPTION: PowerShell command to enable the WSL optional feature on Windows Server. Must be run as Administrator and requires system reboot after execution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-on-server.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n```\n\n----------------------------------------\n\nTITLE: Restarting CentOS WSL Distribution with New Default User\nDESCRIPTION: This PowerShell snippet demonstrates how to terminate the CentOS WSL instance and restart it to apply the new default user settings.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/use-custom-distro.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --terminate CentOS\nwsl -d CentOS\n```\n\n----------------------------------------\n\nTITLE: Adding Linux Distribution to PATH\nDESCRIPTION: PowerShell commands to add the Linux distribution path to the Windows environment PATH variable for the current user.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install-on-server.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$userenv = [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n[System.Environment]::SetEnvironmentVariable(\"PATH\", $userenv + \";C:\\Users\\Administrator\\Ubuntu\", \"User\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default User Account in Imported CentOS WSL Distribution\nDESCRIPTION: This snippet shows how to install necessary tools, create a user account, and set it as the default user in the imported CentOS WSL distribution. It also adds the user to the sudoers file for elevated permissions.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/use-custom-distro.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum update -y && yum install passwd sudo -y\nmyUsername=caloewen\nadduser -G wheel $myUsername\necho -e \"[user]\\ndefault=$myUsername\" >> /etc/wsl.conf\npasswd $myUsername\n```\n\n----------------------------------------\n\nTITLE: Querying Linux Distribution IP Address in Windows\nDESCRIPTION: This PowerShell command retrieves the IP address of a Linux distribution running in WSL2. It uses the 'wsl' command to execute the 'hostname -I' command within the specified distribution.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/networking.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwsl -d <DistributionName> hostname -I\n```\n\n----------------------------------------\n\nTITLE: Importing CentOS Tar File into WSL using PowerShell\nDESCRIPTION: This snippet demonstrates how to create a directory for storing the WSL distribution and import the CentOS tar file into WSL using PowerShell commands.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/use-custom-distro.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd C:\\temp\nmkdir E:\\wslDistroStorage\\CentOS\nwsl --import CentOS E:\\wslDistroStorage\\CentOS .\\centos.tar\nwsl -l -v\nwsl -d CentOS\n```\n\n----------------------------------------\n\nTITLE: Accessing Linux and Windows file systems from PowerShell\nDESCRIPTION: These commands show how to access both Linux and Windows file systems using WSL from PowerShell.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/filesystems.md#2025-04-06_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> wsl ls -la /proc/cpuinfo\n```\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp> wsl ls -la \"/mnt/c/Program Files\"\n```\n\n----------------------------------------\n\nTITLE: Exporting CentOS Container to Tar File using Docker in WSL\nDESCRIPTION: This snippet shows how to run a CentOS container in Docker, export it as a tar file, and clean up the container. It requires Docker Desktop for Windows with WSL 2 integration enabled.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/use-custom-distro.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t --name wsl_export centos ls /\ndocker export wsl_export > /mnt/c/temp/centos.tar\ndocker rm wsl_export\n```\n\n----------------------------------------\n\nTITLE: Listing Available Linux Distributions for WSL\nDESCRIPTION: This command displays a list of Linux distributions available for download through the online store.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/install.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --list --online\n```\n\n----------------------------------------\n\nTITLE: Installing systemd packages on Debian-based distributions\nDESCRIPTION: Command to update package repositories and install systemd and systemd-sysv packages on Debian/Ubuntu/Kali Rolling distributions, which is required for proper systemd functionality.\nSOURCE: https://github.com/MicrosoftDocs/WSL/blob/main/WSL/systemd.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y && sudo apt-get install systemd systemd-sysv -y\n```"
  }
]